{
    "HUMANN_GROUP": {
        "name_process": "HUMANN_GROUP",
        "string_process": "process HUMANN_GROUP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(tsv)\n\n    output:\n    tuple val(meta), path(\"${prefix}\")                    , emit: regroup\n    path \"versions.yml\"                                   , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_regroup_table \\\\\n        --input $tsv \\\\\n        --output ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_regroup_table \\\\\n        --input $tsv \\\\\n        --output ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tsv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' : 'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MOTUS_INSTALL": {
        "name_process": "MOTUS_INSTALL",
        "string_process": "process MOTUS_INSTALL {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::motus=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/motus:3.0.1--pyhdfd78af_0' :\n        'quay.io/biocontainers/motus:3.0.1--pyhdfd78af_0' }\"\n\n    input:\n    path motus_download\n\n    output:\n    path \"$prefix\"                                       , emit: motus_db\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"db_mOTU\"\n    \"\"\"\n    cp $motus_download dwdDB.py\n    python dwdDB.py \\\\\n        -t $task.cpus\n    if [ \"$prefix\" != \"db_mOTU\" ]; then\n        mv db_mOTU $prefix\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mOTUs: \\$(grep motus ${prefix}/db_mOTU_versions | sed 's/motus\\\\t//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"db_mOTU\"\n    \"\"\"\n    cp $motus_download dwdDB.py\n    python dwdDB.py \\\\\n        -t $task.cpus\n    if [ \"$prefix\" != \"db_mOTU\" ]; then\n        mv db_mOTU $prefix\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mOTUs: \\$(grep motus ${prefix}/db_mOTU_versions | sed 's/motus\\\\t//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "motus_download"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::motus=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/motus:3.0.1--pyhdfd78af_0' : 'quay.io/biocontainers/motus:3.0.1--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SANKEY": {
        "name_process": "SANKEY",
        "string_process": "process SANKEY {\n    label 'process_low'\n    label 'error_ignore'\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-trackviewer=1.28.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' &&\n                    !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-trackviewer:1.28.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-trackviewer:1.28.0--r41h399db7b_0' }\"\n\n    input:\n    path reports\n\n    output:\n    path \"*_sankey.html\"                                 , emit: summary\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"pvaian\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    #######################################################################\n    #######################################################################\n    ## Created on March 10, 2022 use pavian to create sankey plots\n    ## Copyright (c) 2021 Jianhong Ou (jianhong.ou@gmail.com)\n    #######################################################################\n    #######################################################################\n    if(!require(pavian)) {\n        if(!require(remotes)) { install.packages(\"remotes\", repos=\"https://cloud.r-project.org\")}\n        remotes::install_github(\"fbreitwieser/pavian\")\n    }\n    versions <- c(\"${task.process}:\")\n    pkgs <- \"pavian\"\n    for(pkg in pkgs){\n        # load library\n        library(pkg, character.only=TRUE)\n        # parepare for versions.yml\n        versions <- c(versions,\n            paste0(\"    \", pkg, \": \", as.character(packageVersion(pkg))))\n    }\n    writeLines(versions, \"versions.yml\") # wirte versions.yml\n\n    getNames <- function(n){\n        x <- strsplit(n, \"\")\n        maxN <- max(lengths(x))\n        x <- lapply(x, function(.ele){\n            rev(c(rep(\"_\", maxN), .ele))[seq.int(maxN)]\n        })\n        x <- do.call(rbind, x)\n        x <- apply(x, 2, unique, simply=FALSE)\n        xl <- lengths(x)\n        stopID <- which(xl>1)\n        if(length(stopID)){\n            stopID <- stopID[1]\n            if(stopID>1){\n                x <- x[seq.int(stopID-1)]\n                x <- paste(rev(x), collapse=\"\")\n                n <- sub(x, \"\", n, fixed=TRUE)\n            }\n        }\n        n\n    }\n\n    REPORTS <- strsplit(\"$reports\", \" \")[[1]]\n    NAMES <- getNames(REPORTS)\n    FILENAME <- \"${prefix}_sankey.html\"\n\n    ## prepare data from out to data frame with colnames:\n    ## \"name\",\"taxLineage\",\"taxonReads\", \"cladeReads\",\"depth\", \"taxRank\"\n    reports <- pavian::read_reports(REPORTS, NAMES)\n    null <- mapply(reports, names(reports), FUN=function(rep, name){\n        network <- pavian:::build_sankey_network(rep)\n        htmlwidgets::saveWidget(network, paste(name, FILENAME, sep=\"_\"))\n    })\n    \"\"\"\n}",
        "nb_lignes_process": 76,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"pvaian\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    #######################################################################\n    #######################################################################\n    ## Created on March 10, 2022 use pavian to create sankey plots\n    ## Copyright (c) 2021 Jianhong Ou (jianhong.ou@gmail.com)\n    #######################################################################\n    #######################################################################\n    if(!require(pavian)) {\n        if(!require(remotes)) { install.packages(\"remotes\", repos=\"https://cloud.r-project.org\")}\n        remotes::install_github(\"fbreitwieser/pavian\")\n    }\n    versions <- c(\"${task.process}:\")\n    pkgs <- \"pavian\"\n    for(pkg in pkgs){\n        # load library\n        library(pkg, character.only=TRUE)\n        # parepare for versions.yml\n        versions <- c(versions,\n            paste0(\"    \", pkg, \": \", as.character(packageVersion(pkg))))\n    }\n    writeLines(versions, \"versions.yml\") # wirte versions.yml\n\n    getNames <- function(n){\n        x <- strsplit(n, \"\")\n        maxN <- max(lengths(x))\n        x <- lapply(x, function(.ele){\n            rev(c(rep(\"_\", maxN), .ele))[seq.int(maxN)]\n        })\n        x <- do.call(rbind, x)\n        x <- apply(x, 2, unique, simply=FALSE)\n        xl <- lengths(x)\n        stopID <- which(xl>1)\n        if(length(stopID)){\n            stopID <- stopID[1]\n            if(stopID>1){\n                x <- x[seq.int(stopID-1)]\n                x <- paste(rev(x), collapse=\"\")\n                n <- sub(x, \"\", n, fixed=TRUE)\n            }\n        }\n        n\n    }\n\n    REPORTS <- strsplit(\"$reports\", \" \")[[1]]\n    NAMES <- getNames(REPORTS)\n    FILENAME <- \"${prefix}_sankey.html\"\n\n    ## prepare data from out to data frame with colnames:\n    ## \"name\",\"taxLineage\",\"taxonReads\", \"cladeReads\",\"depth\", \"taxRank\"\n    reports <- pavian::read_reports(REPORTS, NAMES)\n    null <- mapply(reports, names(reports), FUN=function(rep, name){\n        network <- pavian:::build_sankey_network(rep)\n        htmlwidgets::saveWidget(network, paste(name, FILENAME, sep=\"_\"))\n    })\n    \"\"\"",
        "nb_lignes_script": 58,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "label 'error_ignore'",
            "conda (params.enable_conda ? \"bioconda::bioconductor-trackviewer=1.28.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-trackviewer:1.28.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-trackviewer:1.28.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KNEADDATA": {
        "name_process": "KNEADDATA",
        "string_process": "process KNEADDATA {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::trimmomatic=0.39 bioconda::trf=4.09.1 bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 bioconda::fastqc=0.11.9 bioconda::kneaddata=0.10.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kneaddata:0.10.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/kneaddata:0.10.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference_db\n\n    output:\n    tuple val(meta), path(\"${prefix}\")                  , emit: kneaddata\n    tuple val(meta), path(\"${prefix}/*_kneaddata.fastq\"), emit: reads\n    tuple val(meta), path(\"${prefix}/*_kneaddata_paired_{1,2}.fastq\"), optional:true, emit: pairs\n    path \"versions.yml\"                                 , emit: versions\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def inputs = meta.single_end ? \"--input $reads\" : \"--input ${reads[0]} --input ${reads[1]}\"\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    trim_path=\\$(python -c 'import os.path; import shutil; print(os.path.dirname(os.path.realpath(shutil.which(\"trimmomatic\"))))')\n    echo \\$trim_path\n    kneaddata \\\\\n        $args \\\\\n        $inputs \\\\\n        --output $prefix \\\\\n        --reference-db $reference_db \\\\\n        --threads $task.cpus \\\\\n        --trimmomatic \\$trim_path\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kneaddata: \\$(kneaddata --version | sed 's/kneaddata //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def inputs = meta.single_end ? \"--input $reads\" : \"--input ${reads[0]} --input ${reads[1]}\"\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    trim_path=\\$(python -c 'import os.path; import shutil; print(os.path.dirname(os.path.realpath(shutil.which(\"trimmomatic\"))))')\n    echo \\$trim_path\n    kneaddata \\\\\n        $args \\\\\n        $inputs \\\\\n        --output $prefix \\\\\n        --reference-db $reference_db \\\\\n        --threads $task.cpus \\\\\n        --trimmomatic \\$trim_path\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kneaddata: \\$(kneaddata --version | sed 's/kneaddata //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "tximport"
        ],
        "tools_url": [
            "https://bio.tools/tximport"
        ],
        "tools_dico": [
            {
                "name": "tximport",
                "uri": "https://bio.tools/tximport",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Bioconductor package that imports transcript-level abundance, estimated counts and transcript lengths, and summarizes into matrices for use with downstream gene-level analysis packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/tximport.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::trimmomatic=0.39 bioconda::trf=4.09.1 bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 bioconda::fastqc=0.11.9 bioconda::kneaddata=0.10.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kneaddata:0.10.0--pyhdfd78af_0' : 'quay.io/biocontainers/kneaddata:0.10.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CENTRIFUGE_INSTALL": {
        "name_process": "CENTRIFUGE_INSTALL",
        "string_process": "process CENTRIFUGE_INSTALL {\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::centrifuge=1.0.4_beta\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/centrifuge:1.0.4_beta--py36pl526he941832_2' :\n        'quay.io/biocontainers/centrifuge:1.0.4_beta--py36pl526he941832_2' }\"\n\n    output:\n    path \"$prefix\"                                       , emit: centrifuge_db\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"db_centrifuge\"\n    \"\"\"\n    centrifuge-download -o taxonomy taxonomy\n    centrifuge-download -o library $args refseq > seqid2taxid.map\n    cat library/*/*.fna > input-sequences.fna\n    ## build centrifuge index with 4 threads\n    centrifuge-build -p $task.cpus \\\\\n        --conversion-table seqid2taxid.map \\\\\n        --taxonomy-tree taxonomy/nodes.dmp \\\\\n        --name-table taxonomy/names.dmp \\\\\n        input-sequences.fna $prefix/nt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        centrifuge: \\$(echo \\$(centrifuge --version 2>&1) | sed 's/centrifuge //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"db_centrifuge\"\n    \"\"\"\n    centrifuge-download -o taxonomy taxonomy\n    centrifuge-download -o library $args refseq > seqid2taxid.map\n    cat library/*/*.fna > input-sequences.fna\n    ## build centrifuge index with 4 threads\n    centrifuge-build -p $task.cpus \\\\\n        --conversion-table seqid2taxid.map \\\\\n        --taxonomy-tree taxonomy/nodes.dmp \\\\\n        --name-table taxonomy/names.dmp \\\\\n        input-sequences.fna $prefix/nt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        centrifuge: \\$(echo \\$(centrifuge --version 2>&1) | sed 's/centrifuge //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::centrifuge=1.0.4_beta\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/centrifuge:1.0.4_beta--py36pl526he941832_2' : 'quay.io/biocontainers/centrifuge:1.0.4_beta--py36pl526he941832_2' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "process SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.bai\") , optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\") , optional:true, emit: csi\n    tuple val(meta), path(\"*.crai\"), optional:true, emit: crai\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKEN2_INSTALL": {
        "name_process": "KRAKEN2_INSTALL",
        "string_process": "process KRAKEN2_INSTALL {\n    label 'process_high'\n    label 'process_high_memory'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"bioconda::kraken2=2.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h7d875b9_1' :\n        'quay.io/biocontainers/kraken2:2.1.2--pl5321h7d875b9_1' }\"\n\n    output:\n    path \"KRAKEN2_DB\"                                    , emit: kraken2_db\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    \"\"\"\n    kraken2_path=\\$(perl -MCwd=abs_path -le 'print abs_path(shift)' \\$(which kraken2))\n    kraken2_path=\\$(dirname \\$kraken2_path)\n    # patch kraken2\n    cp -r \\$kraken2_path bin\n    sed -i -e 's/\\\\^ftp:/\\\\^https:/' bin/rsync_from_ncbi.pl\n    sed -i -e 's/mv x assembly/mv -f x assembly/' bin/download_genomic_library.sh\n    if [ \"$params.enable_conda\" = \"true\" ]; then\n        cp bin/rsync_from_ncbi.pl \\$kraken2_path/\n        cp bin/download_genomic_library.sh \\$kraken2_path/\n    else\n        sed -i -e 's/download_genomic_library.sh/bin\\\\/download_genomic_library.sh/g; s/rsync_from_ncbi.pl/bin\\\\/rsync_from_ncbi.pl/g;' bin/kraken2-build\n        sed -i -e 's/kraken2-build/bin\\\\/kraken2-build/g' bin/standard_installation.sh\n        export PATH=\\${PWD}/bin:\\$PATH\n    fi\n    if [ \"${args}\" = \"--standard\" ]; then\n        bin/kraken2-build \\\\\n            --standard \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n    else\n        bin/kraken2-build \\\\\n            --download-taxonomy \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n        dbs=($args)\n        for i in \\$dbs\n        do\n            bin/kraken2-build \\\\\n                --download-library \\$i \\\\\n                --db KRAKEN2_DB \\\\\n                --threads $task.cpus\n        done\n        bin/kraken2-build --build \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n        bin/kraken2-build --clean \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/Kraken version //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args   = task.ext.args ?: ''\n    \"\"\"\n    kraken2_path=\\$(perl -MCwd=abs_path -le 'print abs_path(shift)' \\$(which kraken2))\n    kraken2_path=\\$(dirname \\$kraken2_path)\n    # patch kraken2\n    cp -r \\$kraken2_path bin\n    sed -i -e 's/\\\\^ftp:/\\\\^https:/' bin/rsync_from_ncbi.pl\n    sed -i -e 's/mv x assembly/mv -f x assembly/' bin/download_genomic_library.sh\n    if [ \"$params.enable_conda\" = \"true\" ]; then\n        cp bin/rsync_from_ncbi.pl \\$kraken2_path/\n        cp bin/download_genomic_library.sh \\$kraken2_path/\n    else\n        sed -i -e 's/download_genomic_library.sh/bin\\\\/download_genomic_library.sh/g; s/rsync_from_ncbi.pl/bin\\\\/rsync_from_ncbi.pl/g;' bin/kraken2-build\n        sed -i -e 's/kraken2-build/bin\\\\/kraken2-build/g' bin/standard_installation.sh\n        export PATH=\\${PWD}/bin:\\$PATH\n    fi\n    if [ \"${args}\" = \"--standard\" ]; then\n        bin/kraken2-build \\\\\n            --standard \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n    else\n        bin/kraken2-build \\\\\n            --download-taxonomy \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n        dbs=($args)\n        for i in \\$dbs\n        do\n            bin/kraken2-build \\\\\n                --download-library \\$i \\\\\n                --db KRAKEN2_DB \\\\\n                --threads $task.cpus\n        done\n        bin/kraken2-build --build \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n        bin/kraken2-build --clean \\\\\n            --db KRAKEN2_DB \\\\\n            --threads $task.cpus\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/Kraken version //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_high'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"bioconda::kraken2=2.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h7d875b9_1' : 'quay.io/biocontainers/kraken2:2.1.2--pl5321h7d875b9_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BLAST_MAKEBLASTDB": {
        "name_process": "BLAST_MAKEBLASTDB",
        "string_process": "process BLAST_MAKEBLASTDB {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' :\n        'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'blast_db'     , emit: db\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    makeblastdb \\\\\n        -in $fasta \\\\\n        $args\n    mkdir blast_db\n    mv ${fasta}* blast_db\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    makeblastdb \\\\\n        -in $fasta \\\\\n        $args\n    mkdir blast_db\n    mv ${fasta}* blast_db\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' : 'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKEN2_MERGE": {
        "name_process": "KRAKEN2_MERGE",
        "string_process": "process KRAKEN2_MERGE {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::kraken2=2.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h7d875b9_1' :\n        'quay.io/biocontainers/kraken2:2.1.2--pl5321h7d875b9_1' }\"\n\n    input:\n    path kraken2_mpa\n    path combine_mpa\n\n    output:\n    path \"${prefix}_kraken.txt\"                          , emit: kraken2_mpa\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    python ${combine_mpa} \\\\\n        --input $kraken2_mpa \\\\\n        --output ${prefix}_kraken.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/Kraken version //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    python ${combine_mpa} \\\\\n        --input $kraken2_mpa \\\\\n        --output ${prefix}_kraken.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/Kraken version //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken2_mpa",
            "combine_mpa"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::kraken2=2.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h7d875b9_1' : 'quay.io/biocontainers/kraken2:2.1.2--pl5321h7d875b9_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHECKM_LINEAGEWF": {
        "name_process": "CHECKM_LINEAGEWF",
        "string_process": "process CHECKM_LINEAGEWF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::checkm-genome=1.1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/checkm-genome:1.1.3--py_1' :\n        'quay.io/biocontainers/checkm-genome:1.1.3--py_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    val fasta_ext\n\n    output:\n    tuple val(meta), path(\"${prefix}\")    , emit: checkm_output\n    tuple val(meta), path(\"${prefix}.tsv\"), emit: checkm_tsv\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    checkm \\\\\n        lineage_wf \\\\\n        -t $task.cpus \\\\\n        -f ${prefix}.tsv \\\\\n        --tab_table \\\\\n        --pplacer_threads $task.cpus \\\\\n        -x $fasta_ext \\\\\n        $args \\\\\n        . \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        checkm: \\$( checkm 2>&1 | grep '...:::' | sed 's/.*CheckM v//;s/ .*//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    checkm \\\\\n        lineage_wf \\\\\n        -t $task.cpus \\\\\n        -f ${prefix}.tsv \\\\\n        --tab_table \\\\\n        --pplacer_threads $task.cpus \\\\\n        -x $fasta_ext \\\\\n        $args \\\\\n        . \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        checkm: \\$( checkm 2>&1 | grep '...:::' | sed 's/.*CheckM v//;s/ .*//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "fasta_ext"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::checkm-genome=1.1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/checkm-genome:1.1.3--py_1' : 'quay.io/biocontainers/checkm-genome:1.1.3--py_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HUMANN_JOIN": {
        "name_process": "HUMANN_JOIN",
        "string_process": "process HUMANN_JOIN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(normalized_tsv, stageAs: \"inputs/*\")\n\n    output:\n    tuple val(meta), path(\"${prefix}\")                    , emit: table\n    path \"versions.yml\"                                   , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_join_tables \\\\\n        --input inputs \\\\\n        --output $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_join_tables \\\\\n        --input inputs \\\\\n        --output $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "normalized_tsv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' : 'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CENTRIFUGE_RUN": {
        "name_process": "CENTRIFUGE_RUN",
        "string_process": "process CENTRIFUGE_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::centrifuge=1.0.4_beta\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/centrifuge:1.0.4_beta--py36pl526he941832_2' :\n        'quay.io/biocontainers/centrifuge:1.0.4_beta--py36pl526he941832_2' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference_db\n\n    output:\n    tuple val(meta), path(\"${prefix}_centrifuge.out\")    , emit: centrifuge_out\n    tuple val(meta), path(\"${prefix}_centrifuge.report\") , emit: centrifuge_report\n    tuple val(meta), path(\"${prefix}_kraken_like.report\"), emit: kraken_like_report\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = meta.single_end ? \"-U $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    centrifuge $args \\\\\n        -x $reference_db/nt \\\\\n        --threads $task.cpus \\\\\n        $inputs \\\\\n        --report-file ${prefix}_centrifuge.report \\\\\n        -S ${prefix}_centrifuge.out\n\n    centrifuge-kreport \\\\\n        -x $reference_db/nt \\\\\n        ${prefix}_centrifuge.out > \\\\\n        ${prefix}_kraken_like.out\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        centrifuge: \\$(echo \\$(centrifuge --version 2>&1) | sed 's/version //g; s/ .*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = meta.single_end ? \"-U $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    centrifuge $args \\\\\n        -x $reference_db/nt \\\\\n        --threads $task.cpus \\\\\n        $inputs \\\\\n        --report-file ${prefix}_centrifuge.report \\\\\n        -S ${prefix}_centrifuge.out\n\n    centrifuge-kreport \\\\\n        -x $reference_db/nt \\\\\n        ${prefix}_centrifuge.out > \\\\\n        ${prefix}_kraken_like.out\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        centrifuge: \\$(echo \\$(centrifuge --version 2>&1) | sed 's/version //g; s/ .*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Centrifuge"
        ],
        "tools_url": [
            "https://bio.tools/centrifuge"
        ],
        "tools_dico": [
            {
                "name": "Centrifuge",
                "uri": "https://bio.tools/centrifuge",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A very rapid and memory-efficient system for the classification of DNA sequences from microbial samples. The system uses a novel indexing scheme based on the Burrows-Wheeler transform and the Ferragina-Manzini index, optimized specifically for the metagenomic classification problem. Together these advances enable timely and accurate analysis of large metagenomics data sets on conventional desktop computers.",
                "homepage": "https://ccb.jhu.edu/software/centrifuge/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::centrifuge=1.0.4_beta\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/centrifuge:1.0.4_beta--py36pl526he941832_2' : 'quay.io/biocontainers/centrifuge:1.0.4_beta--py36pl526he941832_2' }\""
        ],
        "when": "",
        "stub": ""
    },
    "METAPHLAN_INSTALL": {
        "name_process": "METAPHLAN_INSTALL",
        "string_process": "process METAPHLAN_INSTALL {\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metaphlan:3.0.14--pyhb7b1952_0' :\n        'quay.io/biocontainers/metaphlan:3.0.14--pyhb7b1952_0' }\"\n\n    output:\n    path \"$prefix\"     , emit: metaphlan_db\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"metaphlan_db\"\n    \"\"\"\n    metaphlan --install --bowtie2db $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan: \\$(metaphlan --version | sed 's/MetaPhlAn version //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"metaphlan_db\"\n    \"\"\"\n    metaphlan --install --bowtie2db $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan: \\$(metaphlan --version | sed 's/MetaPhlAn version //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metaphlan:3.0.14--pyhb7b1952_0' : 'quay.io/biocontainers/metaphlan:3.0.14--pyhb7b1952_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "HUMANN_RUN": {
        "name_process": "HUMANN_RUN",
        "string_process": "process HUMANN_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path humann_dna_db\n    path humann_pro_db\n\n    output:\n    tuple val(meta), path(\"${prefix}\")                    , emit: output\n    tuple val(meta), path(\"${prefix}/*_genefamilies.tsv\") , emit: genefamilies\n    tuple val(meta), path(\"${prefix}/*_pathcoverage.tsv\") , emit: pathcoverage\n    tuple val(meta), path(\"${prefix}/*_pathabundance.tsv\"), emit: pathabundance\n    path \"versions.yml\"                                   , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    humann_config --update run_modes threads $task.cpus\n    humann \\\\\n        --input $reads \\\\\n        --output ${prefix} \\\\\n        --threads $task.cpus \\\\\n        --nucleotide-database $humann_dna_db \\\\\n        --protein-database $humann_pro_db \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    humann_config --update run_modes threads $task.cpus\n    humann \\\\\n        --input $reads \\\\\n        --output ${prefix} \\\\\n        --threads $task.cpus \\\\\n        --nucleotide-database $humann_dna_db \\\\\n        --protein-database $humann_pro_db \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "humann_dna_db",
            "humann_pro_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' : 'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KAIJU2TABLE": {
        "name_process": "KAIJU2TABLE",
        "string_process": "process KAIJU2TABLE {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::kaiju=1.8.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kaiju:1.8.2--h2e03b76_0' :\n        'quay.io/biocontainers/kaiju:1.8.2--h2e03b76_0' }\"\n\n    input:\n    path kaiju_outs\n    path reference_db\n\n    output:\n    path \"${prefix}_kaiju.tsv\"                           , emit: summary\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    kaiju2table  \\\\\n        -t nodes.dmp -n names.dmp \\\\\n        $args \\\\\n        -o ${prefix}_kaiju.tsv \\\\\n        $kaiju_outs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kaiju: \\$(echo \\$(kaiju -h 2>&1) | sed 's/Kaiju //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    kaiju2table  \\\\\n        -t nodes.dmp -n names.dmp \\\\\n        $args \\\\\n        -o ${prefix}_kaiju.tsv \\\\\n        $kaiju_outs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kaiju: \\$(echo \\$(kaiju -h 2>&1) | sed 's/Kaiju //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kaiju_outs",
            "reference_db"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::kaiju=1.8.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kaiju:1.8.2--h2e03b76_0' : 'quay.io/biocontainers/kaiju:1.8.2--h2e03b76_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "process SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools sort $args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools sort $args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "UCSC_FASPLIT": {
        "name_process": "UCSC_FASPLIT",
        "string_process": "\nprocess UCSC_FASPLIT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-fasplit=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-fasplit:377--ha8a8165_3' :\n        'quay.io/biocontainers/ucsc-fasplit:377--ha8a8165_3' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fa\")      , emit: reads\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: 'sequence'\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    faSplit \\\\\n        $args \\\\\n        $reads \\\\\n        $task.cpus \\\\\n        ${reads}.sub\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: 'sequence'\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    faSplit \\\\\n        $args \\\\\n        $reads \\\\\n        $task.cpus \\\\\n        ${reads}.sub\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-fasplit=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-fasplit:377--ha8a8165_3' : 'quay.io/biocontainers/ucsc-fasplit:377--ha8a8165_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BRACKEN": {
        "name_process": "BRACKEN",
        "string_process": "process BRACKEN {\n    tag \"${meta.id}\"\n    label 'process_low'\n    label 'error_ignore'\n\n    conda (params.enable_conda ? \"bioconda::bracken=2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bracken:2.6.1--py39h7cff6ad_2' :\n        'quay.io/biocontainers/bracken:2.6.1--py39h7cff6ad_2' }\"\n\n    input:\n    tuple val(meta), path(kraken2_report), path(kmer_distrib)\n    path reference_db\n\n    output:\n    path \"${prefix}_*\"                                   , emit: bracken\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bracken -d ${reference_db} \\\\\n        -i $kraken2_report \\\\\n        -o ${prefix}_bracken \\\\\n        -r ${meta.reads_length} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bracken: 2.6.1\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bracken -d ${reference_db} \\\\\n        -i $kraken2_report \\\\\n        -o ${prefix}_bracken \\\\\n        -r ${meta.reads_length} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bracken: 2.6.1\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "meta",
            "kraken2_report",
            "kmer_distrib",
            "reference_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_low'",
            "label 'error_ignore'",
            "conda (params.enable_conda ? \"bioconda::bracken=2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bracken:2.6.1--py39h7cff6ad_2' : 'quay.io/biocontainers/bracken:2.6.1--py39h7cff6ad_2' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SEQTK_SEQ": {
        "name_process": "SEQTK_SEQ",
        "string_process": "process SEQTK_SEQ {\n    tag '$sequences'\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.$ext\")   , emit: reads\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    ext    = task.ext.args2  ?: 'fa'\n    \"\"\"\n    seqtk \\\\\n        seq \\\\\n        $args \\\\\n        $reads \\\\\n        > ${reads}.${ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    ext    = task.ext.args2  ?: 'fa'\n    \"\"\"\n    seqtk \\\\\n        seq \\\\\n        $args \\\\\n        $reads \\\\\n        > ${reads}.${ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "drtext",
            "seqtk",
            "rSeq"
        ],
        "tools_url": [
            "https://bio.tools/drtext",
            "https://bio.tools/seqtk",
            "https://bio.tools/rseq"
        ],
        "tools_dico": [
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "rSeq",
                "uri": "https://bio.tools/rseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2871",
                                    "term": "Sequence tagged site (STS) mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0230",
                                    "term": "Sequence generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2871",
                                    "term": "Sequence mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Set of tools for RNA-Seq data analysis. It consists of programs that deal with many aspects of RNA-Seq data analysis, such as reference sequence generation, sequence mapping, gene and isoform expressions (RPKMs) computation, etc.",
                "homepage": "http://www-personal.umich.edu/~jianghui/rseq/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag '$sequences'",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MUSCLE": {
        "name_process": "MUSCLE",
        "string_process": "process MUSCLE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::muscle=3.8.1551\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/muscle:3.8.1551--h7d875b9_6' :\n        'quay.io/biocontainers/muscle:3.8.1551--h7d875b9_6' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.afa\") , optional: true, emit: aligned_fasta\n    tuple val(meta), path(\"*.phyi\"), optional: true, emit: phyi\n    tuple val(meta), path(\"*.phys\"), optional: true, emit: phys\n    tuple val(meta), path(\"*.clw\") , optional: true, emit: clustalw\n    tuple val(meta), path(\"*.html\"), optional: true, emit: html\n    tuple val(meta), path(\"*.msf\") , optional: true, emit: msf\n    tuple val(meta), path(\"*.tree\"), optional: true, emit: tree\n    path \"*.log\"                                   , emit: log\n    path \"versions.yml\"                            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fasta_out = args.contains('-fasta') ? \"-fastaout ${prefix}_muscle_msa.afa\" : ''\n    def clw_out   = args.contains('-clw') ? \"-clwout ${prefix}_muscle_msa.clw\" : ''\n    def msf_out   = args.contains('-msf') ? \"-msfout ${prefix}_muscle_msa.msf\" : ''\n    def phys_out  = args.contains('-phys') ? \"-physout ${prefix}_muscle_msa.phys\" : ''\n    def phyi_out  = args.contains('-phyi') ? \"-phyiout ${prefix}_muscle_msa.phyi\" : ''\n    def html_out  = args.contains('-html') ? \"-htmlout ${prefix}_muscle_msa.html\" : ''\n    def tree_out  = args.contains('-maketree') ? \"-out ${prefix}_muscle_msa.tree\" : ''\n    \"\"\"\n    muscle \\\\\n        $args \\\\\n        -in $fasta \\\\\n        $fasta_out \\\\\n        $clw_out \\\\\n        $msf_out \\\\\n        $phys_out \\\\\n        $phyi_out \\\\\n        $html_out \\\\\n        $tree_out \\\\\n        -loga muscle_msa.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        muscle: \\$(muscle -version |  sed 's/^MUSCLE v//; s/by.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fasta_out = args.contains('-fasta') ? \"-fastaout ${prefix}_muscle_msa.afa\" : ''\n    def clw_out   = args.contains('-clw') ? \"-clwout ${prefix}_muscle_msa.clw\" : ''\n    def msf_out   = args.contains('-msf') ? \"-msfout ${prefix}_muscle_msa.msf\" : ''\n    def phys_out  = args.contains('-phys') ? \"-physout ${prefix}_muscle_msa.phys\" : ''\n    def phyi_out  = args.contains('-phyi') ? \"-phyiout ${prefix}_muscle_msa.phyi\" : ''\n    def html_out  = args.contains('-html') ? \"-htmlout ${prefix}_muscle_msa.html\" : ''\n    def tree_out  = args.contains('-maketree') ? \"-out ${prefix}_muscle_msa.tree\" : ''\n    \"\"\"\n    muscle \\\\\n        $args \\\\\n        -in $fasta \\\\\n        $fasta_out \\\\\n        $clw_out \\\\\n        $msf_out \\\\\n        $phys_out \\\\\n        $phyi_out \\\\\n        $html_out \\\\\n        $tree_out \\\\\n        -loga muscle_msa.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        muscle: \\$(muscle -version |  sed 's/^MUSCLE v//; s/by.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "MUSCLE"
        ],
        "tools_url": [
            "https://bio.tools/muscle"
        ],
        "tools_dico": [
            {
                "name": "MUSCLE",
                "uri": "https://bio.tools/muscle",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "This tool performs multiple sequence alignments of nucleotide or amino acid sequences.",
                "homepage": "https://www.drive5.com/muscle/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::muscle=3.8.1551\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/muscle:3.8.1551--h7d875b9_6' : 'quay.io/biocontainers/muscle:3.8.1551--h7d875b9_6' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HUMANN_BARPLOT": {
        "name_process": "HUMANN_BARPLOT",
        "string_process": "process HUMANN_BARPLOT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(tsv)\n\n    output:\n    tuple val(meta), path(\"${prefix}/*\")                 , emit: output\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_barplot \\\\\n        --input $tsv \\\\\n        --output ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_barplot \\\\\n        --input $tsv \\\\\n        --output ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tsv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' : 'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KAIJU_INSTALL": {
        "name_process": "KAIJU_INSTALL",
        "string_process": "process KAIJU_INSTALL {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::kaiju=1.8.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kaiju:1.8.2--h2e03b76_0' :\n        'quay.io/biocontainers/kaiju:1.8.2--h2e03b76_0' }\"\n\n    input:\n    path tgz\n\n    output:\n    path \"*.{fmi,dmp}\"                                   , emit: kaiji_db\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    \"\"\"\n    tar -xf $tgz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kaiju: \\$(echo \\$(kaiju -h 2>&1) | sed 's/Kaiju //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    def args   = task.ext.args ?: ''\n    \"\"\"\n    tar -xf $tgz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kaiju: \\$(echo \\$(kaiju -h 2>&1) | sed 's/Kaiju //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tgz"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::kaiju=1.8.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kaiju:1.8.2--h2e03b76_0' : 'quay.io/biocontainers/kaiju:1.8.2--h2e03b76_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "METAPHLAN_RUN": {
        "name_process": "METAPHLAN_RUN",
        "string_process": "process METAPHLAN_RUN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metaphlan:3.0.14--pyhb7b1952_0' :\n        'quay.io/biocontainers/metaphlan:3.0.14--pyhb7b1952_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference_db\n\n    output:\n    tuple val(meta), path(\"${prefix}_metaphlan.txt\")     , emit: counts\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    metaphlan \\\\\n        $reads \\\\\n        --nproc $task.cpus \\\\\n        --bowtie2db $reference_db \\\\\n        -o ${prefix}_metaphlan.txt \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan: \\$(metaphlan --version | sed 's/MetaPhlAn version //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    metaphlan \\\\\n        $reads \\\\\n        --nproc $task.cpus \\\\\n        --bowtie2db $reference_db \\\\\n        -o ${prefix}_metaphlan.txt \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan: \\$(metaphlan --version | sed 's/MetaPhlAn version //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metaphlan:3.0.14--pyhb7b1952_0' : 'quay.io/biocontainers/metaphlan:3.0.14--pyhb7b1952_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BOWTIE2_ALIGN": {
        "name_process": "BOWTIE2_ALIGN",
        "string_process": "process BOWTIE2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' :\n        'quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    val   save_unaligned\n\n    output:\n    tuple val(meta), path('*.bam')    , emit: bam\n    tuple val(meta), path('*.log')    , emit: log\n    tuple val(meta), path('*fastq.gz'), emit: fastq, optional:true\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def unaligned = save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 75,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def unaligned = save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "save_unaligned"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' : 'quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "process SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.8.3' :\n        'quay.io/biocontainers/python:3.8.3' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'       , emit: csv\n    path \"versions.yml\", emit: versions\n\n    script:                                                                     \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$samplesheet\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.8.3' : 'quay.io/biocontainers/python:3.8.3' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 19,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "process UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::tar=1.34\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path archive\n\n    output:\n    path \"$prefix\"      , emit: untar\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    prefix = task.ext.prefix ?: archive.toString() - '.tar.gz'\n    \"\"\"\n    mkdir -p $prefix\n    tar -xf $args ${archive} -C $prefix $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    prefix = task.ext.prefix ?: archive.toString() - '.tar.gz'\n    \"\"\"\n    mkdir -p $prefix\n    tar -xf $args ${archive} -C $prefix $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::tar=1.34\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "METAPHLAN_MERGE": {
        "name_process": "METAPHLAN_MERGE",
        "string_process": "process METAPHLAN_MERGE {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metaphlan:3.0.14--pyhb7b1952_0' :\n        'quay.io/biocontainers/metaphlan:3.0.14--pyhb7b1952_0' }\"\n\n    input:\n    path profiles\n\n    output:\n    path \"${prefix}_metaphlan.txt\"                       , emit: metaphlan\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    merge_metaphlan_tables.py  \\\\\n        $profiles \\\\\n        > ${prefix}_metaphlan.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan: \\$(metaphlan --version | sed 's/MetaPhlAn version //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    merge_metaphlan_tables.py  \\\\\n        $profiles \\\\\n        > ${prefix}_metaphlan.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan: \\$(metaphlan --version | sed 's/MetaPhlAn version //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "profiles"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metaphlan:3.0.14--pyhb7b1952_0' : 'quay.io/biocontainers/metaphlan:3.0.14--pyhb7b1952_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "process GUNZIP {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$gunzip\"), emit: gunzip\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_SUBSEQ": {
        "name_process": "SEQTK_SUBSEQ",
        "string_process": "process SEQTK_SUBSEQ {\n    tag '$sequences'\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(sequences), path(filter_list)\n\n    output:\n    tuple val(meta), path(\"*.gz\")         , emit: sequences\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: ''\n    def ext = \"fa\"\n    if (\"$sequences\" ==~ /.+\\.fq|.+\\.fq.gz|.+\\.fastq|.+\\.fastq.gz/) {\n        ext = \"fq\"\n    }\n    \"\"\"\n    seqtk \\\\\n        subseq \\\\\n        $args \\\\\n        $sequences \\\\\n        $filter_list | \\\\\n        gzip --no-name > ${sequences}${prefix}.${ext}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: ''\n    def ext = \"fa\"\n    if (\"$sequences\" ==~ /.+\\.fq|.+\\.fq.gz|.+\\.fastq|.+\\.fastq.gz/) {\n        ext = \"fq\"\n    }\n    \"\"\"\n    seqtk \\\\\n        subseq \\\\\n        $args \\\\\n        $sequences \\\\\n        $filter_list | \\\\\n        gzip --no-name > ${sequences}${prefix}.${ext}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "drtext",
            "seqtk",
            "subSeq"
        ],
        "tools_url": [
            "https://bio.tools/drtext",
            "https://bio.tools/seqtk",
            "https://bio.tools/subseq"
        ],
        "tools_dico": [
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "subSeq",
                "uri": "https://bio.tools/subseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Subsampling of high throughput sequencing count data for use in experiment design and analysis.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/subSeq.html"
            }
        ],
        "inputs": [
            "meta",
            "sequences",
            "filter_list"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag '$sequences'",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "METAPHLAN3": {
        "name_process": "METAPHLAN3",
        "string_process": "process METAPHLAN3 {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::metaphlan=3.0.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metaphlan:3.0.12--pyhb7b1952_0' :\n        'quay.io/biocontainers/metaphlan:3.0.12--pyhb7b1952_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n    path metaphlan_db\n\n    output:\n    tuple val(meta), path(\"*_profile.txt\")   ,                emit: profile\n    tuple val(meta), path(\"*.biom\")          ,                emit: biom\n    tuple val(meta), path('*.bowtie2out.txt'), optional:true, emit: bt2out\n    path \"versions.yml\"                      ,                emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_type  = (\"$input\".endsWith(\".fastq.gz\")) ? \"--input_type fastq\" :  (\"$input\".contains(\".fasta\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".bowtie2out.txt\")) ? \"--input_type bowtie2out\" : \"--input_type sam\"\n    def input_data  = (\"$input_type\".contains(\"fastq\")) && !meta.single_end ? \"${input[0]},${input[1]}\" : \"$input\"\n    def bowtie2_out = \"$input_type\" == \"--input_type bowtie2out\" || \"$input_type\" == \"--input_type sam\" ? '' : \"--bowtie2out ${prefix}.bowtie2out.txt\"\n\n    \"\"\"\n    metaphlan \\\\\n        --nproc $task.cpus \\\\\n        $input_type \\\\\n        $input_data \\\\\n        $args \\\\\n        $bowtie2_out \\\\\n        --bowtie2db ${metaphlan_db} \\\\\n        --biom ${prefix}.biom \\\\\n        --output_file ${prefix}_profile.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan3: \\$(metaphlan --version 2>&1 | awk '{print \\$3}')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_type  = (\"$input\".endsWith(\".fastq.gz\")) ? \"--input_type fastq\" :  (\"$input\".contains(\".fasta\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".bowtie2out.txt\")) ? \"--input_type bowtie2out\" : \"--input_type sam\"\n    def input_data  = (\"$input_type\".contains(\"fastq\")) && !meta.single_end ? \"${input[0]},${input[1]}\" : \"$input\"\n    def bowtie2_out = \"$input_type\" == \"--input_type bowtie2out\" || \"$input_type\" == \"--input_type sam\" ? '' : \"--bowtie2out ${prefix}.bowtie2out.txt\"\n\n    \"\"\"\n    metaphlan \\\\\n        --nproc $task.cpus \\\\\n        $input_type \\\\\n        $input_data \\\\\n        $args \\\\\n        $bowtie2_out \\\\\n        --bowtie2db ${metaphlan_db} \\\\\n        --biom ${prefix}.biom \\\\\n        --output_file ${prefix}_profile.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan3: \\$(metaphlan --version 2>&1 | awk '{print \\$3}')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "metaphlan_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::metaphlan=3.0.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metaphlan:3.0.12--pyhb7b1952_0' : 'quay.io/biocontainers/metaphlan:3.0.12--pyhb7b1952_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "process SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        stats \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        ${input} \\\\\n        > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        stats \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        ${input} \\\\\n        > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "GOstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/gostats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "GOstats",
                "uri": "https://bio.tools/gostats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0582",
                                "term": "Ontology"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            },
                            {
                                "uri": "http://edamontology.org/data_1772",
                                "term": "Score"
                            }
                        ]
                    }
                ],
                "description": "A set of tools for interacting with GO and microarray data. A variety of basic manipulation tools for graphs, hypothesis testing and other simple calculations.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/GOstats.html"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE2_BUILD": {
        "name_process": "BOWTIE2_BUILD",
        "string_process": "process BOWTIE2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bowtie2:2.4.4--py39hbb4e92a_0' :\n        'quay.io/biocontainers/bowtie2:2.4.4--py39hbb4e92a_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'bowtie2'      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bowtie2:2.4.4--py39hbb4e92a_0' : 'quay.io/biocontainers/bowtie2:2.4.4--py39hbb4e92a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KAIJU_RUN": {
        "name_process": "KAIJU_RUN",
        "string_process": "process KAIJU_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_high_memory'\n\n    conda (params.enable_conda ? \"bioconda::kaiju=1.8.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kaiju:1.8.2--h2e03b76_0' :\n        'quay.io/biocontainers/kaiju:1.8.2--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference_db\n\n    output:\n    tuple val(meta), path(\"${prefix}_kaiju.out\")         , emit: kaiju_out\n    tuple val(meta), path(\"${prefix}_kaiju.out.krona\")   , emit: krona_input\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = meta.single_end ? \"-i $reads\" : \"-i ${reads[0]} -i ${reads[1]}\"\n    \"\"\"\n    kaiju -t nodes.dmp -f kaiju_db_*.fmi \\\\\n        $inputs \\\\\n        -o ${prefix}_kaiju.out \\\\\n        -z $task.cpus \\\\\n        $args\n\n    kaiju2krona -t nodes.dmp -n names.dmp \\\\\n        -i ${prefix}_kaiju.out -o ${prefix}_kaiju.out.krona\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kaiju: \\$(echo \\$(kaiju -h 2>&1) | sed 's/Kaiju //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = meta.single_end ? \"-i $reads\" : \"-i ${reads[0]} -i ${reads[1]}\"\n    \"\"\"\n    kaiju -t nodes.dmp -f kaiju_db_*.fmi \\\\\n        $inputs \\\\\n        -o ${prefix}_kaiju.out \\\\\n        -z $task.cpus \\\\\n        $args\n\n    kaiju2krona -t nodes.dmp -n names.dmp \\\\\n        -i ${prefix}_kaiju.out -o ${prefix}_kaiju.out.krona\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kaiju: \\$(echo \\$(kaiju -h 2>&1) | sed 's/Kaiju //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Kaiju"
        ],
        "tools_url": [
            "https://bio.tools/kaiju"
        ],
        "tools_dico": [
            {
                "name": "Kaiju",
                "uri": "https://bio.tools/kaiju",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Program for the taxonomic assignment of high-throughput sequencing reads, e.g., Illumina or Roche/454, from whole-genome sequencing of metagenomic DNA. Reads are directly assigned to taxa using the NCBI taxonomy and a reference database of protein sequences from Bacteria, Archaea, Fungi, microbial eukaryotes and viruses.",
                "homepage": "http://kaiju.binf.ku.dk"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_high_memory'",
            "conda (params.enable_conda ? \"bioconda::kaiju=1.8.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kaiju:1.8.2--h2e03b76_0' : 'quay.io/biocontainers/kaiju:1.8.2--h2e03b76_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KNEADDATA_MERGECOUNT": {
        "name_process": "KNEADDATA_MERGECOUNT",
        "string_process": "process KNEADDATA_MERGECOUNT {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::trimmomatic=0.39 bioconda::trf=4.09.1 bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 bioconda::fastqc=0.11.9 bioconda::kneaddata=0.10.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kneaddata:0.10.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/kneaddata:0.10.0--pyhdfd78af_0' }\"\n\n    input:\n    path counts\n\n    output:\n    path \"*_allcounts.tsv\"               , emit: counts\n    path \"versions.yml\"                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: 'kneaddata'\n    \"\"\"\n    infs=($counts)\n    head -1 \\${infs[0]} > ${prefix}_allcounts.tsv\n    tail -n +2 -q $counts >> ${prefix}_allcounts.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kneaddata: \\$(kneaddata --version | sed 's/kneaddata //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: 'kneaddata'\n    \"\"\"\n    infs=($counts)\n    head -1 \\${infs[0]} > ${prefix}_allcounts.tsv\n    tail -n +2 -q $counts >> ${prefix}_allcounts.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kneaddata: \\$(kneaddata --version | sed 's/kneaddata //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::trimmomatic=0.39 bioconda::trf=4.09.1 bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 bioconda::fastqc=0.11.9 bioconda::kneaddata=0.10.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kneaddata:0.10.0--pyhdfd78af_0' : 'quay.io/biocontainers/kneaddata:0.10.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "TRIMMOMATIC": {
        "name_process": "TRIMMOMATIC",
        "string_process": "process TRIMMOMATIC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::trimmomatic=0.39\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/trimmomatic:0.39--hdfd78af_2' :\n        'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path adapter\n\n    output:\n    tuple val(meta), path(\"*.trimmed.fastq.gz\")                  , emit: paired\n    tuple val(meta), path(\"*.unpaired.fastq.gz\"), optional:true  , emit: unpaired\n    path '*.trim_out.log'                                        , emit: log\n    path \"versions.yml\"                                          , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    if [ \"${meta.single_end}\" = \"true\" ]; then\n        trimmomatic SE \\\\\n                    -threads $task.cpus \\\\\n                    ${reads[0]} \\\\\n                    ${prefix}_R1.trimmed.fastq.gz \\\\\n                    $args \\\\\n                    > ${prefix}.trim_out.log 2>&1\n    else\n        trimmomatic PE \\\\\n                    -threads $task.cpus \\\\\n                    ${reads[0]} ${reads[1]} \\\\\n                    ${prefix}_R1.trimmed.fastq.gz \\\\\n                    ${prefix}_R1.unpaired.fastq.gz \\\\\n                    ${prefix}_R2.trimmed.fastq.gz \\\\\n                    ${prefix}_R2.unpaired.fastq.gz \\\\\n                    $args \\\\\n                    > ${prefix}.trim_out.log 2>&1\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        trimmomatic: \\$(trimmomatic -version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    if [ \"${meta.single_end}\" = \"true\" ]; then\n        trimmomatic SE \\\\\n                    -threads $task.cpus \\\\\n                    ${reads[0]} \\\\\n                    ${prefix}_R1.trimmed.fastq.gz \\\\\n                    $args \\\\\n                    > ${prefix}.trim_out.log 2>&1\n    else\n        trimmomatic PE \\\\\n                    -threads $task.cpus \\\\\n                    ${reads[0]} ${reads[1]} \\\\\n                    ${prefix}_R1.trimmed.fastq.gz \\\\\n                    ${prefix}_R1.unpaired.fastq.gz \\\\\n                    ${prefix}_R2.trimmed.fastq.gz \\\\\n                    ${prefix}_R2.unpaired.fastq.gz \\\\\n                    $args \\\\\n                    > ${prefix}.trim_out.log 2>&1\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        trimmomatic: \\$(trimmomatic -version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "adapter"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::trimmomatic=0.39\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/trimmomatic:0.39--hdfd78af_2' : 'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_IDXSTATS": {
        "name_process": "SAMTOOLS_IDXSTATS",
        "string_process": "process SAMTOOLS_IDXSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        idxstats \\\\\n        $bam \\\\\n        > ${bam}.idxstats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        idxstats \\\\\n        $bam \\\\\n        > ${bam}.idxstats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PROKKA": {
        "name_process": "PROKKA",
        "string_process": "process PROKKA {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0' :\n        'quay.io/biocontainers/prokka:1.14.6--pl526_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path proteins\n    path prodigal_tf\n\n    output:\n    tuple val(meta), path(\"${prefix}/*.gff\"), emit: gff\n    tuple val(meta), path(\"${prefix}/*.gbk\"), emit: gbk\n    tuple val(meta), path(\"${prefix}/*.fna\"), emit: fna\n    tuple val(meta), path(\"${prefix}/*.faa\"), emit: faa\n    tuple val(meta), path(\"${prefix}/*.ffn\"), emit: ffn\n    tuple val(meta), path(\"${prefix}/*.sqn\"), emit: sqn\n    tuple val(meta), path(\"${prefix}/*.fsa\"), emit: fsa\n    tuple val(meta), path(\"${prefix}/*.tbl\"), emit: tbl\n    tuple val(meta), path(\"${prefix}/*.err\"), emit: err\n    tuple val(meta), path(\"${prefix}/*.log\"), emit: log\n    tuple val(meta), path(\"${prefix}/*.txt\"), emit: txt\n    tuple val(meta), path(\"${prefix}/*.tsv\"), emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        prokka: \\$(echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        prokka: \\$(echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "proteins",
            "prodigal_tf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0' : 'quay.io/biocontainers/prokka:1.14.6--pl526_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HUMANN_NORM": {
        "name_process": "HUMANN_NORM",
        "string_process": "process HUMANN_NORM {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(tsv)\n\n    output:\n    tuple val(meta), path(\"${prefix}\")                    , emit: norm\n    path \"versions.yml\"                                   , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${tsv.toString().replaceAll('.tsv', '.norm')}.tsv\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_renorm_table \\\\\n        --input $tsv \\\\\n        --output ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${tsv.toString().replaceAll('.tsv', '.norm')}.tsv\"\n    \"\"\"\n    #humann_config --update run_modes threads $task.cpus\n    humann_renorm_table \\\\\n        --input $tsv \\\\\n        --output ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tsv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' : 'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "process KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' :\n        'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n\n    output:\n    tuple val(meta), path('*classified*')  , emit: classified\n    tuple val(meta), path('*unclassified*'), emit: unclassified\n    tuple val(meta), path('*report.txt')   , emit: txt\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' : 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRONA": {
        "name_process": "KRONA",
        "string_process": "process KRONA {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::krona=2.8.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/krona:2.8.1--pl5321hdfd78af_1' :\n        'quay.io/biocontainers/krona:2.8.1--pl5321hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(krona_out)\n\n    output:\n    tuple val(meta), path(\"${prefix}_krona.html\")        , emit: summary\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fs=($krona_out)\n\n    if [ \"\\${#fs[@]}\" -eq \"1\" ]; then\n        ktImportText  \\\\\n            -o ${prefix}_krona.html \\\\\n            $krona_out,${meta.id}\n    else\n        ktImportText  \\\\\n            -o ${prefix}_krona.html \\\\\n            $krona_out\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        krona: \\$( echo \\$(ktImportText 2>&1) | sed 's/^.*KronaTools //g; s/- ktImportText.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fs=($krona_out)\n\n    if [ \"\\${#fs[@]}\" -eq \"1\" ]; then\n        ktImportText  \\\\\n            -o ${prefix}_krona.html \\\\\n            $krona_out,${meta.id}\n    else\n        ktImportText  \\\\\n            -o ${prefix}_krona.html \\\\\n            $krona_out\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        krona: \\$( echo \\$(ktImportText 2>&1) | sed 's/^.*KronaTools //g; s/- ktImportText.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "krona_out"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::krona=2.8.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/krona:2.8.1--pl5321hdfd78af_1' : 'quay.io/biocontainers/krona:2.8.1--pl5321hdfd78af_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "TRF": {
        "name_process": "TRF",
        "string_process": "process TRF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::trf=4.09.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/trf:4.09.1--h779adbc_1' :\n        'quay.io/biocontainers/trf:4.09.1--h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.lst\")     , emit: clean_name\n    tuple val(meta), path(\"*.dat\")     , emit: dat\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    def args   = task.ext.args   ?: '2 7 7 80 10 50 500 -h -ngs'\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    trf \\\\\n        $reads \\\\\n        $args \\\\\n        > ${prefix}.dat\n\n    sed -n '/^>/p' ${prefix}.dat | sed -e 's/^.//' > rm.names\n    sed -n '/^>/p' $reads | sed -e 's/^.//' > all.names\n    comm -23 all.names rm.names > ${reads}.lst\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        trf: \\$(trf -v)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args   = task.ext.args   ?: '2 7 7 80 10 50 500 -h -ngs'\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    trf \\\\\n        $reads \\\\\n        $args \\\\\n        > ${prefix}.dat\n\n    sed -n '/^>/p' ${prefix}.dat | sed -e 's/^.//' > rm.names\n    sed -n '/^>/p' $reads | sed -e 's/^.//' > all.names\n    comm -23 all.names rm.names > ${reads}.lst\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        trf: \\$(trf -v)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "TRF",
            "COMMA"
        ],
        "tools_url": [
            "https://bio.tools/trf",
            "https://bio.tools/comma"
        ],
        "tools_dico": [
            {
                "name": "TRF",
                "uri": "https://bio.tools/trf",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0379",
                                    "term": "Repeat sequence detection"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tandem Repeats Finder. Find tandem repeats in DNA sequences without the need to specify either the pattern or pattern size. It uses the method of k-tuple matching to avoid the need for full scale alignment matrix computations. It requires no a priori knowledge of the pattern, pattern size or number of copies. There are no restrictions on the size of the repeats that can be detected. It determines a consensus pattern for the smallest repetitive unit in the tandem repeat.",
                "homepage": "http://tandem.bu.edu/trf/trf.html"
            },
            {
                "name": "COMMA",
                "uri": "https://bio.tools/comma",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "COMMA (COMmunication MApping) is a method to dissect proteins dynamical architectures.",
                "homepage": "http://www.lcqb.upmc.fr/COMMA/COMMA.html"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::trf=4.09.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/trf:4.09.1--h779adbc_1' : 'quay.io/biocontainers/trf:4.09.1--h779adbc_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_FLAGSTAT": {
        "name_process": "SAMTOOLS_FLAGSTAT",
        "string_process": "process SAMTOOLS_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        flagstat \\\\\n        --threads ${task.cpus-1} \\\\\n        $bam \\\\\n        > ${bam}.flagstat\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        flagstat \\\\\n        --threads ${task.cpus-1} \\\\\n        $bam \\\\\n        > ${bam}.flagstat\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MOTUS_MERGE": {
        "name_process": "MOTUS_MERGE",
        "string_process": "process MOTUS_MERGE {\n    label 'process_low'\n    label 'error_ignore'\n\n    conda (params.enable_conda ? \"bioconda::motus=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/motus:3.0.1--pyhdfd78af_0' :\n        'quay.io/biocontainers/motus:3.0.1--pyhdfd78af_0' }\"\n\n    input:\n    path motus_outs\n    path reference_db\n\n    output:\n    path \"${prefix}_motus.out\"                           , emit: merged_out\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    motus merge \\\\\n        -i \"${motus_outs.join(',').trim()}\" \\\\\n        -t $task.cpus \\\\\n        -db ${reference_db} \\\\\n        $args \\\\\n        -o ${prefix}_motus.out\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mOTUs: \\$(grep motus ${reference_db}/db_mOTU_versions | sed 's/motus\\\\t//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"merged\"\n    \"\"\"\n    motus merge \\\\\n        -i \"${motus_outs.join(',').trim()}\" \\\\\n        -t $task.cpus \\\\\n        -db ${reference_db} \\\\\n        $args \\\\\n        -o ${prefix}_motus.out\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mOTUs: \\$(grep motus ${reference_db}/db_mOTU_versions | sed 's/motus\\\\t//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "motus_outs",
            "reference_db"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_low'",
            "label 'error_ignore'",
            "conda (params.enable_conda ? \"bioconda::motus=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/motus:3.0.1--pyhdfd78af_0' : 'quay.io/biocontainers/motus:3.0.1--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MOTUS_RUN": {
        "name_process": "MOTUS_RUN",
        "string_process": "process MOTUS_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::motus=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/motus:3.0.1--pyhdfd78af_0' :\n        'quay.io/biocontainers/motus:3.0.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference_db\n\n    output:\n    tuple val(meta), path(\"${prefix}_motus.out\")         , emit: motus_out\n    tuple val(meta), path(\"${prefix}_motus.out.krona\")   , emit: krona_input\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = meta.single_end ? \"-s $reads\" : \"-f ${reads[0]} -r ${reads[1]}\"\n    \"\"\"\n    motus profile \\\\\n        $inputs \\\\\n        -t $task.cpus \\\\\n        -n ${prefix} \\\\\n        -db ${reference_db} \\\\\n        $args \\\\\n        -I ${prefix}.bam \\\\\n        -o ${prefix}_motus.out\n    # for krona\n    motus profile \\\\\n        -i ${prefix}.bam \\\\\n        -t $task.cpus \\\\\n        -n ${prefix} \\\\\n        -db ${reference_db} \\\\\n        -C parenthesis \\\\\n        -o ${prefix}_motus.out.krona\n    # clean up\n    rm ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mOTUs: \\$(grep motus ${reference_db}/db_mOTU_versions | sed 's/motus\\\\t//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = meta.single_end ? \"-s $reads\" : \"-f ${reads[0]} -r ${reads[1]}\"\n    \"\"\"\n    motus profile \\\\\n        $inputs \\\\\n        -t $task.cpus \\\\\n        -n ${prefix} \\\\\n        -db ${reference_db} \\\\\n        $args \\\\\n        -I ${prefix}.bam \\\\\n        -o ${prefix}_motus.out\n    # for krona\n    motus profile \\\\\n        -i ${prefix}.bam \\\\\n        -t $task.cpus \\\\\n        -n ${prefix} \\\\\n        -db ${reference_db} \\\\\n        -C parenthesis \\\\\n        -o ${prefix}_motus.out.krona\n    # clean up\n    rm ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mOTUs: \\$(grep motus ${reference_db}/db_mOTU_versions | sed 's/motus\\\\t//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "reference_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::motus=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/motus:3.0.1--pyhdfd78af_0' : 'quay.io/biocontainers/motus:3.0.1--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "NCBIGENOMEDOWNLOAD": {
        "name_process": "NCBIGENOMEDOWNLOAD",
        "string_process": "process NCBIGENOMEDOWNLOAD {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ncbi-genome-download=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ncbi-genome-download:0.3.0--pyh864c0ab_1' :\n        'quay.io/biocontainers/ncbi-genome-download:0.3.0--pyh864c0ab_1' }\"\n\n    input:\n    val meta\n    path accessions\n\n    output:\n    tuple val(meta), path(\"*_genomic.gbff.gz\")        , emit: gbk     , optional: true\n    tuple val(meta), path(\"*_genomic.fna.gz\")         , emit: fna     , optional: true\n    tuple val(meta), path(\"*_rm.out.gz\")              , emit: rm      , optional: true\n    tuple val(meta), path(\"*_feature_table.txt.gz\")   , emit: features, optional: true\n    tuple val(meta), path(\"*_genomic.gff.gz\")         , emit: gff     , optional: true\n    tuple val(meta), path(\"*_protein.faa.gz\")         , emit: faa     , optional: true\n    tuple val(meta), path(\"*_protein.gpff.gz\")        , emit: gpff    , optional: true\n    tuple val(meta), path(\"*_wgsmaster.gbff.gz\")      , emit: wgs_gbk , optional: true\n    tuple val(meta), path(\"*_cds_from_genomic.fna.gz\"), emit: cds     , optional: true\n    tuple val(meta), path(\"*_rna.fna.gz\")             , emit: rna     , optional: true\n    tuple val(meta), path(\"*_rna_from_genomic.fna.gz\"), emit: rna_fna , optional: true\n    tuple val(meta), path(\"*_assembly_report.txt\")    , emit: report  , optional: true\n    tuple val(meta), path(\"*_assembly_stats.txt\")     , emit: stats   , optional: true\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def accessions_opt = accessions ? \"-A ${accessions}\" : \"\"\n    \"\"\"\n    ncbi-genome-download \\\\\n        $args \\\\\n        $accessions_opt \\\\\n        --output-folder ./ \\\\\n        --flat-output\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ncbigenomedownload: \\$( ncbi-genome-download --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def accessions_opt = accessions ? \"-A ${accessions}\" : \"\"\n    \"\"\"\n    ncbi-genome-download \\\\\n        $args \\\\\n        $accessions_opt \\\\\n        --output-folder ./ \\\\\n        --flat-output\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ncbigenomedownload: \\$( ncbi-genome-download --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "accessions"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ncbi-genome-download=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ncbi-genome-download:0.3.0--pyh864c0ab_1' : 'quay.io/biocontainers/ncbi-genome-download:0.3.0--pyh864c0ab_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKEN2_RUN": {
        "name_process": "KRAKEN2_RUN",
        "string_process": "process KRAKEN2_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_high_memory'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"bioconda::kraken2=2.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h7d875b9_1' :\n        'quay.io/biocontainers/kraken2:2.1.2--pl5321h7d875b9_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference_db\n    path kreport2mpa\n\n    output:\n    tuple val(meta), path(\"${prefix}_kraken2_mpa.txt\")       , emit: kraken2_mpa\n    tuple val(meta), path(\"${prefix}_kraken2_output\")        , emit: kraken2_out\n    tuple val(meta), path(\"${prefix}_kraken2_report\")        , emit: kraken2_rep\n    path \"versions.yml\"                                      , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end? '' : '--paired'\n    \"\"\"\n    kraken2 \\\\\n        --db ${reference_db} \\\\\n        --threads $task.cpus \\\\\n        --report ${prefix}_kraken2_report \\\\\n        --output ${prefix}_kraken2_output \\\\\n        $args \\\\\n        $paired \\\\\n        $reads\n    ## convert Kraken2 report files to metaphlan-style files\n    python $kreport2mpa \\\\\n        --report ${prefix}_kraken2_report \\\\\n        --output ${prefix}_kraken2_mpa.txt \\\\\n        --display-header\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/Kraken version //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end? '' : '--paired'\n    \"\"\"\n    kraken2 \\\\\n        --db ${reference_db} \\\\\n        --threads $task.cpus \\\\\n        --report ${prefix}_kraken2_report \\\\\n        --output ${prefix}_kraken2_output \\\\\n        $args \\\\\n        $paired \\\\\n        $reads\n    ## convert Kraken2 report files to metaphlan-style files\n    python $kreport2mpa \\\\\n        --report ${prefix}_kraken2_report \\\\\n        --output ${prefix}_kraken2_mpa.txt \\\\\n        --display-header\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/Kraken version //g; s/Copyright.*\\$//g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference_db",
            "kreport2mpa"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"bioconda::kraken2=2.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h7d875b9_1' : 'quay.io/biocontainers/kraken2:2.1.2--pl5321h7d875b9_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_FASTQ": {
        "name_process": "MERGE_FASTQ",
        "string_process": "process MERGE_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\")                  , emit: reads\n    path \"versions.yml\"                                  , emit: versions\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    if [ \"${meta.single_end}\" = \"true\" ]; then\n        cat $reads > ${prefix}.fastq.gz\n    else\n        cat *.unmapped_1.fastq.gz.* > ${prefix}_R1.fastq.gz\n        cat *.unmapped_2.fastq.gz.* > ${prefix}_R2.fastq.gz\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    if [ \"${meta.single_end}\" = \"true\" ]; then\n        cat $reads > ${prefix}.fastq.gz\n    else\n        cat *.unmapped_1.fastq.gz.* > ${prefix}_R1.fastq.gz\n        cat *.unmapped_2.fastq.gz.* > ${prefix}_R2.fastq.gz\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "process CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(reads, stageAs: \"input*/*\")\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.join(' ')} > ${prefix}.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.join(' ')} > ${prefix}_2.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.join(' ')} > ${prefix}.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.join(' ')} > ${prefix}_2.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HUMANN_INSTALL": {
        "name_process": "HUMANN_INSTALL",
        "string_process": "process HUMANN_INSTALL {\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\"\n\n    output:\n    path \"${prefix}/*\"                                    , emit: humann_db\n    path \"versions.yml\"                                   , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"HUMAnN_DB\"\n    \"\"\"\n    humann_config --update run_modes threads $task.cpus\n    humann_databases \\\\\n        $args \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def args   = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"HUMAnN_DB\"\n    \"\"\"\n    humann_config --update run_modes threads $task.cpus\n    humann_databases \\\\\n        $args \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        humann: \\$(humann --version | sed 's/humann //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/humann:3.0.1--pyh5e36f6f_0' : 'quay.io/biocontainers/humann:3.0.1--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_VIEW": {
        "name_process": "SAMTOOLS_VIEW",
        "string_process": "process SAMTOOLS_VIEW {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.bam\") , emit: bam , optional: true\n    tuple val(meta), path(\"*.cram\"), emit: cram, optional: true\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--reference ${fasta} -C\" : \"\"\n    def file_type = input.getExtension()\n    if (\"$input\" == \"${prefix}.${file_type}\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        view \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        $args \\\\\n        $input \\\\\n        $args2 \\\\\n        > ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--reference ${fasta} -C\" : \"\"\n    def file_type = input.getExtension()\n    if (\"$input\" == \"${prefix}.${file_type}\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        view \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        $args \\\\\n        $input \\\\\n        $args2 \\\\\n        > ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "iview"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/iview"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "iview",
                "uri": "https://bio.tools/iview",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Interactive HTML5 visualizer of protein-ligand complex.",
                "homepage": "http://istar.cse.cuhk.edu.hk/iview/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KNEADDATA_COUNT": {
        "name_process": "KNEADDATA_COUNT",
        "string_process": "process KNEADDATA_COUNT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::trimmomatic=0.39 bioconda::trf=4.09.1 bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 bioconda::fastqc=0.11.9 bioconda::kneaddata=0.10.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kneaddata:0.10.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/kneaddata:0.10.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(kneaddata)\n\n    output:\n    tuple val(meta), path(\"*_counts.tsv\"), emit: counts\n    path \"versions.yml\"                  , emit: versions\n\n    script:\n    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    kneaddata_read_count_table \\\\\n        $args \\\\\n        --input $kneaddata \\\\\n        --output ${prefix}_counts.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kneaddata: \\$(kneaddata --version | sed 's/kneaddata //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    kneaddata_read_count_table \\\\\n        $args \\\\\n        --input $kneaddata \\\\\n        --output ${prefix}_counts.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kneaddata: \\$(kneaddata --version | sed 's/kneaddata //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "kneaddata"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__shotgun",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::trimmomatic=0.39 bioconda::trf=4.09.1 bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 bioconda::fastqc=0.11.9 bioconda::kneaddata=0.10.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kneaddata:0.10.0--pyhdfd78af_0' : 'quay.io/biocontainers/kneaddata:0.10.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    }
}
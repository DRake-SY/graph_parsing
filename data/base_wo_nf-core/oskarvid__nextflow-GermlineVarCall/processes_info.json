{
    "BaseRecalibrator": {
        "name_process": "BaseRecalibrator",
        "string_process": "\nprocess BaseRecalibrator {\n\tmaxForks = 2\n\n\tinput:\n\tfile gatk4\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\tfile dbsnp_vcf\n\tfile v1000g_vcf\n\tfile mills_vcf\n\tfile dbsnp_vcf_index\n\tfile v1000g_vcf_index\n\tfile mills_vcf_index\n\teach intervals from file(params.contigs).readLines().findAll{ it }\n\tfile bam from MarkDup_bamoutput\n\tfile bai from MarkDup_baioutput\n\n\toutput:\n\tfile(\"recalibration_report.grp\") into BaseRecalibrator_output\n\n\tscript:\n    def interval = intervals.tokenize('\\t').collect{ \"-L $it\" }.join(\" \")\n\t\"java -Dsnappy.disable=true -XX:ParallelGCThreads=4 \\\n\t  -Dsamjdk.use_async_io=false -Xmx13G \\\n\t  -jar $gatk4 \\\n\t  BaseRecalibrator \\\n\t  --reference $fasta_ref \\\n\t  --input $bam \\\n\t  -O recalibration_report.grp \\\n\t  --knownSites $dbsnp_vcf \\\n\t  --knownSites $v1000g_vcf \\\n\t  --knownSites $mills_vcf \\\n\t  $interval 2> info\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def interval = intervals.tokenize('\\t').collect{ \"-L $it\" }.join(\" \")\n\t\"java -Dsnappy.disable=true -XX:ParallelGCThreads=4 \\\n\t  -Dsamjdk.use_async_io=false -Xmx13G \\\n\t  -jar $gatk4 \\\n\t  BaseRecalibrator \\\n\t  --reference $fasta_ref \\\n\t  --input $bam \\\n\t  -O recalibration_report.grp \\\n\t  --knownSites $dbsnp_vcf \\\n\t  --knownSites $v1000g_vcf \\\n\t  --knownSites $mills_vcf \\\n\t  $interval 2> info\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "INfORM"
        ],
        "tools_url": [
            "https://bio.tools/inform"
        ],
        "tools_dico": [
            {
                "name": "INfORM",
                "uri": "https://bio.tools/inform",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel computational method and its R and web-based implementations, to perform inference of gene network from transcriptome data and prioritization of key genes with central functional and topological role in the network.",
                "homepage": "https://github.com/Greco-Lab/INfORM"
            }
        ],
        "inputs": [
            "gatk4",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict",
            "dbsnp_vcf",
            "v1000g_vcf",
            "mills_vcf",
            "dbsnp_vcf_index",
            "v1000g_vcf_index",
            "mills_vcf_index",
            "file(params",
            "MarkDup_bamoutput",
            "MarkDup_baioutput"
        ],
        "nb_inputs": 13,
        "outputs": [
            "BaseRecalibrator_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [
            "maxForks = 2"
        ],
        "when": "",
        "stub": ""
    },
    "BwaMem": {
        "name_process": "BwaMem",
        "string_process": "\nprocess BwaMem {\n\ttag { sample_name }\n\tmaxForks = 1\n    \n    input:\n\tfile reads from tsv_ch1\n    file fasta_ref\n    file fasta_ref_fai\n    file fasta_ref_sa\n    file fasta_ref_bwt\n    file fasta_ref_ann\n    file fasta_ref_amb\n    file fasta_ref_pac\n\n    output:\n    file(\"bwamem.sam\") into BwaMem_output\n\n    script:\n    \"\"\"\n    bwa mem -t 2 $fasta_ref \\\n      -R '@RG\\\\tID:${reads[1]}\\\\tSM:${reads[0]}\\\\tLB:${reads[5]}\\\\tPL:${reads[6]}\\\\tPU:NotDefined' \\\n      -M ${reads[3]} ${reads[4]} > bwamem.sam\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    bwa mem -t 2 $fasta_ref \\\n      -R '@RG\\\\tID:${reads[1]}\\\\tSM:${reads[0]}\\\\tLB:${reads[5]}\\\\tPL:${reads[6]}\\\\tPU:NotDefined' \\\n      -M ${reads[3]} ${reads[4]} > bwamem.sam\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "tsv_ch1",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_sa",
            "fasta_ref_bwt",
            "fasta_ref_ann",
            "fasta_ref_amb",
            "fasta_ref_pac"
        ],
        "nb_inputs": 8,
        "outputs": [
            "BwaMem_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [
            "tag { sample_name }",
            "maxForks = 1"
        ],
        "when": "",
        "stub": ""
    },
    "FastqToSam": {
        "name_process": "FastqToSam",
        "string_process": "\nprocess FastqToSam {\n\n\tinput:\n\tfile reads from tsv_ch2\n\tfile gatk4\n\n\toutput:\n\tfile(\"FastqToSam.bam\") into FastqToSam_output\n\n\tscript:\n\t\"\"\"\n\tjava -Xmx16G -Dsnappy.disable=true -XX:ParallelGCThreads=4 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n      $gatk4 \\\n      FastqToSam \\\n      --FASTQ ${reads[3]} \\\n      --FASTQ2 ${reads[4]} \\\n      -O FastqToSam.bam \\\n      --SAMPLE_NAME ${reads[0]} \\\n      --READ_GROUP_NAME ${reads[1]} \\\n      --LIBRARY_NAME ${reads[5]} \\\n      --PLATFORM ${reads[6]} \\\n      --SORT_ORDER coordinate \\\n      2> info\n\t\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\t\"\"\"\n\tjava -Xmx16G -Dsnappy.disable=true -XX:ParallelGCThreads=4 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n      $gatk4 \\\n      FastqToSam \\\n      --FASTQ ${reads[3]} \\\n      --FASTQ2 ${reads[4]} \\\n      -O FastqToSam.bam \\\n      --SAMPLE_NAME ${reads[0]} \\\n      --READ_GROUP_NAME ${reads[1]} \\\n      --LIBRARY_NAME ${reads[5]} \\\n      --PLATFORM ${reads[6]} \\\n      --SORT_ORDER coordinate \\\n      2> info\n\t\"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "INfORM"
        ],
        "tools_url": [
            "https://bio.tools/inform"
        ],
        "tools_dico": [
            {
                "name": "INfORM",
                "uri": "https://bio.tools/inform",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel computational method and its R and web-based implementations, to perform inference of gene network from transcriptome data and prioritization of key genes with central functional and topological role in the network.",
                "homepage": "https://github.com/Greco-Lab/INfORM"
            }
        ],
        "inputs": [
            "tsv_ch2",
            "gatk4"
        ],
        "nb_inputs": 2,
        "outputs": [
            "FastqToSam_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "MergeBamAlignment": {
        "name_process": "MergeBamAlignment",
        "string_process": "\nprocess MergeBamAlignment {\n\n\tinput:\n\tfile gatk4\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\tset pair_id, file(bam), file(sam) from sam_and_bam_ch\n\n\toutput:\n\tset pair_id, file(\"mergebam.fastqtosam.bwa.bam\") into MergeBamAlignment_output\n\n\tscript:\n\t\"\"\"\n\techo ${pair_id} ${bam} ${sam} && \\\n\tjava -Dsnappy.disable=true -Xmx16G -XX:ParallelGCThreads=16 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n      $gatk4 \\\n      MergeBamAlignment \\\n      --VALIDATION_STRINGENCY SILENT \\\n      --EXPECTED_ORIENTATIONS FR \\\n      --ATTRIBUTES_TO_RETAIN X0 \\\n      --ALIGNED_BAM $sam \\\n      --UNMAPPED_BAM $bam \\\n      -O mergebam.fastqtosam.bwa.bam \\\n      --reference $fasta_ref \\\n      --SORT_ORDER coordinate \\\n      --IS_BISULFITE_SEQUENCE false \\\n      --ALIGNED_READS_ONLY false \\\n      --CLIP_ADAPTERS false \\\n      --MAX_RECORDS_IN_RAM 200000 \\\n      --ADD_MATE_CIGAR true \\\n      --MAX_INSERTIONS_OR_DELETIONS -1 \\\n      --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n      --PROGRAM_RECORD_ID \"bwamem\" \\\n      --PROGRAM_GROUP_VERSION \"0.7.12-r1039\" \\\n      --PROGRAM_GROUP_COMMAND_LINE \"bwa mem -t 18 -R -M Input1 Input2 > output.sam\" \\\n      --PROGRAM_GROUP_NAME \"bwamem\"\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "\t\"\"\"\n\techo ${pair_id} ${bam} ${sam} && \\\n\tjava -Dsnappy.disable=true -Xmx16G -XX:ParallelGCThreads=16 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n      $gatk4 \\\n      MergeBamAlignment \\\n      --VALIDATION_STRINGENCY SILENT \\\n      --EXPECTED_ORIENTATIONS FR \\\n      --ATTRIBUTES_TO_RETAIN X0 \\\n      --ALIGNED_BAM $sam \\\n      --UNMAPPED_BAM $bam \\\n      -O mergebam.fastqtosam.bwa.bam \\\n      --reference $fasta_ref \\\n      --SORT_ORDER coordinate \\\n      --IS_BISULFITE_SEQUENCE false \\\n      --ALIGNED_READS_ONLY false \\\n      --CLIP_ADAPTERS false \\\n      --MAX_RECORDS_IN_RAM 200000 \\\n      --ADD_MATE_CIGAR true \\\n      --MAX_INSERTIONS_OR_DELETIONS -1 \\\n      --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n      --PROGRAM_RECORD_ID \"bwamem\" \\\n      --PROGRAM_GROUP_VERSION \"0.7.12-r1039\" \\\n      --PROGRAM_GROUP_COMMAND_LINE \"bwa mem -t 18 -R -M Input1 Input2 > output.sam\" \\\n      --PROGRAM_GROUP_NAME \"bwamem\"\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk4",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict",
            "sam_and_bam_ch"
        ],
        "nb_inputs": 5,
        "outputs": [
            "MergeBamAlignment_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "MarkDup": {
        "name_process": "MarkDup",
        "string_process": "\nprocess MarkDup {\n\n\tinput:\n\tfile gatk4\n\tfile bam_files from MergeBamAlignment_output.collect()\n\n\toutput:\n\tfile(\"markduplicates.mergebam.fastqtosam.bwa.bam\") into MarkDup_bamoutput\n\tfile(\"markduplicates.mergebam.fastqtosam.bwa.bai\") into MarkDup_baioutput\n\tfile(\"markduplicates.metrics\")\n\n\tscript:\n\tdef input_args = bam_files.collect{ \"-I $it\" }.join(\" \")\n\t\"java -Dsnappy.disable=true -Xmx16G -XX:ParallelGCThreads=16 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n\t  $gatk4 \\\n\t  MarkDuplicates \\\n\t  $input_args \\\n\t  -O markduplicates.mergebam.fastqtosam.bwa.bam \\\n\t  --VALIDATION_STRINGENCY LENIENT \\\n\t  --METRICS_FILE markduplicates.metrics \\\n\t  --MAX_FILE_HANDLES_FOR_READ_ENDS_MAP 200000 \\\n\t  --CREATE_INDEX true\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\tdef input_args = bam_files.collect{ \"-I $it\" }.join(\" \")\n\t\"java -Dsnappy.disable=true -Xmx16G -XX:ParallelGCThreads=16 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n\t  $gatk4 \\\n\t  MarkDuplicates \\\n\t  $input_args \\\n\t  -O markduplicates.mergebam.fastqtosam.bwa.bam \\\n\t  --VALIDATION_STRINGENCY LENIENT \\\n\t  --METRICS_FILE markduplicates.metrics \\\n\t  --MAX_FILE_HANDLES_FOR_READ_ENDS_MAP 200000 \\\n\t  --CREATE_INDEX true\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk4",
            "MergeBamAlignment_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "MarkDup_bamoutput",
            "MarkDup_baioutput"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "GatherBqsrReports": {
        "name_process": "GatherBqsrReports",
        "string_process": "\nprocess GatherBqsrReports {\n\t\n\tinput:\n\tfile gatk4\n\tfile input_bqsr_reports from BaseRecalibrator_output.collect()\n\n\toutput:\n\tfile(\"gathered_recalibration_reports.grp\") into GatherBqsrReports_output\n\n\tscript:\n\tdef input_reports = input_bqsr_reports.collect{ \"--input $it\" }.join(\" \")\n\t\"java -Dsnappy.disable=true -Xmx16G -jar \\\n      $gatk4 \\\n      GatherBQSRReports \\\n      $input_reports \\\n      -O gathered_recalibration_reports.grp\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\tdef input_reports = input_bqsr_reports.collect{ \"--input $it\" }.join(\" \")\n\t\"java -Dsnappy.disable=true -Xmx16G -jar \\\n      $gatk4 \\\n      GatherBQSRReports \\\n      $input_reports \\\n      -O gathered_recalibration_reports.grp\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk4",
            "BaseRecalibrator_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "GatherBqsrReports_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "ApplyBQSR": {
        "name_process": "ApplyBQSR",
        "string_process": "\nprocess ApplyBQSR {\n\n\tinput:\n\tfile gatk4\n\tfile read from read1\n\tfile recalibration_report from GatherBqsrReports_output\n\teach intervals from file(params.contigs).readLines().findAll{ it }\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\n\toutput:\n\tfile(\"applybqsr.markdup.mergebam.fastqtosam.bwa.bam\") into ApplyBQSR_bamoutput\n\tfile(\"applybqsr.markdup.mergebam.fastqtosam.bwa.bai\") into ApplyBQSR_baioutput\n\n\tshell:\n    def interval = intervals.tokenize('\\t').collect{ \"-L $it\" }.join(\" \")\n\t\"\"\"\n\tjava -Dsnappy.disable=true -Xmx13G -XX:ParallelGCThreads=4 \\\n\t  -jar $gatk4 \\\n\t  ApplyBQSR \\\n\t  --reference $fasta_ref \\\n\t  --input $read \\\n\t  -O applybqsr.markdup.mergebam.fastqtosam.bwa.bam \\\n\t  --createOutputBamIndex true \\\n\t  -bqsr $recalibration_report \\\n\t  $interval\n\t\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def interval = intervals.tokenize('\\t').collect{ \"-L $it\" }.join(\" \")\n\t\"\"\"\n\tjava -Dsnappy.disable=true -Xmx13G -XX:ParallelGCThreads=4 \\\n\t  -jar $gatk4 \\\n\t  ApplyBQSR \\\n\t  --reference $fasta_ref \\\n\t  --input $read \\\n\t  -O applybqsr.markdup.mergebam.fastqtosam.bwa.bam \\\n\t  --createOutputBamIndex true \\\n\t  -bqsr $recalibration_report \\\n\t  $interval\n\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk4",
            "read1",
            "GatherBqsrReports_output",
            "file(params",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict"
        ],
        "nb_inputs": 7,
        "outputs": [
            "ApplyBQSR_bamoutput",
            "ApplyBQSR_baioutput"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "GatherBamFiles": {
        "name_process": "GatherBamFiles",
        "string_process": "\nprocess GatherBamFiles {\n\tinput:\n\tfile gatk4\n\tfile input_bams from ApplyBQSR_bamoutput.collect()\n\n\toutput:\n\tfile(\"gatheredbams.applybqsr.baserecal.markdup.fastqtosam.bwa.bam\") into GatherBamFiles_bamoutput\n\tfile(\"gatheredbams.applybqsr.baserecal.markdup.fastqtosam.bwa.bai\") into GatherBamFiles_baioutput\n\n\tscript:\n\t\"java -Dsnappy.disable=true -Xmx16G -XX:ParallelGCThreads=4 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n      $gatk4 \\\n      GatherBamFiles \\\n      --input $input_bams \\\n      -O gatheredbams.applybqsr.baserecal.markdup.fastqtosam.bwa.bam \\\n      --CREATE_INDEX true\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"java -Dsnappy.disable=true -Xmx16G -XX:ParallelGCThreads=4 -Djava.io.tmpdir=`pwd`/tmp -jar \\\n      $gatk4 \\\n      GatherBamFiles \\\n      --input $input_bams \\\n      -O gatheredbams.applybqsr.baserecal.markdup.fastqtosam.bwa.bam \\\n      --CREATE_INDEX true\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk4",
            "ApplyBQSR_bamoutput"
        ],
        "nb_inputs": 2,
        "outputs": [
            "GatherBamFiles_bamoutput",
            "GatherBamFiles_baioutput"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "HaplotypeCaller": {
        "name_process": "HaplotypeCaller",
        "string_process": "\nprocess HaplotypeCaller {\n\tinput:\n\tfile gatk3\n\tfile bam from GatherBamFiles_bamoutput\n\tfile bam_index from GatherBamFiles_baioutput\n\tfile fasta_ref_dict\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\n\toutput:\n\tfile(\"haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf\") into HaplotypeCaller_vcf\n\tfile(\"haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf.idx\") into HaplotypeCaller_idx\n\n\tshell:\n\t\"\"\"\n\tjava -XX:ParallelGCThreads=4 -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xmx13G \\\n\t  -jar $gatk3 \\\n\t  -T HaplotypeCaller \\\n\t  -nct 4 \\\n\t  -R $fasta_ref \\\n\t  -o haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf \\\n\t  -I $bam \\\n\t  -ERC GVCF\n\t\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\t\"\"\"\n\tjava -XX:ParallelGCThreads=4 -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xmx13G \\\n\t  -jar $gatk3 \\\n\t  -T HaplotypeCaller \\\n\t  -nct 4 \\\n\t  -R $fasta_ref \\\n\t  -o haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf \\\n\t  -I $bam \\\n\t  -ERC GVCF\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk3",
            "GatherBamFiles_bamoutput",
            "GatherBamFiles_baioutput",
            "fasta_ref_dict",
            "fasta_ref",
            "fasta_ref_fai"
        ],
        "nb_inputs": 6,
        "outputs": [
            "HaplotypeCaller_vcf",
            "HaplotypeCaller_idx"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "GenotypeGVCF": {
        "name_process": "GenotypeGVCF",
        "string_process": "\nprocess GenotypeGVCF {\n\tinput:\n\tfile gatk3\n\tfile vcf from HaplotypeCaller_vcf\n\tfile vcf_index from HaplotypeCaller_idx\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\n\toutput:\n\tfile(\"genotype.haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf\") into GenotypeGVCF_vcfoutput\n\tfile(\"genotype.haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf.idx\") into GenotypeGVCF_idxoutput\n\n\tshell:\n\t\"\"\"\n\tjava -Xmx16G -XX:ParallelGCThreads=18 -jar \\\n\t$gatk3 \\\n\t-T GenotypeGVCFs \\\n\t-nt 4 \\\n\t-R $fasta_ref \\\n\t-o genotype.haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf \\\n\t--variant $vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\tjava -Xmx16G -XX:ParallelGCThreads=18 -jar \\\n\t$gatk3 \\\n\t-T GenotypeGVCFs \\\n\t-nt 4 \\\n\t-R $fasta_ref \\\n\t-o genotype.haplotypecaller.applybqsr.markdup.mergebam.fastqtosam.bwa.g.vcf \\\n\t--variant $vcf\n\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk3",
            "HaplotypeCaller_vcf",
            "HaplotypeCaller_idx",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict"
        ],
        "nb_inputs": 6,
        "outputs": [
            "GenotypeGVCF_vcfoutput",
            "GenotypeGVCF_idxoutput"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "VariantRecalibratorSNP": {
        "name_process": "VariantRecalibratorSNP",
        "string_process": "\nprocess VariantRecalibratorSNP {\n\tinput:\n\tfile gatk3\n\tfile vcf from GenotypeGVCF_vcfoutput\n\tfile idx from GenotypeGVCF_idxoutput\n\tfile v1000g_vcf\n\tfile omni_vcf\n\tfile dbsnp_vcf\n\tfile hapmap_vcf\n\tfile v1000g_vcf_index\n\tfile omni_vcf_index\n\tfile dbsnp_vcf_index\n\tfile hapmap_vcf_index\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\n\toutput:\n\tfile(\"GVCF.SNP.recal\") into VariantRecalibratorSNP_recal\n\tfile(\"GVCF.SNP.tranches\") into VariantRecalibratorSNP_tranches\n\n\tshell:\n\t\"\"\"\n\tjava -Xmx16G -XX:ParallelGCThreads=18 -jar \\\n\t$gatk3 \\\n\t-T VariantRecalibrator \\\n\t-nt 4 \\\n\t-R $fasta_ref \\\n\t-input $vcf \\\n\t-mode SNP \\\n\t-resource:v1000G,known=false,training=true,truth=false,prior=10.0 $v1000g_vcf \\\n\t-resource:omni,known=false,training=true,truth=true,prior=12.0 $omni_vcf \\\n\t-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $dbsnp_vcf \\\n\t-resource:hapmap,known=false,training=true,truth=true,prior=15.0 $hapmap_vcf \\\n\t-an QD -an MQ -an DP -an MQRankSum -an ReadPosRankSum -an FS -an SOR \\\n\t-tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.8 -tranche 99.6 \\\n\t-tranche 99.5 -tranche 99.4 -tranche 99.3 -tranche 99.0 -tranche 98.0 \\\n\t-tranche 97.0 -tranche 90.0 \\\n\t-recalFile GVCF.SNP.recal \\\n\t-tranchesFile GVCF.SNP.tranches\n\t\"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "\t\"\"\"\n\tjava -Xmx16G -XX:ParallelGCThreads=18 -jar \\\n\t$gatk3 \\\n\t-T VariantRecalibrator \\\n\t-nt 4 \\\n\t-R $fasta_ref \\\n\t-input $vcf \\\n\t-mode SNP \\\n\t-resource:v1000G,known=false,training=true,truth=false,prior=10.0 $v1000g_vcf \\\n\t-resource:omni,known=false,training=true,truth=true,prior=12.0 $omni_vcf \\\n\t-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $dbsnp_vcf \\\n\t-resource:hapmap,known=false,training=true,truth=true,prior=15.0 $hapmap_vcf \\\n\t-an QD -an MQ -an DP -an MQRankSum -an ReadPosRankSum -an FS -an SOR \\\n\t-tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.8 -tranche 99.6 \\\n\t-tranche 99.5 -tranche 99.4 -tranche 99.3 -tranche 99.0 -tranche 98.0 \\\n\t-tranche 97.0 -tranche 90.0 \\\n\t-recalFile GVCF.SNP.recal \\\n\t-tranchesFile GVCF.SNP.tranches\n\t\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk3",
            "GenotypeGVCF_vcfoutput",
            "GenotypeGVCF_idxoutput",
            "v1000g_vcf",
            "omni_vcf",
            "dbsnp_vcf",
            "hapmap_vcf",
            "v1000g_vcf_index",
            "omni_vcf_index",
            "dbsnp_vcf_index",
            "hapmap_vcf_index",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict"
        ],
        "nb_inputs": 14,
        "outputs": [
            "VariantRecalibratorSNP_recal",
            "VariantRecalibratorSNP_tranches"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "VariantRecalibratorINDEL": {
        "name_process": "VariantRecalibratorINDEL",
        "string_process": "\nprocess VariantRecalibratorINDEL {\n\tinput:\n\tfile gatk3\n\tfile vcf from GenotypeGVCF_vcfoutput\n\tfile idx from GenotypeGVCF_idxoutput\n\tfile dbsnp_vcf\n\tfile dbsnp_vcf_index\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\n\toutput:\n\tfile(\"GVCF.INDEL.recal\") into VariantRecalibratorINDEL_recal\n\tfile(\"GVCF.INDEL.tranches\") into VariantRecalibratorINDEL_tranches\n\n\tshell:\n\t\"\"\"\n\tjava -Xmx16G -XX:ParallelGCThreads=18 -jar \\\n\t$gatk3 \\\n\t-T VariantRecalibrator \\\n\t-nt 4 \\\n\t-R $fasta_ref \\\n\t-input $vcf \\\n\t-mode INDEL \\\n\t-resource:mills,known=false,training=true,truth=true,prior=12.0 $mills_vcf \\\n\t-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $dbsnp_vcf \\\n\t-an QD -an DP -an FS -an SOR -an ReadPosRankSum -an MQRankSum \\\n\t-tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.5 -tranche 99.0 \\\n\t-tranche 97.0 -tranche 96.0 -tranche 95.0 -tranche 94.0 -tranche 93.5 \\\n\t-tranche 93.0 -tranche 92.0 -tranche 91.0 -tranche 90.0 \\\n\t-recalFile GVCF.INDEL.recal \\\n\t-tranchesFile GVCF.INDEL.tranches\n\t\"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "\t\"\"\"\n\tjava -Xmx16G -XX:ParallelGCThreads=18 -jar \\\n\t$gatk3 \\\n\t-T VariantRecalibrator \\\n\t-nt 4 \\\n\t-R $fasta_ref \\\n\t-input $vcf \\\n\t-mode INDEL \\\n\t-resource:mills,known=false,training=true,truth=true,prior=12.0 $mills_vcf \\\n\t-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $dbsnp_vcf \\\n\t-an QD -an DP -an FS -an SOR -an ReadPosRankSum -an MQRankSum \\\n\t-tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.5 -tranche 99.0 \\\n\t-tranche 97.0 -tranche 96.0 -tranche 95.0 -tranche 94.0 -tranche 93.5 \\\n\t-tranche 93.0 -tranche 92.0 -tranche 91.0 -tranche 90.0 \\\n\t-recalFile GVCF.INDEL.recal \\\n\t-tranchesFile GVCF.INDEL.tranches\n\t\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk3",
            "GenotypeGVCF_vcfoutput",
            "GenotypeGVCF_idxoutput",
            "dbsnp_vcf",
            "dbsnp_vcf_index",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict"
        ],
        "nb_inputs": 8,
        "outputs": [
            "VariantRecalibratorINDEL_recal",
            "VariantRecalibratorINDEL_tranches"
        ],
        "nb_outputs": 2,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "ApplyVQSRSNP": {
        "name_process": "ApplyVQSRSNP",
        "string_process": "\nprocess ApplyVQSRSNP {\n\tinput:\n\tfile gatk3\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\tfile vcf from HaplotypeCaller_vcf\n\tfile recal from VariantRecalibratorSNP_recal\n\tfile tranches from VariantRecalibratorSNP_tranches\n\n\toutput:\n\tfile(\"GVCF.SNP.g.vcf\")\n\tfile(\"GVCF.SNP.g.vcf.idx\")\n\n\tshell:\n\t\"\"\"\n\tjava -XX:ParallelGCThreads=18 -jar -Xmx16G \\\n\t$gatk3 \\\n\t-T ApplyRecalibration \\\n\t-nt 4 \\\n\t-input $vcf \\\n\t-R $fasta_ref \\\n\t-mode SNP \\\n\t--ts_filter_level 99.0 \\\n\t-tranchesFile $tranches \\\n\t-recalFile $recal \\\n\t-o GVCF.SNP.g.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\"\"\"\n\tjava -XX:ParallelGCThreads=18 -jar -Xmx16G \\\n\t$gatk3 \\\n\t-T ApplyRecalibration \\\n\t-nt 4 \\\n\t-input $vcf \\\n\t-R $fasta_ref \\\n\t-mode SNP \\\n\t--ts_filter_level 99.0 \\\n\t-tranchesFile $tranches \\\n\t-recalFile $recal \\\n\t-o GVCF.SNP.g.vcf\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk3",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict",
            "HaplotypeCaller_vcf",
            "VariantRecalibratorSNP_recal",
            "VariantRecalibratorSNP_tranches"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "ApplyVQSRINDEL": {
        "name_process": "ApplyVQSRINDEL",
        "string_process": "\nprocess ApplyVQSRINDEL {\n\tinput:\n\tfile gatk3\n\tfile fasta_ref\n\tfile fasta_ref_fai\n\tfile fasta_ref_dict\n\tfile vcf from HaplotypeCaller_vcf\n\tfile recal from VariantRecalibratorINDEL_recal\n\tfile tranches from VariantRecalibratorINDEL_tranches\n\n\toutput:\n\tfile(\"GVCF.INDEL.g.vcf\")\n\tfile(\"GVCF.INDEL.g.vcf.idx\")\n\n\tshell:\n\t\"\"\"\n\tjava -XX:ParallelGCThreads=18 -jar -Xmx16G \\\n\t$gatk3 \\\n\t-T ApplyRecalibration \\\n\t-nt 4 \\\n\t-input $vcf \\\n\t-R $fasta_ref \\\n\t-mode INDEL \\\n\t--ts_filter_level 95.0 \\\n\t-tranchesFile $tranches \\\n\t-recalFile $recal \\\n\t-o GVCF.INDEL.g.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\"\"\"\n\tjava -XX:ParallelGCThreads=18 -jar -Xmx16G \\\n\t$gatk3 \\\n\t-T ApplyRecalibration \\\n\t-nt 4 \\\n\t-input $vcf \\\n\t-R $fasta_ref \\\n\t-mode INDEL \\\n\t--ts_filter_level 95.0 \\\n\t-tranchesFile $tranches \\\n\t-recalFile $recal \\\n\t-o GVCF.INDEL.g.vcf\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk3",
            "fasta_ref",
            "fasta_ref_fai",
            "fasta_ref_dict",
            "HaplotypeCaller_vcf",
            "VariantRecalibratorINDEL_recal",
            "VariantRecalibratorINDEL_tranches"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "oskarvid__nextflow-GermlineVarCall",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
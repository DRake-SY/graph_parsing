{
    "reverseComp": {
        "name_process": "reverseComp",
        "string_process": "\nprocess reverseComp {\n  label 'revComp'\n  publishDir \"${path}\", mode: 'copy', pattern: '*.fasta'\n\n\n  input:\n    tuple val(name), val(path), path(sequences), path(cluster)\n\n\n  output:\n    tuple val(name), path(outpath)\n\n  script:\n  outpath = \"${sequences}\".reverse().replaceFirst(\"positive\".reverse(),\"negative\".reverse()).reverse()\n  \"\"\"\n  python3 ${projectDir}/bin/reverse_complement.py \"${sequences}\"\n\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 20,
        "string_script": "  outpath = \"${sequences}\".reverse().replaceFirst(\"positive\".reverse(),\"negative\".reverse()).reverse()\n  \"\"\"\n  python3 ${projectDir}/bin/reverse_complement.py \"${sequences}\"\n\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "sequences",
            "cluster"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'revComp'",
            "publishDir \"${path}\", mode: 'copy', pattern: '*.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "vclust": {
        "name_process": "vclust",
        "string_process": "\nprocess vclust {\n  label 'vclust'\n  publishDir \"${params.output}/${params.vclust_output}\", mode: 'copy', pattern: '*vclust*'\n  publishDir \"${params.output}/${params.vclust_output}\", mode: 'copy', pattern: '*UNCLUSTERED*'\n  publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'\n  publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_vclust.fasta'\n\n  input:\n    path(sequences)\n    val(addParams)\n    val(goi)\n\n  output:\n    tuple val(\"${params.output}/${params.vclust_output}\"), path(\"${sequences.baseName}_vclust.fasta\"), path(\"${sequences.baseName}_vclust_cluster.uc.clstr\")\n    path \"${sequences.baseName}_vclust_cluster.uc\"\n                                                                                 \n    path \"${sequences.baseName}_vclust_UNCLUSTERED.fasta\"\n\n  script:\n  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    vsearch ${addParams} --threads ${task.cpus} --cluster_fast ${sequences} --centroids ${sequences.baseName}_vclust.fasta --uc ${sequences.baseName}_vclust_cluster.uc\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_vclust.fasta\" || grep -A1 \"\\$ID\" ${GOI} >> \"${sequences.baseName}_vclust.fasta\"\n      done\n    fi\n\n\n    python3 ${projectDir}/bin/vclust2cdhit.py ${sequences.baseName}_vclust_cluster.uc ${GOI}\n    python3 ${projectDir}/bin/filter_unclustered.py \"${sequences.baseName}_vclust.fasta\" \"${sequences.baseName}_vclust_cluster.uc.clstr\"\n    mv \"${sequences.baseName}_vclust.fastaTEST\" \"${sequences.baseName}_vclust.fasta\"\n\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 36,
        "string_script": "  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    vsearch ${addParams} --threads ${task.cpus} --cluster_fast ${sequences} --centroids ${sequences.baseName}_vclust.fasta --uc ${sequences.baseName}_vclust_cluster.uc\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_vclust.fasta\" || grep -A1 \"\\$ID\" ${GOI} >> \"${sequences.baseName}_vclust.fasta\"\n      done\n    fi\n\n\n    python3 ${projectDir}/bin/vclust2cdhit.py ${sequences.baseName}_vclust_cluster.uc ${GOI}\n    python3 ${projectDir}/bin/filter_unclustered.py \"${sequences.baseName}_vclust.fasta\" \"${sequences.baseName}_vclust_cluster.uc.clstr\"\n    mv \"${sequences.baseName}_vclust.fastaTEST\" \"${sequences.baseName}_vclust.fasta\"\n\n  \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "VSEARCH"
        ],
        "tools_url": [
            "https://bio.tools/vsearch"
        ],
        "tools_dico": [
            {
                "name": "VSEARCH",
                "uri": "https://bio.tools/vsearch",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2520",
                                    "term": "DNA mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0450",
                                    "term": "Chimera detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0450",
                                    "term": "Chimeric sequence detection"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2977",
                                "term": "Nucleic acid sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_0865",
                                "term": "Sequence similarity score"
                            }
                        ]
                    }
                ],
                "description": "High-throughput search and clustering sequence analysis tool. It supports de novo and reference based chimera detection, clustering, full-length and prefix dereplication, reverse complementation, masking, all-vs-all pairwise global alignment, exact and global alignment searching, shuffling, subsampling and sorting. It also supports FASTQ file analysis, filtering and conversion.",
                "homepage": "https://github.com/torognes/vsearch"
            }
        ],
        "inputs": [
            "sequences",
            "addParams",
            "goi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'vclust'",
            "publishDir \"${params.output}/${params.vclust_output}\", mode: 'copy', pattern: '*vclust*'",
            "publishDir \"${params.output}/${params.vclust_output}\", mode: 'copy', pattern: '*UNCLUSTERED*'",
            "publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'",
            "publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_vclust.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "hdbscan": {
        "name_process": "hdbscan",
        "string_process": "\nprocess hdbscan {\n  label 'hdbscan'\n  publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*_hdbscan.fasta\"\n  publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*.clstr\"\n  publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*log\"\n  publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*_hdbscan_UNCLUSTERED.fasta\"\n  publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'\n  publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_hdbscan.fasta'\n\n\n  input:\n    path(sequences)\n    val(addParams)\n    val(goi)\n\n  output:\n    tuple val(\"${params.output}/${params.hdbscan_output}\"), path(\"${sequences.baseName}_hdbscan.fasta\"), path(\"${sequences.baseName}_hdbscan.fasta.clstr\")\n                                                                              \n    path \"${sequences.baseName}_hdbscan_UNCLUSTERED.fasta\"\n    path \"hdbscan.log\"\n\n  script:\n  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    python3 ${baseDir}/bin/hdbscan_virus.py -v -p ${task.cpus} ${addParams} ${sequences} ${GOI} 2> hdbscan.log\n    touch cluster-1.fasta\n    mv cluster-1.fasta  \"${sequences.baseName}_hdbscan_UNCLUSTERED.fasta\"\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 30,
        "string_script": "  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    python3 ${baseDir}/bin/hdbscan_virus.py -v -p ${task.cpus} ${addParams} ${sequences} ${GOI} 2> hdbscan.log\n    touch cluster-1.fasta\n    mv cluster-1.fasta  \"${sequences.baseName}_hdbscan_UNCLUSTERED.fasta\"\n\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "addParams",
            "goi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'hdbscan'",
            "publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*_hdbscan.fasta\"",
            "publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*.clstr\"",
            "publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*log\"",
            "publishDir \"${params.output}/${params.hdbscan_output}\", mode: 'copy', pattern: \"*_hdbscan_UNCLUSTERED.fasta\"",
            "publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'",
            "publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_hdbscan.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "nwdisplay": {
        "name_process": "nwdisplay",
        "string_process": "\nprocess nwdisplay {\n  label 'nwdisplay'\n  publishDir \"${params.output}/${params.nwdisplay_output}\", mode: 'copy', pattern: \"*_nwdisplay*\"\n  publishDir \"${params.output}/${params.eval_output}\", mode: 'copy', pattern: \"*pdf\"\n\n  input:\n    tuple val(name), path(newick)\n\n  output:\n    path \"${newick}_nwdisplay.svg\", emit: nwdisplay_result\n    path \"${newick}_nwdisplay.pdf\"\n\n  script:\n  \"\"\"\n  nw_reroot \"${newick}\" | nw_display -v 20 -i \"font-size:3\" -l \"font-size:4;font-family:helvetica;font-style:italic\" -b \"font-size:3;opacity:0\" -s - > \"${newick}_nwdisplay.svg\"\n  rsvg-convert -f pdf -o \"${newick}_nwdisplay.pdf\" ${newick}_nwdisplay.svg\n\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  nw_reroot \"${newick}\" | nw_display -v 20 -i \"font-size:3\" -l \"font-size:4;font-family:helvetica;font-style:italic\" -b \"font-size:3;opacity:0\" -s - > \"${newick}_nwdisplay.svg\"\n  rsvg-convert -f pdf -o \"${newick}_nwdisplay.pdf\" ${newick}_nwdisplay.svg\n\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "newick"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'nwdisplay'",
            "publishDir \"${params.output}/${params.nwdisplay_output}\", mode: 'copy', pattern: \"*_nwdisplay*\"",
            "publishDir \"${params.output}/${params.eval_output}\", mode: 'copy', pattern: \"*pdf\""
        ],
        "when": "",
        "stub": ""
    },
    "fasttree": {
        "name_process": "fasttree",
        "string_process": "\nprocess fasttree {\n  label 'fasttree'\n  publishDir \"${params.output}/${params.fasttree_output}\", mode: 'copy', pattern: '*_fasttree.nwk'\n\n  input:\n    tuple val(name), path(alignment)\n\n  output:\n    tuple val(name), path(\"${alignment.baseName}_fasttree.nwk\"), emit: fasttree_result\n\n  script:\n  \"\"\"\n  FastTreeMP -gtr -nt ${alignment} > \"${alignment.baseName}_fasttree.nwk\"\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  FastTreeMP -gtr -nt ${alignment} > \"${alignment.baseName}_fasttree.nwk\"\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'fasttree'",
            "publishDir \"${params.output}/${params.fasttree_output}\", mode: 'copy', pattern: '*_fasttree.nwk'"
        ],
        "when": "",
        "stub": ""
    },
    "mafft": {
        "name_process": "mafft",
        "string_process": "\nprocess mafft {\n  label 'mafft'\n  publishDir \"${params.output}/${params.mafft_output}\", mode: 'copy', pattern: '*aln'\n\n  input:\n    tuple val(name), val(path), path(sequences), path(cluster)\n\n  output:\n    tuple val(name), path(\"${sequences.baseName}_mafft.aln\"), emit: mafft_result\n\n  script:\n  \"\"\"\n  mafft --thread ${task.cpus} --reorder ${sequences} > \"${sequences.baseName}_mafft.aln\"\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  mafft --thread ${task.cpus} --reorder ${sequences} > \"${sequences.baseName}_mafft.aln\"\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "name",
            "sequences",
            "cluster"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'mafft'",
            "publishDir \"${params.output}/${params.mafft_output}\", mode: 'copy', pattern: '*aln'"
        ],
        "when": "",
        "stub": ""
    },
    "sumaclust": {
        "name_process": "sumaclust",
        "string_process": "\nprocess sumaclust {\n  label 'sumaclust'\n  publishDir \"${params.output}/${params.sumaclust_output}\", mode: 'copy', pattern: '*.fasta*'\n  publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'\n  publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_sumaclust.fasta'\n\n\n  input:\n    path(sequences)\n    val(addParams)\n    val(goi)\n\n  output:\n    tuple val (\"${params.output}/${params.sumaclust_output}\"), path (\"${sequences.baseName}_sumaclust.fasta\"), path(\"${sequences.baseName}_sumaclust.fasta.clstr\")\n                                                                                  \n    path \"${sequences.baseName}_sumaclust_UNCLUSTERED.fasta\"\n\n\n  script:\n  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    sumaclust \"${addParams}\" -p \"${task.cpus}\" \"${sequences}\"  > \"${sequences.baseName}_sumaclust.fasta\"\n\n    python3 ${projectDir}/bin/suma2cdhit.py \"${sequences.baseName}_sumaclust.fasta\" ${GOI}\n\n    awk '/^>/ {printf(\"\\\\n%s\\\\n\",\\$0);next; } { printf(\"%s\",\\$0);}  END {printf(\"\\\\n\");}' < \"${sequences.baseName}_sumaclust.fasta\" | tail -n +2 > tmp.fasta\n    grep 'cluster_center=True' tmp.fasta | grep -v 'cluster_weight=1;' | xargs -n1 -I% grep -A1 \"%\" tmp.fasta  > \"${sequences.baseName}_sumaclust.fasta\"\n    grep 'cluster_center=True' tmp.fasta | grep 'cluster_weight=1;' | xargs -n1 -I% grep -A1 \"%\" tmp.fasta > \"${sequences.baseName}_sumaclust_UNCLUSTERED.fasta\"\n    rm tmp.fasta\n\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_sumaclust.fasta\" || grep -A1 \"\\$ID\" ${GOI}   >> \"${sequences.baseName}_sumaclust.fasta\"\n      done\n    fi\n\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 39,
        "string_script": "  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    sumaclust \"${addParams}\" -p \"${task.cpus}\" \"${sequences}\"  > \"${sequences.baseName}_sumaclust.fasta\"\n\n    python3 ${projectDir}/bin/suma2cdhit.py \"${sequences.baseName}_sumaclust.fasta\" ${GOI}\n\n    awk '/^>/ {printf(\"\\\\n%s\\\\n\",\\$0);next; } { printf(\"%s\",\\$0);}  END {printf(\"\\\\n\");}' < \"${sequences.baseName}_sumaclust.fasta\" | tail -n +2 > tmp.fasta\n    grep 'cluster_center=True' tmp.fasta | grep -v 'cluster_weight=1;' | xargs -n1 -I% grep -A1 \"%\" tmp.fasta  > \"${sequences.baseName}_sumaclust.fasta\"\n    grep 'cluster_center=True' tmp.fasta | grep 'cluster_weight=1;' | xargs -n1 -I% grep -A1 \"%\" tmp.fasta > \"${sequences.baseName}_sumaclust_UNCLUSTERED.fasta\"\n    rm tmp.fasta\n\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_sumaclust.fasta\" || grep -A1 \"\\$ID\" ${GOI}   >> \"${sequences.baseName}_sumaclust.fasta\"\n      done\n    fi\n\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "NextSV"
        ],
        "tools_url": [
            "https://bio.tools/nextsv"
        ],
        "tools_dico": [
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            }
        ],
        "inputs": [
            "sequences",
            "addParams",
            "goi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'sumaclust'",
            "publishDir \"${params.output}/${params.sumaclust_output}\", mode: 'copy', pattern: '*.fasta*'",
            "publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'",
            "publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_sumaclust.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "evaluate_cluster": {
        "name_process": "evaluate_cluster",
        "string_process": "\nprocess evaluate_cluster {\n  label 'evaluate'\n  publishDir \"${params.output}/${params.eval_output}\", mode: 'copy', pattern: \"*_info.txt\"\n  publishDir \"${params.output}/${params.summary_output}\", mode: 'copy', pattern: \"*MetaInfo.txt\"\n\n  input:\n    tuple val(name), val(directory), path(representative), path(clusterFile),  path(sequences), val(newick), val(flag), val(addParams)\n\n  output:\n    path \"${name}_stats.out\", emit: eval_result\n    path (\"${name}_taxonomy_info.txt\") optional true\n    path (\"${name}_clusterMetaInfo.txt\") optional true\n    path \"WARNING.txt\", optional: true, emit: warning\n\n  script:\n  def flag = flag == 'off' ? '' : flag\n  def addParams = addParams == 'off' ? '' : addParams\n  def newick = newick == 'off' ? '' : newick\n  \"\"\"\n    output=\\$(python3 ${projectDir}/bin/cluster_statistics.py ${flag} ${addParams} --toolName \"${name}\" \"${sequences}\" \"${clusterFile}\" \"${newick}\")\n    echo ${name},\\$output > ${name}_stats.out\n\n    if [ -f ${name}_taxonomy_info.txt ]; then\n      python3 ${projectDir}/bin/pretty_cluster_meta.py ${name}_taxonomy_info.txt > ${name}_clusterMetaInfo.txt\n    fi\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "  def flag = flag == 'off' ? '' : flag\n  def addParams = addParams == 'off' ? '' : addParams\n  def newick = newick == 'off' ? '' : newick\n  \"\"\"\n    output=\\$(python3 ${projectDir}/bin/cluster_statistics.py ${flag} ${addParams} --toolName \"${name}\" \"${sequences}\" \"${clusterFile}\" \"${newick}\")\n    echo ${name},\\$output > ${name}_stats.out\n\n    if [ -f ${name}_taxonomy_info.txt ]; then\n      python3 ${projectDir}/bin/pretty_cluster_meta.py ${name}_taxonomy_info.txt > ${name}_clusterMetaInfo.txt\n    fi\n\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "directory",
            "newick",
            "flag",
            "addParams",
            "representative",
            "clusterFile",
            "sequences"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'evaluate'",
            "publishDir \"${params.output}/${params.eval_output}\", mode: 'copy', pattern: \"*_info.txt\"",
            "publishDir \"${params.output}/${params.summary_output}\", mode: 'copy', pattern: \"*MetaInfo.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "merge_evaluation": {
        "name_process": "merge_evaluation",
        "string_process": "\nprocess merge_evaluation {\n  label 'evalMerger'\n  publishDir \"${params.output}/${params.eval_output}\", mode: 'copy', pattern: \"${sequences.baseName}_summary.csv\"\n  publishDir \"${params.output}/${params.summary_output}\", mode: 'copy', pattern: \"${sequences.baseName}_summary.csv\"\n\n\n  input:\n  path(evaluations)\n  path(sequences)\n\n  output:\n  path \"${sequences.baseName}_summary.csv\"\n\n  script:\n  \"\"\"\n  echo \"Algorithm,Number_of_Sequences,Number_of_Cluster,smallest_cluster,largest_cluster,average_cluster_size,median_cluster_size,number_of_unclustered_sequences,Average_distance_to_nearest_centroid,cluster_per_species,cluster_per_genus\" > \"${sequences.baseName}_summary.csv\"\n  cat ${evaluations} >> \"${sequences.baseName}_summary.csv\"\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  echo \"Algorithm,Number_of_Sequences,Number_of_Cluster,smallest_cluster,largest_cluster,average_cluster_size,median_cluster_size,number_of_unclustered_sequences,Average_distance_to_nearest_centroid,cluster_per_species,cluster_per_genus\" > \"${sequences.baseName}_summary.csv\"\n  cat ${evaluations} >> \"${sequences.baseName}_summary.csv\"\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "evaluations",
            "sequences"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'evalMerger'",
            "publishDir \"${params.output}/${params.eval_output}\", mode: 'copy', pattern: \"${sequences.baseName}_summary.csv\"",
            "publishDir \"${params.output}/${params.summary_output}\", mode: 'copy', pattern: \"${sequences.baseName}_summary.csv\""
        ],
        "when": "",
        "stub": ""
    },
    "mmseqs": {
        "name_process": "mmseqs",
        "string_process": "\nprocess mmseqs{\n  label 'mmseqs'\n  publishDir \"${params.output}/${params.mmseqs_output}\", mode: 'copy', pattern: \"*_mmseqs*\"\n  publishDir \"${params.output}/${params.mmseqs_output}\", mode: 'copy', pattern: \"*UNCLUSTERED*\"\n  publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'\n  publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_mmseqs.fasta'\n\n  input:\n    path(sequences)\n    val(addParams)\n    val(goi)\n\n  output:\n    tuple val(\"${params.output}/${params.mmseqs_output}\"), path(\"${sequences.baseName}_mmseqs.fasta\"), path(\"${sequences.baseName}_mmseqs.fasta.clstr\")\n                                                                            \n    path \"${sequences.baseName}_mmseqs_UNCLUSTERED.fasta\"\n\n  script:\n  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    mmseqs easy-linclust ${addParams} --threads \"${task.cpus}\" \"${sequences}\" \"${sequences.baseName}_mmseqs\" tmp\n    mv ${sequences.baseName}_mmseqs_rep_seq.fasta ${sequences.baseName}_mmseqs.fasta\n\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_mmseqs.fasta\" || grep -A1 \"\\$ID\" ${GOI}  >> \"${sequences.baseName}_mmseqs.fasta\"\n      done\n    fi\n\n    python3 ${projectDir}/bin/mmseqs2cdhit.py ${sequences.baseName}_mmseqs_cluster.tsv \"${sequences}\" ${GOI}\n    mv ${sequences.baseName}_mmseqs_cluster.tsv.clstr \"${sequences.baseName}_mmseqs.fasta.clstr\"\n    python3 ${projectDir}/bin/filter_unclustered.py \"${sequences.baseName}_mmseqs.fasta\" \"${sequences.baseName}_mmseqs.fasta.clstr\"\n    mv \"${sequences.baseName}_mmseqs.fastaTEST\" \"${sequences.baseName}_mmseqs.fasta\"  \n\n  \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    mmseqs easy-linclust ${addParams} --threads \"${task.cpus}\" \"${sequences}\" \"${sequences.baseName}_mmseqs\" tmp\n    mv ${sequences.baseName}_mmseqs_rep_seq.fasta ${sequences.baseName}_mmseqs.fasta\n\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_mmseqs.fasta\" || grep -A1 \"\\$ID\" ${GOI}  >> \"${sequences.baseName}_mmseqs.fasta\"\n      done\n    fi\n\n    python3 ${projectDir}/bin/mmseqs2cdhit.py ${sequences.baseName}_mmseqs_cluster.tsv \"${sequences}\" ${GOI}\n    mv ${sequences.baseName}_mmseqs_cluster.tsv.clstr \"${sequences.baseName}_mmseqs.fasta.clstr\"\n    python3 ${projectDir}/bin/filter_unclustered.py \"${sequences.baseName}_mmseqs.fasta\" \"${sequences.baseName}_mmseqs.fasta.clstr\"\n    mv \"${sequences.baseName}_mmseqs.fastaTEST\" \"${sequences.baseName}_mmseqs.fasta\"  \n\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "sequences",
            "addParams",
            "goi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'mmseqs'",
            "publishDir \"${params.output}/${params.mmseqs_output}\", mode: 'copy', pattern: \"*_mmseqs*\"",
            "publishDir \"${params.output}/${params.mmseqs_output}\", mode: 'copy', pattern: \"*UNCLUSTERED*\"",
            "publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'",
            "publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_mmseqs.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "update_ncbi_metainfo": {
        "name_process": "update_ncbi_metainfo",
        "string_process": "\nprocess update_ncbi_metainfo {\n  label 'update_ncbi'\n\n  input:\n    path(cacheDir)\n\n  output:\n\n  script:\n  \"\"\"\n  wget -N -q -P ${cacheDir}/ ftp://ftp.ncbi.nih.gov/genbank/gbvrl*.seq.gz\n  gunzip  ${cacheDir}/*.gz\n  python3 ${projectDir}/bin/ncbi_information_dump.py  ${cacheDir}\n  rm ${cacheDir}/*seq ${cacheDir}/*idx\n  \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  wget -N -q -P ${cacheDir}/ ftp://ftp.ncbi.nih.gov/genbank/gbvrl*.seq.gz\n  gunzip  ${cacheDir}/*.gz\n  python3 ${projectDir}/bin/ncbi_information_dump.py  ${cacheDir}\n  rm ${cacheDir}/*seq ${cacheDir}/*idx\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cacheDir"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'update_ncbi'"
        ],
        "when": "",
        "stub": ""
    },
    "sort_sequences": {
        "name_process": "sort_sequences",
        "string_process": "\nprocess sort_sequences {\n  label 'sortseq'\n  publishDir  \"${params.output}/${params.sort_output}\", mode: 'copy', pattern: '*_positive.fasta'\n\n  input:\n  path(sequences)\n\n  output:\n  path \"${sequences.baseName}_positive.fasta\", emit: sort_result\n\n  script:\n  \"\"\"\n  python3 ${projectDir}/bin/sort_sequences.py \"${sequences}\" > \"${sequences.baseName}_positive.fasta\"\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  python3 ${projectDir}/bin/sort_sequences.py \"${sequences}\" > \"${sequences.baseName}_positive.fasta\"\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'sortseq'",
            "publishDir \"${params.output}/${params.sort_output}\", mode: 'copy', pattern: '*_positive.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "cdhit": {
        "name_process": "cdhit",
        "string_process": "\nprocess cdhit {\n  label 'cdhit'\n  publishDir \"${params.output}/${params.cdhit_output}\", mode: 'copy', pattern: '*_cdhitest.fasta*'\n  publishDir \"${params.output}/${params.cdhit_output}\", mode: 'copy', pattern: '*UNCLUSTERED*'\n  publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'\n  publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_cdhitest.fasta'\n\n  input:\n    path(sequences)\n    val(addParams)\n    val(goi)\n\n  output:\n    tuple val(\"${params.output}/${params.cdhit_output}\"), path(\"${sequences.baseName}_cdhitest.fasta\"), path(\"${sequences.baseName}_cdhitest.fasta.clstr\")\n                                                                            \n    path \"${sequences.baseName}_cdhitest_UNCLUSTERED.fasta\"\n\n  script:\n  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    cd-hit-est ${addParams} -T \"${task.cpus}\" -i ${sequences} -o \"${sequences.baseName}_cdhitest.fasta\"\n\n    python3 ${baseDir}/bin/cdhit2goodcdhit.py \"${sequences.baseName}_cdhitest.fasta.clstr\" ${sequences} ${GOI} > tmp.clstr\n    mv tmp.clstr \"${sequences.baseName}_cdhitest.fasta.clstr\"\n    python3 ${baseDir}/bin/filter_unclustered.py \"${sequences.baseName}_cdhitest.fasta\" \"${sequences.baseName}_cdhitest.fasta.clstr\"\n    mv \"${sequences.baseName}_cdhitest.fastaTEST\" \"${sequences.baseName}_cdhitest.fasta\"\n\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_cdhitest.fasta\" || grep -A1 \"\\$ID\" ${GOI}  >> \"${sequences.baseName}_cdhitest.fasta\"\n      done \n    fi\n\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  def GOI = goi != 'NO FILE' ? \"${goi}\" : ''\n  \"\"\"\n    cd-hit-est ${addParams} -T \"${task.cpus}\" -i ${sequences} -o \"${sequences.baseName}_cdhitest.fasta\"\n\n    python3 ${baseDir}/bin/cdhit2goodcdhit.py \"${sequences.baseName}_cdhitest.fasta.clstr\" ${sequences} ${GOI} > tmp.clstr\n    mv tmp.clstr \"${sequences.baseName}_cdhitest.fasta.clstr\"\n    python3 ${baseDir}/bin/filter_unclustered.py \"${sequences.baseName}_cdhitest.fasta\" \"${sequences.baseName}_cdhitest.fasta.clstr\"\n    mv \"${sequences.baseName}_cdhitest.fastaTEST\" \"${sequences.baseName}_cdhitest.fasta\"\n\n    if [ \"{$GOI}\" != 'NO FILE' ]; then\n      for ID in \\$(grep '>' ${GOI}); do\n        grep -m 1 \"\\$ID\" \"${sequences.baseName}_cdhitest.fasta\" || grep -A1 \"\\$ID\" ${GOI}  >> \"${sequences.baseName}_cdhitest.fasta\"\n      done \n    fi\n\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "addParams",
            "goi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'cdhit'",
            "publishDir \"${params.output}/${params.cdhit_output}\", mode: 'copy', pattern: '*_cdhitest.fasta*'",
            "publishDir \"${params.output}/${params.cdhit_output}\", mode: 'copy', pattern: '*UNCLUSTERED*'",
            "publishDir \"${params.output}/${params.summary_output}/unclustered_sequences\", mode: 'copy', pattern: '*UNCLUSTERED.fasta'",
            "publishDir \"${params.output}/${params.summary_output}/clustered_sequences\", mode: 'copy', pattern: '*_cdhitest.fasta'"
        ],
        "when": "",
        "stub": ""
    },
    "remove_redundancy": {
        "name_process": "remove_redundancy",
        "string_process": "\nprocess remove_redundancy {\n  label 'remove'\n  publishDir \"${params.output}/${params.nr_output}\", mode: 'copy', pattern: \"*_nr.fasta\"\n\n\n  input:\n    path(sequences)\n\n  output:\n    path \"${sequences.baseName}_nr.fasta\", emit: nr_result\n\n\n  script:\n  \"\"\"\n    mmseqs easy-linclust --threads ${task.cpus} --min-seq-id 1.0 \"${sequences}\" \"${sequences.baseName}_nr\" tmp\n    mv \"${sequences.baseName}_nr_rep_seq.fasta\" \"${sequences.baseName}_nr.fasta\"\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n    mmseqs easy-linclust --threads ${task.cpus} --min-seq-id 1.0 \"${sequences}\" \"${sequences.baseName}_nr\" tmp\n    mv \"${sequences.baseName}_nr_rep_seq.fasta\" \"${sequences.baseName}_nr.fasta\"\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "sequences"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'remove'",
            "publishDir \"${params.output}/${params.nr_output}\", mode: 'copy', pattern: \"*_nr.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "concat_goi": {
        "name_process": "concat_goi",
        "string_process": "\nprocess concat_goi {\n  label 'concat_goi'\n  publishDir \"${params.output}/${params.nr_output}\", mode: 'copy', overwrite: true, pattern: \"*_nr.fasta\"\n\n  input:\n    path(sequences)\n    path(goi)\n\n  output:\n    path \"${sequences.baseName}.fasta\", emit: nr_result\n\n  script:\n  \"\"\"\n    for ID in \\$(grep '>' ${goi}); do\n        grep -m 1 \"\\$ID\" \"${sequences}\" || grep -A1 \"\\$ID\" ${goi}  >> \"${sequences}\"\n    done \n    \n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n    for ID in \\$(grep '>' ${goi}); do\n        grep -m 1 \"\\$ID\" \"${sequences}\" || grep -A1 \"\\$ID\" ${goi}  >> \"${sequences}\"\n    done \n    \n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "goi"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'concat_goi'",
            "publishDir \"${params.output}/${params.nr_output}\", mode: 'copy', overwrite: true, pattern: \"*_nr.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "get_ncbi_meta": {
        "name_process": "get_ncbi_meta",
        "string_process": "\nprocess get_ncbi_meta {\n  label 'ncbi_meta'\n\n  input:\n    path(sequences)\n\n  output:\n    path \"ncbiMETA.pkl\", emit: pkl_ncbi\n\n  script:\n  \"\"\"\n    python3 ${projectDir}/bin/get_ncbi_information.py \"${sequences}\"\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n    python3 ${projectDir}/bin/get_ncbi_information.py \"${sequences}\"\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "klamkiew__viralclust",
        "directive": [
            "label 'ncbi_meta'"
        ],
        "when": "",
        "stub": ""
    }
}
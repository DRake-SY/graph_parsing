{
    "preDeDup": {
        "name_process": "preDeDup",
        "string_process": "\nprocess preDeDup {\n    publishDir \"${params.outdir}/prededup\", mode: 'copy'\n\n\n    input:\n    file bam from ch_for_prededup\n\n    output:\n    file '*.bam' into ch_for_dedup,prededup_dp\n\n    \"\"\"\n    printf ${bam}\n    cat ${bam} <(echo \"prededup\") > '${bam}'_prededup.bam\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    printf ${bam}\n    cat ${bam} <(echo \"prededup\") > '${bam}'_prededup.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_for_prededup"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_for_dedup",
            "prededup_dp"
        ],
        "nb_outputs": 2,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/prededup\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fakeDeDup": {
        "name_process": "fakeDeDup",
        "string_process": "\nprocess fakeDeDup {\n\n    publishDir \"${params.outdir}/dedup\", mode: 'copy'\n\n    when:\n    !params.skip_deduplication\n\n    input:\n    file bam from ch_for_dedup\n\n    output:\n    file '*_rmdup.bam' into dp_dedup\n\n    \"\"\"\n    cat ${bam} <(echo \"runningdedup\") > \"${bam}\"_rmdup.bam\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    cat ${bam} <(echo \"runningdedup\") > \"${bam}\"_rmdup.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_for_dedup"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dp_dedup"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/dedup\", mode: 'copy'"
        ],
        "when": "!params.skip_deduplication",
        "stub": ""
    },
    "fakeDP": {
        "name_process": "fakeDP",
        "string_process": "\nprocess fakeDP {\n\n\tpublishDir \"${params.outdir}/damageprofiler\", mode: 'copy'\n\t\n\tinput:\n\tfile bam from ch_fakedp\n\n\toutput:\n\tfile '*.pdf' into onwards\n\n\t\"\"\"\n    cat ${bam} <(echo \"running damageprofiler\") > \"${bam}\"_dp.pdf\n\t\"\"\"\n\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    cat ${bam} <(echo \"running damageprofiler\") > \"${bam}\"_dp.pdf\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fakedp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "onwards"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/damageprofiler\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_bam": {
        "name_process": "convert_bam",
        "string_process": "\nprocess convert_bam {\n\n    publishDir \"${params.outdir}/convert_bam\", mode: 'copy'\n\n    when:\n    params.bam_input && !params.skip_convertbam\n\n    input:\n    file bam from ch_input_for_convertbam\n\n    output:\n    file '*.fq' into ch_output_from_convertbam\n\n    script:\n    \"\"\"\n    echo \"I have been convert_bammed\" > ${bam}  \n    mv ${bam} ${bam}_converted.fq\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    echo \"I have been convert_bammed\" > ${bam}  \n    mv ${bam} ${bam}_converted.fq\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_input_for_convertbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_output_from_convertbam"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/convert_bam\", mode: 'copy'"
        ],
        "when": "params.bam_input && !params.skip_convertbam",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp {\n    publishDir \"${params.outdir}/fastp\", mode: 'copy'\n\n    when:\n    params.run_fastp\n\n    input:\n    file fq from from_convertbam_for_fastp\n\n    output:\n    file \"*pG.fq\" into ch_output_from_fastp\n\n    script:\n    \"\"\"\n    echo \"I have been fastp'd\" > ${fq}  \n    mv ${fq} ${fq}.pG.fq\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    echo \"I have been fastp'd\" > ${fq}  \n    mv ${fq} ${fq}.pG.fq\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_convertbam_for_fastp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_output_from_fastp"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/fastp\", mode: 'copy'"
        ],
        "when": "params.run_fastp",
        "stub": ""
    },
    "adapter_removal": {
        "name_process": "adapter_removal",
        "string_process": "\nprocess adapter_removal {\n    publishDir \"${params.outdir}/adapterremoval\", mode: 'copy'\n    \n\n    when:\n    !params.skip_adapterremoval\n\n    input:\n    file fq from from_fastp_for_adapterremoval\n\n    output:\n    file \"*adapterremoval.fq\" into ch_output_from_adapterremoval\n\n    script:\n    if (params.singleEnd){\n        \"\"\"\n        echo \"I have been adapter_removal'd\" > ${fq}  \n        mv ${fq} ${fq}.adapterremoval.fq\n        \"\"\"\n    }\n    else if (params.pairedEnd) {\n        \"\"\"\n        echo \"I have been adapter_removal'd\" > ${fq}  \n        mv ${fq} ${fq}.adapterremoval.fq\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 26,
        "string_script": "    if (params.singleEnd){\n        \"\"\"\n        echo \"I have been adapter_removal'd\" > ${fq}  \n        mv ${fq} ${fq}.adapterremoval.fq\n        \"\"\"\n    }\n    else if (params.pairedEnd) {\n        \"\"\"\n        echo \"I have been adapter_removal'd\" > ${fq}  \n        mv ${fq} ${fq}.adapterremoval.fq\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_fastp_for_adapterremoval"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_output_from_adapterremoval"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/adapterremoval\", mode: 'copy'"
        ],
        "when": "!params.skip_adapterremoval",
        "stub": ""
    },
    "bwa": {
        "name_process": "bwa",
        "string_process": "\nprocess bwa {\n    publishDir \"${params.outdir}/mapping\", mode: 'copy'\n\n    when:\n    !params.skip_mapping && params.mapper_to_use == \"bwa\"\n\n    input:\n    file fq from for_bwa\n\n    output:\n    file \"*.bam\" into from_bwa_for_filtering\n\n\n    \"\"\"\n    mv ${fq} ${fq}.mapped.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    mv ${fq} ${fq}.mapped.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "for_bwa"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_bwa_for_filtering"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/mapping\", mode: 'copy'"
        ],
        "when": "!params.skip_mapping && params.mapper_to_use == \"bwa\"",
        "stub": ""
    },
    "bwamem": {
        "name_process": "bwamem",
        "string_process": "\nprocess bwamem {\n    publishDir \"${params.outdir}/mapping\", mode: 'copy'\n    \n    when:\n    !params.skip_mapping && params.mapper_to_use == \"bwamem\"\n\n    input:\n    file fq from for_bwamem\n\n    output:\n    file \"*.bam\" into from_bwamem_for_filtering\n\n\n    \"\"\"\n    mv ${fq} ${fq}.mapped.bam\n    \"\"\"\n    \n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    mv ${fq} ${fq}.mapped.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "for_bwamem"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_bwamem_for_filtering"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/mapping\", mode: 'copy'"
        ],
        "when": "!params.skip_mapping && params.mapper_to_use == \"bwamem\"",
        "stub": ""
    },
    "circularmapper": {
        "name_process": "circularmapper",
        "string_process": "\nprocess circularmapper {\n    publishDir \"${params.outdir}/mapping\", mode: 'copy'\n\n    when:\n    !params.skip_mapping && params.mapper_to_use == \"circularmapper\"\n\n    input:\n    file fq from for_cm\n\n    output:\n    file \"*.bam\" into from_cm_for_filtering\n\n    \"\"\"\n    mv ${fq} ${fq}.mapped.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    mv ${fq} ${fq}.mapped.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "for_cm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_cm_for_filtering"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/mapping\", mode: 'copy'"
        ],
        "when": "!params.skip_mapping && params.mapper_to_use == \"circularmapper\"",
        "stub": ""
    },
    "samtools_filter": {
        "name_process": "samtools_filter",
        "string_process": "\nprocess samtools_filter {\n    publishDir \"${params.outdir}/samtools/filter\", mode: 'copy'\n\n    when:\n    params.run_bam_filtering\n\n    input:\n    file bam from from_mapping_for_filtering\n\n    output:\n    file \"*.filtered.bam\" into from_filtering_for_rmdup\n\n    \"\"\"\n    mv ${bam} ${bam}.filtered.bam\n    \"\"\"\n    \n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    mv ${bam} ${bam}.filtered.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_mapping_for_filtering"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_filtering_for_rmdup"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/samtools/filter\", mode: 'copy'"
        ],
        "when": "params.run_bam_filtering",
        "stub": ""
    },
    "dedup": {
        "name_process": "dedup",
        "string_process": "\nprocess dedup {\n    publishDir \"${params.outdir}/deduplication\", mode: 'copy'\n\n    when:\n    !params.skip_deduplication && params.dedupper_to_use == \"dedup\"\n\n    input:\n    file bam from  from_filtering_for_dedup\n\n    output:\n    file \"*_rmdup.bam\" into from_dedup_for_damagemanipulation\n\n    \"\"\"\n    mv ${bam} ${bam}_rmdup.bam\n    \"\"\"\n    \n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    mv ${bam} ${bam}_rmdup.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_filtering_for_dedup"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_dedup_for_damagemanipulation"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/deduplication\", mode: 'copy'"
        ],
        "when": "!params.skip_deduplication && params.dedupper_to_use == \"dedup\"",
        "stub": ""
    },
    "markdup": {
        "name_process": "markdup",
        "string_process": "\nprocess markdup {\n    publishDir \"${params.outdir}/deduplication\", mode: 'copy'\n\n    when:\n    !params.skip_deduplication && params.dedupper_to_use == \"markdup\"\n\n    input:\n    file bam from  from_filtering_for_markdup\n\n    output:\n    file \"*_rmdup.bam\" into from_markdup_for_damagemanipulation\n\n    \"\"\"\n    mv ${bam} ${bam}_rmdup.bam\n    \"\"\"\n    \n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    mv ${bam} ${bam}_rmdup.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_filtering_for_markdup"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_markdup_for_damagemanipulation"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/deduplication\", mode: 'copy'"
        ],
        "when": "!params.skip_deduplication && params.dedupper_to_use == \"markdup\"",
        "stub": ""
    },
    "pmdtools": {
        "name_process": "pmdtools",
        "string_process": "\nprocess pmdtools {\n    publishDir \"${params.outdir}/pmdtools\", mode: 'copy'\n\n    when:\n    params.run_pmdtools\n\n    input:\n    file bam from from_rmdup_for_pmdtools\n\n    output:\n    file \"*.pmd.bam\" into from_pmdtools_for_genotyping\n\n    \"\"\"\n    mv ${bam} ${bam}.pmd.bam\n    \"\"\"\n    \n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    mv ${bam} ${bam}.pmd.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_rmdup_for_pmdtools"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_pmdtools_for_genotyping"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/pmdtools\", mode: 'copy'"
        ],
        "when": "params.run_pmdtools",
        "stub": ""
    },
    "bamtrim": {
        "name_process": "bamtrim",
        "string_process": "\nprocess bamtrim {\n    publishDir \"${params.outdir}/bamtrim\", mode: 'copy'\n\n    when:\n    params.run_bamtrim\n\n    input:\n    file bam from from_rmdup_for_bamutils\n\n    output:\n    file \"*.trimmed.bam\" into from_bamutils_for_genotyping\n\n    \"\"\"\n    mv ${bam} ${bam}.trimmed.bam\n    \"\"\"\n    \n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    mv ${bam} ${bam}.trimmed.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "from_rmdup_for_bamutils"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_bamutils_for_genotyping"
        ],
        "nb_outputs": 1,
        "name_workflow": "jfy133__NextflowSandbox",
        "directive": [
            "publishDir \"${params.outdir}/bamtrim\", mode: 'copy'"
        ],
        "when": "params.run_bamtrim",
        "stub": ""
    }
}
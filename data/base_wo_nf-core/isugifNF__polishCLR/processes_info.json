{
    "bz_to_gz": {
        "name_process": "bz_to_gz",
        "string_process": "\nprocess bz_to_gz {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy'\n  input:tuple val(readname), path(illumina_reads)\n  output: tuple val(readname), path(\"*.gz\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n\n  PROC=\\$(((`nproc`-1)/2+1))\n  ${parallel_app} -j 2 \"${bzcat_app} {1} | ${pigz_app} -p \\${PROC} > {1/.}.gz\" ::: *.bz2\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${illumina_reads.get(0)}.gz\n  touch ${illumina_reads.get(1)}.gz\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n\n  PROC=\\$(((`nproc`-1)/2+1))\n  ${parallel_app} -j 2 \"${bzcat_app} {1} | ${pigz_app} -p \\${PROC} > {1/.}.gz\" ::: *.bz2\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy' input:tuple val(readname), path(illumina_reads) output: tuple val(readname), path(\"*.gz\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${illumina_reads.get(0)}.gz\n  touch ${illumina_reads.get(1)}.gz\n  \"\"\""
    },
    "MERGE_FILE": {
        "name_process": "MERGE_FILE",
        "string_process": "\nprocess MERGE_FILE {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy'\n  input: tuple path(primary_assembly), path(alternate_assembly), path(mito_assembly)\n  output: path(\"${primary_assembly.simpleName}_merged.fasta\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n\n  # === Inputs\n  # primary_assembly = p_ctg.fasta     # From FALCON or FALCON-Unzip \n  # alternate_assembly = a_ctg.fasta\n  # mito_assembly = mt.fasta           # From vgpMito pipeline\n  \n  # === Outputs\n  # ${primary_assembly.simpleName}_merged.fasta\n  \n  cat ${primary_assembly} | sed 's/>/>pri_/g' > ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${mito_assembly} | sed 's/>/>mit_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${alternate_assembly} | sed 's/>/>alt_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${primary_assembly.simpleName}_temp.fasta | grep -v \"^\\$\" > ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n\n  # === Inputs\n  # primary_assembly = p_ctg.fasta     # From FALCON or FALCON-Unzip \n  # alternate_assembly = a_ctg.fasta\n  # mito_assembly = mt.fasta           # From vgpMito pipeline\n  \n  # === Outputs\n  # ${primary_assembly.simpleName}_merged.fasta\n  \n  cat ${primary_assembly} | sed 's/>/>pri_/g' > ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${mito_assembly} | sed 's/>/>mit_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${alternate_assembly} | sed 's/>/>alt_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${primary_assembly.simpleName}_temp.fasta | grep -v \"^\\$\" > ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy' input: tuple path(primary_assembly), path(alternate_assembly), path(mito_assembly) output: path(\"${primary_assembly.simpleName}_merged.fasta\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${primary_assembly.simpleName}_merged.fasta\n  \"\"\""
    },
    "MERGE_FILE_TRIO": {
        "name_process": "MERGE_FILE_TRIO",
        "string_process": "\nprocess MERGE_FILE_TRIO {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy'\n  input: tuple path(primary_assembly), path(mito_assembly)\n  output: path(\"${primary_assembly.simpleName}_merged.fasta\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # primary_assembly = p_ctg.fasta     # From Canu, maternal or paternal\n  # mito_assembly = mt.fasta           # From vgpMito pipeline\n  \n  # === Outputs\n  # ${primary_assembly.simpleName}_merged.fasta\n  \n  cat ${primary_assembly} | sed 's/>/>pri_/g' > ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${mito_assembly} | sed 's/>/>mit_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${primary_assembly.simpleName}_temp.fasta | grep -v \"^\\$\" > ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # primary_assembly = p_ctg.fasta     # From Canu, maternal or paternal\n  # mito_assembly = mt.fasta           # From vgpMito pipeline\n  \n  # === Outputs\n  # ${primary_assembly.simpleName}_merged.fasta\n  \n  cat ${primary_assembly} | sed 's/>/>pri_/g' > ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${mito_assembly} | sed 's/>/>mit_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${primary_assembly.simpleName}_temp.fasta | grep -v \"^\\$\" > ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy' input: tuple path(primary_assembly), path(mito_assembly) output: path(\"${primary_assembly.simpleName}_merged.fasta\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${primary_assembly.simpleName}_merged.fasta\n  \"\"\""
    },
    "MERGE_FILE_FCANU": {
        "name_process": "MERGE_FILE_FCANU",
        "string_process": "\nprocess MERGE_FILE_FCANU {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy'\n  input: tuple path(primary_assembly), path(mito_assembly)\n  output: path(\"${primary_assembly.simpleName}_merged.fasta\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # primary_assembly = p_ctg.fasta     # From CANU, similar to Falcon but without alternative assembly\n  # mito_assembly = mt.fasta           # From vgpMito pipeline\n  \n  # === Outputs\n  # ${primary_assembly.simpleName}_merged.fasta\n  \n  cat ${primary_assembly} | sed 's/>/>pri_/g' > ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${mito_assembly} | sed 's/>/>mit_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${primary_assembly.simpleName}_temp.fasta | grep -v \"^\\$\" > ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # primary_assembly = p_ctg.fasta     # From CANU, similar to Falcon but without alternative assembly\n  # mito_assembly = mt.fasta           # From vgpMito pipeline\n  \n  # === Outputs\n  # ${primary_assembly.simpleName}_merged.fasta\n  \n  cat ${primary_assembly} | sed 's/>/>pri_/g' > ${primary_assembly.simpleName}_temp.fasta\n  echo \"\" >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${mito_assembly} | sed 's/>/>mit_/g' >> ${primary_assembly.simpleName}_temp.fasta\n  cat ${primary_assembly.simpleName}_temp.fasta | grep -v \"^\\$\" > ${primary_assembly.simpleName}_merged.fasta\n  \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy' input: tuple path(primary_assembly), path(mito_assembly) output: path(\"${primary_assembly.simpleName}_merged.fasta\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${primary_assembly.simpleName}_merged.fasta\n  \"\"\""
    },
    "SPLIT_FILE_p": {
        "name_process": "SPLIT_FILE_p",
        "string_process": "\nprocess SPLIT_FILE_p {\n  publishDir \"${params.outdir}/${outdir}\", mode:'copy'\n  input: path(genome_fasta)\n  output: tuple path(\"pat_${genome_fasta}\"), path(\"mit_${genome_fasta}\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # genome_fasta = primary_assembly_merged.fasta\n  # === Outputs\n  # p_${genome_fasta}     # primary assembly\n  # a_${genome_fasta}     # alternative assembly\n  # m_${genome_fasta}     # mitochondrial assembly\n  \n  ${samtools_app} faidx ${genome_fasta}\n  grep \">pri_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > pri.list\n  ${samtools_app} faidx -r pri.list ${genome_fasta} > pat_${genome_fasta}\n  \n  grep \">mit_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > mit.list\n  ${samtools_app} faidx -r mit.list ${genome_fasta} > mit_${genome_fasta}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch pat_${genome_fasta} mit_${genome_fasta}\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # genome_fasta = primary_assembly_merged.fasta\n  # === Outputs\n  # p_${genome_fasta}     # primary assembly\n  # a_${genome_fasta}     # alternative assembly\n  # m_${genome_fasta}     # mitochondrial assembly\n  \n  ${samtools_app} faidx ${genome_fasta}\n  grep \">pri_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > pri.list\n  ${samtools_app} faidx -r pri.list ${genome_fasta} > pat_${genome_fasta}\n  \n  grep \">mit_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > mit.list\n  ${samtools_app} faidx -r mit.list ${genome_fasta} > mit_${genome_fasta}\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode:'copy' input: path(genome_fasta) output: tuple path(\"pat_${genome_fasta}\"), path(\"mit_${genome_fasta}\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch pat_${genome_fasta} mit_${genome_fasta}\n  \"\"\""
    },
    "SPLIT_FILE_m": {
        "name_process": "SPLIT_FILE_m",
        "string_process": "\nprocess SPLIT_FILE_m {\n  publishDir \"${params.outdir}/${outdir}\", mode:'copy'\n  input: path(genome_fasta)\n  output: tuple path(\"mat_${genome_fasta}\"), path(\"mit_${genome_fasta}\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # genome_fasta = primary_assembly_merged.fasta\n  # === Outputs\n  # p_${genome_fasta}     # primary assembly\n  # a_${genome_fasta}     # alternative assembly\n  # m_${genome_fasta}     # mitochondrial assembly\n  \n  ${samtools_app} faidx ${genome_fasta}\n  grep \">pri_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > pri.list\n  ${samtools_app} faidx -r pri.list ${genome_fasta} > mat_${genome_fasta}\n  \n  grep \">mit_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > mit.list\n  ${samtools_app} faidx -r mit.list ${genome_fasta} > mit_${genome_fasta}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch mat_${genome_fasta} mit_${genome_fasta}\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # genome_fasta = primary_assembly_merged.fasta\n  # === Outputs\n  # p_${genome_fasta}     # primary assembly\n  # a_${genome_fasta}     # alternative assembly\n  # m_${genome_fasta}     # mitochondrial assembly\n  \n  ${samtools_app} faidx ${genome_fasta}\n  grep \">pri_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > pri.list\n  ${samtools_app} faidx -r pri.list ${genome_fasta} > mat_${genome_fasta}\n  \n  grep \">mit_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > mit.list\n  ${samtools_app} faidx -r mit.list ${genome_fasta} > mit_${genome_fasta}\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode:'copy' input: path(genome_fasta) output: tuple path(\"mat_${genome_fasta}\"), path(\"mit_${genome_fasta}\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch mat_${genome_fasta} mit_${genome_fasta}\n  \"\"\""
    },
    "SPLIT_FILE": {
        "name_process": "SPLIT_FILE",
        "string_process": "\nprocess SPLIT_FILE {\n  publishDir \"${params.outdir}/${outdir}\", mode:'copy'\n\n  input:tuple val(outdir), path(genome_fasta)\n  output: tuple path(\"p_${genome_fasta}\"), path(\"a_${genome_fasta}\"), path(\"m_${genome_fasta}\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # genome_fasta = primary_assembly_merged.fasta\n  # === Outputs\n  # p_${genome_fasta}     # primary assembly\n  # a_${genome_fasta}     # alternative assembly\n  # m_${genome_fasta}     # mitochondrial assembly\n  \n  ${samtools_app} faidx ${genome_fasta}\n  grep \">pri_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > pri.list\n  ${samtools_app} faidx -r pri.list ${genome_fasta} > p_${genome_fasta}\n  \n  grep \">mit_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > mit.list\n  ${samtools_app} faidx -r mit.list ${genome_fasta} > m_${genome_fasta}\n  \n  grep \">alt_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > alt.list\n  ${samtools_app} faidx -r alt.list ${genome_fasta} > a_${genome_fasta}\n  \"\"\"\n  \n  stub:\n  \"\"\"\n  touch p_${genome_fasta} a_${genome_fasta} m_${genome_fasta}\n  \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  # === Inputs\n  # genome_fasta = primary_assembly_merged.fasta\n  # === Outputs\n  # p_${genome_fasta}     # primary assembly\n  # a_${genome_fasta}     # alternative assembly\n  # m_${genome_fasta}     # mitochondrial assembly\n  \n  ${samtools_app} faidx ${genome_fasta}\n  grep \">pri_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > pri.list\n  ${samtools_app} faidx -r pri.list ${genome_fasta} > p_${genome_fasta}\n  \n  grep \">mit_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > mit.list\n  ${samtools_app} faidx -r mit.list ${genome_fasta} > m_${genome_fasta}\n  \n  grep \">alt_\" ${genome_fasta} | cut -f1 | sed 's/>//g' > alt.list\n  ${samtools_app} faidx -r alt.list ${genome_fasta} > a_${genome_fasta}\n  \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode:'copy' input:tuple val(outdir), path(genome_fasta) output: tuple path(\"p_${genome_fasta}\"), path(\"a_${genome_fasta}\"), path(\"m_${genome_fasta}\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch p_${genome_fasta} a_${genome_fasta} m_${genome_fasta}\n  \"\"\""
    },
    "RENAME_FILE": {
        "name_process": "RENAME_FILE",
        "string_process": "\nprocess RENAME_FILE {\n  publishDir \"${params.outdir}/00_Preprocess/\", mode:'copy'\n  \n  input: tuple path(filename), val(newname)\n  output: path(\"$newname\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  mv ${filename} ${newname}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${newname}\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  mv ${filename} ${newname}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess/\", mode:'copy' input: tuple path(filename), val(newname) output: path(\"$newname\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${newname}\n  \"\"\""
    },
    "create_windows": {
        "name_process": "create_windows",
        "string_process": "\nprocess create_windows {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'symlink'\n  input: tuple val(outdir), path(assembly_fasta)\n  output: tuple path(\"*.fai\"), path(\"win.txt\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${samtools_app} faidx ${assembly_fasta}\n  cat ${assembly_fasta}.fai | awk '{print \\$1 \":0-\" \\$2}' > win.txt\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${assembly_fasta}.fai win.txt\n  echo \"1-10\" >> win.txt\n  echo \"2-10\" >> win.txt\n  echo \"3-10\" >> win.txt\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${samtools_app} faidx ${assembly_fasta}\n  cat ${assembly_fasta}.fai | awk '{print \\$1 \":0-\" \\$2}' > win.txt\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'symlink' input: tuple val(outdir), path(assembly_fasta) output: tuple path(\"*.fai\"), path(\"win.txt\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${assembly_fasta}.fai win.txt\n  echo \"1-10\" >> win.txt\n  echo \"2-10\" >> win.txt\n  echo \"3-10\" >> win.txt\n  \"\"\""
    },
    "combineVCF": {
        "name_process": "combineVCF",
        "string_process": "\nprocess combineVCF {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'symlink'\n  input: tuple val(outdir), path(vcfs)\n  output: tuple val(\"$outdir\"), path(\"*_consensus.vcf\")\n  script:\n  \"\"\"\n#! /usr/bin/env bash\n\nOUTNAME=`echo $outdir | sed 's:/:_:g'`\nOUTVCF=\\${OUTNAME}_consensus.vcf\n\n# Merge by sections (1) headers up to contig, (2) all contig headers, (3) headers post contigs, (4) snp data\ncat ${vcfs.get(0)} | sed -n '1,/##reference=/'p > \\$OUTVCF\ncat ${vcfs} | grep -h \"##contig=\" >> \\$OUTVCF\ncat ${vcfs.get(0)} | sed -n '/##INFO=/,/#CHROM/'p >> \\$OUTVCF\ncat ${vcfs} | grep -hv \"#\" >> \\$OUTVCF\n\"\"\"\n\n  stub:\n  \"\"\"\n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  touch \\${OUTNAME}_consensus.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n#! /usr/bin/env bash\n\nOUTNAME=`echo $outdir | sed 's:/:_:g'`\nOUTVCF=\\${OUTNAME}_consensus.vcf\n\n# Merge by sections (1) headers up to contig, (2) all contig headers, (3) headers post contigs, (4) snp data\ncat ${vcfs.get(0)} | sed -n '1,/##reference=/'p > \\$OUTVCF\ncat ${vcfs} | grep -h \"##contig=\" >> \\$OUTVCF\ncat ${vcfs.get(0)} | sed -n '/##INFO=/,/#CHROM/'p >> \\$OUTVCF\ncat ${vcfs} | grep -hv \"#\" >> \\$OUTVCF\n\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'symlink' input: tuple val(outdir), path(vcfs) output: tuple val(\"$outdir\"), path(\"*_consensus.vcf\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  touch \\${OUTNAME}_consensus.vcf\n  \"\"\""
    },
    "meryl_genome": {
        "name_process": "meryl_genome",
        "string_process": "\nprocess meryl_genome {\n  publishDir \"${params.outdir}/${outdir}/merfin\", mode: 'symlink'\n  input: tuple val(outdir), val(k), path(illumina_read)\n  output: path(\"*.meryl\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${meryl_app} count k=${k} output ${illumina_read.simpleName}.meryl ${illumina_read}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${illumina_read.simpleName}.meryl\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${meryl_app} count k=${k} output ${illumina_read.simpleName}.meryl ${illumina_read}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}/merfin\", mode: 'symlink' input: tuple val(outdir), val(k), path(illumina_read) output: path(\"*.meryl\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${illumina_read.simpleName}.meryl\n  \"\"\""
    },
    "merfin_polish": {
        "name_process": "merfin_polish",
        "string_process": "\nprocess merfin_polish {\n  publishDir \"${params.outdir}/${outdir}/merfin\", mode: 'symlink'\n  input: tuple val(outdir), path(vcf), path(genome_fasta), path(genome_meryl), val(peak), path(meryldb)\n  output: tuple val(\"$outdir\"), path(\"*merfin.polish.vcf\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  \n  ${merfin_app} -polish \\\n    -sequence ${genome_fasta} \\\n    -seqmers ${genome_meryl} \\\n    -readmers ${meryldb} \\\n    -peak ${peak} \\\n    -vcf ${vcf} \\\n    -output \\${OUTNAME}_merfin\n  \"\"\"\n  \n  stub:\n  \"\"\"\n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  touch \\${OUTNAME}_merfin.polish.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  \n  ${merfin_app} -polish \\\n    -sequence ${genome_fasta} \\\n    -seqmers ${genome_meryl} \\\n    -readmers ${meryldb} \\\n    -peak ${peak} \\\n    -vcf ${vcf} \\\n    -output \\${OUTNAME}_merfin\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}/merfin\", mode: 'symlink' input: tuple val(outdir), path(vcf), path(genome_fasta), path(genome_meryl), val(peak), path(meryldb) output: tuple val(\"$outdir\"), path(\"*merfin.polish.vcf\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  touch \\${OUTNAME}_merfin.polish.vcf\n  \"\"\""
    },
    "vcf_to_fasta": {
        "name_process": "vcf_to_fasta",
        "string_process": "\nprocess vcf_to_fasta {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'copy'\n  input: tuple val(outdir), path(vcf), path(genome_fasta)\n  output: path(\"*_consensus.fasta\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  \n  ${bcftools_app} view -Oz ${vcf} > ${vcf}.gz\n  ${bcftools_app} index ${vcf}.gz\n  ${bcftools_app} consensus ${vcf}.gz -f ${genome_fasta} -Hla > \\${OUTNAME}_consensus.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  touch \\${OUTNAME}_consensus.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  \n  ${bcftools_app} view -Oz ${vcf} > ${vcf}.gz\n  ${bcftools_app} index ${vcf}.gz\n  ${bcftools_app} consensus ${vcf}.gz -f ${genome_fasta} -Hla > \\${OUTNAME}_consensus.fasta\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'copy' input: tuple val(outdir), path(vcf), path(genome_fasta) output: path(\"*_consensus.fasta\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  OUTNAME=`echo $outdir | sed 's:/:_:g'`\n  touch \\${OUTNAME}_consensus.fasta\n  \"\"\""
    },
    "bam_to_fasta": {
        "name_process": "bam_to_fasta",
        "string_process": "\nprocess bam_to_fasta {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy'\n  input: path(bam)\n  output: path(\"${bam.simpleName}.fasta\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${samtools_app} fasta ${bam} > ${bam.simpleName}.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${bam.simpleName}.fasta\n  \"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${samtools_app} fasta ${bam} > ${bam.simpleName}.fasta\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy' input: path(bam) output: path(\"${bam.simpleName}.fasta\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${bam.simpleName}.fasta\n  \"\"\""
    },
    "align_shortreads": {
        "name_process": "align_shortreads",
        "string_process": "\nprocess align_shortreads {\n  publishDir \"${params.outdir}/${outdir}/bam\", mode: 'symlink'\n  input: tuple val(outdir), path(assembly_fasta), path(illumina_one), path(illumina_two)\n  output: tuple val(\"$outdir\"), path(\"*.bam\"), path(\"*.bai\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$(((`nproc`-1)*3/4+1))\n  PROC2=\\$(((`nproc`-1)*1/4+1))\n  mkdir tmp\n  ${bwamem2_app} index ${assembly_fasta}\n  ${bwamem2_app} mem -SP -t \\$PROC ${assembly_fasta} ${illumina_one} ${illumina_two} | \\\n    ${samtools_app} sort -T tmp -m 8G --threads \\$PROC2 - > ${illumina_one.simpleName}_aln.bam\n  ${samtools_app} index -@ \\${PROC} ${illumina_one.simpleName}_aln.bam\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${illumina_one.simpleName}_aln.bam\n  touch ${illumina_one.simpleName}_aln.bam.bai\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$(((`nproc`-1)*3/4+1))\n  PROC2=\\$(((`nproc`-1)*1/4+1))\n  mkdir tmp\n  ${bwamem2_app} index ${assembly_fasta}\n  ${bwamem2_app} mem -SP -t \\$PROC ${assembly_fasta} ${illumina_one} ${illumina_two} | \\\n    ${samtools_app} sort -T tmp -m 8G --threads \\$PROC2 - > ${illumina_one.simpleName}_aln.bam\n  ${samtools_app} index -@ \\${PROC} ${illumina_one.simpleName}_aln.bam\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}/bam\", mode: 'symlink' input: tuple val(outdir), path(assembly_fasta), path(illumina_one), path(illumina_two) output: tuple val(\"$outdir\"), path(\"*.bam\"), path(\"*.bai\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${illumina_one.simpleName}_aln.bam\n  touch ${illumina_one.simpleName}_aln.bam.bai\n  \"\"\""
    },
    "freebayes": {
        "name_process": "freebayes",
        "string_process": "\nprocess freebayes {\n  errorStrategy { task.attempt < 4 ? 'retry' : 'terminate' }\n\n  publishDir \"${params.outdir}/${outdir}/vcf\", mode: 'symlink'\n  input: tuple val(outdir), path(illumina_bam), path(illumina_bai), path(assembly_fasta), path(assembly_fai), val(window)\n  output: tuple val(\"$outdir\"), path(\"*.vcf\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${freebayes_app} \\\n    --region \"${window}\" \\\n    --min-mapping-quality 0 \\\n    --min-coverage 3 \\\n    --min-supporting-allele-qsum 0 \\\n    --ploidy 2 \\\n    --min-alternate-fraction 0.2 \\\n    --max-complex-gap 0 \\\n    --bam ${illumina_bam} \\\n    --vcf ${illumina_bam.simpleName}_${window.replace(':','_').replace('|','_')}.vcf \\\n    --fasta-reference ${assembly_fasta}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${illumina_bam.simpleName}_${window.replace(':','_').replace('|','_')}.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${freebayes_app} \\\n    --region \"${window}\" \\\n    --min-mapping-quality 0 \\\n    --min-coverage 3 \\\n    --min-supporting-allele-qsum 0 \\\n    --ploidy 2 \\\n    --min-alternate-fraction 0.2 \\\n    --max-complex-gap 0 \\\n    --bam ${illumina_bam} \\\n    --vcf ${illumina_bam.simpleName}_${window.replace(':','_').replace('|','_')}.vcf \\\n    --fasta-reference ${assembly_fasta}\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "errorStrategy { task.attempt < 4 ? 'retry' : 'terminate' }",
            "publishDir \"${params.outdir}/${outdir}/vcf\", mode: 'symlink' input: tuple val(outdir), path(illumina_bam), path(illumina_bai), path(assembly_fasta), path(assembly_fai), val(window) output: tuple val(\"$outdir\"), path(\"*.vcf\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${illumina_bam.simpleName}_${window.replace(':','_').replace('|','_')}.vcf\n  \"\"\""
    },
    "PURGE_DUPS": {
        "name_process": "PURGE_DUPS",
        "string_process": "\nprocess PURGE_DUPS {\n  publishDir \"${params.outdir}/$outdir\", mode:'copy'\n  input: tuple val(outdir), path(primary_assembly), path(haplo_fasta), path(pacbio_reads)\n  output: tuple path(\"primary_purged.fa\"), path(\"haps_purged.fa\"), path(\"*.png\"), path(\"*.log\")    \n  script:\n  template 'purge_dups.sh'\n\n  stub:\n  \"\"\"\n  touch primary_purged.fa haps_purged.fa primary_hap.fa haps_hap.fa\n  touch primary_purged.stats haps_purged.stats primary_hap.stats haps_hap.stats\n  touch a.png a.log\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  template 'purge_dups.sh'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/$outdir\", mode:'copy' input: tuple val(outdir), path(primary_assembly), path(haplo_fasta), path(pacbio_reads) output: tuple path(\"primary_purged.fa\"), path(\"haps_purged.fa\"), path(\"*.png\"), path(\"*.log\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch primary_purged.fa haps_purged.fa primary_hap.fa haps_hap.fa\n  touch primary_purged.stats haps_purged.stats primary_hap.stats haps_hap.stats\n  touch a.png a.log\n  \"\"\""
    },
    "PURGE_DUPS_TRIO": {
        "name_process": "PURGE_DUPS_TRIO",
        "string_process": "\nprocess PURGE_DUPS_TRIO {\n  publishDir \"${params.outdir}/$outdir\", mode:'copy'\n  input: tuple val(outdir), path(primary_assembly), path(pacbio_reads)\n  output: tuple path(\"${primary_assembly.simpleName}_primary_purged.fa\"), path(\"${primary_assembly.simpleName}_primary_hap.fa\"), path(\"*.stats\"), path(\"*.png\"), path(\"*.log\")\n  script:\n  template 'purge_dups_trios.sh'\n\n  stub:\n  \"\"\"\n  touch ${primary_assembly.simpleName}_primary_purged.fa ${primary_assembly.simpleName}_primary_hap.fa\n  \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "  template 'purge_dups_trios.sh'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/$outdir\", mode:'copy' input: tuple val(outdir), path(primary_assembly), path(pacbio_reads) output: tuple path(\"${primary_assembly.simpleName}_primary_purged.fa\"), path(\"${primary_assembly.simpleName}_primary_hap.fa\"), path(\"*.stats\"), path(\"*.png\"), path(\"*.log\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${primary_assembly.simpleName}_primary_purged.fa ${primary_assembly.simpleName}_primary_hap.fa\n  \"\"\""
    },
    "BUSCO": {
        "name_process": "BUSCO",
        "string_process": "\nprocess BUSCO {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'copy'\n  scratch false\n\n  input: tuple val(outdir), path(genomeFile)\n  output: path(\"${genomeFile.simpleName}/*\")\n  \n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$((`nproc`))\n  cat ${genomeFile} | tr '|' '_' > ${genomeFile.simpleName}_fixheaders.fna\n\n  ${busco_app} \\\n    -o ${genomeFile.simpleName} \\\n    -i ${genomeFile.simpleName}_fixheaders.fna \\\n    -l ${busco_lineage} \\\n    -m genome \\\n    -c \\${PROC} \\\n    -f\n  \"\"\"\n\n  stub:\n  \"\"\"\n  mkdir ${genomeFile.simpleName}\n  touch ${genomeFile.simpleName}/hey.txt\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$((`nproc`))\n  cat ${genomeFile} | tr '|' '_' > ${genomeFile.simpleName}_fixheaders.fna\n\n  ${busco_app} \\\n    -o ${genomeFile.simpleName} \\\n    -i ${genomeFile.simpleName}_fixheaders.fna \\\n    -l ${busco_lineage} \\\n    -m genome \\\n    -c \\${PROC} \\\n    -f\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'copy'",
            "scratch false input: tuple val(outdir), path(genomeFile) output: path(\"${genomeFile.simpleName}/*\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  mkdir ${genomeFile.simpleName}\n  touch ${genomeFile.simpleName}/hey.txt\n  \"\"\""
    },
    "meryl_count": {
        "name_process": "meryl_count",
        "string_process": "\nprocess meryl_count {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'symlink'\n  input: tuple val(k), path(illumina_read)\n  output: path(\"*.meryl\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${meryl_app} count k=${k} output ${illumina_read.simpleName}.meryl ${illumina_read}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${illumina_read.simpleName}.meryl\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${meryl_app} count k=${k} output ${illumina_read.simpleName}.meryl ${illumina_read}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'symlink' input: tuple val(k), path(illumina_read) output: path(\"*.meryl\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${illumina_read.simpleName}.meryl\n  \"\"\""
    },
    "meryl_union": {
        "name_process": "meryl_union",
        "string_process": "\nprocess meryl_union {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy'\n  input: path(illumina_meryls)\n  output: path(\"illumina.meryl\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${meryl_app} union-sum output illumina.meryl ${illumina_meryls}\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch illumina.meryl\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${meryl_app} union-sum output illumina.meryl ${illumina_meryls}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'copy' input: path(illumina_meryls) output: path(\"illumina.meryl\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch illumina.meryl\n  \"\"\""
    },
    "meryl_peak": {
        "name_process": "meryl_peak",
        "string_process": "\nprocess meryl_peak {\n  publishDir \"${params.outdir}/00_Preprocess\", mode: 'symlink'\n  input: path(illumina_meryl)\n  output: tuple path(\"peak.txt\"), path(\"illumina.hist\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  \n  # Calculate histogram\n  ${meryl_app} histogram ${illumina_meryl} > illumina.hist\n  awk '\\$1>5 {print}' illumina.hist | sort -k 2n | tail -n 1 | awk '{print \\$1}' > peak.txt\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch peak.txt illumina.hist\n  echo \"72\" >> peak.txt\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  \n  # Calculate histogram\n  ${meryl_app} histogram ${illumina_meryl} > illumina.hist\n  awk '\\$1>5 {print}' illumina.hist | sort -k 2n | tail -n 1 | awk '{print \\$1}' > peak.txt\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/00_Preprocess\", mode: 'symlink' input: path(illumina_meryl) output: tuple path(\"peak.txt\"), path(\"illumina.hist\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch peak.txt illumina.hist\n  echo \"72\" >> peak.txt\n  \"\"\""
    },
    "MerquryQV": {
        "name_process": "MerquryQV",
        "string_process": "\nprocess MerquryQV {\n  publishDir \"${params.outdir}/${outdir}/MerquryQV\", mode: 'copy'\n  publishDir \"${params.outdir}/${outdir}/\", mode: 'copy', pattern: \"merqury.qv\"\n  input: tuple val(outdir), path(illumina_db), path(assembly_fasta)\n  output: path(\"*\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n\n  merqury_sh=\"$params.merqury_sh\"\n \\${merqury_sh} $illumina_db $assembly_fasta ${assembly_fasta.simpleName}\n\n  # == Get single QV value and completeness stats\n  cat ${assembly_fasta.simpleName}.qv | awk -F'\\t' '{print \\$4}' > merqury.qv\n  cat ${assembly_fasta.simpleName}.completeness.stats | awk -F'\\t' '{print \\$5}' > comepleteness.qv\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch merqury.qv other.png\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n\n  merqury_sh=\"$params.merqury_sh\"\n \\${merqury_sh} $illumina_db $assembly_fasta ${assembly_fasta.simpleName}\n\n  # == Get single QV value and completeness stats\n  cat ${assembly_fasta.simpleName}.qv | awk -F'\\t' '{print \\$4}' > merqury.qv\n  cat ${assembly_fasta.simpleName}.completeness.stats | awk -F'\\t' '{print \\$5}' > comepleteness.qv\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}/MerquryQV\", mode: 'copy'",
            "publishDir \"${params.outdir}/${outdir}/\", mode: 'copy', pattern: \"merqury.qv\" input: tuple val(outdir), path(illumina_db), path(assembly_fasta) output: path(\"*\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch merqury.qv other.png\n  \"\"\""
    },
    "bbstat": {
        "name_process": "bbstat",
        "string_process": "\nprocess bbstat {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'copy'\n  input: tuple val(outdir), path(assembly_fasta)\n  output: path(\"*\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  # Desc: Prints out length distibutions, GC, etc of each assembly, could be added to pipeline at the end\n  # module load bbtools\n\n  echo \"Assmbly stats of $assembly_fasta  according to bbtools stats.sh\"\n\n  stats.sh in=$assembly_fasta out=${assembly_fasta.simpleName}.stats\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch bbstat_output.txt\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  # Desc: Prints out length distibutions, GC, etc of each assembly, could be added to pipeline at the end\n  # module load bbtools\n\n  echo \"Assmbly stats of $assembly_fasta  according to bbtools stats.sh\"\n\n  stats.sh in=$assembly_fasta out=${assembly_fasta.simpleName}.stats\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'copy' input: tuple val(outdir), path(assembly_fasta) output: path(\"*\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch bbstat_output.txt\n  \"\"\""
    },
    "pbmm2_index": {
        "name_process": "pbmm2_index",
        "string_process": "\nprocess pbmm2_index {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'symlink'\n  input: tuple val(outdir), path(assembly_fasta)\n  output: tuple val(\"$outdir\"), path(\"$assembly_fasta\"), path(\"*.mmi\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${pbmm2_app} index ${assembly_fasta} ${assembly_fasta}.mmi\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${assembly_fasta}\n  touch ${assembly_fasta}.mmi\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${pbmm2_app} index ${assembly_fasta} ${assembly_fasta}.mmi\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'symlink' input: tuple val(outdir), path(assembly_fasta) output: tuple val(\"$outdir\"), path(\"$assembly_fasta\"), path(\"*.mmi\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${assembly_fasta}\n  touch ${assembly_fasta}.mmi\n  \"\"\""
    },
    "pbmm2_align": {
        "name_process": "pbmm2_align",
        "string_process": "\nprocess pbmm2_align {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'symlink'\n  input:tuple val(outdir), path(assembly_fasta), path(assembly_mmi), path(pacbio_read)\n  output: tuple val(\"$outdir\"), path(\"*.bam\"), path(\"*.bai\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$(((`nproc`-1)*3/4+1))\n  PROC2=\\$(((`nproc`-1)*1/4+1))\n  mkdir tmp\n\n  # for multiple pacbio subread files\n  ls ${pacbio_read} > bam.fofn\n\n  ${pbmm2_app} align -j \\$PROC ${assembly_fasta} bam.fofn | \\\n    ${samtools_app} sort -T tmp -m 8G --threads \\$PROC2 - > ${assembly_fasta.simpleName}_aln.bam\n  ${samtools_app} index -@ \\${PROC} ${assembly_fasta.simpleName}_aln.bam\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${assembly_fasta.simpleName}_${pacbio_read.simpleName}_aln.bam\n  touch ${assembly_fasta.simpleName}_${pacbio_read.simpleName}_aln.bam.bai\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$(((`nproc`-1)*3/4+1))\n  PROC2=\\$(((`nproc`-1)*1/4+1))\n  mkdir tmp\n\n  # for multiple pacbio subread files\n  ls ${pacbio_read} > bam.fofn\n\n  ${pbmm2_app} align -j \\$PROC ${assembly_fasta} bam.fofn | \\\n    ${samtools_app} sort -T tmp -m 8G --threads \\$PROC2 - > ${assembly_fasta.simpleName}_aln.bam\n  ${samtools_app} index -@ \\${PROC} ${assembly_fasta.simpleName}_aln.bam\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'symlink' input:tuple val(outdir), path(assembly_fasta), path(assembly_mmi), path(pacbio_read) output: tuple val(\"$outdir\"), path(\"*.bam\"), path(\"*.bai\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${assembly_fasta.simpleName}_${pacbio_read.simpleName}_aln.bam\n  touch ${assembly_fasta.simpleName}_${pacbio_read.simpleName}_aln.bam.bai\n  \"\"\""
    },
    "gcpp_arrow": {
        "name_process": "gcpp_arrow",
        "string_process": "\nprocess gcpp_arrow {\n  errorStrategy { task.attempt < 4 ? 'retry' : 'terminate' }\n\n  publishDir \"${params.outdir}/${outdir}/gccpruns\", mode: 'symlink'\n  input: tuple val(outdir), path(pacbio_bam), path(pacbio_bai),  path(assembly_fasta), path(assembly_fai), val(window)\n  output: tuple val(\"$outdir\"), path(\"*.fasta\"), path(\"*.vcf\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$(((`nproc`-1)*3/4+1))\n  ${gcpp_app} --algorithm=arrow \\\n    -x 10 -X 120 -q 0 \\\n    -j \\${PROC} -w \"$window\" \\\n    -r ${assembly_fasta} ${pacbio_bam} \\\n    -o ${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.vcf,${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.vcf\n  touch ${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  PROC=\\$(((`nproc`-1)*3/4+1))\n  ${gcpp_app} --algorithm=arrow \\\n    -x 10 -X 120 -q 0 \\\n    -j \\${PROC} -w \"$window\" \\\n    -r ${assembly_fasta} ${pacbio_bam} \\\n    -o ${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.vcf,${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.fasta\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "errorStrategy { task.attempt < 4 ? 'retry' : 'terminate' }",
            "publishDir \"${params.outdir}/${outdir}/gccpruns\", mode: 'symlink' input: tuple val(outdir), path(pacbio_bam), path(pacbio_bai), path(assembly_fasta), path(assembly_fai), val(window) output: tuple val(\"$outdir\"), path(\"*.fasta\"), path(\"*.vcf\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.vcf\n  touch ${assembly_fasta.simpleName}_${window.replace(':','_').replace('|','_')}.fasta\n  \"\"\""
    },
    "merge_consensus": {
        "name_process": "merge_consensus",
        "string_process": "\nprocess merge_consensus {\n  publishDir \"${params.outdir}/${outdir}\", mode: 'copy'\n  input: tuple val(outdir), path(windows_fasta)\n  output: path(\"*_consensus.fasta\")\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  OUTNAME=`echo \"$outdir\" | sed 's:/:_:g'`\n  cat ${windows_fasta} > \\${OUTNAME}_consensus.fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  OUTNAME=`echo \"$outdir\" | sed 's:/:_:g'`\n  touch \\${OUTNAME}_consensus.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  OUTNAME=`echo \"$outdir\" | sed 's:/:_:g'`\n  cat ${windows_fasta} > \\${OUTNAME}_consensus.fasta\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}\", mode: 'copy' input: tuple val(outdir), path(windows_fasta) output: path(\"*_consensus.fasta\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  OUTNAME=`echo \"$outdir\" | sed 's:/:_:g'`\n  touch \\${OUTNAME}_consensus.fasta\n  \"\"\""
    },
    "reshape_arrow": {
        "name_process": "reshape_arrow",
        "string_process": "\nprocess reshape_arrow {\n  publishDir \"${params.outdir}/${outdir}/merfin\", mode: 'symlink'\n  input: tuple val(outdir), path(vcf)\n  output: tuple val(\"${outdir}\"), path(\"*.reshaped.vcf.gz\")\n  script:\n  template 'reshape_arrow.sh'\n\n  stub:\n  \"\"\"\n  touch ${vcf.baseName}.reshaped.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "  template 'reshape_arrow.sh'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__polishCLR",
        "directive": [
            "publishDir \"${params.outdir}/${outdir}/merfin\", mode: 'symlink' input: tuple val(outdir), path(vcf) output: tuple val(\"${outdir}\"), path(\"*.reshaped.vcf.gz\")"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${vcf.baseName}.reshaped.vcf.gz\n  \"\"\""
    }
}
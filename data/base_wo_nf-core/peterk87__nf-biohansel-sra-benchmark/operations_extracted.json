{
    "OPERATION_1": {
        "string": "Channel.from(schemes)\n  .into { ch_schemes }",
        "origin": [
            [
                "schemes",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_schemes",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_3": {
        "string": "ch_schemes_shuffled\n  .splitText(limit: params.n_genomes, elem: 2)\n  .map { item ->\n    item[2] = item[2].replaceAll(\"\\\\s\", \"\")\n    item\n  }\n  .filter { it[2] != '' }\n  .dump(tag: \"ch_accessions\")\n  .set { ch_accessions }",
        "origin": [
            [
                "ch_schemes_shuffled",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_accessions",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_fastqs\n  .groupTuple(by: 0)\n  .map { it -> \n    it[1] = it[1][0]\n    it[3] = it[3].flatten()\n    it[4] = it[4].flatten()\n    it[5] = it[5][0]\n    it[6] = it[6][0]\n    it\n  }\n  .dump(tag: \"ch_collected_fastqs\")\n  .set { ch_collected_fastqs }",
        "origin": [
            [
                "ch_fastqs",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_collected_fastqs",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_biohansel_multi_trace.mix(ch_biohansel_single_trace, ch_snippy_trace)\n  .collectFile() { scheme, samples, threads, type, trace_file, iter, reads1, reads2 ->\n    size_bytes = 0\n    if (reads1 instanceof ArrayList) {\n      reads1.collect( { size_bytes += file(it).size() } )\n      reads2.collect( { size_bytes += file(it).size() } )\n    } else {\n      size_bytes = file(reads1).size() + file(reads2).size()\n    }\n    ['trace.txt', \n     \"\"\"\n     ${trace_file.text}\n     scheme=${scheme}\n     samples=${samples}\n     threads=${threads}\n     type=${type}\n     iter=${iter}\n     size_bytes=${size_bytes}\n     @@@\n     \"\"\".stripIndent()]\n  }\n  .set { ch_trace }",
        "origin": [
            [
                "ch_biohansel_multi_trace",
                "P"
            ],
            [
                "ch_biohansel_single_trace",
                "P"
            ],
            [
                "ch_snippy_trace",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_trace",
                "P"
            ]
        ]
    }
}
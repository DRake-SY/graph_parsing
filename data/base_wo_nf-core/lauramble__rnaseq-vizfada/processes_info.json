{
    "SAMTOOLS_FLAGSTAT": {
        "name_process": "SAMTOOLS_FLAGSTAT",
        "string_process": "\nprocess SAMTOOLS_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools flagstat $bam > ${bam}.flagstat\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools flagstat $bam > ${bam}.flagstat\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_READDISTRIBUTION": {
        "name_process": "RSEQC_READDISTRIBUTION",
        "string_process": "\nprocess RSEQC_READDISTRIBUTION {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.read_distribution.txt\"), emit: txt\n    path  \"*.version.txt\"                           , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    read_distribution.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        > ${prefix}.read_distribution.txt\n\n    read_distribution.py --version | sed -e \"s/read_distribution.py //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    read_distribution.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        > ${prefix}.read_distribution.txt\n\n    read_distribution.py --version | sed -e \"s/read_distribution.py //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_FAANG": {
        "name_process": "GET_FAANG",
        "string_process": "process GET_FAANG {\n  publishDir \"${params.outdir}/metadata\",\n      mode: params.publish_dir_mode,\n      pattern: \"*.tsv\"\n\n  container \"lauramble/python-vizfada\"\n    \n  output:\n  path \"input_*.txt\", emit: ids\n  path \"metadata.tsv\", emit: metadata\n  \n  script:\n  def species = \"${params.species}\".capitalize().replace(\"_\", \" \")\n  if (params.ids) {\n    def idsFile = file(params.ids)\n    \"\"\"\n    get_faang_data.py \"$species\" ${params.n_exp} $idsFile\n    \"\"\"\n  } else {\n    \"\"\"\n    get_faang_data.py \"$species\" ${params.n_exp}\n    \"\"\"\n  }\n}",
        "nb_lignes_process": 22,
        "string_script": "  def species = \"${params.species}\".capitalize().replace(\"_\", \" \")\n  if (params.ids) {\n    def idsFile = file(params.ids)\n    \"\"\"\n    get_faang_data.py \"$species\" ${params.n_exp} $idsFile\n    \"\"\"\n  } else {\n    \"\"\"\n    get_faang_data.py \"$species\" ${params.n_exp}\n    \"\"\"\n  }",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}/metadata\" , mode: params.publish_dir_mode , pattern: \"*.tsv\"",
            "container \"lauramble/python-vizfada\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_IDS_TO_RUNINFO": {
        "name_process": "SRA_IDS_TO_RUNINFO",
        "string_process": "\nprocess SRA_IDS_TO_RUNINFO {\n    tag \"$id\"\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    val id\n    val fields\n\n    output:\n    path \"*.tsv\", emit: tsv\n\n    script:\n    def metadata_fields = fields ? \"--ena_metadata_fields ${fields}\" : ''\n    \"\"\"\n    echo $id > id.txt\n    sra_ids_to_runinfo.py \\\\\n        id.txt \\\\\n        ${id}.runinfo.tsv \\\\\n        $metadata_fields\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def metadata_fields = fields ? \"--ena_metadata_fields ${fields}\" : ''\n    \"\"\"\n    echo $id > id.txt\n    sra_ids_to_runinfo.py \\\\\n        id.txt \\\\\n        ${id}.runinfo.tsv \\\\\n        $metadata_fields\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fields"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$id\"",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SRA_TO_SAMPLESHEET": {
        "name_process": "SRA_TO_SAMPLESHEET",
        "string_process": "\nprocess SRA_TO_SAMPLESHEET {\n    tag \"$meta.id\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    memory 100.MB\n\n    input:\n    tuple val(runinfo), path(fastq)\n    val   pipeline\n    val   mapping_fields\n\n    output:\n    tuple val(meta), path(\"*samplesheet.csv\"), emit: samplesheet\n    tuple val(meta), path(\"*mappings.csv\")   , emit: mappings\n\n    exec:\n      \n                                             \n      \n\n                                                      \n    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n    meta_map.remove(\"fastq_1\")\n    meta_map.remove(\"fastq_2\")\n    meta_map.remove(\"md5_1\")\n    meta_map.remove(\"md5_2\")\n    meta_map.remove(\"single_end\")\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id.split('_')[0..-2].join('_')}\",\n        fastq_1 : \"${params.outdir}/${params.results_dir}/${fastq[0]}\",\n        fastq_2 : meta.single_end ? '' : \"${params.outdir}/${params.results_dir}/${fastq[1]}\"\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n\n      \n                                     \n      \n    mappings_map = pipeline_map.clone()\n    def fields = mapping_fields ? ['sample'] + mapping_fields.split(',').collect{ it.trim().toLowerCase() } : []\n    if ((mappings_map.keySet() + fields).unique().size() != mappings_map.keySet().size()) {\n        error(\"Invalid option for '--sample_mapping_fields': ${mapping_fields}.\\nValid options: ${mappings_map.keySet().join(', ')}\")\n    }\n\n                      \n    mappings  = fields.collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    mappings += mappings_map.subMap(fields).values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                             \n    def mappings_file = task.workDir.resolve(\"${meta.id}.mappings.csv\")\n    mappings_file.text = mappings\n}",
        "nb_lignes_process": 70,
        "string_script": "    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n    meta_map.remove(\"fastq_1\")\n    meta_map.remove(\"fastq_2\")\n    meta_map.remove(\"md5_1\")\n    meta_map.remove(\"md5_2\")\n    meta_map.remove(\"single_end\")\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id.split('_')[0..-2].join('_')}\",\n        fastq_1 : \"${params.outdir}/${params.results_dir}/${fastq[0]}\",\n        fastq_2 : meta.single_end ? '' : \"${params.outdir}/${params.results_dir}/${fastq[1]}\"\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n\n      \n                                     \n      \n    mappings_map = pipeline_map.clone()\n    def fields = mapping_fields ? ['sample'] + mapping_fields.split(',').collect{ it.trim().toLowerCase() } : []\n    if ((mappings_map.keySet() + fields).unique().size() != mappings_map.keySet().size()) {\n        error(\"Invalid option for '--sample_mapping_fields': ${mapping_fields}.\\nValid options: ${mappings_map.keySet().join(', ')}\")\n    }\n\n                      \n    mappings  = fields.collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    mappings += mappings_map.subMap(fields).values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                             \n    def mappings_file = task.workDir.resolve(\"${meta.id}.mappings.csv\")\n    mappings_file.text = mappings",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "runinfo",
            "fastq",
            "pipeline",
            "mapping_fields"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "memory 100.MB"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PRESEQ_LCEXTRAP": {
        "name_process": "PRESEQ_LCEXTRAP",
        "string_process": "\nprocess PRESEQ_LCEXTRAP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    label 'error_ignore'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::preseq=3.1.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/preseq:3.1.2--h06ef8b0_1\"\n    } else {\n        container \"quay.io/biocontainers/preseq:3.1.2--h06ef8b0_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.ccurve.txt\"), emit: ccurve\n    tuple val(meta), path(\"*.log\")       , emit: log\n    path  \"*.version.txt\"                , emit: version\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    \"\"\"\n    preseq \\\\\n        lc_extrap \\\\\n        $options.args \\\\\n        $paired_end \\\\\n        -output ${prefix}.ccurve.txt \\\\\n        $bam\n    cp .command.err ${prefix}.command.log\n\n    echo \\$(preseq 2>&1) | sed 's/^.*Version: //; s/Usage:.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    \"\"\"\n    preseq \\\\\n        lc_extrap \\\\\n        $options.args \\\\\n        $paired_end \\\\\n        -output ${prefix}.ccurve.txt \\\\\n        $bam\n    cp .command.err ${prefix}.command.log\n\n    echo \\$(preseq 2>&1) | sed 's/^.*Version: //; s/Usage:.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "preseq"
        ],
        "tools_url": [
            "https://bio.tools/preseq"
        ],
        "tools_dico": [
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "label 'error_ignore'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::preseq=3.1.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/preseq:3.1.2--h06ef8b0_1\" } else { container \"quay.io/biocontainers/preseq:3.1.2--h06ef8b0_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_GENOMECOV": {
        "name_process": "BEDTOOLS_GENOMECOV",
        "string_process": "\nprocess BEDTOOLS_GENOMECOV {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0\"\n    } else {\n        container \"quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.forward.bedGraph\"), emit: bedgraph_forward\n    tuple val(meta), path(\"*.reverse.bedGraph\"), emit: bedgraph_reverse\n    path \"*.version.txt\"                       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def prefix_forward = \"${prefix}.forward\"\n    def prefix_reverse = \"${prefix}.reverse\"\n    if (meta.strandedness == 'reverse') {\n        prefix_forward = \"${prefix}.reverse\"\n        prefix_reverse = \"${prefix}.forward\"\n    }\n    \"\"\"\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand + \\\\\n        $options.args \\\\\n        | bedtools sort > ${prefix_forward}.bedGraph\n\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand - \\\\\n        $options.args \\\\\n        | bedtools sort > ${prefix_reverse}.bedGraph\n\n    bedtools --version | sed -e \"s/bedtools v//g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def prefix_forward = \"${prefix}.forward\"\n    def prefix_reverse = \"${prefix}.reverse\"\n    if (meta.strandedness == 'reverse') {\n        prefix_forward = \"${prefix}.reverse\"\n        prefix_reverse = \"${prefix}.forward\"\n    }\n    \"\"\"\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand + \\\\\n        $options.args \\\\\n        | bedtools sort > ${prefix_forward}.bedGraph\n\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand - \\\\\n        $options.args \\\\\n        | bedtools sort > ${prefix_reverse}.bedGraph\n\n    bedtools --version | sed -e \"s/bedtools v//g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0\" } else { container \"quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "STRINGTIE": {
        "name_process": "STRINGTIE",
        "string_process": "\nprocess STRINGTIE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::stringtie=2.1.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/stringtie:2.1.4--h7e0af3c_0\"\n    } else {\n        container \"quay.io/biocontainers/stringtie:2.1.4--h7e0af3c_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"*.coverage.gtf\")   , emit: coverage_gtf\n    tuple val(meta), path(\"*.transcripts.gtf\"), emit: transcript_gtf\n    tuple val(meta), path(\"*.abundance.txt\")  , emit: abundance\n    tuple val(meta), path(\"*.ballgown\")       , emit: ballgown\n    path  \"*.version.txt\"                     , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--fr'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--rf'\n    }\n    \"\"\"\n    stringtie \\\\\n        $bam \\\\\n        $strandedness \\\\\n        -G $gtf \\\\\n        -o ${prefix}.transcripts.gtf \\\\\n        -A ${prefix}.gene.abundance.txt \\\\\n        -C ${prefix}.coverage.gtf \\\\\n        -b ${prefix}.ballgown \\\\\n        $options.args\n\n    stringtie --version > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--fr'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--rf'\n    }\n    \"\"\"\n    stringtie \\\\\n        $bam \\\\\n        $strandedness \\\\\n        -G $gtf \\\\\n        -o ${prefix}.transcripts.gtf \\\\\n        -A ${prefix}.gene.abundance.txt \\\\\n        -C ${prefix}.coverage.gtf \\\\\n        -b ${prefix}.ballgown \\\\\n        $options.args\n\n    stringtie --version > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::stringtie=2.1.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/stringtie:2.1.4--h7e0af3c_0\" } else { container \"quay.io/biocontainers/stringtie:2.1.4--h7e0af3c_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HISAT2_ALIGN": {
        "name_process": "HISAT2_ALIGN",
        "string_process": "\nprocess HISAT2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::hisat2=2.2.0 bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  splicesites\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path(\"*.log\"), emit: summary\n    path  \"*.version.txt\"         , emit: version\n\n    tuple val(meta), path(\"*fastq.gz\"), optional:true, emit: fastq\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = meta.single_end ? '--rna-strandness F' : '--rna-strandness FR'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = meta.single_end ? '--rna-strandness R' : '--rna-strandness RF'\n    }\n    def seq_center = params.seq_center ? \"--rg-id ${prefix} --rg SM:$prefix --rg CN:${params.seq_center.replaceAll('\\\\s','_')}\" : \"--rg-id ${prefix} --rg SM:$prefix\"\n    if (meta.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            $options.args \\\\\n            | samtools view -bS -F 4 -F 256 - > ${prefix}.bam\n\n        echo $VERSION > ${software}.version.txt\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            --no-mixed \\\\\n            --no-discordant \\\\\n            $options.args \\\\\n            | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        echo $VERSION > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 84,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = meta.single_end ? '--rna-strandness F' : '--rna-strandness FR'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = meta.single_end ? '--rna-strandness R' : '--rna-strandness RF'\n    }\n    def seq_center = params.seq_center ? \"--rg-id ${prefix} --rg SM:$prefix --rg CN:${params.seq_center.replaceAll('\\\\s','_')}\" : \"--rg-id ${prefix} --rg SM:$prefix\"\n    if (meta.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            $options.args \\\\\n            | samtools view -bS -F 4 -F 256 - > ${prefix}.bam\n\n        echo $VERSION > ${software}.version.txt\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            --no-mixed \\\\\n            --no-discordant \\\\\n            $options.args \\\\\n            | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        echo $VERSION > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 56,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "splicesites"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::hisat2=2.2.0 bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0\" } else { container \"quay.io/biocontainers/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC_MAPPINGS_CONFIG": {
        "name_process": "MULTIQC_MAPPINGS_CONFIG",
        "string_process": "\nprocess MULTIQC_MAPPINGS_CONFIG {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path csv\n\n    output:\n    path \"*yml\"         , emit: yml\n    path \"*.version.txt\", emit: version\n\n    script:\n    \"\"\"\n    multiqc_mappings_config.py \\\\\n        $csv \\\\\n        multiqc_config.yml\n\n    python --version | sed -e \"s/Python //g\" > python.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    multiqc_mappings_config.py \\\\\n        $csv \\\\\n        multiqc_config.yml\n\n    python --version | sed -e \"s/Python //g\" > python.version.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "csv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_BAMSTAT": {
        "name_process": "RSEQC_BAMSTAT",
        "string_process": "\nprocess RSEQC_BAMSTAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam_stat.txt\"), emit: txt\n    path  \"*.version.txt\"                  , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bam_stat.py \\\\\n        -i $bam \\\\\n        $options.args \\\\\n        > ${prefix}.bam_stat.txt\n\n    bam_stat.py --version | sed -e \"s/bam_stat.py //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bam_stat.py \\\\\n        -i $bam \\\\\n        $options.args \\\\\n        > ${prefix}.bam_stat.txt\n\n    bam_stat.py --version | sed -e \"s/bam_stat.py //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEM_MERGE_COUNTS": {
        "name_process": "RSEM_MERGE_COUNTS",
        "string_process": "\nprocess RSEM_MERGE_COUNTS {\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path ('genes/*')\n    path ('isoforms/*')\n\n    output:\n    path \"rsem.merged.gene_counts.tsv\"      , emit: counts_gene\n    path \"rsem.merged.gene_tpm.tsv\"         , emit: tpm_gene\n    path \"rsem.merged.transcript_counts.tsv\", emit: counts_transcript\n    path \"rsem.merged.transcript_tpm.tsv\"   , emit: tpm_transcript\n\n    script:\n    \"\"\"\n    mkdir -p tmp/genes\n    cut -f 1,2 `ls ./genes/* | head -n 1` > gene_ids.txt\n    for fileid in `ls ./genes/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.genes.results\\$//g`\n        echo \\$samplename > tmp/genes/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/genes/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.tpm.txt\n    done\n\n    mkdir -p tmp/isoforms\n    cut -f 1,2 `ls ./isoforms/* | head -n 1` > transcript_ids.txt\n    for fileid in `ls ./isoforms/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.isoforms.results\\$//g`\n        echo \\$samplename > tmp/isoforms/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/isoforms/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.tpm.txt\n    done\n\n    paste gene_ids.txt tmp/genes/*.counts.txt > rsem.merged.gene_counts.tsv\n    paste gene_ids.txt tmp/genes/*.tpm.txt > rsem.merged.gene_tpm.tsv\n    paste transcript_ids.txt tmp/isoforms/*.counts.txt > rsem.merged.transcript_counts.tsv\n    paste transcript_ids.txt tmp/isoforms/*.tpm.txt > rsem.merged.transcript_tpm.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    \"\"\"\n    mkdir -p tmp/genes\n    cut -f 1,2 `ls ./genes/* | head -n 1` > gene_ids.txt\n    for fileid in `ls ./genes/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.genes.results\\$//g`\n        echo \\$samplename > tmp/genes/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/genes/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.tpm.txt\n    done\n\n    mkdir -p tmp/isoforms\n    cut -f 1,2 `ls ./isoforms/* | head -n 1` > transcript_ids.txt\n    for fileid in `ls ./isoforms/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.isoforms.results\\$//g`\n        echo \\$samplename > tmp/isoforms/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/isoforms/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.tpm.txt\n    done\n\n    paste gene_ids.txt tmp/genes/*.counts.txt > rsem.merged.gene_counts.tsv\n    paste gene_ids.txt tmp/genes/*.tpm.txt > rsem.merged.gene_tpm.tsv\n    paste transcript_ids.txt tmp/isoforms/*.counts.txt > rsem.merged.transcript_counts.tsv\n    paste transcript_ids.txt tmp/isoforms/*.tpm.txt > rsem.merged.transcript_tpm.tsv\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "\nprocess SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"*.version.txt\"           , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools stats $bam > ${bam}.stats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools stats $bam > ${bam}.stats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_TXIMPORT": {
        "name_process": "SALMON_TXIMPORT",
        "string_process": "\nprocess SALMON_TXIMPORT {\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-tximeta=1.8.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bioconductor-tximeta:1.8.0--r40_0\"\n    } else {\n        container \"quay.io/biocontainers/bioconductor-tximeta:1.8.0--r40_0\"\n    }\n\n    input:\n    path (\"salmon/*\")\n    path  tx2gene\n\n    output:\n    path \"*gene_tpm.tsv\"                 , emit: tpm_gene\n    path \"*gene_counts.tsv\"              , emit: counts_gene\n    path \"*gene_counts_length_scaled.tsv\", emit: counts_gene_length_scaled\n    path \"*gene_counts_scaled.tsv\"       , emit: counts_gene_scaled\n    path \"*transcript_tpm.tsv\"           , emit: tpm_transcript\n    path \"*transcript_counts.tsv\"        , emit: counts_transcript\n    path \"*.version.txt\"                 , emit: version\n\n    script:                                                                    \n    \"\"\"\n    salmon_tximport.r NULL salmon salmon.merged\n    Rscript -e \"library(tximeta); write(x=as.character(packageVersion('tximeta')), file='bioconductor-tximeta.version.txt')\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    salmon_tximport.r NULL salmon salmon.merged\n    Rscript -e \"library(tximeta); write(x=as.character(packageVersion('tximeta')), file='bioconductor-tximeta.version.txt')\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tx2gene"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::bioconductor-tximeta=1.8.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bioconductor-tximeta:1.8.0--r40_0\" } else { container \"quay.io/biocontainers/bioconductor-tximeta:1.8.0--r40_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_IDXSTATS": {
        "name_process": "SAMTOOLS_IDXSTATS",
        "string_process": "\nprocess SAMTOOLS_IDXSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools idxstats $bam > ${bam}.idxstats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools idxstats $bam > ${bam}.idxstats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CAT_ADDITIONAL_FASTA": {
        "name_process": "CAT_ADDITIONAL_FASTA",
        "string_process": "\nprocess CAT_ADDITIONAL_FASTA {\n    tag \"$add_fasta\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path fasta\n    path gtf\n    path add_fasta\n    val  biotype\n\n    output:\n    path \"${name}.fasta\", emit: fasta\n    path \"${name}.gtf\"  , emit: gtf\n\n    script:\n    def genome_name  = params.genome ? params.genome : fasta.getBaseName()\n    def biotype_name = biotype ? \"-b $biotype\" : ''\n    def add_name     = add_fasta.getBaseName()\n    name             = \"${genome_name}_${add_name}\"\n    \"\"\"\n    fasta2gtf.py -o ${add_fasta.baseName}.gtf $biotype_name $add_fasta\n    cat $fasta $add_fasta > ${name}.fasta\n    cat $gtf ${add_fasta.baseName}.gtf > ${name}.gtf\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def genome_name  = params.genome ? params.genome : fasta.getBaseName()\n    def biotype_name = biotype ? \"-b $biotype\" : ''\n    def add_name     = add_fasta.getBaseName()\n    name             = \"${genome_name}_${add_name}\"\n    \"\"\"\n    fasta2gtf.py -o ${add_fasta.baseName}.gtf $biotype_name $add_fasta\n    cat $fasta $add_fasta > ${name}.fasta\n    cat $gtf ${add_fasta.baseName}.gtf > ${name}.gtf\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "goname"
        ],
        "tools_url": [
            "https://bio.tools/goname"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "add_fasta",
            "biotype"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$add_fasta\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GTF2BED": {
        "name_process": "GTF2BED",
        "string_process": "\nprocess GTF2BED {\n    tag \"$gtf\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::perl=5.26.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/perl:5.26.2\"\n    } else {\n        container \"quay.io/biocontainers/perl:5.26.2\"\n    }\n\n    input:\n    path gtf\n\n    output:\n    path '*.bed'\n\n    script:                                                                     \n    \"\"\"\n    gtf2bed $gtf > ${gtf.baseName}.bed\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    gtf2bed $gtf > ${gtf.baseName}.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$gtf\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::perl=5.26.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/perl:5.26.2\" } else { container \"quay.io/biocontainers/perl:5.26.2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "\nprocess GUNZIP {\n    tag \"$archive\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path archive\n\n    output:\n    path \"$gunzip\",       emit: gunzip\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    gunzip       = archive.toString() - '.gz'\n    \"\"\"\n    gunzip -f $options.args $archive\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    gunzip       = archive.toString() - '.gz'\n    \"\"\"\n    gunzip -f $options.args $archive\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "DESEQ2_QC": {
        "name_process": "DESEQ2_QC",
        "string_process": "\nprocess DESEQ2_QC {\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                                                   \n                                                                                                                                \n    conda (params.enable_conda ? \"conda-forge::r-base=4.0 bioconda::bioconductor-deseq2=1.28.0 bioconda::bioconductor-biocparallel bioconda::bioconductor-tximport bioconda::bioconductor-complexheatmap conda-forge::r-optparse conda-forge::r-ggplot2 conda-forge::r-rcolorbrewer conda-forge::r-pheatmap\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\"\n    }\n\n    input:\n    path counts\n    path pca_header_multiqc\n    path clustering_header_multiqc\n\n    output:\n    path \"*.pdf\"                , optional:true, emit: pdf\n    path \"*.RData\"              , optional:true, emit: rdata\n    path \"*pca.vals.txt\"        , optional:true, emit: pca_txt\n    path \"*pca.vals_mqc.tsv\"    , optional:true, emit: pca_multiqc\n    path \"*sample.dists.txt\"    , optional:true, emit: dists_txt\n    path \"*sample.dists_mqc.tsv\", optional:true, emit: dists_multiqc\n    path \"*.log\"                , optional:true, emit: log\n    path \"size_factors\"         , optional:true, emit: size_factors\n    path  \"*.version.txt\"       , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def label_lower = params.multiqc_label.toLowerCase()\n    def label_upper = params.multiqc_label.toUpperCase()\n    \"\"\"\n    deseq2_qc.r \\\\\n        --count_file $counts \\\\\n        --outdir ./ \\\\\n        --cores $task.cpus \\\\\n        $options.args\n\n    if [ -f \"R_sessionInfo.log\" ]; then\n        sed \"s/deseq2_pca/${label_lower}_deseq2_pca/g\" <$pca_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 PCA/${label_upper} DESeq2 PCA/g\" tmp.txt\n        cat tmp.txt *.pca.vals.txt > ${label_lower}.pca.vals_mqc.tsv\n\n        sed \"s/deseq2_clustering/${label_lower}_deseq2_clustering/g\" <$clustering_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 sample/${label_upper} DESeq2 sample/g\" tmp.txt\n        cat tmp.txt *.sample.dists.txt > ${label_lower}.sample.dists_mqc.tsv\n    fi\n\n    Rscript -e \"library(DESeq2); write(x=as.character(packageVersion('DESeq2')), file='${software}.version.txt')\"\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def label_lower = params.multiqc_label.toLowerCase()\n    def label_upper = params.multiqc_label.toUpperCase()\n    \"\"\"\n    deseq2_qc.r \\\\\n        --count_file $counts \\\\\n        --outdir ./ \\\\\n        --cores $task.cpus \\\\\n        $options.args\n\n    if [ -f \"R_sessionInfo.log\" ]; then\n        sed \"s/deseq2_pca/${label_lower}_deseq2_pca/g\" <$pca_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 PCA/${label_upper} DESeq2 PCA/g\" tmp.txt\n        cat tmp.txt *.pca.vals.txt > ${label_lower}.pca.vals_mqc.tsv\n\n        sed \"s/deseq2_clustering/${label_lower}_deseq2_clustering/g\" <$clustering_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 sample/${label_upper} DESeq2 sample/g\" tmp.txt\n        cat tmp.txt *.sample.dists.txt > ${label_lower}.sample.dists_mqc.tsv\n    fi\n\n    Rscript -e \"library(DESeq2); write(x=as.character(packageVersion('DESeq2')), file='${software}.version.txt')\"\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts",
            "pca_header_multiqc",
            "clustering_header_multiqc"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0 bioconda::bioconductor-deseq2=1.28.0 bioconda::bioconductor-biocparallel bioconda::bioconductor-tximport bioconda::bioconductor-complexheatmap conda-forge::r-optparse conda-forge::r-ggplot2 conda-forge::r-rcolorbrewer conda-forge::r-pheatmap\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\" } else { container \"quay.io/biocontainers/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GTF_GENE_FILTER": {
        "name_process": "GTF_GENE_FILTER",
        "string_process": "\nprocess GTF_GENE_FILTER {\n    tag \"$fasta\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"*.gtf\"\n\n    script:                                                                                          \n    \"\"\"\n    filter_gtf_for_genes_in_genome.py --gtf $gtf --fasta $fasta -o ${fasta.baseName}_genes.gtf\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    filter_gtf_for_genes_in_genome.py --gtf $gtf --fasta $fasta -o ${fasta.baseName}_genes.gtf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$fasta\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_TX2GENE": {
        "name_process": "SALMON_TX2GENE",
        "string_process": "\nprocess SALMON_TX2GENE {\n    tag \"$gtf\"\n    label \"process_low\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path (\"salmon/*\")\n    path gtf\n\n    output:\n    path \"*.tsv\"\n\n    script:                                                                    \n    \"\"\"\n    salmon_tx2gene.py \\\\\n        --gtf $gtf \\\\\n        --salmon salmon \\\\\n        --id $params.gtf_group_features \\\\\n        --extra $params.gtf_extra_attributes \\\\\n        -o salmon_tx2gene.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    salmon_tx2gene.py \\\\\n        --gtf $gtf \\\\\n        --salmon salmon \\\\\n        --id $params.gtf_group_features \\\\\n        --extra $params.gtf_extra_attributes \\\\\n        -o salmon_tx2gene.tsv\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$gtf\"",
            "label \"process_low\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SORTMERNA": {
        "name_process": "SORTMERNA",
        "string_process": "\nprocess SORTMERNA {\n    tag \"$meta.id\"\n    label \"process_high\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::sortmerna=4.2.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/sortmerna:4.2.0--0\"\n    } else {\n        container \"quay.io/biocontainers/sortmerna:4.2.0--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def Refs = \"\"\n    for (i=0; i<fasta.size(); i++) { Refs+= \" --ref ${fasta[i]}\" }\n    if (meta.single_end) {\n        \"\"\"\n        sortmerna \\\\\n            $Refs \\\\\n            --reads $reads \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            $options.args\n\n        gzip -f < non_rRNA_reads.fq > ${prefix}.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        sortmerna \\\\\n            $Refs \\\\\n            --reads ${reads[0]} \\\\\n            --reads ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            --paired_in \\\\\n            --out2 \\\\\n            $options.args\n\n        gzip -f < non_rRNA_reads_fwd.fq > ${prefix}_1.fastq.gz\n        gzip -f < non_rRNA_reads_rev.fq > ${prefix}_2.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//' > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 66,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def Refs = \"\"\n    for (i=0; i<fasta.size(); i++) { Refs+= \" --ref ${fasta[i]}\" }\n    if (meta.single_end) {\n        \"\"\"\n        sortmerna \\\\\n            $Refs \\\\\n            --reads $reads \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            $options.args\n\n        gzip -f < non_rRNA_reads.fq > ${prefix}.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        sortmerna \\\\\n            $Refs \\\\\n            --reads ${reads[0]} \\\\\n            --reads ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            --paired_in \\\\\n            --out2 \\\\\n            $options.args\n\n        gzip -f < non_rRNA_reads_fwd.fq > ${prefix}_1.fastq.gz\n        gzip -f < non_rRNA_reads_rev.fq > ${prefix}_2.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//' > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 41,
        "language_script": "bash",
        "tools": [
            "SortMeRna"
        ],
        "tools_url": [
            "https://bio.tools/sortmerna"
        ],
        "tools_dico": [
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_high\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::sortmerna=4.2.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/sortmerna:4.2.0--0\" } else { container \"quay.io/biocontainers/sortmerna:4.2.0--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UMITOOLS_DEDUP": {
        "name_process": "UMITOOLS_DEDUP",
        "string_process": "\nprocess UMITOOLS_DEDUP {\n    tag \"$meta.id\"\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\"\n    } else {\n        container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    umi_tools dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        --output-stats=$prefix \\\\\n        $options.args \\\\\n\n    umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    umi_tools dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        --output-stats=$prefix \\\\\n        $options.args \\\\\n\n    umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\" } else { container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_JUNCTIONSATURATION": {
        "name_process": "RSEQC_JUNCTIONSATURATION",
        "string_process": "\nprocess RSEQC_JUNCTIONSATURATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.pdf\"), emit: pdf\n    tuple val(meta), path(\"*.r\")  , emit: rscript\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    junction_saturation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $options.args\n\n    junction_saturation.py --version | sed -e \"s/junction_saturation.py //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    junction_saturation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $options.args\n\n    junction_saturation.py --version | sed -e \"s/junction_saturation.py //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SRA_RUNINFO_TO_FTP": {
        "name_process": "SRA_RUNINFO_TO_FTP",
        "string_process": "\nprocess SRA_RUNINFO_TO_FTP {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n    \n    errorStrategy 'ignore'\n\n    input:\n    path runinfo\n\n    output:\n    path \"*.tsv\"         , emit: tsv\n    path  \"*.version.txt\", emit: version\n\n    script:\n    \"\"\"\n    sra_runinfo_to_ftp.py \\\\\n        ${runinfo.join(',')} \\\\\n        ${runinfo.toString().tokenize(\".\")[0]}.runinfo_ftp.tsv\n\n    python --version | sed -e \"s/Python //g\" > python.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    sra_runinfo_to_ftp.py \\\\\n        ${runinfo.join(',')} \\\\\n        ${runinfo.toString().tokenize(\".\")[0]}.runinfo_ftp.tsv\n\n    python --version | sed -e \"s/Python //g\" > python.version.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "runinfo"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "\nprocess UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path archive\n\n    output:\n    path \"$untar\"       , emit: untar\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n    script:                                                                     \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n        \n    NROW=\\$(wc -l $samplesheet)\n    NROW=\\${NROW[0]}\n    awk -v nrow=\"\\$NROW\" -F\",\" 'BEGIN {OFS=\",\"} {if(NR==1) \\$(NF+1)=\"size\";else \\$(NF+1)=nrow-1; print}' $samplesheet > ${samplesheet}.temp\n    mv ${samplesheet}.temp $samplesheet\n    awk -v nrow=\"\\$NROW\" -F\",\" 'BEGIN {OFS=\",\"} {if(NR==1) \\$(NF+1)=\"size\";else \\$(NF+1)=nrow-1; print}' samplesheet.valid.csv > valid.temp\n    mv valid.temp samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n        \n    NROW=\\$(wc -l $samplesheet)\n    NROW=\\${NROW[0]}\n    awk -v nrow=\"\\$NROW\" -F\",\" 'BEGIN {OFS=\",\"} {if(NR==1) \\$(NF+1)=\"size\";else \\$(NF+1)=nrow-1; print}' $samplesheet > ${samplesheet}.temp\n    mv ${samplesheet}.temp $samplesheet\n    awk -v nrow=\"\\$NROW\" -F\",\" 'BEGIN {OFS=\",\"} {if(NR==1) \\$(NF+1)=\"size\";else \\$(NF+1)=nrow-1; print}' samplesheet.valid.csv > valid.temp\n    mv valid.temp samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PICARD_MARKDUPLICATES": {
        "name_process": "PICARD_MARKDUPLICATES",
        "string_process": "\nprocess PICARD_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::picard=2.23.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/picard:2.23.9--0\"\n    } else {\n        container \"quay.io/biocontainers/picard:2.23.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")        , emit: bam\n    tuple val(meta), path(\"*.metrics.txt\"), emit: metrics\n    path  \"*.version.txt\"                 , emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $options.args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.bam \\\\\n        METRICS_FILE=${prefix}.MarkDuplicates.metrics.txt\n\n    echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d: > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $options.args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.bam \\\\\n        METRICS_FILE=${prefix}.MarkDuplicates.metrics.txt\n\n    echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d: > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Picard",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::picard=2.23.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/picard:2.23.9--0\" } else { container \"quay.io/biocontainers/picard:2.23.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEM_CALCULATEEXPRESSION": {
        "name_process": "RSEM_CALCULATEEXPRESSION",
        "string_process": "\nprocess RSEM_CALCULATEEXPRESSION {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.genes.results\")   , emit: counts_gene\n    tuple val(meta), path(\"*.isoforms.results\"), emit: counts_transcript\n    tuple val(meta), path(\"*.stat\")            , emit: stat\n    tuple val(meta), path(\"*.log\")             , emit: logs\n    path  \"*.version.txt\"                      , emit: version\n\n    tuple val(meta), path(\"*.STAR.genome.bam\")       , optional:true, emit: bam_star\n    tuple val(meta), path(\"${prefix}.genome.bam\")    , optional:true, emit: bam_genome\n    tuple val(meta), path(\"${prefix}.transcript.bam\"), optional:true, emit: bam_transcript\n\n    script:\n    def software   = getSoftwareName(task.process)\n    prefix         = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--strandedness forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--strandedness reverse'\n    }\n    def paired_end = meta.single_end ? \"\" : \"--paired-end\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.grp\" | sed 's/.grp//'`\n    rsem-calculate-expression \\\\\n        --num-threads $task.cpus \\\\\n        --temporary-folder ./tmp/ \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $options.args \\\\\n        $reads \\\\\n        \\$INDEX \\\\\n        $prefix\n\n    rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def software   = getSoftwareName(task.process)\n    prefix         = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--strandedness forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--strandedness reverse'\n    }\n    def paired_end = meta.single_end ? \"\" : \"--paired-end\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.grp\" | sed 's/.grp//'`\n    rsem-calculate-expression \\\\\n        --num-threads $task.cpus \\\\\n        --temporary-folder ./tmp/ \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $options.args \\\\\n        $reads \\\\\n        \\$INDEX \\\\\n        $prefix\n\n    rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\" } else { container \"quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "QUALIMAP_RNASEQ": {
        "name_process": "QUALIMAP_RNASEQ",
        "string_process": "\nprocess QUALIMAP_RNASEQ {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1\"\n    } else {\n        container \"quay.io/biocontainers/qualimap:2.2.2d--1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"*.version.txt\"             , emit: version\n\n    script:\n    def software   = getSoftwareName(task.process)\n    prefix         = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    def memory     = task.memory.toGiga() + \"G\"\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $options.args \\\\\n        -bam $bam \\\\\n        -gtf $gtf \\\\\n        -p $strandedness \\\\\n        $paired_end \\\\\n        -outdir $prefix\n\n    echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def software   = getSoftwareName(task.process)\n    prefix         = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    def memory     = task.memory.toGiga() + \"G\"\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $options.args \\\\\n        -bam $bam \\\\\n        -gtf $gtf \\\\\n        -p $strandedness \\\\\n        $paired_end \\\\\n        -outdir $prefix\n\n    echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "QualiMap",
            "RNASEQR"
        ],
        "tools_url": [
            "https://bio.tools/qualimap",
            "https://bio.tools/rnaseqr"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            },
            {
                "name": "RNASEQR",
                "uri": "https://bio.tools/rnaseqr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "PCA plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R package for automated two-group RNA-Seq analysis workflow.\n\nThis R package is designed for case-control RNA-Seq analysis (two-group). There are six steps: \"RNASeqRParam S4 Object Creation\", \"Environment Setup\", \"Quality Assessment\", \"Reads Alignment & Quantification\", \"Gene-level Differential Analyses\" and \"Functional Analyses\". Each step corresponds to a function in this package. After running functions in order, a basic RNASeq analysis would be done easily.",
                "homepage": "https://bioconductor.org/packages/release/bioc/html/RNASeqR.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1\" } else { container \"quay.io/biocontainers/qualimap:2.2.2d--1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HISAT2_EXTRACTSPLICESITES": {
        "name_process": "HISAT2_EXTRACTSPLICESITES",
        "string_process": "\nprocess HISAT2_EXTRACTSPLICESITES {\n    tag \"$gtf\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::hisat2=2.2.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hisat2:2.2.0--py37hfa133b6_4\"\n    } else {\n        container \"quay.io/biocontainers/hisat2:2.2.0--py37hfa133b6_4\"\n    }\n\n    input:\n    path gtf\n\n    output:\n    path \"*.splice_sites.txt\", emit: txt\n    path \"*.version.txt\"     , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.splice_sites.txt\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.splice_sites.txt\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$gtf\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::hisat2=2.2.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hisat2:2.2.0--py37hfa133b6_4\" } else { container \"quay.io/biocontainers/hisat2:2.2.0--py37hfa133b6_4\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GFFREAD": {
        "name_process": "GFFREAD",
        "string_process": "\nprocess GFFREAD {\n    tag \"$gff\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0\"\n    } else {\n        container \"quay.io/biocontainers/gffread:0.12.1--h8b12597_0\"\n    }\n\n    input:\n    path gff\n\n    output:\n    path \"*.gtf\"        , emit: gtf\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    gffread $gff $options.args -o ${gff.baseName}.gtf\n    echo \\$(gffread --version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    gffread $gff $options.args -o ${gff.baseName}.gtf\n    echo \\$(gffread --version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$gff\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0\" } else { container \"quay.io/biocontainers/gffread:0.12.1--h8b12597_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HISAT2_BUILD": {
        "name_process": "HISAT2_BUILD",
        "string_process": "\nprocess HISAT2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n    label 'process_high_memory'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::hisat2=2.2.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hisat2:2.2.0--py37hfa133b6_4\"\n    } else {\n        container \"quay.io/biocontainers/hisat2:2.2.0--py37hfa133b6_4\"\n    }\n\n    input:\n    path fasta\n    path gtf\n    path splicesites\n\n    output:\n    path \"hisat2\"       , emit: index\n    path \"*.version.txt\", emit: version\n\n    script:\n    def avail_mem = 0\n    if (!task.memory) {\n        log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n    } else {\n        log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n        avail_mem = task.memory.toGiga()\n    }\n\n    def ss = ''\n    def exon = ''\n    def extract_exons = ''\n    def hisat2_build_memory = params.hisat2_build_memory ? (params.hisat2_build_memory as nextflow.util.MemoryUnit).toGiga() : 0\n    if (avail_mem >= hisat2_build_memory) {\n        log.info \"[HISAT2 index build] At least ${hisat2_build_memory} GB available, so using splice sites and exons to build HISAT2 index\"\n        extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.exons.txt\"\n        ss = \"--ss $splicesites\"\n        exon = \"--exon ${gtf.baseName}.exons.txt\"\n    } else {\n        log.info \"[HISAT2 index build] Less than ${hisat2_build_memory} GB available, so NOT using splice sites and exons to build HISAT2 index.\"\n        log.info \"[HISAT2 index build] Use --hisat2_build_memory [small number] to skip this check.\"\n    }\n\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    mkdir hisat2\n    $extract_exons\n    hisat2-build \\\\\n        -p $task.cpus \\\\\n        $ss \\\\\n        $exon \\\\\n        $options.args \\\\\n        $fasta \\\\\n        hisat2/${fasta.baseName}\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def avail_mem = 0\n    if (!task.memory) {\n        log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n    } else {\n        log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n        avail_mem = task.memory.toGiga()\n    }\n\n    def ss = ''\n    def exon = ''\n    def extract_exons = ''\n    def hisat2_build_memory = params.hisat2_build_memory ? (params.hisat2_build_memory as nextflow.util.MemoryUnit).toGiga() : 0\n    if (avail_mem >= hisat2_build_memory) {\n        log.info \"[HISAT2 index build] At least ${hisat2_build_memory} GB available, so using splice sites and exons to build HISAT2 index\"\n        extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.exons.txt\"\n        ss = \"--ss $splicesites\"\n        exon = \"--exon ${gtf.baseName}.exons.txt\"\n    } else {\n        log.info \"[HISAT2 index build] Less than ${hisat2_build_memory} GB available, so NOT using splice sites and exons to build HISAT2 index.\"\n        log.info \"[HISAT2 index build] Use --hisat2_build_memory [small number] to skip this check.\"\n    }\n\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    mkdir hisat2\n    $extract_exons\n    hisat2-build \\\\\n        -p $task.cpus \\\\\n        $ss \\\\\n        $exon \\\\\n        $options.args \\\\\n        $fasta \\\\\n        hisat2/${fasta.baseName}\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "SSA",
            "Assexon"
        ],
        "tools_url": [
            "https://bio.tools/ssa",
            "https://bio.tools/Assexon"
        ],
        "tools_dico": [
            {
                "name": "SSA",
                "uri": "https://bio.tools/ssa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0240",
                                    "term": "Sequence motif comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SSA (Signal Search Analysis) is a software package for the analysis of nucleic acid sequence motifs that are postionally correlated with a functional site (e.g a transcription or translation initiation site).",
                "homepage": "http://ccg.vital-it.ch/ssa/"
            },
            {
                "name": "Assexon",
                "uri": "https://bio.tools/Assexon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assembling Exon Using Gene Capture Data | Exon capture across species has been one of the most broadly applied approaches to acquire multi-locus data in phylogenomic studies of non-model organisms. Methods for assembling loci from short-read sequences (eg, Illumina platforms) that rely on mapping reads to a reference genome may not be suitable for studies comprising species across a wide phylogenetic spectrum; thus, de novo assembling methods are more generally applied. Current approaches for assembling targeted exons from short reads are not particularly optimized as they cannot (1) assemble loci with low read depth, (2) handle large files efficiently, and (3) reliably address issues with paralogs. Thus, we present Assexon: a streamlined pipeline that de novo assembles targeted exons and their flanking sequences from raw reads",
                "homepage": "https://github.com/yhadevol/Assexon"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "splicesites"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "label 'process_high_memory'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::hisat2=2.2.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hisat2:2.2.0--py37hfa133b6_4\" } else { container \"quay.io/biocontainers/hisat2:2.2.0--py37hfa133b6_4\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC_CUSTOM_FAIL_MAPPED": {
        "name_process": "MULTIQC_CUSTOM_FAIL_MAPPED",
        "string_process": "\nprocess MULTIQC_CUSTOM_FAIL_MAPPED {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    val fail_mapped\n\n    output:\n    path \"*.tsv\"\n\n    script:\n    if (fail_mapped.size() > 0) {\n        \"\"\"\n        echo \"Sample\\tSTAR uniquely mapped reads (%)\" > fail_mapped_samples_mqc.tsv\n        echo \"${fail_mapped.join('\\n')}\" >> fail_mapped_samples_mqc.tsv\n        \"\"\"\n    } else {\n        \"\"\"\n        touch fail_mapped_samples_mqc.tsv\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 29,
        "string_script": "    if (fail_mapped.size() > 0) {\n        \"\"\"\n        echo \"Sample\\tSTAR uniquely mapped reads (%)\" > fail_mapped_samples_mqc.tsv\n        echo \"${fail_mapped.join('\\n')}\" >> fail_mapped_samples_mqc.tsv\n        \"\"\"\n    } else {\n        \"\"\"\n        touch fail_mapped_samples_mqc.tsv\n        \"\"\"\n    }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fail_mapped"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "\nprocess SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bai\"), optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\"), optional:true, emit: csi\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools index $options.args $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools index $options.args $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEM_PREPAREREFERENCE": {
        "name_process": "RSEM_PREPAREREFERENCE",
        "string_process": "\nprocess RSEM_PREPAREREFERENCE {\n    tag \"$fasta\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\"\n    }\n\n    input:\n    path fasta, stageAs: \"rsem/*\"\n    path gtf\n\n    output:\n    path \"rsem\"                , emit: index\n    path \"rsem/*transcripts.fa\", emit: transcript_fasta\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def args     = options.args.tokenize()\n    if (args.contains('--star')) {\n        args.removeIf { it.contains('--star') }\n        def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir rsem/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $options.args2\n\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            ${args.join(' ')} \\\\\n            $fasta \\\\\n            rsem/genome\n\n        rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            $options.args \\\\\n            $fasta \\\\\n            rsem/genome\n\n        rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 60,
        "string_script": "    def software = getSoftwareName(task.process)\n    def args     = options.args.tokenize()\n    if (args.contains('--star')) {\n        args.removeIf { it.contains('--star') }\n        def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir rsem/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $options.args2\n\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            ${args.join(' ')} \\\\\n            $fasta \\\\\n            rsem/genome\n\n        rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            $options.args \\\\\n            $fasta \\\\\n            rsem/genome\n\n        rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "STAR",
            "Mgenome"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/mgenome"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\" } else { container \"quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode,\n        saveAs: { filename ->\n                      if (filename.indexOf('.csv') > 0) filename\n                      else null\n        }\n\n    output:\n    file 'software_versions_mqc.yaml' into ch_software_versions_yaml\n    file 'software_versions.csv'\n\n    script:\n                                                                     \n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode , saveAs: { filename -> if (filename.indexOf('.csv') > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$name\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/fastqc\", mode: params.publish_dir_mode,\n        saveAs: { filename ->\n                      filename.indexOf('.zip') > 0 ? \"zips/$filename\" : \"$filename\"\n        }\n\n    input:\n    set val(name), file(reads) from ch_read_files_fastqc\n\n    output:\n    file '*_fastqc.{zip,html}' into ch_fastqc_results\n\n    script:\n    \"\"\"\n    fastqc --quiet --threads $task.cpus $reads\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    fastqc --quiet --threads $task.cpus $reads\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_read_files_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$name\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/fastqc\", mode: params.publish_dir_mode , saveAs: { filename -> filename.indexOf('.zip') > 0 ? \"zips/$filename\" : \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/MultiQC\", mode: params.publish_dir_mode\n\n    input:\n    file (multiqc_config) from ch_multiqc_config\n    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])\n                                                                                  \n    file ('fastqc/*') from ch_fastqc_results.collect().ifEmpty([])\n    file ('software_versions/*') from ch_software_versions_yaml.collect()\n    file workflow_summary from ch_workflow_summary.collectFile(name: \"workflow_summary_mqc.yaml\")\n\n    output:\n    file \"*multiqc_report.html\" into ch_multiqc_report\n    file \"*_data\"\n    file \"multiqc_plots\"\n\n    script:\n    rtitle = ''\n    rfilename = ''\n    if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {\n        rtitle = \"--title \\\"${workflow.runName}\\\"\"\n        rfilename = \"--filename \" + workflow.runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\"\n    }\n    custom_config_file = params.multiqc_config ? \"--config $mqc_custom_config\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename $custom_config_file .\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    rtitle = ''\n    rfilename = ''\n    if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {\n        rtitle = \"--title \\\"${workflow.runName}\\\"\"\n        rfilename = \"--filename \" + workflow.runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\"\n    }\n    custom_config_file = params.multiqc_config ? \"--config $mqc_custom_config\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename $custom_config_file .\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "ch_multiqc_custom_config",
            "ch_fastqc_results",
            "ch_software_versions_yaml",
            "ch_workflow_summary"
        ],
        "nb_inputs": 5,
        "outputs": [
            "ch_multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode\n\n    input:\n    file output_docs from ch_output_docs\n    file images from ch_output_docs_images\n\n    output:\n    file 'results_description.html'\n\n    script:\n    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs",
            "ch_output_docs_images"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "GET_CHROM_SIZES": {
        "name_process": "GET_CHROM_SIZES",
        "string_process": "\nprocess GET_CHROM_SIZES {\n    tag \"$fasta\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    path fasta\n\n    output:\n    path '*.sizes'      , emit: sizes\n    path '*.fai'        , emit: fai\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = 'samtools'\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = 'samtools'\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$fasta\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "STAR_ALIGN": {
        "name_process": "STAR_ALIGN",
        "string_process": "\nprocess STAR_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n                                                         \n    conda (params.enable_conda ? 'bioconda::star=2.6.1d' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/star:2.6.1d--0'\n    } else {\n        container 'quay.io/biocontainers/star:2.6.1d--0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n\n    output:\n    tuple val(meta), path('*d.out.bam')       , emit: bam\n    tuple val(meta), path('*Log.final.out')   , emit: log_final\n    tuple val(meta), path('*Log.out')         , emit: log_out\n    tuple val(meta), path('*Log.progress.out'), emit: log_progress\n    path  '*.version.txt'                     , emit: version\n\n    tuple val(meta), path('*sortedByCoord.out.bam')  , optional:true, emit: bam_sorted\n    tuple val(meta), path('*toTranscriptome.out.bam'), optional:true, emit: bam_transcript\n    tuple val(meta), path('*Aligned.unsort.out.bam') , optional:true, emit: bam_unsorted\n    tuple val(meta), path('*fastq.gz')               , optional:true, emit: fastq\n    tuple val(meta), path('*.tab')                   , optional:true, emit: tab\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def ignore_gtf = params.star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_center = params.seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$params.seq_center' 'SM:$prefix'\" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix'\"\n    def out_sam_type = (options.args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (options.args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $options.args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def ignore_gtf = params.star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_center = params.seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$params.seq_center' 'SM:$prefix'\" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix'\"\n    def out_sam_type = (options.args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (options.args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $options.args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::star=2.6.1d' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/star:2.6.1d--0' } else { container 'quay.io/biocontainers/star:2.6.1d--0' }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_JUNCTIONANNOTATION": {
        "name_process": "RSEQC_JUNCTIONANNOTATION",
        "string_process": "\nprocess RSEQC_JUNCTIONANNOTATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.junction.bed\"), emit: bed\n    tuple val(meta), path(\"*.Interact.bed\"), emit: interact_bed\n    tuple val(meta), path(\"*.xls\")         , emit: xls\n    tuple val(meta), path(\"*junction.pdf\") , emit: pdf\n    tuple val(meta), path(\"*events.pdf\")   , emit: events_pdf\n    tuple val(meta), path(\"*.r\")           , emit: rscript\n    tuple val(meta), path(\"*.log\")         , emit: log\n    path  \"*.version.txt\"                  , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    junction_annotation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $options.args \\\\\n        2> ${prefix}.junction_annotation.log\n\n    junction_annotation.py --version | sed -e \"s/junction_annotation.py //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    junction_annotation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $options.args \\\\\n        2> ${prefix}.junction_annotation.log\n\n    junction_annotation.py --version | sed -e \"s/junction_annotation.py //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_INDEX": {
        "name_process": "SALMON_INDEX",
        "string_process": "\nprocess SALMON_INDEX {\n    tag \"$transcript_fasta\"\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::salmon=1.4.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/salmon:1.4.0--hf69c8f4_0\"\n    } else {\n        container \"quay.io/biocontainers/salmon:1.4.0--hf69c8f4_0\"\n    }\n\n    input:\n    path genome_fasta\n    path transcript_fasta\n\n    output:\n    path \"salmon\"       , emit: index\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    def get_decoy_ids = \"grep '^>' $genome_fasta | cut -d ' ' -f 1 > decoys.txt\"\n    def gentrome      = \"gentrome.fa\"\n    if (genome_fasta.endsWith('.gz')) {\n        get_decoy_ids = \"grep '^>' <(gunzip -c $genome_fasta) | cut -d ' ' -f 1 > decoys.txt\"\n        gentrome      = \"gentrome.fa.gz\"\n    }\n    \"\"\"\n    $get_decoy_ids\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat $transcript_fasta $genome_fasta > $gentrome\n\n    salmon \\\\\n        index \\\\\n        --threads $task.cpus \\\\\n        -t $gentrome \\\\\n        -d decoys.txt \\\\\n        $options.args \\\\\n        -i salmon\n    salmon --version | sed -e \"s/salmon //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def software      = getSoftwareName(task.process)\n    def get_decoy_ids = \"grep '^>' $genome_fasta | cut -d ' ' -f 1 > decoys.txt\"\n    def gentrome      = \"gentrome.fa\"\n    if (genome_fasta.endsWith('.gz')) {\n        get_decoy_ids = \"grep '^>' <(gunzip -c $genome_fasta) | cut -d ' ' -f 1 > decoys.txt\"\n        gentrome      = \"gentrome.fa.gz\"\n    }\n    \"\"\"\n    $get_decoy_ids\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat $transcript_fasta $genome_fasta > $gentrome\n\n    salmon \\\\\n        index \\\\\n        --threads $task.cpus \\\\\n        -t $gentrome \\\\\n        -d decoys.txt \\\\\n        $options.args \\\\\n        -i salmon\n    salmon --version | sed -e \"s/salmon //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Salmon",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/salmon",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "genome_fasta",
            "transcript_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$transcript_fasta\"",
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::salmon=1.4.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/salmon:1.4.0--hf69c8f4_0\" } else { container \"quay.io/biocontainers/salmon:1.4.0--hf69c8f4_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_INNERDISTANCE": {
        "name_process": "RSEQC_INNERDISTANCE",
        "string_process": "\nprocess RSEQC_INNERDISTANCE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*distance.txt\"), optional:true, emit: distance\n    tuple val(meta), path(\"*freq.txt\")    , optional:true, emit: freq\n    tuple val(meta), path(\"*mean.txt\")    , optional:true, emit: mean\n    tuple val(meta), path(\"*.pdf\")        , optional:true, emit: pdf\n    tuple val(meta), path(\"*.r\")          , optional:true, emit: rscript\n    path  \"*.version.txt\"                 , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (!meta.single_end) {\n        \"\"\"\n        inner_distance.py \\\\\n            -i $bam \\\\\n            -r $bed \\\\\n            -o $prefix \\\\\n            $options.args \\\\\n            > stdout.txt\n        head -n 2 stdout.txt > ${prefix}.inner_distance_mean.txt\n\n        inner_distance.py --version | sed -e \"s/inner_distance.py //g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        inner_distance.py --version | sed -e \"s/inner_distance.py //g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 46,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (!meta.single_end) {\n        \"\"\"\n        inner_distance.py \\\\\n            -i $bam \\\\\n            -r $bed \\\\\n            -o $prefix \\\\\n            $options.args \\\\\n            > stdout.txt\n        head -n 2 stdout.txt > ${prefix}.inner_distance_mean.txt\n\n        inner_distance.py --version | sed -e \"s/inner_distance.py //g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        inner_distance.py --version | sed -e \"s/inner_distance.py //g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_MERGE_COUNTS": {
        "name_process": "SALMON_MERGE_COUNTS",
        "string_process": "\nprocess SALMON_MERGE_COUNTS {\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path ('genes_counts/*')\n    path ('genes_tpm/*')\n    path ('genes_counts_length_scaled/*')\n    path ('genes_counts_scaled/*')\n    path ('isoforms_counts/*')\n    path ('isoforms_tpm/*')\n\n    output:\n    path \"salmon.merged.gene_counts.tsv\"              , emit: counts_gene\n    path \"salmon.merged.gene_tpm.tsv\"                 , emit: tpm_gene\n    path \"salmon.merged.gene_counts_length_scaled.tsv\", emit: counts_gene_length_scaled\n    path \"salmon.merged.gene_counts_scaled.tsv\"       , emit: counts_gene_scaled\n    path \"salmon.merged.transcript_counts.tsv\"        , emit: counts_transcript\n    path \"salmon.merged.transcript_tpm.tsv\"           , emit: tpm_transcript\n\n    script:\n    \"\"\"\n    mkdir -p tmp/genes_counts\n    echo \"${params.gtf_group_features}\" > gene_ids.txt\n    cut -f 1 `ls ./genes_counts/* | head -n 1` | tail -n +2 >> gene_ids.txt\n    for fileid in `ls ./genes_counts/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_counts/\\${filename}\n    done\n\n    mkdir -p tmp/genes_tpm\n    for fileid in `ls ./genes_tpm/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_tpm/\\${filename}\n    done\n\n    mkdir -p tmp/genes_counts_length_scaled\n    for fileid in `ls ./genes_counts_length_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_counts_length_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/genes_tpm_length_scaled\n    for fileid in `ls ./genes_tpm_length_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_tpm_length_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/genes_counts_scaled\n    for fileid in `ls ./genes_counts_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_counts_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/genes_tpm_scaled\n    for fileid in `ls ./genes_tpm_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_tpm_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/isoforms_counts\n    echo \"transcript_id\" > transcript_ids.txt\n    cut -f 1 `ls ./isoforms_counts/* | head -n 1` | tail -n +2 >> transcript_ids.txt\n    for fileid in `ls ./isoforms_counts/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/isoforms_counts/\\${filename}\n    done\n\n    mkdir -p tmp/isoforms_tpm\n    for fileid in `ls ./isoforms_tpm/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/isoforms_tpm/\\${filename}\n    done\n\n    paste gene_ids.txt tmp/genes_counts/* > salmon.merged.gene_counts.tsv\n    paste gene_ids.txt tmp/genes_tpm/* > salmon.merged.gene_tpm.tsv\n    paste gene_ids.txt tmp/genes_counts_length_scaled/* > salmon.merged.gene_counts_length_scaled.tsv\n    paste gene_ids.txt tmp/genes_counts_scaled/* > salmon.merged.gene_counts_scaled.tsv\n    paste transcript_ids.txt tmp/isoforms_counts/* > salmon.merged.transcript_counts.tsv\n    paste transcript_ids.txt tmp/isoforms_tpm/* > salmon.merged.transcript_tpm.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 90,
        "string_script": "    \"\"\"\n    mkdir -p tmp/genes_counts\n    echo \"${params.gtf_group_features}\" > gene_ids.txt\n    cut -f 1 `ls ./genes_counts/* | head -n 1` | tail -n +2 >> gene_ids.txt\n    for fileid in `ls ./genes_counts/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_counts/\\${filename}\n    done\n\n    mkdir -p tmp/genes_tpm\n    for fileid in `ls ./genes_tpm/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_tpm/\\${filename}\n    done\n\n    mkdir -p tmp/genes_counts_length_scaled\n    for fileid in `ls ./genes_counts_length_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_counts_length_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/genes_tpm_length_scaled\n    for fileid in `ls ./genes_tpm_length_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_tpm_length_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/genes_counts_scaled\n    for fileid in `ls ./genes_counts_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_counts_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/genes_tpm_scaled\n    for fileid in `ls ./genes_tpm_scaled/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/genes_tpm_scaled/\\${filename}\n    done\n\n    mkdir -p tmp/isoforms_counts\n    echo \"transcript_id\" > transcript_ids.txt\n    cut -f 1 `ls ./isoforms_counts/* | head -n 1` | tail -n +2 >> transcript_ids.txt\n    for fileid in `ls ./isoforms_counts/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/isoforms_counts/\\${filename}\n    done\n\n    mkdir -p tmp/isoforms_tpm\n    for fileid in `ls ./isoforms_tpm/*`; do\n        filename=`basename \\$fileid`\n        cut -f 2 \\${fileid} > tmp/isoforms_tpm/\\${filename}\n    done\n\n    paste gene_ids.txt tmp/genes_counts/* > salmon.merged.gene_counts.tsv\n    paste gene_ids.txt tmp/genes_tpm/* > salmon.merged.gene_tpm.tsv\n    paste gene_ids.txt tmp/genes_counts_length_scaled/* > salmon.merged.gene_counts_length_scaled.tsv\n    paste gene_ids.txt tmp/genes_counts_scaled/* > salmon.merged.gene_counts_scaled.tsv\n    paste transcript_ids.txt tmp/isoforms_counts/* > salmon.merged.transcript_counts.tsv\n    paste transcript_ids.txt tmp/isoforms_tpm/* > salmon.merged.transcript_tpm.tsv\n    \"\"\"",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "\nprocess CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n    \n    afterScript \"if [ ${params.keep_fastq} == 'false' ];\\\n                 then \\\n                    ls -l *.fastq.gz & \\\n                    ls -l *.fastq.gz | \\\n                    grep -- '->' | \\\n                    sed -e's/.*-> //' | \\\n                    xargs rm;\\\n                 fi;\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 49,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }",
            "afterScript \"if [ ${params.keep_fastq} == 'false' ]; then ls -l *.fastq.gz & ls -l *.fastq.gz | grep -- '->' | sed -e's/.*-> //' | xargs rm; fi;\""
        ],
        "when": "",
        "stub": ""
    },
    "STAR_GENOMEGENERATE": {
        "name_process": "STAR_GENOMEGENERATE",
        "string_process": "\nprocess STAR_GENOMEGENERATE {\n    tag \"$fasta\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }\n\n                                                         \n    conda (params.enable_conda ? \"bioconda::star=2.6.1d bioconda::samtools=1.10 conda-forge::gawk=5.1.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0\"\n    }\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"star\"         , emit: index\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    def args     = options.args.tokenize()\n    if (args.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 60,
        "string_script": "    def software = getSoftwareName(task.process)\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    def args     = options.args.tokenize()\n    if (args.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::star=2.6.1d bioconda::samtools=1.10 conda-forge::gawk=5.1.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0\" } else { container \"quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_QUANT": {
        "name_process": "SALMON_QUANT",
        "string_process": "\nprocess SALMON_QUANT {\n    tag \"$meta.id\"\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::salmon=1.4.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/salmon:1.4.0--hf69c8f4_0\"\n    } else {\n        container \"quay.io/biocontainers/salmon:1.4.0--hf69c8f4_0\"\n    }\n    \n    afterScript \"if [ ${params.keep_fastq} == 'false' ];\\\n                 then \\\n                    ls -l *.fastq.gz & \\\n                    ls -l *.fastq.gz | \\\n                    grep -- '->' | \\\n                    sed -e's/.*-> //' | \\\n                    xargs rm;\\\n                 fi;\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n    path  transcript_fasta\n    val   alignment_mode\n    val   lib_type\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"*.version.txt\"             , emit: version\n        \n    script:\n    def software    = getSoftwareName(task.process)\n    prefix          = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def reference   = \"--index $index\"\n    def input_reads = meta.single_end ? \"-r $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    if (alignment_mode) {\n        reference   = \"-t $transcript_fasta\"\n        input_reads = \"-a $reads\"\n    }\n\n    def strandedness_opts = [\n        'A', 'U', 'SF', 'SR',\n        'IS', 'IU' , 'ISF', 'ISR',\n        'OS', 'OU' , 'OSF', 'OSR',\n        'MS', 'MU' , 'MSF', 'MSR'\n    ]\n    def strandedness =  'A'\n    if (lib_type) {\n        if (strandedness_opts.contains(lib_type)) {\n            strandedness = lib_type\n        } else {\n            log.info \"[Salmon Quant] Invalid library type specified '--libType=${lib_type}', defaulting to auto-detection with '--libType=A'.\"\n        }\n    } else {\n        strandedness = meta.single_end ? 'U' : 'IU'\n        if (meta.strandedness == 'forward') {\n            strandedness = meta.single_end ? 'SF' : 'ISF'\n        } else if (meta.strandedness == 'reverse') {\n            strandedness = meta.single_end ? 'SR' : 'ISR'\n        }\n    }\n    \"\"\"\n    salmon quant \\\\\n        --geneMap $gtf \\\\\n        --threads $task.cpus \\\\\n        --libType=$strandedness \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $options.args \\\\\n        -o $prefix\n\n    salmon --version | sed -e \"s/salmon //g\" > ${software}.version.txt\n    \"\"\"\n    \n}",
        "nb_lignes_process": 80,
        "string_script": "    def software    = getSoftwareName(task.process)\n    prefix          = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def reference   = \"--index $index\"\n    def input_reads = meta.single_end ? \"-r $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    if (alignment_mode) {\n        reference   = \"-t $transcript_fasta\"\n        input_reads = \"-a $reads\"\n    }\n\n    def strandedness_opts = [\n        'A', 'U', 'SF', 'SR',\n        'IS', 'IU' , 'ISF', 'ISR',\n        'OS', 'OU' , 'OSF', 'OSR',\n        'MS', 'MU' , 'MSF', 'MSR'\n    ]\n    def strandedness =  'A'\n    if (lib_type) {\n        if (strandedness_opts.contains(lib_type)) {\n            strandedness = lib_type\n        } else {\n            log.info \"[Salmon Quant] Invalid library type specified '--libType=${lib_type}', defaulting to auto-detection with '--libType=A'.\"\n        }\n    } else {\n        strandedness = meta.single_end ? 'U' : 'IU'\n        if (meta.strandedness == 'forward') {\n            strandedness = meta.single_end ? 'SF' : 'ISF'\n        } else if (meta.strandedness == 'reverse') {\n            strandedness = meta.single_end ? 'SR' : 'ISR'\n        }\n    }\n    \"\"\"\n    salmon quant \\\\\n        --geneMap $gtf \\\\\n        --threads $task.cpus \\\\\n        --libType=$strandedness \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $options.args \\\\\n        -o $prefix\n\n    salmon --version | sed -e \"s/salmon //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [
            "AVA,Dx",
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/AVADx",
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "AVA,Dx",
                "uri": "https://bio.tools/AVADx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Identifying Crohn's disease signal from variome analysis | prediction of individual predisposition to disease x through variation analysis | After years of concentrated research efforts, the exact cause of Crohn\u2019s disease (CD) remains unknown",
                "homepage": "https://bromberglab.org/project/avadx/"
            },
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf",
            "transcript_fasta",
            "alignment_mode",
            "lib_type"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::salmon=1.4.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/salmon:1.4.0--hf69c8f4_0\" } else { container \"quay.io/biocontainers/salmon:1.4.0--hf69c8f4_0\" }",
            "afterScript \"if [ ${params.keep_fastq} == 'false' ]; then ls -l *.fastq.gz & ls -l *.fastq.gz | grep -- '->' | sed -e's/.*-> //' | xargs rm; fi;\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_MERGE_SAMPLESHEET": {
        "name_process": "SRA_MERGE_SAMPLESHEET",
        "string_process": "\nprocess SRA_MERGE_SAMPLESHEET {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path ('samplesheets/*')\n    path ('mappings/*')\n\n    output:\n    path \"samplesheet.csv\", emit: samplesheet\n    path \"id_mappings.csv\"   , emit: mappings\n\n    script:\n    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    head -n 1 `ls ./mappings/* | head -n 1` > id_mappings.csv\n    for fileid in `ls ./mappings/*`; do\n        awk 'NR>1' \\$fileid >> id_mappings.csv\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    head -n 1 `ls ./mappings/* | head -n 1` > id_mappings.csv\n    for fileid in `ls ./mappings/*`; do\n        awk 'NR>1' \\$fileid >> id_mappings.csv\n    done\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UCSC_BEDCLIP": {
        "name_process": "UCSC_BEDCLIP",
        "string_process": "\nprocess UCSC_BEDCLIP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedclip=377\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/ucsc-bedclip:377--h0b8a92a_2\"\n    } else {\n        container \"quay.io/biocontainers/ucsc-bedclip:377--h0b8a92a_2\"\n    }\n\n    input:\n    tuple val(meta), path(bedgraph)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bedGraph\"), emit: bedgraph\n    path \"*.version.txt\"               , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bedClip \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bedGraph\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bedClip \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bedGraph\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bedgraph",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedclip=377\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/ucsc-bedclip:377--h0b8a92a_2\" } else { container \"quay.io/biocontainers/ucsc-bedclip:377--h0b8a92a_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SRA_FASTQ_FTP": {
        "name_process": "SRA_FASTQ_FTP",
        "string_process": "\nprocess SRA_FASTQ_FTP {\n    tag \"$experiment\"\n    label 'process_medium'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[\"id\":experiment], publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path runinfo\n\n    output:\n    path \"${experiment}_samplesheet.csv\", emit: samplesheet\n                                                   \n\n    shell:\n    experiment = \"${runinfo.getSimpleName()}\"\n    '''\n    single_end=$(awk -F \"\\\\t\" '$2 !~/.*_1\\\\.fastq\\\\.gz$/ {if(NR>1) print $2}' !{runinfo})\n    paired_end=$(awk -F \"\\\\t\" '$2 ~/.*_1\\\\.fastq\\\\.gz$/ {if(NR>1)print $2}' !{runinfo})\n\n    cp !{runinfo} samplesheet.tsv\n\n    for ftp in $paired_end\n    do\n    id=$(echo $ftp | sed 's/.*\\\\/\\\\(.*\\\\)\\\\/.*\\\\.fastq\\\\.gz/\\\\1/')\n    ftp2=$(echo $ftp | sed s/_1/_2/)\n    wget \"ftp://$ftp\" -O $id\"_1.fastq.gz\"\n    wget \"ftp://$(echo $ftp | sed s/_1/_2/)\" -O $id\"_2.fastq.gz\"\n    sed -i 0,/_T[0-9]*/{s/_T[0-9]*/_$id/} samplesheet.tsv\n    sed -i \"s~$ftp~$(readlink -f $id'_1.fastq.gz')~1\" samplesheet.tsv\n    sed -i \"s~$ftp2~$(readlink -f $id'_2.fastq.gz')~1\" samplesheet.tsv\n    done\n\n    for ftp in $single_end\n    do\n    id=$(echo $ftp | sed 's/.*\\\\/\\\\(.*\\\\)\\\\/.*\\\\.fastq\\\\.gz/\\\\1/')\n    wget \"ftp://$ftp\" -O $id\".fastq.gz\"\n    sed -i 0,/_T[0-9]*/{s/_T[0-9]*/_$id/} samplesheet.tsv\n    sed -i \"s~$ftp~$(readlink -f $id'.fastq.gz')~1\" samplesheet.tsv\n    done\n    \n    echo \"samplesheet generated\"\n    cat samplesheet.tsv\n    \n    awk -F\"\\\\t\" 'BEGIN {OFS=\",\"} {if(NR==1) print \"sample\",$2,$3,\"strandedness\",$1;else print \"!{experiment}\",$2,$3,\"unstranded\",$1}' samplesheet.tsv > !{experiment}_samplesheet.csv\n    \n    echo \"final samplesheet\"\n    cat !{experiment}_samplesheet.csv\n    '''\n\n      \n           \n                          \n        \"\"\"\n        bash -c 'wget $options.args -L ftp://${fastq[0]} -O ${meta.id}.fastq.gz';\n\n        echo \"${meta.md5_1} ${meta.id}.fastq.gz\" > ${meta.id}.fastq.gz.md5\n        md5sum -c ${meta.id}.fastq.gz.md5\n        \"\" \n            \n        \"\"\"\n        bash -c 'wget $options.args -L ftp://${fastq[0]} -O ${meta.id}_1.fastq.gz';\n\n        echo \"${meta.md5_1} ${meta.id}_1.fastq.gz\" > ${meta.id}_1.fastq.gz.md5\n        md5sum -c ${meta.id}_1.fastq.gz.md5\n\n        bash -c 'wget $options.args -L ftp://${fastq[1]} -O ${meta.id}_2.fastq.gz';\n\n        echo \"${meta.md5_2} ${meta.id}_2.fastq.gz\" > ${meta.id}_2.fastq.gz.md5\n        md5sum -c ${meta.id}_2.fastq.gz.md5\n        \"\" \n     \n      \n}",
        "nb_lignes_process": 81,
        "string_script": "    experiment = \"${runinfo.getSimpleName()}\"\n    '''\n    single_end=$(awk -F \"\\\\t\" '$2 !~/.*_1\\\\.fastq\\\\.gz$/ {if(NR>1) print $2}' !{runinfo})\n    paired_end=$(awk -F \"\\\\t\" '$2 ~/.*_1\\\\.fastq\\\\.gz$/ {if(NR>1)print $2}' !{runinfo})\n\n    cp !{runinfo} samplesheet.tsv\n\n    for ftp in $paired_end\n    do\n    id=$(echo $ftp | sed 's/.*\\\\/\\\\(.*\\\\)\\\\/.*\\\\.fastq\\\\.gz/\\\\1/')\n    ftp2=$(echo $ftp | sed s/_1/_2/)\n    wget \"ftp://$ftp\" -O $id\"_1.fastq.gz\"\n    wget \"ftp://$(echo $ftp | sed s/_1/_2/)\" -O $id\"_2.fastq.gz\"\n    sed -i 0,/_T[0-9]*/{s/_T[0-9]*/_$id/} samplesheet.tsv\n    sed -i \"s~$ftp~$(readlink -f $id'_1.fastq.gz')~1\" samplesheet.tsv\n    sed -i \"s~$ftp2~$(readlink -f $id'_2.fastq.gz')~1\" samplesheet.tsv\n    done\n\n    for ftp in $single_end\n    do\n    id=$(echo $ftp | sed 's/.*\\\\/\\\\(.*\\\\)\\\\/.*\\\\.fastq\\\\.gz/\\\\1/')\n    wget \"ftp://$ftp\" -O $id\".fastq.gz\"\n    sed -i 0,/_T[0-9]*/{s/_T[0-9]*/_$id/} samplesheet.tsv\n    sed -i \"s~$ftp~$(readlink -f $id'.fastq.gz')~1\" samplesheet.tsv\n    done\n    \n    echo \"samplesheet generated\"\n    cat samplesheet.tsv\n    \n    awk -F\"\\\\t\" 'BEGIN {OFS=\",\"} {if(NR==1) print \"sample\",$2,$3,\"strandedness\",$1;else print \"!{experiment}\",$2,$3,\"unstranded\",$1}' samplesheet.tsv > !{experiment}_samplesheet.csv\n    \n    echo \"final samplesheet\"\n    cat !{experiment}_samplesheet.csv\n    '''\n\n      \n           \n                          \n        \"\"\"\n        bash -c 'wget $options.args -L ftp://${fastq[0]} -O ${meta.id}.fastq.gz';\n\n        echo \"${meta.md5_1} ${meta.id}.fastq.gz\" > ${meta.id}.fastq.gz.md5\n        md5sum -c ${meta.id}.fastq.gz.md5\n        \"\" \n            \n        \"\"\"\n        bash -c 'wget $options.args -L ftp://${fastq[0]} -O ${meta.id}_1.fastq.gz';\n\n        echo \"${meta.md5_1} ${meta.id}_1.fastq.gz\" > ${meta.id}_1.fastq.gz.md5\n        md5sum -c ${meta.id}_1.fastq.gz.md5\n\n        bash -c 'wget $options.args -L ftp://${fastq[1]} -O ${meta.id}_2.fastq.gz';\n\n        echo \"${meta.md5_2} ${meta.id}_2.fastq.gz\" > ${meta.id}_2.fastq.gz.md5\n        md5sum -c ${meta.id}_2.fastq.gz.md5\n        \"\"",
        "nb_lignes_script": 55,
        "language_script": "bash",
        "tools": [
            "myExperiment"
        ],
        "tools_url": [
            "https://bio.tools/myexperiment"
        ],
        "tools_dico": [
            {
                "name": "myExperiment",
                "uri": "https://bio.tools/myexperiment",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Online research environment that supports the social sharing of bioinformatics workflows.",
                "homepage": "http://www.myexperiment.org"
            }
        ],
        "inputs": [
            "runinfo"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$experiment\"",
            "label 'process_medium'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[\"id\":experiment], publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SUBREAD_FEATURECOUNTS": {
        "name_process": "SUBREAD_FEATURECOUNTS",
        "string_process": "\nprocess SUBREAD_FEATURECOUNTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0\"\n    } else {\n        container \"quay.io/biocontainers/subread:2.0.1--hed695b0_0\"\n    }\n\n    input:\n    tuple val(meta), path(bams), path(annotation)\n\n    output:\n    tuple val(meta), path(\"*featureCounts.txt\")        , emit: counts\n    tuple val(meta), path(\"*featureCounts.txt.summary\"), emit: summary\n    path \"*.version.txt\"                               , emit: version\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-p'\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    \"\"\"\n    featureCounts \\\\\n        $options.args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -s $strandedness \\\\\n        -o ${prefix}.featureCounts.txt \\\\\n        ${bams.join(' ')}\n\n    echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-p'\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    \"\"\"\n    featureCounts \\\\\n        $options.args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -s $strandedness \\\\\n        -o ${prefix}.featureCounts.txt \\\\\n        ${bams.join(' ')}\n\n    echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "meta",
            "bams",
            "annotation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0\" } else { container \"quay.io/biocontainers/subread:2.0.1--hed695b0_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC_CUSTOM_STRAND_CHECK": {
        "name_process": "MULTIQC_CUSTOM_STRAND_CHECK",
        "string_process": "\nprocess MULTIQC_CUSTOM_STRAND_CHECK {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    val fail_strand\n\n    output:\n    path \"*.tsv\"\n\n    script:\n    if (fail_strand.size() > 0) {\n        \"\"\"\n        echo \"Sample\\tProvided strandedness\\tInferred strandedness\\tSense (%)\\tAntisense (%)\\tUndetermined (%)\" > fail_strand_check_mqc.tsv\n        echo \"${fail_strand.join('\\n')}\" >> fail_strand_check_mqc.tsv\n        \"\"\"\n    } else {\n        \"\"\"\n        touch fail_strand_check_mqc.tsv\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 29,
        "string_script": "    if (fail_strand.size() > 0) {\n        \"\"\"\n        echo \"Sample\\tProvided strandedness\\tInferred strandedness\\tSense (%)\\tAntisense (%)\\tUndetermined (%)\" > fail_strand_check_mqc.tsv\n        echo \"${fail_strand.join('\\n')}\" >> fail_strand_check_mqc.tsv\n        \"\"\"\n    } else {\n        \"\"\"\n        touch fail_strand_check_mqc.tsv\n        \"\"\"\n    }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fail_strand"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_INFEREXPERIMENT": {
        "name_process": "RSEQC_INFEREXPERIMENT",
        "string_process": "\nprocess RSEQC_INFEREXPERIMENT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.infer_experiment.txt\"), emit: txt\n    path  \"*.version.txt\"                          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    infer_experiment.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $options.args \\\\\n        > ${prefix}.infer_experiment.txt\n\n    infer_experiment.py --version | sed -e \"s/infer_experiment.py //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    infer_experiment.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $options.args \\\\\n        > ${prefix}.infer_experiment.txt\n\n    infer_experiment.py --version | sed -e \"s/infer_experiment.py //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_SUMMARIZEDEXPERIMENT": {
        "name_process": "SALMON_SUMMARIZEDEXPERIMENT",
        "string_process": "\nprocess SALMON_SUMMARIZEDEXPERIMENT {\n    tag \"$tx2gene\"\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-summarizedexperiment=1.20.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bioconductor-summarizedexperiment:1.20.0--r40_0\"\n    } else {\n        container \"quay.io/biocontainers/bioconductor-summarizedexperiment:1.20.0--r40_0\"\n    }\n\n    input:\n    path counts\n    path tpm\n    path tx2gene\n\n    output:\n    path \"*.rds\"         , emit: rds\n    path  \"*.version.txt\", emit: version\n\n    script:                                                                    \n    \"\"\"\n    salmon_summarizedexperiment.r NULL $counts $tpm\n    Rscript -e \"library(SummarizedExperiment); write(x=as.character(packageVersion('SummarizedExperiment')), file='bioconductor-summarizedexperiment.version.txt')\"\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    salmon_summarizedexperiment.r NULL $counts $tpm\n    Rscript -e \"library(SummarizedExperiment); write(x=as.character(packageVersion('SummarizedExperiment')), file='bioconductor-summarizedexperiment.version.txt')\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts",
            "tpm",
            "tx2gene"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$tx2gene\"",
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::bioconductor-summarizedexperiment=1.20.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bioconductor-summarizedexperiment:1.20.0--r40_0\" } else { container \"quay.io/biocontainers/bioconductor-summarizedexperiment:1.20.0--r40_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": "\nprocess TRIMGALORE {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::trim-galore=0.6.6\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/trim-galore:0.6.6--0\"\n    } else {\n        container \"quay.io/biocontainers/trim-galore:0.6.6--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fq.gz\")    , emit: reads\n    tuple val(meta), path(\"*report.txt\"), emit: log\n    path \"*.version.txt\"                , emit: version\n\n    tuple val(meta), path(\"*.html\"), emit: html optional true\n    tuple val(meta), path(\"*.zip\") , emit: zip optional true\n\n    script:\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $options.args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n        echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $options.args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n        echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 76,
        "string_script": "    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $options.args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n        echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $options.args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n        echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::trim-galore=0.6.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/trim-galore:0.6.6--0\" } else { container \"quay.io/biocontainers/trim-galore:0.6.6--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "DUPRADAR": {
        "name_process": "DUPRADAR",
        "string_process": "\nprocess DUPRADAR {\n    tag \"$meta.id\"\n    label 'process_long'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-dupradar=1.18.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bioconductor-dupradar:1.18.0--r40_1\"\n    } else {\n        container \"quay.io/biocontainers/bioconductor-dupradar:1.18.0--r40_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"*.pdf\")    , emit: pdf\n    tuple val(meta), path(\"*.txt\")    , emit: txt\n    tuple val(meta), path(\"*_mqc.txt\"), emit: multiqc\n    path  \"*.version.txt\"             , emit: version\n\n    script:                                                                    \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    def paired_end = meta.single_end ? 'single' :  'paired'\n    \"\"\"\n    dupradar.r $bam $prefix $gtf $strandedness $paired_end $task.cpus\n    Rscript -e \"library(dupRadar); write(x=as.character(packageVersion('dupRadar')), file='${software}.version.txt')\"\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    def paired_end = meta.single_end ? 'single' :  'paired'\n    \"\"\"\n    dupradar.r $bam $prefix $gtf $strandedness $paired_end $task.cpus\n    Rscript -e \"library(dupRadar); write(x=as.character(packageVersion('dupRadar')), file='${software}.version.txt')\"\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::bioconductor-dupradar=1.18.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bioconductor-dupradar:1.18.0--r40_1\" } else { container \"quay.io/biocontainers/bioconductor-dupradar:1.18.0--r40_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UCSC_BEDGRAPHTOBIGWIG": {
        "name_process": "UCSC_BEDGRAPHTOBIGWIG",
        "string_process": "\nprocess UCSC_BEDGRAPHTOBIGWIG {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1\"\n    } else {\n        container \"quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1\"\n    }\n\n    input:\n    tuple val(meta), path(bedgraph)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bigWig\"), emit: bigwig\n    path \"*.version.txt\"             , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bedGraphToBigWig $bedgraph $sizes ${prefix}.bigWig\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bedGraphToBigWig $bedgraph $sizes ${prefix}.bigWig\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "meta",
            "bedgraph",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1\" } else { container \"quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UMITOOLS_EXTRACT": {
        "name_process": "UMITOOLS_EXTRACT",
        "string_process": "\nprocess UMITOOLS_EXTRACT {\n    tag \"$meta.id\"\n    label \"process_low\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\"\n    } else {\n        container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I $reads \\\\\n            -S ${prefix}.umi_extract.fastq.gz \\\\\n            $options.args \\\\\n            > ${prefix}.umi_extract.log\n\n        umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n        \"\"\"\n    }  else {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I ${reads[0]} \\\\\n            --read2-in=${reads[1]} \\\\\n            -S ${prefix}.umi_extract_1.fastq.gz \\\\\n            --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n            $options.args \\\\\n            > ${prefix}.umi_extract.log\n\n        umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 50,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I $reads \\\\\n            -S ${prefix}.umi_extract.fastq.gz \\\\\n            $options.args \\\\\n            > ${prefix}.umi_extract.log\n\n        umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n        \"\"\"\n    }  else {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I ${reads[0]} \\\\\n            --read2-in=${reads[1]} \\\\\n            -S ${prefix}.umi_extract_1.fastq.gz \\\\\n            --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n            $options.args \\\\\n            > ${prefix}.umi_extract.log\n\n        umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "EXTRACT"
        ],
        "tools_url": [
            "https://bio.tools/extract"
        ],
        "tools_dico": [
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\" } else { container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_READDUPLICATION": {
        "name_process": "RSEQC_READDUPLICATION",
        "string_process": "\nprocess RSEQC_READDUPLICATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\"\n    } else {\n        container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*seq.DupRate.xls\"), emit: seq_xls\n    tuple val(meta), path(\"*pos.DupRate.xls\"), emit: pos_xls\n    tuple val(meta), path(\"*.pdf\")           , emit: pdf\n    tuple val(meta), path(\"*.r\")             , emit: rscript\n    path  \"*.version.txt\"                    , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    read_duplication.py \\\\\n        -i $bam \\\\\n        -o $prefix \\\\\n        $options.args\n\n    read_duplication.py --version | sed -e \"s/read_duplication.py //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    read_duplication.py \\\\\n        -i $bam \\\\\n        -o $prefix \\\\\n        $options.args\n\n    read_duplication.py --version | sed -e \"s/read_duplication.py //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1\" } else { container \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC_CUSTOM_BIOTYPE": {
        "name_process": "MULTIQC_CUSTOM_BIOTYPE",
        "string_process": "\nprocess MULTIQC_CUSTOM_BIOTYPE {\n    tag \"$meta.id\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    tuple val(meta), path(count)\n    path  header\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    cut -f 1,7 $count | tail -n +3 | cat $header - >> ${prefix}.biotype_counts_mqc.tsv\n    mqc_features_stat.py ${prefix}.biotype_counts_mqc.tsv -s $meta.id -f rRNA -o ${prefix}.biotype_counts_rrna_mqc.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    cut -f 1,7 $count | tail -n +3 | cat $header - >> ${prefix}.biotype_counts_mqc.tsv\n    mqc_features_stat.py ${prefix}.biotype_counts_mqc.tsv -s $meta.id -f rRNA -o ${prefix}.biotype_counts_rrna_mqc.tsv\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "count",
            "header"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lauramble__rnaseq-vizfada",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    }
}
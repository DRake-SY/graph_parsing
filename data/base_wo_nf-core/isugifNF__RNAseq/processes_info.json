{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"batched\"\n    label 'fastqc'\n\n    publishDir \"${params.outdir}/01_Quality-Control\", mode: 'copy',\n        saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" }\n\n    input: path(read)\n    output: path(\"*_fastqc.{zip,html}\")\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    ${parallel_app} -j \\${PROC} \"${fastqc_app} {1}\" ::: ${read}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    ${parallel_app} -j \\${PROC} \"${fastqc_app} {1}\" ::: ${read}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"batched\"",
            "label 'fastqc'",
            "publishDir \"${params.outdir}/01_Quality-Control\", mode: 'copy' , saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" } input: path(read) output: path(\"*_fastqc.{zip,html}\")"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    label 'multiqc'\n\n    publishDir \"${params.outdir}/01_Quality-Control\", mode: 'copy',\n        saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" }\n\n    input: path fastqc_htmls\n\n    output: path \"multiqc_report.html\"\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    $multiqc_app .\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    $multiqc_app .\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "label 'multiqc'",
            "publishDir \"${params.outdir}/01_Quality-Control\", mode: 'copy' , saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" } input: path fastqc_htmls output: path \"multiqc_report.html\""
        ],
        "when": "",
        "stub": ""
    },
    "kallisto_index": {
        "name_process": "kallisto_index",
        "string_process": "\nprocess kallisto_index {\n    tag \"$genome_cdna\"\n    label 'kallisto'\n\n    publishDir \"${params.outdir}/03_Kallisto\", mode: 'copy'\n\n    input: path(genome_cdna)\n\n    output: path(\"${genome_cdna.simpleName}.idx\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    $kallisto_app index \\\n      -i ${genome_cdna.simpleName}.idx ${genome_cdna}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    $kallisto_app index \\\n      -i ${genome_cdna.simpleName}.idx ${genome_cdna}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"$genome_cdna\"",
            "label 'kallisto'",
            "publishDir \"${params.outdir}/03_Kallisto\", mode: 'copy' input: path(genome_cdna) output: path(\"${genome_cdna.simpleName}.idx\")"
        ],
        "when": "",
        "stub": ""
    },
    "kallisto_quant": {
        "name_process": "kallisto_quant",
        "string_process": "\nprocess kallisto_quant {\n    tag \"${readname}\"\n    label 'kallisto'\n\n    publishDir \"${params.outdir}/03_Kallisto\", mode: 'copy'\n\n    input: tuple path(genome_index), val(readname), path(read_pairs)\n\n    output: path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    ${kallisto_app} quant \\\n     -i ${genome_index} \\\n     -o ${readname}_quant \\\n     -b 20 -t \\$PROC \\\n     ${read_pairs}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    ${kallisto_app} quant \\\n     -i ${genome_index} \\\n     -o ${readname}_quant \\\n     -b 20 -t \\$PROC \\\n     ${read_pairs}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${readname}\"",
            "label 'kallisto'",
            "publishDir \"${params.outdir}/03_Kallisto\", mode: 'copy' input: tuple path(genome_index), val(readname), path(read_pairs) output: path(\"*\")"
        ],
        "when": "",
        "stub": ""
    },
    "salmon_index": {
        "name_process": "salmon_index",
        "string_process": "\nprocess salmon_index {\n    tag \"$genome_cdna\"\n    label 'salmon'\n\n    publishDir \"${params.outdir}/03_Salmon\", mode: 'copy'\n\n    input: path(genome_cdna)\n\n    output: tuple val(\"${genome_cdna.simpleName}\"), path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    $salmon_app index \\\n      -i ${genome_cdna.simpleName} \\\n      -t ${genome_cdna}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    $salmon_app index \\\n      -i ${genome_cdna.simpleName} \\\n      -t ${genome_cdna}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"$genome_cdna\"",
            "label 'salmon'",
            "publishDir \"${params.outdir}/03_Salmon\", mode: 'copy' input: path(genome_cdna) output: tuple val(\"${genome_cdna.simpleName}\"), path(\"*\")"
        ],
        "when": "",
        "stub": ""
    },
    "salmon_quant": {
        "name_process": "salmon_quant",
        "string_process": "\nprocess salmon_quant {\n    tag \"${readname}\"\n    label 'salmon'\n\n    publishDir \"${params.outdir}/03_Salmon\", mode: 'copy'\n\n    input:\n    tuple val(genome_index), path(genome_index_files), val(readname), path(read_pairs)\n\n    output:\n    path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $salmon_app quant \\\n     -l A -p \\$PROC \\\n     --validateMappings \\\n     -i ${genome_index} \\\n     -1 ${read_pairs.get(0)} \\\n     -2 ${read_pairs.get(1)} \\\n     -o ${readname}_quant\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $salmon_app quant \\\n     -l A -p \\$PROC \\\n     --validateMappings \\\n     -i ${genome_index} \\\n     -1 ${read_pairs.get(0)} \\\n     -2 ${read_pairs.get(1)} \\\n     -o ${readname}_quant\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_index",
            "readname",
            "genome_index_files",
            "read_pairs"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${readname}\"",
            "label 'salmon'",
            "publishDir \"${params.outdir}/03_Salmon\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gsnap_index": {
        "name_process": "gsnap_index",
        "string_process": "\nprocess gsnap_index {\n    tag \"${genome_gz.simpleName}\"\n    label 'gsnap'\n\n    publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'\n\n    input:\n    path(genome_gz)\n\n    output:\n    tuple val(\"${genome_gz.simpleName}\"), path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    gmap_build \\\n     --gunzip \\\n     -d ${genome_gz.simpleName} \\\n     -D gmapdb \\\n     ${genome_gz}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    gmap_build \\\n     --gunzip \\\n     -d ${genome_gz.simpleName} \\\n     -D gmapdb \\\n     ${genome_gz}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "gmap_build"
        ],
        "tools_url": [
            "https://bio.tools/gmap_build"
        ],
        "tools_dico": [
            {
                "name": "gmap_build",
                "uri": "https://bio.tools/gmap_build",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A database genome index for GMAP and GSNAP.",
                "homepage": "http://research-pub.gene.com/gmap/"
            }
        ],
        "inputs": [
            "genome_gz"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${genome_gz.simpleName}\"",
            "label 'gsnap'",
            "publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gsnap_align": {
        "name_process": "gsnap_align",
        "string_process": "\nprocess gsnap_align {\n    tag \"${readname}\"\n    label 'gsnap'\n\n    publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'\n\n    input: tuple val(genome_name), path(gmap_dir),val(readname), path(read_pairs)\n\n    output: path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$(((`nproc`-1)*3/4+1))\n    PROC2=\\$(((`nproc`-1)*1/4+1))\n    ${gsnap_app} \\\n     --gunzip \\\n     -d ${genome_name} \\\n     -D gmapdb/ \\\n     -N 1 -t \\$PROC -B 4 -m 5 \\\n     --input-buffer-size=1000000 \\\n     --output-buffer-size=1000000 \\\n     -A sam \\\n     ${read_pairs} |\n     samtools view --threads \\$PROC -bS - > ${readname}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$(((`nproc`-1)*3/4+1))\n    PROC2=\\$(((`nproc`-1)*1/4+1))\n    ${gsnap_app} \\\n     --gunzip \\\n     -d ${genome_name} \\\n     -D gmapdb/ \\\n     -N 1 -t \\$PROC -B 4 -m 5 \\\n     --input-buffer-size=1000000 \\\n     --output-buffer-size=1000000 \\\n     -A sam \\\n     ${read_pairs} |\n     samtools view --threads \\$PROC -bS - > ${readname}.bam\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${readname}\"",
            "label 'gsnap'",
            "publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy' input: tuple val(genome_name), path(gmap_dir),val(readname), path(read_pairs) output: path(\"*\")"
        ],
        "when": "",
        "stub": ""
    },
    "featureCounts_gene": {
        "name_process": "featureCounts_gene",
        "string_process": "\nprocess featureCounts_gene {\n    tag \"${read_bam.simpleName}\"\n    label 'gsnap'\n\n    publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'\n    input: tuple path(read_bam), path(genome_gff)\n\n    output: path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $featureCounts_app \\\n      -T \\$PROC \\\n      -t gene \\\n      -g ID \\\n      -p \\\n      -a ${genome_gff} \\\n      -o ${read_bam.simpleName}_genecounts.txt \\\n      ${read_bam}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $featureCounts_app \\\n      -T \\$PROC \\\n      -t gene \\\n      -g ID \\\n      -p \\\n      -a ${genome_gff} \\\n      -o ${read_bam.simpleName}_genecounts.txt \\\n      ${read_bam}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${read_bam.simpleName}\"",
            "label 'gsnap'",
            "publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy' input: tuple path(read_bam), path(genome_gff) output: path(\"*\")"
        ],
        "when": "",
        "stub": ""
    },
    "featureCounts_mRNA": {
        "name_process": "featureCounts_mRNA",
        "string_process": "\nprocess featureCounts_mRNA {\n    tag \"${read_bam.simpleName}\"\n    label 'gsnap'\n\n    publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'\n\n    input:\n    tuple path(read_bam), path(genome_gff)\n\n    output:\n    path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $featureCounts_app \\\n      -T \\$PROC -p \\\n      -t mRNA \\\n      -g ID \\\n      -a ${genome_gff} \\\n      -o ${read_bam.simpleName}_mRNAcounts.txt \\\n      ${read_bam}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $featureCounts_app \\\n      -T \\$PROC -p \\\n      -t mRNA \\\n      -g ID \\\n      -a ${genome_gff} \\\n      -o ${read_bam.simpleName}_mRNAcounts.txt \\\n      ${read_bam}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_bam",
            "genome_gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${read_bam.simpleName}\"",
            "label 'gsnap'",
            "publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "featureCounts_geneMult": {
        "name_process": "featureCounts_geneMult",
        "string_process": "\nprocess featureCounts_geneMult {\n    tag \"${read_bam.simpleName}\"\n    label 'gsnap'\n\n    publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'\n\n    input:\n    tuple path(read_bam), path(genome_gff)\n\n    output:\n    path(\"*\")\n\n    script:\n    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $featureCounts_app \\\n      -T \\$PROC -M -p \\\n      -t gene \\\n      -g ID \\\n      -a ${genome_gff} \\\n      -o ${read_bam.simpleName}_geneMultcounts.txt \\\n      ${read_bam}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    #! /usr/bin/env bash\n    PROC=\\$((`nproc`))\n    $featureCounts_app \\\n      -T \\$PROC -M -p \\\n      -t gene \\\n      -g ID \\\n      -a ${genome_gff} \\\n      -o ${read_bam.simpleName}_geneMultcounts.txt \\\n      ${read_bam}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_bam",
            "genome_gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "isugifNF__RNAseq",
        "directive": [
            "tag \"${read_bam.simpleName}\"",
            "label 'gsnap'",
            "publishDir \"${params.outdir}/03_GSNAP\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "get_reads_per_bin": {
        "name_process": "get_reads_per_bin",
        "string_process": "process get_reads_per_bin {\n    publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.BIN-*.fastq\"\n    label 'ucsc'\n\n    input:\n      tuple val(name), file(hdbscan_bins), file(filtered_bins), file(fasta) \n    \n    output:\n      tuple val(name), file(\"${name}.BIN-*.fastq\"), file(\"${name}.BIN-*.gsize\")\n      tuple val(name), file(\"${name}.BIN-*.fasta\"), file(\"${name}.BIN-*.gsize\")\n    script:\n    \"\"\"\n    for BIN_ID in \\$(awk '{if(\\$2==\"True\"){print \\$1}}' ${filtered_bins}); do\n      BIN_ID_NAME=\"BIN-\"\\${BIN_ID}\n      awk -v ID=\"\\$BIN_ID\" '{if(\\$1==ID){print \\$3}}' ${filtered_bins} > ${name}.\\${BIN_ID_NAME}.gsize\n      awk -v ID=\"\\$BIN_ID\" '{if(\\$5==ID){print \\$1}}' ${hdbscan_bins} > \\${BIN_ID_NAME}.reads\n      faSomeRecords ${fasta} \\${BIN_ID_NAME}.reads ${name}.\\${BIN_ID_NAME}.fasta\n      faToFastq ${name}.\\${BIN_ID_NAME}.fasta ${name}.\\${BIN_ID_NAME}.fastq\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    for BIN_ID in \\$(awk '{if(\\$2==\"True\"){print \\$1}}' ${filtered_bins}); do\n      BIN_ID_NAME=\"BIN-\"\\${BIN_ID}\n      awk -v ID=\"\\$BIN_ID\" '{if(\\$1==ID){print \\$3}}' ${filtered_bins} > ${name}.\\${BIN_ID_NAME}.gsize\n      awk -v ID=\"\\$BIN_ID\" '{if(\\$5==ID){print \\$1}}' ${hdbscan_bins} > \\${BIN_ID_NAME}.reads\n      faSomeRecords ${fasta} \\${BIN_ID_NAME}.reads ${name}.\\${BIN_ID_NAME}.fasta\n      faToFastq ${name}.\\${BIN_ID_NAME}.fasta ${name}.\\${BIN_ID_NAME}.fastq\n    done\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "hdbscan_bins",
            "filtered_bins",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name",
            "name"
        ],
        "nb_outputs": 2,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.BIN-*.fastq\"",
            "label 'ucsc'"
        ],
        "when": "",
        "stub": ""
    },
    "kmerfreq": {
        "name_process": "kmerfreq",
        "string_process": "process kmerfreq {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.kmers\"\n      label 'marine_phage_paper_scripts'\n\n    input:\n      tuple val(name), file(filtered_fastq) \n\n    output:\n      tuple val(name), file(\"${name}.kmers\")\n\n    script:\n      \"\"\"\n      kmer_freq.py -t ${task.cpus} ${filtered_fastq} > ${name}.kmers\n      \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "      \"\"\"\n      kmer_freq.py -t ${task.cpus} ${filtered_fastq} > ${name}.kmers\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "filtered_fastq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.kmers\"",
            "label 'marine_phage_paper_scripts'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_bins": {
        "name_process": "filter_bins",
        "string_process": "process filter_bins {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.bin_rl_filter.tsv\"\n      label 'marine_phage_paper_scripts'\n\n    input:\n      tuple val(name), file(hdbscan_clusters) \n\n    output:\n      tuple val(name), file(\"${name}.bin_rl_filter.tsv\")\n\n    script:\n      \"\"\"\n      filter_bins.py -p ${name} ${hdbscan_clusters}\n      \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "      \"\"\"\n      filter_bins.py -p ${name} ${hdbscan_clusters}\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "hdbscan_clusters"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.bin_rl_filter.tsv\"",
            "label 'marine_phage_paper_scripts'"
        ],
        "when": "",
        "stub": ""
    },
    "nanoplot": {
        "name_process": "nanoplot",
        "string_process": "process nanoplot {\n    label 'nanoplot'\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"*.html\"\n      publishDir \"${params.output}/${name}/readQCdir/\", mode: 'copy', pattern: \"*_read_quality.txt\"\n      publishDir \"${params.output}/${name}/readQCdir/\", mode: 'copy', pattern: \"*.png\"\n      publishDir \"${params.output}/${name}/readQCdir/\", mode: 'copy', pattern: \"*.pdf\"\n    input:\n      tuple val(name), file(reads)\n    output:\n      tuple val(name), file(\"*.html\"), file(\"*.png\"), file(\"*.pdf\"), file(\"${name}_read_quality.txt\") \n    script:\n      \"\"\"\n      NanoPlot -t ${task.cpus} --fastq ${reads} --title ${name} --color darkslategrey --N50 --plots hex --loglength -f png --store\n      NanoPlot -t ${task.cpus} --pickle NanoPlot-data.pickle --title ${name} --color darkslategrey --N50 --plots hex --loglength -f pdf\n      mv *.html ${name}_read_quality_report.html\n      mv NanoStats.txt ${name}_read_quality.txt\n      \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "      \"\"\"\n      NanoPlot -t ${task.cpus} --fastq ${reads} --title ${name} --color darkslategrey --N50 --plots hex --loglength -f png --store\n      NanoPlot -t ${task.cpus} --pickle NanoPlot-data.pickle --title ${name} --color darkslategrey --N50 --plots hex --loglength -f pdf\n      mv *.html ${name}_read_quality_report.html\n      mv NanoStats.txt ${name}_read_quality.txt\n      \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'nanoplot'",
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"*.html\"",
            "publishDir \"${params.output}/${name}/readQCdir/\", mode: 'copy', pattern: \"*_read_quality.txt\"",
            "publishDir \"${params.output}/${name}/readQCdir/\", mode: 'copy', pattern: \"*.png\"",
            "publishDir \"${params.output}/${name}/readQCdir/\", mode: 'copy', pattern: \"*.pdf\""
        ],
        "when": "",
        "stub": ""
    },
    "prodigal": {
        "name_process": "prodigal",
        "string_process": "\nprocess prodigal {\n  label 'prodigal'  \n  publishDir \"${params.output}/${dir}/prodigal/\", mode: 'copy', pattern: \"${name}.faa\"\n\n  input:\n    tuple val(dir), val(name), file(genome)\n\n  output:\n    tuple val(dir), val(name), file(\"${name}.faa\")\n\n  script:\n    \"\"\"\n    prodigal -i ${genome} -f gff -a ${name}.faa > /dev/null 2> ${name}.log\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    prodigal -i ${genome} -f gff -a ${name}.faa > /dev/null 2> ${name}.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "dir",
            "name",
            "genome"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'prodigal'",
            "publishDir \"${params.output}/${dir}/prodigal/\", mode: 'copy', pattern: \"${name}.faa\""
        ],
        "when": "",
        "stub": ""
    },
    "filtlong": {
        "name_process": "filtlong",
        "string_process": "process filtlong {\n    label 'filtlong'\n  input:\n    tuple val(name), file(reads) \n  output:\n\t  tuple val(name), file(\"${name}_minlength_reduced.fastq\") \n  script:\n    \"\"\"\n    filtlong --min_length 100 ${reads} > ${name}_minlength_reduced.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "    \"\"\"\n    filtlong --min_length 100 ${reads} > ${name}_minlength_reduced.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'filtlong'"
        ],
        "when": "",
        "stub": ""
    },
    "fastani": {
        "name_process": "fastani",
        "string_process": "process fastani {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.fastani.out\"\n      label 'fastani'\n\n    input:\n      tuple val(name), file(fasta) \n    \n    output:\n      tuple val(name), file(\"${name}.fastani.out\")\n    \n    shell:\n    \"\"\"\n      fastANI -q ${fasta} -r ${fasta} --fragLen=1500 --minFraction=0.1 -k 10 -o ${name}.fastani.out\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n      fastANI -q ${fasta} -r ${fasta} --fragLen=1500 --minFraction=0.1 -k 10 -o ${name}.fastani.out\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.fastani.out\"",
            "label 'fastani'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_corrected_reads": {
        "name_process": "filter_corrected_reads",
        "string_process": "process filter_corrected_reads {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.*.filtered.fasta\"\n      label 'marine_phage_paper_scripts'\n\n    input:\n      tuple val(name), file(canu_corrected_reads), file(gsize) \n\n    output:\n      tuple val(name), file(\"${name}.*.filtered.fasta\")\n\n    script:\n      \"\"\"\n      GSIZE=\\$(cat ${gsize})\n      BIN=\\$(echo \"${gsize}\" | sed 's/${name}.//g' | sed 's/.gsize//g')\n      gunzip -kf ${canu_corrected_reads}\n      filter_reads.py -p ${name}.\\${BIN}.filtered ${canu_corrected_reads.baseName} \\${GSIZE}\n      \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "      \"\"\"\n      GSIZE=\\$(cat ${gsize})\n      BIN=\\$(echo \"${gsize}\" | sed 's/${name}.//g' | sed 's/.gsize//g')\n      gunzip -kf ${canu_corrected_reads}\n      filter_reads.py -p ${name}.\\${BIN}.filtered ${canu_corrected_reads.baseName} \\${GSIZE}\n      \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "canu_corrected_reads",
            "gsize"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.*.filtered.fasta\"",
            "label 'marine_phage_paper_scripts'"
        ],
        "when": "",
        "stub": ""
    },
    "kaiju": {
        "name_process": "kaiju",
        "string_process": "process kaiju {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.out\"\n      label 'kaiju'\n\n    input:\n      tuple val(name), file(fastq) \n      file(database) \n    \n    output:\n      tuple val(name), file(\"${name}.out\")\n      tuple val(name), file(\"${name}.out.krona\")\n    \n    shell:\n      if (params.fasta) {\n      '''\n      kaiju -z !{task.cpus} -t !{database}/nodes.dmp -f !{database}/!{database}/kaiju_db_!{database}.fmi -i !{fastq} -o !{name}.out\n      kaiju2krona -t !{database}/nodes.dmp -n !{database}/names.dmp -i !{name}.out -o !{name}.out.krona\n      '''\n      }\n      if (params.nano) {\n      '''\n      kaiju -a greedy -e 5 -z !{task.cpus} -t !{database}/nodes.dmp -f !{database}/!{database}/kaiju_db_!{database}.fmi -i !{fastq} -o !{name}.out\n      kaiju2krona -t !{database}/nodes.dmp -n !{database}/names.dmp -i !{name}.out -o !{name}.out.krona\n      '''\n      }\n}",
        "nb_lignes_process": 24,
        "string_script": "      if (params.fasta) {\n      '''\n      kaiju -z !{task.cpus} -t !{database}/nodes.dmp -f !{database}/!{database}/kaiju_db_!{database}.fmi -i !{fastq} -o !{name}.out\n      kaiju2krona -t !{database}/nodes.dmp -n !{database}/names.dmp -i !{name}.out -o !{name}.out.krona\n      '''\n      }\n      if (params.nano) {\n      '''\n      kaiju -a greedy -e 5 -z !{task.cpus} -t !{database}/nodes.dmp -f !{database}/!{database}/kaiju_db_!{database}.fmi -i !{fastq} -o !{name}.out\n      kaiju2krona -t !{database}/nodes.dmp -n !{database}/names.dmp -i !{name}.out -o !{name}.out.krona\n      '''\n      }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Kaiju"
        ],
        "tools_url": [
            "https://bio.tools/kaiju"
        ],
        "tools_dico": [
            {
                "name": "Kaiju",
                "uri": "https://bio.tools/kaiju",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Program for the taxonomic assignment of high-throughput sequencing reads, e.g., Illumina or Roche/454, from whole-genome sequencing of metagenomic DNA. Reads are directly assigned to taxa using the NCBI taxonomy and a reference database of protein sequences from Bacteria, Archaea, Fungi, microbial eukaryotes and viruses.",
                "homepage": "http://kaiju.binf.ku.dk"
            }
        ],
        "inputs": [
            "name",
            "fastq",
            "database"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name",
            "name"
        ],
        "nb_outputs": 2,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.out\"",
            "label 'kaiju'"
        ],
        "when": "",
        "stub": ""
    },
    "cluster_ani": {
        "name_process": "cluster_ani",
        "string_process": "process cluster_ani {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.*.cluster_ani\"\n      label 'marine_phage_paper_scripts'\n\n    input:\n      tuple val(name), file(ani) \n\n    output:\n      tuple val(name), file(\"${name}.*.cluster_ani\")\n\n    script:\n      \"\"\"\n      BIN=\\$(echo \"${ani}\" | sed 's/${name}.//g' | sed 's/.gsize//g')\n      cluster_ani.py -p ${name}.\\${BIN}.cluster_ani ${ani} \\${BIN}\n      \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "      \"\"\"\n      BIN=\\$(echo \"${ani}\" | sed 's/${name}.//g' | sed 's/.gsize//g')\n      cluster_ani.py -p ${name}.\\${BIN}.cluster_ani ${ani} \\${BIN}\n      \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "ani"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.*.cluster_ani\"",
            "label 'marine_phage_paper_scripts'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_kaiju": {
        "name_process": "filter_kaiju",
        "string_process": "process filter_kaiju {\n    publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.out.*cellular\"\n    label 'ruby'\n\n    input:\n      tuple val(name), file(kaiju_out) \n\n    output:\n      tuple val(name), file(\"${name}.out.cellular\")\n      tuple val(name), file(\"${name}.out.noncellular\")\n    \n    script:\n      \"\"\"\n      #!/usr/bin/env ruby\n\n      `wget https://www.rna.uni-jena.de/supplements/viruses.taxids`\n      \n      virus_ids = []\n      viruses = File.open('viruses.taxids','r')\n      viruses.each do |l|\n        virus_ids.push(l.chomp)\n      end\n      viruses.close\n\n      out_unclassified= File.open(\"${name}.out.unclassified\",'w')\n      out_viruses = File.open(\"${name}.out.viruses\",'w')\n      out_cellular = File.open(\"${name}.out.cellular\",'w')\n\n      hits = File.open('${kaiju_out}','r')\n      hits.each do |l|\n        s = l.split(\"\\\\t\")\n        read_id = s[1].chomp\n        tax_id = s[2].chomp\n\n        if s[0].chomp == \"U\"\n          out_unclassified << read_id << \"\\\\n\"\n        else\n          if virus_ids.include?(tax_id)\n            out_viruses << read_id << \"\\\\n\"\n          else\n            out_cellular << read_id << \"\\\\n\"\n          end\n        end\n      end\n      hits.close\n      out_viruses.close\n      out_cellular.close\n      out_unclassified.close\n\n      `cat ${name}.out.unclassified ${name}.out.viruses > ${name}.out.noncellular`\n      `rm ${name}.out.unclassified`\n      `rm ${name}.out.viruses`\n      \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "      \"\"\"\n      #!/usr/bin/env ruby\n\n      `wget https://www.rna.uni-jena.de/supplements/viruses.taxids`\n      \n      virus_ids = []\n      viruses = File.open('viruses.taxids','r')\n      viruses.each do |l|\n        virus_ids.push(l.chomp)\n      end\n      viruses.close\n\n      out_unclassified= File.open(\"${name}.out.unclassified\",'w')\n      out_viruses = File.open(\"${name}.out.viruses\",'w')\n      out_cellular = File.open(\"${name}.out.cellular\",'w')\n\n      hits = File.open('${kaiju_out}','r')\n      hits.each do |l|\n        s = l.split(\"\\\\t\")\n        read_id = s[1].chomp\n        tax_id = s[2].chomp\n\n        if s[0].chomp == \"U\"\n          out_unclassified << read_id << \"\\\\n\"\n        else\n          if virus_ids.include?(tax_id)\n            out_viruses << read_id << \"\\\\n\"\n          else\n            out_cellular << read_id << \"\\\\n\"\n          end\n        end\n      end\n      hits.close\n      out_viruses.close\n      out_cellular.close\n      out_unclassified.close\n\n      `cat ${name}.out.unclassified ${name}.out.viruses > ${name}.out.noncellular`\n      `rm ${name}.out.unclassified`\n      `rm ${name}.out.viruses`\n      \"\"\"",
        "nb_lignes_script": 40,
        "language_script": "ruby",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "kaiju_out"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name",
            "name"
        ],
        "nb_outputs": 2,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.out.*cellular\"",
            "label 'ruby'"
        ],
        "when": "",
        "stub": ""
    },
    "kaijuGetDB": {
        "name_process": "kaijuGetDB",
        "string_process": "process kaijuGetDB {\n  label 'kaiju'    \n  if (params.cloudProcess) { \n    publishDir \"${params.cloudDatabase}/kaiju/\", mode: 'copy', pattern: \"nr_euk\" \n  }\n  else { \n    storeDir \"nextflow-autodownload-databases/kaiju/\" \n  }  \n\n  output:\n    file(\"nr_euk\")\n\n  script:\n    \"\"\"\n    mkdir -p nr_euk\n    cd nr_euk\n\n    #wget http://kaiju.binf.ku.dk/database/kaiju_db_nr_euk_2019-06-25.tgz \n    #tar -xvzf kaiju_db_nr_euk_2019-06-25.tgz\n    #rm kaiju_db_nr_euk_2019-06-25.tgz\n\n    wget http://kaiju.binf.ku.dk/database/kaiju_index.tgz\n    tar -xvzf kaiju_index.tgz\n    rm kaiju_index.tgz\n    mkdir nr_euk\n    mv kaiju_db.fmi nr_euk/kaiju_db_nr_euk.fmi\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    mkdir -p nr_euk\n    cd nr_euk\n\n    #wget http://kaiju.binf.ku.dk/database/kaiju_db_nr_euk_2019-06-25.tgz \n    #tar -xvzf kaiju_db_nr_euk_2019-06-25.tgz\n    #rm kaiju_db_nr_euk_2019-06-25.tgz\n\n    wget http://kaiju.binf.ku.dk/database/kaiju_index.tgz\n    tar -xvzf kaiju_index.tgz\n    rm kaiju_index.tgz\n    mkdir nr_euk\n    mv kaiju_db.fmi nr_euk/kaiju_db_nr_euk.fmi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'kaiju' if (params.cloudProcess) { publishDir \"${params.cloudDatabase}/kaiju/\", mode: 'copy', pattern: \"nr_euk\" } else { storeDir \"nextflow-autodownload-databases/kaiju/\" }"
        ],
        "when": "",
        "stub": ""
    },
    "hdbscan": {
        "name_process": "hdbscan",
        "string_process": "process hdbscan {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.hdbscan.tsv\"\n      label 'marine_phage_paper_scripts'\n\n    input:\n      tuple val(name), file(umap_clusters) \n\n    output:\n      tuple val(name), file(\"${name}.hdbscan.tsv\")\n\n    script:\n      \"\"\"\n      run_hdbscan.py -p ${name} ${umap_clusters}\n      \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "      \"\"\"\n      run_hdbscan.py -p ${name} ${umap_clusters}\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "umap_clusters"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.hdbscan.tsv\"",
            "label 'marine_phage_paper_scripts'"
        ],
        "when": "",
        "stub": ""
    },
    "medaka": {
        "name_process": "medaka",
        "string_process": "process medaka {\n  label 'medaka'\n        publishDir \"${params.output}/${name}/${params.assemblydir}\", mode: 'copy', pattern: \"${name}_polished.fasta\"\n      input:\n        tuple val(name), file(read), file(consensus) \n      output:\n  \t    tuple val(name), file(\"${name}_polished.fasta\") \n      script:\n        \"\"\"\n      \tmedaka_consensus -i ${read} -d ${consensus} -o polished -t ${task.cpus} -m ${params.model}\n        mv polished/consensus.fasta ${name}_polished.fasta\n      \t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n      \tmedaka_consensus -i ${read} -d ${consensus} -o polished -t ${task.cpus} -m ${params.model}\n        mv polished/consensus.fasta ${name}_polished.fasta\n      \t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "read",
            "consensus"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'medaka'",
            "publishDir \"${params.output}/${name}/${params.assemblydir}\", mode: 'copy', pattern: \"${name}_polished.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "canu": {
        "name_process": "canu",
        "string_process": "process canu {\n    label 'canu'  \n    publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.BIN*.canu.fasta.gz\"\n    errorStrategy{task.exitStatus=1 ?'ignore':'terminate'}\n  input:\n    tuple val(name), file(fastq), file(gsize)\n  output:\n    tuple val(name), file(\"${name}.BIN*.canu.fasta.gz\"), file(gsize)\n  script:\n    \"\"\"\n    GSIZE=\\$(cat ${gsize})\n    BIN=\\$(echo \"${gsize}\" | sed 's/${name}.//g' | sed 's/.gsize//g')\n    canu -p ${name} -d canu_results maxThreads=${task.cpus} maxMemory=16 genomeSize=\\${GSIZE} -correct corOutCoverage=400 stopOnLowCoverage=0 -nanopore-raw ${fastq}\n    mv canu_results/${name}.correctedReads.fasta.gz ${name}.\\${BIN}.canu.fasta.gz\n    \"\"\"\n  }",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    GSIZE=\\$(cat ${gsize})\n    BIN=\\$(echo \"${gsize}\" | sed 's/${name}.//g' | sed 's/.gsize//g')\n    canu -p ${name} -d canu_results maxThreads=${task.cpus} maxMemory=16 genomeSize=\\${GSIZE} -correct corOutCoverage=400 stopOnLowCoverage=0 -nanopore-raw ${fastq}\n    mv canu_results/${name}.correctedReads.fasta.gz ${name}.\\${BIN}.canu.fasta.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "name",
            "fastq",
            "gsize"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'canu'",
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.BIN*.canu.fasta.gz\"",
            "errorStrategy{task.exitStatus=1 ?'ignore':'terminate'}"
        ],
        "when": "",
        "stub": ""
    },
    "flye": {
        "name_process": "flye",
        "string_process": "process flye {\n    label 'flye'  \n    publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.flye.fasta\"\n  input:\n    tuple val(name), file(fastq), file(gsize)\n  output:\n    tuple val(name), file(read), file(\"${name}.flye.fasta\")\n    tuple val(name), file(\"${name}.flye.gfa\") \n  script:\n    \"\"\"\n    GSIZE=\\$(cat ${gsize})\n    flye --plasmids -g \\${GSIZE} --meta -t ${task.cpus} --nano-raw ${fastq} -o assembly\n    mv assembly/assembly.fasta ${name}.fly.fasta\n    mv assembly/assembly_graph.gfa ${name}.fly.gfa\n    \"\"\"\n  }",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    GSIZE=\\$(cat ${gsize})\n    flye --plasmids -g \\${GSIZE} --meta -t ${task.cpus} --nano-raw ${fastq} -o assembly\n    mv assembly/assembly.fasta ${name}.fly.fasta\n    mv assembly/assembly_graph.gfa ${name}.fly.gfa\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "name",
            "fastq",
            "gsize"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name",
            "name"
        ],
        "nb_outputs": 2,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "label 'flye'",
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.flye.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "racon": {
        "name_process": "racon",
        "string_process": "process racon {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}_consensus.fasta\"\n      label 'racon'\n   input:\n      tuple val(name), file(read), file(assembly), file(mapping) \n   output:\n   \ttuple val(name), file(read), file(\"${name}_consensus.fasta\") \n   shell:\n      \"\"\"\n      racon --include-unpolished --quality-threshold=9 -t ${task.cpus} ${read} ${mapping} ${assembly} > ${name}_consensus.fasta\n      \"\"\"\n  }",
        "nb_lignes_process": 10,
        "string_script": "      \"\"\"\n      racon --include-unpolished --quality-threshold=9 -t ${task.cpus} ${read} ${mapping} ${assembly} > ${name}_consensus.fasta\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "name",
            "read",
            "assembly",
            "mapping"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}_consensus.fasta\"",
            "label 'racon'"
        ],
        "when": "",
        "stub": ""
    },
    "minimap2": {
        "name_process": "minimap2",
        "string_process": "process minimap2 {\n  publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.paf\"\n  label 'minimap2'\n      input:\n  \t    tuple val(name), file(read), file(assembly) \n      output:\n        tuple val(name), file(read), file(assembly), file(\"${name}.paf\") \n      script:\n        \"\"\"\n      \tminimap2 -x map-ont -t ${task.cpus} ${assembly} ${read} > ${name}.paf\n        \"\"\"\n      }",
        "nb_lignes_process": 10,
        "string_script": "        \"\"\"\n      \tminimap2 -x map-ont -t ${task.cpus} ${assembly} ${read} > ${name}.paf\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "name",
            "read",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.paf\"",
            "label 'minimap2'"
        ],
        "when": "",
        "stub": ""
    },
    "umap": {
        "name_process": "umap",
        "string_process": "process umap {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.umap.tsv\"\n      label 'marine_phage_paper_scripts'\n\n    input:\n      tuple val(name), file(kmer_freqs) \n\n    output:\n      tuple val(name), file(\"${name}.umap.tsv\")\n\n    script:\n      \"\"\"\n      run_umap.py -p ${name} ${kmer_freqs}\n      \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "      \"\"\"\n      run_umap.py -p ${name} ${kmer_freqs}\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "kmer_freqs"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.umap.tsv\"",
            "label 'marine_phage_paper_scripts'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_reads": {
        "name_process": "filter_reads",
        "string_process": "process filter_reads {\n      publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.filtered.fastq\"\n      label 'ucsc'\n\n    input:\n      tuple val(name), file(kaiju_filtered), file(fastq) \n    \n    output:\n      tuple val(name), file(\"${name}.filtered.fastq\")\n      tuple val(name), file(\"${name}.filtered.fasta\")\n    \n    shell:\n    \"\"\"\n    sed '/^@/!d;s//>/;N' ${fastq} > ${name}.fasta\n    faSomeRecords ${name}.fasta ${kaiju_filtered} ${name}.filtered.fasta\n    faToFastq ${name}.filtered.fasta ${name}.filtered.fastq\n    rm -f ${name}.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    sed '/^@/!d;s//>/;N' ${fastq} > ${name}.fasta\n    faSomeRecords ${name}.fasta ${kaiju_filtered} ${name}.filtered.fasta\n    faToFastq ${name}.filtered.fasta ${name}.filtered.fastq\n    rm -f ${name}.fasta\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "kaiju_filtered",
            "fastq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name",
            "name"
        ],
        "nb_outputs": 2,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.filtered.fastq\"",
            "label 'ucsc'"
        ],
        "when": "",
        "stub": ""
    },
    "krona": {
        "name_process": "krona",
        "string_process": "process krona {\n    publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.kaiju.html\"\n    label 'krona'  \n  input:\n    tuple val(name), file(krona_file)\n  output:\n    file(\"${name}.kaiju.html\")\n  script:\n    \"\"\"\n    ktImportText -o ${name}.kaiju.html ${krona_file}\n    \"\"\"\n  }",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n    ktImportText -o ${name}.kaiju.html ${krona_file}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "krona_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "hoelzer__nanovirus",
        "directive": [
            "publishDir \"${params.output}/${name}/\", mode: 'copy', pattern: \"${name}.kaiju.html\"",
            "label 'krona'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "uncompressInputVCF": {
        "name_process": "uncompressInputVCF",
        "string_process": "\nprocess uncompressInputVCF {\n\n    input:\n        path \"source.vcf\"\n\n    output:\n        path \"uncompressed.vcf\", emit: vcf_file\n\n    script:\n        if ( file(params.vcffile).getExtension() == 'gz' )\n            \"\"\"\n            gunzip -c source.vcf > uncompressed.vcf\n            \"\"\"\n        else\n            \"\"\"\n            ln -nfs source.vcf uncompressed.vcf\n            \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        if ( file(params.vcffile).getExtension() == 'gz' )\n            \"\"\"\n            gunzip -c source.vcf > uncompressed.vcf\n            \"\"\"\n        else\n            \"\"\"\n            ln -nfs source.vcf uncompressed.vcf\n            \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "filterInputVCF": {
        "name_process": "filterInputVCF",
        "string_process": "\nprocess filterInputVCF {\n\n    input:\n        path \"source.vcf\"\n        path \"genome_fai\"\n\n    output:\n        path \"filtered.vcf\", emit: filtered_vcf_file\n        path \"kept.vcf\", emit: kept_vcf_file\n        path \"count.yml\", emit: count_yml\n\n    script:\n    \"\"\"\n    awk '{ print \\$1\"\\\\t1\\\\t\"\\$2-1;}' genome_fai > center_regions.bed\n    awk '{ print \\$1\"\\\\t0\\\\t1\"; print \\$1\"\\\\t\"\\$2-1\"\\\\t\"\\$2;}' genome_fai > edge_regions.bed\n    bcftools filter --targets-file center_regions.bed source.vcf | tee kept.vcf |  grep -v '^#' | wc -l > all_count.txt\n    bcftools filter --targets-file edge_regions.bed  source.vcf | grep -v '^#' | tee filtered.vcf | wc -l > filtered_count.txt\n    cat <(cat *_count.txt | awk '{sum += \\$1} END{print \"all: \"sum}') <(cat filtered_count.txt | awk '{print \"filtered: \"\\$1}') > count.yml\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    awk '{ print \\$1\"\\\\t1\\\\t\"\\$2-1;}' genome_fai > center_regions.bed\n    awk '{ print \\$1\"\\\\t0\\\\t1\"; print \\$1\"\\\\t\"\\$2-1\"\\\\t\"\\$2;}' genome_fai > edge_regions.bed\n    bcftools filter --targets-file center_regions.bed source.vcf | tee kept.vcf |  grep -v '^#' | wc -l > all_count.txt\n    bcftools filter --targets-file edge_regions.bed  source.vcf | grep -v '^#' | tee filtered.vcf | wc -l > filtered_count.txt\n    cat <(cat *_count.txt | awk '{sum += \\$1} END{print \"all: \"sum}') <(cat filtered_count.txt | awk '{print \"filtered: \"\\$1}') > count.yml\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "storeVCFHeader": {
        "name_process": "storeVCFHeader",
        "string_process": "\nprocess storeVCFHeader {\n\n    input:\n        path \"source.vcf\"\n\n    output:\n        path \"vcf_header.txt\", emit: vcf_header\n\n    \"\"\"\n    bcftools view --header-only source.vcf > vcf_header.txt\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    bcftools view --header-only source.vcf > vcf_header.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generateRemappedVCF": {
        "name_process": "generateRemappedVCF",
        "string_process": "\nprocess generateRemappedVCF {\n\n    input:\n        path \"vcf_header.txt\"\n        path \"variants_remapped_sorted.vcf\"\n\n    output:\n        path \"variants_remapped_sorted_with_header.vcf\", emit: final_vcf_with_header\n\n    \"\"\"\n    # Create list of contigs/chromosomes to be added to the header\n    cut -f 1 variants_remapped_sorted.vcf | sort -u > contig_names.txt\n    while read CHR; do echo \"##contig=<ID=\\${CHR}>\"; done < contig_names.txt > contigs.txt\n    # Add the reference assembly\n    echo \"##reference=${params.newgenome}\" >> contigs.txt\n\n    # Copy everything that isn't #CHROM (the column titles), ##contig or ##reference from the old header to a temp\n    awk '(\\$1 !~ /^##contig/ && \\$1 !~ /^##reference/ && \\$1 !~ /^#CHROM/) {print \\$0}' vcf_header.txt > temp_header.txt\n\n    # Add variant remapping INFO definition to the header\n    echo -e '##INFO=<ID=st,Number=1,Type=String,Description=\"Strand change observed in the alignment.\">' >> temp_header.txt\n    echo -e '##INFO=<ID=rac,Number=1,Type=String,Description=\"Reference allele change during the alignment.\">' >> temp_header.txt\n    echo -e '##INFO=<ID=nra,Number=0,Type=Flag,Description=\"Novel reference allele that was not observed in the previous set of alternate\">' >> temp_header.txt\n    echo -e '##INFO=<ID=zlr,Number=0,Type=Flag,Description=\"Zero length allele. Had to be expanded from the reference.\">' >> temp_header.txt\n    # Add the two headers together and add the column names\n    cat temp_header.txt contigs.txt > final_header.txt\n    tail -n 1 vcf_header.txt >> final_header.txt\n    cat final_header.txt variants_remapped_sorted.vcf > variants_remapped_sorted_with_header.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n    # Create list of contigs/chromosomes to be added to the header\n    cut -f 1 variants_remapped_sorted.vcf | sort -u > contig_names.txt\n    while read CHR; do echo \"##contig=<ID=\\${CHR}>\"; done < contig_names.txt > contigs.txt\n    # Add the reference assembly\n    echo \"##reference=${params.newgenome}\" >> contigs.txt\n\n    # Copy everything that isn't #CHROM (the column titles), ##contig or ##reference from the old header to a temp\n    awk '(\\$1 !~ /^##contig/ && \\$1 !~ /^##reference/ && \\$1 !~ /^#CHROM/) {print \\$0}' vcf_header.txt > temp_header.txt\n\n    # Add variant remapping INFO definition to the header\n    echo -e '##INFO=<ID=st,Number=1,Type=String,Description=\"Strand change observed in the alignment.\">' >> temp_header.txt\n    echo -e '##INFO=<ID=rac,Number=1,Type=String,Description=\"Reference allele change during the alignment.\">' >> temp_header.txt\n    echo -e '##INFO=<ID=nra,Number=0,Type=Flag,Description=\"Novel reference allele that was not observed in the previous set of alternate\">' >> temp_header.txt\n    echo -e '##INFO=<ID=zlr,Number=0,Type=Flag,Description=\"Zero length allele. Had to be expanded from the reference.\">' >> temp_header.txt\n    # Add the two headers together and add the column names\n    cat temp_header.txt contigs.txt > final_header.txt\n    tail -n 1 vcf_header.txt >> final_header.txt\n    cat final_header.txt variants_remapped_sorted.vcf > variants_remapped_sorted_with_header.vcf\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generateUnmappedVCF": {
        "name_process": "generateUnmappedVCF",
        "string_process": "\nprocess generateUnmappedVCF {\n\n    publishDir outfile_dir,\n        overwrite: true,\n        mode: \"copy\"\n\n    input:\n        path \"original_header.txt\"\n        path \"unmapped_variants.vcf\"\n\n    output:\n        path \"${outfile_basename_without_ext}_unmapped.vcf\", emit: original_vcf_with_header\n\n    \"\"\"\n    # Add header to the vcf file:\n    cat original_header.txt unmapped_variants.vcf >  \"${outfile_basename_without_ext}_unmapped.vcf\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    # Add header to the vcf file:\n    cat original_header.txt unmapped_variants.vcf >  \"${outfile_basename_without_ext}_unmapped.vcf\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "publishDir outfile_dir , overwrite: true , mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "sortVCF": {
        "name_process": "sortVCF",
        "string_process": "\nprocess sortVCF {\n\n    input:\n        path \"variants_remapped.vcf\"\n\n    output:\n        path \"variants_remapped_sorted.vcf.gz\", emit: variants_remapped_sorted_gz\n\n    \"\"\"\n    bgzip variants_remapped.vcf\n    bcftools sort -T . -o variants_remapped_sorted.vcf.gz -Oz variants_remapped.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n    bgzip variants_remapped.vcf\n    bcftools sort -T . -o variants_remapped_sorted.vcf.gz -Oz variants_remapped.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "normaliseAnOutput": {
        "name_process": "normaliseAnOutput",
        "string_process": "\nprocess normaliseAnOutput {\n\n    publishDir outfile_dir,\n        overwrite: true,\n        mode: \"copy\"\n\n    input:\n        path \"variants_remapped_sorted.vcf.gz\"\n        path \"genome.fa\"\n\n    output:\n        path \"${outfile_basename}\", emit: final_output_vcf\n\n    \"\"\"\n    bcftools norm --check-ref e -f genome.fa  variants_remapped_sorted.vcf.gz -o ${outfile_basename} -O v\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    bcftools norm --check-ref e -f genome.fa  variants_remapped_sorted.vcf.gz -o ${outfile_basename} -O v\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "publishDir outfile_dir , overwrite: true , mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "outputStats": {
        "name_process": "outputStats",
        "string_process": "\nprocess outputStats {\n\n    publishDir outfile_dir,\n        overwrite: true,\n        mode: \"copy\"\n\n    input:\n        path \"summary\"\n\n    output:\n        path \"${outfile_basename_without_ext}_counts.yml\"\n\n    \"\"\"\n    ln -s summary \"${outfile_basename_without_ext}_counts.yml\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    ln -s summary \"${outfile_basename_without_ext}_counts.yml\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "publishDir outfile_dir , overwrite: true , mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "combineUnmappedVCF": {
        "name_process": "combineUnmappedVCF",
        "string_process": "\nprocess combineUnmappedVCF {\n    input:\n        path \"variants1.vcf\"\n        path \"variants2.vcf\"\n\n    output:\n        path \"merge.vcf\", emit: merge_vcf\n\n    \"\"\"\n    cat variants1.vcf variants2.vcf > merge.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    cat variants1.vcf variants2.vcf > merge.vcf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "combineVCF": {
        "name_process": "combineVCF",
        "string_process": "\nprocess combineVCF {\n    input:\n        path \"variants1.vcf\"\n        path \"variants2.vcf\"\n        path \"variants3.vcf\"\n    output:\n        path \"merge.vcf\", emit: merge_vcf\n\n    \"\"\"\n    cat variants1.vcf variants2.vcf variants3.vcf > merge.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    cat variants1.vcf variants2.vcf variants3.vcf > merge.vcf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "combineYaml": {
        "name_process": "combineYaml",
        "string_process": "\nprocess combineYaml {\n    input:\n        path \"initial_yml\"\n        path \"round1.yml\"\n        path \"round2.yml\"\n        path \"round3.yml\"\n\n    output:\n        path \"merge.yml\", emit: merge_yml\n\n    \"\"\"\n    cat initial_yml round1.yml round2.yml round3.yml > merge.yml\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    cat initial_yml round1.yml round2.yml round3.yml > merge.yml\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "convertVCFToBed": {
        "name_process": "convertVCFToBed",
        "string_process": "\nprocess convertVCFToBed {\n\n    input:\n        path \"source.vcf\"\n\n    output:\n        path \"variants.bed\", emit: variants_bed\n\n    '''\n    # Convert the vcf file to bed format:\n    #  - Remove all headers\n    #  - Switch to 0 based coordinates system\n    #  - Add the reference allele so it can be used in flankingRegionBed to adjust the position of the right flank\n    #  - add all VCF fields separated by 2 characters pipe and caret (|^) to avoid impacting existing formatting of\n    #    the VCF line. The sub replacing percent is to protect the % character that would be interpreted by printf\n    #    otherwise. the sub replacing space is to prevent bedtools from using them as a field separator\n    awk -F '\\\\t' '{ if (!/^#/){ \\\n                    printf $1\"\\\\t\"$2-1\"\\\\t\"$2\"\\\\t\"$1; \\\n                    for (i=2; i<=NF; i++){ gsub(/%/, \"%%\", $i); gsub(/ /, \"\u00a3\u20ac\", $i); printf \"|^\"$i }; print \"\\\\t\"$4}; \\\n                  }' source.vcf \\\n                  > variants.bed\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "'''\n    # Convert the vcf file to bed format:\n    #  - Remove all headers\n    #  - Switch to 0 based coordinates system\n    #  - Add the reference allele so it can be used in flankingRegionBed to adjust the position of the right flank\n    #  - add all VCF fields separated by 2 characters pipe and caret (|^) to avoid impacting existing formatting of\n    #    the VCF line. The sub replacing percent is to protect the % character that would be interpreted by printf\n    #    otherwise. the sub replacing space is to prevent bedtools from using them as a field separator\n    awk -F '\\\\t' '{ if (!/^#/){ \\\n                    printf $1\"\\\\t\"$2-1\"\\\\t\"$2\"\\\\t\"$1; \\\n                    for (i=2; i<=NF; i++){ gsub(/%/, \"%%\", $i); gsub(/ /, \"\u00a3\u20ac\", $i); printf \"|^\"$i }; print \"\\\\t\"$4}; \\\n                  }' source.vcf \\\n                  > variants.bed\n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "flankingRegionBed": {
        "name_process": "flankingRegionBed",
        "string_process": "\nprocess flankingRegionBed {\n\n    input:\n        path \"variants.bed\"\n        path \"genome.chrom.sizes\"\n        val flankingseq\n\n    output:\n        path \"flanking_r1.bed\", emit: flanking_r1_bed\n        path \"flanking_r2.bed\", emit: flanking_r2_bed\n\n    script:\n                                                                                   \n                                                                                          \n    flankingseq = flankingseq - 1\n    \"\"\"\n    # Adjust the end position of the flank to be one base upstream of the variant\n    awk 'BEGIN{OFS=\"\\\\t\"}{\\$2=\\$2-1; \\$3=\\$3-1; print \\$0}' variants.bed \\\n        | bedtools slop  -g genome.chrom.sizes -l $flankingseq -r 0  > flanking_r1.bed\n\n    # Adjust the start position of the flank to be one base downstream of the end of variant (\\$5 is the reference allele)\n    awk 'BEGIN{OFS=\"\\\\t\"}{ \\$2=\\$2+length(\\$5); \\$3=\\$3+length(\\$5); print \\$0}' variants.bed \\\n        | bedtools slop  -g genome.chrom.sizes -l 0 -r $flankingseq  > flanking_r2.bed\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    flankingseq = flankingseq - 1\n    \"\"\"\n    # Adjust the end position of the flank to be one base upstream of the variant\n    awk 'BEGIN{OFS=\"\\\\t\"}{\\$2=\\$2-1; \\$3=\\$3-1; print \\$0}' variants.bed \\\n        | bedtools slop  -g genome.chrom.sizes -l $flankingseq -r 0  > flanking_r1.bed\n\n    # Adjust the start position of the flank to be one base downstream of the end of variant (\\$5 is the reference allele)\n    awk 'BEGIN{OFS=\"\\\\t\"}{ \\$2=\\$2+length(\\$5); \\$3=\\$3+length(\\$5); print \\$0}' variants.bed \\\n        | bedtools slop  -g genome.chrom.sizes -l 0 -r $flankingseq  > flanking_r2.bed\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "flankingseq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "flankingRegionFasta": {
        "name_process": "flankingRegionFasta",
        "string_process": "\nprocess flankingRegionFasta {\n\n    memory '4 GB'\n\n    input:  \n        path \"flanking_r1.bed\"\n        path \"flanking_r2.bed\"\n        path \"genome.fa\"\n        path \"genome.fa.fai\"\n    \n    output:\n        path \"variants_read1.fa\", emit: variants_read1\n        path \"variants_read2.fa\", emit: variants_read2\n\n    '''\n    # Get the fasta sequences for these intervals\n    bedtools getfasta -fi genome.fa -bed flanking_r1.bed -fo variants_read1.fa\n    bedtools getfasta -fi genome.fa -bed flanking_r2.bed -fo variants_read2.fa\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "'''\n    # Get the fasta sequences for these intervals\n    bedtools getfasta -fi genome.fa -bed flanking_r1.bed -fo variants_read1.fa\n    bedtools getfasta -fi genome.fa -bed flanking_r2.bed -fo variants_read2.fa\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "memory '4 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "extractVariantInfoToFastaHeader": {
        "name_process": "extractVariantInfoToFastaHeader",
        "string_process": "\nprocess extractVariantInfoToFastaHeader {\n\n    memory '6GB'\n\n    input:  \n        path \"flanking_r1.bed\"\n        path \"flanking_r2.bed\"\n        path \"variants_read1.fa\"\n        path \"variants_read2.fa\"\n\n    output:\n        path \"interleaved.fa\", emit: interleaved_fasta\n\n                                                                \n                                                                           \n    '''\n    # Store variant position in the file to have a unique name\n    awk '{print \">\" NR }' flanking_r1.bed > position.txt\n\n    # Store position of the variant in the file and replace '\u00a3\u20ac' with the original whitespace from convertVCFToBed\n    cut -f 4 flanking_r1.bed | sed 's/\u00a3\u20ac/ /g' > vcf_fields.txt\n\n    # Paste the names, variant bases, then fasta sequences into a new file\n    # A space will be inserted between the position and the vcf fields\n    # Then a newline is inserted between the vcf fields and the sequence\n    # The vcf fields are regarded as comment to the fasta entry.\n    paste -d ' \\\\n' position.txt vcf_fields.txt <(grep -v '^>' variants_read1.fa) > variant_read1.out.fa\n    paste -d '\\\\n' position.txt <(grep -v '^>' variants_read2.fa) > variant_read2.out.fa\n\n    paste variant_read1.out.fa variant_read2.out.fa | paste - - | awk -F \"\\\\t\" 'BEGIN {OFS=\"\\\\n\"} {print $1,$3,$2,$4}' > interleaved.fa\n    '''\n}",
        "nb_lignes_process": 31,
        "string_script": "'''\n    # Store variant position in the file to have a unique name\n    awk '{print \">\" NR }' flanking_r1.bed > position.txt\n\n    # Store position of the variant in the file and replace '\u00a3\u20ac' with the original whitespace from convertVCFToBed\n    cut -f 4 flanking_r1.bed | sed 's/\u00a3\u20ac/ /g' > vcf_fields.txt\n\n    # Paste the names, variant bases, then fasta sequences into a new file\n    # A space will be inserted between the position and the vcf fields\n    # Then a newline is inserted between the vcf fields and the sequence\n    # The vcf fields are regarded as comment to the fasta entry.\n    paste -d ' \\\\n' position.txt vcf_fields.txt <(grep -v '^>' variants_read1.fa) > variant_read1.out.fa\n    paste -d '\\\\n' position.txt <(grep -v '^>' variants_read2.fa) > variant_read2.out.fa\n\n    paste variant_read1.out.fa variant_read2.out.fa | paste - - | awk -F \"\\\\t\" 'BEGIN {OFS=\"\\\\n\"} {print $1,$3,$2,$4}' > interleaved.fa\n    '''",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "memory '6GB'"
        ],
        "when": "",
        "stub": ""
    },
    "split_fasta": {
        "name_process": "split_fasta",
        "string_process": "\nprocess split_fasta {\n\n    input:\n        path interleaved_fasta\n        val chunk_size\n\n    output:\n        path(\"read_chunk-*\"), emit: read_split\n\n    script:\n    if (interleaved_fasta.size() > 0)\n        \"\"\"\n        split -a 5 -d -l ${chunk_size * 4} ${interleaved_fasta} read_chunk-\n        \"\"\"\n    else\n        \"\"\"\n        ln -s ${interleaved_fasta} read_chunk-00001\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    if (interleaved_fasta.size() > 0)\n        \"\"\"\n        split -a 5 -d -l ${chunk_size * 4} ${interleaved_fasta} read_chunk-\n        \"\"\"\n    else\n        \"\"\"\n        ln -s ${interleaved_fasta} read_chunk-00001\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "interleaved_fasta",
            "chunk_size"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "alignWithMinimap": {
        "name_process": "alignWithMinimap",
        "string_process": "\nprocess alignWithMinimap {\n\n                                                                                \n                                                                      \n    memory { Math.max(file(params.newgenome).size() * 10, 2000000000) * task.attempt + ' B' }\n\n    errorStrategy { task.exitStatus == 130 ? 'retry' : 'terminate' }\n    maxRetries 3\n\n    input:\n                                                                                     \n        each path(reads)\n                                                                 \n        path \"genome.fa\"\n        val flanklength\n\n    output:\n        path \"reads_aligned.bam\", emit: reads_aligned_bam\n\n\n    script:\n    if (flanklength < 500)\n        \"\"\"\n        # Options used by the 'sr' preset with some modifications:\n        # -O6,16 instead of -O12,32 --> reduce indel cost\n        # -B5 instead of -B10 --> reduce mismatch cost\n        # --end-bonus 20 --> bonus score when the end of the read aligns to mimic global alignment.\n        # --secondary=yes -N 2 --> allow up to 2 secondary alignments\n        # -y option will take the comment from the fasta entry and output it\n        # the awk script will convert this comment in valid SAM tag\n        minimap2 -k21 -w11 --sr --frag=yes -A2 -B5 -O6,16 --end-bonus 20 -E2,1 -r50 -p.5 -z 800,200\\\n                 -f1000,5000 -n2 -m20 -s40 -g200 -2K50m --heap-sort=yes --secondary=yes -N 2 -y \\\n                 -a genome.fa ${reads} | \\\n                 awk -F '\\\\t' 'BEGIN{OFS=\"\\\\t\"}{if(!/^@/){\\$NF=\"vr:Z:\"\\$NF}; print \\$0;}' | \\\n                 samtools view -bS - > reads_aligned.bam\n        \"\"\"\n    else\n        \"\"\"\n        minimap2 -k19 -w19 -A2 -B5 -O6,16 --end-bonus 20 -E3,1 -s200 -z200 -N50 --min-occ-floor=100 \\\n                 --secondary=yes -N 2 -y \\\n                 -a genome.fa ${reads} | \\\n                 awk -F '\\\\t' 'BEGIN{OFS=\"\\\\t\"}{if(!/^@/){\\$NF=\"vr:Z:\"\\$NF}; print \\$0;}' | \\\n                 samtools view -bS - > reads_aligned.bam\n        \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    if (flanklength < 500)\n        \"\"\"\n        # Options used by the 'sr' preset with some modifications:\n        # -O6,16 instead of -O12,32 --> reduce indel cost\n        # -B5 instead of -B10 --> reduce mismatch cost\n        # --end-bonus 20 --> bonus score when the end of the read aligns to mimic global alignment.\n        # --secondary=yes -N 2 --> allow up to 2 secondary alignments\n        # -y option will take the comment from the fasta entry and output it\n        # the awk script will convert this comment in valid SAM tag\n        minimap2 -k21 -w11 --sr --frag=yes -A2 -B5 -O6,16 --end-bonus 20 -E2,1 -r50 -p.5 -z 800,200\\\n                 -f1000,5000 -n2 -m20 -s40 -g200 -2K50m --heap-sort=yes --secondary=yes -N 2 -y \\\n                 -a genome.fa ${reads} | \\\n                 awk -F '\\\\t' 'BEGIN{OFS=\"\\\\t\"}{if(!/^@/){\\$NF=\"vr:Z:\"\\$NF}; print \\$0;}' | \\\n                 samtools view -bS - > reads_aligned.bam\n        \"\"\"\n    else\n        \"\"\"\n        minimap2 -k19 -w19 -A2 -B5 -O6,16 --end-bonus 20 -E3,1 -s200 -z200 -N50 --min-occ-floor=100 \\\n                 --secondary=yes -N 2 -y \\\n                 -a genome.fa ${reads} | \\\n                 awk -F '\\\\t' 'BEGIN{OFS=\"\\\\t\"}{if(!/^@/){\\$NF=\"vr:Z:\"\\$NF}; print \\$0;}' | \\\n                 samtools view -bS - > reads_aligned.bam\n        \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "REDUCE",
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/reduce",
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "REDUCE",
                "uri": "https://bio.tools/reduce",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0445",
                                    "term": "Transcription factor binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3629",
                                    "term": "Deisotoping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcriptional regulatory element prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3629",
                                    "term": "Deconvolution"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcription regulatory element prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Uses a motif-based regression method for the identification of TFBS (transcription factor binding sites) from microarray data in yeast, worm and fly. A free registration is required.",
                "homepage": "http://bussemaker.bio.columbia.edu/reduce/"
            },
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "reads",
            "flanklength"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "memory { Math.max(file(params.newgenome).size() * 10, 2000000000) * task.attempt + ' B' }",
            "errorStrategy { task.exitStatus == 130 ? 'retry' : 'terminate' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "sortByName": {
        "name_process": "sortByName",
        "string_process": "\nprocess sortByName {\n\n    input:\n        path \"reads_aligned.bam\"\n\n    output:\n        path \"reads_aligned_name_sorted.bam\", emit: reads_aligned_sorted_bam\n\n    \"\"\"\n    samtools sort -n -O BAM -o reads_aligned_name_sorted.bam reads_aligned.bam\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    samtools sort -n -O BAM -o reads_aligned_name_sorted.bam reads_aligned.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "alignWithBowtie": {
        "name_process": "alignWithBowtie",
        "string_process": "\nprocess alignWithBowtie {\n\n                                                                                \n    memory Math.max(file(params.newgenome).size() * 5, 1073741824) + ' B'\n\n    input:\n        path \"variant_read1.fa\"\n        path \"variant_read2.fa\"\n                                                                                        \n        file \"bowtie_index/*\"\n\n    output:\n        path \"reads_aligned.bam\", emit: reads_aligned_bam\n\n\n    \"\"\"\n    bowtie2 -k 2 --end-to-end --np 0 --sam-append-comment -f -x bowtie_index/bowtie_index \\\n      -1 variant_read1.fa -2 variant_read2.fa \\\n      | awk -F '\\\\t' 'BEGIN{OFS=\"\\\\t\"}{if(!/^@/){\\$NF=\"vr:Z:\"\\$NF}; print \\$0;}' \\\n      | samtools view -bS - > reads_aligned.bam\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    bowtie2 -k 2 --end-to-end --np 0 --sam-append-comment -f -x bowtie_index/bowtie_index \\\n      -1 variant_read1.fa -2 variant_read2.fa \\\n      | awk -F '\\\\t' 'BEGIN{OFS=\"\\\\t\"}{if(!/^@/){\\$NF=\"vr:Z:\"\\$NF}; print \\$0;}' \\\n      | samtools view -bS - > reads_aligned.bam\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "memory Math.max(file(params.newgenome).size() * 5, 1073741824) + ' B'"
        ],
        "when": "",
        "stub": ""
    },
    "readsToRemappedVariants": {
        "name_process": "readsToRemappedVariants",
        "string_process": "\nprocess readsToRemappedVariants {\n\n    input:\n        path \"reads.bam\"\n        path \"genome.fa\"\n        val flank_length\n        val filter_align_with_secondary\n\n    output:\n        path \"variants_remapped.vcf\", emit: variants_remapped\n        path \"variants_unmapped.vcf\", emit: variants_unmapped\n        path \"summary.yml\", emit: summary_yml\n\n    script:\n        if (filter_align_with_secondary)\n            \"\"\"\n            # Ensure that we will use the reads_to_remapped_variants.py from this repo\n            ${baseDir}/variant_remapping_tools/reads_to_remapped_variants.py -i reads.bam \\\n                -o variants_remapped.vcf  --newgenome genome.fa --out_failed_file variants_unmapped.vcf \\\n                --flank_length $flank_length --summary summary.yml --filter_align_with_secondary\n            \"\"\"\n        else\n            \"\"\"\n            # Ensure that we will use the reads_to_remapped_variants.py from this repo\n            ${baseDir}/variant_remapping_tools/reads_to_remapped_variants.py -i reads*.bam \\\n                -o variants_remapped.vcf  --newgenome genome.fa --out_failed_file variants_unmapped.vcf \\\n                --flank_length $flank_length --summary summary.yml\n           \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "        if (filter_align_with_secondary)\n            \"\"\"\n            # Ensure that we will use the reads_to_remapped_variants.py from this repo\n            ${baseDir}/variant_remapping_tools/reads_to_remapped_variants.py -i reads.bam \\\n                -o variants_remapped.vcf  --newgenome genome.fa --out_failed_file variants_unmapped.vcf \\\n                --flank_length $flank_length --summary summary.yml --filter_align_with_secondary\n            \"\"\"\n        else\n            \"\"\"\n            # Ensure that we will use the reads_to_remapped_variants.py from this repo\n            ${baseDir}/variant_remapping_tools/reads_to_remapped_variants.py -i reads*.bam \\\n                -o variants_remapped.vcf  --newgenome genome.fa --out_failed_file variants_unmapped.vcf \\\n                --flank_length $flank_length --summary summary.yml\n           \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "flank_length",
            "filter_align_with_secondary"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge_variants": {
        "name_process": "merge_variants",
        "string_process": "\nprocess merge_variants {\n    input:\n        path \"remapped*.vcf\"\n        path \"unmapped*.vcf\"\n        path \"summary*.yml\"\n\n    output:\n       path \"variants_remapped.vcf\", emit: variants_remapped\n       path \"variants_unmapped.vcf\", emit: variants_unmapped\n       path \"output_summary.yml\", emit: summary_yml\n\n    \"\"\"\n    cat remapped*.vcf > variants_remapped.vcf\n    cat unmapped*.vcf > variants_unmapped.vcf\n    ${baseDir}/variant_remapping_tools/merge_yaml.py --input summary*.yml --output output_summary.yml\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    cat remapped*.vcf > variants_remapped.vcf\n    cat unmapped*.vcf > variants_unmapped.vcf\n    ${baseDir}/variant_remapping_tools/merge_yaml.py --input summary*.yml --output output_summary.yml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "bowtieGenomeIndex": {
        "name_process": "bowtieGenomeIndex",
        "string_process": "\nprocess bowtieGenomeIndex {\n                                                                                 \n    memory Math.max(file(params.newgenome).size() * 10, 1073741824) + ' B'\n\n    input:\n        path \"genome_fasta\"\n\n    output:\n        path \"bowtie_index.*.bt2\", emit: bowtie_indexes\n\n    \"\"\"\n    bowtie2-build genome_fasta bowtie_index\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    bowtie2-build genome_fasta bowtie_index\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [
            "memory Math.max(file(params.newgenome).size() * 10, 1073741824) + ' B'"
        ],
        "when": "",
        "stub": ""
    },
    "samtoolsFaidx": {
        "name_process": "samtoolsFaidx",
        "string_process": "\nprocess samtoolsFaidx {\n\n    input:\n        path \"genome_basename\"\n\n    output:\n        path \"genome_basename.fai\", emit: genome_fai\n\n    \"\"\"\n    samtools faidx genome_basename\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    samtools faidx genome_basename\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "chromSizes": {
        "name_process": "chromSizes",
        "string_process": "\nprocess chromSizes {\n\n    input:\n        path \"genome.fa.fai\"\n\n    output:\n        path \"genome.fa.chrom.sizes\", emit: genome_chrom_sizes\n\n    \"\"\"\n    cut -f1,2 genome.fa.fai > genome.fa.chrom.sizes \n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    cut -f1,2 genome.fa.fai > genome.fa.chrom.sizes \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "EBIvariation__variant-remapping",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
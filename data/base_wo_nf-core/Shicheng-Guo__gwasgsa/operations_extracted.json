{
    "OPERATION_1": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.vcf_file)\n           .ifEmpty { exit 1, \"VCF file containing  not found: ${params.vcf_file}\" }\n           .into { vcf_file; vcfs_to_split }",
        "origin": [
            [
                "params.vcf_file",
                "A"
            ]
        ],
        "gives": [
            [
                "vcf_file",
                "P"
            ],
            [
                "vcfs_to_split",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.gene_loc_file)\n        .into { ch_gene_loc_file; ch_gene_loc_file_2 }",
        "origin": [
            [
                "params.gene_loc_file",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_gene_loc_file",
                "P"
            ],
            [
                "ch_gene_loc_file_2",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(params.set_anot_file)\n        .into { ch_set_anot; ch_set_anot_2 }",
        "origin": [
            [
                "params.set_anot_file",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_set_anot",
                "P"
            ],
            [
                "ch_set_anot_2",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath(params.cov_file)\n        .set { ch_cov }",
        "origin": [
            [
                "params.cov_file",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_cov",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath(params.plink_bed)\n        .ifEmpty { exit 1, \"PLINK binary pedigree file not found: ${params.bed}\" }\n        .set { ch_bed }",
        "origin": [
            [
                "params.plink_bed",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bed",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath(params.plink_bim)\n        .ifEmpty { exit 1, \"PLINK BIM file not found: ${params.bim}\" }\n        .set { ch_bim }",
        "origin": [
            [
                "params.plink_bim",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bim",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath(params.plink_fam)\n        .ifEmpty { exit 1, \"PLINK FAM file not found: ${params.fam}\" }\n        .set { ch_fam }",
        "origin": [
            [
                "params.plink_fam",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fam",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath(params.ref_panel_bed)\n        .ifEmpty { exit 1, \"File not found: ${params.ref_panel_bed}\" }\n        .set { ch_ref_panel_bed }",
        "origin": [
            [
                "params.ref_panel_bed",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_ref_panel_bed",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath(params.ref_panel_bim)\n        .ifEmpty { exit 1, \"File not found: ${params.ref_panel_bim}\" }\n        .set { ch_ref_panel_bim }",
        "origin": [
            [
                "params.ref_panel_bim",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_ref_panel_bim",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(params.ref_panel_fam)\n        .ifEmpty { exit 1, \"File not found: ${params.ref_panel_fam}\" }\n        .set { ch_ref_panel_fam }",
        "origin": [
            [
                "params.ref_panel_fam",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_ref_panel_fam",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.fromPath(params.ref_panel_synonyms)\n        .ifEmpty { exit 1, \"File not found: ${params.ref_panel_synonyms}\" }\n        .set { ch_ref_panel_synonyms }",
        "origin": [
            [
                "params.ref_panel_synonyms",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_ref_panel_synonyms",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-gwasgsa-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/gwasgsa Workflow Summary'\n    section_href: 'https://github.com/nf-core/gwasgsa'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel.fromPath(params.summary_stats)\n        .set { ch_summary_stats }",
        "origin": [
            [
                "params.summary_stats",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_summary_stats",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel.fromPath(params.snp_subset)\n        .ifEmpty { exit 1, \"A .bim file not found: ${params.snp_subset}\" }\n        .set { ch_snp_subset }",
        "origin": [
            [
                "params.snp_subset",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_snp_subset",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "vcfs_to_split\n        .splitCsv(header: true)\n        .map{ row -> [file(row.vcf)] }\n        .set { vcfs }",
        "origin": [
            [
                "vcfs_to_split",
                "P"
            ]
        ],
        "gives": [
            [
                "vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_19": {
        "string": "ch_plink = ch_plink_direct",
        "origin": [
            [
                "ch_plink_direct",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_plink",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "ch_plink_2 = ch_plink_direct_2",
        "origin": [
            [
                "ch_plink_direct_2",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_plink_2",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "ch_plink = ch_plink_ref_panel",
        "origin": [
            [
                "ch_plink_ref_panel",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_plink",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "ch_plink_2 = ch_plink_ref_panel_2",
        "origin": [
            [
                "ch_plink_ref_panel_2",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_plink_2",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "ch_plink = ch_plink_undirect",
        "origin": [
            [
                "ch_plink_undirect",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_plink",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "ch_plink_2 = ch_plink_undirect_2",
        "origin": [
            [
                "ch_plink_undirect_2",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_plink_2",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "ch_snp_p = ch_snp_p_txt",
        "origin": [
            [
                "ch_snp_p_txt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_snp_p",
                "P"
            ]
        ]
    }
}
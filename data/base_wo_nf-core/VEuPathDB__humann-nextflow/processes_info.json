{
    "prepareReadsBunzips": {
        "name_process": "prepareReadsBunzips",
        "string_process": "\nprocess prepareReadsBunzips {\n  label 'download_and_preprocess'\n\n  afterScript \"rm -v reads.tar ${sample}/*fastq* ${sample}.*fastq*\"\n\n  input:\n  tuple val(sample), val(bunzip) from sampleToFastqLocationsBunzips\n\n  output:\n  tuple val(sample), file(\"reads_kneaddata.fastq\") into kneadedReadsBunzips\n\n  script:\n  \"\"\"\n  ${params.wgetCommand} $bunzip -O reads.tar.bz2\n  bunzip2 *.bz2\n  tar -xvf *.tar\n \n  ${params.kneaddataCommand} \\\n    \\$(perl -e 'print join \" \", map {\"--input \\$_\" } grep {\\$_!~/singleton/ } @ARGV' ${sample}/* ) \\\n    --output . --cat-final-output\n\n  mv -v *_kneaddata.fastq reads_kneaddata.fastq\n  test -f reads_kneaddata.fastq\n  \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  ${params.wgetCommand} $bunzip -O reads.tar.bz2\n  bunzip2 *.bz2\n  tar -xvf *.tar\n \n  ${params.kneaddataCommand} \\\n    \\$(perl -e 'print join \" \", map {\"--input \\$_\" } grep {\\$_!~/singleton/ } @ARGV' ${sample}/* ) \\\n    --output . --cat-final-output\n\n  mv -v *_kneaddata.fastq reads_kneaddata.fastq\n  test -f reads_kneaddata.fastq\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "PTest"
        ],
        "tools_url": [
            "https://bio.tools/ptest"
        ],
        "tools_dico": [
            {
                "name": "PTest",
                "uri": "https://bio.tools/ptest",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software for case-control genetic association studies in human gene mapping. The software is based on single-SNP p-values resulting from an association test, for example, the chi-square test comparing genotype or allele frequencies in cases and controls.",
                "homepage": "http://www.jurgott.org/linkage/PTest.html"
            }
        ],
        "inputs": [
            "sampleToFastqLocationsBunzips"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kneadedReadsBunzips"
        ],
        "nb_outputs": 1,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "label 'download_and_preprocess'",
            "afterScript \"rm -v reads.tar ${sample}/*fastq* ${sample}.*fastq*\""
        ],
        "when": "",
        "stub": ""
    },
    "prepareReadsSingle": {
        "name_process": "prepareReadsSingle",
        "string_process": "\nprocess prepareReadsSingle {\n\n  label 'download_and_preprocess'\n\n  afterScript 'rm -v reads.fastq*'\n\n  input:\n  tuple val(sample), val(fastq) from sampleToFastqLocationsSingle\n\n  output:\n  tuple val(sample), file(\"reads_kneaddata.fastq\") into kneadedReadsSingle\n\n  script:\n  \"\"\"\n  ${params.wgetCommand} $fastq -O reads.fastq.gz\n  gunzip *gz\n  ${params.kneaddataCommand} \\\n    --input reads.fastq \\\n    --output .\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  ${params.wgetCommand} $fastq -O reads.fastq.gz\n  gunzip *gz\n  ${params.kneaddataCommand} \\\n    --input reads.fastq \\\n    --output .\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleToFastqLocationsSingle"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kneadedReadsSingle"
        ],
        "nb_outputs": 1,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "label 'download_and_preprocess'",
            "afterScript 'rm -v reads.fastq*'"
        ],
        "when": "",
        "stub": ""
    },
    "prepareReadsSingleSra": {
        "name_process": "prepareReadsSingleSra",
        "string_process": "\nprocess prepareReadsSingleSra {\n\n  label 'download_and_preprocess'\n\n  afterScript 'rm -v reads.fastq*'\n\n  input:\n  tuple val(sample), val(stringWithRunAccession) from sampleToFastqLocationsSingleSra\n\n  output:\n  tuple val(sample), file(\"reads_kneaddata.fastq\") into kneadedReadsSingleSra\n\n  script:\n  \"\"\"\n  getFastqFromSraSingle $stringWithRunAccession reads.fastq\n  ${params.kneaddataCommand} \\\n    --input reads.fastq \\\n    --output .\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  getFastqFromSraSingle $stringWithRunAccession reads.fastq\n  ${params.kneaddataCommand} \\\n    --input reads.fastq \\\n    --output .\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleToFastqLocationsSingleSra"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kneadedReadsSingleSra"
        ],
        "nb_outputs": 1,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "label 'download_and_preprocess'",
            "afterScript 'rm -v reads.fastq*'"
        ],
        "when": "",
        "stub": ""
    },
    "prepareReadsPaired": {
        "name_process": "prepareReadsPaired",
        "string_process": "\nprocess prepareReadsPaired {\n\n  label 'download_and_preprocess'\n\n  afterScript 'rm -v reads.fastq* reads_R.fastq*'\n\n  input:\n  tuple val(sample), val(fastq1), val(fastq2) from sampleToFastqLocationsPaired\n\n  output:\n  tuple val(sample), file(\"reads_kneaddata.fastq\") into kneadedReadsPaired\n\n  script:\n  \"\"\"\n  ${params.wgetCommand} $fastq1 -O reads.fastq.gz\n  ${params.wgetCommand} $fastq2 -O reads_R.fastq.gz\n  gunzip *gz\n  ${params.kneaddataCommand} \\\n    --input reads.fastq --input reads_R.fastq --cat-final-output \\\n    --output .\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  ${params.wgetCommand} $fastq1 -O reads.fastq.gz\n  ${params.wgetCommand} $fastq2 -O reads_R.fastq.gz\n  gunzip *gz\n  ${params.kneaddataCommand} \\\n    --input reads.fastq --input reads_R.fastq --cat-final-output \\\n    --output .\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleToFastqLocationsPaired"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kneadedReadsPaired"
        ],
        "nb_outputs": 1,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "label 'download_and_preprocess'",
            "afterScript 'rm -v reads.fastq* reads_R.fastq*'"
        ],
        "when": "",
        "stub": ""
    },
    "prepareReadsPairedSra": {
        "name_process": "prepareReadsPairedSra",
        "string_process": "\nprocess prepareReadsPairedSra {\n\n  label 'download_and_preprocess'\n\n  afterScript 'rm -v reads.fastq* reads_R.fastq*'\n\n  input:\n  tuple val(sample), val(stringWithRunAccession) from sampleToFastqLocationsPairedSra\n\n  output:\n  tuple val(sample), file(\"reads_kneaddata.fastq\") into kneadedReadsPairedSra\n\n  script:\n  \"\"\"\n  getFastqFromSraPaired $stringWithRunAccession reads.fastq reads_R.fastq\n  ${params.kneaddataCommand} \\\n    --input reads.fastq --input reads_R.fastq --cat-final-output \\\n    --output .\n  \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  getFastqFromSraPaired $stringWithRunAccession reads.fastq reads_R.fastq\n  ${params.kneaddataCommand} \\\n    --input reads.fastq --input reads_R.fastq --cat-final-output \\\n    --output .\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleToFastqLocationsPairedSra"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kneadedReadsPairedSra"
        ],
        "nb_outputs": 1,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "label 'download_and_preprocess'",
            "afterScript 'rm -v reads.fastq* reads_R.fastq*'"
        ],
        "when": "",
        "stub": ""
    },
    "runHumann": {
        "name_process": "runHumann",
        "string_process": "\nprocess runHumann {\n\n  afterScript 'mv -v reads_humann_temp/reads.log humann.log; test -f reads_humann_temp/reads_metaphlan_bugs_list.tsv && mv -v reads_humann_temp/reads_metaphlan_bugs_list.tsv bugs.tsv ; rm -rv reads_humann_temp'\n\n  input:\n  tuple val(sample), file(kneadedReads) from kneadedReads\n\n  output:\n  file(\"${sample}.metaphlan.out\") into taxonAbundances\n  tuple val(sample), file(\"${sample}.gene_abundance.tsv\") into geneAbundances\n  file(\"${sample}.pathway_abundance.tsv\") into pathwayAbundances\n  file(\"${sample}.pathway_coverage.tsv\") into pathwayCoverages\n\n  script:\n  \"\"\"\n  ln -vs $kneadedReads reads.fastq\n  ${params.humannCommand} --input reads.fastq --output .\n\n  mv -v reads_humann_temp/reads_metaphlan_bugs_list.tsv ${sample}.metaphlan.out\n  \n  humann_renorm_table --input reads_genefamilies.tsv --output ${sample}.gene_abundance.tsv --units cpm --update-snames\n\n  mv -v reads_pathabundance.tsv ${sample}.pathway_abundance.tsv\n  mv -v reads_pathcoverage.tsv ${sample}.pathway_coverage.tsv\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  ln -vs $kneadedReads reads.fastq\n  ${params.humannCommand} --input reads.fastq --output .\n\n  mv -v reads_humann_temp/reads_metaphlan_bugs_list.tsv ${sample}.metaphlan.out\n  \n  humann_renorm_table --input reads_genefamilies.tsv --output ${sample}.gene_abundance.tsv --units cpm --update-snames\n\n  mv -v reads_pathabundance.tsv ${sample}.pathway_abundance.tsv\n  mv -v reads_pathcoverage.tsv ${sample}.pathway_coverage.tsv\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kneadedReads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "taxonAbundances",
            "geneAbundances",
            "pathwayAbundances",
            "pathwayCoverages"
        ],
        "nb_outputs": 4,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "afterScript 'mv -v reads_humann_temp/reads.log humann.log; test -f reads_humann_temp/reads_metaphlan_bugs_list.tsv && mv -v reads_humann_temp/reads_metaphlan_bugs_list.tsv bugs.tsv ; rm -rv reads_humann_temp'"
        ],
        "when": "",
        "stub": ""
    },
    "groupFunctionalUnits": {
        "name_process": "groupFunctionalUnits",
        "string_process": "\nprocess groupFunctionalUnits {\n\n  input:\n  tuple val(sample), file(geneAbundances) from geneAbundances\n  each (groupType) from params.functionalUnits\n\n  output:\n  file(\"${sample}.${groupType}.tsv\") into functionAbundances\n\n  script:\n  group=params.unirefXX + \"_\" + groupType\n  groupName=functionalUnitNames[groupType]\n  \"\"\"\n  humann_regroup_table --input $geneAbundances --output ${group}.tsv --groups ${group}\n  humann_rename_table --input ${group}.tsv --output ${sample}.${groupType}.tsv --names ${groupName}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  group=params.unirefXX + \"_\" + groupType\n  groupName=functionalUnitNames[groupType]\n  \"\"\"\n  humann_regroup_table --input $geneAbundances --output ${group}.tsv --groups ${group}\n  humann_rename_table --input ${group}.tsv --output ${sample}.${groupType}.tsv --names ${groupName}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "geneAbundances",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "functionAbundances"
        ],
        "nb_outputs": 1,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "aggregateFunctionAbundances": {
        "name_process": "aggregateFunctionAbundances",
        "string_process": "\nprocess aggregateFunctionAbundances {\n  publishDir params.resultDir, mode: 'move'\n\n  input:\n  file('*') from functionAbundances.collect()\n  each (groupType) from params.functionalUnits\n\n  output:\n  file(\"${groupType}s.tsv\")\n\n  script:\n  \"\"\"\n  joinTablesForGroupType ${groupType}s.tsv $groupType\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  joinTablesForGroupType ${groupType}s.tsv $groupType\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "functionAbundances",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "publishDir params.resultDir, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "aggregateTaxonAbundances": {
        "name_process": "aggregateTaxonAbundances",
        "string_process": "\nprocess aggregateTaxonAbundances {\n  publishDir params.resultDir, mode: 'move'\n\n  input:\n  file('*') from taxonAbundances.collect()\n\n\n  output:\n  file(\"taxon_abundances.tsv\")\n\n  script:\n  '''\n  merge_metaphlan_tables.py *.metaphlan.out \\\n   | grep -v '^#' \\\n   | cut -f 1,3- \\\n   | perl -pe 'if($.==1){s/.metaphlan//g}' \\\n   > taxon_abundances.tsv\n  '''\n}",
        "nb_lignes_process": 18,
        "string_script": "  '''\n  merge_metaphlan_tables.py *.metaphlan.out \\\n   | grep -v '^#' \\\n   | cut -f 1,3- \\\n   | perl -pe 'if($.==1){s/.metaphlan//g}' \\\n   > taxon_abundances.tsv\n  '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxonAbundances"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "publishDir params.resultDir, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "aggregatePathwayAbundances": {
        "name_process": "aggregatePathwayAbundances",
        "string_process": "\nprocess aggregatePathwayAbundances {\n  publishDir params.resultDir, mode: 'move'\n\n  input:\n  file('*') from pathwayAbundances.collect()\n\n  output:\n  file(\"pathway_abundances.tsv\")\n\n  script:\n  \"\"\"\n  joinTablesForGroupType pathway_abundances.tsv pathway_abundance\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  joinTablesForGroupType pathway_abundances.tsv pathway_abundance\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pathwayAbundances"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "publishDir params.resultDir, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "aggregatePathwayCoverages": {
        "name_process": "aggregatePathwayCoverages",
        "string_process": "\nprocess aggregatePathwayCoverages {\n  publishDir params.resultDir, mode: 'move'\n\n  input:\n  file('*') from pathwayCoverages.collect()\n\n  output:\n  file(\"pathway_coverages.tsv\")\n\n  script:\n  \"\"\"\n  joinTablesForGroupType pathway_coverages.tsv pathway_coverage\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  joinTablesForGroupType pathway_coverages.tsv pathway_coverage\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pathwayCoverages"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "VEuPathDB__humann-nextflow",
        "directive": [
            "publishDir params.resultDir, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    }
}
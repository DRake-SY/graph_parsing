{
    "OPERATION_1": {
        "string": "UNIQUE_MATRIX_TYPES = Channel\n                    .of(garnett_matrix_type,\n                        scmap_cluster_matrix_type,\n                        scmap_cell_matrix_type,\n                        scpred_matrix_type)\n                    .filter{ it != null }\n                    .unique()",
        "origin": [
            [
                "garnett_matrix_type,\n                        scmap_cluster_matrix_type,\n                        scmap_cell_matrix_type,\n                        scpred_matrix_type",
                "V"
            ]
        ],
        "gives": [
            [
                "UNIQUE_MATRIX_TYPES",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "IMPORT_PARAMS = Channel\n                .fromPath(params.data_import.training_datasets)\n                .splitCsv(header:false, sep:\",\")\n                .combine(UNIQUE_MATRIX_TYPES)",
        "origin": [
            [
                "UNIQUE_MATRIX_TYPES",
                "P"
            ],
            [
                "params.data_import.training_datasets",
                "A"
            ]
        ],
        "gives": [
            [
                "IMPORT_PARAMS",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "GARNETT_CLASSIFIER = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "GARNETT_CLASSIFIER",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "SCPRED_CLASSIFIER = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCPRED_CLASSIFIER",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "SCMAP_CLUSTER_CLASSIFIER = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCMAP_CLUSTER_CLASSIFIER",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "SCMAP_CELL_CLASSIFIER = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCMAP_CELL_CLASSIFIER",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "SINGLECELLNET_CLASSIFIER = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SINGLECELLNET_CLASSIFIER",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "TRAINING_DATA_UNMELT.set{ TRAINING_DATA_PROCESSED }",
        "origin": [
            [
                "TRAINING_DATA_UNMELT",
                "P"
            ]
        ],
        "gives": [
            [
                "TRAINING_DATA_PROCESSED",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "TRAINING_DATA.set{ TRAINING_DATA_PROCESSED }",
        "origin": [
            [
                "TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "TRAINING_DATA_PROCESSED",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "TRAINING_DATA_PROCESSED.into{\n    GARNETT_TRAINING_DATA\n    SCMAP_CELL_TRAINING_DATA\n    SCMAP_CLUSTER_TRAINING_DATA\n    SCPRED_TRAINING_DATA\n    SINGLECELLNET_TRAINING_DATA\n}",
        "origin": [
            [
                "TRAINING_DATA_PROCESSED",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "GARNETT_FULL_DATA = N_CLUST_FILT.merge(GARNETT_TRAINING_DATA)",
        "origin": [
            [
                "N_CLUST_FILT",
                "P"
            ],
            [
                "GARNETT_TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "GARNETT_FULL_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "GARNETT_FILTERED_DATA = GARNETT_FULL_DATA.filter{ it[5] == params.garnett.matrix_type }",
        "origin": [
            [
                "GARNETT_FULL_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "GARNETT_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "SCPRED_FILTERED_DATA = SCPRED_TRAINING_DATA.filter{ it[4] == params.scpred.matrix_type }",
        "origin": [
            [
                "SCPRED_TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SCPRED_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "SCMAP_CLUSTER_FILTERED_DATA = SCMAP_CLUSTER_TRAINING_DATA.filter{ it[4] == params.scmap_cluster.matrix_type }",
        "origin": [
            [
                "SCMAP_CLUSTER_TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SCMAP_CLUSTER_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "SCMAP_CELL_FILTERED_DATA = SCMAP_CELL_TRAINING_DATA.filter{ it[4] == params.scmap_cell.matrix_type }",
        "origin": [
            [
                "SCMAP_CELL_TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SCMAP_CELL_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "SINGLECELLNET_FILTERED_DATA = SINGLECELLNET_TRAINING_DATA.filter{ it[4] == params.singlecellnet.matrix_type }",
        "origin": [
            [
                "SINGLECELLNET_TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SINGLECELLNET_FILTERED_DATA",
                "P"
            ]
        ]
    }
}
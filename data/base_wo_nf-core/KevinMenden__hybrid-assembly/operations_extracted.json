{
    "OPERATION_1": {
        "string": "Channel\n    .fromFilePairs( params.shortReads, size: 2 )\n    .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.shortReads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\" }\n    .into { short_reads_qc; short_reads_assembly }",
        "origin": [
            [
                "params.shortReads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "short_reads_qc",
                "P"
            ],
            [
                "short_reads_assembly",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath( params.longReads )\n        .ifEmpty { exit 1, \"Cannot find any long reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\" }\n        .into { long_reads_qc; long_reads_assembly; long_reads_scaffolding }",
        "origin": [
            [
                "params.longReads",
                "A"
            ]
        ],
        "gives": [
            [
                "long_reads_qc",
                "P"
            ],
            [
                "long_reads_assembly",
                "P"
            ],
            [
                "long_reads_scaffolding",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_4": {
        "string": "assembly_result_canu.into{ assembly_mapping; assembly_pilon }",
        "origin": [
            [
                "assembly_result_canu",
                "P"
            ]
        ],
        "gives": [
            [
                "assembly_mapping",
                "P"
            ],
            [
                "assembly_pilon",
                "P"
            ]
        ]
    }
}
{
    "PER_GENE_BART": {
        "name_process": "PER_GENE_BART",
        "string_process": "\nprocess PER_GENE_BART {\n\n  label 'bart'\n  \n  publishDir \"$params.results\" \n\n  input:\n    val gene\n    path nps\n  output:\n    file \"*_bart_out.rds\"\n\n  script:\n  \"\"\"\n    #!/usr/bin/Rscript\n\n    library(bartNP)\n    \n    nps = readRDS(\"${nps}\")\n\n    predictors = regPredictors(nps, \"${gene}\")\n    \n    n_tree = as.numeric(${params.ntree})\n\n    response_array = as.vector(exprMat(nps[\"${gene}\",]))\n\n    output_filename = paste0(\"${gene}\", \"_bart_out.rds\")\n\n    bart_out = bartForOneGene(predictors, \n                              response_array, \n                              ntree = n_tree, \n                              mc.cores = as.numeric(${task.cpus}))\n\n    saveRDS(bart_out, file = output_filename)\n\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  \"\"\"\n    #!/usr/bin/Rscript\n\n    library(bartNP)\n    \n    nps = readRDS(\"${nps}\")\n\n    predictors = regPredictors(nps, \"${gene}\")\n    \n    n_tree = as.numeric(${params.ntree})\n\n    response_array = as.vector(exprMat(nps[\"${gene}\",]))\n\n    output_filename = paste0(\"${gene}\", \"_bart_out.rds\")\n\n    bart_out = bartForOneGene(predictors, \n                              response_array, \n                              ntree = n_tree, \n                              mc.cores = as.numeric(${task.cpus}))\n\n    saveRDS(bart_out, file = output_filename)\n\n  \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gene",
            "nps"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cmatKhan__bartNPNF",
        "directive": [
            "label 'bart'",
            "publishDir \"$params.results\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "peregrine": {
        "name_process": "peregrine",
        "string_process": "\nprocess peregrine {\n\ttag \"peregrine.$x\"\n    container 'docker://cschin/peregrine:1.6.3'\n    publishDir out_asm\n\n    input:\n    file x from ref_peregrine\n\n    output:\n    file \"*fasta\" into peregrine\n\n\twhen:\n    params.all\n\n    script:\n    \"\"\"\n    yes yes | python3 /data/korens/devel/Peregrine/bin/pg_run.py asm chm13.list 24 24 24 24 24 24 24 24 24 --with-consensus --shimmer-r 3 --best_n_ovlp 8 --output ./\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    yes yes | python3 /data/korens/devel/Peregrine/bin/pg_run.py asm chm13.list 24 24 24 24 24 24 24 24 24 --with-consensus --shimmer-r 3 --best_n_ovlp 8 --output ./\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "YES-HR"
        ],
        "tools_url": [
            "https://bio.tools/YES-HR"
        ],
        "tools_dico": [
            {
                "name": "YES-HR",
                "uri": "https://bio.tools/YES-HR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3418",
                            "term": "Paediatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0108",
                            "term": "Protein expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3418",
                            "term": "Child health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3418",
                            "term": "https://en.wikipedia.org/wiki/Pediatrics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Adapting an evidence-based positive youth development intervention to prevent sexual and teen dating violence.\n\nAdapting evidence-based interventions (EBIs) guided by implementation science frameworks is a promising way to accelerate the translation of effective violence prevention in schools. School-based interventions offer an opportunity to reduce the risk of multiple forms of violence, including sexual violence (SV) and teen dating violence (TDV). EBIs in schools reach large populations of adolescents, including those underserved in other settings. Although specific SV TDV prevention programs exist, evaluations indicate limited effectiveness over time.\n\n||| HOMEPAGE BROKEN!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'YES-HR school-based', 'YES', 'TDV', 'frameworks'",
                "homepage": "http://www.yes.sph.umich.edu"
            }
        ],
        "inputs": [
            "ref_peregrine"
        ],
        "nb_inputs": 1,
        "outputs": [
            "peregrine"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"peregrine.$x\"",
            "container 'docker://cschin/peregrine:1.6.3'",
            "publishDir out_asm"
        ],
        "when": "params.all",
        "stub": ""
    },
    "hifiasm": {
        "name_process": "hifiasm",
        "string_process": "\nprocess hifiasm {\n\ttag \"hifiasm.$x\"\n    container \"$params.bio/hifiasm:0.13--h8b12597_0\"\n    publishDir \"$out_asm/hifiasm\"\n\n\tinput:\n\tfile x from ref_hifiasm\n\n\toutput:\n    file \"*tg.gfa\" into hifiasm_o\n    file \"*log\"\n\n                                                                  \n\n\tscript:\n\t\"\"\"\n    hifiasm=$workflow.launchDir/$out_asm/hifiasm\n    count=`ls -1 \\$hifiasm/*tg.gfa 2>/dev/null | wc -l`\n    if [[ -f \"\\$hifiasm/hifiasm.asm.log\" && $count == 4 ]];\n    then\n        ln -s \\$hifiasm/*{log,tg.gfa} .\n    else\n        gigs=`echo \"$task.memory\" | sed 's/[^0-9]//g'`\n        if [[ \\$gigs > 23 ]];\n        then\n            hifiasm -o hifiasm.asm -t $task.cpus $x 2> hifiasm.asm.log\n        else\n            touch hifiasm.asm.log\n        fi\n    fi\n\t\"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\t\"\"\"\n    hifiasm=$workflow.launchDir/$out_asm/hifiasm\n    count=`ls -1 \\$hifiasm/*tg.gfa 2>/dev/null | wc -l`\n    if [[ -f \"\\$hifiasm/hifiasm.asm.log\" && $count == 4 ]];\n    then\n        ln -s \\$hifiasm/*{log,tg.gfa} .\n    else\n        gigs=`echo \"$task.memory\" | sed 's/[^0-9]//g'`\n        if [[ \\$gigs > 23 ]];\n        then\n            hifiasm -o hifiasm.asm -t $task.cpus $x 2> hifiasm.asm.log\n        else\n            touch hifiasm.asm.log\n        fi\n    fi\n\t\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "ref_hifiasm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hifiasm_o"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"hifiasm.$x\"",
            "container \"$params.bio/hifiasm:0.13--h8b12597_0\"",
            "publishDir \"$out_asm/hifiasm\""
        ],
        "when": "",
        "stub": ""
    },
    "post_hifiasm": {
        "name_process": "post_hifiasm",
        "string_process": "\nprocess post_hifiasm {\n\ttag \"post_hifiasm.$x\"\n    publishDir \"$out_asm/hifiasm\"\n\n\tinput:\n\tfile x from hifiasm_o\n\n\toutput:\n\tfile \"*.fasta\" into hifiasm\n\n    script:\n    \"\"\"\n    case $x in hifiasm.asm.r_utg\n    name=hifiasm_\\$ext.fasta\n    hifiasm=$workflow.workDir/$out_asm/hifiasm/\\$name\n    if [[ -f \"\\$hifiasm\" ]];\n    then\n        ln -s \\$hifiasm .\n    else\n        awk '/^S/{print \">\"\\$2;print \\$3}' $x > \\$name\n    fi\n        awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.r_utg.gfa > hifiasm_raw.fasta\n    awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.p_utg.gfa > hifiasm_processed.fasta\n    awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.p_ctg.gfa > hifiasm_primary.fasta\n    awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.a_ctg.gfa > hifiasm_alternate.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    case $x in hifiasm.asm.r_utg\n    name=hifiasm_\\$ext.fasta\n    hifiasm=$workflow.workDir/$out_asm/hifiasm/\\$name\n    if [[ -f \"\\$hifiasm\" ]];\n    then\n        ln -s \\$hifiasm .\n    else\n        awk '/^S/{print \">\"\\$2;print \\$3}' $x > \\$name\n    fi\n        awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.r_utg.gfa > hifiasm_raw.fasta\n    awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.p_utg.gfa > hifiasm_processed.fasta\n    awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.p_ctg.gfa > hifiasm_primary.fasta\n    awk '/^S/{print \">\"\\$2;print \\$3}' hifiasm.asm.a_ctg.gfa > hifiasm_alternate.fasta\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "CASE"
        ],
        "tools_url": [
            "https://bio.tools/CASE"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            }
        ],
        "inputs": [
            "hifiasm_o"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hifiasm"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"post_hifiasm.$x\"",
            "publishDir \"$out_asm/hifiasm\""
        ],
        "when": "",
        "stub": ""
    },
    "yamls": {
        "name_process": "yamls",
        "string_process": "\nprocess yamls {\n\ttag \"yamls\"\n  publishDir out_i\n\n  output:\n  file \"pbipa.yaml\" into yaml\n\n  script:\n  \"\"\"\n  tee -a pbipa.yaml <<EOT\n  name: pbipa\n  channels:\n    - defaults\n    - conda-forge\n    - bioconda\n  dependencies:\n    - pbipa=1.3.2\n  EOT\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  tee -a pbipa.yaml <<EOT\n  name: pbipa\n  channels:\n    - defaults\n    - conda-forge\n    - bioconda\n  dependencies:\n    - pbipa=1.3.2\n  EOT\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"yamls\"",
            "publishDir out_i"
        ],
        "when": "",
        "stub": ""
    },
    "pb_assembly": {
        "name_process": "pb_assembly",
        "string_process": "\nprocess pb_assembly {\n\ttag \"pb_assembly.$x\"\n\n    input:\n    file x from ref_pb_assembly\n\n    output:\n    file \"*fasta\" into pb_assembly\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "ref_pb_assembly"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pb_assembly"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pb_assembly.$x\""
        ],
        "when": "params.all",
        "stub": ""
    },
    "canu_yaml": {
        "name_process": "canu_yaml",
        "string_process": "\nprocess canu_yaml {\n\ttag \"yaml\"\n  publishDir out_i\n\n  output:\n  file \"canu.yaml\" into canu_yaml\n\n  script:\n  \"\"\"\n  tee -a canu.yaml <<EOT\n  name: canu\n  channels:\n    - defaults\n    - conda-forge\n    - bioconda\n  dependencies:\n    - canu=2.1.1\n  EOT\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  tee -a canu.yaml <<EOT\n  name: canu\n  channels:\n    - defaults\n    - conda-forge\n    - bioconda\n  dependencies:\n    - canu=2.1.1\n  EOT\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "canu_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"yaml\"",
            "publishDir out_i"
        ],
        "when": "",
        "stub": ""
    },
    "canu": {
        "name_process": "canu",
        "string_process": "\nprocess canu {\n\ttag \"canu.$x\"\n    container \"${params.bio}/canu:2.1.1--he1b5a44_0\"\n    publishDir out_asm\n\n\tinput:\n\tfile x from ref_canu\n\n\toutput:\n\tfile \"*.contigs.fasta\" into canu\n    file \"*.report\" canu_report\n    file \"*.fasta.gz\" reads\n    file \"*.unassembled.fasta\" unassembled\n    file \"*.layout.*\" layouts\n\n\twhen:\n    params.all\n\n\tscript:\n\t\"\"\"\n    gigs=`echo \"${task.memory}\" | sed 's/[^0-9]//g'`\n    if [[ \\$gigs > 23 ]];\n    then\n        memory=\"\\${gigs}G\"\n\t    canu -assemble -p asm -d fog genomeSize=${params.genomeSize} \\\n        -pacbio-hifi $x useGrid=false \\\n        maxThreads=$task.cpus maxMemory=\\$memory \\\n        merylThreads=$task.cpus merylMemory=\\$memory merylConcurrency=1 \\\n        hapThreads=$task.cpus hapMemory=\\$memory hapConcurrency=1 \\\n        batThreads=$task.cpus batMemory=\\$memory batConcurrency=1 \\\n        gridOptionsJobName=\"$x\"\n    else\n        touch ${x}.contigs.layout.tigInfo\n        touch ${x}.contigs.layout.readToTig\n        touch ${x}.contigs.layout\n        touch ${x}.unassembled.fasta\n        touch ${x}.contigs.fasta\n        touch ${x}.trimmedReads.fasta.gz\n        touch ${x}.correctedReads.fasta.gz\n    fi\n\t\"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "\t\"\"\"\n    gigs=`echo \"${task.memory}\" | sed 's/[^0-9]//g'`\n    if [[ \\$gigs > 23 ]];\n    then\n        memory=\"\\${gigs}G\"\n\t    canu -assemble -p asm -d fog genomeSize=${params.genomeSize} \\\n        -pacbio-hifi $x useGrid=false \\\n        maxThreads=$task.cpus maxMemory=\\$memory \\\n        merylThreads=$task.cpus merylMemory=\\$memory merylConcurrency=1 \\\n        hapThreads=$task.cpus hapMemory=\\$memory hapConcurrency=1 \\\n        batThreads=$task.cpus batMemory=\\$memory batConcurrency=1 \\\n        gridOptionsJobName=\"$x\"\n    else\n        touch ${x}.contigs.layout.tigInfo\n        touch ${x}.contigs.layout.readToTig\n        touch ${x}.contigs.layout\n        touch ${x}.unassembled.fasta\n        touch ${x}.contigs.fasta\n        touch ${x}.trimmedReads.fasta.gz\n        touch ${x}.correctedReads.fasta.gz\n    fi\n\t\"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_canu"
        ],
        "nb_inputs": 1,
        "outputs": [
            "canu"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"canu.$x\"",
            "container \"${params.bio}/canu:2.1.1--he1b5a44_0\"",
            "publishDir out_asm"
        ],
        "when": "params.all",
        "stub": ""
    },
    "longqc": {
        "name_process": "longqc",
        "string_process": "\nprocess longqc {\n\ttag \"pb_assembly.$x\"\n    publishDir out_asm\n    container \"grpiccoli/longqc:latest\"\n\n    input:\n    file r from ref\n\n    output:\n    file \"*fasta\" into longqc\n\n    script:\n    \"\"\"\n    mem=`echo \"$task.memory\" | sed 's/[^0-9]*//g'`\n    mem=`expr \\$mem / $task.cpus`\n    longQC.py sampleqc \\\n    -p $task.cpus \\\n    -m \\$mem \\\n    -x pb-rs2 \\\n    -o longqc $r \\\n    --index $params.index\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    mem=`echo \"$task.memory\" | sed 's/[^0-9]*//g'`\n    mem=`expr \\$mem / $task.cpus`\n    longQC.py sampleqc \\\n    -p $task.cpus \\\n    -m \\$mem \\\n    -x pb-rs2 \\\n    -o longqc $r \\\n    --index $params.index\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref"
        ],
        "nb_inputs": 1,
        "outputs": [
            "longqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pb_assembly.$x\"",
            "publishDir out_asm",
            "container \"grpiccoli/longqc:latest\""
        ],
        "when": "",
        "stub": ""
    },
    "pbbam": {
        "name_process": "pbbam",
        "string_process": "\nprocess pbbam {\n\ttag \"pbbam.$x\"\n    container \"$params.bio/pbbam:1.6.0--h5b7e6e0_0\"\n    publishDir out_i\n\n\tinput:\n\tfile x from ref_pbbam\n\n\toutput:\n\ttuple file(\"*.bam.pass\"), file(\"*.pbi\") into ref_pbi\n\n\tscript:\n\t\"\"\"\n    pbindex $x\n    ln -s $x ${x}.pass\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n    pbindex $x\n    ln -s $x ${x}.pass\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_pbbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_pbi"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pbbam.$x\"",
            "container \"$params.bio/pbbam:1.6.0--h5b7e6e0_0\"",
            "publishDir out_i"
        ],
        "when": "",
        "stub": ""
    },
    "bam2fastq": {
        "name_process": "bam2fastq",
        "string_process": "\nprocess bam2fastq {\n\ttag \"bam2fastq.$bam\"\n    container \"$params.bio/bam2fastx:1.3.0--he1c1bb9_8\"\n    publishDir out_ref\n    cache 'lenient'\n\n\tinput:\n    tuple file(bam), file(index) from ref_pbi\n\n\toutput:\n\tfile \"*.fastq.gz\" into ref_hifiasm, ref_flye, ref_nextdenovo, ref_canu\n\n\tscript:\n\t\"\"\"\n    name=$bam\n    name=\\${name%.*}\n    mv $bam \\$name\n    name=\\${name%.*}\n    bam2fastq -o \\$name \\${name}.bam\n\t\"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\t\"\"\"\n    name=$bam\n    name=\\${name%.*}\n    mv $bam \\$name\n    name=\\${name%.*}\n    bam2fastq -o \\$name \\${name}.bam\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "bam2fastq"
        ],
        "tools_url": [
            "https://bio.tools/bam2fastq"
        ],
        "tools_dico": [
            {
                "name": "bam2fastq",
                "uri": "https://bio.tools/bam2fastq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Extract reads from a bam file and write them in fastq format.",
                "homepage": "https://gsl.hudsonalpha.org/information/software/bam2fastq"
            }
        ],
        "inputs": [
            "ref_pbi"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_hifiasm",
            "ref_flye",
            "ref_nextdenovo",
            "ref_canu"
        ],
        "nb_outputs": 4,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"bam2fastq.$bam\"",
            "container \"$params.bio/bam2fastx:1.3.0--he1c1bb9_8\"",
            "publishDir out_ref",
            "cache 'lenient'"
        ],
        "when": "",
        "stub": ""
    },
    "racon": {
        "name_process": "racon",
        "string_process": "\nprocess racon {\n\ttag \"racon.$x\"\n\n    input:\n    file x from purge_dups\n\n    output:\n    file \"*fasta\" into racon\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "purge_dups"
        ],
        "nb_inputs": 1,
        "outputs": [
            "racon"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"racon.$x\""
        ],
        "when": "params.all",
        "stub": ""
    },
    "fastk": {
        "name_process": "fastk",
        "string_process": "\nprocess fastk {\n\ttag \"pb_assembly.$x\"\n    publishDir out_asm\n    container \"grpiccoli/fastk:latest\"\n\n    input:\n    file r from ref\n\n    output:\n    file \"*fasta\" into longqc\n\n    script:\n    \"\"\"\n    mem=`echo \"$task.memory\" | sed 's/[^0-9]*//g'`\n    mem=`expr \\$mem / $task.cpus`\n    longQC.py sampleqc \\\n    -p $task.cpus \\\n    -m \\$mem \\\n    -x pb-rs2 \\\n    -o longqc $r \\\n    --index $params.index\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    mem=`echo \"$task.memory\" | sed 's/[^0-9]*//g'`\n    mem=`expr \\$mem / $task.cpus`\n    longQC.py sampleqc \\\n    -p $task.cpus \\\n    -m \\$mem \\\n    -x pb-rs2 \\\n    -o longqc $r \\\n    --index $params.index\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref"
        ],
        "nb_inputs": 1,
        "outputs": [
            "longqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pb_assembly.$x\"",
            "publishDir out_asm",
            "container \"grpiccoli/fastk:latest\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    tag \"multiqc.$x\"\n    container \"$params.bio/multiqc:1.9--py_1\"\n    publishDir out_qul\n\n\tinput:\n    file \"fastqc/*\" from fastqc.collect().ifEmpty([])\n\n    output:\n    file \"*\"\n\n    when:\n    !params.skip.contains(\"quality\")\n\n    script:\n    \"\"\"\n    multiqc .\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    multiqc .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"multiqc.$x\"",
            "container \"$params.bio/multiqc:1.9--py_1\"",
            "publishDir out_qul"
        ],
        "when": "!params.skip.contains(\"quality\")",
        "stub": ""
    },
    "bam2fastx": {
        "name_process": "bam2fastx",
        "string_process": "\nprocess bam2fastx {\n\ttag \"bam2fastq.$bam\"\n    container \"$params.bio/bam2fastx:1.3.0--he1c1bb9_8\"\n    publishDir out_dcn\n    cache 'lenient'\n\n\tinput:\n    tuple file(bam), file(index) from ref_pbi\n\n\toutput:\n\tfile \"*.fastq.gz\" into ref_hifiasm, ref_flye, ref_nextdenovo, ref_canu\n\n\tscript:\n\t\"\"\"\n    name=$bam\n    name=\\${name%.*}\n    mv $bam \\$name\n    name=\\${name%.*}\n    bam2fastq -o \\$name \\${name}.bam\n\t\"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\t\"\"\"\n    name=$bam\n    name=\\${name%.*}\n    mv $bam \\$name\n    name=\\${name%.*}\n    bam2fastq -o \\$name \\${name}.bam\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "bam2fastq"
        ],
        "tools_url": [
            "https://bio.tools/bam2fastq"
        ],
        "tools_dico": [
            {
                "name": "bam2fastq",
                "uri": "https://bio.tools/bam2fastq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Extract reads from a bam file and write them in fastq format.",
                "homepage": "https://gsl.hudsonalpha.org/information/software/bam2fastq"
            }
        ],
        "inputs": [
            "ref_pbi"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_hifiasm",
            "ref_flye",
            "ref_nextdenovo",
            "ref_canu"
        ],
        "nb_outputs": 4,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"bam2fastq.$bam\"",
            "container \"$params.bio/bam2fastx:1.3.0--he1c1bb9_8\"",
            "publishDir out_dcn",
            "cache 'lenient'"
        ],
        "when": "",
        "stub": ""
    },
    "flye": {
        "name_process": "flye",
        "string_process": "\nprocess flye {\n\ttag \"flye.$x\"\n    container \"$params.bio/flye:2.8.2--py36h5202f60_0\"\n    publishDir \"$out_asm\"\n\n    input:\n    file x from ref\n\n    output:\n    file \"flye/*fasta\" into pre_flye\n    file \"flye/*{txt,log,gfa}\"\n\n    script:\n    \"\"\"\n    if [[ -d \"$out_asm/flye\" ]];\n    then\n        ln -s $out_asm/flye/* .\n    else\n\t    flye --pacbio-hifi $x -o flye -t $task.cpus -g $params.genomeSize -i 10\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    if [[ -d \"$out_asm/flye\" ]];\n    then\n        ln -s $out_asm/flye/* .\n    else\n\t    flye --pacbio-hifi $x -o flye -t $task.cpus -g $params.genomeSize -i 10\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pre_flye"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"flye.$x\"",
            "container \"$params.bio/flye:2.8.2--py36h5202f60_0\"",
            "publishDir \"$out_asm\""
        ],
        "when": "",
        "stub": ""
    },
    "post_flye": {
        "name_process": "post_flye",
        "string_process": "\nprocess post_flye{\n\ttag \"flye\"\n    publishDir \"$out_asm/flye\"\n\n    input:\n    file x from pre_flye.collect()\n\n    output:\n    file \"flye.fasta\" into flye\n\n    script:\n    \"\"\"\n    mv assembly.fasta flye.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    mv assembly.fasta flye.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pre_flye"
        ],
        "nb_inputs": 1,
        "outputs": [
            "flye"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"flye\"",
            "publishDir \"$out_asm/flye\""
        ],
        "when": "",
        "stub": ""
    },
    "pbipa": {
        "name_process": "pbipa",
        "string_process": "\nprocess pbipa {\n\ttag \"pbipa.$x\"\n  publishDir out_asm\n  conda \"$out_i/$y\"\n                                                   \n\n  input:\n  file x from ref\n  file y from yaml\n\n  output:\n  file \"pbipa/assembly-results/*.fasta\" into pre_pbipa\n\n  script:\n  \"\"\"\n  #--no-phase\n  ipa local --nthreads ${task.cpus} --njobs 1 --run-dir pbipa -i $x\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  #--no-phase\n  ipa local --nthreads ${task.cpus} --njobs 1 --run-dir pbipa -i $x\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "IPA"
        ],
        "tools_url": [
            "https://bio.tools/IPA"
        ],
        "tools_dico": [
            {
                "name": "IPA",
                "uri": "https://bio.tools/IPA",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3172",
                            "term": "Metabolomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3803",
                                    "term": "Natural product identification"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Bayesian-Based Annotation Method for Metabolomic Profiles Integrating Biochemical Connections, Isotope Patterns, and Adduct Relationships | Integrated Probabilistic Annotation (IPA) - A Bayesian annotation method for LC/MS data integrating biochemical relations, isotope patterns and adduct formation",
                "homepage": "https://github.com/francescodc87/IPA"
            }
        ],
        "inputs": [
            "ref",
            "yaml"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pre_pbipa"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pbipa.$x\"",
            "publishDir out_asm",
            "conda \"$out_i/$y\""
        ],
        "when": "",
        "stub": ""
    },
    "post_pbipa": {
        "name_process": "post_pbipa",
        "string_process": "\nprocess post_pbipa {\n  tag \"post_pbipa\"\n  publishDir \"$out_asm/pbipa\"\n\n  input:\n  file x from pre_pbipa.collect()\n\n  output:\n  file \"*.fasta\" into pbipa\n\n  script:\n  \"\"\"\n  mv final.a_ctg.fasta pbipa_alternate.fasta\n  mv final.p_ctg.fasta pbipa_primary.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  mv final.a_ctg.fasta pbipa_alternate.fasta\n  mv final.p_ctg.fasta pbipa_primary.fasta\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pre_pbipa"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pbipa"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"post_pbipa\"",
            "publishDir \"$out_asm/pbipa\""
        ],
        "when": "",
        "stub": ""
    },
    "nextdonovo": {
        "name_process": "nextdonovo",
        "string_process": "\nprocess nextdonovo {\n\ttag \"nextdenovo.$x\"\n\t\n\tinput:\n    file x from ref_nextdenovo\n\n    output:\n    file \"ref.asm\" into nextdenovo, nextdenovo_stats\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n\tls $x > input.fofn\n\twget https://raw.githubusercontent.com/Nextomics/NextDenovo/master/doc/run.cfg\n\tnextDenovo run.cfg\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n\tls $x > input.fofn\n\twget https://raw.githubusercontent.com/Nextomics/NextDenovo/master/doc/run.cfg\n\tnextDenovo run.cfg\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_nextdenovo"
        ],
        "nb_inputs": 1,
        "outputs": [
            "nextdenovo",
            "nextdenovo_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextdenovo.$x\""
        ],
        "when": "params.all",
        "stub": ""
    },
    "nextpolish": {
        "name_process": "nextpolish",
        "string_process": "\nprocess nextpolish {\n\ttag \"nextpolish.$x\"\n\n    input:\n    file x from nextdenovo\n\n    output:\n    file \"*fasta\" into nextpolish\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=$params.genomeSize -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=$params.genomeSize -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "nextdenovo"
        ],
        "nb_inputs": 1,
        "outputs": [
            "nextpolish"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextpolish.$x\""
        ],
        "when": "",
        "stub": ""
    },
    "purge_dups": {
        "name_process": "purge_dups",
        "string_process": "\nprocess purge_dups {\n\ttag \"purge_dups.$x\"\n  publishDir out_asm\n  conda \"$out_i/$y\"\n\n  input:\n  file x from ref\n  file a from asm\n  file y from purge_dups_yaml\n\n  output:\n  file \"*fasta\" into purge_dups, purge_dups_stats\n\n  script:\n  \"\"\"\n  wget https://raw.githubusercontent.com/dfguan/purge_dups/master/scripts/pd_config.py\n  chmod +x pd_config.py\n  echo \"$x\" > pb.fofn\n  ./pd_config.py \\\n  -l purge_dups \\\n  -n config.purge_dups.json \\\n  $a \\\n  pb.fofn\n  run_purge_dups.py config.purge_dups.json purge_dups purge_dups\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  wget https://raw.githubusercontent.com/dfguan/purge_dups/master/scripts/pd_config.py\n  chmod +x pd_config.py\n  echo \"$x\" > pb.fofn\n  ./pd_config.py \\\n  -l purge_dups \\\n  -n config.purge_dups.json \\\n  $a \\\n  pb.fofn\n  run_purge_dups.py config.purge_dups.json purge_dups purge_dups\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref",
            "asm",
            "purge_dups_yaml"
        ],
        "nb_inputs": 3,
        "outputs": [
            "purge_dups",
            "purge_dups_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"purge_dups.$x\"",
            "publishDir out_asm",
            "conda \"$out_i/$y\""
        ],
        "when": "",
        "stub": ""
    },
    "pbmm2_icontaminants": {
        "name_process": "pbmm2_icontaminants",
        "string_process": "\nprocess pbmm2_icontaminants {\n\ttag \"pbmm2_decontamination.$x\"\n    publishDir out_i\n\n\tinput:\n    file c from contaminants\n\n\toutput:\n    file \"*ccs.mmi\" into i_ccs\n                                      \n\n\tscript:\n\t\"\"\"\n    name=\"$c\"\n    name=\\${name%.*}\n    pbmm2 index --preset CCS $c \\${name}_ccs.mmi\n    #pbmm2 index --preset ISOSEQ $c \\${name}_isoseq.mmi\n\t\"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\t\"\"\"\n    name=\"$c\"\n    name=\\${name%.*}\n    pbmm2 index --preset CCS $c \\${name}_ccs.mmi\n    #pbmm2 index --preset ISOSEQ $c \\${name}_isoseq.mmi\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contaminants"
        ],
        "nb_inputs": 1,
        "outputs": [
            "i_ccs"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pbmm2_decontamination.$x\"",
            "publishDir out_i"
        ],
        "when": "",
        "stub": ""
    },
    "pbmm2_mcontaminats": {
        "name_process": "pbmm2_mcontaminats",
        "string_process": "\nprocess pbmm2_mcontaminats {\n\ttag \"pbmm2_mcontaminants.$x\"\n    publishDir out_dcn\n\n\tinput:\n\tfile x from hifiasm.mix(flye, pbipa, nextpolish, racon)\n    file iccs from i_ccs.collect()\n                                          \n\n\toutput:\n    tuple file(\"*.bam.pass\"), file(\"*_cont.bam\") into pbcont\n\n\tscript:\n\t\"\"\"\n    cpus=`echo \"$task.cpus\" | awk '{r=int(\\$0/2);if(r==0){print 1}else{print r}}'`\n    memory=`echo \"$task.memory\" | sed 's/[^0-9]//g' | awk -v cpus=\\$cpus '{print int(\\$0/cpus)}'`G\n    preset=`echo ref_4W_A_hifi.bam | cut -d\"_\" -f4 \\\n    | awk -F '.' '{ print toupper(\\$1) }'`\n    #if [[ preset == \"isoseq\" ]];\n    #then\n    #    index=\\$iisoseq\n    #else\n        index=$iccs\n    #fi\n    name=\"$x\"\n    name=\\${name%.*}\n\tpbmm2 align \\$index $x \\${name}_cont.bam --sort \\\n    -j \\$cpus -J \\$cpus -m \\$memory\n    ln -s $x ${x}.pass\n\t\"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\t\"\"\"\n    cpus=`echo \"$task.cpus\" | awk '{r=int(\\$0/2);if(r==0){print 1}else{print r}}'`\n    memory=`echo \"$task.memory\" | sed 's/[^0-9]//g' | awk -v cpus=\\$cpus '{print int(\\$0/cpus)}'`G\n    preset=`echo ref_4W_A_hifi.bam | cut -d\"_\" -f4 \\\n    | awk -F '.' '{ print toupper(\\$1) }'`\n    #if [[ preset == \"isoseq\" ]];\n    #then\n    #    index=\\$iisoseq\n    #else\n        index=$iccs\n    #fi\n    name=\"$x\"\n    name=\\${name%.*}\n\tpbmm2 align \\$index $x \\${name}_cont.bam --sort \\\n    -j \\$cpus -J \\$cpus -m \\$memory\n    ln -s $x ${x}.pass\n\t\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hifiasm",
            "flye",
            "pbipa",
            "nextpolish",
            "racon",
            "i_ccs"
        ],
        "nb_inputs": 6,
        "outputs": [
            "pbcont"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"pbmm2_mcontaminants.$x\"",
            "publishDir out_dcn"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_decon": {
        "name_process": "samtools_decon",
        "string_process": "\nprocess samtools_decon {\n\ttag \"samtools_decon.$orig\"\n    publishDir out_dcn\n    cache 'lenient'\n\n\tinput:\n\ttuple file(orig), file(cont) from pbcont\n\n\toutput:\n    file \"*_decon.bam\" into decon\n    file \"*.con\" into con\n    file \"*.cnt\" into cnt\n\n\tscript:\n\t\"\"\"\n    name=\"$orig\"\n    name=\\${name%.*}\n    mv $orig \\$name\n    name=\\${name%.*}\n    samtools view $cont | cut -f 1 > \\$name.con\n    samtools view -h \\$name.bam | grep -vf \\$name.con \\\n    | samtools view -bS -o \\${name}_decon.bam -\n    samtools view -c \\$name.bam > \\$name.cnt\n\t\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\t\"\"\"\n    name=\"$orig\"\n    name=\\${name%.*}\n    mv $orig \\$name\n    name=\\${name%.*}\n    samtools view $cont | cut -f 1 > \\$name.con\n    samtools view -h \\$name.bam | grep -vf \\$name.con \\\n    | samtools view -bS -o \\${name}_decon.bam -\n    samtools view -c \\$name.bam > \\$name.cnt\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pbcont"
        ],
        "nb_inputs": 1,
        "outputs": [
            "decon",
            "con",
            "cnt"
        ],
        "nb_outputs": 3,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"samtools_decon.$orig\"",
            "publishDir out_dcn",
            "cache 'lenient'"
        ],
        "when": "",
        "stub": ""
    },
    "gnuplot_decon": {
        "name_process": "gnuplot_decon",
        "string_process": "\nprocess gnuplot_decon {\n\ttag \"r_graphdecon.$x\"\n    publishDir \"$out_dcn/report\"\n\n\tinput:\n\tfile x from con\n    file n from cnt\n\n\toutput:\n    file \"*pdf\"\n    file \"*dat\"\n    file \"*plg\"\n\n\tscript:\n\t\"\"\"\n    name=\"$x\"\n    name=\\${name%.*}\n    data=\\${name}.dat\n    n=`cat $n`\n    cat $x | cut -d\"_\" -f1 | sort | uniq -c | sort -k1nr,2n \\\n    | awk -F' ' -v cnt=0 -v num=\\$n '{print cnt\"\\\\t\"\\$2\"\\\\t\"\\$1/num;cnt++;}' \\\n    > \\$data\n    tee -a \\${name}.plg <<EOT\n    set terminal pdfcairo enhanced color notransparent\n    set output '\\${name}_cont.pdf'\n    set key noautotitle\n    set xlabel \"Taxonomic Order\"\n    set ylabel \"Read Count\"\n    set title \"Read Contamination by Taxonomic Order\"\n    set key box top left spacing 1.5\n    plot '\\$data' using 1:3:xtic(2) with boxes\n    EOT\n    LNG=`wc -l \\$data | cut -d' ' -f1`\n    if [ \\$LNG -eq 0 ];\n    then\n        touch \\${name}.empty.pdf\n    else\n        gnuplot \\${name}.plg\n    fi\n\t\"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "\t\"\"\"\n    name=\"$x\"\n    name=\\${name%.*}\n    data=\\${name}.dat\n    n=`cat $n`\n    cat $x | cut -d\"_\" -f1 | sort | uniq -c | sort -k1nr,2n \\\n    | awk -F' ' -v cnt=0 -v num=\\$n '{print cnt\"\\\\t\"\\$2\"\\\\t\"\\$1/num;cnt++;}' \\\n    > \\$data\n    tee -a \\${name}.plg <<EOT\n    set terminal pdfcairo enhanced color notransparent\n    set output '\\${name}_cont.pdf'\n    set key noautotitle\n    set xlabel \"Taxonomic Order\"\n    set ylabel \"Read Count\"\n    set title \"Read Contamination by Taxonomic Order\"\n    set key box top left spacing 1.5\n    plot '\\$data' using 1:3:xtic(2) with boxes\n    EOT\n    LNG=`wc -l \\$data | cut -d' ' -f1`\n    if [ \\$LNG -eq 0 ];\n    then\n        touch \\${name}.empty.pdf\n    else\n        gnuplot \\${name}.plg\n    fi\n\t\"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "plot"
        ],
        "tools_url": [
            "https://bio.tools/plot"
        ],
        "tools_dico": [
            {
                "name": "plot",
                "uri": "https://bio.tools/plot",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2968",
                                "term": "Image"
                            }
                        ]
                    }
                ],
                "description": "Plot some information from a list of transcripts.",
                "homepage": "https://urgi.versailles.inra.fr/Tools/REPET"
            }
        ],
        "inputs": [
            "con",
            "cnt"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"r_graphdecon.$x\"",
            "publishDir \"$out_dcn/report\""
        ],
        "when": "",
        "stub": ""
    },
    "mummer": {
        "name_process": "mummer",
        "string_process": "\nprocess mummer {\n\ttag \"mummer.$x\"\n\n    input:\n    file x from i_assembler_mummer\n\n    output:\n    file \"*fasta\" into mummer\n\n    when:\n    params.all || params.mummer\n\n    script:\n    \"\"\"\n    nucmer --maxmatch --nosimplify delta-filter -i 98 -l 10000\n    nucmer --maxmatch --noextend --nosimplify -l 500 -c 1000 delta-filter -i 99.9 -l 10000\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    nucmer --maxmatch --nosimplify delta-filter -i 98 -l 10000\n    nucmer --maxmatch --noextend --nosimplify -l 500 -c 1000 delta-filter -i 99.9 -l 10000\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_assembler_mummer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mummer"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"mummer.$x\""
        ],
        "when": "params.all || params.mummer",
        "stub": ""
    },
    "transposonpsi": {
        "name_process": "transposonpsi",
        "string_process": "\nprocess transposonpsi {\n    tag \"transposonpsi.$x\"\n\n    input:\n    file x from mummer\n\n    output:\n    file \"*fasta\" into transposonpsi\n\n    when:\n    params.all || params.transposonpsi\n\n    script:\n    \"\"\"\n    transposonPSI.pl $x nuc\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    transposonPSI.pl $x nuc\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mummer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "transposonpsi"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"transposonpsi.$x\""
        ],
        "when": "params.all || params.transposonpsi",
        "stub": ""
    },
    "tetools": {
        "name_process": "tetools",
        "string_process": "\nprocess tetools {\n    tag \"tetools.$x\"\n\n    input:\n    file x from transposonpsi\n\n    output:\n    file \"*fasta\" into tetools\n\n    when:\n    params.all || params.tetools\n\n    script:\n    \"\"\"\n    BuildDatabase -name fog -engine ncbi $x\n    RepeatModeler -database fog -engine ncbi -pa ${task.cpus} -LTRStruct\n    RepeatMasker -lib fog-families.fa $x -pa ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    BuildDatabase -name fog -engine ncbi $x\n    RepeatModeler -database fog -engine ncbi -pa ${task.cpus} -LTRStruct\n    RepeatMasker -lib fog-families.fa $x -pa ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "RepeatModeler",
            "RepeatMasker"
        ],
        "tools_url": [
            "https://bio.tools/RepeatModeler2",
            "https://bio.tools/repeatmasker"
        ],
        "tools_dico": [
            {
                "name": "RepeatModeler",
                "uri": "https://bio.tools/RepeatModeler2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "RepeatModeler is a de novo transposable element (TE) family identification and modeling package. At the heart of RepeatModeler are three de-novo repeat finding programs ( RECON, RepeatScout and LtrHarvest/Ltr_retriever ) which employ complementary computational methods for identifying repeat element boundaries and family relationships from sequence data.",
                "homepage": "https://github.com/Dfam-consortium/RepeatModeler"
            },
            {
                "name": "RepeatMasker",
                "uri": "https://bio.tools/repeatmasker",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program that screens DNA sequences for interspersed repeats and low complexity DNA sequences. The output of the program is a detailed annotation of the repeats that are present in the query sequence as well as a modified version of the query sequence in which all the annotated repeats have been masked (default: replaced by Ns).",
                "homepage": "http://www.repeatmasker.org/"
            }
        ],
        "inputs": [
            "transposonpsi"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tetools"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"tetools.$x\""
        ],
        "when": "params.all || params.tetools",
        "stub": ""
    },
    "minimap2": {
        "name_process": "minimap2",
        "string_process": "\nprocess minimap2 {\n    tag \"mummer.$x\"\n\n    input:\n    file x from tetools\n\n    output:\n    file \"*fasta\" into minimap2\n\n    when:\n    params.all || params.mummer\n\n    script:\n    \"\"\"\n    Quast.py --large --skip-unaligned-mis-contigs    \n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    Quast.py --large --skip-unaligned-mis-contigs    \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tetools"
        ],
        "nb_inputs": 1,
        "outputs": [
            "minimap2"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"mummer.$x\""
        ],
        "when": "params.all || params.mummer",
        "stub": ""
    },
    "allhic": {
        "name_process": "allhic",
        "string_process": "\nprocess allhic {\n\ttag \"nextpolish.$x\"\n\n    input:\n    file x from i_allhic\n\n    output:\n    file \"*fasta\" into allhic, mercury_allhic\n\n    when:\n    params.all || params.allhic\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_allhic"
        ],
        "nb_inputs": 1,
        "outputs": [
            "allhic",
            "mercury_allhic"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextpolish.$x\""
        ],
        "when": "params.all || params.allhic",
        "stub": ""
    },
    "marginphase": {
        "name_process": "marginphase",
        "string_process": "\nprocess marginphase {\n\ttag \"nextpolish.$x\"\n\n    input:\n    file x from i_marginphase\n\n    output:\n    file \"*fasta\" into marginphase, mercury_marginphase\n\n    when:\n    params.all || params.marginphase\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_marginphase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "marginphase",
            "mercury_marginphase"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextpolish.$x\""
        ],
        "when": "params.all || params.marginphase",
        "stub": ""
    },
    "falconphase": {
        "name_process": "falconphase",
        "string_process": "\nprocess falconphase {\n\ttag \"nextpolish.$x\"\n\n    input:\n    file x from i_falconphase\n\n    output:\n    file \"*fasta\" into falconphase, mercury_falconphase\n\n    when:\n    params.all || params.falconphase\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_falconphase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "falconphase",
            "mercury_falconphase"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextpolish.$x\""
        ],
        "when": "params.all || params.falconphase",
        "stub": ""
    },
    "hirise": {
        "name_process": "hirise",
        "string_process": "\nprocess hirise {\n\ttag \"nextpolish.$x\"\n\n    input:\n    file x from i_hirise\n\n    output:\n    file \"*fasta\" into hirise, mercury_hirise\n\n    when:\n    params.all || params.hirise\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_hirise"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hirise",
            "mercury_hirise"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextpolish.$x\""
        ],
        "when": "params.all || params.hirise",
        "stub": ""
    },
    "dipasm": {
        "name_process": "dipasm",
        "string_process": "\nprocess dipasm {\n\ttag \"nextpolish.$x\"\n\n    input:\n    file x from i_dipasm\n\n    output:\n    file \"*fasta\" into dipasm, mercury_dipasm\n\n    when:\n    params.all || params.hirise\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_dipasm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dipasm",
            "mercury_dipasm"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextpolish.$x\""
        ],
        "when": "params.all || params.hirise",
        "stub": ""
    },
    "haplotypo": {
        "name_process": "haplotypo",
        "string_process": "\nprocess haplotypo {\n\ttag \"haplotypo.$x\"\n\n    input:\n    file x from i_haplotypo\n\n    output:\n    file \"*fasta\" into haplotypo\n\n    when:\n    params.all || params.hirise\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_haplotypo"
        ],
        "nb_inputs": 1,
        "outputs": [
            "haplotypo"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"haplotypo.$x\""
        ],
        "when": "params.all || params.hirise",
        "stub": ""
    },
    "purge_haplotigs": {
        "name_process": "purge_haplotigs",
        "string_process": "\nprocess purge_haplotigs {\n    tag \"purge_haplotigs.$x\"\n\n    input:\n    file x from i_purge_haplotigs\n\n    output:\n    file \"*fasta\" into final_ref, quast_purge_haplotigs, mercury_purge_haplotigs, genomeqc_purge_haplotigs, assembly_stats_purge_haplotigs, i_prapi\n\n    when:\n    params.all || params.purge_haplotigs\n\n    script:\n    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    canu -assemble -p asm -d asm genomeSize=0.6g -pacbio-hifi $x\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "i_purge_haplotigs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "final_ref",
            "quast_purge_haplotigs",
            "mercury_purge_haplotigs",
            "genomeqc_purge_haplotigs",
            "assembly_stats_purge_haplotigs",
            "i_prapi"
        ],
        "nb_outputs": 6,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"purge_haplotigs.$x\""
        ],
        "when": "params.all || params.purge_haplotigs",
        "stub": ""
    },
    "assembly_stats": {
        "name_process": "assembly_stats",
        "string_process": "\nprocess assembly_stats {\n    tag \"assembly-stats.$x\"\n    container \"$params.fog/assembly-stats:17.02\"\n    publishDir \"$out_asm/assembly-stats\"\n\n    input:\n    file x from i_assembly_stats.collect()\n\n    output:\n    file \"*\"\n\n    script:\n    \"\"\"\n    create-stats ${x} > assembly-stats.html\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    create-stats ${x} > assembly-stats.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_assembly_stats"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"assembly-stats.$x\"",
            "container \"$params.fog/assembly-stats:17.02\"",
            "publishDir \"$out_asm/assembly-stats\""
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast {\n    tag \"quast\"\n    container \"$params.bio/quast:5.0.2--py37pl526hb5aa323_2\"\n    publishDir \"$out_asm/quast\"\n\n    input:\n    file x from i_quast.collect()\n\n    output:\n    file \"genome.qc\" into quast, i_icarus\n\n    script:\n    \"\"\"\n    $params.genomeSize\n    quast \\\n    $x\n    -e -t $task.cpus --large -k --circos -f -b \\\n    --est-ref-size $params.genomeSize\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    $params.genomeSize\n    quast \\\n    $x\n    -e -t $task.cpus --large -k --circos -f -b \\\n    --est-ref-size $params.genomeSize\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "QUAST"
        ],
        "tools_url": [
            "https://bio.tools/quast"
        ],
        "tools_dico": [
            {
                "name": "QUAST",
                "uri": "https://bio.tools/quast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "QUAST stands for QUality ASsessment Tool.  \nIt evaluates a quality of genome assemblies by computing various metrics and providing nice reports.",
                "homepage": "http://quast.sourceforge.net/quast"
            }
        ],
        "inputs": [
            "i_quast"
        ],
        "nb_inputs": 1,
        "outputs": [
            "quast",
            "i_icarus"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"quast\"",
            "container \"$params.bio/quast:5.0.2--py37pl526hb5aa323_2\"",
            "publishDir \"$out_asm/quast\""
        ],
        "when": "",
        "stub": ""
    },
    "length_graph": {
        "name_process": "length_graph",
        "string_process": "\nprocess length_graph {\n    tag \"quast.$x\"\n    publishDir \"$out_asm/quast\"\n\n    input:\n    file x from quast\n\n    output:\n    file \"*\"\n\n    script:\n    \"\"\"\n    library(ggplot2)\n    df <- quast\n    plot <- ggplot(df, aes(x=\"\",y=total.length)) +\n    geom_jitter(size = 2, \n                position = position_jitter(width=c(0.1,.2),seed=23),\n                alpha = 1) +\n    scale_color_manual(values=c(\"#c7c7c7\",\"#ff0000\" )) +\n    stat_boxplot(geom =\"errorbar\", width = 0.1) + \n    geom_boxplot(outlier.alpha = 0, alpha = .1, width = 0.1) +\n    stat_summary(fun.y=mean, colour=\"black\", geom=\"point\", \n                shape=21, fill = \"white\", size=2,show_guide = FALSE) +\n    labs(y=\"total assembly length (bp)\", \n        x=\"\") + guides(color = guide_legend(override.aes = list(size=5))) + \n    labs(color='remove') +\n    ylim(0,3e7)\n\n    #ggsave(file=\"\", width=10, height=8)\n\n    plot(plot)\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    library(ggplot2)\n    df <- quast\n    plot <- ggplot(df, aes(x=\"\",y=total.length)) +\n    geom_jitter(size = 2, \n                position = position_jitter(width=c(0.1,.2),seed=23),\n                alpha = 1) +\n    scale_color_manual(values=c(\"#c7c7c7\",\"#ff0000\" )) +\n    stat_boxplot(geom =\"errorbar\", width = 0.1) + \n    geom_boxplot(outlier.alpha = 0, alpha = .1, width = 0.1) +\n    stat_summary(fun.y=mean, colour=\"black\", geom=\"point\", \n                shape=21, fill = \"white\", size=2,show_guide = FALSE) +\n    labs(y=\"total assembly length (bp)\", \n        x=\"\") + guides(color = guide_legend(override.aes = list(size=5))) + \n    labs(color='remove') +\n    ylim(0,3e7)\n\n    #ggsave(file=\"\", width=10, height=8)\n\n    plot(plot)\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "DFP",
            "plot",
            "ALPHA"
        ],
        "tools_url": [
            "https://bio.tools/dfp",
            "https://bio.tools/plot",
            "https://bio.tools/alpha"
        ],
        "tools_dico": [
            {
                "name": "DFP",
                "uri": "https://bio.tools/dfp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides a supervised technique able to identify differentially expressed genes, based on the construction of \\emph{Fuzzy Patterns} (FPs). The Fuzzy Patterns are built by means of applying 3 Membership Functions to discretized gene expression values.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/DFP.html"
            },
            {
                "name": "plot",
                "uri": "https://bio.tools/plot",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2968",
                                "term": "Image"
                            }
                        ]
                    }
                ],
                "description": "Plot some information from a list of transcripts.",
                "homepage": "https://urgi.versailles.inra.fr/Tools/REPET"
            },
            {
                "name": "ALPHA",
                "uri": "https://bio.tools/alpha",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolutionary biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolution"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Automated Local PHylogenomic Analyses.",
                "homepage": "https://github.com/chilleo/ALPHA"
            }
        ],
        "inputs": [
            "quast"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"quast.$x\"",
            "publishDir \"$out_asm/quast\""
        ],
        "when": "",
        "stub": ""
    },
    "genomeqc": {
        "name_process": "genomeqc",
        "string_process": "\nprocess genomeqc {\n    tag \"genomeqc.$x\"\n\n    input:\n    file x from i_genomeqc.collect()\n\n    output:\n    file \"*fasta\" into genomeqc\n\n    when:\n    params.all || params.mummer\n\n    script:\n    \"\"\"\n    Quast.py --large --skip-unaligned-mis-contigs    \n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    Quast.py --large --skip-unaligned-mis-contigs    \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_genomeqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genomeqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"genomeqc.$x\""
        ],
        "when": "params.all || params.mummer",
        "stub": ""
    },
    "merqury": {
        "name_process": "merqury",
        "string_process": "\nprocess merqury {\n    tag \"mummer.$x\"\n\n    input:\n    file x from mercury_allhic.mix(mercury_marginphase,mercury_falconphase,mercury_hirise,mercury_dipasm).collect()\n\n    output:\n    file \"*fasta\" into merqury\n\n    when:\n    params.all || params.mummer\n\n    script:\n    \"\"\"\n    Quast.py --large --skip-unaligned-mis-contigs    \n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    Quast.py --large --skip-unaligned-mis-contigs    \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mercury_allhic",
            "mercury_marginphase",
            "mercury_falconphase",
            "mercury_hirise",
            "mercury_dipasm"
        ],
        "nb_inputs": 5,
        "outputs": [
            "merqury"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"mummer.$x\""
        ],
        "when": "params.all || params.mummer",
        "stub": ""
    },
    "isoseq3": {
        "name_process": "isoseq3",
        "string_process": "\nprocess isoseq3 {\n    input:\n    file x from i_isoseq\n\n    output:\n    file \"*fasta\" into o_isoseq\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_isoseq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "o_isoseq"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [],
        "when": "params.all",
        "stub": ""
    },
    "prapi": {
        "name_process": "prapi",
        "string_process": "\nprocess prapi {\n    input:\n    file x from o_isoseq\n    file g from i_prapi\n\n    output:\n    file \"*fasta\" into i_tama, i_maker\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "o_isoseq",
            "i_prapi"
        ],
        "nb_inputs": 2,
        "outputs": [
            "i_tama",
            "i_maker"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [],
        "when": "params.all",
        "stub": ""
    },
    "tama": {
        "name_process": "tama",
        "string_process": "\nprocess tama {\n    input:\n    file x from i_tama\n\n    output:\n    file \"*fasta\" into tama\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_tama"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tama"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [],
        "when": "params.all",
        "stub": ""
    },
    "maker": {
        "name_process": "maker",
        "string_process": "\nprocess maker {\n    input:\n    file x from i_maker\n\n    output:\n    file \"*fasta\" into maker\n\n    when:\n    params.all\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_maker"
        ],
        "nb_inputs": 1,
        "outputs": [
            "maker"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [],
        "when": "params.all",
        "stub": ""
    },
    "purge_dups_yaml": {
        "name_process": "purge_dups_yaml",
        "string_process": "\nprocess purge_dups_yaml {\n\ttag \"yamls\"\n  publishDir out_i\n\n  output:\n  file \"purge_dups.yaml\" into purge_dups_yaml\n\n  script:\n  \"\"\"\n  tee -a purge_dups.yaml <<EOT\n  name: purge_dups\n  channels:\n    - defaults\n    - conda-forge\n    - bioconda\n  dependencies:\n    - purge_dups=1.2.5\n  EOT\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  tee -a purge_dups.yaml <<EOT\n  name: purge_dups\n  channels:\n    - defaults\n    - conda-forge\n    - bioconda\n  dependencies:\n    - purge_dups=1.2.5\n  EOT\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "purge_dups_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"yamls\"",
            "publishDir out_i"
        ],
        "when": "",
        "stub": ""
    },
    "nextdenovo": {
        "name_process": "nextdenovo",
        "string_process": "\nprocess nextdenovo {\n\ttag \"nextdenovo.$x\"\n    container \"$params.fog:nextdenovo-2.4.0\"\n\t\n\tinput:\n    file x from ref\n\n    output:\n    file \"ref.asm\" into nextdenovo, nextdenovo_stats\n\n    script:\n    \"\"\"\n\tls $x > input.fofn\n\twget https://raw.githubusercontent.com/Nextomics/NextDenovo/master/doc/run.cfg\n\tnextDenovo run.cfg\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n\tls $x > input.fofn\n\twget https://raw.githubusercontent.com/Nextomics/NextDenovo/master/doc/run.cfg\n\tnextDenovo run.cfg\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref"
        ],
        "nb_inputs": 1,
        "outputs": [
            "nextdenovo",
            "nextdenovo_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "grpiccoli__FOG",
        "directive": [
            "tag \"nextdenovo.$x\"",
            "container \"$params.fog:nextdenovo-2.4.0\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "gunc_db_download": {
        "name_process": "gunc_db_download",
        "string_process": "\nprocess gunc_db_download {\n\n    publishDir \"${params.outdir}/gunc_db\" , mode: 'copy'\n\n    output:\n    path 'gunc_db_*.dmnd', emit: gunc_db\n\n    script:\n    \"\"\"\n    gunc download_db .\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    gunc download_db .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "publishDir \"${params.outdir}/gunc_db\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gunc": {
        "name_process": "gunc",
        "string_process": "\nprocess gunc {\n    input:\n    path(genomes)\n    path(gunc_db)\n\n    output:\n    path 'GUNC.maxCSS_level.tsv', emit: maxcss_level\n\n    script:\n    \"\"\"\n    mkdir -p genomes_dir\n    mv $genomes genomes_dir\n    \n    gunc run \\\n        --input_dir genomes_dir \\\n        --db_file ${gunc_db} \\\n        --threads ${task.cpus} \\\n        --file_suffix .${params.ext}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir -p genomes_dir\n    mv $genomes genomes_dir\n    \n    gunc run \\\n        --input_dir genomes_dir \\\n        --db_file ${gunc_db} \\\n        --threads ${task.cpus} \\\n        --file_suffix .${params.ext}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomes",
            "gunc_db"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "drep": {
        "name_process": "drep",
        "string_process": "\nprocess drep {\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        pattern: 'filtered_repr/*'\n\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        pattern: 'drep/{data_tables,figures,log}/*'\n\n    input:\n    path 'genomeinfo.csv'\n    path(genomes)\n\n    output:\n    path 'filtered_repr/*'\n    path 'drep/{data_tables,figures,log}/*'\n    path 'drep/data_tables/Cdb.csv', emit: cdb\n    path 'drep/data_tables/Wdb.csv', emit: wdb\n\n    script:   \n    \"\"\"\n    mkdir genomes_dir\n    mv $genomes genomes_dir\n    dRep dereplicate \\\n        drep \\\n        --genomeInfo genomeinfo.csv \\\n        -p ${task.cpus} \\\n        -nc ${params.min_overlap} \\\n        -sa ${params.ani_thr} \\\n        -l 1 \\\n        -comp ${params.min_completeness} \\\n        -con ${params.max_contamination} \\\n        -strW 0 \\\n        -g genomes_dir/*\n\n    mv drep/dereplicated_genomes filtered_repr\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    \"\"\"\n    mkdir genomes_dir\n    mv $genomes genomes_dir\n    dRep dereplicate \\\n        drep \\\n        --genomeInfo genomeinfo.csv \\\n        -p ${task.cpus} \\\n        -nc ${params.min_overlap} \\\n        -sa ${params.ani_thr} \\\n        -l 1 \\\n        -comp ${params.min_completeness} \\\n        -con ${params.max_contamination} \\\n        -strW 0 \\\n        -g genomes_dir/*\n\n    mv drep/dereplicated_genomes filtered_repr\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "dRep"
        ],
        "tools_url": [
            "https://bio.tools/drep"
        ],
        "tools_dico": [
            {
                "name": "dRep",
                "uri": "https://bio.tools/drep",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and accurate genomic comparisons that enables improved genome recovery from metagenomes through de-replication.",
                "homepage": "https://github.com/MrOlm/drep"
            }
        ],
        "inputs": [
            "genomes"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy' , pattern: 'filtered_repr/*'",
            "publishDir \"${params.outdir}\" , mode: 'copy' , pattern: 'drep/{data_tables,figures,log}/*'"
        ],
        "when": "",
        "stub": ""
    },
    "trnascan_se": {
        "name_process": "trnascan_se",
        "string_process": "\nprocess trnascan_se {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/trnascan_se/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(genome)\n\n    output:\n    path '*.tRNA.{bac,arc}.out', emit: out\n    path '*.tRNA.{bac,arc}.fa', emit: fa\n\n    script:\n    \"\"\"\n    mkdir temp\n\n    TMPDIR=temp tRNAscan-SE \\\n        --nopseudo \\\n        -B \\\n        --thread ${task.cpus} \\\n        --fasta ${id}.tRNA.bac.fa \\\n        -o ${id}.tRNA.bac.out \\\n        ${genome}\n\n    TMPDIR=temp tRNAscan-SE \\\n        --nopseudo \\\n        -A \\\n        --thread ${task.cpus} \\\n        --fasta ${id}.tRNA.arc.fa \\\n        -o ${id}.tRNA.arc.out \\\n        ${genome}\n\n    rm -rf temp\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    mkdir temp\n\n    TMPDIR=temp tRNAscan-SE \\\n        --nopseudo \\\n        -B \\\n        --thread ${task.cpus} \\\n        --fasta ${id}.tRNA.bac.fa \\\n        -o ${id}.tRNA.bac.out \\\n        ${genome}\n\n    TMPDIR=temp tRNAscan-SE \\\n        --nopseudo \\\n        -A \\\n        --thread ${task.cpus} \\\n        --fasta ${id}.tRNA.arc.fa \\\n        -o ${id}.tRNA.arc.out \\\n        ${genome}\n\n    rm -rf temp\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "genome"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/trnascan_se/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "checkm": {
        "name_process": "checkm",
        "string_process": "\nprocess checkm {      \n    input:\n    path(genomes)\n\n    output:\n    path 'qa.txt', emit: qa\n    \n    script:\n    reduced_tree = params.reduced_tree ? \"--reduced_tree\" : \"\"\n    \"\"\"\n    mkdir -p tmp\n    mkdir -p genomes_dir\n    mv $genomes genomes_dir\n\n    checkm lineage_wf \\\n        --tmpdir tmp \\\n        -t ${task.cpus} \\\n        -x ${params.ext} \\\n        ${reduced_tree} \\\n        genomes_dir \\\n        checkm\n\n    # repeat qa for the extended summary of bin quality\n    checkm qa \\\n        --tmpdir tmp \\\n        -t ${task.cpus} \\\n        --tab_table \\\n        -o 2 \\\n        -f qa.txt \\\n        checkm/lineage.ms \\\n        checkm \n    \n    rm -rf tmp/\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    reduced_tree = params.reduced_tree ? \"--reduced_tree\" : \"\"\n    \"\"\"\n    mkdir -p tmp\n    mkdir -p genomes_dir\n    mv $genomes genomes_dir\n\n    checkm lineage_wf \\\n        --tmpdir tmp \\\n        -t ${task.cpus} \\\n        -x ${params.ext} \\\n        ${reduced_tree} \\\n        genomes_dir \\\n        checkm\n\n    # repeat qa for the extended summary of bin quality\n    checkm qa \\\n        --tmpdir tmp \\\n        -t ${task.cpus} \\\n        --tab_table \\\n        -o 2 \\\n        -f qa.txt \\\n        checkm/lineage.ms \\\n        checkm \n    \n    rm -rf tmp/\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomes"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "genome_info": {
        "name_process": "genome_info",
        "string_process": "\nprocess genome_info {      \n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        pattern: 'genome_info.tsv'\n\n    input:\n    path('checkm_qa.txt')\n    path('gunc_out.tsv')\n    path(barrnap_gffs)\n    path(trnascan_se_outs)\n   \n    output:\n    path 'genome_info.tsv', emit: table \n\n    script:\n    \"\"\"\n    mkdir barrnap_gffs_dir\n    mv $barrnap_gffs barrnap_gffs_dir\n\n    mkdir trnascan_se_outs_dir\n    mv $trnascan_se_outs trnascan_se_outs_dir\n\n    genome_info.py \\\n        checkm_qa.txt \\\n        gunc_out.tsv \\\n        barrnap_gffs_dir \\\n        trnascan_se_outs_dir \\\n        genome_info.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    mkdir barrnap_gffs_dir\n    mv $barrnap_gffs barrnap_gffs_dir\n\n    mkdir trnascan_se_outs_dir\n    mv $trnascan_se_outs trnascan_se_outs_dir\n\n    genome_info.py \\\n        checkm_qa.txt \\\n        gunc_out.tsv \\\n        barrnap_gffs_dir \\\n        trnascan_se_outs_dir \\\n        genome_info.tsv\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barrnap_gffs",
            "trnascan_se_outs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy' , pattern: 'genome_info.tsv'"
        ],
        "when": "",
        "stub": ""
    },
    "genome_filter": {
        "name_process": "genome_filter",
        "string_process": "\nprocess genome_filter {\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        pattern: \"{genome_info_filtered.tsv,filtered/*}\"\n    \n    input:\n    path 'genome_info.tsv'\n    path(genomes)\n\n    output:\n    path 'genome_info_filtered.tsv', emit: table\n    path 'genome_info_filtered_drep.csv', emit: table_drep\n    path 'filtered/*', emit: genomes\n    \n    script:\n    gunc_filter = params.gunc_filter ? \"1\" : \"0\"\n    \"\"\"\n    mkdir genomes_dir\n    mv $genomes genomes_dir\n    genome_filter.py \\\n        genome_info.tsv \\\n        genomes_dir \\\n        ${params.ext} \\\n        genome_info_filtered.tsv \\\n        genome_info_filtered_drep.csv \\\n        filtered \\\n        ${params.min_completeness} \\\n        ${params.max_contamination} \\\n        $gunc_filter\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    gunc_filter = params.gunc_filter ? \"1\" : \"0\"\n    \"\"\"\n    mkdir genomes_dir\n    mv $genomes genomes_dir\n    genome_filter.py \\\n        genome_info.tsv \\\n        genomes_dir \\\n        ${params.ext} \\\n        genome_info_filtered.tsv \\\n        genome_info_filtered_drep.csv \\\n        filtered \\\n        ${params.min_completeness} \\\n        ${params.max_contamination} \\\n        $gunc_filter\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomes"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy' , pattern: \"{genome_info_filtered.tsv,filtered/*}\""
        ],
        "when": "",
        "stub": ""
    },
    "derep_info": {
        "name_process": "derep_info",
        "string_process": "\nprocess derep_info {\n        publishDir \"${params.outdir}\" , mode: 'copy'\n\n        input:\n        path 'Cdb.csv'\n        path 'Wdb.csv'\n\n        output:\n        path 'derep_info.tsv'\n\n        script:   \n        \"\"\"\n        derep_info.py Cdb.csv Wdb.csv ${params.ext} derep_info.tsv \n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        derep_info.py Cdb.csv Wdb.csv ${params.ext} derep_info.tsv \n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "barrnap": {
        "name_process": "barrnap",
        "string_process": "\nprocess barrnap {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/barrnap/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(genome)\n\n    output:\n    path '*.rRNA.{bac,arc}.gff', emit: gff\n    path '*.rRNA.{bac,arc}.fa', emit: fa\n\n    script:\n    \"\"\"\n    barrnap \\\n        --kingdom bac \\\n        --outseq ${id}.rRNA.bac.fa \\\n        --threads ${task.cpus} \\\n        ${genome} > ${id}.rRNA.bac.gff\n\n    barrnap \\\n        --kingdom arc \\\n        --outseq ${id}.rRNA.arc.fa \\\n        --threads ${task.cpus} \\\n        ${genome} > ${id}.rRNA.arc.gff\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    barrnap \\\n        --kingdom bac \\\n        --outseq ${id}.rRNA.bac.fa \\\n        --threads ${task.cpus} \\\n        ${genome} > ${id}.rRNA.bac.gff\n\n    barrnap \\\n        --kingdom arc \\\n        --outseq ${id}.rRNA.arc.fa \\\n        --threads ${task.cpus} \\\n        ${genome} > ${id}.rRNA.arc.gff\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Barrnap"
        ],
        "tools_url": [
            "https://bio.tools/barrnap"
        ],
        "tools_dico": [
            {
                "name": "Barrnap",
                "uri": "https://bio.tools/barrnap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1255",
                                "term": "Sequence features"
                            }
                        ]
                    }
                ],
                "description": "Predict the location of ribosomal RNA genes in genomes. It supports bacteria (5S,23S,16S), archaea (5S,5.8S,23S,16S), mitochondria (12S,16S) and eukaryotes (5S,5.8S,28S,18S).",
                "homepage": "https://github.com/tseemann/barrnap"
            }
        ],
        "inputs": [
            "id",
            "genome"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-quality",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/barrnap/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
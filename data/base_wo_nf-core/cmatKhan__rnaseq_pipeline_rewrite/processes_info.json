{
    "index": {
        "name_process": "index",
        "string_process": "process index {\n    tag \"$transcriptome.simpleName\"\n\n    input:\n    path transcriptome from params.transcriptome\n\n    output:\n    path 'index' into index_ch\n\n    script:\n    \"\"\"\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "params"
        ],
        "nb_inputs": 1,
        "outputs": [
            "index_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "tag \"$transcriptome.simpleName\""
        ],
        "when": "",
        "stub": ""
    },
    "quant": {
        "name_process": "quant",
        "string_process": "\nprocess quant {\n    tag \"$pair_id\"\n\n    input:\n    path index from index_ch\n    tuple pair_id, path(reads) from read_pairs_ch\n\n    output:\n    path pair_id into quant_ch\n\n    script:\n    \"\"\"\n    salmon quant --threads $task.cpus --libType=U -i $index -1 ${reads[0]} -2 ${reads[1]} -o $pair_id\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    salmon quant --threads $task.cpus --libType=U -i $index -1 ${reads[0]} -2 ${reads[1]} -o $pair_id\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "index_ch",
            "read_pairs_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "quant_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"FASTQC on $sample_id\"\n    publishDir params.outdir\n\n    input:\n    tuple sample_id, path(reads) from read_pairs2_ch\n\n    output:\n    path \"fastqc_${sample_id}_logs\" into fastqc_ch\n\n\n    script:\n    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "read_pairs2_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "tag \"FASTQC on $sample_id\"",
            "publishDir params.outdir"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir params.outdir, mode:'copy'\n    \n    input:\n    path 'data*/*' from quant_ch.mix(fastqc_ch).collect()\n    path config from params.multiqc\n\n    output:\n    path 'multiqc_report.html'\n\n    script:\n    \"\"\"\n    cp $config/* .\n    echo \"custom_logo: \\$PWD/logo.png\" >> multiqc_config.yaml\n    multiqc -v .\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    cp $config/* .\n    echo \"custom_logo: \\$PWD/logo.png\" >> multiqc_config.yaml\n    multiqc -v .\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "quant_ch",
            "fastqc_ch",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "novoalign": {
        "name_process": "novoalign",
        "string_process": "process novoalign {\n\n    scratch true\n    executor \"slurm\"\n    cpus 8\n    memory \"20G\"\n    beforeScript \"ml novoalign samtools\"\n    stageInMode \"copy\"\n    stageOutMode \"move\"\n    publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\"\n\n\n    input:\n        tuple val(run_directory), file(fastq_file), val(organism), val(strandedness), val(fastq_file_number) from fastq_filelist\n    output:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), val(organism), val(strandedness), file(\"${fastq_simple_name}_sorted_aligned_reads.bam\") into bam_align_ch\n        tuple val(run_directory), file(\"${fastq_simple_name}_novoalign.log\"), file(\"${fastq_simple_name}_novosort.log\") into novoalign_log_ch\n\n    \n#   output: 1> ${output_file_name}_sorted.bam\n#           2> ${output_file_name}_novosort.log\n\n    script:\n        \"\"\"\n        RunNovosort.sh -b /bamfile/path -o output_file_name -t num_threads\n\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        \"\"\"\n        RunNovosort.sh -b /bamfile/path -o output_file_name -t num_threads\n\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_filelist"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_align_ch",
            "novoalign_log_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "scratch true",
            "executor \"slurm\"",
            "cpus 8",
            "memory \"20G\"",
            "beforeScript \"ml novoalign samtools\"",
            "stageInMode \"copy\"",
            "stageOutMode \"move\"",
            "publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\""
        ],
        "when": "",
        "stub": ""
    },
    "fastQC": {
        "name_process": "fastQC",
        "string_process": "\nprocess fastQC {\n\n    executor \"slurm\"\n    memory memory_request\n    module \"fastqc/0.11.7-java-11\"\n    publishDir \"$params.align_count_results/$run_directory/fastqc\", mode:\"copy\", overwite: true, pattern: \"*_fastqc.zip\"\n\n    input:\n        tuple val(run_directory), file(fastq_file), val(organism), val(strandedness), val(fastq_file_number) from fastqc_ch\n    output:\n        file(\"${fastq_simple_name}_fastqc.zip\")\n    script:\n        fastq_simple_name = fastq_file.getSimpleName()\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunFastQC.sh -f $fastq_file\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        fastq_simple_name = fastq_file.getSimpleName()\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunFastQC.sh -f $fastq_file\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastqc_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "executor \"slurm\"",
            "memory memory_request",
            "module \"fastqc/0.11.7-java-11\"",
            "publishDir \"$params.align_count_results/$run_directory/fastqc\", mode:\"copy\", overwite: true, pattern: \"*_fastqc.zip\""
        ],
        "when": "",
        "stub": ""
    },
    "Novoalign": {
        "name_process": "Novoalign",
        "string_process": "\nprocess Novoalign {\n\n    executor \"slurm\"\n    cpus num_cpus\n    memory memory_request\n    module \"novoalign/3.09.01\"\n    publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\"\n\n    input:\n        tuple val(run_directory), file(fastq_file), val(organism), val(strandedness), val(fastq_file_number) from aligner_input_ch\n    output:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), val(organism), val(strandedness), file(\"${fastq_simple_name}.bam\") into bam_align_ch\n        tuple val(fastq_file_number), val(fastq_simple_name), file(\"${fastq_simple_name}_novoalign.log\") into novoalign_log_ch\n\n    script:\n        fastq_simple_name = fastq_file.getSimpleName()\n        index = index_map[organism]\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunNovoalign.sh -i $index -f $fastq_file -o $fastq_simple_name -c $num_cpus\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        fastq_simple_name = fastq_file.getSimpleName()\n        index = index_map[organism]\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunNovoalign.sh -i $index -f $fastq_file -o $fastq_simple_name -c $num_cpus\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "aligner_input_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_align_ch",
            "novoalign_log_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "executor \"slurm\"",
            "cpus num_cpus",
            "memory memory_request",
            "module \"novoalign/3.09.01\"",
            "publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\""
        ],
        "when": "",
        "stub": ""
    },
    "HtseqCount": {
        "name_process": "HtseqCount",
        "string_process": "\nprocess HtseqCount {\n\n    executor \"slurm\"\n    memory \"10G\"\n                         \n                    \n    module \"htseq/0.9.1\"\n    publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\"\n    publishDir \"$params.align_count_results/$run_directory/count\", mode:\"copy\", overwite: true, pattern: \"*_read_count.tsv\"\n    publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*.sam\"\n\n\n    input:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), val(organism), val(strandedness), file(bam) from bam_htseq_ch\n    output:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), file(\"${fastq_simple_name}_read_count.tsv\") into htseq_count_ch\n        file(\"${fastq_simple_name}_htseq.log\") into htseq_log_ch\n        tuple val(run_directory), val(organism), val(strandedness) into pipeline_info_ch\n\n                                                                                                                                                                                                            \n                                                    \n                                               \n\n    script:\n        if (organism == 'S288C_R64')\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunHtseqCounts.sh -f $bam -a $params.S288C_R64_annotation_file -t exon -i gene -s $strandedness -o $fastq_simple_name\n        \"\"\"\n        else if (organism == 'KN99' && strandedness == 'reverse')\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunHtseqCounts.sh -f $bam -a $params.KN99_annotation_file -t exon -i gene -s $strandedness -o $fastq_simple_name\n        \"\"\"\n        else if (organism == 'KN99' && strandedness == 'no')\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunHtseqCounts.sh -f $bam -a $params.KN99_annotation_file_no_strand -t exon -i gene -s $strandedness -o $fastq_simple_name\n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "        if (organism == 'S288C_R64')\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunHtseqCounts.sh -f $bam -a $params.S288C_R64_annotation_file -t exon -i gene -s $strandedness -o $fastq_simple_name\n        \"\"\"\n        else if (organism == 'KN99' && strandedness == 'reverse')\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunHtseqCounts.sh -f $bam -a $params.KN99_annotation_file -t exon -i gene -s $strandedness -o $fastq_simple_name\n        \"\"\"\n        else if (organism == 'KN99' && strandedness == 'no')\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunHtseqCounts.sh -f $bam -a $params.KN99_annotation_file_no_strand -t exon -i gene -s $strandedness -o $fastq_simple_name\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_htseq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "htseq_count_ch",
            "htseq_log_ch",
            "pipeline_info_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "executor \"slurm\"",
            "memory \"10G\"",
            "module \"htseq/0.9.1\"",
            "publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\"",
            "publishDir \"$params.align_count_results/$run_directory/count\", mode:\"copy\", overwite: true, pattern: \"*_read_count.tsv\"",
            "publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*.sam\""
        ],
        "when": "",
        "stub": ""
    },
    "Novosort": {
        "name_process": "Novosort",
        "string_process": "\nprocess Novosort {\n\n    executor \"slurm\"\n    cpus 8\n    memory \"20G\"\n    module \"novoalign/3.09.01\"\n    publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*.bam\"\n\n\n    input:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), val(organism), val(strandedness), file(bam) from bam_novosort_ch\n    output:\n        tuple val(run_directory), file(\"${fastq_simple_name}_sorted.bam\") into sorted_bam_ch\n        file(\"${fastq_simple_name}_novosort.log\") into novosort_ch\n\n    \n                                                \n                                                  \n\n    script:\n        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunNovosort.sh -b $bam -o $fastq_simple_name -t 8\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        /home/chasem/rnaseq_pipeline_rewrite/scripts/bash/RunNovosort.sh -b $bam -o $fastq_simple_name -t 8\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_novosort_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam_ch",
            "novosort_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "executor \"slurm\"",
            "cpus 8",
            "memory \"20G\"",
            "module \"novoalign/3.09.01\"",
            "publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*.bam\""
        ],
        "when": "",
        "stub": ""
    },
    "IndexFinalBam": {
        "name_process": "IndexFinalBam",
        "string_process": "\nprocess IndexFinalBam {\n    executor \"slurm\"\n    memory \"10G\"\n    module \"rnaseq_pipeline\"\n                       \n    publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*.bai\"\n\n    input:\n        tuple val(run_directory), file(sorted_annoted_bam) from sorted_bam_ch\n    output:\n        file('*.bai') into index_ch\n\n    script:\n    \"\"\"\n        samtools index $sorted_annoted_bam\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n        samtools index $sorted_annoted_bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sorted_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "index_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "executor \"slurm\"",
            "memory \"10G\"",
            "module \"rnaseq_pipeline\"",
            "publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*.bai\""
        ],
        "when": "",
        "stub": ""
    },
    "postHtseqCountsToDatabase": {
        "name_process": "postHtseqCountsToDatabase",
        "string_process": "process postHtseqCountsToDatabase {\n\n    executor \"local\"\n    beforeScript \"ml rnaseq_pipeline\"\n\n    input:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), file(read_count_tsv) from htseq_count_ch\n\n    # output: ${sample_name}_counts.csv, ${sample_name}_htseq_qc.csv\n    # database_interaction: post to url\n\n    script:\n    \"\"\"\n        if [[ post is set to true in params ]]l; then\n            PostCountsToDatabase.py -c /path/to/count/file -n sample_name -i fastq_file_number -u url\n        else\n            PostCountsToDatabase.py -c /path/to/count/file -n sample_name -i fastq_file_number -u url --no-post\n        fi\n    \"\"\"\n\n\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n        if [[ post is set to true in params ]]l; then\n            PostCountsToDatabase.py -c /path/to/count/file -n sample_name -i fastq_file_number -u url\n        else\n            PostCountsToDatabase.py -c /path/to/count/file -n sample_name -i fastq_file_number -u url --no-post\n        fi\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "htseq_count_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "executor \"local\"",
            "beforeScript \"ml rnaseq_pipeline\""
        ],
        "when": "",
        "stub": ""
    },
    "htseq_count": {
        "name_process": "htseq_count",
        "string_process": "process htseq_count {\n\n    scratch true\n    executor \"slurm\"\n    cpus 8\n    memory \"20G\"\n    beforeScript \"ml samtools htseq\"\n    stageInMode \"copy\"\n    stageOutMode \"move\"\n    publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\"\n    publishDir \"$params.align_count_results/$run_directory/count\", mode:\"copy\", overwite: true, pattern: \"*_read_count.tsv\"\n    publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*_sorted_aligned_reads_with_annote.bam\"\n\n\n    input:\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), val(organism), val(strandedness), file(sorted_bam) from bam_align_ch\n    output:\n        tuple val(run_directory), val(fastq_simple_name), val(organism), val(strandedness), file(\"${fastq_simple_name}_sorted_aligned_reads_with_annote.bam\") into bam_align_with_htseq_annote_ch\n        tuple val(fastq_file_number), val(run_directory), val(fastq_simple_name), file(\"${fastq_simple_name}_read_count.tsv\") into htseq_count_ch\n        tuple val(run_directory), val(fastq_simple_name), file(\"${fastq_simple_name}_htseq.log\") into htseq_log_ch\n        tuple val(run_directory), val(organism), val(strandedness) into pipeline_info_ch\n\n#   output: -o ${output_file_name}_htseq_annote.sam (this is a file with the same number of lines as the input bam and gives a flag eg XF:CNAG_12345 for the feature count to which the read contributed)\n#           1> ${output_file_name}_read_count.tsv\n#           2> ${output_file_name}_htseq.log\n\n    script:\n        \"\"\"\n        RunHtseqCounts.sh -b /path/to/SORTED/bamfile -a /path/to/annotation/file -t feature_type -i id_attribute -s strandedness -o output_file_name\n        \n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        \"\"\"\n        RunHtseqCounts.sh -b /path/to/SORTED/bamfile -a /path/to/annotation/file -t feature_type -i id_attribute -s strandedness -o output_file_name\n        \n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_align_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_align_with_htseq_annote_ch",
            "htseq_count_ch",
            "htseq_log_ch",
            "pipeline_info_ch"
        ],
        "nb_outputs": 4,
        "name_workflow": "cmatKhan__rnaseq_pipeline_rewrite",
        "directive": [
            "scratch true",
            "executor \"slurm\"",
            "cpus 8",
            "memory \"20G\"",
            "beforeScript \"ml samtools htseq\"",
            "stageInMode \"copy\"",
            "stageOutMode \"move\"",
            "publishDir \"$params.align_count_results/$run_directory/logs\", mode:\"copy\", overwite: true, pattern: \"*.log\"",
            "publishDir \"$params.align_count_results/$run_directory/count\", mode:\"copy\", overwite: true, pattern: \"*_read_count.tsv\"",
            "publishDir \"$params.align_count_results/$run_directory/align\", mode:\"copy\", overwite: true, pattern: \"*_sorted_aligned_reads_with_annote.bam\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "CUTADAPT": {
        "name_process": "CUTADAPT",
        "string_process": "\nprocess CUTADAPT {\n\n    label 'process_low'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename ->\n          saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID)\n        }\n\n\n    container \"quay.io/biocontainers/cutadapt:2.10--py37hf01694f_1\"\n\n    conda (params.conda ? \"${moduleDir}/environment.yml\" : null)\n\n\n  input:\n                                                                                        \n                                                       \n                                                                             \n                                                                                          \n  tuple val(meta), path(reads)\n\n                                                \n                                      \n                                                                          \n  val options\n\n  output:\n  tuple val(meta), path(\"*_trimmed.fastq.gz\"), emit: reads\n  tuple val(meta), path(\"*_trim.*\"), emit: logs\n  path \"*.version.txt\", emit: version\n\n  script:\n  def cutopts  = initOptions(options)\n\n  if (params.single_end) {\n    \"\"\"\n    cutadapt \\\n    -j ${task.cpus} \\\n    -a file:${options.adapterfile3} \\\n    -g file:${options.adapterfile5} \\\n    -o ${sampleprefix}_R1_trimmed.fastq.gz \\\n    ${reads[0]} \\\n    ${cutopts.args} \\\n    > ${meta.sampleID}.trim.out \\\n    2> ${meta.sampleID}.trim.err\n\n    cutadapt --version >cutadapt.version.txt\n    \"\"\"\n  } else {\n    \"\"\"\n    cutadapt \\\n    -j ${task.cpus} \\\n    -a file:${options.adapterfile3} \\\n    -A file:${options.adapterfile3} \\\n    -g file:${options.adapterfile5} \\\n    -G file:${options.adapterfile5} \\\n    -o ${meta.sampleID}_R1_trimmed.fastq.gz \\\n    -p ${meta.sampleID}_R2_trimmed.fastq.gz \\\n    ${reads[0]} ${reads[1]} \\\n    ${cutopts.args2} \\\n    > ${meta.sampleID}_trim.out \\\n    2> ${meta.sampleID}_trim.err\n\n    cutadapt --version >cutadapt.version.txt\n    \"\"\"\n  }\n\n\n\n}",
        "nb_lignes_process": 71,
        "string_script": "  def cutopts  = initOptions(options)\n\n  if (params.single_end) {\n    \"\"\"\n    cutadapt \\\n    -j ${task.cpus} \\\n    -a file:${options.adapterfile3} \\\n    -g file:${options.adapterfile5} \\\n    -o ${sampleprefix}_R1_trimmed.fastq.gz \\\n    ${reads[0]} \\\n    ${cutopts.args} \\\n    > ${meta.sampleID}.trim.out \\\n    2> ${meta.sampleID}.trim.err\n\n    cutadapt --version >cutadapt.version.txt\n    \"\"\"\n  } else {\n    \"\"\"\n    cutadapt \\\n    -j ${task.cpus} \\\n    -a file:${options.adapterfile3} \\\n    -A file:${options.adapterfile3} \\\n    -g file:${options.adapterfile5} \\\n    -G file:${options.adapterfile5} \\\n    -o ${meta.sampleID}_R1_trimmed.fastq.gz \\\n    -p ${meta.sampleID}_R2_trimmed.fastq.gz \\\n    ${reads[0]} ${reads[1]} \\\n    ${cutopts.args2} \\\n    > ${meta.sampleID}_trim.out \\\n    2> ${meta.sampleID}_trim.err\n\n    cutadapt --version >cutadapt.version.txt\n    \"\"\"\n  }",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "options"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nibscbioinformatics__modules",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID) }",
            "container \"quay.io/biocontainers/cutadapt:2.10--py37hf01694f_1\"",
            "conda (params.conda ? \"${moduleDir}/environment.yml\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "FLASH": {
        "name_process": "FLASH",
        "string_process": "\nprocess FLASH {\n                                                                       \n                            \n    label 'process_low'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename ->\n          saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID)\n        }\n\n                                                          \n    container \"quay.io/biocontainers/flash:1.2.11--hed695b0_5\"\n\n    conda (params.conda ? \"${moduleDir}/environment.yml\" : null)\n\n\n  input:\n  tuple val(meta), path(reads)\n  val options\n\n  output:\n  tuple val(meta), path(\"${meta.sampleID}.extendedFrags.fastq.gz\"), emit: reads\n  path \"*.version.txt\", emit: version\n\n  script:\n                                                               \n                                             \n  def flashopts  = initOptions(options)\n  \"\"\"\n  flash \\\n  -t ${task.cpus} \\\n  --quiet \\\n  -o ${meta.sampleID} \\\n  -z ${flashopts.args} \\\n  ${reads[0]} ${reads[1]}\n\n  flash -v | head -n 1 | cut -d\" \" -f 2 >flash.version.txt\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 41,
        "string_script": "  def flashopts  = initOptions(options)\n  \"\"\"\n  flash \\\n  -t ${task.cpus} \\\n  --quiet \\\n  -o ${meta.sampleID} \\\n  -z ${flashopts.args} \\\n  ${reads[0]} ${reads[1]}\n\n  flash -v | head -n 1 | cut -d\" \" -f 2 >flash.version.txt\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "FLASH"
        ],
        "tools_url": [
            "https://bio.tools/flash"
        ],
        "tools_dico": [
            {
                "name": "FLASH",
                "uri": "https://bio.tools/flash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Sequence read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Identifies paired-end reads which overlap in the middle, converting them to single long reads",
                "homepage": "http://ccb.jhu.edu/software/FLASH/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "options"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nibscbioinformatics__modules",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID) }",
            "container \"quay.io/biocontainers/flash:1.2.11--hed695b0_5\"",
            "conda (params.conda ? \"${moduleDir}/environment.yml\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "CDHIT": {
        "name_process": "CDHIT",
        "string_process": "\nprocess CDHIT {\n                                                                       \n                            \n    label 'process_low'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename ->\n          saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID)\n        }\n\n    container \"biocontainers/cd-hit:v4.6.8-2-deb_cv1\"\n\n    conda (params.conda ? \"${moduleDir}/environment.yml\" : null)\n\n\n  input:\n                                                                                        \n                                                       \n                                                                             \n                                                                                          \n  tuple val(meta), path(reads)\n\n  val options\n\n  output:\n  tuple val(meta), path(\"*.clusters\"), emit: clusterseq\n  tuple val(meta), path(\"*.clstr\"), emit: clusters\n  path \"*.version.txt\", emit: version\n\n  script:\n  \"\"\"\n  cd-hit \\\n  -i ${reads} \\\n  -o ${meta.sampleID}.aa.clusters \\\n  ${options.args} \\\n  -T ${task.cpus} \\\n  -M ${task.memory.toMega()}\n\n  cd-hit -h | head -n1 | cut -d\" \" -f4,5,6,7,8,9 >cd-hit.version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "  \"\"\"\n  cd-hit \\\n  -i ${reads} \\\n  -o ${meta.sampleID}.aa.clusters \\\n  ${options.args} \\\n  -T ${task.cpus} \\\n  -M ${task.memory.toMega()}\n\n  cd-hit -h | head -n1 | cut -d\" \" -f4,5,6,7,8,9 >cd-hit.version.txt\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "cd-hit"
        ],
        "tools_url": [
            "https://bio.tools/cd-hit"
        ],
        "tools_dico": [
            {
                "name": "cd-hit",
                "uri": "https://bio.tools/cd-hit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Cluster a nucleotide dataset into representative sequences.",
                "homepage": "https://github.com/weizhongli/cdhit"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "options"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nibscbioinformatics__modules",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID) }",
            "container \"biocontainers/cd-hit:v4.6.8-2-deb_cv1\"",
            "conda (params.conda ? \"${moduleDir}/environment.yml\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n                                                                       \n                            \n    label 'process_low'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n                                                                                                \n                                                                                                        \n        saveAs: { filename ->\n          saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID)\n        }\n\n\n                                                                   \n                                                                        \n                        \n    container \"quay.io/biocontainers/fastqc:0.11.9--0\"                                                \n                                                                                                     \n                                                    \n\n    conda (params.conda ? \"${moduleDir}/environment.yml\" : null)\n\n\n  input:\n                                                                                        \n                                                       \n                                                                             \n                                                                                          \n  tuple val(meta), path(reads)\n\n                                                \n                                      \n                                                                          \n\n                                                                      \n  val options\n\n  output:\n  tuple val(meta), path(\"*.html\"), emit: html\n  tuple val(meta), path(\"*.zip\"), emit: zip\n  path \"*.version.txt\", emit: version\n\n  script:\n                                               \n                                       \n  if (params.single_end) {\n      \"\"\"\n      [ ! -f  ${meta.sampleID}.fastq.gz ] && ln -s $reads ${meta.sampleID}.fastq.gz\n      fastqc ${params.modules['fastqc'].args} --threads $task.cpus ${meta.sampleID}.fastq.gz\n      fastqc --version | sed -n \"s/.*\\\\(v.*\\$\\\\)/\\\\1/p\" > fastqc.version.txt\n      \"\"\"\n  } else {\n      \"\"\"\n      [ ! -f  ${meta.sampleID}_1.fastq.gz ] && ln -s ${reads[0]} ${meta.sampleID}_1.fastq.gz\n      [ ! -f  ${meta.sampleID}_2.fastq.gz ] && ln -s ${reads[1]} ${meta.sampleID}_2.fastq.gz\n      fastqc ${params.modules['fastqc'].args} --threads $task.cpus ${meta.sampleID}_1.fastq.gz ${meta.sampleID}_2.fastq.gz\n      fastqc --version | sed -n \"s/.*\\\\(v.*\\$\\\\)/\\\\1/p\" > fastqc.version.txt\n      \"\"\"\n  }\n}",
        "nb_lignes_process": 60,
        "string_script": "  if (params.single_end) {\n      \"\"\"\n      [ ! -f  ${meta.sampleID}.fastq.gz ] && ln -s $reads ${meta.sampleID}.fastq.gz\n      fastqc ${params.modules['fastqc'].args} --threads $task.cpus ${meta.sampleID}.fastq.gz\n      fastqc --version | sed -n \"s/.*\\\\(v.*\\$\\\\)/\\\\1/p\" > fastqc.version.txt\n      \"\"\"\n  } else {\n      \"\"\"\n      [ ! -f  ${meta.sampleID}_1.fastq.gz ] && ln -s ${reads[0]} ${meta.sampleID}_1.fastq.gz\n      [ ! -f  ${meta.sampleID}_2.fastq.gz ] && ln -s ${reads[1]} ${meta.sampleID}_2.fastq.gz\n      fastqc ${params.modules['fastqc'].args} --threads $task.cpus ${meta.sampleID}_1.fastq.gz ${meta.sampleID}_2.fastq.gz\n      fastqc --version | sed -n \"s/.*\\\\(v.*\\$\\\\)/\\\\1/p\" > fastqc.version.txt\n      \"\"\"\n  }",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "options"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nibscbioinformatics__modules",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID) }",
            "container \"quay.io/biocontainers/fastqc:0.11.9--0\"",
            "conda (params.conda ? \"${moduleDir}/environment.yml\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "MAFFT": {
        "name_process": "MAFFT",
        "string_process": "\nprocess MAFFT {\n                                                                       \n                            \n    label 'process_low'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename ->\n          saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID)\n        }\n\n    container \"quay.io/biocontainers/mafft:7.471--h516909a_0\"\n\n    conda (params.conda ? \"${moduleDir}/environment.yml\" : null)\n\n\n  input:\n                                                                                        \n                                                       \n                                                                             \n                                                                                          \n  tuple val(meta), path(fasta)\n\n  val options\n\n  output:\n  tuple val(meta), path(\"${meta.sampleID}_mafft.fasta\"), emit: fasta\n  tuple val(meta), path(\"*.tree\"), emit: tree\n  path \"*.version.txt\", emit: version\n\n  script:\n  \"\"\"\n  mafft \\\n  ${options.args} \\\n  ${fasta} \\\n  > ${meta.sampleID}_mafft.fasta\n\n  mafft --version >mafft.version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "  \"\"\"\n  mafft \\\n  ${options.args} \\\n  ${fasta} \\\n  > ${meta.sampleID}_mafft.fasta\n\n  mafft --version >mafft.version.txt\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "options"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nibscbioinformatics__modules",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:options, publish_dir:getSoftwareName(task.process), publish_id:meta.sampleID) }",
            "container \"quay.io/biocontainers/mafft:7.471--h516909a_0\"",
            "conda (params.conda ? \"${moduleDir}/environment.yml\" : null)"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "downloadGenome": {
        "name_process": "downloadGenome",
        "string_process": "\nprocess downloadGenome {\n  container \"quay.io/fhcrc-microbiome/wget@sha256:98b90e8bb8a171182505f1e255b0bd85cbbda68f08c08b4877c3fc48e63ac82f\"\n  cpus 1\n  memory \"4 GB\"\n  errorStrategy 'retry'\n  \n  input:\n  set organism_name, fasta_url from download_genome_ch\n  \n  output:\n  set organism_name, file(\"${organism_name}.fasta.gz\") into get_headers_ch, get_ribosome_fasta_ch\n  file \"${organism_name}.fasta.gz\" into get_genome_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nwget -O ${organism_name}.fasta.gz ${fasta_url}\n\ngzip -t ${organism_name}.fasta.gz\n\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nwget -O ${organism_name}.fasta.gz ${fasta_url}\n\ngzip -t ${organism_name}.fasta.gz\n\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "download_genome_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "get_headers_ch",
            "get_ribosome_fasta_ch",
            "get_genome_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/wget@sha256:98b90e8bb8a171182505f1e255b0bd85cbbda68f08c08b4877c3fc48e63ac82f\"",
            "cpus 1",
            "memory \"4 GB\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadGFF": {
        "name_process": "downloadGFF",
        "string_process": "\nprocess downloadGFF {\n  container \"quay.io/fhcrc-microbiome/wget@sha256:98b90e8bb8a171182505f1e255b0bd85cbbda68f08c08b4877c3fc48e63ac82f\"\n  cpus 1\n  memory \"4 GB\"\n  errorStrategy 'retry'\n  \n  input:\n  set organism_name, gff_url from download_gff_ch\n  \n  output:\n  set organism_name, file(\"${organism_name}.gff.gz\") into get_ribosome_gff_ch, all_gff_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nwget -O ${organism_name}.gff.gz ${gff_url}\n\ngzip -t ${organism_name}.gff.gz\n\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nwget -O ${organism_name}.gff.gz ${gff_url}\n\ngzip -t ${organism_name}.gff.gz\n\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "download_gff_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "get_ribosome_gff_ch",
            "all_gff_ch afterScript"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/wget@sha256:98b90e8bb8a171182505f1e255b0bd85cbbda68f08c08b4877c3fc48e63ac82f\"",
            "cpus 1",
            "memory \"4 GB\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "indexHost": {
        "name_process": "indexHost",
        "string_process": "\nprocess indexHost {\n\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}\"\n\n  input:\n  file host_genome\n  \n  output:\n  file \"${host_genome}.tar\"\n  \n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nbwa index ${host_genome}\ntar cvf ${host_genome}.tar ${host_genome}*\n  \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nbwa index ${host_genome}\ntar cvf ${host_genome}.tar ${host_genome}*\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "host_genome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "extractRibosomes": {
        "name_process": "extractRibosomes",
        "string_process": "\nprocess extractRibosomes {\n  container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"\n  cpus 1\n  memory \"4 GB\"\n\n  input:\n  set organism_name, file(fasta), file(gff3) from get_ribosome_fasta_ch.join(get_ribosome_gff_ch)\n  \n  output:\n  file \"${fasta}.ribosome.fasta\" into ribosome_fasta_ch\n  file \"${fasta}.ribosome.tsv\" into ribosome_tsv_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport gzip\nfrom Bio.SeqIO.FastaIO import SimpleFastaParser\nfrom Bio.Seq import Seq\n\ndef safe_open(fp, mode=\"rt\"):\n    if fp.endswith(\".gz\"):\n        return gzip.open(fp, mode=mode)\n    return open(fp, mode=mode)\n\n# Get the location of all ribosomes from the GFF3\nribosomes = []\nfor line in safe_open(\"${gff3}\"):\n    if line[0] == '#':\n        continue\n    line = line.split(\"\\\\t\")\n    if line[2] == \"rRNA\":\n        # Get the gene name\n        gene_desc = dict([\n            field.split(\"=\", 1)\n            for field in line[8].split(\";\")\n        ])\n        assert \"ID\" in gene_desc\n        # Header, start, end, strand\n        assert line[6] in [\"+\", \"-\"], line[6]\n        assert int(line[3]) < int(line[4])\n        ribosomes.append((line[0], int(line[3]), int(line[4]), line[6], gene_desc[\"ID\"]))\n\n# Make sure that the gene names are all unique\nn_unique = len(set([f[4] for f in ribosomes]))\nassert n_unique == len(ribosomes), (n_unique, len(ribosomes))\n\n# Extract the sequences from the FASTA\n# Write out a TSV linking each FASTA header to the organism\nn_written = 0\nwith open(\"${fasta}.ribosome.fasta\", \"wt\") as fasta_out, open(\"${fasta}.ribosome.tsv\", \"wt\") as tsv_out:\n    for h, s in SimpleFastaParser(safe_open(\"${fasta}\")):\n        h = h.split(\" \")[0].split(\"\\\\t\")[0]\n        for header, start, end, strand, gene_id in ribosomes:\n            if header == h:\n                \n                gene_sequence = s[start - 1: end]\n                if strand == \"-\":\n                    gene_sequence = str(Seq(gene_sequence).reverse_complement())\n\n                gene_name = header + \"_\" + gene_id\n                fasta_out.write(\">\" + gene_name + \"\\\\n\" + gene_sequence + \"\\\\n\")\n                tsv_out.write(\"${organism_name}\\\\t\" + gene_name + \"\\\\n\")\n                n_written += 1\n\nassert n_written == len(ribosomes), (n_written, len(ribosomes))\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 69,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport gzip\nfrom Bio.SeqIO.FastaIO import SimpleFastaParser\nfrom Bio.Seq import Seq\n\ndef safe_open(fp, mode=\"rt\"):\n    if fp.endswith(\".gz\"):\n        return gzip.open(fp, mode=mode)\n    return open(fp, mode=mode)\n\n# Get the location of all ribosomes from the GFF3\nribosomes = []\nfor line in safe_open(\"${gff3}\"):\n    if line[0] == '#':\n        continue\n    line = line.split(\"\\\\t\")\n    if line[2] == \"rRNA\":\n        # Get the gene name\n        gene_desc = dict([\n            field.split(\"=\", 1)\n            for field in line[8].split(\";\")\n        ])\n        assert \"ID\" in gene_desc\n        # Header, start, end, strand\n        assert line[6] in [\"+\", \"-\"], line[6]\n        assert int(line[3]) < int(line[4])\n        ribosomes.append((line[0], int(line[3]), int(line[4]), line[6], gene_desc[\"ID\"]))\n\n# Make sure that the gene names are all unique\nn_unique = len(set([f[4] for f in ribosomes]))\nassert n_unique == len(ribosomes), (n_unique, len(ribosomes))\n\n# Extract the sequences from the FASTA\n# Write out a TSV linking each FASTA header to the organism\nn_written = 0\nwith open(\"${fasta}.ribosome.fasta\", \"wt\") as fasta_out, open(\"${fasta}.ribosome.tsv\", \"wt\") as tsv_out:\n    for h, s in SimpleFastaParser(safe_open(\"${fasta}\")):\n        h = h.split(\" \")[0].split(\"\\\\t\")[0]\n        for header, start, end, strand, gene_id in ribosomes:\n            if header == h:\n                \n                gene_sequence = s[start - 1: end]\n                if strand == \"-\":\n                    gene_sequence = str(Seq(gene_sequence).reverse_complement())\n\n                gene_name = header + \"_\" + gene_id\n                fasta_out.write(\">\" + gene_name + \"\\\\n\" + gene_sequence + \"\\\\n\")\n                tsv_out.write(\"${organism_name}\\\\t\" + gene_name + \"\\\\n\")\n                n_written += 1\n\nassert n_written == len(ribosomes), (n_written, len(ribosomes))\n\n  \"\"\"",
        "nb_lignes_script": 53,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "get_ribosome_fasta_ch",
            "get_ribosome_gff_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ribosome_fasta_ch",
            "ribosome_tsv_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"",
            "cpus 1",
            "memory \"4 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "indexRibosomes": {
        "name_process": "indexRibosomes",
        "string_process": "\nprocess indexRibosomes {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}\"\n\n  input:\n  file ribosome_fasta from ribosome_fasta_ch.collect()\n  val database_prefix from params.database_prefix\n  \n  output:\n  file \"${database_prefix}.ribosomes.tar\"\n  \n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\n# Concatenate all FASTAs\nfor f in ${ribosome_fasta}; do\n    cat \\$f >> ${database_prefix}.ribosomes.fasta\ndone\n\n# Index the ribosomal sequences\nbwa index ${database_prefix}.ribosomes.fasta\n\n# Tar up the index\ntar cvf ${database_prefix}.ribosomes.tar ${database_prefix}.ribosomes.fasta*\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\n# Concatenate all FASTAs\nfor f in ${ribosome_fasta}; do\n    cat \\$f >> ${database_prefix}.ribosomes.fasta\ndone\n\n# Index the ribosomal sequences\nbwa index ${database_prefix}.ribosomes.fasta\n\n# Tar up the index\ntar cvf ${database_prefix}.ribosomes.tar ${database_prefix}.ribosomes.fasta*\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "ribosome_fasta_ch",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "collectRibosomeTSV": {
        "name_process": "collectRibosomeTSV",
        "string_process": "\nprocess collectRibosomeTSV {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}\"\n\n  input:\n  file ribosome_tsv from ribosome_tsv_ch.collect()\n  val database_prefix from params.database_prefix\n  \n  output:\n  file \"${database_prefix}.ribosomes.tsv\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\n# Concatenate all TSVs\nfor f in ${ribosome_tsv}; do\n    cat \\$f >> ${database_prefix}.ribosomes.tsv\ndone\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\n# Concatenate all TSVs\nfor f in ${ribosome_tsv}; do\n    cat \\$f >> ${database_prefix}.ribosomes.tsv\ndone\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ribosome_tsv_ch",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "genomeHeaders": {
        "name_process": "genomeHeaders",
        "string_process": "\nprocess genomeHeaders {\n  container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"\n  cpus 1\n  memory \"4 GB\"\n\n  input:\n  set organism_name, file(fasta) from get_headers_ch\n  \n  output:\n  file \"${organism_name}.headers.tsv.gz\" into genome_headers\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nfrom Bio.SeqIO.FastaIO import SimpleFastaParser\nimport gzip\n\ndef safe_open(fp, mode=\"rt\"):\n    if fp.endswith(\".gz\"):\n        return gzip.open(fp, mode=mode)\n    return open(fp, mode=mode)\n\n# Extract the headers from the FASTA and write out to TSV\nwith gzip.open(\"${organism_name}.headers.tsv.gz\", \"wt\") as fo:\n    for header, seq in SimpleFastaParser(safe_open(\"${fasta}\")):\n        header = header.split(\" \")[0].split(\"\\\\t\")[0].rstrip(\"\\\\n\")\n        fo.write(\"${organism_name}\\\\t\" + header + \"\\\\n\")\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nfrom Bio.SeqIO.FastaIO import SimpleFastaParser\nimport gzip\n\ndef safe_open(fp, mode=\"rt\"):\n    if fp.endswith(\".gz\"):\n        return gzip.open(fp, mode=mode)\n    return open(fp, mode=mode)\n\n# Extract the headers from the FASTA and write out to TSV\nwith gzip.open(\"${organism_name}.headers.tsv.gz\", \"wt\") as fo:\n    for header, seq in SimpleFastaParser(safe_open(\"${fasta}\")):\n        header = header.split(\" \")[0].split(\"\\\\t\")[0].rstrip(\"\\\\n\")\n        fo.write(\"${organism_name}\\\\t\" + header + \"\\\\n\")\n\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "get_headers_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genome_headers"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"",
            "cpus 1",
            "memory \"4 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "concatGenomes": {
        "name_process": "concatGenomes",
        "string_process": "\nprocess concatGenomes {\n  container \"ubuntu:16.04\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}\"\n  \n  input:\n  file \"*\" from get_genome_ch.collect()\n  val database_prefix from params.database_prefix\n  \n  output:\n  file \"${database_prefix}.fasta.gz\"\n  \n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\ncat *fasta.gz >> ${database_prefix}.fasta.gz\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\ncat *fasta.gz >> ${database_prefix}.fasta.gz\n\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "get_genome_ch",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "concatHeaders": {
        "name_process": "concatHeaders",
        "string_process": "\nprocess concatHeaders {\n  container \"ubuntu:16.04\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}\"\n  \n  input:\n  file \"*\" from genome_headers.collect()\n  val database_prefix from params.database_prefix\n  \n  output:\n  file \"${database_prefix}.tsv.gz\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n\n#!/bin/bash\n\nset -e\n\ncat *tsv.gz > ${database_prefix}.tsv.gz\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n\n#!/bin/bash\n\nset -e\n\ncat *tsv.gz > ${database_prefix}.tsv.gz\n\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_headers",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "preConcatGFF": {
        "name_process": "preConcatGFF",
        "string_process": "\nprocess preConcatGFF {\n  container \"ubuntu:16.04\"\n  cpus 8\n  memory \"60 GB\"\n  \n  input:\n  file all_gff from all_gff_ch.map{ i -> i[1] }.collate(100)\n  \n  output:\n  file \"*.gff.gz\" into grouped_gff_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nfor gff in *.gff.gz; do\n  cat \\$gff >> TEMP\n  rm \\$gff\ndone\n\nmv TEMP \\$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16).gff.gz\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nfor gff in *.gff.gz; do\n  cat \\$gff >> TEMP\n  rm \\$gff\ndone\n\nmv TEMP \\$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16).gff.gz\n\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "TEMP"
        ],
        "tools_url": [
            "https://bio.tools/temp"
        ],
        "tools_dico": [
            {
                "name": "TEMP",
                "uri": "https://bio.tools/temp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0427",
                                    "term": "Transposon prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A software package for detecting transposable elements (TEs) insertions and excisions from pooled high-throughput sequencing data.",
                "homepage": "https://github.com/JialiUMassWengLab/TEMP"
            }
        ],
        "inputs": [
            "all_gff_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "grouped_gff_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 8",
            "memory \"60 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "concatGFF": {
        "name_process": "concatGFF",
        "string_process": "\nprocess concatGFF {\n  container \"ubuntu:16.04\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}\"\n  \n  input:\n  file all_gff from grouped_gff_ch.collect()\n  val database_prefix from params.database_prefix\n  \n  output:\n  file \"${database_prefix}.gff.gz\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nfor gff in *.gff.gz; do\n  cat \\$gff >> ${database_prefix}.gff.gz\ndone\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nfor gff in *.gff.gz; do\n  cat \\$gff >> ${database_prefix}.gff.gz\ndone\n\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "grouped_gff_ch",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "interleave": {
        "name_process": "interleave",
        "string_process": " process interleave {\n    container \"ubuntu:16.04\"\n    cpus 1\n    memory \"2 GB\"\n    errorStrategy \"retry\"\n\n    input:\n    set sample_name, file(fastq1), file(fastq2) from interleave_ch\n\n    output:\n    set sample_name, file(\"${fastq1}.interleaved.fastq.gz\") into concatenate_ch\n\n    \"\"\"\n    set -e\n\n    # Some basic checks that the files exist and the line numbers match\n    [[ -s \"${fastq1}\" ]]\n    [[ -s \"${fastq2}\" ]]\n    (( \\$(gunzip -c ${fastq1} | wc -l) == \\$(gunzip -c ${fastq2} | wc -l) ))\n\n    # Now interleave the files\n    paste <(gunzip -c ${fastq1}) <(gunzip -c ${fastq2}) | paste - - - - | awk -v OFS=\"\\\\n\" -v FS=\"\\\\t\" '{print(\\$1,\\$3,\\$5,\\$7,\\$2,\\$4,\\$6,\\$8)}' | gzip -c > \"${fastq1}.interleaved.fastq.gz\"\n    \"\"\"\n      \n  }",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    set -e\n\n    # Some basic checks that the files exist and the line numbers match\n    [[ -s \"${fastq1}\" ]]\n    [[ -s \"${fastq2}\" ]]\n    (( \\$(gunzip -c ${fastq1} | wc -l) == \\$(gunzip -c ${fastq2} | wc -l) ))\n\n    # Now interleave the files\n    paste <(gunzip -c ${fastq1}) <(gunzip -c ${fastq2}) | paste - - - - | awk -v OFS=\"\\\\n\" -v FS=\"\\\\t\" '{print(\\$1,\\$3,\\$5,\\$7,\\$2,\\$4,\\$6,\\$8)}' | gzip -c > \"${fastq1}.interleaved.fastq.gz\"\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "interleave_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "concatenate_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 1",
            "memory \"2 GB\"",
            "errorStrategy \"retry\""
        ],
        "when": "",
        "stub": ""
    },
    "bamToFastq": {
        "name_process": "bamToFastq",
        "string_process": " process bamToFastq {\n    container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n    cpus 1\n    memory \"2 GB\"\n\n    input:\n    set sample_name, file(bam) from bam_ch\n    \n    output:\n    set sample_name, file(\"${bam}.fastq.gz\") into concatenate_ch\n\n    afterScript \"rm *\"\n\n    \"\"\"\n#!/bin/bash\n\nset -e\n\nsamtools fastq \"${bam}\" | gzip -c > \"${bam}.fastq.gz\"\n      \"\"\"\n\n  }",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nsamtools fastq \"${bam}\" | gzip -c > \"${bam}.fastq.gz\"\n      \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "concatenate_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 1",
            "memory \"2 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "concatenate": {
        "name_process": "concatenate",
        "string_process": "\nprocess concatenate {\n  container \"ubuntu:16.04\"\n  cpus 1\n  memory \"4 GB\"\n  \n  input:\n  set sample_name, file(fastq_list) from concatenate_ch.groupTuple()\n  \n  output:\n  set sample_name, file(\"${sample_name}.fastq.gz\") into count_reads, filter_host_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\ncat ${fastq_list} > TEMP && mv TEMP ${sample_name}.fastq.gz\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\ncat ${fastq_list} > TEMP && mv TEMP ${sample_name}.fastq.gz\n\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "TEMP"
        ],
        "tools_url": [
            "https://bio.tools/temp"
        ],
        "tools_dico": [
            {
                "name": "TEMP",
                "uri": "https://bio.tools/temp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0427",
                                    "term": "Transposon prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A software package for detecting transposable elements (TEs) insertions and excisions from pooled high-throughput sequencing data.",
                "homepage": "https://github.com/JialiUMassWengLab/TEMP"
            }
        ],
        "inputs": [
            "concatenate_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "count_reads",
            "filter_host_ch afterScript"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 1",
            "memory \"4 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "countReads": {
        "name_process": "countReads",
        "string_process": "\nprocess countReads {\n  container \"ubuntu:16.04\"\n  cpus 1\n  memory \"4 GB\"\n  \n  input:\n  set sample_name, file(fastq) from count_reads\n  \n  output:\n  file \"${sample_name}.countReads.csv\" into total_counts\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nn=\\$(gunzip -c \"${fastq}\" | awk 'NR % 4 == 1' | wc -l)\necho \"${sample_name},total_reads,\\$n\" > \"${sample_name}.countReads.csv\"\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nn=\\$(gunzip -c \"${fastq}\" | awk 'NR % 4 == 1' | wc -l)\necho \"${sample_name},total_reads,\\$n\" > \"${sample_name}.countReads.csv\"\n\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "count_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "total_counts"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 1",
            "memory \"4 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "filterHostReads": {
        "name_process": "filterHostReads",
        "string_process": "\nprocess filterHostReads {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 8\n  memory \"16 GB\"\n\n  input:\n  file host_genome_tar\n  set sample_name, file(fastq) from filter_host_ch\n  val min_qual from params.min_qual\n  val extra_bwa_flag\n  val samtools_filter_unmapped\n  val threads from 8\n  \n  output:\n  set sample_name, file(\"${sample_name}.filtered.fastq.gz\") into align_ribo_ch, align_genome_ch, count_nonhuman\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\n# Untar the host genome\ntar xvf ${host_genome_tar}\n\nhost_genome_name=\\$(echo ${host_genome_tar} | sed 's/.tar//')\n\n[[ -s \\$host_genome_name ]]\n\n# Align with BWA and save the unmapped BAM\nbwa mem -T ${min_qual} -t ${threads}${extra_bwa_flag}\\$host_genome_name ${fastq} > ${sample_name}.bam\necho \"Number of alignments: \\$(samtools view ${sample_name}.bam | wc -l)\"\n\ncat ${sample_name}.bam | samtools view ${samtools_filter_unmapped} > ${sample_name}.unmapped.bam\necho \"Number of unmapped alignments: \\$(samtools view ${sample_name}.unmapped.bam | wc -l)\"\n\nsamtools fastq ${sample_name}.unmapped.bam | \\\ngzip -c \\\n> ${sample_name}.filtered.fastq.gz\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 43,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\n# Untar the host genome\ntar xvf ${host_genome_tar}\n\nhost_genome_name=\\$(echo ${host_genome_tar} | sed 's/.tar//')\n\n[[ -s \\$host_genome_name ]]\n\n# Align with BWA and save the unmapped BAM\nbwa mem -T ${min_qual} -t ${threads}${extra_bwa_flag}\\$host_genome_name ${fastq} > ${sample_name}.bam\necho \"Number of alignments: \\$(samtools view ${sample_name}.bam | wc -l)\"\n\ncat ${sample_name}.bam | samtools view ${samtools_filter_unmapped} > ${sample_name}.unmapped.bam\necho \"Number of unmapped alignments: \\$(samtools view ${sample_name}.unmapped.bam | wc -l)\"\n\nsamtools fastq ${sample_name}.unmapped.bam | \\\ngzip -c \\\n> ${sample_name}.filtered.fastq.gz\n\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "host_genome_tar",
            "filter_host_ch",
            "params",
            "extra_bwa_flag",
            "samtools_filter_unmapped",
            "8"
        ],
        "nb_inputs": 6,
        "outputs": [
            "align_ribo_ch",
            "align_genome_ch",
            "count_nonhuman afterScript"
        ],
        "nb_outputs": 3,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 8",
            "memory \"16 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "countNonhumanReads": {
        "name_process": "countNonhumanReads",
        "string_process": "\nprocess countNonhumanReads {\n  container \"ubuntu:16.04\"\n  cpus 1\n  memory \"4 GB\"\n  \n  input:\n  set sample_name, file(fastq) from count_nonhuman\n  \n  output:\n  file \"${sample_name}.countNonhumanReads.csv\" into nonhuman_counts\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nn=\\$(gunzip -c \"${fastq}\" | awk 'NR % 4 == 1' | wc -l)\necho \"${sample_name},nonhuman_reads,\\$n\" > \"${sample_name}.countNonhumanReads.csv\"\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nn=\\$(gunzip -c \"${fastq}\" | awk 'NR % 4 == 1' | wc -l)\necho \"${sample_name},nonhuman_reads,\\$n\" > \"${sample_name}.countNonhumanReads.csv\"\n\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "count_nonhuman"
        ],
        "nb_inputs": 1,
        "outputs": [
            "nonhuman_counts"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 1",
            "memory \"4 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "alignRibosomes": {
        "name_process": "alignRibosomes",
        "string_process": "\nprocess alignRibosomes {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 4\n  memory \"30 GB\"\n  \n  errorStrategy \"retry\"\n\n  input:\n  file ribosome_tar\n  set sample_name, file(input_fastq) from align_ribo_ch\n  val min_qual from params.min_qual\n  val samtools_filter_mapped\n  val threads from 4\n    \n  output:\n  set sample_name, file(\"${sample_name}.ribosome.bam\") into ribo_coverage_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\n# Untar the indexed ribosome database\ntar xvf ${ribosome_tar}\n\n# Align with BWA and remove unmapped reads\nbwa mem -T ${min_qual} -a -t ${threads * task.attempt}${extra_bwa_flag}${params.database_prefix}.ribosomes.fasta ${input_fastq} | samtools view -b ${samtools_filter_mapped} - -o ${sample_name}.ribosome.bam\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\n# Untar the indexed ribosome database\ntar xvf ${ribosome_tar}\n\n# Align with BWA and remove unmapped reads\nbwa mem -T ${min_qual} -a -t ${threads * task.attempt}${extra_bwa_flag}${params.database_prefix}.ribosomes.fasta ${input_fastq} | samtools view -b ${samtools_filter_mapped} - -o ${sample_name}.ribosome.bam\n\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ribosome_tar",
            "align_ribo_ch",
            "params",
            "samtools_filter_mapped",
            "4"
        ],
        "nb_inputs": 5,
        "outputs": [
            "ribo_coverage_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 4",
            "memory \"30 GB\"",
            "errorStrategy \"retry\""
        ],
        "when": "",
        "stub": ""
    },
    "riboCoverage": {
        "name_process": "riboCoverage",
        "string_process": "\nprocess riboCoverage {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 4\n  memory \"30 GB\"\n\n  input:\n  set sample_name, file(bam) from ribo_coverage_ch\n  \n  output:\n  set sample_name, file(\"${sample_name}.ribosome.pileup\"), file(\"${sample_name}.ribosome.idxstats\") into ribo_hits_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nsamtools sort -m 2G ${bam} > ${bam}.sorted\nsamtools index ${bam}.sorted\nsamtools mpileup ${bam}.sorted > ${sample_name}.ribosome.pileup\nsamtools idxstats ${bam}.sorted > ${sample_name}.ribosome.idxstats\nrm ${bam}.sorted ${bam}\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nsamtools sort -m 2G ${bam} > ${bam}.sorted\nsamtools index ${bam}.sorted\nsamtools mpileup ${bam}.sorted > ${sample_name}.ribosome.pileup\nsamtools idxstats ${bam}.sorted > ${sample_name}.ribosome.idxstats\nrm ${bam}.sorted ${bam}\n\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ribo_coverage_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ribo_hits_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 4",
            "memory \"30 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "pickGenomes": {
        "name_process": "pickGenomes",
        "string_process": "\nprocess pickGenomes {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  cpus 8\n  memory \"16 GB\"\n\n  input:\n  set sample_name, file(sample_pileup), file(sample_idxstats) from ribo_hits_ch\n  file ribosome_tsv\n  val min_cov_pct from params.min_cov_pct\n  \n  output:\n  file \"${sample_name}.genomes.txt\" into sample_genomes_txt\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport pandas as pd\n\n# Read in a file with the length of each reference\nidxstats = pd.read_csv(\"${sample_idxstats}\", sep=\"\\\\t\", header=None)\nref_len = idxstats.set_index(0)[1].apply(int)\n\n# Read in a file with a list of the positions covered in the alignment\nif os.stat(\"${sample_pileup}\").st_size > 0:\n    pileup = pd.read_csv(\"${sample_pileup}\", sep=\"\\\\t\", header=None)\n\n    # Calculate the coverage as the number of covered bases divided by the length\n    ref_cov = pileup.groupby(0).apply(len) / ref_len\n    ref_cov = ref_cov.dropna()\n    ref_cov.sort_values(ascending=False, inplace=True)\n    \n    # Find those ribosomes with the minimum threshold met\n    detected_ribosomes = ref_cov.index.values[ref_cov >= (float(\"${min_cov_pct}\") / 100)]\n    print(\"\\\\nDetected ribosomes:\")\n    print(\"\\\\n\".join(detected_ribosomes))\n\n    # Read in a list of which genomes match which ribosomes\n    genome_list = pd.read_csv(\"${ribosome_tsv}\", sep=\"\\\\t\", header=None)\n    print(genome_list)\n\n    # Get those genomes containing the detected ribosomes\n    detected_genomes = list(set(genome_list.loc[genome_list[1].isin(detected_ribosomes), 0]))\n    print(\"\\\\nDetected genomes:\")\n    print(\"\\\\n\".join(detected_genomes))\n\nelse:\n    detected_genomes = []\n\n# Write out to a file\nwith open(\"${sample_name}.genomes.txt\", \"wt\") as fo:\n    fo.write(\"\\\\n\".join(detected_genomes))\n\"\"\"\n\n}",
        "nb_lignes_process": 56,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport pandas as pd\n\n# Read in a file with the length of each reference\nidxstats = pd.read_csv(\"${sample_idxstats}\", sep=\"\\\\t\", header=None)\nref_len = idxstats.set_index(0)[1].apply(int)\n\n# Read in a file with a list of the positions covered in the alignment\nif os.stat(\"${sample_pileup}\").st_size > 0:\n    pileup = pd.read_csv(\"${sample_pileup}\", sep=\"\\\\t\", header=None)\n\n    # Calculate the coverage as the number of covered bases divided by the length\n    ref_cov = pileup.groupby(0).apply(len) / ref_len\n    ref_cov = ref_cov.dropna()\n    ref_cov.sort_values(ascending=False, inplace=True)\n    \n    # Find those ribosomes with the minimum threshold met\n    detected_ribosomes = ref_cov.index.values[ref_cov >= (float(\"${min_cov_pct}\") / 100)]\n    print(\"\\\\nDetected ribosomes:\")\n    print(\"\\\\n\".join(detected_ribosomes))\n\n    # Read in a list of which genomes match which ribosomes\n    genome_list = pd.read_csv(\"${ribosome_tsv}\", sep=\"\\\\t\", header=None)\n    print(genome_list)\n\n    # Get those genomes containing the detected ribosomes\n    detected_genomes = list(set(genome_list.loc[genome_list[1].isin(detected_ribosomes), 0]))\n    print(\"\\\\nDetected genomes:\")\n    print(\"\\\\n\".join(detected_genomes))\n\nelse:\n    detected_genomes = []\n\n# Write out to a file\nwith open(\"${sample_name}.genomes.txt\", \"wt\") as fo:\n    fo.write(\"\\\\n\".join(detected_genomes))\n\"\"\"",
        "nb_lignes_script": 39,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ribo_hits_ch",
            "ribosome_tsv",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_genomes_txt"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "cpus 8",
            "memory \"16 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "aggregateGenomes": {
        "name_process": "aggregateGenomes",
        "string_process": "\nprocess aggregateGenomes {\n  container \"ubuntu:16.04\"\n  cpus 1\n  memory \"4 GB\"\n\n  input:\n  file txt from sample_genomes_txt.collect()\n  \n  output:\n  file \"detected.genomes.txt\" into genome_hits_ch, gff_hits_ch\n\n  afterScript \"rm *\"\n\n\"\"\"\n#!/bin/bash\n\nset -e\n\nfor fp in ${txt}; do cat \\$fp; echo; done | sort -u | sed '/^\\$/d' > TEMP && mv TEMP detected.genomes.txt\n\"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nfor fp in ${txt}; do cat \\$fp; echo; done | sort -u | sed '/^\\$/d' > TEMP && mv TEMP detected.genomes.txt\n\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "TEMP"
        ],
        "tools_url": [
            "https://bio.tools/temp"
        ],
        "tools_dico": [
            {
                "name": "TEMP",
                "uri": "https://bio.tools/temp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0427",
                                    "term": "Transposon prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A software package for detecting transposable elements (TEs) insertions and excisions from pooled high-throughput sequencing data.",
                "homepage": "https://github.com/JialiUMassWengLab/TEMP"
            }
        ],
        "inputs": [
            "sample_genomes_txt"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genome_hits_ch",
            "gff_hits_ch afterScript"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"ubuntu:16.04\"",
            "cpus 1",
            "memory \"4 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "filterGenomes": {
        "name_process": "filterGenomes",
        "string_process": "\nprocess filterGenomes {\n  container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"\n  cpus 2\n  memory \"8 GB\"\n\n  input:\n  file genome_fasta\n  file genome_tsv\n  file sample_genomes from genome_hits_ch\n  publishDir \"${params.output_folder}/ref\"\n  \n  output:\n  file \"filtered.ref.fasta\" into filtered_ref_fasta\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nfrom Bio.SeqIO.FastaIO import SimpleFastaParser\nimport gzip\n\n# Read in the genomes needed for this sample\nsample_genomes = open(\"${sample_genomes}\").readlines()\nsample_genomes = [fp.rstrip(\"\\\\n\") for fp in sample_genomes]\n\n# Figure out which headers that corresponds to\ngenome_headers = dict()\nall_headers = set([])\nfor line in gzip.open(\"${genome_tsv}\", \"rt\").readlines():\n    line = line.rstrip(\"\\\\n\").split(\"\\\\t\")\n    if len(line) != 2:\n        continue\n    genome, header = line\n    assert header not in all_headers, \"Found duplicate header: \" + header\n    genome_headers[genome] = genome_headers.get(genome, [])\n    genome_headers[genome].append(header)\n\nsample_headers = set([\n    header\n    for genome in sample_genomes\n    for header in genome_headers[genome]\n])\n\n# Extract the sequences from the FASTA\nn_written = 0\nwith open(\"filtered.ref.fasta\", \"wt\") as fo:\n    for header, seq in SimpleFastaParser(gzip.open(\"${genome_fasta}\", \"rt\")):\n        header = header.split(\" \")[0].split(\"\\\\t\")[0]\n        if header in sample_headers:\n            fo.write(\">\" + header + \"\\\\n\" + seq + \"\\\\n\")\n            n_written += 1\nassert n_written == len(sample_headers), (n_written, len(sample_headers))\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 55,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nfrom Bio.SeqIO.FastaIO import SimpleFastaParser\nimport gzip\n\n# Read in the genomes needed for this sample\nsample_genomes = open(\"${sample_genomes}\").readlines()\nsample_genomes = [fp.rstrip(\"\\\\n\") for fp in sample_genomes]\n\n# Figure out which headers that corresponds to\ngenome_headers = dict()\nall_headers = set([])\nfor line in gzip.open(\"${genome_tsv}\", \"rt\").readlines():\n    line = line.rstrip(\"\\\\n\").split(\"\\\\t\")\n    if len(line) != 2:\n        continue\n    genome, header = line\n    assert header not in all_headers, \"Found duplicate header: \" + header\n    genome_headers[genome] = genome_headers.get(genome, [])\n    genome_headers[genome].append(header)\n\nsample_headers = set([\n    header\n    for genome in sample_genomes\n    for header in genome_headers[genome]\n])\n\n# Extract the sequences from the FASTA\nn_written = 0\nwith open(\"filtered.ref.fasta\", \"wt\") as fo:\n    for header, seq in SimpleFastaParser(gzip.open(\"${genome_fasta}\", \"rt\")):\n        header = header.split(\" \")[0].split(\"\\\\t\")[0]\n        if header in sample_headers:\n            fo.write(\">\" + header + \"\\\\n\" + seq + \"\\\\n\")\n            n_written += 1\nassert n_written == len(sample_headers), (n_written, len(sample_headers))\n\n  \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_fasta",
            "genome_tsv",
            "genome_hits_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "filtered_ref_fasta"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"",
            "cpus 2",
            "memory \"8 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "filterGFF": {
        "name_process": "filterGFF",
        "string_process": "\nprocess filterGFF {\n  container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"\n  cpus 1\n  memory \"4 GB\"\n  publishDir \"${params.output_folder}/ref\"\n\n  input:\n  file all_gff\n  file genome_tsv\n  file sample_genomes from gff_hits_ch\n  val min_cov_pct from params.min_cov_pct\n  \n  output:\n  file \"filtered.ref.gff.gz\" into filtered_gff\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport gzip\n\n# Read in the genomes needed for this sample\nsample_genomes = open(\"${sample_genomes}\").readlines()\nsample_genomes = [fp.rstrip(\"\\\\n\") for fp in sample_genomes]\nassert len(sample_genomes) > 0, \"No genomes passed the filtering threshold of %d percent\" % (\"${min_cov_pct}\")\n\n# Figure out which headers that corresponds to\ngenome_headers = dict()\nall_headers = set([])\nfor line in gzip.open(\"${genome_tsv}\", \"rt\").readlines():\n    line = line.rstrip(\"\\\\n\").split(\"\\\\t\")\n    if len(line) != 2:\n        continue\n    genome, header = line\n    assert header not in all_headers, \"Found duplicate header: \" + header\n    genome_headers[genome] = genome_headers.get(genome, [])\n    genome_headers[genome].append(header)\n\nsample_headers = set([\n    header\n    for genome in sample_genomes\n    for header in genome_headers[genome]\n])\n\n# Extract the sequences from the GFF\nn_written = 0\nwith gzip.open(\"filtered.ref.gff.gz\", \"wt\") as fo:\n    with gzip.open(\"${all_gff}\", \"rt\") as fi:\n        for line in fi:\n            if line[0] == '#':\n                continue\n            if line.split(\"\\\\t\")[0] in sample_headers:\n                fo.write(line)\n                n_written += 1\nassert n_written > 0, \"No annotations were found for the filtered genomes\"\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 58,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport gzip\n\n# Read in the genomes needed for this sample\nsample_genomes = open(\"${sample_genomes}\").readlines()\nsample_genomes = [fp.rstrip(\"\\\\n\") for fp in sample_genomes]\nassert len(sample_genomes) > 0, \"No genomes passed the filtering threshold of %d percent\" % (\"${min_cov_pct}\")\n\n# Figure out which headers that corresponds to\ngenome_headers = dict()\nall_headers = set([])\nfor line in gzip.open(\"${genome_tsv}\", \"rt\").readlines():\n    line = line.rstrip(\"\\\\n\").split(\"\\\\t\")\n    if len(line) != 2:\n        continue\n    genome, header = line\n    assert header not in all_headers, \"Found duplicate header: \" + header\n    genome_headers[genome] = genome_headers.get(genome, [])\n    genome_headers[genome].append(header)\n\nsample_headers = set([\n    header\n    for genome in sample_genomes\n    for header in genome_headers[genome]\n])\n\n# Extract the sequences from the GFF\nn_written = 0\nwith gzip.open(\"filtered.ref.gff.gz\", \"wt\") as fo:\n    with gzip.open(\"${all_gff}\", \"rt\") as fi:\n        for line in fi:\n            if line[0] == '#':\n                continue\n            if line.split(\"\\\\t\")[0] in sample_headers:\n                fo.write(line)\n                n_written += 1\nassert n_written > 0, \"No annotations were found for the filtered genomes\"\n\n  \"\"\"",
        "nb_lignes_script": 39,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_gff",
            "genome_tsv",
            "gff_hits_ch",
            "params"
        ],
        "nb_inputs": 4,
        "outputs": [
            "filtered_gff"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/biocontainers/biopython@sha256:1196016b05927094af161ccf2cd8371aafc2e3a8daa51c51ff023f5eb45a820f\"",
            "cpus 1",
            "memory \"4 GB\"",
            "publishDir \"${params.output_folder}/ref\""
        ],
        "when": "",
        "stub": ""
    },
    "indexGenomes": {
        "name_process": "indexGenomes",
        "string_process": "\nprocess indexGenomes {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 4\n  memory \"8 GB\"\n  publishDir \"${params.output_folder}/ref\"\n\n  input:\n  file filtered_ref_fasta\n  \n  output:\n  file \"filtered.ref.fasta.tar\" into ref_fasta_tar\n  file \"${filtered_ref_fasta}.fai\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\nset -e\n\n# Index the selected genomes\nbwa index \"${filtered_ref_fasta}\"\nsamtools faidx \"${filtered_ref_fasta}\"\n\n# Tar up the index\ntar cvf filtered.ref.fasta.tar filtered.ref.fasta*\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\nset -e\n\n# Index the selected genomes\nbwa index \"${filtered_ref_fasta}\"\nsamtools faidx \"${filtered_ref_fasta}\"\n\n# Tar up the index\ntar cvf filtered.ref.fasta.tar filtered.ref.fasta*\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "filtered_ref_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_fasta_tar"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 4",
            "memory \"8 GB\"",
            "publishDir \"${params.output_folder}/ref\""
        ],
        "when": "",
        "stub": ""
    },
    "alignGenomes": {
        "name_process": "alignGenomes",
        "string_process": "\nprocess alignGenomes {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 8\n  memory \"60 GB\"\n  publishDir \"${params.output_folder}/bam\"\n  errorStrategy \"retry\"\n\n  input:\n  set sample_name, file(input_fastq) from align_genome_ch\n  file ref_fasta_tar\n  val min_qual from params.min_qual\n  val extra_bwa_flag\n  val samtools_filter_unmapped\n  val threads from 8\n  \n  output:\n  set sample_name, file(\"${sample_name}.genomes.bam\") optional true into count_aligned\n  set sample_name, file(\"${sample_name}.genomes.pileup.gz\") optional true into genome_pileup\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\nset -e\n\n# Untar the indexed genome database\ntar xvf ${ref_fasta_tar}\n\n# Align with BWA and remove unmapped reads\nbwa mem -T ${min_qual} -a -t ${threads * task.attempt}${extra_bwa_flag}filtered.ref.fasta ${input_fastq} | samtools view -b ${samtools_filter_mapped} - -o ${sample_name}.genomes.bam\n\nsamtools sort ${sample_name}.genomes.bam > ${sample_name}.genomes.bam.sorted\nmv ${sample_name}.genomes.bam.sorted ${sample_name}.genomes.bam\nsamtools index ${sample_name}.genomes.bam\nsamtools mpileup ${sample_name}.genomes.bam | gzip -c > ${sample_name}.genomes.pileup.gz\n\necho \"Number of aligned bases: \\$(gunzip -c ${sample_name}.genomes.pileup.gz | wc -l)\"\n\n# If no reads were aligned, delete the pileup and BAM\n(( \\$(gunzip -c ${sample_name}.genomes.pileup.gz | wc -l) > 0 )) || \\\nrm ${sample_name}.genomes.pileup.gz ${sample_name}.genomes.bam\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 44,
        "string_script": "\"\"\"\n#!/bin/bash\nset -e\n\n# Untar the indexed genome database\ntar xvf ${ref_fasta_tar}\n\n# Align with BWA and remove unmapped reads\nbwa mem -T ${min_qual} -a -t ${threads * task.attempt}${extra_bwa_flag}filtered.ref.fasta ${input_fastq} | samtools view -b ${samtools_filter_mapped} - -o ${sample_name}.genomes.bam\n\nsamtools sort ${sample_name}.genomes.bam > ${sample_name}.genomes.bam.sorted\nmv ${sample_name}.genomes.bam.sorted ${sample_name}.genomes.bam\nsamtools index ${sample_name}.genomes.bam\nsamtools mpileup ${sample_name}.genomes.bam | gzip -c > ${sample_name}.genomes.pileup.gz\n\necho \"Number of aligned bases: \\$(gunzip -c ${sample_name}.genomes.pileup.gz | wc -l)\"\n\n# If no reads were aligned, delete the pileup and BAM\n(( \\$(gunzip -c ${sample_name}.genomes.pileup.gz | wc -l) > 0 )) || \\\nrm ${sample_name}.genomes.pileup.gz ${sample_name}.genomes.bam\n\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "align_genome_ch",
            "ref_fasta_tar",
            "params",
            "extra_bwa_flag",
            "samtools_filter_unmapped",
            "8"
        ],
        "nb_inputs": 6,
        "outputs": [
            "count_aligned",
            "genome_pileup"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 8",
            "memory \"60 GB\"",
            "publishDir \"${params.output_folder}/bam\"",
            "errorStrategy \"retry\""
        ],
        "when": "",
        "stub": ""
    },
    "countAlignedReads": {
        "name_process": "countAlignedReads",
        "string_process": "\nprocess countAlignedReads {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  cpus 4\n  memory \"8 GB\"\n  \n  input:\n  set sample_name, file(bam) from count_aligned\n  \n  output:\n  file \"${sample_name}.countMapped.csv\" into mapped_counts\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nn=\\$(samtools view \"${bam}\" | cut -f 1 | sort -u | wc -l)\necho \"${sample_name},mapped_reads,\\$n\" > \"${sample_name}.countMapped.csv\"\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nn=\\$(samtools view \"${bam}\" | cut -f 1 | sort -u | wc -l)\necho \"${sample_name},mapped_reads,\\$n\" > \"${sample_name}.countMapped.csv\"\n\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "count_aligned"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapped_counts"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "cpus 4",
            "memory \"8 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "summarizeAlignments": {
        "name_process": "summarizeAlignments",
        "string_process": "\nprocess summarizeAlignments {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  cpus 16\n  memory \"120 GB\"\n\n  input:\n  set sample_name, file(sample_pileup) from genome_pileup\n  file filtered_gff\n  file genome_table\n  \n  output:\n  file \"${sample_name}.summary.csv\" into sample_results\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport gzip\nimport pandas as pd\n\n# Read in the pileup\n# Calculate the depth per base\nprint(\"Reading in the pileup file and calculating base depth\")\nbase_depth = dict([\n    (reference, reference_pileup.set_index(1)[3].to_dict())\n    for reference, reference_pileup in pd.read_csv(\n        \"${sample_pileup}\", \n        header=None, \n        sep=\"\\\\t\", \n        usecols=[0, 1, 3]\n    ).groupby(0)\n])\n\n# Read in the list of organism names for each reference\nprint(\"Reading in the organism names\")\norg_names = pd.read_csv(\n    \"${genome_table}\", \n    sep=\"\\\\t\", \n    header=None\n).set_index(1)[0]\n\nall_references = set(org_names.index.values)\n\n# Read in the GFF annotations\nprint(\"Reading in the GFF annotations\")\nannot = []\nfor line in gzip.open(\"${filtered_gff}\", \"rt\"):\n    if line[0] == '#':\n        continue\n    line = line.split(\"\\\\t\")\n\n    if line[0] not in all_references:\n        continue\n    \n    # Get the gene name\n    gene_desc = dict([\n        field.split(\"=\", 1)\n        for field in line[8].split(\";\")\n        if len(field.split(\"=\", 1)) == 2\n    ])\n\n    if \"ID\" not in gene_desc:\n        continue\n    \n    annot.append(dict([\n        (\"type\", line[2]),\n        (\"reference\", line[0]),\n        (\"start\", int(line[3])),\n        (\"end\", int(line[4])),\n        (\"ID\", gene_desc[\"ID\"]),\n        (\"name\", gene_desc.get(\"Name\", gene_desc.get(\"name\"))),\n        (\"product\", gene_desc.get(\"product\"))\n    ]))\n\n# Format as a DataFrame\nannot = pd.DataFrame(annot)\n\n# Subset to a few types of features\nannot = annot.query(\n    \"type in ['CDS', 'tRNA', 'ncRNA', 'rRNA']\"\n)\n\n# Add the organism name\nannot[\"organism\"] = annot[\"reference\"].apply(org_names.get)\n\n# Precompute the length of each feature\nannot[\"length\"] = 1 + annot[\"end\"] - annot[\"start\"]\nassert (annot[\"length\"] > 0).all()\n\n# Compute the depth of sequencing for each feature\nprint(\"Computing depth of sequencing per gene\")\nannot[\"depth\"] = annot.apply(\n    lambda r: sum([\n        base_depth.get(r[\"reference\"], dict()).get(ix, 0)\n        for ix in range(r[\"start\"], r[\"end\"] + 1)\n    ])/ (r[\"length\"]),\n    axis=1\n)\n\n# Add the sample name\nannot[\"sample\"] = \"${sample_name}\"\n\n# Write out to a file\nprint(\"Writing out to a file\")\nannot.to_csv(\"${sample_name}.summary.csv\", sep=\",\", index=None)\nprint(\"Done\")\n\"\"\"\n\n}",
        "nb_lignes_process": 110,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport gzip\nimport pandas as pd\n\n# Read in the pileup\n# Calculate the depth per base\nprint(\"Reading in the pileup file and calculating base depth\")\nbase_depth = dict([\n    (reference, reference_pileup.set_index(1)[3].to_dict())\n    for reference, reference_pileup in pd.read_csv(\n        \"${sample_pileup}\", \n        header=None, \n        sep=\"\\\\t\", \n        usecols=[0, 1, 3]\n    ).groupby(0)\n])\n\n# Read in the list of organism names for each reference\nprint(\"Reading in the organism names\")\norg_names = pd.read_csv(\n    \"${genome_table}\", \n    sep=\"\\\\t\", \n    header=None\n).set_index(1)[0]\n\nall_references = set(org_names.index.values)\n\n# Read in the GFF annotations\nprint(\"Reading in the GFF annotations\")\nannot = []\nfor line in gzip.open(\"${filtered_gff}\", \"rt\"):\n    if line[0] == '#':\n        continue\n    line = line.split(\"\\\\t\")\n\n    if line[0] not in all_references:\n        continue\n    \n    # Get the gene name\n    gene_desc = dict([\n        field.split(\"=\", 1)\n        for field in line[8].split(\";\")\n        if len(field.split(\"=\", 1)) == 2\n    ])\n\n    if \"ID\" not in gene_desc:\n        continue\n    \n    annot.append(dict([\n        (\"type\", line[2]),\n        (\"reference\", line[0]),\n        (\"start\", int(line[3])),\n        (\"end\", int(line[4])),\n        (\"ID\", gene_desc[\"ID\"]),\n        (\"name\", gene_desc.get(\"Name\", gene_desc.get(\"name\"))),\n        (\"product\", gene_desc.get(\"product\"))\n    ]))\n\n# Format as a DataFrame\nannot = pd.DataFrame(annot)\n\n# Subset to a few types of features\nannot = annot.query(\n    \"type in ['CDS', 'tRNA', 'ncRNA', 'rRNA']\"\n)\n\n# Add the organism name\nannot[\"organism\"] = annot[\"reference\"].apply(org_names.get)\n\n# Precompute the length of each feature\nannot[\"length\"] = 1 + annot[\"end\"] - annot[\"start\"]\nassert (annot[\"length\"] > 0).all()\n\n# Compute the depth of sequencing for each feature\nprint(\"Computing depth of sequencing per gene\")\nannot[\"depth\"] = annot.apply(\n    lambda r: sum([\n        base_depth.get(r[\"reference\"], dict()).get(ix, 0)\n        for ix in range(r[\"start\"], r[\"end\"] + 1)\n    ])/ (r[\"length\"]),\n    axis=1\n)\n\n# Add the sample name\nannot[\"sample\"] = \"${sample_name}\"\n\n# Write out to a file\nprint(\"Writing out to a file\")\nannot.to_csv(\"${sample_name}.summary.csv\", sep=\",\", index=None)\nprint(\"Done\")\n\"\"\"",
        "nb_lignes_script": 93,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_pileup",
            "filtered_gff",
            "genome_table"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "cpus 16",
            "memory \"120 GB\""
        ],
        "when": "",
        "stub": ""
    },
    "finalResults": {
        "name_process": "finalResults",
        "string_process": "\nprocess finalResults {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  cpus 8\n  memory \"240 GB\"\n  publishDir \"${params.output_folder}\"\n\n  input:\n  file \"*\" from sample_results.collect()\n  \n  output:\n  file \"${params.output_prefix}.*.csv\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport os\nimport pandas as pd\n\ndf = pd.concat([\n    pd.read_csv(fp)\n    for fp in os.listdir(\".\")\n    if fp.endswith(\".csv\")\n])\n\n# Write out the complete set of data\ndf.to_csv(\"${params.output_prefix}.all.csv\", index=None, sep=\",\")\n\n# Summarize for each organism\n# Calculate the weighted average depth for genes broken out by type\nsummary_df = []\nfor ix, sub_df in df.groupby([\"organism\", \"sample\"]):\n    i = dict([\n        (\"organism\", ix[0]),\n        (\"sample\", ix[1])\n    ])\n    for t, type_df in sub_df.groupby(\"type\"):\n        i[t] = (type_df[\"depth\"] * type_df[\"length\"]).sum() / type_df[\"length\"].sum()\n    summary_df.append(i)\nsummary_df = pd.DataFrame(summary_df).set_index([\"organism\", \"sample\"])\n\n# Calculate the ratio of rRNA to CDS for each organism & sample\nsummary_df[\"rRNA_CDS_ratio\"] = summary_df[\"rRNA\"] / summary_df[\"CDS\"]\n\nfor t in summary_df.columns.values:\n    summary_df.reset_index().pivot_table(\n        index=\"sample\",\n        columns=\"organism\",\n        values=t\n    ).reset_index().to_csv(\n        \"${params.output_prefix}.\" + t + \".csv\",\n        index=None,\n        sep=\",\"\n    )\n\n# Make a column with the annotation of each gene\ndf[\"annotation\"] = df.apply(\n    lambda r: \"%s: %s (%s)\" % (r[\"name\"], r[\"product\"], r[\"ID\"]),\n    axis=1\n)\n\n# For each organism, print out the depth of sequencing across all samples\nfor org, org_df in df.groupby(\"organism\"):\n    org_df.pivot_table(\n        index=\"sample\",\n        columns=\"annotation\",\n        values=\"depth\"\n    ).reset_index().to_csv(\n        \"${params.output_prefix}.\" + org + \".csv\",\n        index=None,\n        sep=\",\"\n    )\n\n\"\"\"\n\n}",
        "nb_lignes_process": 75,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport os\nimport pandas as pd\n\ndf = pd.concat([\n    pd.read_csv(fp)\n    for fp in os.listdir(\".\")\n    if fp.endswith(\".csv\")\n])\n\n# Write out the complete set of data\ndf.to_csv(\"${params.output_prefix}.all.csv\", index=None, sep=\",\")\n\n# Summarize for each organism\n# Calculate the weighted average depth for genes broken out by type\nsummary_df = []\nfor ix, sub_df in df.groupby([\"organism\", \"sample\"]):\n    i = dict([\n        (\"organism\", ix[0]),\n        (\"sample\", ix[1])\n    ])\n    for t, type_df in sub_df.groupby(\"type\"):\n        i[t] = (type_df[\"depth\"] * type_df[\"length\"]).sum() / type_df[\"length\"].sum()\n    summary_df.append(i)\nsummary_df = pd.DataFrame(summary_df).set_index([\"organism\", \"sample\"])\n\n# Calculate the ratio of rRNA to CDS for each organism & sample\nsummary_df[\"rRNA_CDS_ratio\"] = summary_df[\"rRNA\"] / summary_df[\"CDS\"]\n\nfor t in summary_df.columns.values:\n    summary_df.reset_index().pivot_table(\n        index=\"sample\",\n        columns=\"organism\",\n        values=t\n    ).reset_index().to_csv(\n        \"${params.output_prefix}.\" + t + \".csv\",\n        index=None,\n        sep=\",\"\n    )\n\n# Make a column with the annotation of each gene\ndf[\"annotation\"] = df.apply(\n    lambda r: \"%s: %s (%s)\" % (r[\"name\"], r[\"product\"], r[\"ID\"]),\n    axis=1\n)\n\n# For each organism, print out the depth of sequencing across all samples\nfor org, org_df in df.groupby(\"organism\"):\n    org_df.pivot_table(\n        index=\"sample\",\n        columns=\"annotation\",\n        values=\"depth\"\n    ).reset_index().to_csv(\n        \"${params.output_prefix}.\" + org + \".csv\",\n        index=None,\n        sep=\",\"\n    )\n\n\"\"\"",
        "nb_lignes_script": 59,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_results"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "cpus 8",
            "memory \"240 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    },
    "mappingSummary": {
        "name_process": "mappingSummary",
        "string_process": "\nprocess mappingSummary {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  cpus 4\n  memory \"8 GB\"\n  publishDir \"${params.output_folder}\"\n\n  input:\n  file \"*\" from total_counts.collect()\n  file \"*\" from nonhuman_counts.collect()\n  file \"*\" from mapped_counts.collect()\n  \n  output:\n  file \"${params.output_prefix}.mapping_summary.csv\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport os\nimport pandas as pd\n\ndf = pd.concat([\n    pd.read_csv(fp, header=None, names=[\"sample\", \"metric\", \"value\"])\n    for fp in os.listdir(\".\")\n    if fp.endswith(\".csv\")\n])\n\ndf = df.pivot_table(\n    index=\"sample\",\n    columns=\"metric\",\n    values=\"value\"\n)\ndf.reset_index().to_csv(\n    \"${params.output_prefix}.mapping_summary.csv\",\n    index=None,\n    sep=\",\"\n)\n\n\"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport os\nimport pandas as pd\n\ndf = pd.concat([\n    pd.read_csv(fp, header=None, names=[\"sample\", \"metric\", \"value\"])\n    for fp in os.listdir(\".\")\n    if fp.endswith(\".csv\")\n])\n\ndf = df.pivot_table(\n    index=\"sample\",\n    columns=\"metric\",\n    values=\"value\"\n)\ndf.reset_index().to_csv(\n    \"${params.output_prefix}.mapping_summary.csv\",\n    index=None,\n    sep=\",\"\n)\n\n\"\"\"",
        "nb_lignes_script": 22,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "total_counts",
            "nonhuman_counts",
            "mapped_counts"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__microbial-rnaseq",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "cpus 4",
            "memory \"8 GB\"",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    }
}
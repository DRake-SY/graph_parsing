{
    "update_pangolin": {
        "name_process": "update_pangolin",
        "string_process": "process update_pangolin {\n\n  tag { should_update.toString() }\n\n  executor 'local'\n\n  input:\n  val(should_update)\n\n  output:\n  val(did_update)\n\n  script:\n  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]\n  then\n    pangolin --update\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]\n  then\n    pangolin --update\n  fi\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "should_update"
        ],
        "nb_inputs": 1,
        "outputs": [
            "did_update"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { should_update.toString() }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "download_ncov_tools": {
        "name_process": "download_ncov_tools",
        "string_process": "\nprocess download_ncov_tools {\n\n  tag { version }\n\n  executor 'local'\n  \n  input:\n  val(version)\n  \n  output:\n  path(\"ncov-tools\", type: 'dir')\n\n  script:\n  \"\"\"\n  wget https://github.com/BCCDC-PHL/ncov-tools/archive/v${version}.tar.gz\n  tar -xzf v${version}.tar.gz\n  mv ncov-tools-${version} ncov-tools\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  wget https://github.com/BCCDC-PHL/ncov-tools/archive/v${version}.tar.gz\n  tar -xzf v${version}.tar.gz\n  mv ncov-tools-${version} ncov-tools\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "version"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { version }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "download_artic_ncov2019": {
        "name_process": "download_artic_ncov2019",
        "string_process": "\nprocess download_artic_ncov2019 {\n\n  tag { version }\n\n  executor 'local'\n  \n  input:\n  tuple val(version), val(primer_scheme)\n  \n  output:\n  path(\"resources\", type: 'dir')\n\n  script:\n  \"\"\"\n  wget https://github.com/BCCDC-PHL/artic-ncov2019/archive/v${version}.tar.gz\n  tar -xzf v${version}.tar.gz\n  mkdir resources\n  cp artic-ncov2019-${version}/primer_schemes/nCoV-2019/${primer_scheme}/nCoV-2019.reference.fasta resources\n  cp artic-ncov2019-${version}/primer_schemes/nCoV-2019/${primer_scheme}/nCoV-2019.bed resources\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  wget https://github.com/BCCDC-PHL/artic-ncov2019/archive/v${version}.tar.gz\n  tar -xzf v${version}.tar.gz\n  mkdir resources\n  cp artic-ncov2019-${version}/primer_schemes/nCoV-2019/${primer_scheme}/nCoV-2019.reference.fasta resources\n  cp artic-ncov2019-${version}/primer_schemes/nCoV-2019/${primer_scheme}/nCoV-2019.bed resources\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "version",
            "primer_scheme"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { version }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "download_ncov_watchlists": {
        "name_process": "download_ncov_watchlists",
        "string_process": "\nprocess download_ncov_watchlists {\n\n  tag { version }\n\n  executor 'local'\n  \n  input:\n  val(version)\n  \n  output:\n  tuple path(\"watchlists/watchlists.csv\"), path(\"watchlists\", type: 'dir')\n\n\n  script:\n  \"\"\"\n  wget https://github.com/BCCDC-PHL/ncov-watchlists/archive/v${version}.tar.gz\n  tar -xzf v${version}.tar.gz\n  \n  cp -r ncov-watchlists-${version}/watchlists watchlists\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  wget https://github.com/BCCDC-PHL/ncov-watchlists/archive/v${version}.tar.gz\n  tar -xzf v${version}.tar.gz\n  \n  cp -r ncov-watchlists-${version}/watchlists watchlists\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "version"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { version }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "index_reference_genome": {
        "name_process": "index_reference_genome",
        "string_process": "\nprocess index_reference_genome {\n\n  tag { \"MN908947.3\" }\n\n  executor 'local'\n  \n  input:\n  path(resources)\n  \n  output:\n  path(\"resources\", type: 'dir')\n\n  script:\n  \"\"\"\n  samtools faidx resources/nCoV-2019.reference.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  samtools faidx resources/nCoV-2019.reference.fasta\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "resources"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { \"MN908947.3\" }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "get_library_plate_ids": {
        "name_process": "get_library_plate_ids",
        "string_process": "\nprocess get_library_plate_ids {\n\n  tag { params.run_name }\n\n  executor 'local'\n  \n  input:\n  path(artic_analysis_dir)\n  \n  output:\n  stdout\n\n  script:\n  \"\"\"\n  tail -n+2 ${artic_analysis_dir}/*.qc.csv | \\\n  grep -v 'POS*' | grep -v 'NEG*' |\n  cut -f 1 -d ',' | cut -f 2 -d '-' | sort | uniq\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  tail -n+2 ${artic_analysis_dir}/*.qc.csv | \\\n  grep -v 'POS*' | grep -v 'NEG*' |\n  cut -f 1 -d ',' | cut -f 2 -d '-' | sort | uniq\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "artic_analysis_dir"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_data_root": {
        "name_process": "prepare_data_root",
        "string_process": "\nprocess prepare_data_root {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  executor 'local'\n  \n  input:\n  tuple path(ncov2019_artic_nf_analysis_dir), path(primer_scheme_dir), path(metadata), val(library_plate_id)\n  \n  output:\n  tuple val(library_plate_id), path(\"ncov-tools-input\", type: 'dir')\n\n  script:\n  def metadata = metadata.name != 'NO_FILE' ? \"cp ${metadata} ncov-tools-input\" : ''\n  def filename_glob = params.split_by_plate ? \"*-${library_plate_id}-*\" : \"*\"\n  def link_downsampled_bams = params.downsampled ? \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_downsampleAmplicons/${filename_glob} .\" : ''\n  def link_freebayes_consensus = params.freebayes_consensus ? \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_callConsensusFreebayes/${filename_glob}.fa .\" : ''\n  def link_ivar_consensus = params.freebayes_consensus ? '' : \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_makeConsensus/${filename_glob}.fa .\"\n  def link_freebayes_variants = params.freebayes_variants ? \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_callConsensusFreebayes/${filename_glob}.vcf .\" : ''\n  \"\"\"\n  mkdir ncov-tools-input\n  ${metadata}\n  pushd ncov-tools-input\n  ${link_ivar_consensus}\n  ${link_freebayes_consensus}\n  ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_readMapping/${filename_glob} .\n  ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_trimPrimerSequences/${filename_glob} .\n  ${link_downsampled_bams}\n  ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_callVariants/${filename_glob}.tsv .\n  ${link_freebayes_variants}\n  ln -sfn ../${primer_scheme_dir}/nCoV-2019.reference.fasta .\n  ln -sfn ../${primer_scheme_dir}/nCoV-2019.bed .\n  popd\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  def metadata = metadata.name != 'NO_FILE' ? \"cp ${metadata} ncov-tools-input\" : ''\n  def filename_glob = params.split_by_plate ? \"*-${library_plate_id}-*\" : \"*\"\n  def link_downsampled_bams = params.downsampled ? \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_downsampleAmplicons/${filename_glob} .\" : ''\n  def link_freebayes_consensus = params.freebayes_consensus ? \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_callConsensusFreebayes/${filename_glob}.fa .\" : ''\n  def link_ivar_consensus = params.freebayes_consensus ? '' : \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_makeConsensus/${filename_glob}.fa .\"\n  def link_freebayes_variants = params.freebayes_variants ? \"ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_callConsensusFreebayes/${filename_glob}.vcf .\" : ''\n  \"\"\"\n  mkdir ncov-tools-input\n  ${metadata}\n  pushd ncov-tools-input\n  ${link_ivar_consensus}\n  ${link_freebayes_consensus}\n  ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_readMapping/${filename_glob} .\n  ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_trimPrimerSequences/${filename_glob} .\n  ${link_downsampled_bams}\n  ln -sfn ../${ncov2019_artic_nf_analysis_dir}/ncovIllumina_sequenceAnalysis_callVariants/${filename_glob}.tsv .\n  ${link_freebayes_variants}\n  ln -sfn ../${primer_scheme_dir}/nCoV-2019.reference.fasta .\n  ln -sfn ../${primer_scheme_dir}/nCoV-2019.bed .\n  popd\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "PopDel"
        ],
        "tools_url": [
            "https://bio.tools/PopDel"
        ],
        "tools_dico": [
            {
                "name": "PopDel",
                "uri": "https://bio.tools/PopDel",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for population level deletion calling from short paired-end sequence reads.",
                "homepage": "https://github.com/kehrlab/PopDel"
            }
        ],
        "inputs": [
            "library_plate_id",
            "ncov2019_artic_nf_analysis_dir",
            "primer_scheme_dir",
            "metadata"
        ],
        "nb_inputs": 4,
        "outputs": [
            "library_plate_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "create_sample_id_list": {
        "name_process": "create_sample_id_list",
        "string_process": "\nprocess create_sample_id_list {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  executor 'local'\n\n  input:\n  tuple val(library_plate_id), path(data_root)\n\n  output:\n  tuple val(library_plate_id), path(\"sample_id_list.tsv\")\n\n  script:\n  \"\"\"\n  find ${data_root}/ -name '*.variants.tsv' | xargs -n 1 basename | sed 's/\\\\.variants\\\\.tsv//' | sort > sample_id_list.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  find ${data_root}/ -name '*.variants.tsv' | xargs -n 1 basename | sed 's/\\\\.variants\\\\.tsv//' | sort > sample_id_list.tsv\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_plate_id",
            "data_root"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library_plate_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "find_negative_control": {
        "name_process": "find_negative_control",
        "string_process": "\nprocess find_negative_control {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  executor 'local'\n  \n  input:\n  tuple val(library_plate_id), path(data_root)\n  \n  output:\n  tuple val(library_plate_id), path(\"neg_control_sample_id.txt\")\n\n  script:\n  def filename_glob = params.split_by_plate ? \"*-${library_plate_id}-*\" : \"*\"\n  \"\"\"\n  find ${data_root}/ -name NEG${filename_glob}.consensus.fa -printf \"%f\" | cut -d '.' -f 1 > neg_control_sample_id.txt\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  def filename_glob = params.split_by_plate ? \"*-${library_plate_id}-*\" : \"*\"\n  \"\"\"\n  find ${data_root}/ -name NEG${filename_glob}.consensus.fa -printf \"%f\" | cut -d '.' -f 1 > neg_control_sample_id.txt\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_plate_id",
            "data_root"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library_plate_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "create_config_yaml": {
        "name_process": "create_config_yaml",
        "string_process": "\nprocess create_config_yaml {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  executor 'local'\n\n  input:\n  tuple val(library_plate_id), path(negative_control_sample_id), val(metadata)\n  \n  output:\n  tuple val(library_plate_id), path(\"config.yaml\")\n\n  script:\n  def metadata = metadata.name != 'NO_FILE' ? \"metadata: \\\\\\\"{data_root}/metadata.tsv\\\\\\\"\" : ''\n  def bam_pattern = params.downsampled ? \"{data_root}/{sample}.mapped.primertrimmed.downsampled.sorted.bam\" : \"{data_root}/{sample}.mapped.primertrimmed.sorted.bam\"\n  def consensus_pattern = params.freebayes_consensus ? \"{data_root}/{sample}.consensus.fa\" : \"{data_root}/{sample}.primertrimmed.consensus.fa\"\n  def variants_pattern = params.freebayes_variants ? \"{data_root}/{sample}.variants.norm.vcf\" : \"{data_root}/{sample}.variants.tsv\"\n  def run_name_with_plate = params.split_by_plate ? \"${params.run_name}_${library_plate_id}\" : \"${params.run_name}\"\n  \"\"\"\n  echo \"data_root: ncov-tools-input\" >> config.yaml\n  echo \"run_name: ${run_name_with_plate}\" >> config.yaml\n  if [[ \\$( wc -l < ${negative_control_sample_id} ) -ge 1 ]]; then echo \"negative_control_samples: [ \\\\\"\\$( cat ${negative_control_sample_id} )\\\\\" ]\" >> config.yaml; fi\n  echo \"${metadata}\" >> config.yaml\n  echo \"reference_genome: \\\\\"resources/nCoV-2019.reference.fasta\\\\\"\" >> config.yaml\n  echo \"primer_bed: \\\\\"resources/nCoV-2019.bed\\\\\"\" >> config.yaml\n  echo \"bam_pattern: \\\\\"${bam_pattern}\\\\\"\" >> config.yaml\n  echo \"consensus_pattern: \\\\\"${consensus_pattern}\\\\\"\" >> config.yaml\n  echo \"variants_pattern: \\\\\"${variants_pattern}\\\\\"\" >> config.yaml\n  echo \"platform: illumina\" >> config.yaml\n  echo \"bed_type: unique_amplicons\" >> config.yaml\n  echo \"offset: 0\" >> config.yaml\n  echo \"completeness_threshold: ${params.completeness_threshold}\" >> config.yaml\n  echo \"assign_lineages: true\" >> config.yaml\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  def metadata = metadata.name != 'NO_FILE' ? \"metadata: \\\\\\\"{data_root}/metadata.tsv\\\\\\\"\" : ''\n  def bam_pattern = params.downsampled ? \"{data_root}/{sample}.mapped.primertrimmed.downsampled.sorted.bam\" : \"{data_root}/{sample}.mapped.primertrimmed.sorted.bam\"\n  def consensus_pattern = params.freebayes_consensus ? \"{data_root}/{sample}.consensus.fa\" : \"{data_root}/{sample}.primertrimmed.consensus.fa\"\n  def variants_pattern = params.freebayes_variants ? \"{data_root}/{sample}.variants.norm.vcf\" : \"{data_root}/{sample}.variants.tsv\"\n  def run_name_with_plate = params.split_by_plate ? \"${params.run_name}_${library_plate_id}\" : \"${params.run_name}\"\n  \"\"\"\n  echo \"data_root: ncov-tools-input\" >> config.yaml\n  echo \"run_name: ${run_name_with_plate}\" >> config.yaml\n  if [[ \\$( wc -l < ${negative_control_sample_id} ) -ge 1 ]]; then echo \"negative_control_samples: [ \\\\\"\\$( cat ${negative_control_sample_id} )\\\\\" ]\" >> config.yaml; fi\n  echo \"${metadata}\" >> config.yaml\n  echo \"reference_genome: \\\\\"resources/nCoV-2019.reference.fasta\\\\\"\" >> config.yaml\n  echo \"primer_bed: \\\\\"resources/nCoV-2019.bed\\\\\"\" >> config.yaml\n  echo \"bam_pattern: \\\\\"${bam_pattern}\\\\\"\" >> config.yaml\n  echo \"consensus_pattern: \\\\\"${consensus_pattern}\\\\\"\" >> config.yaml\n  echo \"variants_pattern: \\\\\"${variants_pattern}\\\\\"\" >> config.yaml\n  echo \"platform: illumina\" >> config.yaml\n  echo \"bed_type: unique_amplicons\" >> config.yaml\n  echo \"offset: 0\" >> config.yaml\n  echo \"completeness_threshold: ${params.completeness_threshold}\" >> config.yaml\n  echo \"assign_lineages: true\" >> config.yaml\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_plate_id",
            "metadata",
            "negative_control_sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "library_plate_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "ncov_tools": {
        "name_process": "ncov_tools",
        "string_process": "\nprocess ncov_tools {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"config.yaml\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"bed\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"lineages/${params.run_name}*\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"plots\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_analysis\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_reports/*.tsv\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_sequencing\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_annotation\", enabled: params.split_by_plate\n\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"config.yaml\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"bed\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"lineages/${params.run_name}*\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"plots\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_analysis\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_reports/*.tsv\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_sequencing\", enabled: !params.split_by_plate\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_annotation\", enabled: !params.split_by_plate\n\n  input:\n  tuple val(library_plate_id), path(config_yaml), path(data_root), path(resources), path(ncov_tools), val(pangolin_updated)\n  \n  output:\n  path(\"config.yaml\")\n  path(\"bed\")\n  path(\"lineages/${params.run_name}*_lineage_report.csv\"), emit: lineage_report\n  path(\"lineages/${params.run_name}*_pangolin_version.txt\"), emit: pangolin_version\n  path(\"plots\")\n  path(\"qc_analysis\")\n  path(\"qc_reports/*.tsv\"), emit: qc_reports\n  path(\"qc_sequencing\")\n  path(\"qc_annotation\")\n\n  script:\n  \"\"\"\n  snakemake -s ./ncov-tools/workflow/Snakefile --cores ${task.cpus} all\n  snakemake -s ./ncov-tools/workflow/Snakefile --cores 8 all_qc_annotation\n  rm qc_reports/${params.run_name}_*ncov_watch_variants.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "  \"\"\"\n  snakemake -s ./ncov-tools/workflow/Snakefile --cores ${task.cpus} all\n  snakemake -s ./ncov-tools/workflow/Snakefile --cores 8 all_qc_annotation\n  rm qc_reports/${params.run_name}_*ncov_watch_variants.tsv\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Snakemake"
        ],
        "tools_url": [
            "https://bio.tools/snakemake"
        ],
        "tools_dico": [
            {
                "name": "Snakemake",
                "uri": "https://bio.tools/snakemake",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3762",
                                    "term": "Service composition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Workflow engine and language. It aims to reduce the complexity of creating workflows by providing a fast and comfortable execution environment, together with a clean and modern domain specific specification language (DSL) in python style.",
                "homepage": "https://snakemake.readthedocs.io/en/stable/index.html"
            }
        ],
        "inputs": [
            "library_plate_id",
            "pangolin_updated",
            "config_yaml",
            "data_root",
            "resources",
            "ncov_tools"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"config.yaml\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"bed\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"lineages/${params.run_name}*\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"plots\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_analysis\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_reports/*.tsv\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_sequencing\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}\", mode: 'copy', pattern: \"qc_annotation\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"config.yaml\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"bed\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"lineages/${params.run_name}*\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"plots\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_analysis\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_reports/*.tsv\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_sequencing\", enabled: !params.split_by_plate",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"qc_annotation\", enabled: !params.split_by_plate"
        ],
        "when": "",
        "stub": ""
    },
    "ncov_watch": {
        "name_process": "ncov_watch",
        "string_process": "\nprocess ncov_watch {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id + \" / \" + mutation_set_id : params.run_name + \" / \" + mutation_set_id }\n  \n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: !params.split_by_plate\n\n  input:\n  tuple val(library_plate_id), path(data_root), val(mutation_set_id), val(watchlist_filename), path(watchlists_dir)\n  \n  output:\n  tuple val(library_plate_id), val(mutation_set_id), val(watchlist_filename), path(watchlists_dir), path(\"${params.run_name}_*_ncov_watch_variants.tsv\")\n\n  script:\n  def variants_output_filename = params.split_by_plate == true ? \"${params.run_name}_${library_plate_id}_${mutation_set_id}_ncov_watch_variants.tsv\" : \"${params.run_name}_${mutation_set_id}_ncov_watch_variants.tsv\"\n  \"\"\"\n  ncov-watch -d ${data_root} --mutation_set ${watchlists_dir}/${watchlist_filename} | sed 's/\\\\.variants\\\\.tsv//' > ${variants_output_filename} 2> /dev/null\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  def variants_output_filename = params.split_by_plate == true ? \"${params.run_name}_${library_plate_id}_${mutation_set_id}_ncov_watch_variants.tsv\" : \"${params.run_name}_${mutation_set_id}_ncov_watch_variants.tsv\"\n  \"\"\"\n  ncov-watch -d ${data_root} --mutation_set ${watchlists_dir}/${watchlist_filename} | sed 's/\\\\.variants\\\\.tsv//' > ${variants_output_filename} 2> /dev/null\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "library_plate_id",
            "mutation_set_id",
            "watchlist_filename",
            "data_root",
            "watchlists_dir"
        ],
        "nb_inputs": 5,
        "outputs": [
            "watchlist_filename"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id + \" / \" + mutation_set_id : params.run_name + \" / \" + mutation_set_id }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: !params.split_by_plate"
        ],
        "when": "",
        "stub": ""
    },
    "combine_ncov_watch_variants": {
        "name_process": "combine_ncov_watch_variants",
        "string_process": "\nprocess combine_ncov_watch_variants {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: !params.split_by_plate\n\n  input:\n  tuple val(library_plate_id), path(variants)\n\n  output:\n  path(\"${params.run_name}*_ncov_watch_variants.tsv\")\n\n  script:\n  def run_name_with_plate = params.split_by_plate ? \"${params.run_name}_${library_plate_id}\" : \"${params.run_name}\"\n  \"\"\"\n  head -qn 1 *_variants.tsv | uniq > header.tsv\n  tail -qn+2 *_variants.tsv | sort -k1,1 -k4,4n | uniq > data.tsv\n  cat header.tsv data.tsv > ${run_name_with_plate}_ncov_watch_variants.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  def run_name_with_plate = params.split_by_plate ? \"${params.run_name}_${library_plate_id}\" : \"${params.run_name}\"\n  \"\"\"\n  head -qn 1 *_variants.tsv | uniq > header.tsv\n  tail -qn+2 *_variants.tsv | sort -k1,1 -k4,4n | uniq > data.tsv\n  cat header.tsv data.tsv > ${run_name_with_plate}_ncov_watch_variants.tsv\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_plate_id",
            "variants"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_variants.tsv\", enabled: !params.split_by_plate"
        ],
        "when": "",
        "stub": ""
    },
    "ncov_watch_summary": {
        "name_process": "ncov_watch_summary",
        "string_process": "\nprocess ncov_watch_summary {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id + \" / \" + watchlist_id : params.run_name + \" / \" + watchlist_id }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_${watchlist_id}_ncov_watch_summary.tsv\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_${watchlist_id}_ncov_watch_summary.tsv\", enabled: !params.split_by_plate\n\n  input:\n  tuple val(library_plate_id), val(watchlist_id), val(watchlist_filename), path(watchlists_dir), path(ncov_watch_output), path(sample_ids)\n\n  output:\n  tuple val(library_plate_id), path(\"${params.run_name}*_${watchlist_id}_ncov_watch_summary.tsv\")\n\n  script:\n  def ncov_watch_summary_filename = params.split_by_plate ? \"${params.run_name}_${library_plate_id}_${watchlist_id}_ncov_watch_summary.tsv\" : \"${params.run_name}_${watchlist_id}_ncov_watch_summary.tsv\"\n  \"\"\"\n  ncov-watch-summary.py ${ncov_watch_output} --sample-ids ${sample_ids} --watchlist-id ${watchlist_id} --watchlist ${watchlists_dir}/${watchlist_filename} > ncov_watch_summary_tmp.tsv 2> /dev/null\n  head -n 1 ncov_watch_summary_tmp.tsv > header.tsv\n  tail -n+2 ncov_watch_summary_tmp.tsv | sort -b -k3,3rn -k1,1 > data_sorted.tsv\n  cat header.tsv data_sorted.tsv > ${ncov_watch_summary_filename}\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  def ncov_watch_summary_filename = params.split_by_plate ? \"${params.run_name}_${library_plate_id}_${watchlist_id}_ncov_watch_summary.tsv\" : \"${params.run_name}_${watchlist_id}_ncov_watch_summary.tsv\"\n  \"\"\"\n  ncov-watch-summary.py ${ncov_watch_output} --sample-ids ${sample_ids} --watchlist-id ${watchlist_id} --watchlist ${watchlists_dir}/${watchlist_filename} > ncov_watch_summary_tmp.tsv 2> /dev/null\n  head -n 1 ncov_watch_summary_tmp.tsv > header.tsv\n  tail -n+2 ncov_watch_summary_tmp.tsv | sort -b -k3,3rn -k1,1 > data_sorted.tsv\n  cat header.tsv data_sorted.tsv > ${ncov_watch_summary_filename}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "library_plate_id",
            "watchlist_id",
            "watchlist_filename",
            "watchlists_dir",
            "ncov_watch_output",
            "sample_ids"
        ],
        "nb_inputs": 6,
        "outputs": [
            "library_plate_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id + \" / \" + watchlist_id : params.run_name + \" / \" + watchlist_id }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_${watchlist_id}_ncov_watch_summary.tsv\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/ncov_watch\", mode: 'copy', pattern: \"${params.run_name}*_${watchlist_id}_ncov_watch_summary.tsv\", enabled: !params.split_by_plate"
        ],
        "when": "",
        "stub": ""
    },
    "combine_ncov_watch_summaries": {
        "name_process": "combine_ncov_watch_summaries",
        "string_process": "\nprocess combine_ncov_watch_summaries {\n\n  tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/by_plate/${library_plate_id}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_summary.tsv\", enabled: params.split_by_plate\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_summary.tsv\", enabled: !params.split_by_plate\n\n  input:\n  tuple val(library_plate_id), path(summaries)\n\n  output:\n  path(\"${params.run_name}*_ncov_watch_summary.tsv\")\n\n  script:\n  def ncov_watch_summary_filename = params.split_by_plate ? \"${params.run_name}_${library_plate_id}_ncov_watch_summary.tsv\" : \"${params.run_name}_ncov_watch_summary.tsv\"\n  \"\"\"\n  head -qn 1 *_summary.tsv | uniq > header.tsv\n  tail -qn+2 *_summary.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > ${ncov_watch_summary_filename}\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  def ncov_watch_summary_filename = params.split_by_plate ? \"${params.run_name}_${library_plate_id}_ncov_watch_summary.tsv\" : \"${params.run_name}_ncov_watch_summary.tsv\"\n  \"\"\"\n  head -qn 1 *_summary.tsv | uniq > header.tsv\n  tail -qn+2 *_summary.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > ${ncov_watch_summary_filename}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_plate_id",
            "summaries"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.split_by_plate ? params.run_name + \" / \" + library_plate_id : params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/by_plate/${library_plate_id}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_summary.tsv\", enabled: params.split_by_plate",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}*_ncov_watch_summary.tsv\", enabled: !params.split_by_plate"
        ],
        "when": "",
        "stub": ""
    },
    "combine_all_qc_summaries_for_run": {
        "name_process": "combine_all_qc_summaries_for_run",
        "string_process": "\nprocess combine_all_qc_summaries_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_summary_qc.tsv\"\n\n  input:\n  path(summaries)\n\n  output:\n  path(\"${params.run_name}_summary_qc.tsv\")\n\n  script:\n  \"\"\"\n  head -qn 1 *_summary_qc.tsv | uniq > header.tsv\n  tail -qn+2 *_summary_qc.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_summary_qc_incorrect_run_name.tsv\"\n  tail -qn+2 \"${params.run_name}_summary_qc_incorrect_run_name.tsv\" | awk -F '\\t' 'BEGIN {OFS=FS}; {split(\\$2, run_id_split, \"_\"); \\$2 = run_id_split[1]\"_\"run_id_split[2]\"_\"run_id_split[3]\"_\"run_id_split[4]; print}' > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_summary_qc.tsv\"\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  head -qn 1 *_summary_qc.tsv | uniq > header.tsv\n  tail -qn+2 *_summary_qc.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_summary_qc_incorrect_run_name.tsv\"\n  tail -qn+2 \"${params.run_name}_summary_qc_incorrect_run_name.tsv\" | awk -F '\\t' 'BEGIN {OFS=FS}; {split(\\$2, run_id_split, \"_\"); \\$2 = run_id_split[1]\"_\"run_id_split[2]\"_\"run_id_split[3]\"_\"run_id_split[4]; print}' > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_summary_qc.tsv\"\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summaries"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_summary_qc.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_all_mixture_reports_for_run": {
        "name_process": "combine_all_mixture_reports_for_run",
        "string_process": "\nprocess combine_all_mixture_reports_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_mixture_report.tsv\"\n\n  input:\n  path(mixture_reports)\n\n  output:\n  path(\"${params.run_name}_mixture_report.tsv\")\n\n  script:\n  \"\"\"\n  head -qn 1 *_mixture_report.tsv | uniq > header.tsv\n  tail -qn+2 *_mixture_report.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_mixture_report.tsv\"\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  head -qn 1 *_mixture_report.tsv | uniq > header.tsv\n  tail -qn+2 *_mixture_report.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_mixture_report.tsv\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mixture_reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_mixture_report.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_ambiguous_position_reports_for_run": {
        "name_process": "combine_ambiguous_position_reports_for_run",
        "string_process": "\nprocess combine_ambiguous_position_reports_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_ambiguous_position_report.tsv\"\n\n  input:\n  path(ambiguous_position_reports)\n\n  output:\n  path(\"${params.run_name}_ambiguous_position_report.tsv\")\n\n  script:\n  \"\"\"\n  head -qn 1 *_ambiguous_position_report.tsv | uniq > header.tsv\n  tail -qn+2 *_ambiguous_position_report.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_ambiguous_position_report.tsv\"\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  head -qn 1 *_ambiguous_position_report.tsv | uniq > header.tsv\n  tail -qn+2 *_ambiguous_position_report.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_ambiguous_position_report.tsv\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ambiguous_position_reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_ambiguous_position_report.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_all_ncov_watch_summaries_for_run": {
        "name_process": "combine_all_ncov_watch_summaries_for_run",
        "string_process": "\nprocess combine_all_ncov_watch_summaries_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_ncov_watch_summary.tsv\"\n\n  input:\n  path(ncov_watch_summaries)\n\n  output:\n  path(\"${params.run_name}_ncov_watch_summary.tsv\")\n\n  script:\n  \"\"\"\n  head -qn 1 *_summary.tsv | uniq > header.tsv\n  tail -qn+2 *_summary.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_ncov_watch_summary.tsv\"\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  head -qn 1 *_summary.tsv | uniq > header.tsv\n  tail -qn+2 *_summary.tsv | sort -k1,1 -k2,2 > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_ncov_watch_summary.tsv\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ncov_watch_summaries"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_ncov_watch_summary.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_all_ncov_watch_variants_for_run": {
        "name_process": "combine_all_ncov_watch_variants_for_run",
        "string_process": "\nprocess combine_all_ncov_watch_variants_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_ncov_watch_variants.tsv\"\n\n  input:\n  path(ncov_watch_variants)\n\n  output:\n  path(\"${params.run_name}_ncov_watch_variants.tsv\")\n\n  script:\n  \"\"\"\n  head -qn 1 *_variants.tsv | uniq > header.tsv\n  tail -qn+2 *_variants.tsv | sort -k1,1 -k4,4n > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_ncov_watch_variants.tsv\"\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  head -qn 1 *_variants.tsv | uniq > header.tsv\n  tail -qn+2 *_variants.tsv | sort -k1,1 -k4,4n > data.tsv\n  cat header.tsv data.tsv > \"${params.run_name}_ncov_watch_variants.tsv\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ncov_watch_variants"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/qc_reports\", mode: 'copy', pattern: \"${params.run_name}_ncov_watch_variants.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_all_lineage_reports_for_run": {
        "name_process": "combine_all_lineage_reports_for_run",
        "string_process": "\nprocess combine_all_lineage_reports_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/lineages\", mode: 'copy', pattern: \"${params.run_name}_lineage_report.csv\"\n\n  input:\n  path(lineage_reports)\n\n  output:\n  path(\"${params.run_name}_lineage_report.csv\")\n\n  script:\n  \"\"\"\n  head -qn 1 *_lineage_report.csv | uniq > header.csv\n  tail -qn+2 *_lineage_report.csv | sort -k1,1 -k2,2 > data.csv\n  cat header.csv data.csv > \"${params.run_name}_lineage_report.csv\"\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  head -qn 1 *_lineage_report.csv | uniq > header.csv\n  tail -qn+2 *_lineage_report.csv | sort -k1,1 -k2,2 > data.csv\n  cat header.csv data.csv > \"${params.run_name}_lineage_report.csv\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lineage_reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/lineages\", mode: 'copy', pattern: \"${params.run_name}_lineage_report.csv\""
        ],
        "when": "",
        "stub": ""
    },
    "get_pangolin_version_for_run": {
        "name_process": "get_pangolin_version_for_run",
        "string_process": "\nprocess get_pangolin_version_for_run {\n\n  tag { params.run_name }\n\n  cpus 1\n\n  executor 'local'\n\n  publishDir \"${params.outdir}/lineages\", mode: 'copy', pattern: \"${params.run_name}_pangolin_version.txt\"\n\n  input:\n  path(lineage_reports)\n\n  output:\n  path(\"${params.run_name}_pangolin_version.txt\")\n\n  script:\n  \"\"\"\n  cat ${params.run_name}*_pangolin_version.txt > ${params.run_name}_pangolin_version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  cat ${params.run_name}*_pangolin_version.txt > ${params.run_name}_pangolin_version.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lineage_reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__ncov-tools-nf",
        "directive": [
            "tag { params.run_name }",
            "cpus 1",
            "executor 'local'",
            "publishDir \"${params.outdir}/lineages\", mode: 'copy', pattern: \"${params.run_name}_pangolin_version.txt\""
        ],
        "when": "",
        "stub": ""
    }
}
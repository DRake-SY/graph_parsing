{
    "FiltersVcfI": {
        "name_process": "FiltersVcfI",
        "string_process": " process FiltersVcfI{\n      memory params.memory_vcftools\n      time params.big_time\n      input:\n         file(file_vcf) from file_vcf_tofilter\n         file(file_ind) from keep_file_ch\n         file(exclude_bed) from exclude_bed_ch\n         file(bedf) from bed_ch\n      publishDir \"${params.output_dir}/vcffilter/\", overwrite:true, mode:'copy'\n      output :\n         set file(\"${out_file}.recode.vcf.gz\"),  file(\"${out_file}.recode.vcf.gz.csi\") into file_vcf_filter\n      script :\n         gvcf= vcfrefisgz  ? \"--gzvcf\" : \"--vcf\"\n         chro=params.chr!=\"\"? \"--chr ${params.chr}\" : \"\"\n         end=params.to_bp!=\"\"? \"--to-bp  ${params.to_bp}\" : \"\"\n         begin=params.from_bp!=\"\"? \"--from-bp  ${params.from_bp}\" : \"\"\n         maf=params.maf!=\"\" ? \"--maf ${params.maf} \" : \"\"\n         keep=params.keep!=\"\" ? \" --keep ${file_ind} \" : \"\"\n         excl_bed=params.exclude_bed!=\"\" ? \" --exclude_bed $exclude_bed \" : \"\"\n         bed=params.bed!=\"\" ? \" --bed $bedf \" : \"\"\n         out_file=\"${params.output}_filt1\"\n         \"\"\"\n         ${params.bin_vcftools} $gvcf $file_vcf $chro $end $begin $maf $keep --out ${out_file} --recode --recode-INFO-all $excl_bed $bed --max-missing ${params.max_missing}\n\n         ${params.bin_bcftools} sort ${out_file}\".recode.vcf\"  -Oz -o  ${out_file}\".recode.vcf.gz\"\n         ${params.bin_bcftools} index ${out_file}\".recode.vcf.gz\"\n         \"\"\"\n     }",
        "nb_lignes_process": 26,
        "string_script": "         gvcf= vcfrefisgz  ? \"--gzvcf\" : \"--vcf\"\n         chro=params.chr!=\"\"? \"--chr ${params.chr}\" : \"\"\n         end=params.to_bp!=\"\"? \"--to-bp  ${params.to_bp}\" : \"\"\n         begin=params.from_bp!=\"\"? \"--from-bp  ${params.from_bp}\" : \"\"\n         maf=params.maf!=\"\" ? \"--maf ${params.maf} \" : \"\"\n         keep=params.keep!=\"\" ? \" --keep ${file_ind} \" : \"\"\n         excl_bed=params.exclude_bed!=\"\" ? \" --exclude_bed $exclude_bed \" : \"\"\n         bed=params.bed!=\"\" ? \" --bed $bedf \" : \"\"\n         out_file=\"${params.output}_filt1\"\n         \"\"\"\n         ${params.bin_vcftools} $gvcf $file_vcf $chro $end $begin $maf $keep --out ${out_file} --recode --recode-INFO-all $excl_bed $bed --max-missing ${params.max_missing}\n\n         ${params.bin_bcftools} sort ${out_file}\".recode.vcf\"  -Oz -o  ${out_file}\".recode.vcf.gz\"\n         ${params.bin_bcftools} index ${out_file}\".recode.vcf.gz\"\n         \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_tofilter",
            "keep_file_ch",
            "exclude_bed_ch",
            "bed_ch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "file_vcf_filter"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_vcftools",
            "time params.big_time"
        ],
        "when": "",
        "stub": ""
    },
    "gzipvcf": {
        "name_process": "gzipvcf",
        "string_process": " process gzipvcf{\n      memory params.memory_vcftools\n      time params.big_time\n      input :\n         file(file_vcf) from file_vcf_tofilter \n      output :\n         set file(\"${out_file}.recode.vcf.gz\"), file(\"${out_file}.recode.vcf.gz.csi\") into file_vcf_filter\n      script :\n         out_file=\"${params.output}_filt1\"\n         \"\"\"\n         ${params.bin_bcftools} sort ${file_vcf}\".recode.vcf\"  -Oz -o  ${out_file}\".recode.vcf.gz\" \n         \"\"\"\n  }",
        "nb_lignes_process": 11,
        "string_script": "         out_file=\"${params.output}_filt1\"\n         \"\"\"\n         ${params.bin_bcftools} sort ${file_vcf}\".recode.vcf\"  -Oz -o  ${out_file}\".recode.vcf.gz\" \n         \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_tofilter"
        ],
        "nb_inputs": 1,
        "outputs": [
            "file_vcf_filter"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_vcftools",
            "time params.big_time"
        ],
        "when": "",
        "stub": ""
    },
    "prephase_shapeit": {
        "name_process": "prephase_shapeit",
        "string_process": " process prephase_shapeit{\n  cpus params.cpus_other\n  input :\n      file(file_vcf) from file_vcf_filter\n      file(genetic_map) from genetic_map_ch\n      file(ref_vcf) from ref_vcf_ch\n  output :\n      file(fileout) into file_vcf_prephase\n  script :\n      chro=params.chr!=\"\"? \"--chrom=${params.chr}\" : \"\"\n      begin=params.to_bp!=\"\"? \"--bpStart=${params.from_bp}\" : \"\"\n      end=params.from_bp!=\"\"? \"--bpEnd=${params.to_bp}\" : \"\"\n      fileout=${params.output\"_prephase_shapeit\"}\n      \"\"\"\n      ${params.bin_shapeit} \\\n       -V $file_vcf\\\n       --input-map $genetic_map \\\n       --input-thr ${params.thr_shapeit} \\\n       --output-max $fileout\".haps\" $fileout\".sample\" \\\n       --thread ${params.cpus_other} \\\n       --force\n      \"\"\" \n }",
        "nb_lignes_process": 21,
        "string_script": "      chro=params.chr!=\"\"? \"--chrom=${params.chr}\" : \"\"\n      begin=params.to_bp!=\"\"? \"--bpStart=${params.from_bp}\" : \"\"\n      end=params.from_bp!=\"\"? \"--bpEnd=${params.to_bp}\" : \"\"\n      fileout=${params.output\"_prephase_shapeit\"}\n      \"\"\"\n      ${params.bin_shapeit} \\\n       -V $file_vcf\\\n       --input-map $genetic_map \\\n       --input-thr ${params.thr_shapeit} \\\n       --output-max $fileout\".haps\" $fileout\".sample\" \\\n       --thread ${params.cpus_other} \\\n       --force\n      \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter",
            "genetic_map_ch",
            "ref_vcf_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "file_vcf_prephase"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "cpus params.cpus_other"
        ],
        "when": "",
        "stub": ""
    },
    "prephase_eagle": {
        "name_process": "prephase_eagle",
        "string_process": " process prephase_eagle{\n    input : \n      file(file_vcf) from file_vcf_filter\n      file(genetic_map) from genetic_map_ch\n      file(ref_vcf) from ref_vcf_ch\n    output :\n      file(fileout) into file_vcf_prephase\n    script :\n        chro=params.chr!=\"\"? \"--chrom=${params.chr}\" : \"\"\n        end=params.to_bp!=\"\"? \"--bpStart=${params.to_bp}\" : \"\"\n        begin=params.from_bp!=\"\"? \"--bpEnd=${params.from_bp}\" : \"\"\n        file_out=${params.output\"_prephase_eagle\"}\n        \"\"\"\n        ${params.bin_eagle}\\\n                --vcfTarget=${file_vcf} \\\n                --geneticMapFile=${eagle_genetic_map} \\\n                --vcfRef=${ref_vcf} \\\n                --vcfOutFormat=z \\\n                --noImpMissing $chro $begin $end \\\n                --bpFlanking=${params.buffer_size} \\\n                --outPrefix=${file_out} 2>&1 | tee ${file_out}.log\n       \"\"\"\n }",
        "nb_lignes_process": 21,
        "string_script": "        chro=params.chr!=\"\"? \"--chrom=${params.chr}\" : \"\"\n        end=params.to_bp!=\"\"? \"--bpStart=${params.to_bp}\" : \"\"\n        begin=params.from_bp!=\"\"? \"--bpEnd=${params.from_bp}\" : \"\"\n        file_out=${params.output\"_prephase_eagle\"}\n        \"\"\"\n        ${params.bin_eagle}\\\n                --vcfTarget=${file_vcf} \\\n                --geneticMapFile=${eagle_genetic_map} \\\n                --vcfRef=${ref_vcf} \\\n                --vcfOutFormat=z \\\n                --noImpMissing $chro $begin $end \\\n                --bpFlanking=${params.buffer_size} \\\n                --outPrefix=${file_out} 2>&1 | tee ${file_out}.log\n       \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter",
            "genetic_map_ch",
            "ref_vcf_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "file_vcf_prephase"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "builbref3": {
        "name_process": "builbref3",
        "string_process": "\nprocess builbref3{\n  input :\n   file(vcfref) from vcfref_ch \n  output :\n   file(brfref) into brfref_ch\n  script :\n    brfref=params.output+\"_beagle.bref3\"\n    \"\"\"\n    ${params.bin_bref3}  $vcfref > $brfref\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "    brfref=params.output+\"_beagle.bref3\"\n    \"\"\"\n    ${params.bin_bref3}  $vcfref > $brfref\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfref_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "brfref_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "beagle": {
        "name_process": "beagle",
        "string_process": "\nprocess beagle{\n  memory params.memory_beagle\n  input :\n    set file(vcf), file(vcfindex) from file_vcf_prephase\n    file(ref) from brfref_ch\n  publishDir \"${params.output_dir}/beagle/\", overwrite:true, mode:'copy'\n  output :\n      file(\"${headout}*\")\n  script :\n    chro=params.chr!=\"\"? \"${params.chr}\" : \"\"\n    begin=params.to_bp!=\"\"? \"${params.from_bp}\" : \"\"\n    end=params.from_bp!=\"\"? \"${params.to_bp}\" : \"\"\n    headout=params.output+\"_beagle\"\n    \"\"\"\n    ${params.bin_beagle}  gt=$vcf ref=$ref impute=true out=$headout #chrom=$chro\":\"$begin\"-\"$end\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    chro=params.chr!=\"\"? \"${params.chr}\" : \"\"\n    begin=params.to_bp!=\"\"? \"${params.from_bp}\" : \"\"\n    end=params.from_bp!=\"\"? \"${params.to_bp}\" : \"\"\n    headout=params.output+\"_beagle\"\n    \"\"\"\n    ${params.bin_beagle}  gt=$vcf ref=$ref impute=true out=$headout #chrom=$chro\":\"$begin\"-\"$end\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_prephase",
            "brfref_ch"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_beagle"
        ],
        "when": "",
        "stub": ""
    },
    "GetDataFTP": {
        "name_process": "GetDataFTP",
        "string_process": " process GetDataFTP{\n  memory params.memory_tabix\n  output :\n     file(newvcf) into file_vcf_tofilter  \n  script :\n    newvcf=params.output+\"_sub.vcf\"\n    posinf=params.chr!=\"\"? \"${params.chr}\" : \"\" \n    posinf=(to_bp!=\"\" && from_bp!=\"\") ? \" $posinf:${from_bp}-${to_bp}\" : posinf\n    \"\"\" \n    ${params.bin_tabix} -h ${params.input_vcf_ref} $posinf > $newvcf\n    \"\"\"\n }",
        "nb_lignes_process": 10,
        "string_script": "    newvcf=params.output+\"_sub.vcf\"\n    posinf=params.chr!=\"\"? \"${params.chr}\" : \"\" \n    posinf=(to_bp!=\"\" && from_bp!=\"\") ? \" $posinf:${from_bp}-${to_bp}\" : posinf\n    \"\"\" \n    ${params.bin_tabix} -h ${params.input_vcf_ref} $posinf > $newvcf\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "file_vcf_tofilter"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_tabix"
        ],
        "when": "",
        "stub": ""
    },
    "ConvertPosition": {
        "name_process": "ConvertPosition",
        "string_process": " process ConvertPosition{\n      input :\n         file(vcfI) from file_vcf_filter_1\n         file(convert) from file_conv_ch\n         file(fasta) from fastafile_ch\n       publishDir \"${params.output_dir}/crossmap_out/\", overwrite:true, mode:'copy'\n       output :\n          file(\"${headfinal}.tmp.vcf.unmap\")\n          file(vcffinal) into file_vcf_filter_2 \n       script :\n        headfinal=\"${params.output}_filt1_newpos\"\n        vcffinal=\"${params.output}_filt1_newpos.recode.vcf\"\n        \"\"\"\n        ${params.bin_crossmap}  vcf $convert $vcfI $fasta $headfinal\".tmp.vcf\"\n        vcftools --vcf $headfinal\".tmp.vcf\"  --chr ${params.chr} --recode --recode-INFO-all --out $headfinal\n        \"\"\"\n    }",
        "nb_lignes_process": 15,
        "string_script": "        headfinal=\"${params.output}_filt1_newpos\"\n        vcffinal=\"${params.output}_filt1_newpos.recode.vcf\"\n        \"\"\"\n        ${params.bin_crossmap}  vcf $convert $vcfI $fasta $headfinal\".tmp.vcf\"\n        vcftools --vcf $headfinal\".tmp.vcf\"  --chr ${params.chr} --recode --recode-INFO-all --out $headfinal\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "VCFtools"
        ],
        "tools_url": [
            "https://bio.tools/vcftools"
        ],
        "tools_dico": [
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            }
        ],
        "inputs": [
            "file_vcf_filter_1",
            "file_conv_ch",
            "fastafile_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "file_vcf_filter_2"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "AddPosition": {
        "name_process": "AddPosition",
        "string_process": " process AddPosition {\n       input:\n          file(filevcfi) from file_vcf_filter_2\n          file(colreffile) from inputcolref  \n        publishDir \"${params.output_dir}/addpos/\", overwrite:true, mode:'copy'\n        output :\n           file(\"${fileposvcf}*\")\n           file(\"$filevcffinal\") into file_vcf_filter_final \n        script :\n          fileposvcf=\"${params.output}_pos\"\n          filevcffinal=\"${params.output}_addpos.vcf\"\n          readvcf=(vcfrefisgz)? \"zcat \" : \"cat\"\n          \"\"\" \n          $readvcf $filevcfi > $filevcffinal\n          transform_file_in_vcf.r $colreffile $filevcfi $fileposvcf\n          grep -v '#' $fileposvcf\".vcf\" >> $filevcffinal \n          \"\"\"\n     }",
        "nb_lignes_process": 16,
        "string_script": "          fileposvcf=\"${params.output}_pos\"\n          filevcffinal=\"${params.output}_addpos.vcf\"\n          readvcf=(vcfrefisgz)? \"zcat \" : \"cat\"\n          \"\"\" \n          $readvcf $filevcfi > $filevcffinal\n          transform_file_in_vcf.r $colreffile $filevcfi $fileposvcf\n          grep -v '#' $fileposvcf\".vcf\" >> $filevcffinal \n          \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter_2",
            "inputcolref"
        ],
        "nb_inputs": 2,
        "outputs": [
            "file_vcf_filter_final"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "IndexFile": {
        "name_process": "IndexFile",
        "string_process": "\nprocess IndexFile{\n  input :\n     file(filevcf) from file_vcf_filter_final\n  publishDir \"${params.output_dir}/vcffilt/\", overwrite:true, mode:'copy'\n  output :\n     set file(\"${fileout}.gz\"), file(\"${fileout}.gz.csi\") into (file_vcf_filter_index,file_vcf_filter_index2, file_vcf_fileter_index3)\n  script :\n      fileout=\"${params.output}_sort.vcf\"\n      logfilt=\"${params.output}_filter.log\"\n      readvcf=(vcfrefisgz)? \"zcat \" : \"cat\"\n      \"\"\"\n      check_vcf.py --vcf $filevcf --out vcftmp.vcf > $logfilt\n      ${params.bin_bcftools} sort vcftmp.vcf| bgzip -c > $fileout\".gz\"\n      ${params.bin_bcftools} index $fileout\".gz\"\n      \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "      fileout=\"${params.output}_sort.vcf\"\n      logfilt=\"${params.output}_filter.log\"\n      readvcf=(vcfrefisgz)? \"zcat \" : \"cat\"\n      \"\"\"\n      check_vcf.py --vcf $filevcf --out vcftmp.vcf > $logfilt\n      ${params.bin_bcftools} sort vcftmp.vcf| bgzip -c > $fileout\".gz\"\n      ${params.bin_bcftools} index $fileout\".gz\"\n      \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter_final"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "ComputeStatFilter": {
        "name_process": "ComputeStatFilter",
        "string_process": "\nprocess ComputeStatFilter{\n  input :\n      set file(filevcf), file(filevcfidx)  from file_vcf_fileter_index3\n  publishDir \"${params.output_dir}/vcffilt/\", overwrite:true, mode:'copy'\n  output :\n      file(\"$headout*\")\n  script :\n    headout=\"${params.output}_stat\"\n    \"\"\"\n    compute_statvcf.py  --vcf $filevcf --out $headout\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    headout=\"${params.output}_stat\"\n    \"\"\"\n    compute_statvcf.py  --vcf $filevcf --out $headout\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_fileter_index3"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "normvcf": {
        "name_process": "normvcf",
        "string_process": "\nprocess  normvcf{\n  input :\n     set file(filevcf), file(filevcfidx) from file_vcf_filter_index2\n  publishDir \"${params.output_dir}/vcfnorm/\", overwrite:true, mode:'copy'\n  output :\n     set file(\"${fileout}\"), file(\"${fileout}.csi\") into (file_vcf_filter_index_norm , file_vcf_filter_index_norm_2, file_vcf_filter_index_norm_3)\n  script :\n      fileout=\"${params.output}_sort_norm.vcf.gz\" \n      \"\"\"\n      ${params.bin_bcftools} norm -m -any $filevcf -Oz -o $fileout\n      ${params.bin_bcftools} index $fileout\n      \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "      fileout=\"${params.output}_sort_norm.vcf.gz\" \n      \"\"\"\n      ${params.bin_bcftools} norm -m -any $filevcf -Oz -o $fileout\n      ${params.bin_bcftools} index $fileout\n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter_index2"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "phasebeagle": {
        "name_process": "phasebeagle",
        "string_process": "\nprocess phasebeagle{\n cpus params.cpus_other\n input :\n   file(genet_map) from gm_ch\n   set file(filevcf), file(filevcfidx) from file_vcf_filter_index\n publishDir \"${params.output_dir}/beagle/\", overwrite:true, mode:'copy'\n output :\n   file(\"${headout}*\")\n   set file(\"${headout}.vcf.gz\"), file(\"${headout}.vcf.gz.csi\") into file_vcf_beaglephase\n script :\n   map=(params.genetic_map_beagle!=\"\")?\"map=$genet_map\" : \"\"\n   headout=\"${params.output}_phasebeagle\"\n   \"\"\"\n   ${params.bin_beagle} gt=$filevcf nthreads=${params.cpus_other} out=$headout  $map ${params.otheropt_beagle}\n   ${params.bin_bcftools} index $headout\".vcf.gz\"\n   \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "   map=(params.genetic_map_beagle!=\"\")?\"map=$genet_map\" : \"\"\n   headout=\"${params.output}_phasebeagle\"\n   \"\"\"\n   ${params.bin_beagle} gt=$filevcf nthreads=${params.cpus_other} out=$headout  $map ${params.otheropt_beagle}\n   ${params.bin_bcftools} index $headout\".vcf.gz\"\n   \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gm_ch",
            "file_vcf_filter_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "file_vcf_beaglephase"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "cpus params.cpus_other"
        ],
        "when": "",
        "stub": ""
    },
    "convertbeagle": {
        "name_process": "convertbeagle",
        "string_process": "\nprocess convertbeagle{\n input :\n   set file(filevcf), file(filevcfidx) from file_vcf_beaglephase\n publishDir \"${params.output_dir}/beagle/\", overwrite:true, mode:'copy'\n output :\n   file(\"${headout}\")\n script :\n   headout=\"${params.output}_phasebeagle.bref3\"\n   \"\"\"\n   ${params.bin_bref3}  $filevcf > $headout\n   \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "   headout=\"${params.output}_phasebeagle.bref3\"\n   \"\"\"\n   ${params.bin_bref3}  $filevcf > $headout\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_beaglephase"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "shapeit_phase": {
        "name_process": "shapeit_phase",
        "string_process": "\nprocess shapeit_phase{\n cpus params.cpus_other\n input :\n   file(genet_map) from gm_ch2\n   set file(filevcf), file(filevcfidx) from file_vcf_filter_index_norm\n publishDir \"${params.output_dir}/shapeit/init/\", overwrite:true, mode:'copy'\n output :\n   file(\"${headout}*\") \n   set file(\"${headout}_i.haps\"), file(\"${headout}_i.sample\") into (shapeit_init_1, shapeit_init_2)\n script :\n   headout=\"${params.output}_phaseshapeit\"\n   \"\"\"\n    awk '{print \\$2\" \"\\$3\" \"\\$4}' $genet_map > tmpmap.txt\n   ${params.bin_shapeit} -V $filevcf --input-map tmpmap.txt --input-thr ${params.thr_shapeit} --output-max $headout\"_i.haps\" $headout\"_i.sample\" --thread ${params.cpus_other}  --force\n\n   \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "   headout=\"${params.output}_phaseshapeit\"\n   \"\"\"\n    awk '{print \\$2\" \"\\$3\" \"\\$4}' $genet_map > tmpmap.txt\n   ${params.bin_shapeit} -V $filevcf --input-map tmpmap.txt --input-thr ${params.thr_shapeit} --output-max $headout\"_i.haps\" $headout\"_i.sample\" --thread ${params.cpus_other}  --force\n\n   \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gm_ch2",
            "file_vcf_filter_index_norm"
        ],
        "nb_inputs": 2,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "cpus params.cpus_other"
        ],
        "when": "",
        "stub": ""
    },
    "shapeit_convert_haps": {
        "name_process": "shapeit_convert_haps",
        "string_process": "\nprocess shapeit_convert_haps{\n input :\n  set file(haps), file(sample) from shapeit_init_1\n publishDir \"${params.output_dir}/shapeit/format/\", overwrite:true, mode:'copy'\n output :\n  file(\"$headout*\")\n script : \n   headout=\"${params.output}_phaseshapeit\"\n   \"\"\"\n   ${params.bin_shapeit} -convert --input-haps  $haps $sample --output-ref  $headout\".haps\" $headout\".leg\" $headout\".sample\"\n   \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "   headout=\"${params.output}_phaseshapeit\"\n   \"\"\"\n   ${params.bin_shapeit} -convert --input-haps  $haps $sample --output-ref  $headout\".haps\" $headout\".leg\" $headout\".sample\"\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "shapeit_init_1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "shapeit_convert_vcf": {
        "name_process": "shapeit_convert_vcf",
        "string_process": "\nprocess shapeit_convert_vcf{\n input :\n  set file(haps), file(sample) from shapeit_init_2\n publishDir \"${params.output_dir}/shapeit/vcf/\", overwrite:true, mode:'copy'\n output :\n  file(\"$headout*\")\n  file(\"${headout}.phased.vcf\") into shapeit_vcf\n script :\n   headout=\"${params.output}_phaseshapeit\"\n   \"\"\"\n   ${params.bin_shapeit} -convert \\\n        --input-haps  $haps $sample \\\n        --output-vcf $headout\".phased.vcf\"\n   \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "   headout=\"${params.output}_phaseshapeit\"\n   \"\"\"\n   ${params.bin_shapeit} -convert \\\n        --input-haps  $haps $sample \\\n        --output-vcf $headout\".phased.vcf\"\n   \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "shapeit_init_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "shapeit_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "shapeit_reagg_vcf": {
        "name_process": "shapeit_reagg_vcf",
        "string_process": "\nprocess shapeit_reagg_vcf{\n  memory params.memory_other\n  input :\n    file(vcf) from shapeit_vcf\n  publishDir \"${params.output_dir}/shapeit/vcf/\", overwrite:true, mode:'copy'\n  output :\n     file(\"${headout}_reag.phased.vcf.gz\") \n  script :\n   headout=\"${params.output}_phaseshapeit\"\n   \"\"\" \n   ${params.bin_bcftools} norm -m +any  $vcf -Oz -o $headout\"_reag.phased.vcf.gz\"\n   \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "   headout=\"${params.output}_phaseshapeit\"\n   \"\"\" \n   ${params.bin_bcftools} norm -m +any  $vcf -Oz -o $headout\"_reag.phased.vcf.gz\"\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "shapeit_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_other"
        ],
        "when": "",
        "stub": ""
    },
    "eagle_phase": {
        "name_process": "eagle_phase",
        "string_process": "\nprocess eagle_phase{\n   input :\n     set file(filevcf), file(filevcfidx) from file_vcf_filter_index_norm_3\n     file(map) from gm_ch3\n    publishDir \"${params.output_dir}/eagle/vcf/\", overwrite:true, mode:'copy'\n    output :\n      file(\"${file_out}*\")\n      file(\"${file_out}.vcf.gz\") into eagle_vcf\n    script :\n                                                         \n                                                  \n                                                  \n      file_out=\"${params.output}_prephase_eagle\"\n      \"\"\"\n        ${params.bin_eagle}\\\n                --vcf=${filevcf} \\\n                --geneticMapFile=${map} \\\n                --vcfOutFormat=z \\\n                --outPrefix=${file_out} 2>&1 | tee ${file_out}.log\n      \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "      file_out=\"${params.output}_prephase_eagle\"\n      \"\"\"\n        ${params.bin_eagle}\\\n                --vcf=${filevcf} \\\n                --geneticMapFile=${map} \\\n                --vcfOutFormat=z \\\n                --outPrefix=${file_out} 2>&1 | tee ${file_out}.log\n      \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter_index_norm_3",
            "gm_ch3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "eagle_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "eagle_reagg_vcf": {
        "name_process": "eagle_reagg_vcf",
        "string_process": "\nprocess eagle_reagg_vcf{\n  memory params.memory_other\n  input :\n    file(vcf) from eagle_vcf\n  publishDir \"${params.output_dir}/eagle/vcf/\", overwrite:true, mode:'copy'\n  output :\n     file(\"${headout}_reag.phased.vcf.gz\") \n  script :\n   headout=\"${params.output}_phaseeagle\"\n   \"\"\" \n   #reaggrvcf.py --vcfi  $vcf --vcfout $headout\"_reag.phased.vcf\"\n   ${params.bin_bcftools} norm -m +any  $vcf -Oz -o $headout\"_reag.phased.vcf.gz\"\n   \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "   headout=\"${params.output}_phaseeagle\"\n   \"\"\" \n   #reaggrvcf.py --vcfi  $vcf --vcfout $headout\"_reag.phased.vcf\"\n   ${params.bin_bcftools} norm -m +any  $vcf -Oz -o $headout\"_reag.phased.vcf.gz\"\n   \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "eagle_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_other"
        ],
        "when": "",
        "stub": ""
    },
    "normgvcf": {
        "name_process": "normgvcf",
        "string_process": "\nprocess normgvcf{\n     memory params.memory_vcftools\n     time params.big_time\n     input :\n       file(file_vcf) from file_vcf_filter\n      output :\n       set file(out_file), file(\"${out_file}.csi\") into file_vcf_norm\n      script : \n       out_file=\"${params.output}_norm.vcf.gz\"\n       \"\"\"\n       ${params.bin_bcftools} norm -m -any $file_vcf -Oz -o $out_file\n       ${params.bin_bcftools}  index $out_file\n       \"\"\" \n}",
        "nb_lignes_process": 13,
        "string_script": "       out_file=\"${params.output}_norm.vcf.gz\"\n       \"\"\"\n       ${params.bin_bcftools} norm -m -any $file_vcf -Oz -o $out_file\n       ${params.bin_bcftools}  index $out_file\n       \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_vcf_filter"
        ],
        "nb_inputs": 1,
        "outputs": [
            "file_vcf_norm"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_vcftools",
            "time params.big_time"
        ],
        "when": "",
        "stub": ""
    },
    "convertref": {
        "name_process": "convertref",
        "string_process": " process convertref{\n  input :\n   file(vcf) from vcf_ref\n  output :\n   file(\"${headout}.hap.gz\") into haps_ref_file\n   file(\"${headout}.legend.gz\") into leg_ref_file\n  script :\n   headout=\"${params.output}_phas\"\n   \"\"\"\n   ${params.bin_bcftools} norm -m -any  $vcf -o tmp.vcf\n    vcf2impute_legend_haps.pl -vcf tmp.vcf -leghap $headout -chr ${params.chr} #-start ${params.from_bp} -end ${params.to_bp}\n   \"\"\"\n }",
        "nb_lignes_process": 11,
        "string_script": "   headout=\"${params.output}_phas\"\n   \"\"\"\n   ${params.bin_bcftools} norm -m -any  $vcf -o tmp.vcf\n    vcf2impute_legend_haps.pl -vcf tmp.vcf -leghap $headout -chr ${params.chr} #-start ${params.from_bp} -end ${params.to_bp}\n   \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_ref"
        ],
        "nb_inputs": 1,
        "outputs": [
            "haps_ref_file",
            "leg_ref_file"
        ],
        "nb_outputs": 2,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "impute2": {
        "name_process": "impute2",
        "string_process": "\nprocess impute2{\n  memory params.memory_impute2\n  input :\n     set file(haps_haps), file(haps_sampe) from file_haps_prephase\n     file(maps) from genetic_map_ch_2\n     file(haps_ref) from haps_ref_file\n     file(leg_ref) from leg_ref_file\n  publishDir \"${params.output_dir}/impute2/intial\", overwrite:true, mode:'copy'\n  output :\n    file(\"$headout2*\")\n    set file(\"${headout2}\"), file(haps_sampe) into file_impute2\n  script :\n    size=params.to_bp!=\"\"? \" -int ${params.from_bp} ${params.to_bp} \": \"\"\n    headout2=\"${params.output}_impute2.gen\"\n    \"\"\"\n    ${params.bin_impute2}  ${size} \\\n      -known_haps_g ${haps_haps} \\\n      -h $haps_ref \\\n      -l $leg_ref \\\n      -m $maps \\\n      -Ne ${params.effective_size} \\\n      -buffer ${params.buffer_kb} \\\n      -o $headout2\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    size=params.to_bp!=\"\"? \" -int ${params.from_bp} ${params.to_bp} \": \"\"\n    headout2=\"${params.output}_impute2.gen\"\n    \"\"\"\n    ${params.bin_impute2}  ${size} \\\n      -known_haps_g ${haps_haps} \\\n      -h $haps_ref \\\n      -l $leg_ref \\\n      -m $maps \\\n      -Ne ${params.effective_size} \\\n      -buffer ${params.buffer_kb} \\\n      -o $headout2\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_haps_prephase",
            "genetic_map_ch_2",
            "haps_ref_file",
            "leg_ref_file"
        ],
        "nb_inputs": 4,
        "outputs": [
            "file_impute2"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "memory params.memory_impute2"
        ],
        "when": "",
        "stub": ""
    },
    "format_impute2": {
        "name_process": "format_impute2",
        "string_process": "\nprocess format_impute2{\n  input :\n     set file(genfile), file(sample) from file_impute2\n  publishDir \"${params.output_dir}/impute2/\", overwrite:true, mode:'copy'\n  output :\n      file(\"$headout3*\")\n      file(\"${headout3}.vcf.gz\") into (vcf_impute2gz, vcf_impute2gz_2)\n  script :\n    headout3=\"${params.output}_impute2\"\n    chro=params.chr\n    \"\"\"\n    awk -v chro=$chro '{\\$2=chro\":\"\\$3\"_\"\\$4\"_\"\\$5; print}' $genfile > $headout3\"_2.impute2\"\n    ${params.bin_bcftools} convert --gensample2vcf $headout3\"_2.impute2\",$sample -o $headout3\".vcf\"\n    ${params.bin_bcftools} sort $headout3\".vcf\"  -Oz -o  $headout3\".vcf.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    headout3=\"${params.output}_impute2\"\n    chro=params.chr\n    \"\"\"\n    awk -v chro=$chro '{\\$2=chro\":\"\\$3\"_\"\\$4\"_\"\\$5; print}' $genfile > $headout3\"_2.impute2\"\n    ${params.bin_bcftools} convert --gensample2vcf $headout3\"_2.impute2\",$sample -o $headout3\".vcf\"\n    ${params.bin_bcftools} sort $headout3\".vcf\"  -Oz -o  $headout3\".vcf.gz\"\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_impute2"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "reag_imp2": {
        "name_process": "reag_imp2",
        "string_process": "\nprocess reag_imp2{\n input:\n   file(impvcfgz) from vcf_impute2gz\n publishDir \"${params.output_dir}/impute2/\", overwrite:true, mode:'copy'\n output :\n    file(\"$headout\")\n script :\n   headout=\"${params.output}_impute2_reag.vcf.gz\"\n   \"\"\"\n   ${params.bin_bcftools} norm -m +any  $impvcfgz -Oz -o $headout\n   \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "   headout=\"${params.output}_impute2_reag.vcf.gz\"\n   \"\"\"\n   ${params.bin_bcftools} norm -m +any  $impvcfgz -Oz -o $headout\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_impute2gz"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "postphase_shapeit": {
        "name_process": "postphase_shapeit",
        "string_process": " process postphase_shapeit{\n  cpus params.cpus_other\n  input :\n      file(file_vcf)  from vcf_impute2gz_2\n      file(genetic_map) from genetic_map_ch_3\n  publishDir \"${params.output_dir}/impute2/postphase\", overwrite:true, mode:'copy'\n  output :\n      file(\"${fileout}*\")\n      file(\"${fileout}_reagr.phased.vcf.gz\") into vcfpostphase\n  script :\n      chro=params.chr!=\"\"? \"--chrom=${params.chr}\" : \"\"\n      begin=params.to_bp!=\"\"? \"--bpStart=${params.from_bp}\" : \"\"\n      end=params.from_bp!=\"\"? \"--bpEnd=${params.to_bp}\" : \"\"\n      fileout=\"${params.output}_impute2\"\n      \"\"\"\n      ${params.bin_shapeit} \\\n       -V $file_vcf\\\n       --input-map $genetic_map \\\n       --input-thr ${params.thr_shapeit} \\\n       --output-max $fileout\".haps\" $fileout\".sample\" \\\n       --thread ${params.cpus_other} \\\n       --effective-size ${params.effective_size} \\\n       --output-log ${fileout}\".log\" \\\n       --force\n        ${params.bin_shapeit} -convert \\\n        --input-haps  $fileout\".haps\" $fileout\".sample\" \\\n        --output-vcf $fileout\".phased.vcf\"\n        ${params.bin_bcftools} norm -m +any  $fileout\".phased.vcf\" -Oz -o $fileout\"_reagr.phased.vcf.gz\"\n      \"\"\"\n }",
        "nb_lignes_process": 28,
        "string_script": "      chro=params.chr!=\"\"? \"--chrom=${params.chr}\" : \"\"\n      begin=params.to_bp!=\"\"? \"--bpStart=${params.from_bp}\" : \"\"\n      end=params.from_bp!=\"\"? \"--bpEnd=${params.to_bp}\" : \"\"\n      fileout=\"${params.output}_impute2\"\n      \"\"\"\n      ${params.bin_shapeit} \\\n       -V $file_vcf\\\n       --input-map $genetic_map \\\n       --input-thr ${params.thr_shapeit} \\\n       --output-max $fileout\".haps\" $fileout\".sample\" \\\n       --thread ${params.cpus_other} \\\n       --effective-size ${params.effective_size} \\\n       --output-log ${fileout}\".log\" \\\n       --force\n        ${params.bin_shapeit} -convert \\\n        --input-haps  $fileout\".haps\" $fileout\".sample\" \\\n        --output-vcf $fileout\".phased.vcf\"\n        ${params.bin_bcftools} norm -m +any  $fileout\".phased.vcf\" -Oz -o $fileout\"_reagr.phased.vcf.gz\"\n      \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_impute2gz_2",
            "genetic_map_ch_3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "vcfpostphase"
        ],
        "nb_outputs": 1,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [
            "cpus params.cpus_other"
        ],
        "when": "",
        "stub": ""
    },
    "reag_imp_postphase": {
        "name_process": "reag_imp_postphase",
        "string_process": "\nprocess reag_imp_postphase{\n input:\n   file(impvcfgz) from vcfpostphase\n publishDir \"${params.output_dir}/impute2/postphase\", overwrite:true, mode:'copy'\n output :\n    file(\"$headout\")\n script :\n   headout=\"${params.output}_impute2_reag.vcf.gz\"\n   \"\"\"\n   ${params.bin_bcftools} norm -m +any  $impvcfgz -Oz -o $headout\n   \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "   headout=\"${params.output}_impute2_reag.vcf.gz\"\n   \"\"\"\n   ${params.bin_bcftools} norm -m +any  $impvcfgz -Oz -o $headout\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfpostphase"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jeantristanb__h3abionetimp_spezone",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
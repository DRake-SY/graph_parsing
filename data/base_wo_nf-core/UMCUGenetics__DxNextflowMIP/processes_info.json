{
    "MipsTrimDedup": {
        "name_process": "MipsTrimDedup",
        "string_process": "\nprocess MipsTrimDedup {\n                                           \n    tag {\"MIPS TrimDedup ${sample_id} - ${rg_id}\"}\n    label 'MIPS_1_0_1'\n    label 'MIPS_1_0_1_TrimDedup'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(r1_fastqs), path(r2_fastqs))\n\n    output:\n        tuple(sample_id, rg_id, path('*_LMergedTrimmedDedup_R1_*.fastq.gz'), path('*_LMergedTrimmedDedup_R2_*.fastq.gz'), emit: fastq_files)\n\n    script:\n        def r1_args = r1_fastqs.collect{ \"$it\" }.join(\" \")\n        def r2_args = r2_fastqs.collect{ \"$it\" }.join(\" \")\n\n        rg_id = \"${sample_id}_MergedTrimmedDedup\"\n\n        \"\"\"\n        python ${params.mips_trim_dedup_path}/mips_trim_dedup.py -d ${params.dxtracks_path}/${params.mips_design_file}  -l ${params.mips_uuid_length} -ur ${params.mips_uuid_read} -r1 ${r1_args} -r2 ${r2_args}\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        def r1_args = r1_fastqs.collect{ \"$it\" }.join(\" \")\n        def r2_args = r2_fastqs.collect{ \"$it\" }.join(\" \")\n\n        rg_id = \"${sample_id}_MergedTrimmedDedup\"\n\n        \"\"\"\n        python ${params.mips_trim_dedup_path}/mips_trim_dedup.py -d ${params.dxtracks_path}/${params.mips_design_file}  -l ${params.mips_uuid_length} -ur ${params.mips_uuid_read} -r1 ${r1_args} -r2 ${r2_args}\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "r1_fastqs",
            "r2_fastqs",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowMIP",
        "directive": [
            "tag {\"MIPS TrimDedup ${sample_id} - ${rg_id}\"}",
            "label 'MIPS_1_0_1'",
            "label 'MIPS_1_0_1_TrimDedup' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CheckFingerprintVCF": {
        "name_process": "CheckFingerprintVCF",
        "string_process": "\nprocess CheckFingerprintVCF {\n                                                    \n    tag {\"CheckFingerprintVCF\"}\n    label 'CheckFingerprintVCF'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(vcf_files)\n\n    output:\n        tuple(path('disapprovedVCFs'), path('approvedVCFs/*.vcf'), emit: vcf_files)\n        path('logbook.txt', emit: logbook)\n\n\n    script:\n        \"\"\"\n        python ${baseDir}/assets/check_fingerprint_vcf.py ${vcf_files} > logbook.txt\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        python ${baseDir}/assets/check_fingerprint_vcf.py ${vcf_files} > logbook.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowMIP",
        "directive": [
            "tag {\"CheckFingerprintVCF\"}",
            "label 'CheckFingerprintVCF' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "VersionLog": {
        "name_process": "VersionLog",
        "string_process": "\nprocess VersionLog {\n                                                \n    tag {\"VersionLog ${analysis_id}\"}\n    label 'VersionLog'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n    cache = false                                                                          \n\n    output:\n        path('repository_version.log', emit: log_file)\n\n    script:\n        \"\"\"\n        echo 'DxNextflowMIP' > repository_version.log\n        git --git-dir=${workflow.projectDir}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n\n        echo 'Dx_tracks' >> repository_version.log\n        git --git-dir=${params.dxtracks_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n\n        echo 'MipsTrimDedup' >> repository_version.log\n        git --git-dir=${params.mips_trim_dedup_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        echo 'DxNextflowMIP' > repository_version.log\n        git --git-dir=${workflow.projectDir}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n\n        echo 'Dx_tracks' >> repository_version.log\n        git --git-dir=${params.dxtracks_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n\n        echo 'MipsTrimDedup' >> repository_version.log\n        git --git-dir=${params.mips_trim_dedup_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowMIP",
        "directive": [
            "tag {\"VersionLog ${analysis_id}\"}",
            "label 'VersionLog' shell = ['/bin/bash', '-eo', 'pipefail']",
            "cache = false"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    \n                            \n    publishDir params.out, pattern: \"*.html\", mode: 'copy', overwrite: true\n\n    input:\n    set val(name), file(fastq) from fastq_files\n \n    output:\n    file \"*_fastqc.{zip,html}\" into qc_files, qc_files1\n\n    \"\"\"\n    fastqc -q ${fastq}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    fastqc -q ${fastq}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "qc_files",
            "qc_files1"
        ],
        "nb_outputs": 2,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, pattern: \"*.html\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    file reports from qc_files.collect().ifEmpty([])\n\n    output:\n    path \"multiqc_report.html\" into multiqc_output\n\n    \"\"\"\n    multiqc $reports\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    multiqc $reports\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "qc_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "multiqc_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "mash_screen_genome": {
        "name_process": "mash_screen_genome",
        "string_process": "\nprocess mash_screen_genome {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n    memory '8 GB'\n\n    input:\n    tuple val(name), file(fastq) from fastq_files4\n\n    output:\n    tuple val(name), path(\"*_pathogen_id.out\") into mash_screen_genome_out\n\n    \"\"\"\n    cat ${fastq} | mash screen -w ${mash_genome_db} - | sort -gr > ${name}_pathogen_id.out\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    cat ${fastq} | mash screen -w ${mash_genome_db} - | sort -gr > ${name}_pathogen_id.out\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Mash"
        ],
        "tools_url": [
            "https://bio.tools/mash"
        ],
        "tools_dico": [
            {
                "name": "Mash",
                "uri": "https://bio.tools/mash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast genome and metagenome distance estimation using MinHash.",
                "homepage": "https://github.com/marbl/mash"
            }
        ],
        "inputs": [
            "fastq_files4"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mash_screen_genome_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true",
            "memory '8 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "tabulate_mash_genome": {
        "name_process": "tabulate_mash_genome",
        "string_process": "\nprocess tabulate_mash_genome {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(table) from mash_screen_genome_out\n\n    output:\n    path \"*_pathogen_id.out1\" into tabulate_mash_genome_out\n\n    \"\"\"\n    python3 ${mash_parser} -i ${table} -o ${name}_pathogen_id.out1\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python3 ${mash_parser} -i ${table} -o ${name}_pathogen_id.out1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mash_screen_genome_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tabulate_mash_genome_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "kraken_fastq": {
        "name_process": "kraken_fastq",
        "string_process": "\nprocess kraken_fastq {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n    errorStrategy  { task.attempt <= maxRetries  ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    memory { 8.GB * task.attempt * task.attempt }\n\n\n    input:\n    tuple val(name), file(fastq) from fastq_files7\n\n    output:\n    tuple val(name), file(\"*.{summary,output}\") into kraken_fastq_out\n\n    \"\"\"\n    kraken2 --db ${kraken_db} --paired ${fastq} --report ${name}_reads.summary --output ${name}_reads.output\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    kraken2 --db ${kraken_db} --paired ${fastq} --report ${name}_reads.summary --output ${name}_reads.output\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "fastq_files7"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kraken_fastq_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true",
            "errorStrategy { task.attempt <= maxRetries ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "memory { 8.GB * task.attempt * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "krona_fastq": {
        "name_process": "krona_fastq",
        "string_process": "\nprocess krona_fastq {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(kraken_result) from kraken_fastq_out\n\n    output:\n    path \"*.html\" into krona_fastq_output\n\n    \"\"\"\n    ktImportTaxonomy -q 2 -t 3 ${kraken_result[0]} -o ${name}_read.html\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    ktImportTaxonomy -q 2 -t 3 ${kraken_result[0]} -o ${name}_read.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken_fastq_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "krona_fastq_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "kma_index_abr": {
        "name_process": "kma_index_abr",
        "string_process": "\nprocess kma_index_abr {\n\n                            \n                                            \n\n    output:\n    path \"abr*\" into kma_index_abr_out\n\n    \"\"\"\n    kma index -i ${abr_ref} -o abr\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    kma index -i ${abr_ref} -o abr\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kmacs"
        ],
        "tools_url": [
            "https://bio.tools/kmacs"
        ],
        "tools_dico": [
            {
                "name": "kmacs",
                "uri": "https://bio.tools/kmacs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "New approach to alignment-free sequence comparison. While most alignment-free methods rely on exact word matches, it uses a distance measure based on inexact substing matches.",
                "homepage": "http://kmacs.gobics.de/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "kma_index_abr_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "kma_map_abr": {
        "name_process": "kma_map_abr",
        "string_process": "\nprocess kma_map_abr {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    path index from kma_index_abr_out\n    tuple val(name), file(fastq) from fastq_files6\n\n    output:\n    tuple val(name), file(\"*_abr*\") into kma_abr_out\n\n                                                                           \n\n\n    \"\"\"\n    kma -ipe ${fastq} -o ${name}_abr -t_db abr -1t1\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    kma -ipe ${fastq} -o ${name}_abr -t_db abr -1t1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kmacs"
        ],
        "tools_url": [
            "https://bio.tools/kmacs"
        ],
        "tools_dico": [
            {
                "name": "kmacs",
                "uri": "https://bio.tools/kmacs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "New approach to alignment-free sequence comparison. While most alignment-free methods rely on exact word matches, it uses a distance measure based on inexact substing matches.",
                "homepage": "http://kmacs.gobics.de/"
            }
        ],
        "inputs": [
            "kma_index_abr_out",
            "fastq_files6"
        ],
        "nb_inputs": 2,
        "outputs": [
            "kma_abr_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "tabulate_kma_abr": {
        "name_process": "tabulate_kma_abr",
        "string_process": "\nprocess tabulate_kma_abr {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(table) from kma_abr_out\n\n    output:\n    path \"*_abr.out1\" into tabulate_kma_abr_out\n\n    \"\"\"\n    python3 ${kma_parser} -i ${table[3]} -o ${name}_abr.out1\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python3 ${kma_parser} -i ${table[3]} -o ${name}_abr.out1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kma_abr_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tabulate_kma_abr_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "kma_index_plasmid": {
        "name_process": "kma_index_plasmid",
        "string_process": "\nprocess kma_index_plasmid {\n\n                            \n                                            \n\n    output:\n    path \"plasmid*\" into kma_index_plasmid_out\n\n    \"\"\"\n    kma index -i ${plasmid_db} -o plasmid\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    kma index -i ${plasmid_db} -o plasmid\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kmacs"
        ],
        "tools_url": [
            "https://bio.tools/kmacs"
        ],
        "tools_dico": [
            {
                "name": "kmacs",
                "uri": "https://bio.tools/kmacs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "New approach to alignment-free sequence comparison. While most alignment-free methods rely on exact word matches, it uses a distance measure based on inexact substing matches.",
                "homepage": "http://kmacs.gobics.de/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "kma_index_plasmid_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "kma_map_plasmid": {
        "name_process": "kma_map_plasmid",
        "string_process": "\nprocess kma_map_plasmid {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    path index from kma_index_plasmid_out\n    tuple val(name), file(fastq) from fastq_files2\n\n    output:\n    tuple val(name), file(\"*_plasmid*\") into kma_plasmid_out\n\n\n    \"\"\"\n    kma -ipe ${fastq} -o ${name}_plasmid -t_db plasmid -1t1\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    kma -ipe ${fastq} -o ${name}_plasmid -t_db plasmid -1t1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kmacs"
        ],
        "tools_url": [
            "https://bio.tools/kmacs"
        ],
        "tools_dico": [
            {
                "name": "kmacs",
                "uri": "https://bio.tools/kmacs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "New approach to alignment-free sequence comparison. While most alignment-free methods rely on exact word matches, it uses a distance measure based on inexact substing matches.",
                "homepage": "http://kmacs.gobics.de/"
            }
        ],
        "inputs": [
            "kma_index_plasmid_out",
            "fastq_files2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "kma_plasmid_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "tabulate_kma_plasmid": {
        "name_process": "tabulate_kma_plasmid",
        "string_process": "\nprocess tabulate_kma_plasmid {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(table) from kma_plasmid_out\n\n    output:\n    path \"*_plasmid.out1\" into tabulate_kma_plasmid_out\n\n    \"\"\"\n    python3 ${kma_parser} -i ${table[3]} -o ${name}_plasmid.out1\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python3 ${kma_parser} -i ${table[3]} -o ${name}_plasmid.out1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kma_plasmid_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tabulate_kma_plasmid_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "adapter_trimming": {
        "name_process": "adapter_trimming",
        "string_process": "\nprocess adapter_trimming {\n\n                            \n                                                          \n\n    input:\n    tuple val(name), file(fastq) from fastq_files3\n\n    output:\n    tuple val(name), file(\"*_clean{1,2}.fq.gz\") into trimmed_fastq\n\n    \"\"\"\n    bbduk.sh -Xmx1g in1=${fastq[0]} in2=${fastq[1]} out1=int1.fq.gz out2=int2.fq.gz ref=${phix} k=31 hdist=1 t=1\n    bbduk.sh -Xmx1g in1=int1.fq.gz in2=int2.fq.gz out1=${name}_clean1.fq.gz out2=${name}_clean2.fq.gz ref=${adapters} ktrim=r k=23 mink=11 hdist=1 t=1 tpe tbo\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    bbduk.sh -Xmx1g in1=${fastq[0]} in2=${fastq[1]} out1=int1.fq.gz out2=int2.fq.gz ref=${phix} k=31 hdist=1 t=1\n    bbduk.sh -Xmx1g in1=int1.fq.gz in2=int2.fq.gz out1=${name}_clean1.fq.gz out2=${name}_clean2.fq.gz ref=${adapters} ktrim=r k=23 mink=11 hdist=1 t=1 tpe tbo\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_files3"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "assembly": {
        "name_process": "assembly",
        "string_process": "\nprocess assembly {\n\n                            \n                                                          \n\n    errorStrategy  { task.attempt <= maxRetries  ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    memory { 4.GB * params.thread * task.attempt * task.attempt }\n    cpus params.thread\n\n    input:\n    tuple val(name), file(fastq) from trimmed_fastq\n\n    output:\n    tuple val(name), path(\"*_scaffolds.fasta\") into assembly_output\n\n    \"\"\"\n    spades.py -1 ${fastq[0]} -2 ${fastq[1]} -o ${name} -t ${params.thread} -m \\$((4 * $params.thread * $task.attempt * $task.attempt))\n    cp ${name}/scaffolds.fasta ${name}_scaffolds.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    spades.py -1 ${fastq[0]} -2 ${fastq[1]} -o ${name} -t ${params.thread} -m \\$((4 * $params.thread * $task.attempt * $task.attempt))\n    cp ${name}/scaffolds.fasta ${name}_scaffolds.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "errorStrategy { task.attempt <= maxRetries ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "memory { 4.GB * params.thread * task.attempt * task.attempt }",
            "cpus params.thread"
        ],
        "when": "",
        "stub": ""
    },
    "assembly_size_filter": {
        "name_process": "assembly_size_filter",
        "string_process": "\nprocess assembly_size_filter {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(assembly) from assembly_output\n\n    output:\n    tuple val(name), path(\"*_scaffolds_filtered.fasta\") into assembly_filter_output, assembly_filter_output2, assembly_filter_output3, assembly_filter_output4, assembly_filter_output5\n\n    \"\"\"\n    reformat.sh in=${assembly} out=${assembly.simpleName}_filtered.fasta minlength=${params.sizefilter}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    reformat.sh in=${assembly} out=${assembly.simpleName}_filtered.fasta minlength=${params.sizefilter}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "assembly_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_filter_output",
            "assembly_filter_output2",
            "assembly_filter_output3",
            "assembly_filter_output4",
            "assembly_filter_output5"
        ],
        "nb_outputs": 5,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "kraken_assembly": {
        "name_process": "kraken_assembly",
        "string_process": "\nprocess kraken_assembly {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n    errorStrategy  { task.attempt <= maxRetries  ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    memory { 8.GB * task.attempt * task.attempt }\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output5\n\n    output:\n    tuple val(name), file(\"*.{summary,output}\") into kraken_assembly_out\n\n    \"\"\"\n    kraken2 --db ${kraken_db} ${assembly} --memory-mapping --report ${name}_assembly.summary --output ${name}_assembly.output\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    kraken2 --db ${kraken_db} ${assembly} --memory-mapping --report ${name}_assembly.summary --output ${name}_assembly.output\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "assembly_filter_output5"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kraken_assembly_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true",
            "errorStrategy { task.attempt <= maxRetries ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "memory { 8.GB * task.attempt * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "krona_assembly": {
        "name_process": "krona_assembly",
        "string_process": "\nprocess krona_assembly {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(kraken_result) from kraken_assembly_out\n\n    output:\n    path \"*.html\" into krona_assembly_output\n\n    \"\"\"\n    ktImportTaxonomy -q 2 -t 3 ${kraken_result[0]} -o ${name}_assembly.html\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    ktImportTaxonomy -q 2 -t 3 ${kraken_result[0]} -o ${name}_assembly.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken_assembly_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "krona_assembly_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "mlst": {
        "name_process": "mlst",
        "string_process": "\nprocess mlst {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output4\n\n    output:\n    tuple val(name), path(\"*.mlst\") into mlst_output\n\n    \"\"\"\n    mlst ${assembly} > ${name}.mlst\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    mlst ${assembly} > ${name}.mlst\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MLST"
        ],
        "tools_url": [
            "https://bio.tools/mlst"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            }
        ],
        "inputs": [
            "assembly_filter_output4"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mlst_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "prokka": {
        "name_process": "prokka",
        "string_process": "\nprocess prokka {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n    \n    cpus params.thread\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output\n\n    output:\n    tuple val(name), path(\"*\") into prokka_output\n\n    \"\"\"\n    prokka --cpus ${params.thread} --outdir ${name}_prokka --prefix ${name} ${assembly}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    prokka --cpus ${params.thread} --outdir ${name}_prokka --prefix ${name} ${assembly}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "assembly_filter_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "prokka_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true",
            "cpus params.thread"
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output2\n\n    output:\n    path(\"*\") into quast_output\n\n    \"\"\"\n    quast ${assembly} -o ${name}_quast\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    quast ${assembly} -o ${name}_quast\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QUAST"
        ],
        "tools_url": [
            "https://bio.tools/quast"
        ],
        "tools_dico": [
            {
                "name": "QUAST",
                "uri": "https://bio.tools/quast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "QUAST stands for QUality ASsessment Tool.  \nIt evaluates a quality of genome assemblies by computing various metrics and providing nice reports.",
                "homepage": "http://quast.sourceforge.net/quast"
            }
        ],
        "inputs": [
            "assembly_filter_output2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "quast_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n\n    errorStrategy 'ignore'\n    publishDir params.out, mode: 'copy', overwrite: true\n    memory '8 GB'\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output3\n\n    output:\n    path(\"*/short_summary*.txt\") into busco_output\n\n    \"\"\"\n    busco --auto-lineage-prok -f -m geno -o ${name}_busco -i ${assembly} -c 1\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    busco --auto-lineage-prok -f -m geno -o ${name}_busco -i ${assembly} -c 1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "assembly_filter_output3"
        ],
        "nb_inputs": 1,
        "outputs": [
            "busco_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__quaisar_nf",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir params.out, mode: 'copy', overwrite: true",
            "memory '8 GB'"
        ],
        "when": "",
        "stub": ""
    }
}
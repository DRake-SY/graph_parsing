{
    "makeVg": {
        "name_process": "makeVg",
        "string_process": "\nprocess makeVg {\n    time '12h'\n    memory '100 GB'\n    cpus 40\n\n    publishDir \"$params.outdir/graphs\", mode: 'copy', pattern: \"graphs/*.vg\"\n\n    input:\n    file vcf from vcf_con_ch\n\n    output:\n    file \"graphs/*.vg\" into vgs_ch_gbwt, vgs_ch_gcsa, vgs_ch_xg\n    file \"*.tbi\" into vcf_index_ch\n    file \"*.vcf.gz\" into vcf_ch\n    file \"mapping\" into mapping_ch\n\n    script:\n    \"\"\"\nmodule load bcftools\ntabix -p vcf $vcf\n(seq 1 22; echo X; echo Y) | parallel -j 24 \"tabix -h $vcf chr{} > chr{}.vcf ; bgzip chr{}.vcf ; tabix chr{}.vcf.gz\"\n\nmkdir graphs\n(seq 1 22; echo X; echo Y) | parallel -j 6  \"vg construct -f -S -a -C -R chr{} -v chr{}.vcf.gz -r $params.ref -t 1 -m 32 > graphs/chr{}.vg\"\nvg ids -m mapping -j \\$(for i in \\$(seq 1 22; echo X; echo Y); do echo graphs/chr\\$i.vg; done)\n\"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\nmodule load bcftools\ntabix -p vcf $vcf\n(seq 1 22; echo X; echo Y) | parallel -j 24 \"tabix -h $vcf chr{} > chr{}.vcf ; bgzip chr{}.vcf ; tabix chr{}.vcf.gz\"\n\nmkdir graphs\n(seq 1 22; echo X; echo Y) | parallel -j 6  \"vg construct -f -S -a -C -R chr{} -v chr{}.vcf.gz -r $params.ref -t 1 -m 32 > graphs/chr{}.vg\"\nvg ids -m mapping -j \\$(for i in \\$(seq 1 22; echo X; echo Y); do echo graphs/chr\\$i.vg; done)\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "parallelGWAS",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "vcf_con_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vgs_ch_gbwt",
            "vgs_ch_gcsa",
            "vgs_ch_xg",
            "vcf_index_ch",
            "vcf_ch",
            "mapping_ch"
        ],
        "nb_outputs": 6,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "time '12h'",
            "memory '100 GB'",
            "cpus 40",
            "publishDir \"$params.outdir/graphs\", mode: 'copy', pattern: \"graphs/*.vg\""
        ],
        "when": "",
        "stub": ""
    },
    "indexGBWT": {
        "name_process": "indexGBWT",
        "string_process": " process indexGBWT {\n        cpus 40\n        time '2d'\n        memory '180 GB'\n        publishDir \"$params.outdir\", mode: 'copy', pattern: \"${params.genome}_index.gbwt\"\n\n        input:\n        file \"*\" from vgs_ch_gbwt.collect()\n        file \"*\" from vcf_ch.collect()\n        file \"*\" from vcf_index_ch.collect()\n\n        output:\n        file \"${params.genome}_index.gbwt\"\n        file \"*.gbwt\" into gbwt_ch\n\n        script:\n        \"\"\"\n        TMPDIR=${params.tmp}\n        (seq 1 22; echo X; echo Y) | parallel -j 8 \"touch -h chr{}.vcf.gz.tbi ; vg index -G chr{}.gbwt -v chr{}.vcf.gz chr{}.vg\"\n        vg gbwt -m -f -o ${params.genome}_index.gbwt chr*.gbwt\n        \"\"\"\n    }",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        TMPDIR=${params.tmp}\n        (seq 1 22; echo X; echo Y) | parallel -j 8 \"touch -h chr{}.vcf.gz.tbi ; vg index -G chr{}.gbwt -v chr{}.vcf.gz chr{}.vg\"\n        vg gbwt -m -f -o ${params.genome}_index.gbwt chr*.gbwt\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "parallelGWAS",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "vgs_ch_gbwt",
            "vcf_ch",
            "vcf_index_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "gbwt_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus 40",
            "time '2d'",
            "memory '180 GB'",
            "publishDir \"$params.outdir\", mode: 'copy', pattern: \"${params.genome}_index.gbwt\""
        ],
        "when": "",
        "stub": ""
    },
    "index_XG": {
        "name_process": "index_XG",
        "string_process": " process index_XG {\n        publishDir \"$params.outdir\", mode: 'copy', pattern: \"${params.genome}_index.xg\"\n        cpus 40\n        time '6h'\n        memory '180GB'\n\n        input:\n        file \"*\" from vgs_ch_xg.collect()\n\n        output:\n        file \"*.xg\"\n\n        script:\n        \"\"\"\n        TMPDIR=${params.tmp}\n        vg index -b \\${TMPDIR} -L -x ${params.genome}_index.xg *.vg\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        TMPDIR=${params.tmp}\n        vg index -b \\${TMPDIR} -L -x ${params.genome}_index.xg *.vg\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "vgs_ch_xg"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "publishDir \"$params.outdir\", mode: 'copy', pattern: \"${params.genome}_index.xg\"",
            "cpus 40",
            "time '6h'",
            "memory '180GB'"
        ],
        "when": "",
        "stub": ""
    },
    "indexGCSA": {
        "name_process": "indexGCSA",
        "string_process": " process indexGCSA {\n        cpus 40\n        time '2d'\n        memory '180 GB'\n        publishDir \"$params.outdir\", mode: 'copy'\n\n        input:\n        file \"*\" from vgs_ch_gcsa.collect()\n        file \"*\" from gbwt_ch.collect()\n        file mapping from mapping_ch\n\n        output:\n        file \"${params.genome}_index.gcsa\"\n        file \"${params.genome}_index.gcsa.lcp\"\n\n        script:\n        \"\"\"\n        mkdir graphs\n        TMPDIR=${params.tmp}\n        cp ${mapping} mapping.backup\n        for i in \\$(seq 1 22; echo X; echo Y); do\n        vg prune -a -m mapping.backup -u -g chr\\${i}.gbwt chr\\${i}.vg > graphs/chr\\${i}.pruned.vg\n        done\n\n        vg index -b \\${TMPDIR} -g ${params.genome}_index.gcsa -f mapping.backup graphs/*.pruned.vg\n        \"\"\"\n    }",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n        mkdir graphs\n        TMPDIR=${params.tmp}\n        cp ${mapping} mapping.backup\n        for i in \\$(seq 1 22; echo X; echo Y); do\n        vg prune -a -m mapping.backup -u -g chr\\${i}.gbwt chr\\${i}.vg > graphs/chr\\${i}.pruned.vg\n        done\n\n        vg index -b \\${TMPDIR} -g ${params.genome}_index.gcsa -f mapping.backup graphs/*.pruned.vg\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "vgs_ch_gcsa",
            "gbwt_ch",
            "mapping_ch"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus 40",
            "time '2d'",
            "memory '180 GB'",
            "publishDir \"$params.outdir\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "vgToJsonPop": {
        "name_process": "vgToJsonPop",
        "string_process": "\nprocess vgToJsonPop {\n    cpus = 40\n    memory '120 GB'\n    time '24h'\n    storeDir \"${params.storeDir}/json\"\n\n    input:\n    file \"graphs/*\" from linear_vg_ch.collect()\n\n    output:\n    file \"graphs/*\" into vg2json_ch\n\n    script:\n    \"\"\"\n    (seq 1 22; echo X; echo Y) | parallel -j 3 'vg view -j graphs/chr{}.vg > graphs/{}.json ; graph_peak_caller create_ob_graph graphs/{}.json ; vg stats -r graphs/chr{}.vg  | cut -f 2 > graphs/node_range_{}.txt'\n\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    (seq 1 22; echo X; echo Y) | parallel -j 3 'vg view -j graphs/chr{}.vg > graphs/{}.json ; graph_peak_caller create_ob_graph graphs/{}.json ; vg stats -r graphs/chr{}.vg  | cut -f 2 > graphs/node_range_{}.txt'\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "parallelGWAS",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "linear_vg_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vg2json_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '120 GB'",
            "time '24h'",
            "storeDir \"${params.storeDir}/json\""
        ],
        "when": "",
        "stub": ""
    },
    "vgToJsonRef": {
        "name_process": "vgToJsonRef",
        "string_process": "\nprocess vgToJsonRef {\n    cpus = 40\n    memory '120 GB'\n    time '24h'\n    storeDir \"${params.storeDir}\"\n\n    input:\n    file \"graphs/*\" from ref_linear_vg_ch.collect()\n\n    output:\n    file \"graphs/*\" into ref_vg2json_ch\n\n    script:\n    \"\"\"\n    (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 'vg view -Vj graphs/chr{}.vg > graphs/chr{}.json ; graph_peak_caller create_ob_graph graphs/chr{}.json ; vg stats -r graphs/chr{}.vg  | cut -f 2 > graphs/node_range_chr{}.txt'\n\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 'vg view -Vj graphs/chr{}.vg > graphs/chr{}.json ; graph_peak_caller create_ob_graph graphs/chr{}.json ; vg stats -r graphs/chr{}.vg  | cut -f 2 > graphs/node_range_chr{}.txt'\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "parallelGWAS",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "ref_linear_vg_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_vg2json_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '120 GB'",
            "time '24h'",
            "storeDir \"${params.storeDir}\""
        ],
        "when": "",
        "stub": ""
    },
    "linearPathsPop": {
        "name_process": "linearPathsPop",
        "string_process": "\nprocess linearPathsPop {\n    cpus = 40\n    memory '120 GB'\n    time '24 h'\n    storeDir \"${params.storeDir}/linear\"\n\n    input:\n    file \"graphs/*\" from vg2json_ch.collect()\n\n    output:\n    file \"graphs\" into control_linear_ch, treatment_linear_ch, peak_linear_ch\n\n    script:\n    \"\"\"\n   (seq 1 22; echo X; echo Y) | parallel -j 3 graph_peak_caller find_linear_path -g graphs/{}.nobg graphs/{}.json {} graphs/{}_linear_pathv2.interval\n\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n   (seq 1 22; echo X; echo Y) | parallel -j 3 graph_peak_caller find_linear_path -g graphs/{}.nobg graphs/{}.json {} graphs/{}_linear_pathv2.interval\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "vg2json_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "control_linear_ch",
            "treatment_linear_ch",
            "peak_linear_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '120 GB'",
            "time '24 h'",
            "storeDir \"${params.storeDir}/linear\""
        ],
        "when": "",
        "stub": ""
    },
    "linearPathsRef": {
        "name_process": "linearPathsRef",
        "string_process": "\nprocess linearPathsRef {\n    cpus = 40\n    memory '120 GB'\n    time '24 h'\n\n    input:\n    file \"graphs/*\" from ref_vg2json_ch.collect()\n\n    output:\n    file \"graphs\" into ref_control_linear_ch, ref_treatment_linear_ch, ref_peak_linear_ch\n\n    script:\n    \"\"\"\n     (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 graph_peak_caller find_linear_path -g graphs/chr{}.nobg graphs/chr{}.json chr{} graphs/chr{}_linear_pathv2.interval\n\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n     (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 graph_peak_caller find_linear_path -g graphs/chr{}.nobg graphs/chr{}.json chr{} graphs/chr{}_linear_pathv2.interval\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "ref_vg2json_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_control_linear_ch",
            "ref_treatment_linear_ch",
            "ref_peak_linear_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '120 GB'",
            "time '24 h'"
        ],
        "when": "",
        "stub": ""
    },
    "processGamRef": {
        "name_process": "processGamRef",
        "string_process": "\nprocess processGamRef {\n    cpus = 1\n    memory \"30 GB\"\n    time = \"12 h\"\n\n    input:\n    set file(gam), file(\"graphs\") from ref_gam_ch.combine(ref_treatment_linear_ch).view()\n\n    output:\n    set file(gam), file(\"json\") into ref_treatment_json_ch\n\n    script:\n    name = gam.getSimpleName()\n    \"\"\"\n    mkdir json\n    vg view -aj $gam > json/${name}_ref.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}_ref.json graphs/\n    rm json/${name}_ref.json\n\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    name = gam.getSimpleName()\n    \"\"\"\n    mkdir json\n    vg view -aj $gam > json/${name}_ref.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}_ref.json graphs/\n    rm json/${name}_ref.json\n\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "ref_gam_ch",
            "ref_treatment_linear_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ref_treatment_json_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 1",
            "memory \"30 GB\"",
            "time = \"12 h\""
        ],
        "when": "",
        "stub": ""
    },
    "processGamPop": {
        "name_process": "processGamPop",
        "string_process": "\nprocess processGamPop {\n    cpus = 1\n    memory \"30 GB\"\n    time = \"12 h\"\n\n    input:\n    set file(gam), file(\"graphs\") from gam_ch.combine(treatment_linear_ch).view()\n\n    output:\n    set file(gam), file(\"json\") into treatment_json_ch\n\n    script:\n    name = gam.getSimpleName()\n\n    \"\"\"\n    mkdir json\n    vg view -aj $gam > json/${name}.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}.json graphs/\n    rm json/${name}.json\n\"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    name = gam.getSimpleName()\n\n    \"\"\"\n    mkdir json\n    vg view -aj $gam > json/${name}.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}.json graphs/\n    rm json/${name}.json\n\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "gam_ch",
            "treatment_linear_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "treatment_json_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 1",
            "memory \"30 GB\"",
            "time = \"12 h\""
        ],
        "when": "",
        "stub": ""
    },
    "callPeaksPop": {
        "name_process": "callPeaksPop",
        "string_process": "\nprocess callPeaksPop{\n    cpus = 40\n    memory '170 GB'\n    time '12h'\n\n    publishDir \"$params.outDir/peaks\", mode: \"copy\"\n\n    input:\n    set file(gam), file(\"json\"), file(\"graphs\") from treatment_json_ch.combine(peak_linear_ch).map{ it.flatten()}.view()\n\n    output:\n    file(\"${name}_peaks.narrowPeak\")\n    file(\"${name}.tar.gz\")\n\n    script:\n    name = gam.getSimpleName()\n\n    \"\"\"\n    (seq 1 22; echo X; echo Y) | parallel -j 10 'graph_peak_caller count_unique_reads {} graphs/ json/${name}_ | tail -n 1 > counted_unique_reads_{}.txt'\n    (seq 1 22; echo X; echo Y) | parallel -j 10 'graph_peak_caller estimate_shift {} graphs/ json/${name}_ 2 100 | tail -n 1 | sed -n -e \"s/.*Found shift: \\\\([:digit:]*\\\\)/\\\\1/p\" > fragment_size_{}.txt'\n    read_length=\\$(vg view -X $gam | head -2 | tail -1 | wc -c)\n    fragment_length=\\$(awk 'BEGIN{i=0}{i = i + \\$1}END{print int(i/NR)}' fragment_size_*.txt)\n    if [ \\$fragment_length -le \\$read_length ]\n    then\n        fragment_length=200\n    fi\n    unique_reads=\\$(awk 'BEGIN{i=0}{i = i + \\$1}END{print i}' counted_unique_reads_*.txt)\n    (seq 1 22; echo X; echo Y) | parallel -j 10 \"graph_peak_caller callpeaks -q ${params.qvalue} -g graphs/{}.nobg -s json/${name}_{}.json -G ${params.genome_size} -p True -f \\$fragment_length -r \\$read_length -u \\$unique_reads -n {}\"\n\n    rename 'touched' '_touched' *touched*\n    rename 'background' '_background' *background*\n    rename 'direct' '_direct' *direct*\n    rename 'fragment' '_fragment' *fragment*\n    rename 'pvalues' '_pvalues' *pvalues*\n\n    (seq 1 22; echo X; echo Y) | parallel -j 3 \"graph_peak_caller callpeaks_whole_genome_from_p_values -q ${params.qvalue} -d graphs/ -n '' -f \\$fragment_length -r \\$read_length {}\"\n    (seq 1 22; echo X; echo Y) | parallel -j 10 'graph_peak_caller peaks_to_linear {}_max_paths.intervalcollection graphs/{}_linear_pathv2.interval {} {}_linear_peaks.bed'\n    cat *_linear_peaks.bed | awk '\\$2<\\$3' | sort-bed - > ${name}_peaks.narrowPeak\n    tar cvzf ${name}.tar.gz *.intervalcollection *.fasta\n\"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    name = gam.getSimpleName()\n\n    \"\"\"\n    (seq 1 22; echo X; echo Y) | parallel -j 10 'graph_peak_caller count_unique_reads {} graphs/ json/${name}_ | tail -n 1 > counted_unique_reads_{}.txt'\n    (seq 1 22; echo X; echo Y) | parallel -j 10 'graph_peak_caller estimate_shift {} graphs/ json/${name}_ 2 100 | tail -n 1 | sed -n -e \"s/.*Found shift: \\\\([:digit:]*\\\\)/\\\\1/p\" > fragment_size_{}.txt'\n    read_length=\\$(vg view -X $gam | head -2 | tail -1 | wc -c)\n    fragment_length=\\$(awk 'BEGIN{i=0}{i = i + \\$1}END{print int(i/NR)}' fragment_size_*.txt)\n    if [ \\$fragment_length -le \\$read_length ]\n    then\n        fragment_length=200\n    fi\n    unique_reads=\\$(awk 'BEGIN{i=0}{i = i + \\$1}END{print i}' counted_unique_reads_*.txt)\n    (seq 1 22; echo X; echo Y) | parallel -j 10 \"graph_peak_caller callpeaks -q ${params.qvalue} -g graphs/{}.nobg -s json/${name}_{}.json -G ${params.genome_size} -p True -f \\$fragment_length -r \\$read_length -u \\$unique_reads -n {}\"\n\n    rename 'touched' '_touched' *touched*\n    rename 'background' '_background' *background*\n    rename 'direct' '_direct' *direct*\n    rename 'fragment' '_fragment' *fragment*\n    rename 'pvalues' '_pvalues' *pvalues*\n\n    (seq 1 22; echo X; echo Y) | parallel -j 3 \"graph_peak_caller callpeaks_whole_genome_from_p_values -q ${params.qvalue} -d graphs/ -n '' -f \\$fragment_length -r \\$read_length {}\"\n    (seq 1 22; echo X; echo Y) | parallel -j 10 'graph_peak_caller peaks_to_linear {}_max_paths.intervalcollection graphs/{}_linear_pathv2.interval {} {}_linear_peaks.bed'\n    cat *_linear_peaks.bed | awk '\\$2<\\$3' | sort-bed - > ${name}_peaks.narrowPeak\n    tar cvzf ${name}.tar.gz *.intervalcollection *.fasta\n\"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "goname",
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "treatment_json_ch",
            "peak_linear_ch"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '170 GB'",
            "time '12h'",
            "publishDir \"$params.outDir/peaks\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "callPeaksRef": {
        "name_process": "callPeaksRef",
        "string_process": " process callPeaksRef{\n        cpus = 40\n        memory '120 GB'\n        time '24h'\n\n        publishDir \"$params.outDir/peaks\", pattern: \"ref_${name}_peaks.narrowPeak\", mode: \"copy\"\n\n        input:\n        set file(fastq), file(\"json\"), file(control_fastq), file(\"control_json\"), file(\"graphs\") from ref_treatment_json_ch.combine(ref_control_json_ch).filter{design[it.get(0).getName()] == design[it.get(2).getName()]}.combine(ref_peak_linear_ch).map{ it.flatten()}.view()\n\n        output:\n        set val(name), file(\"ref_${name}_peaks.narrowPeak\") into ref_peaks_ch\n\n        script:\n        name = fastq.getSimpleName()\n        control_name = control_fastq.getSimpleName()\n        \"\"\"\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 'graph_peak_caller count_unique_reads chr{} graphs/ json/${name}_ref_ | tail -n 1 > counted_unique_reads_chr{}.txt'\n        read_length=\\$(zcat $fastq | head -2 | tail -1 | wc -c)\n        unique_reads=\\$(awk 'BEGIN{i=0}{i = i + \\$1}END{print i}' counted_unique_reads_chr*.txt)\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 \"graph_peak_caller callpeaks -q ${params.qvalue} -g graphs/chr{}.nobg -s json/${name}_ref_chr{}.json -c control_json/${control_name}_ref_chr{}.json -G ${params.genome_size} -p True -f ${params.fragment_length} -r \\$read_length -u \\$unique_reads -n chr{}\"\n        rename 'touched' '_touched' *touched*\n        rename 'background' '_background' *background*\n        rename 'direct' '_direct' *direct*\n        rename 'fragment' '_fragment' *fragment*\n        rename 'pvalues' '_pvalues' *pvalues*\n\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 \"graph_peak_caller callpeaks_whole_genome_from_p_values -q ${params.qvalue} -d graphs/ -n '' -f ${params.fragment_length} -r \\$read_length chr{}\"\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 'graph_peak_caller peaks_to_linear chr{}_max_paths.intervalcollection graphs/chr{}_linear_pathv2.interval chr{} chr{}_linear_peaks.bed'\n        cat *_linear_peaks.bed | sort-bed - > ref_${name}_peaks.narrowPeak\n    \"\"\"\n    }",
        "nb_lignes_process": 30,
        "string_script": "        name = fastq.getSimpleName()\n        control_name = control_fastq.getSimpleName()\n        \"\"\"\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 'graph_peak_caller count_unique_reads chr{} graphs/ json/${name}_ref_ | tail -n 1 > counted_unique_reads_chr{}.txt'\n        read_length=\\$(zcat $fastq | head -2 | tail -1 | wc -c)\n        unique_reads=\\$(awk 'BEGIN{i=0}{i = i + \\$1}END{print i}' counted_unique_reads_chr*.txt)\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 \"graph_peak_caller callpeaks -q ${params.qvalue} -g graphs/chr{}.nobg -s json/${name}_ref_chr{}.json -c control_json/${control_name}_ref_chr{}.json -G ${params.genome_size} -p True -f ${params.fragment_length} -r \\$read_length -u \\$unique_reads -n chr{}\"\n        rename 'touched' '_touched' *touched*\n        rename 'background' '_background' *background*\n        rename 'direct' '_direct' *direct*\n        rename 'fragment' '_fragment' *fragment*\n        rename 'pvalues' '_pvalues' *pvalues*\n\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 \"graph_peak_caller callpeaks_whole_genome_from_p_values -q ${params.qvalue} -d graphs/ -n '' -f ${params.fragment_length} -r \\$read_length chr{}\"\n        (seq 3 22; echo X; echo Y; echo 1_1; echo 1_2; echo 2_1; echo 2_2) | parallel -j 3 'graph_peak_caller peaks_to_linear chr{}_max_paths.intervalcollection graphs/chr{}_linear_pathv2.interval chr{} chr{}_linear_peaks.bed'\n        cat *_linear_peaks.bed | sort-bed - > ref_${name}_peaks.narrowPeak\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "goname",
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "ref_treatment_json_ch",
            "ref_control_json_ch",
            "ref_peak_linear_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ref_peaks_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '120 GB'",
            "time '24h'",
            "publishDir \"$params.outDir/peaks\", pattern: \"ref_${name}_peaks.narrowPeak\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "alteredPeaks": {
        "name_process": "alteredPeaks",
        "string_process": " process alteredPeaks {\n        cpus = 1\n        publishDir \"$params.outDir/peaks\", mode: \"copy\"\n        input:\n        set val(name), file(pop_peaks), val(ref_name), file(ref_peaks) from pop_peaks_ch.combine(ref_peaks_ch, by: 0).view()\n        output:\n        file \"*.narrowPeak\"\n\n        script:\n        \"\"\"\n    module load bedtools\n    bedtools subtract -A -a ${pop_peaks} -b ${ref_peaks} > ${name}_pers-only.narrowPeak\n    bedtools subtract -A -b ${pop_peaks} -a ${ref_peaks} > ${name}_ref-only.narrowPeak\n    bedtools intersect -wa -a ${pop_peaks} -b ${ref_peaks} > ${name}_intersected.narrowPeak\n    \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n    module load bedtools\n    bedtools subtract -A -a ${pop_peaks} -b ${ref_peaks} > ${name}_pers-only.narrowPeak\n    bedtools subtract -A -b ${pop_peaks} -a ${ref_peaks} > ${name}_ref-only.narrowPeak\n    bedtools intersect -wa -a ${pop_peaks} -b ${ref_peaks} > ${name}_intersected.narrowPeak\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "pop_peaks_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 1",
            "publishDir \"$params.outDir/peaks\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "alignFastq": {
        "name_process": "alignFastq",
        "string_process": "\tprocess alignFastq {\n\t\ttime '1d'\n\t\tcpus 40\n\t\tmemory '71 GB'\n\t\tpublishDir \"$workflow.launchDir/gams\", mode: 'move'\n\n\t\tinput:\n\t\tset file(\"index.xg\"), file(\"index.gbwt\"), file('index.gcsa'), file('index.gcsa.lcp'), file(reads) from xg_ch.combine(gbwt_ch).combine(gcsa_ch).combine(gcsa_lcp_ch).combine(reads_ch)\n\n\t\toutput:\n\t\tfile \"${reads_name}.gam\" into aln\n\n\t\tscript:\n\t\textension = reads.getExtension()\n\t\treads_name = params.prefix + reads.getSimpleName()\n\t\tswitch(extension) {\n\t\t\tcase \"gz\":\n\t\t\t\tvg_flag = \"${vg_flag} -f\"\n\t\t\t\tbreak\n\t\t\tcase \"bam\":\n\t\t\t\tvg_flag = \"${vg_flag} -b\"\n\t\t\t\tbreak\n\t\t\tcase \"gam\":\n\t\t\t\tvg_flag = \"${vg_flag} -G\"\n\t\t\t\tbreak\n\t\t}\n\t\"\"\"\n\t\tvg map --threads 40 --gcsa-name index.gcsa --xg-name index.xg --gbwt-name index.gbwt ${vg_flag} ${reads} > ${reads_name}.gam\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 28,
        "string_script": "\t\textension = reads.getExtension()\n\t\treads_name = params.prefix + reads.getSimpleName()\n\t\tswitch(extension) {\n\t\t\tcase \"gz\":\n\t\t\t\tvg_flag = \"${vg_flag} -f\"\n\t\t\t\tbreak\n\t\t\tcase \"bam\":\n\t\t\t\tvg_flag = \"${vg_flag} -b\"\n\t\t\t\tbreak\n\t\t\tcase \"gam\":\n\t\t\t\tvg_flag = \"${vg_flag} -G\"\n\t\t\t\tbreak\n\t\t}\n\t\"\"\"\n\t\tvg map --threads 40 --gcsa-name index.gcsa --xg-name index.xg --gbwt-name index.gbwt ${vg_flag} ${reads} > ${reads_name}.gam\n\t\t\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "CASE",
            "BreakSeq",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/CASE",
            "https://bio.tools/breakseq",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "xg_ch",
            "gbwt_ch",
            "gcsa_ch",
            "gcsa_lcp_ch",
            "reads_ch"
        ],
        "nb_inputs": 5,
        "outputs": [
            "aln"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "time '1d'",
            "cpus 40",
            "memory '71 GB'",
            "publishDir \"$workflow.launchDir/gams\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "alignFastqNoGBWT": {
        "name_process": "alignFastqNoGBWT",
        "string_process": "\tprocess alignFastqNoGBWT {\n\t\ttime '1d'\n\t\tcpus 40\n\t\tmemory '71 GB'\n\t\tpublishDir \"$workflow.launchDir/gams\", mode: 'move'\n\n\t\tinput:\n\t\tset file(\"index.xg\"), file('index.gcsa'), file('index.gcsa.lcp'), file(reads) from xg_ch.combine(gcsa_ch).combine(gcsa_lcp_ch).combine(reads_ch)\n\n\t\toutput:\n\t\tfile \"${reads_name}.gam\" into aln\n\n\t\tscript:\n\t\textension = reads.getExtension()\n\t\treads_name = params.prefix + reads.getSimpleName()\n\t\tswitch(extension) {\n\t\t\tcase \"gz\":\n\t\t\t\tvg_flag = \"${vg_flag} -f\"\n\t\t\t\tbreak\n\t\t\tcase \"bam\":\n\t\t\t\tvg_flag = \"${vg_flag} -b\"\n\t\t\t\tbreak\n\t\t\tcase \"gam\":\n\t\t\t\tvg_flag = \"${vg_flag} -G\"\n\t\t\t\tbreak\n\t\t}\n\t\"\"\"\n\t\tvg map --threads 40 --gcsa-name index.gcsa --xg-name index.xg ${vg_flag} ${reads} > ${reads_name}.gam\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 28,
        "string_script": "\t\textension = reads.getExtension()\n\t\treads_name = params.prefix + reads.getSimpleName()\n\t\tswitch(extension) {\n\t\t\tcase \"gz\":\n\t\t\t\tvg_flag = \"${vg_flag} -f\"\n\t\t\t\tbreak\n\t\t\tcase \"bam\":\n\t\t\t\tvg_flag = \"${vg_flag} -b\"\n\t\t\t\tbreak\n\t\t\tcase \"gam\":\n\t\t\t\tvg_flag = \"${vg_flag} -G\"\n\t\t\t\tbreak\n\t\t}\n\t\"\"\"\n\t\tvg map --threads 40 --gcsa-name index.gcsa --xg-name index.xg ${vg_flag} ${reads} > ${reads_name}.gam\n\t\t\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "CASE",
            "BreakSeq",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/CASE",
            "https://bio.tools/breakseq",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "xg_ch",
            "gcsa_ch",
            "gcsa_lcp_ch",
            "reads_ch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "aln"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "time '1d'",
            "cpus 40",
            "memory '71 GB'",
            "publishDir \"$workflow.launchDir/gams\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "packGAM": {
        "name_process": "packGAM",
        "string_process": "\nprocess packGAM {\n\t\ttime '12h'\n\t\tcpus 40\n\t\tmemory '71 GB'\n\t\tpublishDir \"$workflow.launchDir/packs\", mode: 'move'\n\n    input:\n    file(gam) from aln\n\n    output:\n    file \"pack_${gam}\"\n\n    script:\n    \"\"\"\n    vg pack -t 40 -g ${gam} -x ${params.xg} -o pack_${gam}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    vg pack -t 40 -g ${gam} -x ${params.xg} -o pack_${gam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "aln"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "time '12h'",
            "cpus 40",
            "memory '71 GB'",
            "publishDir \"$workflow.launchDir/packs\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "alignControlRef": {
        "name_process": "alignControlRef",
        "string_process": "\nprocess alignControlRef {\n    cpus = 40\n    memory \"${params.mem}\"\n    time = \"${params.time}\"\n\n    input:\n    set file(xg), file(gcsa), file(gcsa_lcp), file(fastq), file(\"graphs\") from ref_index_control_ch.collect().combine(ref_control_fastq_ch).combine(ref_control_linear_ch).view()\n\n    output:\n    set file(fastq), file(\"control_json\") into ref_control_json_ch\n\n    script:\n    name = fastq.getSimpleName()\n    \"\"\"\n    mkdir control_gam\n    vg map $vg_flag -f $fastq -x $xg -g $gcsa -t 40 -u 1 -m 1 > \"control_gam/${name}_ref.gam\"\n\n    mkdir control_json\n    vg view -aj control_gam/${name}_ref.gam > control_json/${name}_ref.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} control_json/${name}_ref.json graphs/\n    rm control_json/${name}_ref.json\n\"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    name = fastq.getSimpleName()\n    \"\"\"\n    mkdir control_gam\n    vg map $vg_flag -f $fastq -x $xg -g $gcsa -t 40 -u 1 -m 1 > \"control_gam/${name}_ref.gam\"\n\n    mkdir control_json\n    vg view -aj control_gam/${name}_ref.gam > control_json/${name}_ref.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} control_json/${name}_ref.json graphs/\n    rm control_json/${name}_ref.json\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "ref_index_control_ch",
            "ref_control_fastq_ch",
            "ref_control_linear_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ref_control_json_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory \"${params.mem}\"",
            "time = \"${params.time}\""
        ],
        "when": "",
        "stub": ""
    },
    "alignControlPop": {
        "name_process": "alignControlPop",
        "string_process": "\nprocess alignControlPop {\n    cpus = 40\n    memory \"${params.mem}\"\n    time = \"${params.time}\"\n\n    input:\n    set file(xg), file(gbwt), file(gcsa), file(gcsa_lcp), file(fastq), file(\"graphs\") from pop_index_control_ch.collect().combine(control_fastq_ch).combine(control_linear_ch).view()\n    output:\n    set file(fastq), file(\"control_json\") into control_json_ch\n\n    script:\n    name = fastq.getSimpleName()\n    \"\"\"\n    mkdir control_gam\n    vg map $vg_flag -f $fastq -1 $gbwt -x $xg -g $gcsa -t 40 -u 1 -m 1 > \"control_gam/${name}_pop.gam\"\n\n    mkdir control_json\n    vg view -aj control_gam/${name}_pop.gam > control_json/${name}_pop.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} control_json/${name}_pop.json graphs/\n    rm control_json/${name}_pop.json\n\"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    name = fastq.getSimpleName()\n    \"\"\"\n    mkdir control_gam\n    vg map $vg_flag -f $fastq -1 $gbwt -x $xg -g $gcsa -t 40 -u 1 -m 1 > \"control_gam/${name}_pop.gam\"\n\n    mkdir control_json\n    vg view -aj control_gam/${name}_pop.gam > control_json/${name}_pop.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} control_json/${name}_pop.json graphs/\n    rm control_json/${name}_pop.json\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "pop_index_control_ch",
            "control_fastq_ch",
            "control_linear_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "control_json_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory \"${params.mem}\"",
            "time = \"${params.time}\""
        ],
        "when": "",
        "stub": ""
    },
    "alignSampleRef": {
        "name_process": "alignSampleRef",
        "string_process": "\nprocess alignSampleRef {\n    cpus = 40\n    memory \"${params.mem}\"\n    time = \"${params.time}\"\n\n    input:\n    set file(xg), file(gcsa), file(gcsa_lcp), file(fastq), file(\"graphs\") from ref_index_treatment_ch.collect().combine(ref_fastq_ch).combine(ref_treatment_linear_ch).view()\n\n    output:\n    set file(fastq), file(\"json\") into ref_treatment_json_ch\n    file(\"gam/${name}_ref.gam\") into ref_treatment_gam_ch\n\n    script:\n    name = fastq.getSimpleName()\n    \"\"\"\n    mkdir gam\n    vg map $vg_flag -f $fastq -x $xg -g $gcsa -t 40 -u 1 -m 1 > gam/${name}_ref.gam\n\n    mkdir json\n    vg view -aj gam/${name}_ref.gam > json/${name}_ref.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}_ref.json graphs/\n    rm json/${name}_ref.json\n\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    name = fastq.getSimpleName()\n    \"\"\"\n    mkdir gam\n    vg map $vg_flag -f $fastq -x $xg -g $gcsa -t 40 -u 1 -m 1 > gam/${name}_ref.gam\n\n    mkdir json\n    vg view -aj gam/${name}_ref.gam > json/${name}_ref.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}_ref.json graphs/\n    rm json/${name}_ref.json\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "ref_index_treatment_ch",
            "ref_fastq_ch",
            "ref_treatment_linear_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ref_treatment_json_ch",
            "ref_treatment_gam_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory \"${params.mem}\"",
            "time = \"${params.time}\""
        ],
        "when": "",
        "stub": ""
    },
    "alignSamplePop": {
        "name_process": "alignSamplePop",
        "string_process": "\nprocess alignSamplePop {\n    cpus = 40\n    memory \"${params.mem}\"\n    time = \"${params.time}\"\n\n    input:\n    set file(xg), file(gbwt), file(gcsa), file(gcsa_lcp), file(fastq), file(\"graphs\") from pop_index_treatment_ch.collect().combine(fastq_ch).combine(treatment_linear_ch).view()\n\n    output:\n    set file(fastq), file(\"json\") into treatment_json_ch\n    file(\"gam/${name}_pop.gam\") into treatment_gam_ch\n\n    script:\n    name = fastq.getSimpleName()\n\n    \"\"\"\n    mkdir gam\n    vg map $vg_flag -f $fastq -1 $gbwt -x $xg -g $gcsa -t 40 -u 1 -m 1 > gam/${name}_pop.gam\n\n    mkdir json\n    vg view -aj gam/${name}_pop.gam > json/${name}_pop.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}_pop.json graphs/\n    rm json/${name}_pop.json\n\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    name = fastq.getSimpleName()\n\n    \"\"\"\n    mkdir gam\n    vg map $vg_flag -f $fastq -1 $gbwt -x $xg -g $gcsa -t 40 -u 1 -m 1 > gam/${name}_pop.gam\n\n    mkdir json\n    vg view -aj gam/${name}_pop.gam > json/${name}_pop.json\n    graph_peak_caller split_vg_json_reads_into_chromosomes ${chromosomes} json/${name}_pop.json graphs/\n    rm json/${name}_pop.json\n\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "pop_index_treatment_ch",
            "fastq_ch",
            "treatment_linear_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "treatment_json_ch",
            "treatment_gam_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory \"${params.mem}\"",
            "time = \"${params.time}\""
        ],
        "when": "",
        "stub": ""
    },
    "sortSampleRef": {
        "name_process": "sortSampleRef",
        "string_process": " process sortSampleRef {\n        cpus = 40\n        memory '100 GB'\n        time = '12h'\n\n        publishDir \"$params.outDir\", pattern: \"ref_${name}.sorted.gam\"\n\n        input:\n        file(gam) from ref_treatment_gam_ch\n\n        output:\n        file \"ref_${name}.sorted.gam\"\n        script:\n        name = gam.getSimpleName()\n        \"\"\"\n        vg gamsort ${gam} -i ${name}.sorted.gam.gai -t 40 > ref_${name}.sorted.gam\n    \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        name = gam.getSimpleName()\n        \"\"\"\n        vg gamsort ${gam} -i ${name}.sorted.gam.gai -t 40 > ref_${name}.sorted.gam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "ref_treatment_gam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '100 GB'",
            "time = '12h'",
            "publishDir \"$params.outDir\", pattern: \"ref_${name}.sorted.gam\""
        ],
        "when": "",
        "stub": ""
    },
    "sortSamplePop": {
        "name_process": "sortSamplePop",
        "string_process": " process sortSamplePop {\n        cpus = 40\n        memory '100 GB'\n        time '12h'\n\n        publishDir \"$params.outDir\", pattern: \"${name}.sorted.gam\"\n\n        input:\n        file(gam) from treatment_gam_ch\n\n        output:\n        file \"${name}.sorted.gam\"\n        script:\n        name = gam.getSimpleName()\n        \"\"\"\n        vg gamsort ${gam} -i ${name}.sorted.gam.gai -t 40 > ${name}.sorted.gam\n    \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        name = gam.getSimpleName()\n        \"\"\"\n        vg gamsort ${gam} -i ${name}.sorted.gam.gai -t 40 > ${name}.sorted.gam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "goname",
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "treatment_gam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgroza__nextflow_scripts",
        "directive": [
            "cpus = 40",
            "memory '100 GB'",
            "time '12h'",
            "publishDir \"$params.outDir\", pattern: \"${name}.sorted.gam\""
        ],
        "when": "",
        "stub": ""
    }
}
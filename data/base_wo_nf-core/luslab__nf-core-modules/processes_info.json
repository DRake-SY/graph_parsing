{
    "COUNT_LINES": {
        "name_process": "COUNT_LINES",
        "string_process": "\nprocess COUNT_LINES {\n    label \"min_cores\"\n    label \"min_mem\"\n    label \"regular_queue\"\n\n    tag \"$meta.id\"\n\n    container \"biocontainers/biocontainers:v1.2.0_cv1\"\n\n    input:\n    tuple val(meta), path(input_file)\n\n    output:\n    tuple val(meta), stdout, emit: line_count\n\n                                                      \n    script:\n    \"\"\"\n    echo -n \"\\$(zcat -f $input_file | wc -l)\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo -n \"\\$(zcat -f $input_file | wc -l)\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "label \"min_cores\"",
            "label \"min_mem\"",
            "label \"regular_queue\"",
            "tag \"$meta.id\"",
            "container \"biocontainers/biocontainers:v1.2.0_cv1\""
        ],
        "when": "",
        "stub": ""
    },
    "MD5": {
        "name_process": "MD5",
        "string_process": "\nprocess MD5 {\n    label \"min_cores\"\n    label \"min_mem\"\n    label \"regular_queue\"\n\n    tag \"$meta.id\"\n\n    container \"biocontainers/biocontainers:v1.2.0_cv1\"\n\n    input:\n    tuple val(meta), path(input_file)\n\n    output:\n    tuple val(meta), stdout, emit: hash\n\n    script:\n    \"\"\"\n    echo -n \"\\$(zcat -f $input_file | md5sum | awk '{print(\\$1)}')\"\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    echo -n \"\\$(zcat -f $input_file | md5sum | awk '{print(\\$1)}')\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "label \"min_cores\"",
            "label \"min_mem\"",
            "label \"regular_queue\"",
            "tag \"$meta.id\"",
            "container \"biocontainers/biocontainers:v1.2.0_cv1\""
        ],
        "when": "",
        "stub": ""
    },
    "PARACLU_CONVERT": {
        "name_process": "PARACLU_CONVERT",
        "string_process": "\nprocess PARACLU_CONVERT {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1\"\n    } else {\n        container \"quay.io/biocontainers/paraclu:10--h9a82719_1\"\n    }\n\n    input:\n    tuple val(meta), path(peaks)\n\n    output:\n    tuple val(meta), path(\"*.peaks.bed.gz\"),    emit: peaks\n    path \"*.version.txt\",                       emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $peaks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$3-1, \\$4, \".\", \\$6, \\$2}' |\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.peaks.bed.gz\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $peaks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$3-1, \\$4, \".\", \\$6, \\$2}' |\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.peaks.bed.gz\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "peaks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::paraclu=10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1\" } else { container \"quay.io/biocontainers/paraclu:10--h9a82719_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CROSSLINKS_NORMCOVERAGE": {
        "name_process": "CROSSLINKS_NORMCOVERAGE",
        "string_process": "\nprocess CROSSLINKS_NORMCOVERAGE {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(crosslinks)\n\n    output:\n    tuple val(meta), path(\"*.bedgraph.gz\"), emit: bedgraph\n    path \"*.version.txt\",                   emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    TOTAL=`gunzip -c $crosslinks | awk 'BEGIN {total=0} {total=total+\\$5} END {print total}'`\n\n    gzip -d -c $crosslinks | \\\n        awk -v total=\\$TOTAL '{printf \"%s\\\\t%i\\\\t%i\\\\t%s\\\\t%f\\\\t%s\\\\n\", \\$1, \\$2, \\$3, \\$4, 1000000*\\$5/total, \\$6}' | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.norm.bedgraph.gz\n\n    echo \\$(awk --version 2>&1) | sed 's/^.*awk version //' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    TOTAL=`gunzip -c $crosslinks | awk 'BEGIN {total=0} {total=total+\\$5} END {print total}'`\n\n    gzip -d -c $crosslinks | \\\n        awk -v total=\\$TOTAL '{printf \"%s\\\\t%i\\\\t%i\\\\t%s\\\\t%f\\\\t%s\\\\n\", \\$1, \\$2, \\$3, \\$4, 1000000*\\$5/total, \\$6}' | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.norm.bedgraph.gz\n\n    echo \\$(awk --version 2>&1) | sed 's/^.*awk version //' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ICOUNT_PEAKS": {
        "name_process": "ICOUNT_PEAKS",
        "string_process": "\nprocess ICOUNT_PEAKS {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::icount=2.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/icount:2.0.0--py_1\"\n    } else {\n        container \"quay.io/biocontainers/icount:2.0.0--py_1\"\n    }\n\n    input:\n    tuple val(meta), path(bed)\n    path(segmentation)\n\n    output:\n    tuple val(meta), path(\"*.peaks.bed.gz\"), emit: peaks\n    tuple val(meta), path(\"*.scores.tsv\")  , emit: scores\n    path \"*.version.txt\"                   , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount peaks \\\\\n        $segmentation \\\\\n        $bed \\\\\n        ${prefix}.peaks.bed.gz \\\\\n        --scores ${prefix}.scores.tsv \\\\\n        $options.args\n    echo \\$(iCount -v) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount peaks \\\\\n        $segmentation \\\\\n        $bed \\\\\n        ${prefix}.peaks.bed.gz \\\\\n        --scores ${prefix}.scores.tsv \\\\\n        $options.args\n    echo \\$(iCount -v) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "TRUmiCount"
        ],
        "tools_url": [
            "https://bio.tools/trumicount"
        ],
        "tools_dico": [
            {
                "name": "TRUmiCount",
                "uri": "https://bio.tools/trumicount",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Biomarkers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Diagnostic markers"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Sequencing error detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Short-read error correction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Short read error correction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Correctly counting absolute numbers of molecules using unique molecular identifiers.",
                "homepage": "https://cibiv.github.io/trumicount/"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "segmentation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::icount=2.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/icount:2.0.0--py_1\" } else { container \"quay.io/biocontainers/icount:2.0.0--py_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PEKA": {
        "name_process": "PEKA",
        "string_process": "\nprocess PEKA {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::peka=0.1.6\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/peka:0.1.6--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/peka:0.1.6--pyhdfd78af_0\"\n    }\n\n    input:\n    tuple val(meta), path(peaks)\n    tuple val(meta), path(crosslinks)\n    path(genome)\n    path(fai)\n    path(gtf)\n\n    output:\n    tuple val(meta), path(\"*mer_cluster_distribution*\"), emit: cluster\n    tuple val(meta), path(\"*mer_distribution*\"),         emit: distribution\n    tuple val(meta), path(\"*.pdf\"),                      emit: pdf\n    path \"*.version.txt\",                                emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    # If the modification date and time of the fai is before the fasta then\n    # there will be an error. Touching the file first avoids that.\n    touch $fai\n    mkdir tmp\n    TMPDIR=\\$(pwd)/tmp peka \\\n        -i $peaks \\\n        -x $crosslinks \\\n        -g $genome \\\n        -gi $fai \\\n        -r $gtf \\\n        $options.args\n    echo \"0.1.6\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    # If the modification date and time of the fai is before the fasta then\n    # there will be an error. Touching the file first avoids that.\n    touch $fai\n    mkdir tmp\n    TMPDIR=\\$(pwd)/tmp peka \\\n        -i $peaks \\\n        -x $crosslinks \\\n        -g $genome \\\n        -gi $fai \\\n        -r $gtf \\\n        $options.args\n    echo \"0.1.6\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [
            "meta",
            "peaks",
            "meta",
            "crosslinks",
            "genome",
            "fai",
            "gtf"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::peka=0.1.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/peka:0.1.6--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/peka:0.1.6--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "R": {
        "name_process": "R",
        "string_process": "\nprocess R {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    container \"luslab/nf-modules-r:latest\"\n\n    input:\n    tuple val(meta), path('input/*')\n\n    output:\n    tuple val(meta), file('*'), emit: r_output\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    Rscript \\\\\n        $params.script \\\\\n        --cores $task.cpus \\\\\n        --runtype nextflow \\\\\n        $options.args\n\n    rm -r input\n    echo \\$(R --version 2>&1) | sed -n 1p | sed 's/^.*version //; s/ (.*//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    Rscript \\\\\n        $params.script \\\\\n        --cores $task.cpus \\\\\n        --runtype nextflow \\\\\n        $options.args\n\n    rm -r input\n    echo \\$(R --version 2>&1) | sed -n 1p | sed 's/^.*version //; s/ (.*//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "container \"luslab/nf-modules-r:latest\""
        ],
        "when": "",
        "stub": ""
    },
    "CROSSLINKS_COVERAGE": {
        "name_process": "CROSSLINKS_COVERAGE",
        "string_process": "\nprocess CROSSLINKS_COVERAGE {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(crosslinks)\n\n    output:\n    tuple val(meta), path(\"*.bedgraph.gz\"), emit: bedgraph\n    path \"*.version.txt\",                   emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        gzip > ${prefix}.bedgraph.gz\n\n    echo \\$(awk --version 2>&1) | sed 's/^.*awk version //' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        gzip > ${prefix}.bedgraph.gz\n\n    echo \\$(awk --version 2>&1) | sed 's/^.*awk version //' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PARACLU_PARACLU": {
        "name_process": "PARACLU_PARACLU",
        "string_process": "\nprocess PARACLU_PARACLU {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1\"\n    } else {\n        container \"quay.io/biocontainers/paraclu:10--h9a82719_1\"\n    }\n\n    input:\n    tuple val(meta), path(crosslinks)\n\n    output:\n    tuple val(meta), path(\"*.sigxls.tsv.gz\"),  emit: sigxls\n    path \"*.version.txt\",               emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$6, \\$2+1, \\$5}' | \\\n        sort -k1,1 -k2,2 -k3,3n > paraclu_input.tsv\n\n    paraclu \\\n        ${options.args} \\\n        paraclu_input.tsv | \\\n        gzip > ${prefix}.sigxls.tsv.gz\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$6, \\$2+1, \\$5}' | \\\n        sort -k1,1 -k2,2 -k3,3n > paraclu_input.tsv\n\n    paraclu \\\n        ${options.args} \\\n        paraclu_input.tsv | \\\n        gzip > ${prefix}.sigxls.tsv.gz\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::paraclu=10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1\" } else { container \"quay.io/biocontainers/paraclu:10--h9a82719_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PARACLU_CUT": {
        "name_process": "PARACLU_CUT",
        "string_process": "\nprocess PARACLU_CUT {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1\"\n    } else {\n        container \"quay.io/biocontainers/paraclu:10--h9a82719_1\"\n    }\n\n    input:\n    tuple val(meta), path(sigxls)\n\n    output:\n    tuple val(meta), path(\"*.peaks.tsv.gz\"),    emit: peaks\n    path \"*.version.txt\",                       emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $sigxls | \\\n        paraclu-cut \\\n        ${options.args} | \\\n        gzip > ${prefix}.peaks.tsv.gz\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gzip -d -c $sigxls | \\\n        paraclu-cut \\\n        ${options.args} | \\\n        gzip > ${prefix}.peaks.tsv.gz\n\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "sigxls"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::paraclu=10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1\" } else { container \"quay.io/biocontainers/paraclu:10--h9a82719_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HTSEQ_COUNT": {
        "name_process": "HTSEQ_COUNT",
        "string_process": "\nprocess HTSEQ_COUNT {\n    tag \"$meta.id\"\n    label \"min_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::htseq=0.13.5\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/htseq:0.13.5--py39h70b41aa_1\"\n    } else {\n        container \"quay.io/biocontainers/htseq:0.13.5--py39h70b41aa_1\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path (bai)\n    path gtf\n\n    output:\n\n    tuple val(meta), path(\"*.tsv\"), emit: counts\n    path \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    htseq-count \\\\\n        ${options.args} \\\\\n        ${bam} \\\\\n        ${gtf} \\\\\n        --nprocesses $task.cpus \\\\\n        > \\\\\n        ${prefix}.tsv\n\n\n    htseq-count --version > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    htseq-count \\\\\n        ${options.args} \\\\\n        ${bam} \\\\\n        ${gtf} \\\\\n        --nprocesses $task.cpus \\\\\n        > \\\\\n        ${prefix}.tsv\n\n\n    htseq-count --version > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "htseqcount"
        ],
        "tools_url": [
            "https://bio.tools/htseqcount"
        ],
        "tools_dico": [
            {
                "name": "htseqcount",
                "uri": "https://bio.tools/htseqcount",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "This script takes an alignment file in SAM format and a feature file in GFF format and calculates for each feature the number of reads mapping to it.",
                "homepage": "https://htseq.readthedocs.io/en/release_0.9.1/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"min_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::htseq=0.13.5\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/htseq:0.13.5--py39h70b41aa_1\" } else { container \"quay.io/biocontainers/htseq:0.13.5--py39h70b41aa_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CLIPPY": {
        "name_process": "CLIPPY",
        "string_process": "\nprocess CLIPPY {\n    tag \"$meta.id\"\n    label \"avg_cores\"\n    label \"high_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::clippy=1.3.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/clippy:1.3.1--pyhdfd78af_2\"\n    } else {\n        container \"quay.io/biocontainers/clippy:1.3.1--pyhdfd78af_2\"\n    }\n\n    input:\n    tuple val(meta), path(crosslinks)\n    path(gtf)\n    path(fai)\n\n    output:\n    tuple val(meta), path(\"*_broadPeaks.bed.gz\"), emit: peaks\n    tuple val(meta), path(\"*[0-9].bed.gz\"),       emit: summits\n    path \"*.version.txt\",                         emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    clippy -i $crosslinks \\\n        -o $prefix \\\n        -a $gtf \\\n        -g $fai \\\n        -t ${task.cpus} \\\n        $options.args\n    gzip -n *_broadPeaks.bed\n    gzip -n *[0-9].bed\n    echo \\$(clippy -v) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    clippy -i $crosslinks \\\n        -o $prefix \\\n        -a $gtf \\\n        -g $fai \\\n        -t ${task.cpus} \\\n        $options.args\n    gzip -n *_broadPeaks.bed\n    gzip -n *[0-9].bed\n    echo \\$(clippy -v) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks",
            "gtf",
            "fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"avg_cores\"",
            "label \"high_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::clippy=1.3.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/clippy:1.3.1--pyhdfd78af_2\" } else { container \"quay.io/biocontainers/clippy:1.3.1--pyhdfd78af_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "\nprocess UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$untar\") , emit: untar\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ICOUNT_SEGMENT": {
        "name_process": "ICOUNT_SEGMENT",
        "string_process": "\nprocess ICOUNT_SEGMENT {\n    tag \"$gtf\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::icount=2.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/icount:2.0.0--py_1\"\n    } else {\n        container \"quay.io/biocontainers/icount:2.0.0--py_1\"\n    }\n\n    input:\n    path(gtf)\n    path(fai)\n\n    output:\n    path(\"*.gtf\")       , emit: gtf\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def filename = \"icount_segmentation\"\n    def prefix   = options.suffix ? \"${filename}${options.suffix}\" : \"${filename}\"\n    \"\"\"\n    iCount segment \\\\\n        $gtf \\\\\n        ${prefix}.gtf \\\\\n        $fai\n    echo \\$(iCount -v) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def filename = \"icount_segmentation\"\n    def prefix   = options.suffix ? \"${filename}${options.suffix}\" : \"${filename}\"\n    \"\"\"\n    iCount segment \\\\\n        $gtf \\\\\n        ${prefix}.gtf \\\\\n        $fai\n    echo \\$(iCount -v) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "TRUmiCount"
        ],
        "tools_url": [
            "https://bio.tools/trumicount"
        ],
        "tools_dico": [
            {
                "name": "TRUmiCount",
                "uri": "https://bio.tools/trumicount",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Biomarkers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Diagnostic markers"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Sequencing error detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Short-read error correction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Short read error correction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Correctly counting absolute numbers of molecules using unique molecular identifiers.",
                "homepage": "https://cibiv.github.io/trumicount/"
            }
        ],
        "inputs": [
            "gtf",
            "fai"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"$gtf\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::icount=2.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/icount:2.0.0--py_1\" } else { container \"quay.io/biocontainers/icount:2.0.0--py_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ULTRAPLEX": {
        "name_process": "ULTRAPLEX",
        "string_process": "\nprocess ULTRAPLEX {\n    tag \"${meta.id}\"\n    label \"max_cores\"\n    label \"max_memory\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::ultraplex=1.1.5\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/ultraplex:1.1.5--py36hc5360cc_0\"\n    } else {\n        container \"quay.io/biocontainers/ultraplex:1.1.5--py36hc5360cc_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path(barcode_file)\n\n    output:\n    tuple val(meta), path(\"*[!no_match].fastq.gz\")             , emit: fastq\n    tuple val(meta), path(\"*no_match.fastq.gz\"), optional: true, emit: no_match_fastq\n    path \"*.log\"                                               , emit: report\n    path \"*.version.txt\"                                       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    args = \"\"\n    if(options.args && options.args != '') {\n        ext_args = options.args\n        args += ext_args.trim()\n    }\n    read_list = reads.collect{it.toString()}\n    if (read_list.size > 1){\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --input_2 ${read_list[1]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    } else {\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    }\n    if (params.verbose){\n        println (\"[MODULE] ultraplex command: \" + ultraplex_command)\n    }\n\n    \"\"\"\n    ${ultraplex_command}\n    echo \\$(ultraplex --version 2>&1) | sed 's/^.*ultraplex //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def software = getSoftwareName(task.process)\n    args = \"\"\n    if(options.args && options.args != '') {\n        ext_args = options.args\n        args += ext_args.trim()\n    }\n    read_list = reads.collect{it.toString()}\n    if (read_list.size > 1){\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --input_2 ${read_list[1]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    } else {\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    }\n    if (params.verbose){\n        println (\"[MODULE] ultraplex command: \" + ultraplex_command)\n    }\n\n    \"\"\"\n    ${ultraplex_command}\n    echo \\$(ultraplex --version 2>&1) | sed 's/^.*ultraplex //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "barcode_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-core-modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label \"max_cores\"",
            "label \"max_memory\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::ultraplex=1.1.5\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/ultraplex:1.1.5--py36hc5360cc_0\" } else { container \"quay.io/biocontainers/ultraplex:1.1.5--py36hc5360cc_0\" }"
        ],
        "when": "",
        "stub": ""
    }
}
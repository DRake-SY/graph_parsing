{
    "retReadTxt": {
        "name_process": "retReadTxt",
        "string_process": "\nprocess retReadTxt {\n  executor 'lsf'\n  maxForks 40\n  errorStrategy {task.attempt < 3 ? 'retry' : 'ignore'}\n\n  output:\n  file \"*_Reads_Week*.txt\" into allReads optional true\n\n  script:\n  \"\"\"\n#!/hps/covid19_nobackup2/research/ena/blaise/bigsi/miniconda3/bin/python\n#Import libraries\nfrom urllib.request import urlretrieve\nfrom dateutil import rrule\nfrom datetime import datetime,date, timedelta\n\n#Define start & end dates for read retrieval\nnow = date(${params.enddate})\nend = date(${params.startdate})\n\n#Create counter for each week\ncounter = 1\n\n#Loop through the weeks\nfor dt in rrule.rrule(rrule.WEEKLY, dtstart=end, until=now):\n    #Define one week\n    oneWeek = dt+timedelta(days=6)\n\n    #Use API to download reads on weekly basis\n    arch_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(2157)%20AND%20first_public%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=0&length=0&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n    vir_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(10239)%20AND%20first_created%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=0&length=0&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n    #bac_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(2)%20AND%20first_created%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=358768&length=358768&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n    bac_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(2)%20AND%20first_created%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=0&length=0&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n\n    #Define week string\n    weekNo = dt.date().isocalendar()[1]\n    weekNoStr = str(weekNo)\n\n    #Define output files\n    vir_reads_file_weekly = \"Vir_Reads_Week\" + weekNoStr + \"_\" + dt.date().strftime(\"%Y\") + \".txt\"\n    arch_reads_file_weekly = \"Arc_Reads_Week\" + weekNoStr + \"_\" + dt.date().strftime(\"%Y\") + \".txt\"\n    bac_reads_file_weekly = \"Bac_Reads_Week\" + weekNoStr + \"_\" + dt.date().strftime(\"%Y\") + \".txt\"\n\n    #Download read files\n    urlretrieve(vir_reads_weekly, vir_reads_file_weekly)\n    urlretrieve(arch_reads_weekly, arch_reads_file_weekly)\n    urlretrieve(bac_reads_weekly, bac_reads_file_weekly)\n  \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "  \"\"\"\n#!/hps/covid19_nobackup2/research/ena/blaise/bigsi/miniconda3/bin/python\n#Import libraries\nfrom urllib.request import urlretrieve\nfrom dateutil import rrule\nfrom datetime import datetime,date, timedelta\n\n#Define start & end dates for read retrieval\nnow = date(${params.enddate})\nend = date(${params.startdate})\n\n#Create counter for each week\ncounter = 1\n\n#Loop through the weeks\nfor dt in rrule.rrule(rrule.WEEKLY, dtstart=end, until=now):\n    #Define one week\n    oneWeek = dt+timedelta(days=6)\n\n    #Use API to download reads on weekly basis\n    arch_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(2157)%20AND%20first_public%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=0&length=0&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n    vir_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(10239)%20AND%20first_created%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=0&length=0&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n    #bac_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(2)%20AND%20first_created%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=358768&length=358768&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n    bac_reads_weekly = \"https://www.ebi.ac.uk/ena/data/warehouse/search?query=%22tax_tree(2)%20AND%20first_created%3E=\" + dt.date().strftime(\"%Y-%m-%d\") + \"%20AND%20first_public%3C=\" + oneWeek.date().strftime(\"%Y-%m-%d\") + \"%22&limit=0&length=0&offset=1&display=report&result=read_run&fields=sample_accession,run_accession,fastq_ftp,fastq_md5&download=txt\"\n\n    #Define week string\n    weekNo = dt.date().isocalendar()[1]\n    weekNoStr = str(weekNo)\n\n    #Define output files\n    vir_reads_file_weekly = \"Vir_Reads_Week\" + weekNoStr + \"_\" + dt.date().strftime(\"%Y\") + \".txt\"\n    arch_reads_file_weekly = \"Arc_Reads_Week\" + weekNoStr + \"_\" + dt.date().strftime(\"%Y\") + \".txt\"\n    bac_reads_file_weekly = \"Bac_Reads_Week\" + weekNoStr + \"_\" + dt.date().strftime(\"%Y\") + \".txt\"\n\n    #Download read files\n    urlretrieve(vir_reads_weekly, vir_reads_file_weekly)\n    urlretrieve(arch_reads_weekly, arch_reads_file_weekly)\n    urlretrieve(bac_reads_weekly, bac_reads_file_weekly)\n  \"\"\"",
        "nb_lignes_script": 38,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "allReads"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "executor 'lsf'",
            "maxForks 40",
            "errorStrategy {task.attempt < 3 ? 'retry' : 'ignore'}"
        ],
        "when": "",
        "stub": ""
    },
    "cutReads": {
        "name_process": "cutReads",
        "string_process": "\nprocess cutReads {\n  executor 'lsf'\n  publishDir params.cutTxtWeekDir, mode: 'copy', overwrite: false\n  maxForks 40\n  errorStrategy {task.attempt < 3 ? 'retry' : 'ignore'}\n\n  input:\n  each readWeek from allReads\n\n  output:\n  file \"cut${cutReads}Final\" into cutRead optional true\n\n                                        \n  script:\n  cutReads = readWeek.toString()\n  cutReads = cutReads.substring(cutReads.lastIndexOf(\"/\")+1,cutReads.size())\n  \"\"\"\n  cut -f3 ${readWeek} > cut${cutReads}\n  sed \"s/ftp.sra.ebi.ac.uk\\\\/vol1\\\\//https:\\\\/\\\\/fire.sdo.ebi.ac.uk\\\\/fire\\\\/public\\\\/era\\\\//g\" cut${cutReads} > cut${cutReads}1\n  sed '1d' cut${cutReads}1 > cut${cutReads}2\n  sed \"s/;/\\\\n/g\" cut${cutReads}2 > cut${cutReads}3\n  sed -i '/^\\$/d' cut${cutReads}3\n  sed \"s/;/\\\\n\\\\n/g\" cut${cutReads}3 > cut${cutReads}Final\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  cutReads = readWeek.toString()\n  cutReads = cutReads.substring(cutReads.lastIndexOf(\"/\")+1,cutReads.size())\n  \"\"\"\n  cut -f3 ${readWeek} > cut${cutReads}\n  sed \"s/ftp.sra.ebi.ac.uk\\\\/vol1\\\\//https:\\\\/\\\\/fire.sdo.ebi.ac.uk\\\\/fire\\\\/public\\\\/era\\\\//g\" cut${cutReads} > cut${cutReads}1\n  sed '1d' cut${cutReads}1 > cut${cutReads}2\n  sed \"s/;/\\\\n/g\" cut${cutReads}2 > cut${cutReads}3\n  sed -i '/^\\$/d' cut${cutReads}3\n  sed \"s/;/\\\\n\\\\n/g\" cut${cutReads}3 > cut${cutReads}Final\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "allReads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cutRead"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "executor 'lsf'",
            "publishDir params.cutTxtWeekDir, mode: 'copy', overwrite: false",
            "maxForks 40",
            "errorStrategy {task.attempt < 3 ? 'retry' : 'ignore'}"
        ],
        "when": "",
        "stub": ""
    },
    "downReads": {
        "name_process": "downReads",
        "string_process": "\nprocess downReads {\n  executor 'lsf'\n  cache 'deep'\n  maxForks 10\n  errorStrategy 'retry'\n  maxRetries 1\n  publishDir params.readStore, mode: 'move', overwrite: false\n\n  input:\n  file fireFile from cutRead\n\n  output:\n  file (\"*_1.fastq*.gz\") into (fastq_split1, fastq_split1_15, fastq_split1_krak2) mode flatten optional true\n  file (\"*_2.fastq*.gz\") into (fastq_split2, fastq_split2_15, fastq_split2_krak2) mode flatten optional true\n  file (\"*{1,2,3,4,5,6,7,8,9,0}{1,2,3,4,5,6,7,8,9,0}.fastq.*\") into (fastq_31, fastq_15, fastq_kraken2) mode flatten optional true\n\n  script:\n  week = fireFile.toString()\n  week = week.substring(week.lastIndexOf(\"Week\"), week.length())\n  week = week.replace(\".txtFinal\",\"\")\n  \"\"\"\n  sleep 5\n  if grep -q https:// $fireFile; then\n    /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/parallel --gnu /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/wget --tries=0 --retry-connrefused --continue --timeout=30 --random-wait < $fireFile\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  week = fireFile.toString()\n  week = week.substring(week.lastIndexOf(\"Week\"), week.length())\n  week = week.replace(\".txtFinal\",\"\")\n  \"\"\"\n  sleep 5\n  if grep -q https:// $fireFile; then\n    /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/parallel --gnu /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/wget --tries=0 --retry-connrefused --continue --timeout=30 --random-wait < $fireFile\n  fi\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "cutRead"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "",
            ""
        ],
        "nb_outputs": 3,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "executor 'lsf'",
            "cache 'deep'",
            "maxForks 10",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "publishDir params.readStore, mode: 'move', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "cortexCreation31": {
        "name_process": "cortexCreation31",
        "string_process": "\nprocess cortexCreation31 {\n  publishDir params.ctx31, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  file fastq from fastq_31\n\n  output:\n  file \"$fastqStr$ctxStr\" into singleCtx optional true\n\n  script:\n  fastqStr=fastq.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  ctxStr=\".ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 31 --fq-cutoff 5 -s $fastqStr -1 $fastq $fastqStr$ctxStr\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  fastqStr=fastq.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  ctxStr=\".ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 31 --fq-cutoff 5 -s $fastqStr -1 $fastq $fastqStr$ctxStr\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_31"
        ],
        "nb_inputs": 1,
        "outputs": [
            "singleCtx"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.ctx31, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "cortexCreation31Paired": {
        "name_process": "cortexCreation31Paired",
        "string_process": "\nprocess cortexCreation31Paired {\n  publishDir params.ctx31, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  set val(id), file(read1), file(read2) from reads\n\n  output:\n  file \"$fastqStr$ctxStr\" into pairCtx optional true\n\n  script:\n  fastqStr=read1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  fastqStr=fastqStr.replace(\"_1\",\"\")\n  ctxStr=\".ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 31 --fq-cutoff 5 -s $fastqStr -2 $read1:$read2 $fastqStr$ctxStr\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  fastqStr=read1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  fastqStr=fastqStr.replace(\"_1\",\"\")\n  ctxStr=\".ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 31 --fq-cutoff 5 -s $fastqStr -2 $read1:$read2 $fastqStr$ctxStr\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairCtx"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.ctx31, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "cortexCreation15Paired": {
        "name_process": "cortexCreation15Paired",
        "string_process": "\nprocess cortexCreation15Paired {\n  publishDir params.ctx15, mode: 'move', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  set val(id), file(read1), file(read2) from reads1\n\n  output:\n  file \"$fastqStr$ctxStr\" optional true\n\n  script:\n  fastqStr=read1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  fastqStr=fastqStr.replace(\"_1\",\"\")\n  ctxStr=\".15.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 15 --fq-cutoff 5 -s $fastqStr -2 $read1:$read2 $fastqStr$ctxStr\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  fastqStr=read1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  fastqStr=fastqStr.replace(\"_1\",\"\")\n  ctxStr=\".15.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 15 --fq-cutoff 5 -s $fastqStr -2 $read1:$read2 $fastqStr$ctxStr\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.ctx15, mode: 'move', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "cortexCreation15": {
        "name_process": "cortexCreation15",
        "string_process": "\nprocess cortexCreation15 {\n  publishDir params.ctx15, mode: 'move', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  file fastq from fastq_15\n                               \n\n  output:\n  file \"$fastqStr$ctxStr\" optional true\n\n  script:\n  fastqStr=fastq.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  pairedFile=fastq.toString()\n  pairedFile=pairedFile.replace(\"_1\",\"_2\")\n  pairedOut=fastqStr.replace(\"_1\",\"\")\n  ctxStr=\".15.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 15 --fq-cutoff 5 -s $fastqStr -1 $fastq $fastqStr$ctxStr\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  fastqStr=fastq.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  pairedFile=fastq.toString()\n  pairedFile=pairedFile.replace(\"_1\",\"_2\")\n  pairedOut=fastqStr.replace(\"_1\",\"\")\n  ctxStr=\".15.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 build -f -m $ctxMem$gStr -k 15 --fq-cutoff 5 -s $fastqStr -1 $fastq $fastqStr$ctxStr\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_15"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.ctx15, mode: 'move', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "cortexClean": {
        "name_process": "cortexClean",
        "string_process": "\nprocess cortexClean {\n  publishDir params.clean, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  file ctxSingle from singleCtx\n                               \n\n  output:\n  file \"$fastqStr$cleanStr\" into cleanCtx, buildBloom\n\n  script:\n  fastqStr=ctxSingle.toString()\n  fastqStr=fastqStr.replace(\".ctx\",\"\")\n  cleanStr=\".clean.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 clean -o $fastqStr$cleanStr -f --fallback 5 -m $ctxMem$gStr $ctxSingle\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  fastqStr=ctxSingle.toString()\n  fastqStr=fastqStr.replace(\".ctx\",\"\")\n  cleanStr=\".clean.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 clean -o $fastqStr$cleanStr -f --fallback 5 -m $ctxMem$gStr $ctxSingle\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singleCtx"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleanCtx",
            "buildBloom"
        ],
        "nb_outputs": 2,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.clean, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "cortexCleanPaired": {
        "name_process": "cortexCleanPaired",
        "string_process": "\nprocess cortexCleanPaired {\n  publishDir params.clean, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  file ctxPair from pairCtx\n                               \n\n  output:\n  file \"$fastqStr$cleanStr\" into cleanCtx1, buildBloom1\n\n  script:\n  fastqStr=ctxPair.toString()\n  fastqStr=fastqStr.replace(\".ctx\",\"\")\n  cleanStr=\".clean.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 clean -o $fastqStr$cleanStr -f --fallback 5 -m $ctxMem$gStr $ctxPair\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  fastqStr=ctxPair.toString()\n  fastqStr=fastqStr.replace(\".ctx\",\"\")\n  cleanStr=\".clean.ctx\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 clean -o $fastqStr$cleanStr -f --fallback 5 -m $ctxMem$gStr $ctxPair\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairCtx"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleanCtx1",
            "buildBloom1"
        ],
        "nb_outputs": 2,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.clean, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "krak2": {
        "name_process": "krak2",
        "string_process": "\nprocess krak2 {\n  publishDir params.krak, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 15\n  errorStrategy 'retry'\n  maxRetries 3\n  memory { 37.GB * task.attempt }\n\n  input:\n  file fastq1 from fastq_kraken2\n                               \n\n  output:\n  file \"$fastqStr$krak2Str\" optional true\n  file \"$fastqStr$krakRep\" into singleKrakRep optional true\n\n  script:\n  fastqStr=fastq1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  krakRep=\".kreport2\"\n  krak2Str=\".kraken2\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/kraken2 --db /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree --threads 10 --report $fastqStr$krakRep $fastq1 > $fastqStr$krak2Str\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  fastqStr=fastq1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  krakRep=\".kreport2\"\n  krak2Str=\".kraken2\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/kraken2 --db /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree --threads 10 --report $fastqStr$krakRep $fastq1 > $fastqStr$krak2Str\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "fastq_kraken2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "singleKrakRep"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.krak, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 15",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory { 37.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "krak2Paired": {
        "name_process": "krak2Paired",
        "string_process": "\nprocess krak2Paired {\n  publishDir params.krak, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 15\n  errorStrategy 'retry'\n  maxRetries 3\n  memory { 37.GB * task.attempt }\n\n  input:\n  set val(id), file(read1), file(read2) from reads2\n\n  output:\n  file \"$fastqStr$krak2Str\" optional true\n  file \"$fastqStr$krakRep\" into pairedKrakRep optional true\n\n  script:\n  fastqStr=read1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  fastqStr=fastqStr.replace(\"_1\",\"\")\n  krakRep=\".kreport2\"\n  krak2Str=\".kraken2\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/kraken2 --db /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree --threads 10 --report $fastqStr$krakRep --paired $read1 $read2 > $fastqStr$krak2Str\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  fastqStr=read1.toString()\n  fastqStr=fastqStr.substring(0, fastqStr.indexOf(\".\"))\n  fastqStr=fastqStr.replace(\"_1\",\"\")\n  krakRep=\".kreport2\"\n  krak2Str=\".kraken2\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/kraken2 --db /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree --threads 10 --report $fastqStr$krakRep --paired $read1 $read2 > $fastqStr$krak2Str\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "reads2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairedKrakRep"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.krak, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 15",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory { 37.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "brackenSingle": {
        "name_process": "brackenSingle",
        "string_process": "\nprocess brackenSingle {\n  publishDir params.brack, mode: 'move', overwrite: false\n  executor 'lsf'\n  maxForks 15\n  errorStrategy 'ignore'\n  memory '10 GB'\n\n  input:\n  file krakIn from singleKrakRep\n                               \n\n  output:\n  file \"$fastqStr$brackStr\" optional true\n\n  script:\n  fastqStr=krakIn.toString()\n  fastqStr=fastqStr.replace(\".kreport2\",\"\")\n  brackStr=\".bracken\"\n\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/python /hps/covid19_nobackup/research/ena/blaise/miniconda3/bin/est_abundance.py -i $krakIn -k /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree/database2500mers.kmer_distrib -o $fastqStr$brackStr -l 'S' -t 10\n  \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "  fastqStr=krakIn.toString()\n  fastqStr=fastqStr.replace(\".kreport2\",\"\")\n  brackStr=\".bracken\"\n\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/python /hps/covid19_nobackup/research/ena/blaise/miniconda3/bin/est_abundance.py -i $krakIn -k /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree/database2500mers.kmer_distrib -o $fastqStr$brackStr -l 'S' -t 10\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singleKrakRep"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.brack, mode: 'move', overwrite: false",
            "executor 'lsf'",
            "maxForks 15",
            "errorStrategy 'ignore'",
            "memory '10 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "brackenPaired": {
        "name_process": "brackenPaired",
        "string_process": "\nprocess brackenPaired {\n  publishDir params.brack, mode: 'move', overwrite: false\n  executor 'lsf'\n  maxForks 15\n  errorStrategy 'ignore'\n  memory '10 GB'\n\n  input:\n  file krakIn from pairedKrakRep\n\n  output:\n  file \"$fastqStr$brackStr\" optional true\n\n  script:\n  fastqStr=krakIn.toString()\n  fastqStr=fastqStr.replace(\".kreport2\",\"\")\n  brackStr=\".bracken\"\n\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/python /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/est_abundance.py -i $krakIn -k /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree/database2500mers.kmer_distrib -o $fastqStr$brackStr -l 'S' -t 10\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  fastqStr=krakIn.toString()\n  fastqStr=fastqStr.replace(\".kreport2\",\"\")\n  brackStr=\".bracken\"\n\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/python /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/est_abundance.py -i $krakIn -k /hps/covid19_nobackup2/research/ena/blaise/bigsi/cfg/kraken2-microbial-fatfree/database2500mers.kmer_distrib -o $fastqStr$brackStr -l 'S' -t 10\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairedKrakRep"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.brack, mode: 'move', overwrite: false",
            "executor 'lsf'",
            "maxForks 15",
            "errorStrategy 'ignore'",
            "memory '10 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "unitigCreation": {
        "name_process": "unitigCreation",
        "string_process": "\nprocess unitigCreation {\n  publishDir params.unitigs, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  file singCtx from cleanCtx\n\n  output:\n  file \"$singleFastqStr$unitigStr\" into uniSingle optional true\n\n  script:\n  singleFastqStr=singCtx.toString()\n  singleFastqStr=singleFastqStr.replace(\".clean.ctx\",\"\")\n  unitigStr=\".unitigs.txt\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 unitigs -o $singleFastqStr$unitigStr -m $ctxMem$gStr $singCtx\n  \"\"\"\n  }",
        "nb_lignes_process": 23,
        "string_script": "  singleFastqStr=singCtx.toString()\n  singleFastqStr=singleFastqStr.replace(\".clean.ctx\",\"\")\n  unitigStr=\".unitigs.txt\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 unitigs -o $singleFastqStr$unitigStr -m $ctxMem$gStr $singCtx\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cleanCtx"
        ],
        "nb_inputs": 1,
        "outputs": [
            "uniSingle"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.unitigs, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "unitigCreationPaired": {
        "name_process": "unitigCreationPaired",
        "string_process": "\nprocess unitigCreationPaired {\n  publishDir params.unitigs, mode: 'copy', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 15.GB * task.attempt }\n\n  input:\n  file pairedCtx from cleanCtx1\n\n  output:\n  file \"$pairedFastqStr$unitigStr\" into uniPair optional true\n\n  script:\n  pairedFastqStr=pairedCtx.toString()\n  pairedFastqStr=pairedFastqStr.replace(\".clean.ctx\",\"\")\n  unitigStr=\".unitigs.txt\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 unitigs -o $pairedFastqStr$unitigStr -m $ctxMem$gStr $pairedCtx\n  \"\"\"\n  }",
        "nb_lignes_process": 23,
        "string_script": "  pairedFastqStr=pairedCtx.toString()\n  pairedFastqStr=pairedFastqStr.replace(\".clean.ctx\",\"\")\n  unitigStr=\".unitigs.txt\"\n  ctxMem=10*task.attempt\n  gStr=\"G\"\n  \"\"\"\n  /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/mccortex31 unitigs -o $pairedFastqStr$unitigStr -m $ctxMem$gStr $pairedCtx\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cleanCtx1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "uniPair"
        ],
        "nb_outputs": 1,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.unitigs, mode: 'copy', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 15.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "sourMash": {
        "name_process": "sourMash",
        "string_process": "\nprocess sourMash {\n  publishDir params.sour, mode: 'move', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 10.GB * task.attempt }\n\n  input:\n  file sourIn from uniSingle\n\n  output:\n  file \"$fastqStr$sigStr\"\n\n  script:\n  fastqStr=sourIn.toString()\n  fastqStr=fastqStr.replace(\".unitigs.txt\",\"\")\n  sigStr=\".sig\"\n  \"\"\"\n  if [[ -s $sourIn ]]; then\n      /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/sourmash compute $sourIn -o $fastqStr$sigStr\n  else\n     touch $fastqStr$sigStr;\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  fastqStr=sourIn.toString()\n  fastqStr=fastqStr.replace(\".unitigs.txt\",\"\")\n  sigStr=\".sig\"\n  \"\"\"\n  if [[ -s $sourIn ]]; then\n      /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/sourmash compute $sourIn -o $fastqStr$sigStr\n  else\n     touch $fastqStr$sigStr;\n  fi\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "uniSingle"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.sour, mode: 'move', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 10.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "sourMashPaired": {
        "name_process": "sourMashPaired",
        "string_process": "\nprocess sourMashPaired {\n  publishDir params.sour, mode: 'move', overwrite: false\n  executor 'lsf'\n  maxForks 30\n  errorStrategy 'retry'\n  maxRetries 8\n  memory { 10.GB * task.attempt }\n\n  input:\n  file sourIn from uniPair\n\n  output:\n  file \"$fastqStr$pairedSigStr\"\n\n  script:\n  fastqStr=sourIn.toString()\n  fastqStr=fastqStr.replace(\".unitigs.txt\",\"\")\n  pairedSigStr=\".sig\"\n  \"\"\"\n  if [[ -s $sourIn ]]; then\n      /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/sourmash compute $sourIn -o $fastqStr$pairedSigStr;\n  else\n     touch $fastqStr$pairedSigStr;\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  fastqStr=sourIn.toString()\n  fastqStr=fastqStr.replace(\".unitigs.txt\",\"\")\n  pairedSigStr=\".sig\"\n  \"\"\"\n  if [[ -s $sourIn ]]; then\n      /gpfs/nobackup/ena_flash_test/blaise/bigsi/miniconda3/bin/sourmash compute $sourIn -o $fastqStr$pairedSigStr;\n  else\n     touch $fastqStr$pairedSigStr;\n  fi\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "uniPair"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alakob__ena-bracken-annotation",
        "directive": [
            "publishDir params.sour, mode: 'move', overwrite: false",
            "executor 'lsf'",
            "maxForks 30",
            "errorStrategy 'retry'",
            "maxRetries 8",
            "memory { 10.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    }
}
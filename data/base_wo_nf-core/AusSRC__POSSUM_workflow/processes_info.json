{
    "pre_check": {
        "name_process": "pre_check",
        "string_process": "\nprocess pre_check {\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/bin/bash\n\n        # Check image cube exists\n        [ ! -f ${params.IMAGE_CUBE} ] && { echo \"Image cube specified by params.SOFIA_PARAMETER_FILE not found\"; exit 1; }\n\n        # Check output and header directories exist\n        [ ! -d ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY} ] && mkdir ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY}\n        [ ! -d ${params.WORKDIR}/${params.REPROJECTION_OUTPUT_DIRECTORY} ] && mkdir ${params.WORKDIR}/${params.REPROJECTION_OUTPUT_DIRECTORY}\n\n        # Clear headers if any exist\n        rm ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY}/*\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        #!/bin/bash\n\n        # Check image cube exists\n        [ ! -f ${params.IMAGE_CUBE} ] && { echo \"Image cube specified by params.SOFIA_PARAMETER_FILE not found\"; exit 1; }\n\n        # Check output and header directories exist\n        [ ! -d ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY} ] && mkdir ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY}\n        [ ! -d ${params.WORKDIR}/${params.REPROJECTION_OUTPUT_DIRECTORY} ] && mkdir ${params.WORKDIR}/${params.REPROJECTION_OUTPUT_DIRECTORY}\n\n        # Clear headers if any exist\n        rm ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY}/*\n        \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generate_healpix_headers": {
        "name_process": "generate_healpix_headers",
        "string_process": "\nprocess generate_healpix_headers {\n    container = params.POSSUM_TILING_COMPONENT\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val image_cube\n        val pre_check\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        python3 -u /app/healpix_headers.py \\\n            -i ${image_cube} \\\n            -o ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY} \\\n            -n ${params.NSIDE}\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        python3 -u /app/healpix_headers.py \\\n            -i ${image_cube} \\\n            -o ${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY} \\\n            -n ${params.NSIDE}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "image_cube",
            "pre_check"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "container = params.POSSUM_TILING_COMPONENT",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    },
    "get_healpix_header_files": {
        "name_process": "get_healpix_header_files",
        "string_process": "\nprocess get_healpix_header_files {\n    executor = 'local'\n\n    input:\n        val generate_healpix_headers\n\n    output:\n        val header_files, emit: header_files\n\n    exec:\n        header_files = file(\"${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY}/*.hdr\")\n}",
        "nb_lignes_process": 11,
        "string_script": "        header_files = file(\"${params.WORKDIR}/${params.TILING_OUTPUT_DIRECTORY}/*.hdr\")",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "generate_healpix_headers"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "executor = 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "montage": {
        "name_process": "montage",
        "string_process": "\nprocess montage {\n    errorStrategy 'ignore'\n    container = params.MONTAGE_IMAGE\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val image_cube\n        val header\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/bin/bash\n\n        mProjectCube ${image_cube} ${params.WORKDIR}/${params.REPROJECTION_OUTPUT_DIRECTORY}/test.reprojected.fits ${header}\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        #!/bin/bash\n\n        mProjectCube ${image_cube} ${params.WORKDIR}/${params.REPROJECTION_OUTPUT_DIRECTORY}/test.reprojected.fits ${header}\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "image_cube",
            "header"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "errorStrategy 'ignore'",
            "container = params.MONTAGE_IMAGE",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    },
    "generate_config": {
        "name_process": "generate_config",
        "string_process": "\nprocess generate_config {\n    container = params.WALLABY_COMPONENTS_IMAGE\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val cubes\n\n    output:\n        stdout emit: linmos_config\n\n    script:\n        \"\"\"\n        python3 -u /app/generate_linmos_config.py \\\n            -i \"$cubes\" \\\n            -f ${params.WORKDIR}/${params.LINMOS_OUTPUT_IMAGE_CUBE} \\\n            -c ${params.WORKDIR}/${params.LINMOS_CONFIG_FILENAME}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        python3 -u /app/generate_linmos_config.py \\\n            -i \"$cubes\" \\\n            -f ${params.WORKDIR}/${params.LINMOS_OUTPUT_IMAGE_CUBE} \\\n            -c ${params.WORKDIR}/${params.LINMOS_CONFIG_FILENAME}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cubes"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "container = params.WALLABY_COMPONENTS_IMAGE",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    },
    "linmos": {
        "name_process": "linmos",
        "string_process": "\nprocess linmos {\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n    clusterOptions = params.LINMOS_CLUSTER_OPTIONS\n\n    input:\n        val linmos_config\n    \n    output:\n        val \"${params.WORKDIR}/${params.LINMOS_OUTPUT_IMAGE_CUBE}.fits\", emit: mosaicked_cube\n\n    script:\n        \"\"\"\n        #!/bin/bash\n\n        singularity pull ${params.SINGULARITY_CACHEDIR}/csirocass_yandasoft.img ${params.LINMOS_IMAGE}\n        mpirun --mca btl_tcp_if_exclude docker0,lo \\\n            singularity exec ${params.SINGULARITY_CACHEDIR}/csirocass_yandasoft.img \\\n            linmos-mpi -c $linmos_config\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        #!/bin/bash\n\n        singularity pull ${params.SINGULARITY_CACHEDIR}/csirocass_yandasoft.img ${params.LINMOS_IMAGE}\n        mpirun --mca btl_tcp_if_exclude docker0,lo \\\n            singularity exec ${params.SINGULARITY_CACHEDIR}/csirocass_yandasoft.img \\\n            linmos-mpi -c $linmos_config\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Singularity Hub"
        ],
        "tools_url": [
            "https://bio.tools/singularity_hub"
        ],
        "tools_dico": [
            {
                "name": "Singularity Hub",
                "uri": "https://bio.tools/singularity_hub",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3524",
                            "term": "Simulation experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Framework to build and deploy Singularity containers for mobility of compute, and the singularity-python software with novel metrics for assessing reproducibility of such containers.",
                "homepage": "https://singularity-hub.org/"
            }
        ],
        "inputs": [
            "linmos_config"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "containerOptions = '--bind /mnt/shared:/mnt/shared'",
            "clusterOptions = params.LINMOS_CLUSTER_OPTIONS"
        ],
        "when": "",
        "stub": ""
    },
    "frion_predict": {
        "name_process": "frion_predict",
        "string_process": "\nprocess frion_predict {\n    container = params.IONOSPHERIC_CORRECTION_IMAGE\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val q_cube\n\n    output:\n        val \"${params.FRION_PREDICT_OUTFILE}\", emit: file\n\n                                                                       \n                                                                            \n                        \n    script:\n        \"\"\"\n        frion_predict -F $q_cube -s ${params.FRION_PREDICT_OUTFILE}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        frion_predict -F $q_cube -s ${params.FRION_PREDICT_OUTFILE}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "q_cube"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "container = params.IONOSPHERIC_CORRECTION_IMAGE",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    },
    "frion_correct": {
        "name_process": "frion_correct",
        "string_process": "\nprocess frion_correct {\n    container = params.IONOSPHERIC_CORRECTION_IMAGE\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val q_cube\n        val u_cube\n        val predict_file\n\n    output:\n        val \"${params.FRION_Q_OUTPUT_CUBE}\", emit: q_cube_output\n        val \"${params.FRION_U_OUTPUT_CUBE}\", emit: u_cube_output\n\n                                                                               \n                                                                         \n                                                  \n                             \n                                                                                               \n                                                                                     \n    script:\n        \"\"\"\n        frion_correct -L $q_cube $u_cube $predict_file \\\n            ${params.FRION_Q_OUTPUT_CUBE} ${params.FRION_U_OUTPUT_CUBE}\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        frion_correct -L $q_cube $u_cube $predict_file \\\n            ${params.FRION_Q_OUTPUT_CUBE} ${params.FRION_U_OUTPUT_CUBE}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "q_cube",
            "u_cube",
            "predict_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "container = params.IONOSPHERIC_CORRECTION_IMAGE",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    },
    "casda_download": {
        "name_process": "casda_download",
        "string_process": "\nprocess casda_download {\n    container = params.WALLABY_COMPONENTS_IMAGE\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val sbid\n\n    output:\n        stdout emit: cube\n\n    script:\n        \"\"\"\n        python3 -u /app/casda_download.py \\\n            -i $sbid \\\n            -o ${params.WORKDIR} \\\n            -u '${params.CASDA_USERNAME}' \\\n            -p '${params.CASDA_PASSWORD}' \\\n            -ct '${params.CASDA_CUBE_TYPE}' \\\n            -cf '${params.CASDA_CUBE_FILENAME}' \\\n            -wt '${params.CASDA_WEIGHTS_TYPE}' \\\n            -wf '${params.CASDA_WEIGHTS_FILENAME}'\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        python3 -u /app/casda_download.py \\\n            -i $sbid \\\n            -o ${params.WORKDIR} \\\n            -u '${params.CASDA_USERNAME}' \\\n            -p '${params.CASDA_PASSWORD}' \\\n            -ct '${params.CASDA_CUBE_TYPE}' \\\n            -cf '${params.CASDA_CUBE_FILENAME}' \\\n            -wt '${params.CASDA_WEIGHTS_TYPE}' \\\n            -wf '${params.CASDA_WEIGHTS_FILENAME}'\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sbid"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "container = params.WALLABY_COMPONENTS_IMAGE",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    },
    "checksum": {
        "name_process": "checksum",
        "string_process": "\nprocess checksum {\n    container = params.WALLABY_COMPONENTS_IMAGE\n    containerOptions = '--bind /mnt/shared:/mnt/shared'\n\n    input:\n        val cube\n\n    output:\n        stdout emit: cube\n\n    script:\n        \"\"\"\n        python3 -u /app/verify_checksum.py $cube\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        python3 -u /app/verify_checksum.py $cube\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cube"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__POSSUM_workflow",
        "directive": [
            "container = params.WALLABY_COMPONENTS_IMAGE",
            "containerOptions = '--bind /mnt/shared:/mnt/shared'"
        ],
        "when": "",
        "stub": ""
    }
}
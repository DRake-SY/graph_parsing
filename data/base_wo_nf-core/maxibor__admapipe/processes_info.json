{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$name\"\n\n    conda 'bioconda::fastqc'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/fastqc\", mode: 'copy'\n\n    errorStrategy 'ignore'\n\n    input:\n        set val(name), file(reads) from reads_fastqc\n\n    output:\n        file '*_fastqc.{zip,html}' into fastqc_results\n    script:\n        \"\"\"\n        fastqc -q $reads\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        fastqc -q $reads\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "reads_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::fastqc'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/fastqc\", mode: 'copy'",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "adapter_removal_ancient_dna_PE": {
        "name_process": "adapter_removal_ancient_dna_PE",
        "string_process": "\nprocess adapter_removal_ancient_dna_PE {\n    tag \"$name\"\n\n    conda 'bioconda::adapterremoval'\n\n    label 'normal'\n\n    cpus params.trimmingCPU\n\n    publishDir \"${params.results}/trimmed\", mode: 'copy'\n\n    input:\n        set val(name), file(reads) from reads_to_trim\n\n    output:\n        set val(name), file('*.collapsed.fastq') into trimmed_reads_assembly, trimmed_reads_mapping, trimmed_reads_kraken, trimmed_reads_metaphlan, trimmed_reads_malt\n        set val(name), file(\"*.settings\") into adapter_removal_results\n\n    script:\n        out1 = name+\".pair1.discarded.fastq\"\n        out2 = name+\".pair2.discarded.fastq\"\n        col_out = name+\".collapsed.fastq\"\n        \"\"\"\n        AdapterRemoval --basename $name --file1 ${reads[0]} --file2 ${reads[1]} --trimns --trimqualities --collapse --output1 $out1 --output2 $out2 --outputcollapsed $col_out --threads ${task.cpus} --qualitybase ${params.phred}\n        \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "        out1 = name+\".pair1.discarded.fastq\"\n        out2 = name+\".pair2.discarded.fastq\"\n        col_out = name+\".collapsed.fastq\"\n        \"\"\"\n        AdapterRemoval --basename $name --file1 ${reads[0]} --file2 ${reads[1]} --trimns --trimqualities --collapse --output1 $out1 --output2 $out2 --outputcollapsed $col_out --threads ${task.cpus} --qualitybase ${params.phred}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_to_trim"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_reads_assembly",
            "trimmed_reads_mapping",
            "trimmed_reads_kraken",
            "trimmed_reads_metaphlan",
            "trimmed_reads_malt",
            "adapter_removal_results"
        ],
        "nb_outputs": 6,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::adapterremoval'",
            "label 'normal'",
            "cpus params.trimmingCPU",
            "publishDir \"${params.results}/trimmed\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "megahit_assembly": {
        "name_process": "megahit_assembly",
        "string_process": "\nprocess megahit_assembly{\n    tag \"$name\"\n\n    conda 'bioconda::megahit'\n\n    label 'normal'\n\n    cpus params.megahitCPU\n\n    publishDir \"${params.results}/assembly\", mode: 'copy'\n\n    input:\n        set val(name), file(merged) from trimmed_reads_assembly\n    output:\n        set val(name), file (\"megahit_out/*.contigs.fa\") into contigs_mapping, contigs_filter\n    script:\n        \"\"\"\n        megahit -r $merged -t ${task.cpus} --out-prefix $name\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        megahit -r $merged -t ${task.cpus} --out-prefix $name\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MEGAHIT"
        ],
        "tools_url": [
            "https://bio.tools/megahit"
        ],
        "tools_dico": [
            {
                "name": "MEGAHIT",
                "uri": "https://bio.tools/megahit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Single node assembler for large and complex metagenomics NGS reads, such as soil. It makes use of succinct de Bruijn graph to achieve low memory usage, whereas its goal is not to make memory usage as low as possible.",
                "homepage": "https://github.com/voutcn/megahit"
            }
        ],
        "inputs": [
            "trimmed_reads_assembly"
        ],
        "nb_inputs": 1,
        "outputs": [
            "contigs_mapping",
            "contigs_filter"
        ],
        "nb_outputs": 2,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::megahit'",
            "label 'normal'",
            "cpus params.megahitCPU",
            "publishDir \"${params.results}/assembly\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie_index_contigs": {
        "name_process": "bowtie_index_contigs",
        "string_process": "\nprocess bowtie_index_contigs{\n    tag \"$name\"\n\n    conda 'bioconda::bowtie2'\n\n    label 'normal'\n\n    cpus params.bowtieCPU\n\n    publishDir \"${params.results}/bowtie_index\", mode: 'copy'\n\n    input:\n        set val(name), file(contig) from contigs_mapping\n    output:\n        set val(name), file(\"*.bt2\") into bt_index\n    script:\n        \"\"\"\n        bowtie2-build --threads ${task.cpus} $contig $name\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        bowtie2-build --threads ${task.cpus} $contig $name\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs_mapping"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bt_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::bowtie2'",
            "label 'normal'",
            "cpus params.bowtieCPU",
            "publishDir \"${params.results}/bowtie_index\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "align_reads_to_contigs": {
        "name_process": "align_reads_to_contigs",
        "string_process": "\nprocess align_reads_to_contigs{\n    tag \"$name\"\n\n    conda 'bioconda::bowtie2 bioconda::samtools'\n\n    label 'normal'\n\n    cpus params.bowtieCPU\n\n    publishDir \"${params.results}/alignment\", mode: 'copy'\n\n    input:\n        set val(name), file(reads), file(contig) from trimmed_reads_mapping.join(bt_index)\n    output:\n        set val(name), file(\"*.sorted.bam\") into alignment_to_index, alignment_to_coverage, alignment_to_sam\n    script:\n        outfile = name+\".sorted.bam\"\n        \"\"\"\n        bowtie2 -x $name -U $reads --very-fast --threads ${task.cpus} | samtools view -S -b -F 4 - | samtools sort - > $outfile\n        \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "        outfile = name+\".sorted.bam\"\n        \"\"\"\n        bowtie2 -x $name -U $reads --very-fast --threads ${task.cpus} | samtools view -S -b -F 4 - | samtools sort - > $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "trimmed_reads_mapping",
            "bt_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "alignment_to_index",
            "alignment_to_coverage",
            "alignment_to_sam"
        ],
        "nb_outputs": 3,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::bowtie2 bioconda::samtools'",
            "label 'normal'",
            "cpus params.bowtieCPU",
            "publishDir \"${params.results}/alignment\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bam_index": {
        "name_process": "bam_index",
        "string_process": "\nprocess bam_index {\n    tag \"$name\"\n\n    conda 'bioconda::samtools'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/alignment\", mode: 'copy'\n\n    input:\n        set val(name), file(bam) from alignment_to_index\n    output:\n        set val(name), file(\"*.bam.bai\")\n    script:\n        \"\"\"\n        samtools index $bam\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        samtools index $bam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "alignment_to_index"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::samtools'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/alignment\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bam2sam": {
        "name_process": "bam2sam",
        "string_process": "\nprocess bam2sam {\n    tag \"$name\"\n\n    conda 'bioconda::samtools'\n\n    label 'normal'\n\n    cpus 1\n\n    input:\n        set val(name), file(bam) from alignment_to_sam\n    output:\n        set val(name), file(\"*.sam\") into alignment_sam\n    script:\n        outfile = name+\".sam\"\n        \"\"\"\n        samtools view -sB -F 4 $bam > $outfile\n        \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "        outfile = name+\".sam\"\n        \"\"\"\n        samtools view -sB -F 4 $bam > $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "alignment_to_sam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alignment_sam"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::samtools'",
            "label 'normal'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "bedtools_genomecov": {
        "name_process": "bedtools_genomecov",
        "string_process": "\nprocess bedtools_genomecov {\n    tag \"$name\"\n\n    conda 'bioconda::bedtools'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/coverage\", mode: 'copy'\n\n    input:\n        set val(name), file(bam) from alignment_to_coverage\n    output:\n        set val(name), file(\"*.bed\") into bedfile\n    script:\n        outfile = name+\".bed\"\n        \"\"\"\n        bedtools genomecov -ibam $bam -d > $outfile\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".bed\"\n        \"\"\"\n        bedtools genomecov -ibam $bam -d > $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "alignment_to_coverage"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bedfile"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::bedtools'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/coverage\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_contigs": {
        "name_process": "filter_contigs",
        "string_process": "\nprocess filter_contigs {\n    tag \"$name\"\n\n    conda 'python=3.6 numpy'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/coverage\", mode: 'copy', pattern: \"*.contig_coverage.txt\"\n\n    input:\n        set val(name), file(bed) from bedfile\n    output:\n        set val(name), file(\"*.contig_coverage.txt\") into contig_coverage\n        set val(name), file(\"*.filtered_contigs_list.txt\") into filtered_contigs_sam, filtered_contigs_fasta\n    script:\n        outbed = name+\".contig_coverage.txt\"\n        contig_list = name+\".filtered_contigs_list.txt\"\n        \"\"\"\n        poscov2featurecov $bed -m ${params.min_coverage} > $outbed\n        awk '{print \\$1}' $outbed > $contig_list\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        outbed = name+\".contig_coverage.txt\"\n        contig_list = name+\".filtered_contigs_list.txt\"\n        \"\"\"\n        poscov2featurecov $bed -m ${params.min_coverage} > $outbed\n        awk '{print \\$1}' $outbed > $contig_list\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bedfile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "contig_coverage",
            "filtered_contigs_sam",
            "filtered_contigs_fasta"
        ],
        "nb_outputs": 3,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'python=3.6 numpy'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/coverage\", mode: 'copy', pattern: \"*.contig_coverage.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_fasta_coverage": {
        "name_process": "filter_fasta_coverage",
        "string_process": "\nprocess filter_fasta_coverage{\n    tag \"$name\"\n\n    conda 'python=3.6'\n\n    label 'normal'\n\n    cpus 1\n\n    input:\n        set val(name), file(contig), file(filt_contig) from contigs_filter.join(filtered_contigs_fasta)\n    output:\n        set val(name), file(\"*.filtered_contigs.fa\") into filtered_fasta_coverage\n    script:\n        outfile = name+\".filtered_contigs.fa\"\n        \"\"\"\n        filterFastaByName $contig $filt_contig -o $outfile\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        outfile = name+\".filtered_contigs.fa\"\n        \"\"\"\n        filterFastaByName $contig $filt_contig -o $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs_filter",
            "filtered_contigs_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "filtered_fasta_coverage"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'python=3.6'",
            "label 'normal'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "filter_fasta_length": {
        "name_process": "filter_fasta_length",
        "string_process": "\nprocess filter_fasta_length {\n    tag \"$name\"\n\n    conda 'python=3.6'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/assembly\", mode: 'copy'\n\n    input:\n        set val(name), file(fasta) from filtered_fasta_coverage\n    output:\n        set val(name), file(\"*.filtered.fa\") into fasta2megablast\n    script:\n        \"\"\"\n        filterFastaByLength -min ${params.min_length} $fasta\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        filterFastaByLength -min ${params.min_length} $fasta\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filtered_fasta_coverage"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fasta2megablast"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'python=3.6'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/assembly\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "kraken": {
        "name_process": "kraken",
        "string_process": "\nprocess kraken {\n    tag \"$name\"\n\n    conda 'bioconda::kraken'\n\n    label 'normal'\n\n    cpus params.krakenCPU\n\n    publishDir \"${params.results}/kraken\", mode: 'copy'\n\n    input:\n        set val(name), file(fasta) from trimmed_reads_kraken\n    output:\n        set val(name), file(\"*.kraken\") into kraken_output\n    script:\n        outfile = name+\".kraken\"\n        \"\"\"\n        kraken --db ${params.krakendb} --threads ${task.cpus} --fastq-input $fasta > $outfile\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".kraken\"\n        \"\"\"\n        kraken --db ${params.krakendb} --threads ${task.cpus} --fastq-input $fasta > $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Kraken"
        ],
        "tools_url": [
            "https://bio.tools/kraken"
        ],
        "tools_dico": [
            {
                "name": "Kraken",
                "uri": "https://bio.tools/kraken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "System for assigning taxonomic labels to short DNA sequences, usually obtained through metagenomic studies. Previous attempts by other bioinformatics software to accomplish this task have often used sequence alignment or machine learning techniques that were quite slow, leading to the development of less sensitive but much faster abundance estimation programs. It aims to achieve high sensitivity and high speed by utilizing exact alignments of k-mers and a novel classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken/"
            }
        ],
        "inputs": [
            "trimmed_reads_kraken"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kraken_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::kraken'",
            "label 'normal'",
            "cpus params.krakenCPU",
            "publishDir \"${params.results}/kraken\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "kraken_report": {
        "name_process": "kraken_report",
        "string_process": "\nprocess kraken_report {\n    tag \"$name\"\n\n    conda 'bioconda::kraken'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/kraken\", mode: 'copy'\n\n    input:\n        set val(name), file(kraken_out) from kraken_output\n    output:\n        set val(name), file(\"*.kraken.report\") into kraken_res\n    script:\n        outfile = name+\".kraken.report\"\n        \"\"\"\n        kraken-report --db ${params.krakendb} $kraken_out > $outfile\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".kraken.report\"\n        \"\"\"\n        kraken-report --db ${params.krakendb} $kraken_out > $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kraken_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::kraken'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/kraken\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "metaphlan": {
        "name_process": "metaphlan",
        "string_process": "\nprocess metaphlan {\n    tag \"$name\"\n\n    conda 'bioconda::metaphlan2'\n\n    label 'normal'\n\n    cpus params.metaphlanCPU\n\n    publishDir \"${params.results}/kraken\", mode: 'copy'\n\n    input:\n        set val(name), file(fasta) from trimmed_reads_metaphlan\n    output:\n        set val(name), file(\"*.metaphlan.out\") into metaphlan_res\n    script:\n        outfile = name+\".metaphlan.out\"\n        \"\"\"\n        metaphlan2.py --nproc ${params.metaphlanCPU} --input_type fastq --output_file $outfile $fasta\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".metaphlan.out\"\n        \"\"\"\n        metaphlan2.py --nproc ${params.metaphlanCPU} --input_type fastq --output_file $outfile $fasta\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_reads_metaphlan"
        ],
        "nb_inputs": 1,
        "outputs": [
            "metaphlan_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::metaphlan2'",
            "label 'normal'",
            "cpus params.metaphlanCPU",
            "publishDir \"${params.results}/kraken\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "megablast": {
        "name_process": "megablast",
        "string_process": "\nprocess megablast {\n    tag \"$name\"\n\n    conda 'bioconda::blast'\n\n    label 'normal'\n\n    cpus params.megablastCPU\n\n    publishDir \"${params.results}/megablast\", mode: 'copy'\n\n    input:\n        set val(name), file(fasta) from fasta2megablast\n    output:\n        set val(name), file(\"*.blast\") into blast_output\n    script:\n        outfile = name+\".blast\"\n        \"\"\"\n        blastn -task megablast -num_threads ${task.cpus} -outfmt 6 -db ${params.blastdb} -query $fasta -out $outfile\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".blast\"\n        \"\"\"\n        blastn -task megablast -num_threads ${task.cpus} -outfmt 6 -db ${params.blastdb} -query $fasta -out $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "fasta2megablast"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blast_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bioconda::blast'",
            "label 'normal'",
            "cpus params.megablastCPU",
            "publishDir \"${params.results}/megablast\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "basta_from_blast": {
        "name_process": "basta_from_blast",
        "string_process": "\nprocess basta_from_blast {\n    tag \"$name\"\n\n    conda 'bnoon::leveldb bnoon:plyvel bioconda::krona'\n\n    errorStrategy 'ignore'\n\n    label 'normal'\n\n    maxForks 1\n\n    cpus 1\n\n    publishDir \"${params.results}/megablast\", mode: 'copy'\n\n\n    input:\n        set val(name), file(blast_out) from blast_output\n    output:\n        set val(name), file(\"*.blast.basta\") into blast_res\n    script:\n        outfile = name+\".blast.basta\"\n        basta_max = 30\n        basta_id = 97\n        basta_min = 1\n        basta_len = 300\n        \"\"\"\n        $basta sequence -t all -n $basta_max -m $basta_min -i $basta_id -l $basta_len -x True -d ${params.bastadb} $blast_out $outfile  gb\n        \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "        outfile = name+\".blast.basta\"\n        basta_max = 30\n        basta_id = 97\n        basta_min = 1\n        basta_len = 300\n        \"\"\"\n        $basta sequence -t all -n $basta_max -m $basta_min -i $basta_id -l $basta_len -x True -d ${params.bastadb} $blast_out $outfile  gb\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blast_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blast_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bnoon::leveldb bnoon:plyvel bioconda::krona'",
            "errorStrategy 'ignore'",
            "label 'normal'",
            "maxForks 1",
            "cpus 1",
            "publishDir \"${params.results}/megablast\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "malt": {
        "name_process": "malt",
        "string_process": "\nprocess malt {\n    tag \"$name\"\n\n    label 'very_big_mem'\n\n    cpus params.maltCPU\n\n    publishDir \"${params.results}/malt\", mode: 'copy'\n\n    input:\n        set val(name), file(fasta) from trimmed_reads_malt\n    output:\n        set val(name), file(\"*.aligned.malt\") into malt_output\n        set val(name), file(\"*.rma\") into malt_rma\n    script:\n        outfile = name+\".aligned.malt\"\n        outrma = name+\".rma\"\n        \"\"\"\n        $malt --mode BlastN --alignments $outfile --gzipAlignments false --format Tab --index ${params.maltdb} --numThreads ${task.cpus} --inFile $fasta --output $outrma\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".aligned.malt\"\n        outrma = name+\".rma\"\n        \"\"\"\n        $malt --mode BlastN --alignments $outfile --gzipAlignments false --format Tab --index ${params.maltdb} --numThreads ${task.cpus} --inFile $fasta --output $outrma\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_reads_malt"
        ],
        "nb_inputs": 1,
        "outputs": [
            "malt_output",
            "malt_rma"
        ],
        "nb_outputs": 2,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "label 'very_big_mem'",
            "cpus params.maltCPU",
            "publishDir \"${params.results}/malt\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "malt_convert": {
        "name_process": "malt_convert",
        "string_process": "\nprocess malt_convert {\n    tag \"$name\"\n\n    errorStrategy 'ignore'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/malt\", mode: 'copy'\n\n    input:\n        set val(name), file(malt_out) from malt_output\n    output:\n        set val(name), file(\"*.blast_converted.malt\") into malt_converted\n    script:\n        outfile = name+\".blast_converted.malt\"\n        \"\"\"\n        sed -e 's/|tax|\\\\([0-9]\\\\+\\\\)|//g' $malt_out > $outfile\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        outfile = name+\".blast_converted.malt\"\n        \"\"\"\n        sed -e 's/|tax|\\\\([0-9]\\\\+\\\\)|//g' $malt_out > $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Taxa"
        ],
        "tools_url": [
            "https://bio.tools/taxa"
        ],
        "tools_dico": [
            {
                "name": "Taxa",
                "uri": "https://bio.tools/taxa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Define and manipulate taxonomic data.  Robust and flexible solution to storing and manipulating taxonomic data and any application-specific information associated with it. It provides parsers that can read common sources of taxonomic information from nearly any format while preserving associated data. It takes into account the hierarchical nature of taxa and can modify the taxonomy or associated data in such a way that both are kept in sync.",
                "homepage": "https://github.com/ropensci/taxa"
            }
        ],
        "inputs": [
            "malt_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "malt_converted"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "errorStrategy 'ignore'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/malt\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "basta_from_malt": {
        "name_process": "basta_from_malt",
        "string_process": "\nprocess basta_from_malt {\n    tag \"$name\"\n\n    conda 'bnoon::leveldb bnoon:plyvel bioconda::krona'\n\n    errorStrategy 'ignore'\n\n    label 'normal'\n\n    maxForks 1\n\n    cpus 1\n\n    publishDir \"${params.results}/malt\", mode: 'copy'\n\n    input:\n        set val(name), file(malt_out) from malt_converted\n    output:\n        set val(name), file(\"*.malt.basta\") into malt_res\n    script:\n        outfile = name+\".malt.basta\"\n        basta_max = 30\n        basta_id = 97\n        basta_min = 1\n        basta_len = 30\n        \"\"\"\n        $basta sequence -t all -n $basta_max -m $basta_min -i $basta_id -l $basta_len -x True -d ${params.bastadb} $malt_out $outfile gb\n        \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "        outfile = name+\".malt.basta\"\n        basta_max = 30\n        basta_id = 97\n        basta_min = 1\n        basta_len = 30\n        \"\"\"\n        $basta sequence -t all -n $basta_max -m $basta_min -i $basta_id -l $basta_len -x True -d ${params.bastadb} $malt_out $outfile gb\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "malt_converted"
        ],
        "nb_inputs": 1,
        "outputs": [
            "malt_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'bnoon::leveldb bnoon:plyvel bioconda::krona'",
            "errorStrategy 'ignore'",
            "label 'normal'",
            "maxForks 1",
            "cpus 1",
            "publishDir \"${params.results}/malt\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_results": {
        "name_process": "summarize_results",
        "string_process": "\nprocess summarize_results {\n    tag \"$name\"\n\n    conda 'python=3.6'\n\n    errorStrategy 'ignore'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/summary\", mode: 'copy'\n\n    input:\n        set val(name), file(metaphlan_reads), file(kraken_reads), file(malt_reads), file(blast_contigs) from metaphlan_res.join(kraken_res).join(malt_res).join(blast_res)\n                                                                                                                                            \n    output:\n        set val(name), file(\"*.csv\") into summary_result\n\n    script:\n        outfile = name+\".summary.csv\"\n        \"\"\"\n        summarize_all_methods -mr $metaphlan_reads -krr $kraken_reads -mar $malt_reads -bc $blast_contigs -o $outfile\n        \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "        outfile = name+\".summary.csv\"\n        \"\"\"\n        summarize_all_methods -mr $metaphlan_reads -krr $kraken_reads -mar $malt_reads -bc $blast_contigs -o $outfile\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metaphlan_res",
            "kraken_res",
            "malt_res",
            "blast_res"
        ],
        "nb_inputs": 4,
        "outputs": [
            "summary_result"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$name\"",
            "conda 'python=3.6'",
            "errorStrategy 'ignore'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/summary\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    tag \"$prefix\"\n\n    conda 'bioconda::multiqc'\n\n    errorStrategy 'ignore'\n\n    label 'normal'\n\n    cpus 1\n\n    publishDir \"${params.results}/MultiQC\", mode: 'copy'\n\n    input:\n        file (fastqc:'fastqc/*') from fastqc_results.collect()\n        file ('adapter_removal/*') from adapter_removal_results.collect()\n\n    output:\n        file '*multiqc_report.html' into multiqc_report\n        file '*_data' into multiqc_data\n\n    script:\n        prefix = fastqc[0].toString() - '_fastqc.html' - 'fastqc/'\n        \"\"\"\n        multiqc -f -d fastqc adapter_removal -c $multiqc_conf\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        prefix = fastqc[0].toString() - '_fastqc.html' - 'fastqc/'\n        \"\"\"\n        multiqc -f -d fastqc adapter_removal -c $multiqc_conf\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_results",
            "adapter_removal_results"
        ],
        "nb_inputs": 2,
        "outputs": [
            "multiqc_report",
            "multiqc_data"
        ],
        "nb_outputs": 2,
        "name_workflow": "maxibor__admapipe",
        "directive": [
            "tag \"$prefix\"",
            "conda 'bioconda::multiqc'",
            "errorStrategy 'ignore'",
            "label 'normal'",
            "cpus 1",
            "publishDir \"${params.results}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
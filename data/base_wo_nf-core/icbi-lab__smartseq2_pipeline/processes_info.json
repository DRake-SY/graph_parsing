{
    "makeSTARindex": {
        "name_process": "makeSTARindex",
        "string_process": " process makeSTARindex {\n            label 'high_memory'\n            tag \"$fasta\"\n            publishDir path: { params.save_reference ? \"${params.outdir}/reference_genome\" : params.outdir },\n                        saveAs: { params.save_reference ? it : null }, mode: \"$mode\"\n\n            input:\n                file fasta from fasta_star_idx\n                file gtf from gtf_star_idx\n\n            output:\n            file \"star\" into star_index\n\n            script:\n            def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n            \"\"\"\n            # unzip files if required\n            FASTA=${fasta}\n            GTF=${gtf}\n            if [[ \"${fasta}\" == *\".gz\"* ]]; then\n                gunzip -c ${fasta} > genome.fa\n                FASTA=genome.fa\n            fi\n            if [[ \"${gtf}\" == *\".gz\"* ]]; then\n                gunzip -c ${gtf} > annotation.gtf \n                GTF=annotation.gtf\n            fi\n\n            # make index\n            mkdir star\n            STAR \\\\\n                --runMode genomeGenerate \\\\\n                --runThreadN ${task.cpus} \\\\\n                --sjdbGTFfile \\$GTF \\\\\n                --genomeDir star/ \\\\\n                --genomeFastaFiles \\$FASTA \\\\\n                $avail_mem\n            \"\"\"\n        }",
        "nb_lignes_process": 37,
        "string_script": "            def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n            \"\"\"\n            # unzip files if required\n            FASTA=${fasta}\n            GTF=${gtf}\n            if [[ \"${fasta}\" == *\".gz\"* ]]; then\n                gunzip -c ${fasta} > genome.fa\n                FASTA=genome.fa\n            fi\n            if [[ \"${gtf}\" == *\".gz\"* ]]; then\n                gunzip -c ${gtf} > annotation.gtf \n                GTF=annotation.gtf\n            fi\n\n            # make index\n            mkdir star\n            STAR \\\\\n                --runMode genomeGenerate \\\\\n                --runThreadN ${task.cpus} \\\\\n                --sjdbGTFfile \\$GTF \\\\\n                --genomeDir star/ \\\\\n                --genomeFastaFiles \\$FASTA \\\\\n                $avail_mem\n            \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fasta_star_idx",
            "gtf_star_idx"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "label 'high_memory'",
            "tag \"$fasta\"",
            "publishDir path: { params.save_reference ? \"${params.outdir}/reference_genome\" : params.outdir } , saveAs: { params.save_reference ? it : null }, mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "make_rsem_reference": {
        "name_process": "make_rsem_reference",
        "string_process": " process make_rsem_reference {\n            publishDir path: { params.save_reference ? \"${params.outdir}/reference_genome\" : params.outdir },\n                        saveAs: { params.save_reference ? it : null }, mode: \"$mode\"\n            input:\n                file fasta from fasta_rsem_ref\n                file gtf from gtf_rsem_ref\n\n            output:\n                file \"rsem\" into rsem_ref\n\n            script:\n            \"\"\"\n            # unzip files if required\n            FASTA=${fasta}\n            GTF=${gtf}\n            if [[ \"${fasta}\" == *\".gz\"* ]]; then\n                gunzip -c ${fasta} > genome.fa\n                FASTA=genome.fa\n            fi\n            if [[ \"${gtf}\" == *\".gz\"* ]]; then\n                gunzip -c ${gtf} > annotation.gtf \n                GTF=annotation.gtf\n            fi\n            \n            # make reference\n            mkdir rsem\n            rsem-prepare-reference --gtf \\$GTF \\$FASTA rsem/ref\n            \"\"\"\n        }",
        "nb_lignes_process": 27,
        "string_script": "            \"\"\"\n            # unzip files if required\n            FASTA=${fasta}\n            GTF=${gtf}\n            if [[ \"${fasta}\" == *\".gz\"* ]]; then\n                gunzip -c ${fasta} > genome.fa\n                FASTA=genome.fa\n            fi\n            if [[ \"${gtf}\" == *\".gz\"* ]]; then\n                gunzip -c ${gtf} > annotation.gtf \n                GTF=annotation.gtf\n            fi\n            \n            # make reference\n            mkdir rsem\n            rsem-prepare-reference --gtf \\$GTF \\$FASTA rsem/ref\n            \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_rsem_ref",
            "gtf_rsem_ref"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rsem_ref"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir path: { params.save_reference ? \"${params.outdir}/reference_genome\" : params.outdir } , saveAs: { params.save_reference ? it : null }, mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": " process fastqc {\n        publishDir \"$outdir/fastqc/${sample}_fastqc\", mode: \"$mode\"\n        input:\n            set sample, file(in_fastq) from read_files_fastqc\n\n        output:\n            file(\"*.zip\") into fastqc_files\n\n        script:\n        \"\"\"\n        fastqc  \\\n        -t ${task.cpus} \\\n        ${in_fastq.get(0)} \\\n        ${in_fastq.get(1)}\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        fastqc  \\\n        -t ${task.cpus} \\\n        ${in_fastq.get(0)} \\\n        ${in_fastq.get(1)}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "read_files_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/fastqc/${sample}_fastqc\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "STAR": {
        "name_process": "STAR",
        "string_process": " process STAR {\n        publishDir \"$outdir/STAR/${sample_fq}_STAR\", mode: \"$mode\"\n        input:\n            set sample_fq, file(in_fastq) from read_files_star\n            file \"star\" from star_index.collect()\n\n        output:\n            set sample_fq, file(\"${sample_fq}.Aligned.sortedByCoord.out.bam\") into bam_sort_filesgz\n            set sample_fq, file(\"${sample_fq}.Aligned.toTranscriptome.out.bam\") into bam_trans_filesgz\n            set sample_fq, file(\"${sample_fq}.Log.final.out\") into bam_mqc\n\n        script:\n        \"\"\"\n        TMP=\"\"\n        if [[ \"${in_fastq.get(0)}\" == *\".gz\"* ]]; then\n            TMP=\"--readFilesCommand zcat\"\n        fi\n        STAR --runThreadN ${task.cpus} --genomeDir star \\$TMP \\\n                --readFilesIn ${in_fastq.get(0)} ${in_fastq.get(1)} \\\n                --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 16000000000 --outSAMunmapped Within \\\n                --twopassMode Basic --outFilterMultimapNmax 1 --quantMode TranscriptomeSAM \\\n                --outFileNamePrefix \"${sample_fq}.\"\n        \"\"\"\n    }",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        TMP=\"\"\n        if [[ \"${in_fastq.get(0)}\" == *\".gz\"* ]]; then\n            TMP=\"--readFilesCommand zcat\"\n        fi\n        STAR --runThreadN ${task.cpus} --genomeDir star \\$TMP \\\n                --readFilesIn ${in_fastq.get(0)} ${in_fastq.get(1)} \\\n                --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 16000000000 --outSAMunmapped Within \\\n                --twopassMode Basic --outFilterMultimapNmax 1 --quantMode TranscriptomeSAM \\\n                --outFileNamePrefix \"${sample_fq}.\"\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "read_files_star",
            "star_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bam_sort_filesgz",
            "bam_trans_filesgz",
            "bam_mqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/STAR/${sample_fq}_STAR\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "featureCounts": {
        "name_process": "featureCounts",
        "string_process": " process featureCounts {\n            publishDir \"$outdir/featureCounts/$sample\", mode: \"$mode\"\n            input:\n                set sample, file(bsort) from bam_sort_filesgz\n                file anno_file from gtf_feature_counts.collect()\n\n            output:\n                file(\"*count.txt\") into count_files1\n                file(\"*count.txt\") into count_files2\n                file(\"*count.txt.summary\") into count_mqc\n\n            script:\n            \"\"\"\n            featureCounts -t exon -T ${task.cpus} \\\n            -g gene_name \\\n            -a ${anno_file} \\\n            -o ${sample}.count.txt \\\n            ${bsort}\n\n            \"\"\"\n        }",
        "nb_lignes_process": 19,
        "string_script": "            \"\"\"\n            featureCounts -t exon -T ${task.cpus} \\\n            -g gene_name \\\n            -a ${anno_file} \\\n            -o ${sample}.count.txt \\\n            ${bsort}\n\n            \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "bam_sort_filesgz",
            "gtf_feature_counts"
        ],
        "nb_inputs": 2,
        "outputs": [
            "count_files1",
            "count_files2",
            "count_mqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/featureCounts/$sample\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "summarize_FC": {
        "name_process": "summarize_FC",
        "string_process": " process summarize_FC {\n            input:\n                                                                       \n                file x from count_files1.collate(100)\n\n            output:\n                file(\"*_resfc.txt\") into result_files_fc\n\n            script:\n                \"\"\"\n                for fileid in $x\n                do\n                    name=`basename \\${fileid} .count.txt`\n                    echo \\${name} > \\${name}_fc.txt\n                    grep -v \"^#\" \\${fileid} | cut -f 7 | tail -n+2 >> \\${name}_fc.txt\n                done\n                paste *_fc.txt > \\${name}_resfc.txt\n\n                \"\"\"\n        }",
        "nb_lignes_process": 18,
        "string_script": "                \"\"\"\n                for fileid in $x\n                do\n                    name=`basename \\${fileid} .count.txt`\n                    echo \\${name} > \\${name}_fc.txt\n                    grep -v \"^#\" \\${fileid} | cut -f 7 | tail -n+2 >> \\${name}_fc.txt\n                done\n                paste *_fc.txt > \\${name}_resfc.txt\n\n                \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "count_files1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result_files_fc"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "make_matrices_fc": {
        "name_process": "make_matrices_fc",
        "string_process": " process make_matrices_fc {\n            publishDir \"$outdir/featureCounts\", mode: \"$mode\"\n\n            input:\n                file x from result_files_fc.collect()\n                file y from count_files2.collect()\n\n            output:\n                file(\"resultCOUNT.txt\") into fc_cr\n\n            script:\n            \"\"\"\n            cut -f 1 ${y.get(0)} | grep -v \"^#\" > header_fc.txt\n            paste header_fc.txt *_resfc.txt > resultCOUNT.txt\n            \"\"\"\n        }",
        "nb_lignes_process": 14,
        "string_script": "            \"\"\"\n            cut -f 1 ${y.get(0)} | grep -v \"^#\" > header_fc.txt\n            paste header_fc.txt *_resfc.txt > resultCOUNT.txt\n            \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "result_files_fc",
            "count_files2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fc_cr"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/featureCounts\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "rsem": {
        "name_process": "rsem",
        "string_process": " process rsem {\n            publishDir \"$outdir/RSEM/$sample_bam\", mode: \"$mode\"\n            input:\n                set sample_bam, file(in_bam) from bam_trans_filesgz\n                file \"rsem\" from rsem_ref.collect()\n\n            output:\n                file(\"*.genes.results\") into tpm_files1\n                file(\"*.genes.results\") into tpm_files2\n                file(\"*.stat\") into rsem_mqc\n\n            script:\n            \"\"\"\n            REF_FILENAME=\\$(basename rsem/*.grp)\n            REF_NAME=\"\\${REF_FILENAME%.*}\"\n            rsem-calculate-expression -p ${task.cpus} --paired-end \\\n            --bam \\\n            --estimate-rspd \\\n            --append-names \\\n            --output-genome-bam \\\n            ${in_bam} \\\n            rsem/\\$REF_NAME \\\n            ${sample_bam}\n            \"\"\"\n        }",
        "nb_lignes_process": 23,
        "string_script": "            \"\"\"\n            REF_FILENAME=\\$(basename rsem/*.grp)\n            REF_NAME=\"\\${REF_FILENAME%.*}\"\n            rsem-calculate-expression -p ${task.cpus} --paired-end \\\n            --bam \\\n            --estimate-rspd \\\n            --append-names \\\n            --output-genome-bam \\\n            ${in_bam} \\\n            rsem/\\$REF_NAME \\\n            ${sample_bam}\n            \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_trans_filesgz",
            "rsem_ref"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tpm_files1",
            "tpm_files2",
            "rsem_mqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/RSEM/$sample_bam\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "summmarize_TPM": {
        "name_process": "summmarize_TPM",
        "string_process": " process summmarize_TPM {\n            input:\n                                                                       \n                file y from tpm_files1.collate(100)\n\n            output:\n                file(\"*_restpm.txt\") into result_files_tpm\n\n            script:\n            \"\"\"\n            for fileid in $y\n            do\n                name=`basename \\${fileid} .genes.results`\n                echo \\${name} > \\${name}_tpm.txt\n                grep -v \"^#\" \\${fileid} | cut -f 5 | tail -n+2 >> \\${name}_tpm.txt\n            done\n            paste *_tpm.txt >> \\${name}_restpm.txt\n            \"\"\"\n        }",
        "nb_lignes_process": 17,
        "string_script": "            \"\"\"\n            for fileid in $y\n            do\n                name=`basename \\${fileid} .genes.results`\n                echo \\${name} > \\${name}_tpm.txt\n                grep -v \"^#\" \\${fileid} | cut -f 5 | tail -n+2 >> \\${name}_tpm.txt\n            done\n            paste *_tpm.txt >> \\${name}_restpm.txt\n            \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tpm_files1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result_files_tpm"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "make_matrices_tpm": {
        "name_process": "make_matrices_tpm",
        "string_process": " process make_matrices_tpm {\n            publishDir \"$outdir/RSEM\", mode: \"$mode\"\n\n            input:\n                file z from result_files_tpm.collect()\n                file a from tpm_files2.collect()\n\n            output:\n                file(\"resultTPM.txt\") into tpm_cr\n\n            script:\n            \"\"\"\n            echo \"ensemble_id\\tgene_id\" > header_tpm.txt\n            cut -f 1 ${a.get(0)} | grep -v \"^#\" | tail -n+2 | sed \"s/_/\\t/\" >> header_tpm.txt\n            paste header_tpm.txt *_restpm.txt > resultTPM.txt\n            \"\"\"\n        }",
        "nb_lignes_process": 15,
        "string_script": "            \"\"\"\n            echo \"ensemble_id\\tgene_id\" > header_tpm.txt\n            cut -f 1 ${a.get(0)} | grep -v \"^#\" | tail -n+2 | sed \"s/_/\\t/\" >> header_tpm.txt\n            paste header_tpm.txt *_restpm.txt > resultTPM.txt\n            \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "result_files_tpm",
            "tpm_files2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tpm_cr"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/RSEM\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"$outdir/multiqc\", mode: \"$mode\"\n\n    input:\n    file ('fastqc/*') from fastqc_files.collect().ifEmpty([])\n    file ('star/*') from bam_mqc.collect().ifEmpty([])\n    file ('featureCounts/*') from count_mqc.collect().ifEmpty([])\n    file ('rsem/*') from rsem_mqc.collect().ifEmpty([])\n\n    output:\n    file \"multiqc_report.html\" into multiqc_report\n    file \"multiqc_data\"\n\n    script:\n    \"\"\"\n    multiqc .\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    multiqc .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_files",
            "bam_mqc",
            "count_mqc",
            "rsem_mqc"
        ],
        "nb_inputs": 4,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/multiqc\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "TraCeR": {
        "name_process": "TraCeR",
        "string_process": " process TraCeR{\n            publishDir \"$outdir/TraCeR\", mode: \"$mode\"\n\n            input:\n                set sample, file(in_tracer) from read_files_tracer\n\n            output:\n                file(\"*\") into tcr_files\n\n            script:\n            \"\"\"\n            tracer assemble -p ${task.cpus} -s ${species} \\\n            ${in_tracer.get(0)} ${in_tracer.get(1)} ${sample} .\n            \"\"\"\n        }",
        "nb_lignes_process": 13,
        "string_script": "            \"\"\"\n            tracer assemble -p ${task.cpus} -s ${species} \\\n            ${in_tracer.get(0)} ${in_tracer.get(1)} ${sample} .\n            \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Tracer"
        ],
        "tools_url": [
            "https://bio.tools/tracer"
        ],
        "tools_dico": [
            {
                "name": "Tracer",
                "uri": "https://bio.tools/tracer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Graphical tool for visualization and diagnostics of MCMC (Markov chain Monte Carlo) output. It can read output files from MrBayesand BEAST.",
                "homepage": "http://tree.bio.ed.ac.uk/software/tracer/"
            }
        ],
        "inputs": [
            "read_files_tracer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tcr_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/TraCeR\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "TCR_summary": {
        "name_process": "TCR_summary",
        "string_process": " process TCR_summary{\n            publishDir \"$outdir/TraCeR\", mode: \"$mode\"\n\n            input:\n                file ('*') from tcr_files.collect()\n\n            output:\n                file(\"filtered_TCRAB_summary/*\")\n\n            script:\n            \"\"\"\n            tracer summarize -s ${species} .\n            \"\"\"\n        }",
        "nb_lignes_process": 12,
        "string_script": "            \"\"\"\n            tracer summarize -s ${species} .\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Tracer"
        ],
        "tools_url": [
            "https://bio.tools/tracer"
        ],
        "tools_dico": [
            {
                "name": "Tracer",
                "uri": "https://bio.tools/tracer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Graphical tool for visualization and diagnostics of MCMC (Markov chain Monte Carlo) output. It can read output files from MrBayesand BEAST.",
                "homepage": "http://tree.bio.ed.ac.uk/software/tracer/"
            }
        ],
        "inputs": [
            "tcr_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/TraCeR\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "BraCeR": {
        "name_process": "BraCeR",
        "string_process": " process BraCeR{\n            publishDir \"$outdir/BraCeR\", mode: \"$mode\"\n\n            input:\n                set sample, file(in_bracer) from read_files_bracer\n\n            output:\n                file(\"*\") into bcr_files\n\n            script:\n            \"\"\"\n            bracer assemble -p ${task.cpus} -s ${species} \\\n            ${sample} . ${in_bracer.get(0)} ${in_bracer.get(1)}\n            \"\"\"\n        }",
        "nb_lignes_process": 13,
        "string_script": "            \"\"\"\n            bracer assemble -p ${task.cpus} -s ${species} \\\n            ${sample} . ${in_bracer.get(0)} ${in_bracer.get(1)}\n            \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_files_bracer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bcr_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/BraCeR\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "BCR_summary": {
        "name_process": "BCR_summary",
        "string_process": " process BCR_summary{\n            publishDir \"$outdir/BraCeR\", mode: \"$mode\"\n\n            input:\n                file ('*') from bcr_files.collect()\n\n            output:\n                file(\"filtered_BCR_summary/*\")\n\n            script:\n            \"\"\"\n            bracer summarize -s ${species} .\n            \"\"\"\n        }",
        "nb_lignes_process": 12,
        "string_script": "            \"\"\"\n            bracer summarize -s ${species} .\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bcr_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"$outdir/BraCeR\", mode: \"$mode\""
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file \"output_docs.md\" from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    pandoc output_docs.md -o results_description.html --self-contained --standalone\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    pandoc output_docs.md -o results_description.html --self-contained --standalone\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icbi-lab__smartseq2_pipeline",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
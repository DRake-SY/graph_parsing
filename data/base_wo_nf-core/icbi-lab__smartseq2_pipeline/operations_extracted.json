{
    "OPERATION_1": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .from(params.readPaths)\n        .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n        .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n        .into { read_files_fastqc; read_files_star; read_files_bracer; read_files_tracer }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_star",
                "P"
            ],
            [
                "read_files_bracer",
                "P"
            ],
            [
                "read_files_tracer",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\" }\n        .into { read_files_fastqc; read_files_star; read_files_bracer; read_files_tracer }",
        "origin": [
            [
                "params.reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_star",
                "P"
            ],
            [
                "read_files_bracer",
                "P"
            ],
            [
                "read_files_tracer",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(fasta).into { fasta_star_idx; fasta_rsem_ref }",
        "origin": [
            [
                "fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta_star_idx",
                "P"
            ],
            [
                "fasta_rsem_ref",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath(gtf).into { gtf_star_idx ; gtf_rsem_ref; gtf_feature_counts }",
        "origin": [
            [
                "gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtf_star_idx",
                "P"
            ],
            [
                "gtf_rsem_ref",
                "P"
            ],
            [
                "gtf_feature_counts",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "star_index = Channel\n            .fromPath(params.star_index, checkIfExists: true)\n            .ifEmpty { exit 1, \"STAR index not found: ${params.star_index}\" }",
        "origin": [
            [
                "params.star_index, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "star_index",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "rsem_ref = Channel\n            .fromPath(params.rsem_ref, checkIfExists: true)\n            .ifEmpty { exit 1, \"RSEM reference not found: ${params.rsem_ref}\" }",
        "origin": [
            [
                "params.rsem_ref, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "rsem_ref",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "count_mqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "count_mqc",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "rsem_mqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "rsem_mqc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "rsem_mqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "rsem_mqc",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "count_mqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "count_mqc",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "bam_mqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "bam_mqc",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
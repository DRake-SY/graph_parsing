{
    "OPERATION_1": {
        "string": "Channel\n  .fromPath(params.gtfs)\n  .map { it -> [it.baseName.split('\\\\.')[0], file(it)] }\n  .set { gtfs }",
        "origin": [
            [
                "params.gtfs",
                "A"
            ]
        ],
        "gives": [
            [
                "gtfs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n  .from(file(\"${params.mzmldef}\").readLines())\n  .map { it -> it.tokenize(' |\\t') }\n  .map { it -> [it[2], it[1], it[0].replaceFirst(/.*\\/(\\S+)\\.mzML/, \"\\$1\"), file(it[0])] }                       \n  .tap { mzmls }\n  .collect { it[0] }\n  .set { fractions }",
        "origin": [],
        "gives": [
            [
                "fractions",
                "P"
            ],
            [
                "mzmls",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "aa_fastas\n  .map { it -> it[1] }\n  .collect()\n  .set { aa_fastas_combined }",
        "origin": [
            [
                "aa_fastas",
                "P"
            ]
        ],
        "gives": [
            [
                "aa_fastas_combined",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "pI_fastas\n  .flatten()\n  .map { it -> [it.baseName.split(\"_\")[1], file(it)] }\n  .set { pI_tdbs }",
        "origin": [
            [
                "pI_fastas",
                "P"
            ]
        ],
        "gives": [
            [
                "pI_tdbs",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "combined_tdbs\n  .cross(mzmls)\n  .map { it -> [it[0][0], it[1][1], it[1][2], it[1][3], it[0][1]] }\n  .set { mzmls_fastas }",
        "origin": [
            [
                "combined_tdbs",
                "P"
            ],
            [
                "mzmls",
                "P"
            ]
        ],
        "gives": [
            [
                "mzmls_fastas",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "mzids\n  .groupTuple()\n  .set { mzids2pin }",
        "origin": [
            [
                "mzids",
                "P"
            ]
        ],
        "gives": [
            [
                "mzids2pin",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "mzidtsvs\n  .groupTuple()\n  .join(percolated)\n  .set { mzperco }",
        "origin": [
            [
                "mzidtsvs",
                "P"
            ],
            [
                "percolated",
                "P"
            ]
        ],
        "gives": [
            [
                "mzperco",
                "P"
            ]
        ]
    }
}
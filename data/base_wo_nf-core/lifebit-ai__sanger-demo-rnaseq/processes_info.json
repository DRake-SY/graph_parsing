{
    "merge_salmoncounts": {
        "name_process": "merge_salmoncounts",
        "string_process": "\nprocess merge_salmoncounts {\n    tag \"\"\n    scratch '/tmp'\n    stageInMode 'copy'\n    stageOutMode 'rsync'\n    container \"lifebitai/nfcore-rnaseq:1.0\"\n    publishDir \"${params.outdir}/combined\", mode: 'symlink'\n    errorStrategy { task.attempt <= 6 ? 'retry' : 'ignore' }\n    maxRetries 6\n                     \n    memory = {  80.GB + 20.GB * (task.attempt-1) }\n    time '400m'\n\n    input:\n    file (all_quant_sf)\n    file (all_quant_genes_sf)\n\n    when:\n    params.run\n\n    output:\n    set file('*transcounts.txt'), file('*transtpm.txt'), file('*genecounts.txt'), file('*genetpm.txt')\n    file(\"fofn_quant_sf_salmon.txt\")\n    file(\"fofn_quant_genes_sf_salmon.txt\")\n    \n    script:\n    def outtranscount = \"${params.runtag}-salmon-transcounts.txt\"\n    def outgenescount = \"${params.runtag}-salmon-genecounts.txt\"\n    def outtranstpm   = \"${params.runtag}-salmon-transtpm.txt\"\n    def outgenestpm   = \"${params.runtag}-salmon-genetpm.txt\"\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    ls . | grep .quant.sf\\$ > fofn_quant_sf_salmon.txt\n    ls . | grep .quant.genes.sf\\$ > fofn_quant_genes_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.genes.sf                                     \\\\\n      -c -1 --skip-comments --header                                  \\\\\n      -o $outgenescount -I fofn_quant_genes_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.sf                                           \\\\\n      -c -1 --skip-comments --header                                  \\\\\n      -o $outtranscount -I fofn_quant_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.genes.sf                                     \\\\\n      -c -2 --skip-comments --header                                  \\\\\n      -o $outgenestpm -I fofn_quant_genes_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.sf                                           \\\\\n      -c -2 --skip-comments --header                                  \\\\\n      -o $outtranstpm -I fofn_quant_sf_salmon.txt\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def outtranscount = \"${params.runtag}-salmon-transcounts.txt\"\n    def outgenescount = \"${params.runtag}-salmon-genecounts.txt\"\n    def outtranstpm   = \"${params.runtag}-salmon-transtpm.txt\"\n    def outgenestpm   = \"${params.runtag}-salmon-genetpm.txt\"\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    ls . | grep .quant.sf\\$ > fofn_quant_sf_salmon.txt\n    ls . | grep .quant.genes.sf\\$ > fofn_quant_genes_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.genes.sf                                     \\\\\n      -c -1 --skip-comments --header                                  \\\\\n      -o $outgenescount -I fofn_quant_genes_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.sf                                           \\\\\n      -c -1 --skip-comments --header                                  \\\\\n      -o $outtranscount -I fofn_quant_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.genes.sf                                     \\\\\n      -c -2 --skip-comments --header                                  \\\\\n      -o $outgenestpm -I fofn_quant_genes_sf_salmon.txt\n\n    merge_featurecounts.py           \\\\\n      --rm-suffix .quant.sf                                           \\\\\n      -c -2 --skip-comments --header                                  \\\\\n      -o $outtranstpm -I fofn_quant_sf_salmon.txt\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_quant_sf",
            "all_quant_genes_sf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"\"",
            "scratch '/tmp'",
            "stageInMode 'copy'",
            "stageOutMode 'rsync'",
            "container \"lifebitai/nfcore-rnaseq:1.0\"",
            "publishDir \"${params.outdir}/combined\", mode: 'symlink'",
            "errorStrategy { task.attempt <= 6 ? 'retry' : 'ignore' }",
            "maxRetries 6",
            "memory = { 80.GB + 20.GB * (task.attempt-1) }",
            "time '400m'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "iget_cram": {
        "name_process": "iget_cram",
        "string_process": "\nprocess iget_cram {\n    tag \"iget cram ${samplename} ${studyid}\"\n    memory = '10G'\n    time '240m'\n    cpus 1\n    errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n    maxRetries 3\n    maxForks 12\n    publishDir \"${params.outdir}/irods_lost/${samplename}/\", mode: 'symlink', pattern: \"*.lostcause.txt\", overwrite: true\n    publishDir \"${params.outdir}/irods_crams/${samplename}/\", mode: 'symlink', pattern: \"*.cram\", overwrite: true\n\n    when:\n    params.run\n\n    input: \n    val samplename                                                   \n    val studyid                                                   \n\n    output: \n    set val(samplename), file('*.cram') optional true                      \n    file('*.lostcause.txt') optional true                           \n\n    script:\n    \"\"\"\n    if bash -euo pipefail $workflow.projectDir/../bin/rna_seq/irods.sh -N ${task.cpus} -t ${studyid} -s ${samplename} ${params.dropqc}; then\n      true\n    else\n      stat=\\$?\n      if [[ \\$stat == 64 ]];\n        then tag='nofiles';\n        echo -e \"${samplename}\\\\tirods\\\\t\\$tag\" > ${samplename}.lostcause.txt\n      else          \n        tag='UNKNOWN'\n        echo -e \"${samplename}\\\\tirods\\\\t\\$tag\" > ${samplename}.lostcause.txt\n        exit \\$stat\n      fi\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n    if bash -euo pipefail $workflow.projectDir/../bin/rna_seq/irods.sh -N ${task.cpus} -t ${studyid} -s ${samplename} ${params.dropqc}; then\n      true\n    else\n      stat=\\$?\n      if [[ \\$stat == 64 ]];\n        then tag='nofiles';\n        echo -e \"${samplename}\\\\tirods\\\\t\\$tag\" > ${samplename}.lostcause.txt\n      else          \n        tag='UNKNOWN'\n        echo -e \"${samplename}\\\\tirods\\\\t\\$tag\" > ${samplename}.lostcause.txt\n        exit \\$stat\n      fi\n    fi\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename",
            "studyid"
        ],
        "nb_inputs": 2,
        "outputs": [
            "samplename"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"iget cram ${samplename} ${studyid}\"",
            "memory = '10G'",
            "time '240m'",
            "cpus 1",
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "maxForks 12",
            "publishDir \"${params.outdir}/irods_lost/${samplename}/\", mode: 'symlink', pattern: \"*.lostcause.txt\", overwrite: true",
            "publishDir \"${params.outdir}/irods_crams/${samplename}/\", mode: 'symlink', pattern: \"*.cram\", overwrite: true"
        ],
        "when": "params.run",
        "stub": ""
    },
    "deseq2": {
        "name_process": "deseq2",
        "string_process": "\nprocess deseq2 {\n    tag \"$deseq2_tsv\"\n    memory = '80G'\n    container \"lifebitai/rstudio-seurat-tximport:latest\"\n    containerOptions = \"--bind /tmp --bind /lustre\"\n    time '400m'\n    cpus 1\n    errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n    maxRetries 3\n    \n    publishDir \"${params.outdir}/DESeq2/\", mode: 'symlink'\n\n    when:\n    params.run\n\n    input:\n    file(quant_sf_files)                   \n    file(deseq2_tsv)\n\n    output:\n    file(\"outputs\")\n\n    script:\n    \"\"\"\n    ls . | grep .quant.sf\\$ > fofn_quantfiles.txt\n\n    /usr/bin/Rscript $workflow.projectDir/../bin/rna_seq/deseq2.R \\\"$params.ensembl_lib\\\" fofn_quantfiles.txt $deseq2_tsv\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    ls . | grep .quant.sf\\$ > fofn_quantfiles.txt\n\n    /usr/bin/Rscript $workflow.projectDir/../bin/rna_seq/deseq2.R \\\"$params.ensembl_lib\\\" fofn_quantfiles.txt $deseq2_tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quant_sf_files",
            "deseq2_tsv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"$deseq2_tsv\"",
            "memory = '80G'",
            "container \"lifebitai/rstudio-seurat-tximport:latest\"",
            "containerOptions = \"--bind /tmp --bind /lustre\"",
            "time '400m'",
            "cpus 1",
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/DESeq2/\", mode: 'symlink'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "featureCounts": {
        "name_process": "featureCounts",
        "string_process": "\nprocess featureCounts {\n    tag \"${samplename}\"\n    container \"lifebitai/nfcore-rnaseq:latest\"\n    memory = '5G'\n    time '300m'\n    cpus 1\n    errorStrategy { task.attempt <= 5 ? 'retry' : 'ignore' }\n    maxRetries 5\n    publishDir \"${params.outdir}/featureCounts/\", mode: 'symlink',\n        saveAs: {filename ->\n            if (filename.indexOf(\".biotype_counts_mqc.txt\") > 0) \"biotype_counts_mqc/$filename\"\n            else if (filename.indexOf(\".biotype.fc.txt\") > 0) \"biotype_counts/$filename\"\n            else if (filename.indexOf(\".biotype.fc.txt.summary\") > 0) \"biotype_counts_summaries/$filename\"\n            else if (filename.indexOf(\".gene.fc.txt.summary\") > 0) \"gene_count_summaries/$filename\"\n            else if (filename.indexOf(\".gene.fc.txt\") > 0) \"gene_counts/$filename\"\n            else \"$filename\"\n        }\n\n    when:\n    params.run\n    \n    input:\n    set val(aligner), val(samplename), file(thebam)                        \n    file gtf                                          \n    file biotypes_header\n\n    output:\n    set val(aligner), file(\"*.gene.fc.txt\")                   \n    set val(aligner), file(\"*.gene.fc.txt.summary\")                     \n    set val(aligner), file(\"*.biotype_counts_mqc.txt\")                            \n\n    script:\n    def extraparams = params.fcextra.toString() - ~/^dummy/\n    def fc_direction = 0\n    def tag = \"${samplename}.${aligner}\"\n\n    def pairedend = params.singleend ? \"\" : \"-p\"\n    if (params.forward_stranded && !params.unstranded) {\n        fc_direction = 1\n    } else if (params.reverse_stranded && !params.unstranded){\n        fc_direction = 2\n    }\n    outfile = \"${tag}.gene.fc.txt\"\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    featureCounts -T ${task.cpus} -a $gtf -g gene_id          \\\\\n      -o ${outfile} $pairedend                                \\\\\n      -s $fc_direction ${extraparams} $thebam\n    cut -f 1,7 ${outfile} > reduced.${outfile}   #  This\n    mv reduced.${outfile} ${outfile}             #  reduces the file size from ~ 30M to ~1M\n    featureCounts -T ${task.cpus} -a $gtf -g gene_id  \\\\\n      -o ${tag}.biotype.fc.txt $pairedend                     \\\\\n      -s $fc_direction ${extraparams} $thebam\n    cut -f 1,7 ${tag}.biotype.fc.txt |                        \\\\\n        tail -n +3 | cat $biotypes_header - >> ${tag}.biotype_counts_mqc.txt\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def extraparams = params.fcextra.toString() - ~/^dummy/\n    def fc_direction = 0\n    def tag = \"${samplename}.${aligner}\"\n\n    def pairedend = params.singleend ? \"\" : \"-p\"\n    if (params.forward_stranded && !params.unstranded) {\n        fc_direction = 1\n    } else if (params.reverse_stranded && !params.unstranded){\n        fc_direction = 2\n    }\n    outfile = \"${tag}.gene.fc.txt\"\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    featureCounts -T ${task.cpus} -a $gtf -g gene_id          \\\\\n      -o ${outfile} $pairedend                                \\\\\n      -s $fc_direction ${extraparams} $thebam\n    cut -f 1,7 ${outfile} > reduced.${outfile}   #  This\n    mv reduced.${outfile} ${outfile}             #  reduces the file size from ~ 30M to ~1M\n    featureCounts -T ${task.cpus} -a $gtf -g gene_id  \\\\\n      -o ${tag}.biotype.fc.txt $pairedend                     \\\\\n      -s $fc_direction ${extraparams} $thebam\n    cut -f 1,7 ${tag}.biotype.fc.txt |                        \\\\\n        tail -n +3 | cat $biotypes_header - >> ${tag}.biotype_counts_mqc.txt\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "aligner",
            "samplename",
            "thebam",
            "gtf",
            "biotypes_header"
        ],
        "nb_inputs": 5,
        "outputs": [
            "aligner",
            "aligner",
            "aligner"
        ],
        "nb_outputs": 3,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"${samplename}\"",
            "container \"lifebitai/nfcore-rnaseq:latest\"",
            "memory = '5G'",
            "time '300m'",
            "cpus 1",
            "errorStrategy { task.attempt <= 5 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/featureCounts/\", mode: 'symlink' , saveAs: {filename -> if (filename.indexOf(\".biotype_counts_mqc.txt\") > 0) \"biotype_counts_mqc/$filename\" else if (filename.indexOf(\".biotype.fc.txt\") > 0) \"biotype_counts/$filename\" else if (filename.indexOf(\".biotype.fc.txt.summary\") > 0) \"biotype_counts_summaries/$filename\" else if (filename.indexOf(\".gene.fc.txt.summary\") > 0) \"gene_count_summaries/$filename\" else if (filename.indexOf(\".gene.fc.txt\") > 0) \"gene_counts/$filename\" else \"$filename\" }"
        ],
        "when": "params.run",
        "stub": ""
    },
    "mapsummary": {
        "name_process": "mapsummary",
        "string_process": "\nprocess mapsummary {\n    tag \"${samplename}\"\n    container \"lifebitai/nfcore-rnaseq:latest\"\n    publishDir \"${params.outdir}/mapsummary/\", mode: 'symlink'\n    containerOptions = \"--bind /lustre\"\n    errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n    maxRetries 3\n    memory = '8G'\n    cpus 1\n    time '300m'\n\n    input:\n    set val(samplename), file(thestats)                      \n\n    output:\n    file \"*_mqc.txt\"                         \n\n    script:\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    python $baseDir/../bin/rna_seq/mito.py -m ${params.mito_name} -t $thestats > ${samplename}_mqc.txt\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    python $baseDir/../bin/rna_seq/mito.py -m ${params.mito_name} -t $thestats > ${samplename}_mqc.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename",
            "thestats"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"${samplename}\"",
            "container \"lifebitai/nfcore-rnaseq:latest\"",
            "publishDir \"${params.outdir}/mapsummary/\", mode: 'symlink'",
            "containerOptions = \"--bind /lustre\"",
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "memory = '8G'",
            "cpus 1",
            "time '300m'"
        ],
        "when": "",
        "stub": ""
    },
    "crams_to_fastq_gz": {
        "name_process": "crams_to_fastq_gz",
        "string_process": "\nprocess crams_to_fastq_gz {\n    tag \"crams to fastq_gz ${samplename}\"\n\n                                \n                                                   \n    \n    container \"lifebitai/samtools:latest\"                                      \n    containerOptions = \"--bind /lustre/scratch117/core/sciops_repository/cram_cache --bind /lustre/scratch118/core/sciops_repository/cram_cache\"\n                                \n    errorStrategy 'retry'\n    maxRetries 6\n    time '400m'\n    cpus 1\n    memory '4G'\n\n                                                                                                            \n                                                                                                                            \n                                                                                \n    publishDir \"${params.outdir}/fastq12/\", mode: 'symlink'\n    \n    when:\n    params.run\n    \n    input: \n        set val(samplename), file(crams) \n    output: \n        set val(samplename), file(\"${samplename}_1.fastq.gz\"), file(\"${samplename}_2.fastq.gz\") optional true\n        file('*.lostcause.txt') optional true \n        file('numreads.txt') optional true \n    script:\n\n                                                                                \n                                                   \n                                                                                                                                    \n    def cramfile = \"${samplename}_merged.cram\"\n    \"\"\"\n    export REF_PATH=/lustre/scratch117/core/sciops_repository/cram_cache/%2s/%2s/%s:/lustre/scratch118/core/sciops_repository/cram_cache/%2s/%2s/%s:URL=http:://sf2-farm-srv1.internal.sanger.ac.uk::8000/%s\n\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    \n    samtools merge -@ ${task.cpus} -f $cramfile ${crams}\n\n    f1=${samplename}_1.fastq.gz\n    f2=${samplename}_2.fastq.gz\n\n    numreads=\\$(samtools view -c -F 0x900 $cramfile)\n    if (( numreads >= ${params.min_reads} )); then\n                              # -O {stdout} -u {no compression}\n                              # -N {always append /1 and /2 to the read name}\n                              # -F 0x900 (bit 1, 8, filter secondary and supplementary reads)\n      echo -n \\$numreads > numreads.txt\n      samtools collate    \\\\\n          -O -u           \\\\\n          -@ ${task.cpus} \\\\\n          $cramfile pfx-${samplename} | \\\\\n      samtools fastq      \\\\\n          -N              \\\\\n          -F 0x900        \\\\\n          -@ ${task.cpus} \\\\\n          -1 \\$f1 -2 \\$f2 \\\\\n          -\n      sync \\$f1 \\$f2          # this line and next to tackle k8s weirdness (see k8s)\n      sleep 1\n    else\n      echo -e \"${samplename}\\\\tcram\\\\tlowreads\" > ${samplename}.lostcause.txt\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 67,
        "string_script": "    def cramfile = \"${samplename}_merged.cram\"\n    \"\"\"\n    export REF_PATH=/lustre/scratch117/core/sciops_repository/cram_cache/%2s/%2s/%s:/lustre/scratch118/core/sciops_repository/cram_cache/%2s/%2s/%s:URL=http:://sf2-farm-srv1.internal.sanger.ac.uk::8000/%s\n\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    \n    samtools merge -@ ${task.cpus} -f $cramfile ${crams}\n\n    f1=${samplename}_1.fastq.gz\n    f2=${samplename}_2.fastq.gz\n\n    numreads=\\$(samtools view -c -F 0x900 $cramfile)\n    if (( numreads >= ${params.min_reads} )); then\n                              # -O {stdout} -u {no compression}\n                              # -N {always append /1 and /2 to the read name}\n                              # -F 0x900 (bit 1, 8, filter secondary and supplementary reads)\n      echo -n \\$numreads > numreads.txt\n      samtools collate    \\\\\n          -O -u           \\\\\n          -@ ${task.cpus} \\\\\n          $cramfile pfx-${samplename} | \\\\\n      samtools fastq      \\\\\n          -N              \\\\\n          -F 0x900        \\\\\n          -@ ${task.cpus} \\\\\n          -1 \\$f1 -2 \\$f2 \\\\\n          -\n      sync \\$f1 \\$f2          # this line and next to tackle k8s weirdness (see k8s)\n      sleep 1\n    else\n      echo -e \"${samplename}\\\\tcram\\\\tlowreads\" > ${samplename}.lostcause.txt\n    fi\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "SynChr"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/synchr"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SynChr",
                "uri": "https://bio.tools/synchr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0283",
                                    "term": "Linkage analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Fast and Easy Tool to Reconstruct and Visualize Synteny Blocks along Eukaryotic Chromosomes.",
                "homepage": "http://www.lcqb.upmc.fr/CHROnicle/SynChro.html"
            }
        ],
        "inputs": [
            "samplename",
            "crams"
        ],
        "nb_inputs": 2,
        "outputs": [
            "samplename"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"crams to fastq_gz ${samplename}\"",
            "container \"lifebitai/samtools:latest\"",
            "containerOptions = \"--bind /lustre/scratch117/core/sciops_repository/cram_cache --bind /lustre/scratch118/core/sciops_repository/cram_cache\"",
            "errorStrategy 'retry'",
            "maxRetries 6",
            "time '400m'",
            "cpus 1",
            "memory '4G'",
            "publishDir \"${params.outdir}/fastq12/\", mode: 'symlink'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "filter_star_aln_rate": {
        "name_process": "filter_star_aln_rate",
        "string_process": "\nprocess filter_star_aln_rate {\n    tag \"filter_star_aln_rate ${samplename}\"\n    container \"lifebitai/salmon:latest\"\n\n                                \n    errorStrategy 'retry'\n    maxRetries 3\n    time '30m'\n    cpus 1\n    memory '2G'\n\n                                                          \n    \n    when:\n    params.run\n    \n    input:\n    set val(samplename), file(log_final_out)\n    output: \n    set val(samplename), stdout\n    script:\n\n    \"\"\"\n#!/usr/bin/env python3\nimport re\n\nwith open(\\\"${log_final_out}\\\",\\\"r\\\") as f:\n    for line in f:\n        if re.search(\\\"Uniquely mapped reads %\\\",line):\n                if float(re.findall(\\\"\\\\d+\\\\.\\\\d+\\\", line)[0]) > float(${params.min_pct_aln}):\n                    print('above_threshold', end='')\n                else:\n                    print('below_threshold', end='')\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n#!/usr/bin/env python3\nimport re\n\nwith open(\\\"${log_final_out}\\\",\\\"r\\\") as f:\n    for line in f:\n        if re.search(\\\"Uniquely mapped reads %\\\",line):\n                if float(re.findall(\\\"\\\\d+\\\\.\\\\d+\\\", line)[0]) > float(${params.min_pct_aln}):\n                    print('above_threshold', end='')\n                else:\n                    print('below_threshold', end='')\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename",
            "log_final_out"
        ],
        "nb_inputs": 2,
        "outputs": [
            "samplename"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"filter_star_aln_rate ${samplename}\"",
            "container \"lifebitai/salmon:latest\"",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "time '30m'",
            "cpus 1",
            "memory '2G'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "merge_featureCounts": {
        "name_process": "merge_featureCounts",
        "string_process": "\nprocess merge_featureCounts {\n    tag \"$aligner\"\n    scratch '/tmp'\n    stageInMode 'copy'\n    stageOutMode 'rsync'\n    container \"lifebitai/nfcore-rnaseq:1.0\"\n    publishDir \"${params.outdir}/combined\", mode: 'symlink'\n    label 'merge_feature'\n    memory = '100G'\n    cpus 2\n    time '600m'\n    errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    when:\n    params.run\n\n    input:\n    file(collected_fc_gene_txt)\n\n    output:\n    file '*-fc-genecounts.txt'\n    file(\"fofn_gene_featurecount.txt\")\n\n    shell:\n    suffix=['star':'.star.gene.fc.txt', 'hisat2':'.hisat2.gene.fc.txt']\n    aligner = \"star\"                           \n    outputname = \"${params.runtag}-${aligner}-fc-genecounts.txt\"\n    thesuffix  = suffix[aligner] ?: '.txt'\n    '''\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:$PATH\n\n    ls . | grep gene.fc.txt\\$ > fofn_gene_featurecount.txt\n\n    merge_featurecounts.py        \\\\\n      --rm-suffix !{thesuffix}                                       \\\\\n      -c 1 --skip-comments --header                                  \\\\\n      -o !{outputname} -I fofn_gene_featurecount.txt\n    '''\n}",
        "nb_lignes_process": 39,
        "string_script": "    suffix=['star':'.star.gene.fc.txt', 'hisat2':'.hisat2.gene.fc.txt']\n    aligner = \"star\"                           \n    outputname = \"${params.runtag}-${aligner}-fc-genecounts.txt\"\n    thesuffix  = suffix[aligner] ?: '.txt'\n    '''\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:$PATH\n\n    ls . | grep gene.fc.txt\\$ > fofn_gene_featurecount.txt\n\n    merge_featurecounts.py        \\\\\n      --rm-suffix !{thesuffix}                                       \\\\\n      -c 1 --skip-comments --header                                  \\\\\n      -o !{outputname} -I fofn_gene_featurecount.txt\n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Maligner"
        ],
        "tools_url": [
            "https://bio.tools/maligner"
        ],
        "tools_dico": [
            {
                "name": "Maligner",
                "uri": "https://bio.tools/maligner",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for aligning molecular or insilico restriction maps to a reference map.",
                "homepage": "https://github.com/LeeMendelowitz/maligner"
            }
        ],
        "inputs": [
            "collected_fc_gene_txt"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"$aligner\"",
            "scratch '/tmp'",
            "stageInMode 'copy'",
            "stageOutMode 'rsync'",
            "container \"lifebitai/nfcore-rnaseq:1.0\"",
            "publishDir \"${params.outdir}/combined\", mode: 'symlink'",
            "label 'merge_feature'",
            "memory = '100G'",
            "cpus 2",
            "time '600m'",
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3"
        ],
        "when": "params.run",
        "stub": ""
    },
    "tximport": {
        "name_process": "tximport",
        "string_process": "\nprocess tximport {\n    tag \"tximport $params.ensembl_lib\"\n    memory = '80G'\n    container \"lifebitai/rstudio-seurat-tximport:1.0\"\n    time '400m'\n    cpus 1\n    errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n    maxRetries 3\n    \n    publishDir \"${params.outdir}/tximport\", mode: 'symlink'\n\n    when:\n    params.run\n\n    input:\n    file (quant_sf_files)                   \n\n    output:\n    file(\"fofn_quantfiles.txt\")\n    file(\"txi_gene_counts.csv\")\n    file(\"txi_transcript_counts.csv\")\n    file(\"txi_lengthScaledTPM_gene_counts.csv\")\n    file(\"tximport.rdata\")\n                                                           \n                                                                \n                                                                                  \n\n    script:\n    \"\"\"\n    ls . | grep .quant.sf\\$ > fofn_quantfiles.txt\n\n    tximport.R \\\"$params.ensembl_lib\\\" fofn_quantfiles.txt \n    \"\"\"\n\n                                                                                          \n                                                          \n                                                                                        \n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    ls . | grep .quant.sf\\$ > fofn_quantfiles.txt\n\n    tximport.R \\\"$params.ensembl_lib\\\" fofn_quantfiles.txt \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quant_sf_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"tximport $params.ensembl_lib\"",
            "memory = '80G'",
            "container \"lifebitai/rstudio-seurat-tximport:1.0\"",
            "time '400m'",
            "cpus 1",
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/tximport\", mode: 'symlink'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "lostcause": {
        "name_process": "lostcause",
        "string_process": "\nprocess lostcause {\n\n    publishDir \"${params.outdir}/combined\", mode: 'symlink'\n\n    input:\n    file (inputs)                                                              \n\n    output:\n    file('*.lostcause_mqc.txt')                            \n\n    script:\n    def outputname = \"${params.runtag}.lostcause_mqc.txt\"\n    \"\"\"\n    echo -e \"# plot_type: 'table'\\n# section_name: 'Lost samples'\" > $outputname\n    echo -e \"Sample\\tProcess\\tMessage\" >> $outputname\n    cat $inputs | sort >> $outputname\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    def outputname = \"${params.runtag}.lostcause_mqc.txt\"\n    \"\"\"\n    echo -e \"# plot_type: 'table'\\n# section_name: 'Lost samples'\" > $outputname\n    echo -e \"Sample\\tProcess\\tMessage\" >> $outputname\n    cat $inputs | sort >> $outputname\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "publishDir \"${params.outdir}/combined\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "salmon": {
        "name_process": "salmon",
        "string_process": "\nprocess salmon {\n    tag \"salmon $samplename\"\n                    \n    memory = {  10.GB + 20.GB * (task.attempt-1) }\n    container \"lifebitai/salmon:latest\"\n    time '700m'\n    errorStrategy { task.attempt <= 6 ? 'retry' : 'ignore' }\n    maxRetries 6\n    \n    publishDir \"${params.outdir}/salmon\", mode: 'symlink'\n\n    when:\n    params.run\n\n    input:\n    set val(samplename), file(reads)                  \n    file salmon_index_dir                                  \n    file salmon_trans_gene_txt                                       \n\n    output:\n    file \"${samplename}.quant.sf\"                        \n    file \"${samplename}.quant.genes.sf\"                       \n    file \"my_outs/${samplename}\"                                 \n\n    script:\n    \"\"\"\n    salmon quant \\\\\n        -i ${salmon_index_dir} \\\\\n        -l ISR \\\\\n        -p ${task.cpus} \\\\\n        --seqBias \\\\\n        --gcBias \\\\\n        --posBias \\\\\n        --no-version-check \\\\\n        -q \\\\\n        -o . \\\\\n        -1 ${reads[0]} \\\\\n        -2 ${reads[1]} \\\\\n        -g ${salmon_trans_gene_txt} \\\\\n        --useVBOpt \\\\\n        --numBootstraps 100\n    mv quant.sf ${samplename}.quant.sf\n    mv quant.genes.sf ${samplename}.quant.genes.sf\n    mkdir -p my_outs/${samplename}/libParams\n    mkdir -p my_outs/${samplename}/aux_info\n    ln -f aux_info/meta_info.json my_outs/${samplename}/aux_info/meta_info.json\n    ln -f libParams/flenDist.txt  my_outs/${samplename}/libParams/flenDist.txt\n    \"\"\"\n\n                                                                                          \n                                                          \n                                                                                        \n}",
        "nb_lignes_process": 52,
        "string_script": "    \"\"\"\n    salmon quant \\\\\n        -i ${salmon_index_dir} \\\\\n        -l ISR \\\\\n        -p ${task.cpus} \\\\\n        --seqBias \\\\\n        --gcBias \\\\\n        --posBias \\\\\n        --no-version-check \\\\\n        -q \\\\\n        -o . \\\\\n        -1 ${reads[0]} \\\\\n        -2 ${reads[1]} \\\\\n        -g ${salmon_trans_gene_txt} \\\\\n        --useVBOpt \\\\\n        --numBootstraps 100\n    mv quant.sf ${samplename}.quant.sf\n    mv quant.genes.sf ${samplename}.quant.genes.sf\n    mkdir -p my_outs/${samplename}/libParams\n    mkdir -p my_outs/${samplename}/aux_info\n    ln -f aux_info/meta_info.json my_outs/${samplename}/aux_info/meta_info.json\n    ln -f libParams/flenDist.txt  my_outs/${samplename}/libParams/flenDist.txt\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "samplename",
            "reads",
            "salmon_index_dir",
            "salmon_trans_gene_txt"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"salmon $samplename\"",
            "memory = { 10.GB + 20.GB * (task.attempt-1) }",
            "container \"lifebitai/salmon:latest\"",
            "time '700m'",
            "errorStrategy { task.attempt <= 6 ? 'retry' : 'ignore' }",
            "maxRetries 6",
            "publishDir \"${params.outdir}/salmon\", mode: 'symlink'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "baton_study_id": {
        "name_process": "baton_study_id",
        "string_process": "\nprocess baton_study_id {\n    tag \"${study_id}\"\n    memory = '4G'\n    time '240m'\n    cpus 1\n    errorStrategy { task.attempt <= 1 ? 'retry' : 'ignore' }\n    maxRetries 1\n    maxForks 12\n    publishDir \"${params.outdir}/\", mode: 'copy', pattern: \"samples.tsv\", overwrite: true\n\n    when:\n    params.run\n\n    input: \n    val study_id\n\n    output: \n    tuple val(study_id), file('samples.tsv'), emit: samples_tsv\n\n    script:\n    \"\"\"\n    bash $workflow.projectDir/../bin/rna_seq/baton.sh ${study_id}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    bash $workflow.projectDir/../bin/rna_seq/baton.sh ${study_id}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "study_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"${study_id}\"",
            "memory = '4G'",
            "time '240m'",
            "cpus 1",
            "errorStrategy { task.attempt <= 1 ? 'retry' : 'ignore' }",
            "maxRetries 1",
            "maxForks 12",
            "publishDir \"${params.outdir}/\", mode: 'copy', pattern: \"samples.tsv\", overwrite: true"
        ],
        "when": "params.run",
        "stub": ""
    },
    "samtools_index_idxstats": {
        "name_process": "samtools_index_idxstats",
        "string_process": "\nprocess samtools_index_idxstats {\n    tag \"${samplename}\"\n    container \"lifebitai/nfcore-rnaseq:latest\"\n    memory = '8G'\n    cpus 1\n    time '300m'\n    errorStrategy { task.attempt <= 5 ? 'retry' : 'ignore' }\n    maxRetries 5\n    publishDir \"${params.outdir}/idxstats/\", mode: 'symlink', pattern: \"*.idxstats\"\n\n    when:\n    params.run\n\n    input:\n    set val(aligner), val(samplename), file(thebam)                   \n\n    output:\n    set val(samplename), file(\"*.idxstats\")                     \n\n    script:\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    samtools index $thebam\n    samtools idxstats $thebam > ${samplename}.idxstats\n    rm ${thebam}.bai\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n\n    samtools index $thebam\n    samtools idxstats $thebam > ${samplename}.idxstats\n    rm ${thebam}.bai\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "aligner",
            "samplename",
            "thebam"
        ],
        "nb_inputs": 3,
        "outputs": [
            "samplename"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"${samplename}\"",
            "container \"lifebitai/nfcore-rnaseq:latest\"",
            "memory = '8G'",
            "cpus 1",
            "time '300m'",
            "errorStrategy { task.attempt <= 5 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/idxstats/\", mode: 'symlink', pattern: \"*.idxstats\""
        ],
        "when": "params.run",
        "stub": ""
    },
    "heatmap": {
        "name_process": "heatmap",
        "string_process": "\nprocess heatmap {\n    tag \"heatmap\"\n    memory = '30G'\n    container \"lifebitai/rstudio-seurat-tximport:1.0\"\n    time '400m'\n    cpus 1\n    errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n    maxRetries 3\n    \n    publishDir \"${params.outdir}/heatmap/\", mode: 'symlink'\n\n    when:\n    params.run\n\n    input:\n    file (count_matrix_tsv)\n\n    output:\n    tuple file(\"outputs/salmon_PCA_unbiased_toppc.pdf\"), file(\"outputs/salmon_heatmap_toppc.pdf\"), emit: pca_heatmap\n\n    script:\n    \"\"\"\n    heatmap.R $count_matrix_tsv\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    heatmap.R $count_matrix_tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "count_matrix_tsv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "tag \"heatmap\"",
            "memory = '30G'",
            "container \"lifebitai/rstudio-seurat-tximport:1.0\"",
            "time '400m'",
            "cpus 1",
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/heatmap/\", mode: 'symlink'"
        ],
        "when": "params.run",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    scratch '/tmp'\n    stageInMode 'copy'\n    stageOutMode 'rsync'\n    container \"lifebitai/nfcore-rnaseq:latest\"\n    errorStrategy = { task.attempt <= 5 ? 'retry' : 'ignore' }\n    cpus =   {  2 * 2 * Math.min(2, task.attempt) }\n    memory = {  40.GB + 20.GB * (task.attempt-1) }\n    maxRetries 5\n    cpus 2\n    queue 'long'\n    time '900m'\n\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy',\n\n    when:\n    params.run\n\n    input:\n    file (fastqc:'fastqc/*')                                               \n    file ('featureCounts/*')                                                   \n    file ('featureCounts_biotype/*')                                                          \n    file ('star/*')                                                    \n    file ('salmon/*')                                                      \n\n    output:\n    file \"*multiqc_report.html\"\n    file \"*_data\"\n\n    script:\n    def reporttitle = \"${params.runtag}\"\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n    export LC_ALL=C.UTF-8\n    export LANG=C.UTF-8\n\n    multiqc . -f --filename multiqc_report.html --title \"$reporttitle\" -m featureCounts -m star -m fastqc -m salmon\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def reporttitle = \"${params.runtag}\"\n    \"\"\"\n    export PATH=/opt/conda/envs/nf-core-rnaseq-1.3/bin:\\$PATH\n    export LC_ALL=C.UTF-8\n    export LANG=C.UTF-8\n\n    multiqc . -f --filename multiqc_report.html --title \"$reporttitle\" -m featureCounts -m star -m fastqc -m salmon\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__sanger-demo-rnaseq",
        "directive": [
            "scratch '/tmp'",
            "stageInMode 'copy'",
            "stageOutMode 'rsync'",
            "container \"lifebitai/nfcore-rnaseq:latest\"",
            "errorStrategy = { task.attempt <= 5 ? 'retry' : 'ignore' }",
            "cpus = { 2 * 2 * Math.min(2, task.attempt) }",
            "memory = { 40.GB + 20.GB * (task.attempt-1) }",
            "maxRetries 5",
            "cpus 2",
            "queue 'long'",
            "time '900m'",
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy',"
        ],
        "when": "params.run",
        "stub": ""
    }
}
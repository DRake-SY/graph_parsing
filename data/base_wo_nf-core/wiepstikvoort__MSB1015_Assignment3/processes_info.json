{
    "parseSMILES": {
        "name_process": "parseSMILES",
        "string_process": "\nprocess parseSMILES {\n    input:\n    each set from molecules_ch\n\n                                                                                                    \n                                                                                         \n  \n    exec:\n       for(entry in set) {\n\t  wikidata = entry[0]\n          smiles = entry[1]\n\t  isosmiles = entry[2]\n\n                                                                                                      \n                                      \n  \n\n\t  cdk = new CDKManager(\".\")\n\n                                                                                                     \n                                                                                   \n                                                                                                   \n                                                                                                    \n                                     \n                                                                                                 \n                               \n  \n\t  try {\n\t  mol = cdk.fromSMILES(\"$smiles\")\n\t  jplog = new JPlogPDescriptor()\n\t\tJPLOGofMol = jplog.calculate(mol.getAtomContainer()).value.toString()\n\t\n\t  if (JPLOGofMol == \"NaN\") {\n\t  println \"Using isoSMILES ...\"\n\t  isomol = cdk.fromSMILES(\"$isosmiles\")\n\t  JPLOGofMol = jplog.calculate(isomol.getAtomContainer()).value.toString()\n\t  }\n\n\t  println \"JPlogP value:\" + JPLOGofMol\t  \n\t  } catch (Exception exc) {\n\t   println \"$exc\" \n\t  }\n       }\n   }",
        "nb_lignes_process": 43,
        "string_script": "       for(entry in set) {\n\t  wikidata = entry[0]\n          smiles = entry[1]\n\t  isosmiles = entry[2]\n\n                                                                                                      \n                                      \n  \n\n\t  cdk = new CDKManager(\".\")\n\n                                                                                                     \n                                                                                   \n                                                                                                   \n                                                                                                    \n                                     \n                                                                                                 \n                               \n  \n\t  try {\n\t  mol = cdk.fromSMILES(\"$smiles\")\n\t  jplog = new JPlogPDescriptor()\n\t\tJPLOGofMol = jplog.calculate(mol.getAtomContainer()).value.toString()\n\t\n\t  if (JPLOGofMol == \"NaN\") {\n\t  println \"Using isoSMILES ...\"\n\t  isomol = cdk.fromSMILES(\"$isosmiles\")\n\t  JPLOGofMol = jplog.calculate(isomol.getAtomContainer()).value.toString()\n\t  }\n\n\t  println \"JPlogP value:\" + JPLOGofMol\t  \n\t  } catch (Exception exc) {\n\t   println \"$exc\" \n\t  }\n       }",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "molecules_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wiepstikvoort__MSB1015_Assignment3",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "printSMILES": {
        "name_process": "printSMILES",
        "string_process": "\nprocess printSMILES {\n    input:\n    set wikidata, smiles from molecules_ch\n\n    exec:\n      println \"${wikidata} has SMILES: ${smiles}\"\n}",
        "nb_lignes_process": 6,
        "string_script": "      println \"${wikidata} has SMILES: ${smiles}\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "molecules_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wiepstikvoort__MSB1015_Assignment3",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
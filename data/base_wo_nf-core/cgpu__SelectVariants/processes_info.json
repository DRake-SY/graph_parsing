{
    "SelectSNPsPASS": {
        "name_process": "SelectSNPsPASS",
        "string_process": "\nprocess SelectSNPsPASS {\n\n    tag \"${filtered_vcf}\"\n    container 'broadinstitute/gatk:latest'\n    publishDir \"${params.outdir}/SelectedSomaticSNPs_VCF\", mode: 'copy'\n\n    input:\n    file(filtered_vcf) from vcf_filtered_for_select_variants\n    file(filtered_vcf_idx) from idx_vcf_filtered_for_select_variants\n    each file(fasta) from fasta_select_variants_PASS\n    each file(fai) from fai_select_variants_PASS\n    each file(dict) from dict_select_variants_PASS\n\n    output:\n    set file(\"*vcf\") into vcf_SNPs_PASS_for_vcf2maf, vcf_SNP_count_info_channel\n    file(\"*vcf.idx\") into idx_vcf_SNPs_PASS_for_vcf2maf\n\n    script:\n    \"\"\"\n    gatk SelectVariants \\\n    -R ${fasta} \\\n    -V $filtered_vcf \\\n    -O ${filtered_vcf.simpleName}.passed.SNPs.vcf \\\n    -select 'vc.isNotFiltered()' \\\n    -select-type SNP\n   \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    gatk SelectVariants \\\n    -R ${fasta} \\\n    -V $filtered_vcf \\\n    -O ${filtered_vcf.simpleName}.passed.SNPs.vcf \\\n    -select 'vc.isNotFiltered()' \\\n    -select-type SNP\n   \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "vcf_filtered_for_select_variants",
            "idx_vcf_filtered_for_select_variants",
            "fasta_select_variants_PASS",
            "fai_select_variants_PASS",
            "dict_select_variants_PASS"
        ],
        "nb_inputs": 5,
        "outputs": [
            "vcf_SNPs_PASS_for_vcf2maf",
            "vcf_SNP_count_info_channel",
            "idx_vcf_SNPs_PASS_for_vcf2maf"
        ],
        "nb_outputs": 3,
        "name_workflow": "cgpu__SelectVariants",
        "directive": [
            "tag \"${filtered_vcf}\"",
            "container 'broadinstitute/gatk:latest'",
            "publishDir \"${params.outdir}/SelectedSomaticSNPs_VCF\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "Vcf2maf": {
        "name_process": "Vcf2maf",
        "string_process": "\nprocess Vcf2maf {\n\n    tag \"${vcf_passed_SNPs}\"\n    container 'levim/vcf2maf:1.0'\n    publishDir \"${params.outdir}/SelectedSomaticSNPs_MAF\", mode: 'copy'\n    echo true\n\n    input:\n    file(vcf_passed_SNPs) from vcf_SNPs_PASS_for_vcf2maf\n    file(idx_vcf_passed_SNPs) from idx_vcf_SNPs_PASS_for_vcf2maf\n    each file(fasta) from fasta_vcf2maf\n    each file(fai) from fai_vcf2maf\n    each file(dict) from dict_vcf2maf\n\n    output:\n    file(\"*\") into vcf2maf_annotated_files_channel\n    file(\"*.maf\") into maf_SNP_count_info_channel\n \n    script:\n    \"\"\"\n    basename=\\$(echo ${vcf_passed_SNPs.simpleName})\n    tumourID=\\$(echo \\$basename | cut -f 1 -d '_')\n    normalID=\\$(echo \\$basename | cut -f 4 -d '_')\n\n    echo  \\$tumourID\n    echo  \\$normalID\n\n    perl /opt/vcf2maf/vcf2maf.pl \\\n    --input-vcf $vcf_passed_SNPs \\\n    --output-maf \"\\${basename}.passed.SNPs.maf\"  \\\n    --tumor-id \\${tumourID} \\\n    --normal-id \\${normalID} \\\n    --ref-fasta /vepdata/Homo_sapiens.GRCh37.75.dna.primary_assembly.fa \\\n    --ncbi-build  GRCh37 \\\n    --filter-vcf /vepdata/ExAC_nonTCGA.r0.3.1.sites.vep.vcf.gz \\\n    --vep-path /opt/variant_effect_predictor_89/ensembl-tools-release-89/scripts/variant_effect_predictor \\\n    --vep-data /vepdata/ \\\n    --vep-forks 2 \\\n    --buffer-size 200 \\\n    --species homo_sapiens \\\n    --cache-version 89\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    basename=\\$(echo ${vcf_passed_SNPs.simpleName})\n    tumourID=\\$(echo \\$basename | cut -f 1 -d '_')\n    normalID=\\$(echo \\$basename | cut -f 4 -d '_')\n\n    echo  \\$tumourID\n    echo  \\$normalID\n\n    perl /opt/vcf2maf/vcf2maf.pl \\\n    --input-vcf $vcf_passed_SNPs \\\n    --output-maf \"\\${basename}.passed.SNPs.maf\"  \\\n    --tumor-id \\${tumourID} \\\n    --normal-id \\${normalID} \\\n    --ref-fasta /vepdata/Homo_sapiens.GRCh37.75.dna.primary_assembly.fa \\\n    --ncbi-build  GRCh37 \\\n    --filter-vcf /vepdata/ExAC_nonTCGA.r0.3.1.sites.vep.vcf.gz \\\n    --vep-path /opt/variant_effect_predictor_89/ensembl-tools-release-89/scripts/variant_effect_predictor \\\n    --vep-data /vepdata/ \\\n    --vep-forks 2 \\\n    --buffer-size 200 \\\n    --species homo_sapiens \\\n    --cache-version 89\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_SNPs_PASS_for_vcf2maf",
            "idx_vcf_SNPs_PASS_for_vcf2maf",
            "fasta_vcf2maf",
            "fai_vcf2maf",
            "dict_vcf2maf"
        ],
        "nb_inputs": 5,
        "outputs": [
            "vcf2maf_annotated_files_channel",
            "maf_SNP_count_info_channel"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__SelectVariants",
        "directive": [
            "tag \"${vcf_passed_SNPs}\"",
            "container 'levim/vcf2maf:1.0'",
            "publishDir \"${params.outdir}/SelectedSomaticSNPs_MAF\", mode: 'copy'",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "CountSNPs": {
        "name_process": "CountSNPs",
        "string_process": "\nprocess CountSNPs {\n\n    tag \"Counting..\"\n    container 'levim/vcf2maf:1.0'\n    publishDir \"${params.outdir}/SummaryInfo\", mode: 'copy'\n    echo true\n\n    input:\n    file (vcf) from vcf_SNP_count_info_channel.collect().ifEmpty([])\n    file (maf) from maf_SNP_count_info_channel.collect().ifEmpty([])\n\n    output:\n    file(\"*\") into counts_of_snps_channel\n \n    script:\n    \"\"\"\n    grep -vcw '^#' * >> lines_without_comments_per_file.txt\n    grep -cw '^#' * >> lines_with_comments_per_file.txt\n    wc -l * >> all_lines_per_file.txt\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    grep -vcw '^#' * >> lines_without_comments_per_file.txt\n    grep -cw '^#' * >> lines_with_comments_per_file.txt\n    wc -l * >> all_lines_per_file.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_SNP_count_info_channel",
            "maf_SNP_count_info_channel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "counts_of_snps_channel"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__SelectVariants",
        "directive": [
            "tag \"Counting..\"",
            "container 'levim/vcf2maf:1.0'",
            "publishDir \"${params.outdir}/SummaryInfo\", mode: 'copy'",
            "echo true"
        ],
        "when": "",
        "stub": ""
    }
}
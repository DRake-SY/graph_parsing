{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath( params.fasta )\n        .into{ ch_fasta; ch_fasta_index; ch_bam_filter }",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta",
                "P"
            ],
            [
                "ch_fasta_index",
                "P"
            ],
            [
                "ch_bam_filter",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "species = Channel.from(params.species)",
        "origin": [
            [
                "params.species",
                "V"
            ]
        ],
        "gives": [
            [
                "species",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: params.single_end ? 1 : 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { ch_raw_reads_fastqc; ch_raw_reads_align }",
        "origin": [
            [
                "params.reads, size: params.single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_raw_reads_fastqc",
                "P"
            ],
            [
                "ch_raw_reads_align",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "_fastqc.{zip,html}' into ch_fastqc_results_for_multiqc",
        "origin": [
            [
                "_fastqc",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "ch_raw_reads_align.combine(ch_bwa_index)",
        "origin": [
            [
                "ch_raw_reads_align",
                "P"
            ],
            [
                "ch_bwa_index",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_6": {
        "string": "ch_bwa_bam.combine(ch_bam_filter)",
        "origin": [
            [
                "ch_bwa_bam",
                "P"
            ],
            [
                "ch_bam_filter",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "ch_fastqc_results_for_multiqc.collect().ifEmpty([])",
        "origin": [
            [
                "ch_fastqc_results_for_multiqc",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "ch_bamqc_for_multiqc.collect().ifEmpty([])",
        "origin": [
            [
                "ch_bamqc_for_multiqc",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "ch_insert_multiqc.collect().ifEmpty([])",
        "origin": [
            [
                "ch_insert_multiqc",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n  .fromFilePairs(\"${params.dataDir}/*_{R,}{1,2}.f{ast,}q.gz\")\n  .set {readPairs}",
        "origin": [
            [
                "\"${params.dataDir}/*_{R,}{1,2}.f{ast,}q.gz\"",
                "A"
            ]
        ],
        "gives": [
            [
                "readPairs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.from(inputs).into{inputCh; inputChcp}",
        "origin": [
            [
                "inputs",
                "V"
            ]
        ],
        "gives": [
            [
                "inputCh",
                "P"
            ],
            [
                "inputChcp",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "readPairs.into{readPairsFastQCOriginal; readPairsDemultiplex}",
        "origin": [
            [
                "readPairs",
                "P"
            ]
        ],
        "gives": [
            [
                "readPairsFastQCOriginal",
                "P"
            ],
            [
                "readPairsDemultiplex",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "readPairsDemultiedTrimmingL.flatten()\n  .merge(readPairsDemultiedTrimmingR.flatten())\n  .into{readPairsDemultiedTrimPF; readPairsDemultiedTrimFlat}",
        "origin": [
            [
                "readPairsDemultiedTrimmingL",
                "P"
            ]
        ],
        "gives": [
            [
                "readPairsDemultiedTrimPF",
                "P"
            ],
            [
                "readPairsDemultiedTrimFlat",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "readPairsTrimmed.into{readPairsFastQCTrimmed; readPairsRunMapping}",
        "origin": [
            [
                "readPairsTrimmed",
                "P"
            ]
        ],
        "gives": [
            [
                "readPairsFastQCTrimmed",
                "P"
            ],
            [
                "readPairsRunMapping",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "mappedFiles.into{mappedFiles1; mappedFiles2; mappedFiles3; mappedFiles4}",
        "origin": [
            [
                "mappedFiles",
                "P"
            ]
        ],
        "gives": [
            [
                "mappedFiles1",
                "P"
            ],
            [
                "mappedFiles2",
                "P"
            ],
            [
                "mappedFiles3",
                "P"
            ],
            [
                "mappedFiles4",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "inputChFile = inputChcp.map{it-> \"${it[2]}%${it[3]}\"}.flatten().cross(mappedFiles2.map{it -> [\"${it[1]}%${it[0]}\", it]})\n  .map{it -> it[1]}",
        "origin": [
            [
                "inputChcp",
                "P"
            ]
        ],
        "gives": [
            [
                "inputChFile",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "mappedPair = mappedFiles1.map{it -> [\"${it[1]}%${it[0]}\", it]}.cross(inputCh.map{it-> [\"${it[0]}%${it[1]}\", \"${it[2]}%${it[3]}\"]})\n  .map{it -> [it[1][1], it[0][1]]}",
        "origin": [
            [
                "mappedFiles1",
                "P"
            ]
        ],
        "gives": [
            [
                "mappedPair",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "forHomerWithInput = inputChFile.cross(mappedPair)\n  .map{it -> [it[0][1], it[1][1]]}.map{it->it.flatten()}",
        "origin": [
            [
                "inputChFile",
                "P"
            ],
            [
                "mappedPair",
                "P"
            ]
        ],
        "gives": [
            [
                "forHomerWithInput",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "forHomerWithoutInput = mappedFiles3.filter{it->!(it[0] in withInput)}",
        "origin": [
            [
                "mappedFiles3",
                "P"
            ]
        ],
        "gives": [
            [
                "forHomerWithoutInput",
                "P"
            ]
        ]
    }
}
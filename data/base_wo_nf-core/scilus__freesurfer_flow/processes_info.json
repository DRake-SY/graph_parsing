{
    "Recon_All": {
        "name_process": "Recon_All",
        "string_process": "\nprocess Recon_All {\n    cpus params.nb_threads\n\n    input:\n    set sid, file(anat) from in_files\n\n    output:\n    set sid, \"$sid/\" into folders_for_atlases\n\n    script:\n    \"\"\"\n    export SUBJECTS_DIR=.\n    recon-all -i $anat -s $sid -all -parallel -openmp $params.nb_threads\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    export SUBJECTS_DIR=.\n    recon-all -i $anat -s $sid -all -parallel -openmp $params.nb_threads\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "folders_for_atlases"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__freesurfer_flow",
        "directive": [
            "cpus params.nb_threads"
        ],
        "when": "",
        "stub": ""
    },
    "Generate_Atlases_FS_BN_GL_SF": {
        "name_process": "Generate_Atlases_FS_BN_GL_SF",
        "string_process": "\nprocess Generate_Atlases_FS_BN_GL_SF {\n    cpus params.nb_threads\n\n    input:\n    set sid, file(folder) from all_folders_for_atlases_FS_BN_GL\n\n    when:\n    params.compute_FS_BN_GL_SF\n\n    output:\n    file \"*[brainnetome,freesurfer,glasser,schaefer]*.nii.gz\"\n    file \"*[brainnetome,freesurfer,glasser,schaefer]*.txt\"\n    file \"*[brainnetome,freesurfer,glasser,schaefer]*.json\"\n\n    script:\n    \"\"\"\n    ln -s $params.atlas_utils_folder/fsaverage \\$(dirname ${folder})/\n    bash $params.atlas_utils_folder/freesurfer_utils/generate_atlas_FS_BN_GL_SF_v4.sh \\$(dirname ${folder}) ${sid} ${params.nb_threads} FS_BN_GL_SF_Atlas/\n\n    cp $sid/FS_BN_GL_SF_Atlas/* ./\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    ln -s $params.atlas_utils_folder/fsaverage \\$(dirname ${folder})/\n    bash $params.atlas_utils_folder/freesurfer_utils/generate_atlas_FS_BN_GL_SF_v4.sh \\$(dirname ${folder}) ${sid} ${params.nb_threads} FS_BN_GL_SF_Atlas/\n\n    cp $sid/FS_BN_GL_SF_Atlas/* ./\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_folders_for_atlases_FS_BN_GL"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__freesurfer_flow",
        "directive": [
            "cpus params.nb_threads"
        ],
        "when": "params.compute_FS_BN_GL_SF",
        "stub": ""
    },
    "Generate_Atlases_Lobes": {
        "name_process": "Generate_Atlases_Lobes",
        "string_process": "\nprocess Generate_Atlases_Lobes {\n    cpus params.nb_threads\n\n    input:\n    set sid, file(folder) from all_folders_for_atlases_lobes\n\n    output:\n    file \"*lobes*.nii.gz\"\n    file \"*lobes*.txt\"\n    file \"*lobes*.json\"\n\n    script:\n    \"\"\"\n    mri_convert ${folder}/mri/rawavg.mgz rawavg.nii.gz\n\n    mri_convert ${folder}/mri/wmparc.mgz wmparc.nii.gz\n    scil_reshape_to_reference.py wmparc.nii.gz rawavg.nii.gz wmparc.nii.gz --interpolation nearest -f \n    scil_image_math.py convert wmparc.nii.gz wmparc.nii.gz --data_type uint16 -f\n    \n    mri_convert ${folder}/mri/brainmask.mgz brain_mask.nii.gz\n    scil_image_math.py lower_threshold brain_mask.nii.gz 0.001 brain_mask.nii.gz --data_type uint8 -f\n    scil_image_math.py dilation brain_mask.nii.gz 1 brain_mask.nii.gz -f\n    scil_reshape_to_reference.py brain_mask.nii.gz rawavg.nii.gz brain_mask.nii.gz --interpolation nearest -f \n    scil_image_math.py convert brain_mask.nii.gz brain_mask.nii.gz --data_type uint8 -f\n\n    scil_combine_labels.py atlas_lobes_v4.nii.gz -v wmparc.nii.gz 1003 1012 1014 1017 1018 1019 1020 1024 1027 1028 1032 -v wmparc.nii.gz 1008 1022 1025 1029 1031 -v wmparc.nii.gz 1005 1011 1013 1021 -v wmparc.nii.gz 1001 1006 1007 1009 1015 1015 1030 1033 -v wmparc.nii.gz 1002 1010 1023 1026 -v wmparc.nii.gz 8 -v wmparc.nii.gz 10 11 12 13 17 18 26 28 -v wmparc.nii.gz 2003 2012 2014 2017 2018 2019 2020 2024 2027 2028 2032 -v wmparc.nii.gz 2008 2022 2025 2029 2031 -v wmparc.nii.gz 2005 2011 2013 2021 -v wmparc.nii.gz 2001 2006 2007 2009 2015 2015 2030 2033 -v wmparc.nii.gz 2002 2010 2023 2026 -v wmparc.nii.gz 49 50 51 52 53 54 58 60 -v wmparc.nii.gz 47 -v wmparc.nii.gz 16 --merge\n    scil_dilate_labels.py atlas_lobes_v4.nii.gz atlas_lobes_v4_dilate.nii.gz --distance 2 --label_to_dilate 1 2 3 4 5 6 8 9 10 11 12 14 15 --mask brain_mask.nii.gz\n    cp $params.atlas_utils_folder/freesurfer_utils/*lobes_v4* ./\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    mri_convert ${folder}/mri/rawavg.mgz rawavg.nii.gz\n\n    mri_convert ${folder}/mri/wmparc.mgz wmparc.nii.gz\n    scil_reshape_to_reference.py wmparc.nii.gz rawavg.nii.gz wmparc.nii.gz --interpolation nearest -f \n    scil_image_math.py convert wmparc.nii.gz wmparc.nii.gz --data_type uint16 -f\n    \n    mri_convert ${folder}/mri/brainmask.mgz brain_mask.nii.gz\n    scil_image_math.py lower_threshold brain_mask.nii.gz 0.001 brain_mask.nii.gz --data_type uint8 -f\n    scil_image_math.py dilation brain_mask.nii.gz 1 brain_mask.nii.gz -f\n    scil_reshape_to_reference.py brain_mask.nii.gz rawavg.nii.gz brain_mask.nii.gz --interpolation nearest -f \n    scil_image_math.py convert brain_mask.nii.gz brain_mask.nii.gz --data_type uint8 -f\n\n    scil_combine_labels.py atlas_lobes_v4.nii.gz -v wmparc.nii.gz 1003 1012 1014 1017 1018 1019 1020 1024 1027 1028 1032 -v wmparc.nii.gz 1008 1022 1025 1029 1031 -v wmparc.nii.gz 1005 1011 1013 1021 -v wmparc.nii.gz 1001 1006 1007 1009 1015 1015 1030 1033 -v wmparc.nii.gz 1002 1010 1023 1026 -v wmparc.nii.gz 8 -v wmparc.nii.gz 10 11 12 13 17 18 26 28 -v wmparc.nii.gz 2003 2012 2014 2017 2018 2019 2020 2024 2027 2028 2032 -v wmparc.nii.gz 2008 2022 2025 2029 2031 -v wmparc.nii.gz 2005 2011 2013 2021 -v wmparc.nii.gz 2001 2006 2007 2009 2015 2015 2030 2033 -v wmparc.nii.gz 2002 2010 2023 2026 -v wmparc.nii.gz 49 50 51 52 53 54 58 60 -v wmparc.nii.gz 47 -v wmparc.nii.gz 16 --merge\n    scil_dilate_labels.py atlas_lobes_v4.nii.gz atlas_lobes_v4_dilate.nii.gz --distance 2 --label_to_dilate 1 2 3 4 5 6 8 9 10 11 12 14 15 --mask brain_mask.nii.gz\n    cp $params.atlas_utils_folder/freesurfer_utils/*lobes_v4* ./\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_folders_for_atlases_lobes"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__freesurfer_flow",
        "directive": [
            "cpus params.nb_threads"
        ],
        "when": "",
        "stub": ""
    },
    "Generate_Atlases_Lausanne": {
        "name_process": "Generate_Atlases_Lausanne",
        "string_process": "\nprocess Generate_Atlases_Lausanne {\n    cpus 1\n\n    input:\n    set sid, file(folder) from all_folders_for_atlases_lausanne\n    each scale from scales\n\n    when:\n    params.compute_lausanne_multiscale\n\n    output:\n    file \"lausanne_2008_scale_${scale}.nii.gz\"\n    file \"lausanne_2008_scale_${scale}_dilate.nii.gz\"\n    file \"*.txt\"\n    file \"*.json\"\n\n    script:\n    \"\"\"\n    ln -s $params.atlas_utils_folder/fsaverage \\$(dirname ${folder})/\n    freesurfer_home=\\$(dirname \\$(dirname \\$(which mri_label2vol)))\n    python3.7 $params.atlas_utils_folder/lausanne_multi_scale_atlas/generate_multiscale_parcellation.py \\$(dirname ${folder}) ${sid} \\$freesurfer_home --scale ${scale} --dilation_factor 0 --log_level DEBUG\n\n    mri_convert ${folder}/mri/rawavg.mgz rawavg.nii.gz\n    scil_image_math.py lower_threshold rawavg.nii.gz 0.001 mask.nii.gz --data_type uint8\n    scil_reshape_to_reference.py ${folder}/mri/lausanne2008.scale${scale}+aseg.nii.gz mask.nii.gz lausanne_2008_scale_${scale}.nii.gz --interpolation nearest\n    scil_image_math.py convert lausanne_2008_scale_${scale}.nii.gz lausanne_2008_scale_${scale}.nii.gz --data_type int16 -f\n    scil_dilate_labels.py lausanne_2008_scale_${scale}.nii.gz lausanne_2008_scale_${scale}_dilate.nii.gz --distance 2 --mask mask.nii.gz\n    \n    cp $params.atlas_utils_folder/lausanne_multi_scale_atlas/*.txt ./\n    cp $params.atlas_utils_folder/lausanne_multi_scale_atlas/*.json ./\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    ln -s $params.atlas_utils_folder/fsaverage \\$(dirname ${folder})/\n    freesurfer_home=\\$(dirname \\$(dirname \\$(which mri_label2vol)))\n    python3.7 $params.atlas_utils_folder/lausanne_multi_scale_atlas/generate_multiscale_parcellation.py \\$(dirname ${folder}) ${sid} \\$freesurfer_home --scale ${scale} --dilation_factor 0 --log_level DEBUG\n\n    mri_convert ${folder}/mri/rawavg.mgz rawavg.nii.gz\n    scil_image_math.py lower_threshold rawavg.nii.gz 0.001 mask.nii.gz --data_type uint8\n    scil_reshape_to_reference.py ${folder}/mri/lausanne2008.scale${scale}+aseg.nii.gz mask.nii.gz lausanne_2008_scale_${scale}.nii.gz --interpolation nearest\n    scil_image_math.py convert lausanne_2008_scale_${scale}.nii.gz lausanne_2008_scale_${scale}.nii.gz --data_type int16 -f\n    scil_dilate_labels.py lausanne_2008_scale_${scale}.nii.gz lausanne_2008_scale_${scale}_dilate.nii.gz --distance 2 --mask mask.nii.gz\n    \n    cp $params.atlas_utils_folder/lausanne_multi_scale_atlas/*.txt ./\n    cp $params.atlas_utils_folder/lausanne_multi_scale_atlas/*.json ./\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_folders_for_atlases_lausanne",
            "scales"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__freesurfer_flow",
        "directive": [
            "cpus 1"
        ],
        "when": "params.compute_lausanne_multiscale",
        "stub": ""
    }
}
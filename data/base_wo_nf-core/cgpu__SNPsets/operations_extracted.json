{
    "OPERATION_1": {
        "string": "Channel.fromPath(\"${params.inputdir}/*.vcf\")\n        .ifEmpty { exit 1, \"--inputdir  not found or is missing required .vcf files\" }\n        .collect()\n        .set { vcf_for_create_union_vcf  }",
        "origin": [
            [
                "\"${params.inputdir}/*.vcf\"",
                "A"
            ]
        ],
        "gives": [
            [
                "vcf_for_create_union_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(\"${params.inputdir}/*.idx\")\n        .ifEmpty { exit 1, \"--inputdir not found or is missing required .idx files\" }\n        .collect()\n        .set { idx_vcf_for_create_union_vcf  }",
        "origin": [
            [
                "\"${params.inputdir}/*.idx\"",
                "A"
            ]
        ],
        "gives": [
            [
                "idx_vcf_for_create_union_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.fasta)\n       .ifEmpty { exit 1, \"fasta annotation file not found: ${params.fasta}\" }\n       .set { fasta_for_create_union_vcf }",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta_for_create_union_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.fai)\n       .ifEmpty { exit 1, \"fasta index file not found: ${params.fai}\" }\n       .set {  fai_for_create_union_vcf  }",
        "origin": [
            [
                "params.fai",
                "A"
            ]
        ],
        "gives": [
            [
                "fai_for_create_union_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(params.dict)\n       .ifEmpty { exit 1, \"dict annotation file not found: ${params.dict}\" }\n       .set { dict_for_create_union_vcf }",
        "origin": [
            [
                "params.dict",
                "A"
            ]
        ],
        "gives": [
            [
                "dict_for_create_union_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.from( 1..minimumN_value_integer )\n       .into { minimumN_value_range_channel ; minimumN_value_range_channel_to_check}",
        "origin": [
            [
                "1..minimumN_value_integer",
                "V"
            ]
        ],
        "gives": [
            [
                "minimumN_value_range_channel",
                "P"
            ],
            [
                "minimumN_value_range_channel_to_check",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "vcf_and_idx_channel = vcf_for_create_union_vcf.combine(idx_vcf_for_create_union_vcf)",
        "origin": [
            [
                "vcf_for_create_union_vcf",
                "P"
            ],
            [
                "idx_vcf_for_create_union_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_and_idx_channel",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "minN_vcf_idx_combined_channel = minimumN_value_range_channel.combine(vcf_and_idx_channel)",
        "origin": [
            [
                "minimumN_value_range_channel",
                "P"
            ],
            [
                "vcf_and_idx_channel",
                "P"
            ]
        ],
        "gives": [
            [
                "minN_vcf_idx_combined_channel",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "minN_vcf_idx_combined_channel.into{minN_vcf_idx_combined_channel_to_use ; minN_vcf_idx_combined_channel_to_inspect}",
        "origin": [
            [
                "minN_vcf_idx_combined_channel",
                "P"
            ]
        ],
        "gives": [
            [
                "minN_vcf_idx_combined_channel_to_use",
                "P"
            ],
            [
                "minN_vcf_idx_combined_channel_to_inspect",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "minN_vcf_idx_combined_channel_to_inspect.map{ it ->  tuple(it[0], it[1..-1])  }.view()",
        "origin": [
            [
                "minN_vcf_idx_combined_channel_to_inspect",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "art_illumina": {
        "name_process": "art_illumina",
        "string_process": "process art_illumina {\n\n    tag { assembly_id + ' / ' + fold_coverage + 'x' + ' / ' + 'len=' + read_length + ' / ' + 'replicate=' + replicate }\n\n    publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}*_read_simulation_parameters.csv\", mode: 'copy'\n\n    input:\n    tuple val(assembly_id), path(assembly), val(fold_coverage), val(replicate)\n\n    output:\n    tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}*_R1.fastq\"), path(\"${assembly_id}-${md5_fragment}*_R2.fastq\"), emit: reads\n    tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_read_simulation_parameters.csv\"), emit: metrics\n\n    script:\n    mean_fragment_length = params.mean_fragment_length\n    stdev_fragment_length = params.stdev_fragment_length\n    quality_shift_r1 = params.quality_shift_r1\n    quality_shift_r2 = params.quality_shift_r2\n    read_length = params.read_length\n    seed = Math.round(Math.random() * 1000000)\n    md5_input = assembly_id + fold_coverage.toString() + read_length.toString() + mean_fragment_length.toString() + stdev_fragment_length.toString() + seed.toString() + quality_shift_r1.toString() + quality_shift_r2.toString()\n    md5_fragment = md5_input.md5()[0..3]\n    output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n    \"\"\"\n    art_illumina \\\n      --paired \\\n      --in ${assembly} \\\n      --fcov ${fold_coverage} \\\n      --len ${read_length} \\\n      --mflen ${mean_fragment_length} \\\n      --sdev ${stdev_fragment_length} \\\n      --rndSeed ${seed} \\\n      --qShift ${params.quality_shift_r1} \\\n      --qShift2 ${params.quality_shift_r2} \\\n      --out ${assembly_id}-${md5_fragment}_R\n    mv ${assembly_id}-${md5_fragment}_R1.fq ${assembly_id}-${md5_fragment}_R1.fastq\n    mv ${assembly_id}-${md5_fragment}_R2.fq ${assembly_id}-${md5_fragment}_R2.fastq\n    echo 'sample_id,replicate,random_seed,fold_coverage,read_length,mean_fragment_length,stdev_fragment_length,quality_shift_r1,quality_shift_r2' > ${assembly_id}-${md5_fragment}_read_simulation_parameters.csv\n    echo '${assembly_id}-${md5_fragment},${replicate},${seed},${fold_coverage},${read_length},${mean_fragment_length},${stdev_fragment_length},${quality_shift_r1},${quality_shift_r2}' >> ${assembly_id}-${md5_fragment}_read_simulation_parameters.csv\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    mean_fragment_length = params.mean_fragment_length\n    stdev_fragment_length = params.stdev_fragment_length\n    quality_shift_r1 = params.quality_shift_r1\n    quality_shift_r2 = params.quality_shift_r2\n    read_length = params.read_length\n    seed = Math.round(Math.random() * 1000000)\n    md5_input = assembly_id + fold_coverage.toString() + read_length.toString() + mean_fragment_length.toString() + stdev_fragment_length.toString() + seed.toString() + quality_shift_r1.toString() + quality_shift_r2.toString()\n    md5_fragment = md5_input.md5()[0..3]\n    output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n    \"\"\"\n    art_illumina \\\n      --paired \\\n      --in ${assembly} \\\n      --fcov ${fold_coverage} \\\n      --len ${read_length} \\\n      --mflen ${mean_fragment_length} \\\n      --sdev ${stdev_fragment_length} \\\n      --rndSeed ${seed} \\\n      --qShift ${params.quality_shift_r1} \\\n      --qShift2 ${params.quality_shift_r2} \\\n      --out ${assembly_id}-${md5_fragment}_R\n    mv ${assembly_id}-${md5_fragment}_R1.fq ${assembly_id}-${md5_fragment}_R1.fastq\n    mv ${assembly_id}-${md5_fragment}_R2.fq ${assembly_id}-${md5_fragment}_R2.fastq\n    echo 'sample_id,replicate,random_seed,fold_coverage,read_length,mean_fragment_length,stdev_fragment_length,quality_shift_r1,quality_shift_r2' > ${assembly_id}-${md5_fragment}_read_simulation_parameters.csv\n    echo '${assembly_id}-${md5_fragment},${replicate},${seed},${fold_coverage},${read_length},${mean_fragment_length},${stdev_fragment_length},${quality_shift_r1},${quality_shift_r2}' >> ${assembly_id}-${md5_fragment}_read_simulation_parameters.csv\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "Seed"
        ],
        "tools_url": [
            "https://bio.tools/seed-eco"
        ],
        "tools_dico": [
            {
                "name": "Seed",
                "uri": "https://bio.tools/seed-eco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Shiny package for visualizing ecological data. It provides a visual interface for generating a wide variety of plots, including histograms, scatterplots, bar plots, stacked bar plots, PCoA plots, cluster dendrograms, and heatmaps.",
                "homepage": "https://github.com/danlbek/Seed"
            }
        ],
        "inputs": [
            "assembly_id",
            "fold_coverage",
            "replicate",
            "assembly"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + ' / ' + fold_coverage + 'x' + ' / ' + 'len=' + read_length + ' / ' + 'replicate=' + replicate }",
            "publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}*_read_simulation_parameters.csv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "simulate_contaminant_reads": {
        "name_process": "simulate_contaminant_reads",
        "string_process": "\nprocess simulate_contaminant_reads {\n\n    tag { contaminant_id + ' / ' + proportion}\n\n    input:\n    tuple val(contaminant_id), path(assembly), val(proportion)\n\n    output:\n    tuple val(contaminant_id), path(\"${contaminant_id}*_R1.fastq\"), path(\"${contaminant_id}*_R2.fastq\"), val(proportion)\n\n    script:\n    mean_fragment_length = params.mean_fragment_length\n    stdev_fragment_length = params.stdev_fragment_length\n    quality_shift_r1 = params.quality_shift_r1\n    quality_shift_r2 = params.quality_shift_r2\n    read_length = params.read_length\n    seed = Math.round(Math.random() * 1000000)\n    \"\"\"\n    art_illumina \\\n      --paired \\\n      --in ${assembly} \\\n      --fcov 30 \\\n      --len ${read_length} \\\n      --mflen ${mean_fragment_length} \\\n      --sdev ${stdev_fragment_length} \\\n      --rndSeed ${seed} \\\n      --qShift ${params.quality_shift_r1} \\\n      --qShift2 ${params.quality_shift_r2} \\\n      --out ${contaminant_id}_R\n    mv ${contaminant_id}_R1.fq ${contaminant_id}_R1.fastq\n    mv ${contaminant_id}_R2.fq ${contaminant_id}_R2.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    mean_fragment_length = params.mean_fragment_length\n    stdev_fragment_length = params.stdev_fragment_length\n    quality_shift_r1 = params.quality_shift_r1\n    quality_shift_r2 = params.quality_shift_r2\n    read_length = params.read_length\n    seed = Math.round(Math.random() * 1000000)\n    \"\"\"\n    art_illumina \\\n      --paired \\\n      --in ${assembly} \\\n      --fcov 30 \\\n      --len ${read_length} \\\n      --mflen ${mean_fragment_length} \\\n      --sdev ${stdev_fragment_length} \\\n      --rndSeed ${seed} \\\n      --qShift ${params.quality_shift_r1} \\\n      --qShift2 ${params.quality_shift_r2} \\\n      --out ${contaminant_id}_R\n    mv ${contaminant_id}_R1.fq ${contaminant_id}_R1.fastq\n    mv ${contaminant_id}_R2.fq ${contaminant_id}_R2.fastq\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Seed"
        ],
        "tools_url": [
            "https://bio.tools/seed-eco"
        ],
        "tools_dico": [
            {
                "name": "Seed",
                "uri": "https://bio.tools/seed-eco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Shiny package for visualizing ecological data. It provides a visual interface for generating a wide variety of plots, including histograms, scatterplots, bar plots, stacked bar plots, PCoA plots, cluster dendrograms, and heatmaps.",
                "homepage": "https://github.com/danlbek/Seed"
            }
        ],
        "inputs": [
            "contaminant_id",
            "proportion",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [
            "proportion"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { contaminant_id + ' / ' + proportion}"
        ],
        "when": "",
        "stub": ""
    },
    "downsample_simulated_reads": {
        "name_process": "downsample_simulated_reads",
        "string_process": "\nprocess downsample_simulated_reads {\n  tag { assembly_id + '-' + md5_fragment + ' / ' + proportion_uncontaminated }\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), path(assembly_reads_r1), path(assembly_reads_r2), val(proportion_contaminants)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}*_R1.fastq\"), path(\"${assembly_id}-${md5_fragment}*_R2.fastq\")\n\n  script:\n  proportion_uncontaminated = 1.0 - proportion_contaminants\n  seed = Math.round(Math.random() * 1000000)\n  \"\"\"\n  seqkit sample -s ${seed} -p ${proportion_uncontaminated} ${assembly_reads_r1} -o ${assembly_id}-${md5_fragment}_sample_R1.fastq\n  seqkit sample -s ${seed} -p ${proportion_uncontaminated} ${assembly_reads_r2} -o ${assembly_id}-${md5_fragment}_sample_R2.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  proportion_uncontaminated = 1.0 - proportion_contaminants\n  seed = Math.round(Math.random() * 1000000)\n  \"\"\"\n  seqkit sample -s ${seed} -p ${proportion_uncontaminated} ${assembly_reads_r1} -o ${assembly_id}-${md5_fragment}_sample_R1.fastq\n  seqkit sample -s ${seed} -p ${proportion_uncontaminated} ${assembly_reads_r2} -o ${assembly_id}-${md5_fragment}_sample_R2.fastq\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Seed"
        ],
        "tools_url": [
            "https://bio.tools/seed-eco"
        ],
        "tools_dico": [
            {
                "name": "Seed",
                "uri": "https://bio.tools/seed-eco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Shiny package for visualizing ecological data. It provides a visual interface for generating a wide variety of plots, including histograms, scatterplots, bar plots, stacked bar plots, PCoA plots, cluster dendrograms, and heatmaps.",
                "homepage": "https://github.com/danlbek/Seed"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "proportion_contaminants",
            "assembly_reads_r1",
            "assembly_reads_r2"
        ],
        "nb_inputs": 5,
        "outputs": [
            "md5_fragment"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment + ' / ' + proportion_uncontaminated }"
        ],
        "when": "",
        "stub": ""
    },
    "downsample_contaminant_reads": {
        "name_process": "downsample_contaminant_reads",
        "string_process": "\nprocess downsample_contaminant_reads {\n\n  tag { assembly_id + '-' + md5_fragment + ' / ' + contaminant_id + ' / ' + contaminant_proportion }\n\n  publishDir \"${params.outdir}/${output_subdir}/contaminants\", pattern: \"${contaminant_id}_contaminant_R*.fastq.gz\", mode: 'copy'\n  publishDir \"${params.outdir}/${output_subdir}/contaminants\", pattern: \"${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\", mode: 'copy'\n\n  input:\n  tuple val(contaminant_id), path(contaminant_reads_r1), path(contaminant_reads_r2), val(contaminant_proportion), val(assembly_id), val(md5_fragment), path(assembly_reads_r1), path(assembly_reads_r2)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), val(contaminant_id), path(\"${contaminant_id}_contaminant_R1.fastq\"), path(\"${contaminant_id}_contaminant_R2.fastq\"), emit: uncompressed_reads\n  tuple val(assembly_id), val(md5_fragment), val(contaminant_id), path(\"${contaminant_id}_contaminant_R1.fastq.gz\"), path(\"${contaminant_id}_contaminant_R2.fastq.gz\"), emit: compressed_reads\n  tuple val(assembly_id), val(md5_fragment), val(contaminant_id), path(\"${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\"), emit: num_reads_csv\n\n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  seed = Math.round(Math.random() * 1000000)\n  \"\"\"\n  seqkit stats -T ${assembly_reads_r1} | tail -n 1 | cut -f 4 | tr -d ',' > num_simulated_read_pairs\n  echo 'sample_id,contaminant_id,num_simulated_read_pairs,num_contaminant_read_pairs,target_contaminant_proportion' > ${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\n  python -c \"import sys; print(int(round(int(sys.stdin.read().strip()) * ${contaminant_proportion})))\" < num_simulated_read_pairs > num_contaminant_read_pairs\n  paste -d ',' <(echo \"${assembly_id}-${md5_fragment}\") <(echo \"${contaminant_id}\") num_simulated_read_pairs num_contaminant_read_pairs <(echo \"${contaminant_proportion}\") >> ${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\n  seqkit sample -s ${seed} -n \\$(cat num_contaminant_read_pairs) ${contaminant_reads_r1} > ${contaminant_id}_contaminant_R1.fastq\n  seqkit sample -s ${seed} -n \\$(cat num_contaminant_read_pairs) ${contaminant_reads_r2} > ${contaminant_id}_contaminant_R2.fastq\n  gzip --keep ${contaminant_id}_contaminant_R*.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  seed = Math.round(Math.random() * 1000000)\n  \"\"\"\n  seqkit stats -T ${assembly_reads_r1} | tail -n 1 | cut -f 4 | tr -d ',' > num_simulated_read_pairs\n  echo 'sample_id,contaminant_id,num_simulated_read_pairs,num_contaminant_read_pairs,target_contaminant_proportion' > ${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\n  python -c \"import sys; print(int(round(int(sys.stdin.read().strip()) * ${contaminant_proportion})))\" < num_simulated_read_pairs > num_contaminant_read_pairs\n  paste -d ',' <(echo \"${assembly_id}-${md5_fragment}\") <(echo \"${contaminant_id}\") num_simulated_read_pairs num_contaminant_read_pairs <(echo \"${contaminant_proportion}\") >> ${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\n  seqkit sample -s ${seed} -n \\$(cat num_contaminant_read_pairs) ${contaminant_reads_r1} > ${contaminant_id}_contaminant_R1.fastq\n  seqkit sample -s ${seed} -n \\$(cat num_contaminant_read_pairs) ${contaminant_reads_r2} > ${contaminant_id}_contaminant_R2.fastq\n  gzip --keep ${contaminant_id}_contaminant_R*.fastq\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Seed"
        ],
        "tools_url": [
            "https://bio.tools/seed-eco"
        ],
        "tools_dico": [
            {
                "name": "Seed",
                "uri": "https://bio.tools/seed-eco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Shiny package for visualizing ecological data. It provides a visual interface for generating a wide variety of plots, including histograms, scatterplots, bar plots, stacked bar plots, PCoA plots, cluster dendrograms, and heatmaps.",
                "homepage": "https://github.com/danlbek/Seed"
            }
        ],
        "inputs": [
            "contaminant_id",
            "contaminant_proportion",
            "assembly_id",
            "md5_fragment",
            "contaminant_reads_r1",
            "contaminant_reads_r2",
            "assembly_reads_r1",
            "assembly_reads_r2"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment + ' / ' + contaminant_id + ' / ' + contaminant_proportion }",
            "publishDir \"${params.outdir}/${output_subdir}/contaminants\", pattern: \"${contaminant_id}_contaminant_R*.fastq.gz\", mode: 'copy'",
            "publishDir \"${params.outdir}/${output_subdir}/contaminants\", pattern: \"${assembly_id}-${md5_fragment}-${contaminant_id}_num_contaminant_read_pairs.csv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "introduce_contaminants": {
        "name_process": "introduce_contaminants",
        "string_process": "\nprocess introduce_contaminants {\n\n  tag { assembly_id + '-' + md5_fragment }\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), path(assembly_r1), path(assembly_r2), val(contaminant_ids), path(contaminants_r1), path(contaminants_r2)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_R1.fastq\"), path(\"${assembly_id}-${md5_fragment}_R2.fastq\"), emit: reads\n\n  script:\n  seed = Math.round(Math.random() * 1000000)\n  \"\"\"\n  mv ${assembly_r1} uncontaminated_R1.fastq\n  mv ${assembly_r2} uncontaminated_R2.fastq\n  cat uncontaminated_R1.fastq ${contaminants_r1} > ${assembly_id}-${md5_fragment}_unshuffled_R1.fastq\n  cat uncontaminated_R2.fastq ${contaminants_r2} > ${assembly_id}-${md5_fragment}_unshuffled_R2.fastq\n  paste <(cat ${assembly_id}-${md5_fragment}_unshuffled_R1.fastq) <(cat ${assembly_id}-${md5_fragment}_unshuffled_R2.fastq) \\\n    | paste - - - - | shuf | awk -F'\\\\t' '{OFS=\"\\\\n\"; print \\$1,\\$3,\\$5,\\$7 > \"${assembly_id}-${md5_fragment}_R1.fastq\"; print \\$2,\\$4,\\$6,\\$8 > \"${assembly_id}-${md5_fragment}_R2.fastq\"}'\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  seed = Math.round(Math.random() * 1000000)\n  \"\"\"\n  mv ${assembly_r1} uncontaminated_R1.fastq\n  mv ${assembly_r2} uncontaminated_R2.fastq\n  cat uncontaminated_R1.fastq ${contaminants_r1} > ${assembly_id}-${md5_fragment}_unshuffled_R1.fastq\n  cat uncontaminated_R2.fastq ${contaminants_r2} > ${assembly_id}-${md5_fragment}_unshuffled_R2.fastq\n  paste <(cat ${assembly_id}-${md5_fragment}_unshuffled_R1.fastq) <(cat ${assembly_id}-${md5_fragment}_unshuffled_R2.fastq) \\\n    | paste - - - - | shuf | awk -F'\\\\t' '{OFS=\"\\\\n\"; print \\$1,\\$3,\\$5,\\$7 > \"${assembly_id}-${md5_fragment}_R1.fastq\"; print \\$2,\\$4,\\$6,\\$8 > \"${assembly_id}-${md5_fragment}_R2.fastq\"}'\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Seed"
        ],
        "tools_url": [
            "https://bio.tools/seed-eco"
        ],
        "tools_dico": [
            {
                "name": "Seed",
                "uri": "https://bio.tools/seed-eco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Shiny package for visualizing ecological data. It provides a visual interface for generating a wide variety of plots, including histograms, scatterplots, bar plots, stacked bar plots, PCoA plots, cluster dendrograms, and heatmaps.",
                "homepage": "https://github.com/danlbek/Seed"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "contaminant_ids",
            "assembly_r1",
            "assembly_r2",
            "contaminants_r1",
            "contaminants_r2"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment }"
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp {\n\n  tag { assembly_id + '-' + md5_fragment }\n\n  publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}_R{1,2}.fastq.gz\", mode: 'copy'\n  publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}_fastp.{json,csv}\", mode: 'copy'\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), path(reads_1), path(reads_2)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_fastp.json\"), emit: json\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_fastp.csv\"), emit: csv\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_R{1,2}.fastq.gz\"), emit: untrimmed_reads\n\n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  fastp -i ${reads_1} -I ${reads_2} -o ${assembly_id}-${md5_fragment}_trimmed_R1.fastq.gz -O ${assembly_id}-${md5_fragment}_trimmed_R2.fastq.gz\n  mv fastp.json ${assembly_id}-${md5_fragment}_fastp.json\n  fastp_json_to_csv.py -s ${assembly_id}-${md5_fragment} ${assembly_id}-${md5_fragment}_fastp.json > ${assembly_id}-${md5_fragment}_fastp.csv\n  cp ${reads_1} untrimmed_R1.fastq\n  cp ${reads_2} untrimmed_R2.fastq\n  gzip -c untrimmed_R1.fastq > ${assembly_id}-${md5_fragment}_R1.fastq.gz\n  gzip -c untrimmed_R2.fastq > ${assembly_id}-${md5_fragment}_R2.fastq.gz\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  fastp -i ${reads_1} -I ${reads_2} -o ${assembly_id}-${md5_fragment}_trimmed_R1.fastq.gz -O ${assembly_id}-${md5_fragment}_trimmed_R2.fastq.gz\n  mv fastp.json ${assembly_id}-${md5_fragment}_fastp.json\n  fastp_json_to_csv.py -s ${assembly_id}-${md5_fragment} ${assembly_id}-${md5_fragment}_fastp.json > ${assembly_id}-${md5_fragment}_fastp.csv\n  cp ${reads_1} untrimmed_R1.fastq\n  cp ${reads_2} untrimmed_R2.fastq\n  gzip -c untrimmed_R1.fastq > ${assembly_id}-${md5_fragment}_R1.fastq.gz\n  gzip -c untrimmed_R2.fastq > ${assembly_id}-${md5_fragment}_R2.fastq.gz\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "reads_1",
            "reads_2"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment }",
            "publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}_R{1,2}.fastq.gz\", mode: 'copy'",
            "publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}_fastp.{json,csv}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bwa_align": {
        "name_process": "bwa_align",
        "string_process": "\nprocess bwa_align {\n\n  tag { assembly_id + '-' + md5_fragment + ' / ' + assembly_id }\n\n  publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}.{bam,bam.bai}\", mode: 'copy'\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), path(reads_1), path(reads_2), path(ref)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}.bam\"), path(\"${assembly_id}-${md5_fragment}.bam.bai\")\n\n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  bwa index ${ref}\n  bwa mem -t ${task.cpus} ${ref} ${reads_1} ${reads_2} | \\\n    samtools sort -o ${assembly_id}-${md5_fragment}.bam -\n  samtools index ${assembly_id}-${md5_fragment}.bam\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  bwa index ${ref}\n  bwa mem -t ${task.cpus} ${ref} ${reads_1} ${reads_2} | \\\n    samtools sort -o ${assembly_id}-${md5_fragment}.bam -\n  samtools index ${assembly_id}-${md5_fragment}.bam\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "reads_1",
            "reads_2",
            "ref"
        ],
        "nb_inputs": 5,
        "outputs": [
            "md5_fragment"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment + ' / ' + assembly_id }",
            "publishDir \"${params.outdir}/${output_subdir}\", pattern: \"${assembly_id}-${md5_fragment}.{bam,bam.bai}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "qualimap_bamqc": {
        "name_process": "qualimap_bamqc",
        "string_process": "\nprocess qualimap_bamqc {\n\n  tag { assembly_id + '-' + md5_fragment }\n\n  publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_bamqc\"\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), file(alignment), file(alignment_index)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_bamqc/genome_results.txt\"), emit: genome_results\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_bamqc\"), emit: bamqc_dir\n  \n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  qualimap bamqc -bam ${alignment} --outdir ${assembly_id}-${md5_fragment}_bamqc\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  qualimap bamqc -bam ${alignment} --outdir ${assembly_id}-${md5_fragment}_bamqc\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "alignment",
            "alignment_index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment }",
            "publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_bamqc\""
        ],
        "when": "",
        "stub": ""
    },
    "qualimap_bamqc_genome_results_to_csv": {
        "name_process": "qualimap_bamqc_genome_results_to_csv",
        "string_process": "\nprocess qualimap_bamqc_genome_results_to_csv {\n\n  tag { assembly_id + '-' + md5_fragment }\n\n  publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_qualimap_bamqc_genome_results.csv\"\n\n  executor 'local'\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), path(qualimap_bamqc_genome_results)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_qualimap_bamqc_genome_results.csv\")\n\n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  qualimap_bamqc_genome_results_to_csv.py -s ${assembly_id}-${md5_fragment} ${qualimap_bamqc_genome_results} > ${assembly_id}-${md5_fragment}_qualimap_bamqc_genome_results.csv\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  qualimap_bamqc_genome_results_to_csv.py -s ${assembly_id}-${md5_fragment} ${qualimap_bamqc_genome_results} > ${assembly_id}-${md5_fragment}_qualimap_bamqc_genome_results.csv\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "qualimap_bamqc_genome_results"
        ],
        "nb_inputs": 3,
        "outputs": [
            "md5_fragment"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment }",
            "publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_qualimap_bamqc_genome_results.csv\"",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_stats": {
        "name_process": "samtools_stats",
        "string_process": "\nprocess samtools_stats {\n\n  tag { assembly_id + '-' + md5_fragment }\n\n  publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\"\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), file(alignment), file(alignment_index)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\"), emit: summary\n  \n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  samtools stats ${alignment} > ${assembly_id}-${md5_fragment}_samtools_stats.txt\n  grep ^SN ${assembly_id}-${md5_fragment}_samtools_stats.txt | cut -f 2- > ${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  samtools stats ${alignment} > ${assembly_id}-${md5_fragment}_samtools_stats.txt\n  grep ^SN ${assembly_id}-${md5_fragment}_samtools_stats.txt | cut -f 2- > ${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "alignment",
            "alignment_index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment }",
            "publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "mosdepth": {
        "name_process": "mosdepth",
        "string_process": "\nprocess mosdepth {\n\n  tag { assembly_id + '-' + md5_fragment }\n\n  publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\"\n\n  input:\n  tuple val(assembly_id), val(md5_fragment), file(alignment), file(alignment_index), val(depth_by)\n\n  output:\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_by_${depth_by}.mosdepth.summary.txt\"), emit: summary\n  tuple val(assembly_id), val(md5_fragment), path(\"${assembly_id}-${md5_fragment}_by_${depth_by}.mosdepth.summary.txt\"), emit: regions\n  \n  script:\n  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  mosdepth -t ${task.cpus} --fast-mode --by ${depth_by} --no-per-base ${assembly_id}-${md5_fragment}_by_${depth_by} ${alignment}\n  gunzip ${assembly_id}-${md5_fragment}_by_${depth_by}.regions.bed.gz\n  mv ${assembly_id}-${md5_fragment}_by_${depth_by}.regions.bed ${assembly_id}-${md5_fragment}_by_${depth_by}.mosdepth.regions.bed\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  output_subdir = params.flat ? '' : assembly_id + '-' + md5_fragment\n  \"\"\"\n  mosdepth -t ${task.cpus} --fast-mode --by ${depth_by} --no-per-base ${assembly_id}-${md5_fragment}_by_${depth_by} ${alignment}\n  gunzip ${assembly_id}-${md5_fragment}_by_${depth_by}.regions.bed.gz\n  mv ${assembly_id}-${md5_fragment}_by_${depth_by}.regions.bed ${assembly_id}-${md5_fragment}_by_${depth_by}.mosdepth.regions.bed\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "assembly_id",
            "md5_fragment",
            "depth_by",
            "alignment",
            "alignment_index"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-reads",
        "directive": [
            "tag { assembly_id + '-' + md5_fragment }",
            "publishDir \"${params.outdir}/${output_subdir}\", mode: 'copy', pattern: \"${assembly_id}-${md5_fragment}_samtools_stats_summary.txt\""
        ],
        "when": "",
        "stub": ""
    }
}
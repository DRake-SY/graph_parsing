{
    "SMUDGEPLOT_CUTOFF": {
        "name_process": "SMUDGEPLOT_CUTOFF",
        "string_process": "process SMUDGEPLOT_CUTOFF {\n\n    conda \"${params.enable_conda ? 'bioconda::smudgeplot==0.2.4' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/smudgeplot:0.2.4--py39r40h779adbc_1' :\n              'quay.io/biocontainers/smudgeplot:0.2.4--py39r40h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(histogram)\n\n    output:\n    tuple val(meta), env(LOWER_BOUND), env(UPPER_BOUND), emit: bounds\n    path \"versions.yml\"                                , emit: versions\n\n    script:\n                                              \n                                         \n    \"\"\"\n    LOWER_BOUND=\\$( smudgeplot.py cutoff $histogram L )\n    UPPER_BOUND=\\$( smudgeplot.py cutoff $histogram U )\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        smudgeplot: \\$( smudgeplot.py -v |& sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    LOWER_BOUND=\\$( smudgeplot.py cutoff $histogram L )\n    UPPER_BOUND=\\$( smudgeplot.py cutoff $histogram U )\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        smudgeplot: \\$( smudgeplot.py -v |& sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "histogram"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::smudgeplot==0.2.4' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/smudgeplot:0.2.4--py39r40h779adbc_1' : 'quay.io/biocontainers/smudgeplot:0.2.4--py39r40h779adbc_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_FASTQ": {
        "name_process": "SAMTOOLS_FASTQ",
        "string_process": "process SAMTOOLS_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path  \"versions.yml\"               , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def endedness = meta.single_end ? \"-0 ${prefix}.fastq.gz\" : \"-1 ${prefix}_1.fastq.gz -2 ${prefix}_2.fastq.gz\"\n\n    \"\"\"\n    samtools fastq \\\\\n        $args \\\\\n        --threads ${task.cpus-1} \\\\\n        $endedness \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def endedness = meta.single_end ? \"-0 ${prefix}.fastq.gz\" : \"-1 ${prefix}_1.fastq.gz -2 ${prefix}_2.fastq.gz\"\n\n    \"\"\"\n    samtools fastq \\\\\n        $args \\\\\n        --threads ${task.cpus-1} \\\\\n        $endedness \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GENOMESCOPE": {
        "name_process": "GENOMESCOPE",
        "string_process": "process GENOMESCOPE {\n\n    conda \"${params.enable_conda ? 'bioconda::genomescope2==2.0' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/genomescope2:2.0--py39r40hdfd78af_4' :\n              'quay.io/biocontainers/genomescope2:2.0--py39r40hdfd78af_4' }\"\n\n    input:\n    tuple val(meta), path(histogram)\n\n    output:\n    tuple val(meta), path(\"$prefix/linear_plot.png\")            , emit: linear_plot_png\n    tuple val(meta), path(\"$prefix/transformed_linear_plot.png\"), emit: transformed_linear_plot_png\n    tuple val(meta), path(\"$prefix/log_plot.png\")               , emit: log_plot_png\n    tuple val(meta), path(\"$prefix/transformed_log_plot.png\")   , emit: transformed_log_plot_png\n    tuple val(meta), path(\"$prefix/model.txt\")                  , emit: model\n    tuple val(meta), path(\"$prefix/summary.txt\")                , emit: summary\n    path \"versions.yml\"                                         , emit: versions\n\n    script:\n    prefix   = task.ext.prefix ?: meta.id\n    def args = task.ext.args   ?: ''\n    \"\"\"\n    genomescope2 \\\\\n        -i $histogram \\\\\n        $args \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        genomescope2: \\$( genomescope2 -v | sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    prefix   = task.ext.prefix ?: meta.id\n    def args = task.ext.args   ?: ''\n    \"\"\"\n    genomescope2 \\\\\n        -i $histogram \\\\\n        $args \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        genomescope2: \\$( genomescope2 -v | sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "histogram"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::genomescope2==2.0' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/genomescope2:2.0--py39r40hdfd78af_4' : 'quay.io/biocontainers/genomescope2:2.0--py39r40hdfd78af_4' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KMC_DUMP": {
        "name_process": "KMC_DUMP",
        "string_process": "process KMC_DUMP {\n\n    conda \"${params.enable_conda ? 'bioconda::kmc==3.1.2rc1' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/kmc:3.1.2rc1--h2d02072_0' :\n              'quay.io/biocontainers/kmc:3.1.2rc1--h2d02072_0' }\"\n\n    input:\n    tuple val(meta), path(count_db), val(lower_bound), val(upper_bound)\n\n    output:\n    tuple val(meta), path(\"*.hist\"), emit: histogram\n    path \"versions.yml\"            , emit: versions\n\n    script:\n    def prefix = task.ext.prefix ?: meta.id\n    def args   = task.ext.args   ?: ''\n    \"\"\"\n    kmc_dump -ci${lower_bound} -cx${upper_bound} \\\\\n        $args \\\\\n        $prefix \\\\\n        $prefix.${lower_bound}-${upper_bound}.hist\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        kmc_dump: \\$( kmc_dump --version | sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9][^.]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def prefix = task.ext.prefix ?: meta.id\n    def args   = task.ext.args   ?: ''\n    \"\"\"\n    kmc_dump -ci${lower_bound} -cx${upper_bound} \\\\\n        $args \\\\\n        $prefix \\\\\n        $prefix.${lower_bound}-${upper_bound}.hist\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        kmc_dump: \\$( kmc_dump --version | sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9][^.]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "lower_bound",
            "upper_bound",
            "count_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::kmc==3.1.2rc1' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kmc:3.1.2rc1--h2d02072_0' : 'quay.io/biocontainers/kmc:3.1.2rc1--h2d02072_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "INSPECTOR": {
        "name_process": "INSPECTOR",
        "string_process": "process INSPECTOR {\n\n                                                            \n                                                                    \n                                                                            \n    container 'ghcr.io/nbisweden/earth-biogenome-project-pilot/inspector:1.0'\n                                                                \n                                                                  \n                 'https://depot.galaxyproject.org/singularity/tool:0.0.0--0'  \n                                                         \n\n    input:\n                \n    tuple val(meta), path(reads), path(assembly)                                                               \n               \n    path(reference)                                                                      \n\n    output:\n    tuple val(meta), path(\"$prefix/Inspector.log\")          , emit: log\n    tuple val(meta), path(\"$prefix/summary_statistics\")     , emit: stats\n    tuple val(meta), path(\"$prefix/valid_contig.{fa,fai}\")  , emit: valid_contigs\n    tuple val(meta), path(\"$prefix/small_scale_error.bed\")  , emit: small_error_bed\n    tuple val(meta), path(\"$prefix/structural_error.bed\")   , emit: struct_error_bed\n                                                                                                                  \n    path \"versions.yml\"                                     , emit: versions\n\n    script:\n    prefix   = task.ext.prefix ?: meta.id\n    def args = task.ext.args   ?: ''\n    def ref  = reference ? \"--ref $reference\" : ''\n    \"\"\"\n    inspector.py \\\\\n        $args \\\\\n        -o $prefix \\\\\n        -t $task.cpus \\\\\n        -c $assembly \\\\\n        -r $reads \\\\\n        $ref\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        inspector: \\$( inspector.py --version |& sed 's/Inspector_v//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    prefix   = task.ext.prefix ?: meta.id\n    def args = task.ext.args   ?: ''\n    def ref  = reference ? \"--ref $reference\" : ''\n    \"\"\"\n    inspector.py \\\\\n        $args \\\\\n        -o $prefix \\\\\n        -t $task.cpus \\\\\n        -c $assembly \\\\\n        -r $reads \\\\\n        $ref\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        inspector: \\$( inspector.py --version |& sed 's/Inspector_v//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "assembly",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "container 'ghcr.io/nbisweden/earth-biogenome-project-pilot/inspector:1.0' 'https://depot.galaxyproject.org/singularity/tool:0.0.0--0'"
        ],
        "when": "",
        "stub": ""
    },
    "SMUDGEPLOT_PLOT": {
        "name_process": "SMUDGEPLOT_PLOT",
        "string_process": "process SMUDGEPLOT_PLOT {\n\n    conda \"${params.enable_conda ? 'bioconda::smudgeplot==0.2.4' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/smudgeplot:0.2.4--py39r40h779adbc_1' :\n              'quay.io/biocontainers/smudgeplot:0.2.4--py39r40h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(coverage)\n\n    output:\n    tuple val(meta), path(\"*_smudgeplot.png\")      , emit: smudgeplot_png\n    tuple val(meta), path(\"*_smudgeplot_log10.png\"), emit: logsmudgeplot_png\n    tuple val(meta), path(\"*__summary_table.tsv\")  , emit: summary_tsv\n    path \"versions.yml\"                            , emit: versions\n\n    script:\n    def prefix = task.ext.prefix ?: meta.id\n    def args   = task.ext.args   ?: ''\n    \"\"\"\n    smudgeplot.py plot \\\\\n        -o $prefix \\\\\n        $args \\\\\n        $coverage\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        smudgeplot: \\$( smudgeplot.py -v |& sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def prefix = task.ext.prefix ?: meta.id\n    def args   = task.ext.args   ?: ''\n    \"\"\"\n    smudgeplot.py plot \\\\\n        -o $prefix \\\\\n        $args \\\\\n        $coverage\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        smudgeplot: \\$( smudgeplot.py -v |& sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "coverage"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::smudgeplot==0.2.4' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/smudgeplot:0.2.4--py39r40h779adbc_1' : 'quay.io/biocontainers/smudgeplot:0.2.4--py39r40h779adbc_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SMUDGEPLOT_HETKMERS": {
        "name_process": "SMUDGEPLOT_HETKMERS",
        "string_process": "process SMUDGEPLOT_HETKMERS {\n\n    conda \"${params.enable_conda ? 'bioconda::smudgeplot==0.2.4' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/smudgeplot:0.2.4--py39r40h779adbc_1' :\n              'quay.io/biocontainers/smudgeplot:0.2.4--py39r40h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(histogram)\n\n    output:\n    tuple val(meta), path(\"*_coverages.tsv\"), emit: coverage_tsv\n    path \"versions.yml\"                     , emit: versions\n\n    script:\n    def prefix = task.ext.prefix ?: meta.id\n                                         \n    \"\"\"\n    smudgeplot.py hetkmers \\\\\n        -o $prefix < $histogram\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        smudgeplot: \\$(smudgeplot.py -v |& sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def prefix = task.ext.prefix ?: meta.id\n                                         \n    \"\"\"\n    smudgeplot.py hetkmers \\\\\n        -o $prefix < $histogram\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        smudgeplot: \\$(smudgeplot.py -v |& sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "histogram"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::smudgeplot==0.2.4' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/smudgeplot:0.2.4--py39r40h779adbc_1' : 'quay.io/biocontainers/smudgeplot:0.2.4--py39r40h779adbc_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KMC_HIST": {
        "name_process": "KMC_HIST",
        "string_process": "process KMC_HIST {\n\n    conda \"${params.enable_conda ? 'bioconda::kmc==3.1.2rc1' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/kmc:3.1.2rc1--h2d02072_0' :\n              'quay.io/biocontainers/kmc:3.1.2rc1--h2d02072_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.kmc_{pre,suf}\"), emit: count_db\n    tuple val(meta), path(\"*.hist\")         , emit: histogram\n    path \"versions.yml\"                     , emit: versions\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: meta.id\n    \"\"\"\n    mkdir kmc_workdir\n    printf '%s\\\\n' $reads > kmc_read_files.txt\n    kmc $args \\\\\n        -t$task.cpus \\\\\n        -j${prefix}.summary.json \\\\\n        @kmc_read_files.txt \\\\\n        $prefix \\\\\n        kmc_workdir\n    kmc_tools transform \\\\\n        $prefix \\\\\n        histogram ${prefix}.hist\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        kmc: \\$( kmc --version | sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9][^.]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: meta.id\n    \"\"\"\n    mkdir kmc_workdir\n    printf '%s\\\\n' $reads > kmc_read_files.txt\n    kmc $args \\\\\n        -t$task.cpus \\\\\n        -j${prefix}.summary.json \\\\\n        @kmc_read_files.txt \\\\\n        $prefix \\\\\n        kmc_workdir\n    kmc_tools transform \\\\\n        $prefix \\\\\n        histogram ${prefix}.hist\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        kmc: \\$( kmc --version | sed '1 !d;s/[^0-9]*\\\\(\\\\([0-9]\\\\.\\\\)\\\\{0,4\\\\}[0-9][^.]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "KMC"
        ],
        "tools_url": [
            "https://bio.tools/kmc"
        ],
        "tools_dico": [
            {
                "name": "KMC",
                "uri": "https://bio.tools/kmc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "KMC is a utility designed for counting k-mers (sequences of consecutive k symbols) in a set of reads from genome sequencing projects.",
                "homepage": "http://sun.aei.polsl.pl/REFRESH/index.php?page=projects&project=kmc&subpage=about"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::kmc==3.1.2rc1' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kmc:3.1.2rc1--h2d02072_0' : 'quay.io/biocontainers/kmc:3.1.2rc1--h2d02072_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KAT_COMP": {
        "name_process": "KAT_COMP",
        "string_process": "process KAT_COMP {\n\n    conda \"${params.enable_conda ? 'bioconda::kat==2.4.2' : '' }\"\n    container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n              'https://depot.galaxyproject.org/singularity/kat:2.4.2--py38hfc5f9d8_2' :\n              'quay.io/biocontainers/kat:2.4.2--py38hfc5f9d8_2' }\"\n\n    input:\n                \n    tuple val(meta), path(reads), path(assembly)                                                               \n\n    output:\n    tuple val(meta), path('*-main.mx')               , emit: mx                          \n    tuple val(meta), path(\"*-main.mx.spectra-cn.png\"), emit: png                            \n    tuple val(meta), path(\"*.dist_analysis.json\")    , emit: json\n    tuple val(meta), path(\"*.stats\")                 , emit: stats\n    path \"versions.yml\"                              , emit: versions\n\n    script:\n    def prefix = task.ext.prefix ?: meta.id\n    def args   = task.ext.args   ?: ''\n    \"\"\"\n    kat comp \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -o ${prefix}.katcomp \\\\\n        '$reads' \\\\\n        $assembly\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        kat: \\$( kat --version | sed 's/kat //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def prefix = task.ext.prefix ?: meta.id\n    def args   = task.ext.args   ?: ''\n    \"\"\"\n    kat comp \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -o ${prefix}.katcomp \\\\\n        '$reads' \\\\\n        $assembly\n\n    cat <<-END_VERSIONS > versions.yml\n    '${task.process}':\n        kat: \\$( kat --version | sed 's/kat //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "KAT"
        ],
        "tools_url": [
            "https://bio.tools/kat"
        ],
        "tools_dico": [
            {
                "name": "KAT",
                "uri": "https://bio.tools/kat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Suite of tools that generate, analyse and compare k-mer spectra produced from sequence files",
                "homepage": "http://www.earlham.ac.uk/kat-tools"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__Earth-Biogenome-Project-pilot",
        "directive": [
            "conda \"${params.enable_conda ? 'bioconda::kat==2.4.2' : '' }\"",
            "container \"${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kat:2.4.2--py38hfc5f9d8_2' : 'quay.io/biocontainers/kat:2.4.2--py38hfc5f9d8_2' }\""
        ],
        "when": "",
        "stub": ""
    }
}
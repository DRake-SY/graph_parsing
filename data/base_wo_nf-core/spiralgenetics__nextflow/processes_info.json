{
    "step_1": {
        "name_process": "step_1",
        "string_process": "\nprocess step_1 {\n    tag \"step1\"\n    script:\n    \"\"\"\n    echo `date`\n    \"\"\"\n}",
        "nb_lignes_process": 6,
        "string_script": "    \"\"\"\n    echo `date`\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "spiralgenetics__nextflow",
        "directive": [
            "tag \"step1\""
        ],
        "when": "",
        "stub": ""
    },
    "biograph": {
        "name_process": "biograph",
        "string_process": "\nprocess biograph {\n    tag \"$participant_id\"\n    publishDir \"${params.outdir}/${participant_type}\", mode: 'copy'\n\n    input:\n    set val(participant_id), val(participant_type), val(bam) from ch_input\n    each file(reference_tar_gz) from ch_reference_tar_gz\n\n    output:\n    set file(\"*.txt\"), file(\"*.vcf.gz\"), file(\"${participant_id}.bg/qc/*\") into ch_out\n    file(\"mock_${participant_id}.*\") into ch_mock\n\n    script:\n    regions_bed = params.bedfile != 'NO_FILE' ? \"--bed $reference_tar_gz.simpleName/${params.bedfile}\" : ''\n    \"\"\"\n    ls -l\n    echo `date` \"participant_id:\" $participant_id\n    echo `date` \"participant_type:\" $participant_type\n    touch mock_${participant_id}.txt\n    touch mock_${participant_id}.vcf.gz\n    touch test_${participant_id}.vcf.gz\n    echo `date` \"Finished mock file touch\"\n\n    mkdir -p tmp\n    echo `date` \"Start reference unzip\"\n    if [ ! -d $reference_tar_gz.simpleName ]; then\n        tar xvfz $reference_tar_gz\n    fi\n    echo `date` \"Finished expanding tarball\"\n\n    echo `date` \"Starting BG full pipeline\"\n    aws s3 cp --only-show-errors --no-verify-ssl ${bam} - | biograph full_pipeline --biograph ${participant_id}.bg --ref $reference_tar_gz.simpleName \\\n    --reads - \\\n    --model /app/biograph_model.ml \\\n    --tmp ./tmp \\\n    --threads ${task.cpus} \\\n    --create \"--max-mem ${params.biograph_maxmem} --format bam\" \\\n    --discovery \"${regions_bed}\"\n    \n    # But has it failed?\n    if grep -q \"${params.biograph_error_msg}\"; then\n        echo `date` \"Biograph failed, exiting with exit status 1\"\n        exit 1\n    else \n        echo \"Biograph succeeded!\"\n    fi\t\n    \n    if [ -d ${participant_id}.bg ]; then\n\n        echo `date` \"Run BioGraph Stats\"\n        biograph stats -b ${participant_id}.bg -r $reference_tar_gz.simpleName/\n\n        echo `date` \"Check BG\"\n        ls -l ${participant_id}.bg/\n        echo `date` \"Check analysis folder\"\n        ls -lhtr ${participant_id}.bg/analysis\n        echo `date` \"Check QC folder\"\n        ls -l ${participant_id}.bg/qc/\n\n        if [ -f ${participant_id}.bg/analysis/results.vcf.gz ]; then\n            cp ${participant_id}.bg/analysis/results.vcf.gz ${participant_type}_${participant_id}.vcf.gz\n        fi\n    fi\n    echo `date` \"Process: BioGraph - Complete.\"\n    \"\"\"\n  }",
        "nb_lignes_process": 65,
        "string_script": "    regions_bed = params.bedfile != 'NO_FILE' ? \"--bed $reference_tar_gz.simpleName/${params.bedfile}\" : ''\n    \"\"\"\n    ls -l\n    echo `date` \"participant_id:\" $participant_id\n    echo `date` \"participant_type:\" $participant_type\n    touch mock_${participant_id}.txt\n    touch mock_${participant_id}.vcf.gz\n    touch test_${participant_id}.vcf.gz\n    echo `date` \"Finished mock file touch\"\n\n    mkdir -p tmp\n    echo `date` \"Start reference unzip\"\n    if [ ! -d $reference_tar_gz.simpleName ]; then\n        tar xvfz $reference_tar_gz\n    fi\n    echo `date` \"Finished expanding tarball\"\n\n    echo `date` \"Starting BG full pipeline\"\n    aws s3 cp --only-show-errors --no-verify-ssl ${bam} - | biograph full_pipeline --biograph ${participant_id}.bg --ref $reference_tar_gz.simpleName \\\n    --reads - \\\n    --model /app/biograph_model.ml \\\n    --tmp ./tmp \\\n    --threads ${task.cpus} \\\n    --create \"--max-mem ${params.biograph_maxmem} --format bam\" \\\n    --discovery \"${regions_bed}\"\n    \n    # But has it failed?\n    if grep -q \"${params.biograph_error_msg}\"; then\n        echo `date` \"Biograph failed, exiting with exit status 1\"\n        exit 1\n    else \n        echo \"Biograph succeeded!\"\n    fi\t\n    \n    if [ -d ${participant_id}.bg ]; then\n\n        echo `date` \"Run BioGraph Stats\"\n        biograph stats -b ${participant_id}.bg -r $reference_tar_gz.simpleName/\n\n        echo `date` \"Check BG\"\n        ls -l ${participant_id}.bg/\n        echo `date` \"Check analysis folder\"\n        ls -lhtr ${participant_id}.bg/analysis\n        echo `date` \"Check QC folder\"\n        ls -l ${participant_id}.bg/qc/\n\n        if [ -f ${participant_id}.bg/analysis/results.vcf.gz ]; then\n            cp ${participant_id}.bg/analysis/results.vcf.gz ${participant_type}_${participant_id}.vcf.gz\n        fi\n    fi\n    echo `date` \"Process: BioGraph - Complete.\"\n    \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [
            "JABAWS"
        ],
        "tools_url": [
            "https://bio.tools/jabaws"
        ],
        "tools_dico": [
            {
                "name": "JABAWS",
                "uri": "https://bio.tools/jabaws",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3762",
                                    "term": "Service composition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Collection of web services for bioinformatics, and currently provides services that make it easy to access well-known multiple sequence It is free software which provides web services conveniently packaged to run on your local computer, server, cluster or Amazon EC2 instance.",
                "homepage": "http://www.compbio.dundee.ac.uk/jabaws/"
            }
        ],
        "inputs": [
            "ch_input",
            "ch_reference_tar_gz"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_out",
            "ch_mock"
        ],
        "nb_outputs": 2,
        "name_workflow": "spiralgenetics__nextflow",
        "directive": [
            "tag \"$participant_id\"",
            "publishDir \"${params.outdir}/${participant_type}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
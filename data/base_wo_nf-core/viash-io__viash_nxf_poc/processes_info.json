{
    "filterOutput_one": {
        "name_process": "filterOutput_one",
        "string_process": "\nprocess filterOutput_one {\n\n  input:\n    tuple val(id), val(input), val(_params)\n  output:\n    tuple val(id), val(output), val(_params)\n  when:\n    input.keySet().contains(\"output_one\")\n  exec:\n    output = input[\"output_one\"]\n\n}",
        "nb_lignes_process": 11,
        "string_script": "    output = input[\"output_one\"]",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "id",
            "input",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "params"
        ],
        "nb_outputs": 1,
        "name_workflow": "viash-io__viash_nxf_poc",
        "directive": [],
        "when": "input.keySet().contains(\"output_one\")",
        "stub": ""
    },
    "filterOutput_multi": {
        "name_process": "filterOutput_multi",
        "string_process": "\nprocess filterOutput_multi {\n\n  input:\n    tuple val(id), val(input), val(_params)\n  output:\n    tuple val(id), val(output), val(_params)\n  when:\n    input.keySet().contains(\"output_multi\")\n  exec:\n    output = input[\"output_multi\"]\n\n}",
        "nb_lignes_process": 11,
        "string_script": "    output = input[\"output_multi\"]",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "id",
            "input",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "params"
        ],
        "nb_outputs": 1,
        "name_workflow": "viash-io__viash_nxf_poc",
        "directive": [],
        "when": "input.keySet().contains(\"output_multi\")",
        "stub": ""
    },
    "filterOutput_opt": {
        "name_process": "filterOutput_opt",
        "string_process": "\nprocess filterOutput_opt {\n\n  input:\n    tuple val(id), val(input), val(_params)\n  output:\n    tuple val(id), val(output), val(_params)\n  when:\n    input.keySet().contains(\"output_opt\")\n  exec:\n    output = input[\"output_opt\"]\n\n}",
        "nb_lignes_process": 11,
        "string_script": "    output = input[\"output_opt\"]",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "id",
            "input",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "params"
        ],
        "nb_outputs": 1,
        "name_workflow": "viash-io__viash_nxf_poc",
        "directive": [],
        "when": "input.keySet().contains(\"output_opt\")",
        "stub": ""
    },
    "poc_process": {
        "name_process": "poc_process",
        "string_process": "\nprocess poc_process {\n  tag \"${id}\"\n  echo { (params.debug == true) ? true : false }\n  stageInMode \"symlink\"\n  container \"${container}\"\n  publishDir \"${params.publishDir}/${id}/\", mode: 'copy', overwrite: true, enabled: !params.test\n  input:\n    tuple val(id), path(input), val(output), val(container), val(cli), val(_params)\n  output:\n    tuple val(\"${id}\"), path(output), val(_params)\n  stub:\n    \"\"\"\n    # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers\n    export PATH=\"${moduleDir}:\\$PATH\"\n    STUB=1 $cli\n    \"\"\"\n  script:\n    def viash_temp = System.getenv(\"VIASH_TEMP\") ?: \"/tmp/\"\n    if (params.test)\n      \"\"\"\n      # Some useful stuff\n      export NUMBA_CACHE_DIR=/tmp/numba-cache\n      # Running the pre-hook when necessary\n      # Pass viash temp dir\n      export VIASH_TEMP=\"${viash_temp}\"\n      # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers\n      export PATH=\"./:${moduleDir}:\\$PATH\"\n      ./${params.poc.tests.testScript} | tee $output\n      \"\"\"\n    else\n      \"\"\"\n      # Some useful stuff\n      export NUMBA_CACHE_DIR=/tmp/numba-cache\n      # Running the pre-hook when necessary\n      # Pass viash temp dir\n      export VIASH_TEMP=\"${viash_temp}\"\n      # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers\n      export PATH=\"${moduleDir}:\\$PATH\"\n      $cli\n      \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def viash_temp = System.getenv(\"VIASH_TEMP\") ?: \"/tmp/\"\n    if (params.test)\n      \"\"\"\n      # Some useful stuff\n      export NUMBA_CACHE_DIR=/tmp/numba-cache\n      # Running the pre-hook when necessary\n      # Pass viash temp dir\n      export VIASH_TEMP=\"${viash_temp}\"\n      # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers\n      export PATH=\"./:${moduleDir}:\\$PATH\"\n      ./${params.poc.tests.testScript} | tee $output\n      \"\"\"\n    else\n      \"\"\"\n      # Some useful stuff\n      export NUMBA_CACHE_DIR=/tmp/numba-cache\n      # Running the pre-hook when necessary\n      # Pass viash temp dir\n      export VIASH_TEMP=\"${viash_temp}\"\n      # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers\n      export PATH=\"${moduleDir}:\\$PATH\"\n      $cli\n      \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "output",
            "container",
            "cli",
            "params",
            "input"
        ],
        "nb_inputs": 6,
        "outputs": [
            "params"
        ],
        "nb_outputs": 1,
        "name_workflow": "viash-io__viash_nxf_poc",
        "directive": [
            "tag \"${id}\"",
            "echo { (params.debug == true) ? true : false }",
            "stageInMode \"symlink\"",
            "container \"${container}\"",
            "publishDir \"${params.publishDir}/${id}/\", mode: 'copy', overwrite: true, enabled: !params.test"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers\n    export PATH=\"${moduleDir}:\\$PATH\"\n    STUB=1 $cli\n    \"\"\""
    },
    "test_process": {
        "name_process": "test_process",
        "string_process": "\nprocess test_process {\n  input:\n    tuple val(id), path(input), val(output), val(arguments), val(processArgs)\n  output:\n    tuple val(id), path(output)\n  script:\n    \"\"\"\n    echo \"K: ${arguments.k}\"\n    cat ${input} > ${output}\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n    echo \"K: ${arguments.k}\"\n    cat ${input} > ${output}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "output",
            "arguments",
            "processArgs",
            "input"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "viash-io__viash_nxf_poc",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
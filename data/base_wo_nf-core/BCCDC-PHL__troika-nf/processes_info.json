{
    "prepare_input_tsv": {
        "name_process": "prepare_input_tsv",
        "string_process": "process prepare_input_tsv {\n\n  tag { sample_id }\n\n  executor 'local'\n\n  input:\n    tuple val(sample_id), path(reads_1), path(reads_2)\n\n  output:\n    path(\"${sample_id}_input.tsv\")\n\n  script:\n    \"\"\"\n    echo \"${sample_id},\\$(readlink ${reads_1}),\\$(readlink ${reads_2})\" | tr ',' \\$'\\\\t' > ${sample_id}_input.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    echo \"${sample_id},\\$(readlink ${reads_1}),\\$(readlink ${reads_2})\" | tr ',' \\$'\\\\t' > ${sample_id}_input.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads_1",
            "reads_2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__troika-nf",
        "directive": [
            "tag { sample_id }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "troika": {
        "name_process": "troika",
        "string_process": "\nprocess troika {\n\n  tag { \"cpus:\" + task.cpus + \" jobs:\" + params.jobs + \" cpus/job:\" + cpus_per_job }\n\n  cpus { params.total_cpus }\n\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"output/*\", saveAs: { it.split(\"/\")[1] }\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"*.{tab,toml}\"\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"troika.log\"\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"core.*\"\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"index.html\"\n\n  input:\n    tuple path(input_file), path(reads)\n\n  output:\n    path(\"output/*\", type: 'dir')\n    path(\"*.{tab,toml}\")\n    path(\"troika.log\")\n    path(\"core.*\")\n    path(\"index.html\")\n\n  script:\n    resistance_only = params.resistance_only ? \"--resistance_only\" : \"\"\n    detect_species = params.detect_species ? \"--detect_species\" : \"\"\n    cpus_per_job = (int) (task.cpus / params.jobs)\n    \"\"\"\n    mkdir output\n    troika \\\n      --input_file ${input_file} \\\n      --jobs ${params.jobs} \\\n      --kraken_threads ${cpus_per_job} \\\n      --kraken_db ${params.kraken_db} \\\n      --snippy_threads ${cpus_per_job} \\\n      --profiler_threads ${cpus_per_job} \\\n      ${resistance_only} \\\n      ${detect_species} \\\n      --min_cov ${params.min_cov} \\\n      --min_aln ${params.min_aln} \\\n      --workdir .\n    pushd output\n    while IFS=\\$'\\\\t' read -r sample_id\n    do \n      ln -s ../\\${sample_id} .\n    done < <(cut -d \\$'\\\\t' -f 1 ../input.tsv)\n    popd\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    resistance_only = params.resistance_only ? \"--resistance_only\" : \"\"\n    detect_species = params.detect_species ? \"--detect_species\" : \"\"\n    cpus_per_job = (int) (task.cpus / params.jobs)\n    \"\"\"\n    mkdir output\n    troika \\\n      --input_file ${input_file} \\\n      --jobs ${params.jobs} \\\n      --kraken_threads ${cpus_per_job} \\\n      --kraken_db ${params.kraken_db} \\\n      --snippy_threads ${cpus_per_job} \\\n      --profiler_threads ${cpus_per_job} \\\n      ${resistance_only} \\\n      ${detect_species} \\\n      --min_cov ${params.min_cov} \\\n      --min_aln ${params.min_aln} \\\n      --workdir .\n    pushd output\n    while IFS=\\$'\\\\t' read -r sample_id\n    do \n      ln -s ../\\${sample_id} .\n    done < <(cut -d \\$'\\\\t' -f 1 ../input.tsv)\n    popd\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "PopDel"
        ],
        "tools_url": [
            "https://bio.tools/PopDel"
        ],
        "tools_dico": [
            {
                "name": "PopDel",
                "uri": "https://bio.tools/PopDel",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for population level deletion calling from short paired-end sequence reads.",
                "homepage": "https://github.com/kehrlab/PopDel"
            }
        ],
        "inputs": [
            "input_file",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__troika-nf",
        "directive": [
            "tag { \"cpus:\" + task.cpus + \" jobs:\" + params.jobs + \" cpus/job:\" + cpus_per_job }",
            "cpus { params.total_cpus }",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"output/*\", saveAs: { it.split(\"/\")[1] }",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"*.{tab,toml}\"",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"troika.log\"",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"core.*\"",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"index.html\""
        ],
        "when": "",
        "stub": ""
    }
}
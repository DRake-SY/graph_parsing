{
    "BAM2FASTQ": {
        "name_process": "BAM2FASTQ",
        "string_process": "process BAM2FASTQ {\n  publishDir \"${params.output}/preprocessing_outputs/pacbio/bam2fastq\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_medium'\n\n  input:\n  file subreads\n  file barcodes\n  \n  output:\n  tuple val(id), file(\"*.fq.gz\"), val('pacbio')\n  file \"*\"\n  \n  when:\n  !(subreads =~ /input.*/)\n\n  script:\n              \n  id = (subreads.getBaseName() - \".bam\" - \".subreads\")\n  design = (params.pacbio_barcode_design.toLowerCase() != 'same' && params.pacbio_barcode_design.toLowerCase() != 'different') ? '' : '--' + params.pacbio_barcode_design.toLowerCase()\n\n           \n  if (params.pacbio_barcodes)\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # split bams\n  lima ${design} \\\\\n      --num-threads ${task.cpus} \\\\\n      --split-named ${subreads} \\\\\n      ${barcodes} ${id}_demuxed.bam\n\n  # split fastqs\n  for input_demux_bam in \\$(ls ${id}_demuxed*.bam) ; do\n    prefix=\\${input_demux_bam%%.bam} ;\n    # convert bam\n    bam2fastq -o \\$prefix -u \\$input_demux_bam ;\n  done\n\n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"\n  \n  else\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # convert bam\n  bam2fastq -o ${id} -u ${subreads}\n\n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "  id = (subreads.getBaseName() - \".bam\" - \".subreads\")\n  design = (params.pacbio_barcode_design.toLowerCase() != 'same' && params.pacbio_barcode_design.toLowerCase() != 'different') ? '' : '--' + params.pacbio_barcode_design.toLowerCase()\n\n           \n  if (params.pacbio_barcodes)\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # split bams\n  lima ${design} \\\\\n      --num-threads ${task.cpus} \\\\\n      --split-named ${subreads} \\\\\n      ${barcodes} ${id}_demuxed.bam\n\n  # split fastqs\n  for input_demux_bam in \\$(ls ${id}_demuxed*.bam) ; do\n    prefix=\\${input_demux_bam%%.bam} ;\n    # convert bam\n    bam2fastq -o \\$prefix -u \\$input_demux_bam ;\n  done\n\n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"\n  \n  else\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # convert bam\n  bam2fastq -o ${id} -u ${subreads}\n\n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [
            "MID",
            "AbDesign",
            "blima",
            "bam2fastq"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/abdesign",
            "https://bio.tools/blima",
            "https://bio.tools/bam2fastq"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "AbDesign",
                "uri": "https://bio.tools/abdesign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0130",
                            "term": "Protein folding, stability and design"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0736",
                            "term": "Protein folds and structural domains"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0821",
                            "term": "Enzymes"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0821",
                            "term": "Enzymology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Protein secondary structure comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0479",
                                    "term": "Backbone modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Secondary structure comparison (protein)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Protein secondary structure"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0479",
                                    "term": "Protein modelling (backbone)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The AbDesign computational pipeline for modular backbone assembly and design of binders and enzymes.",
                "homepage": "https://github.com/Fleishman-Lab/AbDesign_for_enzymes"
            },
            {
                "name": "blima",
                "uri": "https://bio.tools/blima",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Includes several algorithms for the preprocessing of Illumina microarray data. It focuses to the bead level analysis and provides novel approach to the quantile normalization of the vectors of unequal lengths. It provides variety of the methods for background correction including background subtraction, RMA like convolution and background outlier removal. It also implements variance stabilizing transformation on the bead level, methods for data summarization and t-test performance.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/blima.html"
            },
            {
                "name": "bam2fastq",
                "uri": "https://bio.tools/bam2fastq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Extract reads from a bam file and write them in fastq format.",
                "homepage": "https://gsl.hudsonalpha.org/information/software/bam2fastq"
            }
        ],
        "inputs": [
            "subreads",
            "barcodes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/preprocessing_outputs/pacbio/bam2fastq\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_medium'"
        ],
        "when": "!(subreads =~ /input.*/)",
        "stub": ""
    },
    "PYCOQC": {
        "name_process": "PYCOQC",
        "string_process": "process PYCOQC {\n  publishDir \"${params.output}/preprocessing_outputs/nanopore/QC\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_low'\n\n  input:\n  file summary\n  \n  output:\n  path \"${id}_pycoQC.html\"\n\n  when:\n  !(summary =~ /input.*/)\n\n  script:\n  id = summary.getBaseName()\n  \"\"\"\n  # run pycoQC\n  pycoQC \\\\\n      --summary_file ${summary} \\\\\n      --html_outfile ${id}_pycoQC.html \\\\\n      --filter_calibration \\\\\n      --filter_duplicated \\\\\n      --min_pass_qual 8\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  id = summary.getBaseName()\n  \"\"\"\n  # run pycoQC\n  pycoQC \\\\\n      --summary_file ${summary} \\\\\n      --html_outfile ${id}_pycoQC.html \\\\\n      --filter_calibration \\\\\n      --filter_duplicated \\\\\n      --min_pass_qual 8\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "summary"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/preprocessing_outputs/nanopore/QC\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_low'"
        ],
        "when": "!(summary =~ /input.*/)",
        "stub": ""
    },
    "NANOPACK": {
        "name_process": "NANOPACK",
        "string_process": "process NANOPACK {\n  publishDir \"${params.output}/preprocessing_outputs/${type}/QC\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_medium'\n\n  input:\n  tuple val(id), file(reads), val(type)\n  \n  output:\n  path \"${custom_id}*\"\n\n  when:\n  !(reads =~ /input.*/)\n\n  script:\n  if (params.nanopore_is_barcoded && type == 'nanopore') {\n    custom_id = reads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\"\n  } else {\n    custom_id = id\n  }\n  \"\"\"\n  # Plotting\n  NanoPlot \\\\\n      -t ${task.cpus} \\\\\n      --fastq ${reads} \\\\\n      -o ${custom_id}_nanoplot \\\\\n      --N50 \\\\\n      --title \"${custom_id} sample\" \\\\\n      --plots hex dot kde ;\n\n  # Checking Quality\n  nanoQC \\\\\n      -o ${custom_id}_nanoQC \\\\\n      ${reads} ;\n\n  # Generate Statistics Summary\n  NanoStat \\\\\n      --fastq ${reads} \\\\\n      -t ${task.cpus} \\\\\n      -n ${custom_id}.txt \\\\\n      --outdir ${custom_id}_stats ;\n  \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "  if (params.nanopore_is_barcoded && type == 'nanopore') {\n    custom_id = reads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\"\n  } else {\n    custom_id = id\n  }\n  \"\"\"\n  # Plotting\n  NanoPlot \\\\\n      -t ${task.cpus} \\\\\n      --fastq ${reads} \\\\\n      -o ${custom_id}_nanoplot \\\\\n      --N50 \\\\\n      --title \"${custom_id} sample\" \\\\\n      --plots hex dot kde ;\n\n  # Checking Quality\n  nanoQC \\\\\n      -o ${custom_id}_nanoQC \\\\\n      ${reads} ;\n\n  # Generate Statistics Summary\n  NanoStat \\\\\n      --fastq ${reads} \\\\\n      -t ${task.cpus} \\\\\n      -n ${custom_id}.txt \\\\\n      --outdir ${custom_id}_stats ;\n  \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "type",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/preprocessing_outputs/${type}/QC\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_medium'"
        ],
        "when": "!(reads =~ /input.*/)",
        "stub": ""
    },
    "BAM2HIFI": {
        "name_process": "BAM2HIFI",
        "string_process": "process BAM2HIFI {\n  publishDir \"${params.output}/preprocessing_outputs/pacbio/bam2hifi\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_medium'\n\n  input:\n  file subreads\n  file barcodes\n  \n  output:\n  tuple val(id), file(\"*.fq.gz\"), val('pacbio')\n  file \"*\"\n\n  when:\n  !(subreads =~ /input.*/)\n\n  script:\n              \n  id = (subreads.getBaseName() - \".bam\" - \".subreads\")\n  design = (params.pacbio_barcode_design.toLowerCase() != 'same' && params.pacbio_barcode_design.toLowerCase() != 'different') ? '' : '--' + params.pacbio_barcode_design.toLowerCase()\n\n           \n  if (params.pacbio_barcodes)\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # compute ccs\n  ccs \\\\\n      --num-threads ${task.cpus} \\\\\n      ${subreads} \\\\\n      ${id}.ccs.bam\n\n  # split bams\n  lima \\\\\n      ${design} \\\\\n      --num-threads ${task.cpus} \\\\\n      --split-named \\\\\n      ${id}.ccs.bam \\\\\n      ${barcodes} \\\\\n      ${id}_demuxed.bam\n\n  # split fastqs\n  for input_demux_bam in \\$(ls ${id}_demuxed*.bam) ; do\n    prefix=\\${input_demux_bam%%.bam} ;\n    bam2fastq -o \\$prefix -u \\$input_demux_bam ;\n  done\n\n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"\n  else\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # compute ccs\n  ccs --num-threads ${task.cpus} ${subreads} ${id}.ccs.bam ;\n\n  # convert to fastq\n  bam2fastq -o ${id}.ccs -u ${id}.ccs.bam\n  \n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "  id = (subreads.getBaseName() - \".bam\" - \".subreads\")\n  design = (params.pacbio_barcode_design.toLowerCase() != 'same' && params.pacbio_barcode_design.toLowerCase() != 'different') ? '' : '--' + params.pacbio_barcode_design.toLowerCase()\n\n           \n  if (params.pacbio_barcodes)\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # compute ccs\n  ccs \\\\\n      --num-threads ${task.cpus} \\\\\n      ${subreads} \\\\\n      ${id}.ccs.bam\n\n  # split bams\n  lima \\\\\n      ${design} \\\\\n      --num-threads ${task.cpus} \\\\\n      --split-named \\\\\n      ${id}.ccs.bam \\\\\n      ${barcodes} \\\\\n      ${id}_demuxed.bam\n\n  # split fastqs\n  for input_demux_bam in \\$(ls ${id}_demuxed*.bam) ; do\n    prefix=\\${input_demux_bam%%.bam} ;\n    bam2fastq -o \\$prefix -u \\$input_demux_bam ;\n  done\n\n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"\n  else\n  \"\"\"\n  # index bam\n  pbindex ${subreads} ;\n\n  # compute ccs\n  ccs --num-threads ${task.cpus} ${subreads} ${id}.ccs.bam ;\n\n  # convert to fastq\n  bam2fastq -o ${id}.ccs -u ${id}.ccs.bam\n  \n  # fix read extensions and gzip\n  for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq; gzip \\${i%%.fastq}.fq; done\n  \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "MID",
            "AbDesign",
            "ICCS",
            "blima",
            "bam2fastq"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/abdesign",
            "https://bio.tools/ICCS",
            "https://bio.tools/blima",
            "https://bio.tools/bam2fastq"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "AbDesign",
                "uri": "https://bio.tools/abdesign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0130",
                            "term": "Protein folding, stability and design"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0736",
                            "term": "Protein folds and structural domains"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0821",
                            "term": "Enzymes"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0821",
                            "term": "Enzymology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Protein secondary structure comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0479",
                                    "term": "Backbone modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Secondary structure comparison (protein)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Protein secondary structure"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0479",
                                    "term": "Protein modelling (backbone)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The AbDesign computational pipeline for modular backbone assembly and design of binders and enzymes.",
                "homepage": "https://github.com/Fleishman-Lab/AbDesign_for_enzymes"
            },
            {
                "name": "ICCS",
                "uri": "https://bio.tools/ICCS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3385",
                            "term": "Light microscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3306",
                            "term": "Biophysics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "Nuclear magnetic resonance spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3443",
                                    "term": "Image analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Nanoscale Distribution of Nuclear Sites by Super-Resolved Image Cross-Correlation Spectroscopy.\n\nUser-fiendly code for image cross-correlation specroscopy (ICCS) analysis based on the following article:",
                "homepage": "https://github.com/llanzano/ICCS"
            },
            {
                "name": "blima",
                "uri": "https://bio.tools/blima",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Includes several algorithms for the preprocessing of Illumina microarray data. It focuses to the bead level analysis and provides novel approach to the quantile normalization of the vectors of unequal lengths. It provides variety of the methods for background correction including background subtraction, RMA like convolution and background outlier removal. It also implements variance stabilizing transformation on the bead level, methods for data summarization and t-test performance.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/blima.html"
            },
            {
                "name": "bam2fastq",
                "uri": "https://bio.tools/bam2fastq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Extract reads from a bam file and write them in fastq format.",
                "homepage": "https://gsl.hudsonalpha.org/information/software/bam2fastq"
            }
        ],
        "inputs": [
            "subreads",
            "barcodes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/preprocessing_outputs/pacbio/bam2hifi\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_medium'"
        ],
        "when": "!(subreads =~ /input.*/)",
        "stub": ""
    },
    "FILTER": {
        "name_process": "FILTER",
        "string_process": "process FILTER {\n  publishDir \"${params.output}/final_output/${type}\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_low'\n\n  input:\n  tuple val(id), file(reads), val(type)\n  \n  output:\n  file \"${custom_id}*\"\n\n  when:\n  !(reads =~ /input.*/)\n\n  script:\n  if (params.nanopore_is_barcoded && type == 'nanopore') {\n    custom_id = reads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\"\n  } else {\n    custom_id = id\n  }\n  quality = (params.lreads_min_quality) ? \"-q ${params.lreads_min_quality}\" : ''\n  length  = (params.lreads_min_length)  ? \"-l ${params.lreads_min_length}\" : ''\n\n  if (params.lreads_min_length || params.lreads_min_quality)\n  \"\"\"\n  # filtering\n  gunzip -f -c $reads | NanoFilt ${quality} ${length} | gzip > ${custom_id}.filtered.fq.gz ;\n  \"\"\"\n\n  else\n  \"\"\"\n  # save information that reads are not filtered\n  cp $reads ${custom_id}.unfiltered.fq.gz\n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  if (params.nanopore_is_barcoded && type == 'nanopore') {\n    custom_id = reads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\"\n  } else {\n    custom_id = id\n  }\n  quality = (params.lreads_min_quality) ? \"-q ${params.lreads_min_quality}\" : ''\n  length  = (params.lreads_min_length)  ? \"-l ${params.lreads_min_length}\" : ''\n\n  if (params.lreads_min_length || params.lreads_min_quality)\n  \"\"\"\n  # filtering\n  gunzip -f -c $reads | NanoFilt ${quality} ${length} | gzip > ${custom_id}.filtered.fq.gz ;\n  \"\"\"\n\n  else\n  \"\"\"\n  # save information that reads are not filtered\n  cp $reads ${custom_id}.unfiltered.fq.gz\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "QUALITY"
        ],
        "tools_url": [
            "https://bio.tools/quality"
        ],
        "tools_dico": [
            {
                "name": "QUALITY",
                "uri": "https://bio.tools/quality",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3519",
                            "term": "PCR experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3519",
                            "term": "Polymerase chain reaction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3664",
                                    "term": "Statistical modelling"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Variant of the minimum Chi-squared (MC) method for limiting dilution assays, and for which he has demonstrated by simulation desirable properties of minimum variance (i.e., high precision) and minimum bias. Our method modifies the MC method to allow the user to specify the probabilities of a false negative and false positive PCR.",
                "homepage": "http://indra.mullins.microbiol.washington.edu/quality/"
            }
        ],
        "inputs": [
            "id",
            "type",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/final_output/${type}\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_low'"
        ],
        "when": "!(reads =~ /input.*/)",
        "stub": ""
    },
    "H52BAM": {
        "name_process": "H52BAM",
        "string_process": "process H52BAM {\n  publishDir \"${params.output}/preprocessing_outputs/pacbio/h52bam\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_medium'\n\n  input:\n  file h5bas\n\n  output:\n  path(\"*/*.subreads.bam\")                              \n  path(\"*\")\n\n  when:\n  !(h5bas =~ /input.*/)\n\n  script:\n  id = (h5bas.getBaseName())\n  \"\"\"\n  # get name\n  bas_file=\\$(basename ${h5bas}/*.bas.h5 .bas.h5)\n\n  # create dir with id\n  mkdir \"\\$bas_file\"\n\n  # Produce bam\n  bax2bam \\\\\n      ${h5bas}/*.bas.h5 \\\\\n      --subread \\\\\n      --allowUnrecognizedChemistryTriple \\\\\n      --pulsefeatures=DeletionQV,DeletionTag,InsertionQV,IPD,SubstitutionQV,PulseWidth,SubstitutionTag;\n\n  # save in directory\n  mv *.subreads.bam \\$bas_file\n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  id = (h5bas.getBaseName())\n  \"\"\"\n  # get name\n  bas_file=\\$(basename ${h5bas}/*.bas.h5 .bas.h5)\n\n  # create dir with id\n  mkdir \"\\$bas_file\"\n\n  # Produce bam\n  bax2bam \\\\\n      ${h5bas}/*.bas.h5 \\\\\n      --subread \\\\\n      --allowUnrecognizedChemistryTriple \\\\\n      --pulsefeatures=DeletionQV,DeletionTag,InsertionQV,IPD,SubstitutionQV,PulseWidth,SubstitutionTag;\n\n  # save in directory\n  mv *.subreads.bam \\$bas_file\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "h5bas"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/preprocessing_outputs/pacbio/h52bam\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_medium'"
        ],
        "when": "!(h5bas =~ /input.*/)",
        "stub": ""
    },
    "FASTP": {
        "name_process": "FASTP",
        "string_process": "process FASTP {\n  publishDir \"${params.output}\", mode: 'copy', saveAs: { filename ->\n    if (filename.endsWith(\".fq.gz\")) \"final_output/illumina/$filename\"\n    else if (filename.endsWith(\".json\")) \"preprocessing_outputs/illumina/$filename\"\n    else if (filename.endsWith(\".html\")) \"preprocessing_outputs/illumina/$filename\"\n    else \"$filename\"\n  }\n  tag \"${id}\"\n  label 'process_low'\n  \n  input:\n  tuple val(id), file(read1), file(read2)\n  file(sreads)\n\n  output:\n  path \"*\"\n\n  when:\n  (!(read1 =~ /input.*/) && !(read2 =~ /input.*/)) || !(sreads =~ /input.*/)\n\n  script:\n  if (params.shortreads_type == 'paired') {\n      if (params.fastp_merge_pairs) {\n          reads_param = \"--in1 ${read1} --in2 ${read2} --out1 ${id}_R1.unmerged.fq.gz --out2 ${id}_R2.unmerged.fq.gz --detect_adapter_for_pe --merge --merged_out ${id}.merged.fq.gz\"\n      } else {\n          reads_param = \"--in1 ${read1} --in2 ${read2} --out1 ${id}_R1.preprocessed.fq.gz --out2 ${id}_R2.preprocessed.fq.gz --detect_adapter_for_pe\"\n      }\n  } else if (params.shortreads_type == 'single') {\n      id = sreads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\"\n      reads_param = \"-i ${sreads} -o ${id}.preprocessed.fq.gz\"\n  }\n  correction_param = (params.fastp_correct_pairs) ? \"--correction\" : \"\"\n  additional_param = (params.fastp_additional_parameters) ? \"${params.fastp_additional_parameters}\" : \"\"\n  \"\"\"\n  # run fastp\n  fastp \\\\\n      $additional_param \\\\\n      --thread ${task.cpus} \\\\\n      --average_qual ${params.fastp_average_quality} \\\\\n      --json ${id}_fastp.json \\\\\n      --html ${id}_fastp.html \\\\\n      ${reads_param} \\\\\n      ${correction_param}\n  \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "  if (params.shortreads_type == 'paired') {\n      if (params.fastp_merge_pairs) {\n          reads_param = \"--in1 ${read1} --in2 ${read2} --out1 ${id}_R1.unmerged.fq.gz --out2 ${id}_R2.unmerged.fq.gz --detect_adapter_for_pe --merge --merged_out ${id}.merged.fq.gz\"\n      } else {\n          reads_param = \"--in1 ${read1} --in2 ${read2} --out1 ${id}_R1.preprocessed.fq.gz --out2 ${id}_R2.preprocessed.fq.gz --detect_adapter_for_pe\"\n      }\n  } else if (params.shortreads_type == 'single') {\n      id = sreads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\"\n      reads_param = \"-i ${sreads} -o ${id}.preprocessed.fq.gz\"\n  }\n  correction_param = (params.fastp_correct_pairs) ? \"--correction\" : \"\"\n  additional_param = (params.fastp_additional_parameters) ? \"${params.fastp_additional_parameters}\" : \"\"\n  \"\"\"\n  # run fastp\n  fastp \\\\\n      $additional_param \\\\\n      --thread ${task.cpus} \\\\\n      --average_qual ${params.fastp_average_quality} \\\\\n      --json ${id}_fastp.json \\\\\n      --html ${id}_fastp.html \\\\\n      ${reads_param} \\\\\n      ${correction_param}\n  \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "MID",
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "id",
            "read1",
            "read2",
            "sreads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}\", mode: 'copy', saveAs: { filename -> if (filename.endsWith(\".fq.gz\")) \"final_output/illumina/$filename\" else if (filename.endsWith(\".json\")) \"preprocessing_outputs/illumina/$filename\" else if (filename.endsWith(\".html\")) \"preprocessing_outputs/illumina/$filename\" else \"$filename\" }",
            "tag \"${id}\"",
            "label 'process_low'"
        ],
        "when": "(!(read1 =~ /input.*/) && !(read2 =~ /input.*/)) || !(sreads =~ /input.*/)",
        "stub": ""
    },
    "PORECHOP": {
        "name_process": "PORECHOP",
        "string_process": "process PORECHOP {\n  publishDir \"${params.output}/preprocessing_outputs/nanopore/porechop\", mode: 'copy'\n  tag \"${id}\"\n  label 'process_medium'\n\n  input:\n  file reads\n  \n  output:\n  tuple val(id), path(\"${id}.trimmed.fq.gz\"), val('nanopore')             optional true\n  tuple val(id), path(\"${id}_porechop_barcodes/*.fq.gz\"), val('nanopore') optional true\n\n  when:\n  !(reads =~ /input.*/)\n\n  script:\n  id = (reads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\")\n  if (params.nanopore_is_barcoded)\n  \"\"\"\n  # run porechop\n  porechop -i ${reads} -t ${task.cpus} -b ${id}_porechop_barcodes --barcode_threshold 85\n\n  # fix barcode extensions and gzip outputs\n  cd ${id}_porechop_barcodes && \\\\\n      for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq ; done && \\\\\n      for i in *.fq ; do gzip $i ; done\n  \"\"\"\n  else\n  \"\"\"\n  # run porechop\n  porechop \\\\\n      -i ${reads} \\\\\n      -t ${task.cpus} \\\\\n      --format fastq \\\\\n      -o ${id}.trimmed.fq\n\n  # gzip output\n  gzip ${id}.trimmed.fq\n  \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "  id = (reads.getBaseName() - \".fastq.gz\" - \".fastq\" - \".fq.gz\" - \".fq\")\n  if (params.nanopore_is_barcoded)\n  \"\"\"\n  # run porechop\n  porechop -i ${reads} -t ${task.cpus} -b ${id}_porechop_barcodes --barcode_threshold 85\n\n  # fix barcode extensions and gzip outputs\n  cd ${id}_porechop_barcodes && \\\\\n      for i in *.fastq ; do mv \\$i \\${i%%.fastq}.fq ; done && \\\\\n      for i in *.fq ; do gzip $i ; done\n  \"\"\"\n  else\n  \"\"\"\n  # run porechop\n  porechop \\\\\n      -i ${reads} \\\\\n      -t ${task.cpus} \\\\\n      --format fastq \\\\\n      -o ${id}.trimmed.fq\n\n  # gzip output\n  gzip ${id}.trimmed.fq\n  \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "fmalmeida__ngs-preprocess",
        "directive": [
            "publishDir \"${params.output}/preprocessing_outputs/nanopore/porechop\", mode: 'copy'",
            "tag \"${id}\"",
            "label 'process_medium'"
        ],
        "when": "!(reads =~ /input.*/)",
        "stub": ""
    }
}
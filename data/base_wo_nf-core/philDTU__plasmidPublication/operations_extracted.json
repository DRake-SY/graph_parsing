{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.query)\n    .map { file -> tuple(file.baseName, file) }\n    .splitFastq(by: 1, file:true)\n    .set { fastq_files }",
        "origin": [
            [
                "params.query",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_files",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(params.query)\n    .splitFastq(by:1, record: true)\n    .map{ record -> record.readHeader }\n    .merge(fastq_files)\n    .into{fastq_ch1; fastq_ch2}",
        "origin": [
            [
                "fastq_files",
                "P"
            ],
            [
                "params.query",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_ch1",
                "P"
            ],
            [
                "fastq_ch2",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "assembly_results_ch\n   .collectFile(storeDir: \"output/assemblies/\") { item ->\n       [ \"${item[1]}.fasta\", item[2]]}\n   .println { \"Merged assemblies results into \" + it }",
        "origin": [
            [
                "assembly_results_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_4": {
        "string": "remap_ch\n   .collectFile(keepHeader: true, skip: 1, storeDir: \"output/remapping/\") { item ->\n       [ \"${item[1]}.tsv\", item[2]]}\n   .println { \"Merged remapping results into \" + it }",
        "origin": [
            [
                "remap_ch",
                "P"
            ]
        ],
        "gives": []
    }
}
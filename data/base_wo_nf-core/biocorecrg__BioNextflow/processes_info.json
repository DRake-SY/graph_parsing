{
    "getVersion": {
        "name_process": "getVersion",
        "string_process": "\nprocess getVersion {\n    container params.CONTAINER\n\n    output:\n\tstdout emit: out    \n    \n    shell:\n    \"\"\"\n\t\techo \"Epinano v1.1.1\"      \n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n\t\techo \"Epinano v1.1.1\"      \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "calcOverhang": {
        "name_process": "calcOverhang",
        "string_process": "\nprocess calcOverhang {\n    label (params.LABEL)\n    \n    tag { pair_id }\n    container params.CONTAINER\n\n    input:\n    tuple val(pair_id), path(reads)\n\t\n    output:\n    stdout emit: readsize\n\n    script:\n    def first_pair = reads[0]\n    \"\"\"\n    if [ `echo ${first_pair} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${first_pair} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", (sum/100)-1; exit} }'\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    def first_pair = reads[0]\n    \"\"\"\n    if [ `echo ${first_pair} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${first_pair} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", (sum/100)-1; exit} }'\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "indexWithAnno": {
        "name_process": "indexWithAnno",
        "string_process": "\nprocess indexWithAnno {\n    label (params.LABEL)\n    tag { \"indexing ${reference} with ${annotation} and overhang=${overhang}\"  }\n    container params.CONTAINER\n\n    input:\n    val(overhang)\n    val(indexname)\n    path(reference)\n\tpath(annotation)  \n\n    output:\n    path(\"${indexname}\")\n    \n    script:\n    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def clean_ref = unzip_ref[2]\n    def unzip_anno = unzipCmd(annotation)\n    def cmd_anno = unzip_anno[1]\n    def anno_name = unzip_anno[0]\n    def clean_anno = unzip_anno[2]\n    \"\"\"\n\t\t${cmd_ref} \n\t\t${cmd_anno}\n        mkdir ${indexname}\n        STAR --runMode genomeGenerate --genomeDir ${indexname} \\\n        \t--sjdbOverhang ${overhang} --sjdbGTFfile ${anno_name} \\\n            --runThreadN ${task.cpus} \\\n            --genomeFastaFiles ${ref_name} \\\n            --outFileNamePrefix ${indexname}\n        ${clean_ref}\n        ${clean_anno}\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def clean_ref = unzip_ref[2]\n    def unzip_anno = unzipCmd(annotation)\n    def cmd_anno = unzip_anno[1]\n    def anno_name = unzip_anno[0]\n    def clean_anno = unzip_anno[2]\n    \"\"\"\n\t\t${cmd_ref} \n\t\t${cmd_anno}\n        mkdir ${indexname}\n        STAR --runMode genomeGenerate --genomeDir ${indexname} \\\n        \t--sjdbOverhang ${overhang} --sjdbGTFfile ${anno_name} \\\n            --runThreadN ${task.cpus} \\\n            --genomeFastaFiles ${ref_name} \\\n            --outFileNamePrefix ${indexname}\n        ${clean_ref}\n        ${clean_anno}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "overhang",
            "indexname",
            "reference",
            "annotation"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { \"indexing ${reference} with ${annotation} and overhang=${overhang}\" }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "indexNoAnno": {
        "name_process": "indexNoAnno",
        "string_process": "\nprocess indexNoAnno {\n    label (params.LABEL)\n    tag { reference }\n    container params.CONTAINER\n\n    input:\n    val(indexname)\n    path(reference)\n\n    output:\n    path(\"${indexname}\")\n    \n    script:\n    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def clean_ref = unzip_ref[2]\n    \"\"\"\n\t\t${cmd_ref} \n        mkdir ${indexname}\n        STAR --runMode genomeGenerate --genomeDir ${indexname} \\\n            --runThreadN ${task.cpus} \\\n            --genomeFastaFiles ${ref_name} \\\n            --outFileNamePrefix ${indexname}\n        ${clean_ref}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def clean_ref = unzip_ref[2]\n    \"\"\"\n\t\t${cmd_ref} \n        mkdir ${indexname}\n        STAR --runMode genomeGenerate --genomeDir ${indexname} \\\n            --runThreadN ${task.cpus} \\\n            --genomeFastaFiles ${ref_name} \\\n            --outFileNamePrefix ${indexname}\n        ${clean_ref}\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "indexname",
            "reference"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { reference }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "map": {
        "name_process": "map",
        "string_process": "\nprocess map {\n    label (params.LABEL)\n    tag \"${idfile}\"\n    container params.CONTAINER\n\n    input:\n    tuple val(idfile), path(fastq_file)\n\tpath(reference)  \n\n    output:\n    tuple val(idfile), path(\"${idfile}.bam\")\n    \n    script:\n    \"\"\"\n        minimap2 -t ${task.cpus} -a ${params.EXTRAPARS} ${reference} ${fastq_file} | samtools view -@ ${task.cpus} -F4 -hSb - > ${idfile}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n        minimap2 -t ${task.cpus} -a ${params.EXTRAPARS} ${reference} ${fastq_file} | samtools view -@ ${task.cpus} -F4 -hSb - > ${idfile}.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "idfile",
            "fastq_file",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "idfile"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag \"${idfile}\"",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "printFileName": {
        "name_process": "printFileName",
        "string_process": "\nprocess printFileName {\n   label (params.LABEL)\n    \n    tag { id }\n    container params.CONTAINER\n\n    input:\n    tuple val(id), path(file)\n\t\n    output:\n    stdout emit: out\n\n    script:\n    \"\"\"\n        echo ${file}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n        echo ${file}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "renameFilename": {
        "name_process": "renameFilename",
        "string_process": "\nprocess renameFilename {\n   label (params.LABEL)\n    \n    tag { id }\n    container params.CONTAINER\n\n    input:\n    tuple val(id), path(file), val(newname)\n\t\n    output:\n    tuple val(id), path(newname)\n\n    script:\n    \"\"\"\n        ln -s ${file} ${newname}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n        ln -s ${file} ${newname}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "newname"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "calcIlluminaAvgReadSize": {
        "name_process": "calcIlluminaAvgReadSize",
        "string_process": "\nprocess calcIlluminaAvgReadSize {\n    label (params.LABEL)\n    \n    tag { pair_id }\n    container params.CONTAINER\n\n    input:\n    tuple val(pair_id), path(reads)\n\t\n    output:\n    stdout emit: readsize\n\n    script:\n    def first_pair = reads[0]\n    \"\"\"\n    if [ `echo ${first_pair} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${first_pair} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", (sum/100); exit} }'\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    def first_pair = reads[0]\n    \"\"\"\n    if [ `echo ${first_pair} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${first_pair} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", (sum/100); exit} }'\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "processSalmon": {
        "name_process": "processSalmon",
        "string_process": "\nprocess processSalmon {\n    label (params.LABEL)\n    tag { \"all\" }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(input)\n    path(index)\n    path(transcriptome)\n    path(annotation)\n    val(anno_type)\n    val(org_name)\n    val(genome_name)\n    val(release)\n\n    output:\n\tpath(\"gene_counts.txt\") , emit: gcounts\n\tpath(\"transcript_counts.txt\"), emit: tcounts\n\tpath(\"gse.rds\"), emit: gse\n    \n\tscript:\ndef Rscript = \"\"\"\n# R --slave --args index fasta gtf gtf_t organism genome release < import.R\n# example indexDir dros.fasta dros.gtf Ensembl \"Drosophila melanogaster\" BDGP6.22 98\n\nargs<-commandArgs(TRUE)\nindex_i<-args[1]\nfasta_i<-args[2]\ngtf_i<-args[3]\ngtf_t<-args[4]\norganism_n<-args[5]\ngenome_n<-args[6]\nrelease<-args[7]\n\nsuppressPackageStartupMessages(library(tximeta))\ndir<-getwd()\nfiles <- dir(dir, recursive=TRUE, pattern=\"quant.sf\", full.names=TRUE)\nnames<-basename(dirname(files))\ncoldata <- data.frame(files, names=names, stringsAsFactors=FALSE)\n\n#se <- tximeta(coldata)\ndir.create(file.path(dir, \"tmp\"), showWarnings = FALSE)\n\nsetTximetaBFC(file.path(dir, \"tmp\"), quiet = FALSE)\n\nindexDir <- file.path(index_i)\nfasta <- file.path(fasta_i)\ngtfPath <- file.path(gtf_i)\n\nmakeLinkedTxome(indexDir=indexDir,\n                source=gtf_t,\n                organism=organism_n,\n                genome=genome_n,\n                fasta=fasta,\n                release=release,\n                gtf=gtfPath,\n                write=FALSE)\n \nse <- tximeta(coldata)\ngse <- summarizeToGene(se)\nsaveRDS(gse, file = \"gse.rds\")\n\nlibrary(\"SummarizedExperiment\")\ngcounts<-assay(gse)\ntcounts<-assay(se)\n\nwrite.table(gcounts, \"gene_counts.txt\", col.names = TRUE, sep=\"\\t\")\nwrite.table(tcounts, \"transcript_counts.txt\", col.names = TRUE, sep=\"\\t\")\n\"\"\"\n\n    \"\"\"\n\tcat > import.R << 'EOF'\n${Rscript}\nEOF\n\t\n\tR --slave --args \\$PWD/${index} \\$PWD/${transcriptome} \\$PWD/${annotation} ${anno_type} ${org_name} ${genome_name} ${release} < import.R\n    \"\"\"\n}",
        "nb_lignes_process": 78,
        "string_script": "def Rscript = \"\"\"\n# R --slave --args index fasta gtf gtf_t organism genome release < import.R\n# example indexDir dros.fasta dros.gtf Ensembl \"Drosophila melanogaster\" BDGP6.22 98\n\nargs<-commandArgs(TRUE)\nindex_i<-args[1]\nfasta_i<-args[2]\ngtf_i<-args[3]\ngtf_t<-args[4]\norganism_n<-args[5]\ngenome_n<-args[6]\nrelease<-args[7]\n\nsuppressPackageStartupMessages(library(tximeta))\ndir<-getwd()\nfiles <- dir(dir, recursive=TRUE, pattern=\"quant.sf\", full.names=TRUE)\nnames<-basename(dirname(files))\ncoldata <- data.frame(files, names=names, stringsAsFactors=FALSE)\n\n#se <- tximeta(coldata)\ndir.create(file.path(dir, \"tmp\"), showWarnings = FALSE)\n\nsetTximetaBFC(file.path(dir, \"tmp\"), quiet = FALSE)\n\nindexDir <- file.path(index_i)\nfasta <- file.path(fasta_i)\ngtfPath <- file.path(gtf_i)\n\nmakeLinkedTxome(indexDir=indexDir,\n                source=gtf_t,\n                organism=organism_n,\n                genome=genome_n,\n                fasta=fasta,\n                release=release,\n                gtf=gtfPath,\n                write=FALSE)\n \nse <- tximeta(coldata)\ngse <- summarizeToGene(se)\nsaveRDS(gse, file = \"gse.rds\")\n\nlibrary(\"SummarizedExperiment\")\ngcounts<-assay(gse)\ntcounts<-assay(se)\n\nwrite.table(gcounts, \"gene_counts.txt\", col.names = TRUE, sep=\"\\t\")\nwrite.table(tcounts, \"transcript_counts.txt\", col.names = TRUE, sep=\"\\t\")\n\"\"\"\n\n    \"\"\"\n\tcat > import.R << 'EOF'\n${Rscript}\nEOF\n\t\n\tR --slave --args \\$PWD/${index} \\$PWD/${transcriptome} \\$PWD/${annotation} ${anno_type} ${org_name} ${genome_name} ${release} < import.R\n    \"\"\"",
        "nb_lignes_script": 55,
        "language_script": "bash",
        "tools": [
            "goProfiles",
            "FASTA",
            "GSE",
            "NeoFuse"
        ],
        "tools_url": [
            "https://bio.tools/goprofiles",
            "https://bio.tools/fasta",
            "https://bio.tools/gse",
            "https://bio.tools/NeoFuse"
        ],
        "tools_dico": [
            {
                "name": "goProfiles",
                "uri": "https://bio.tools/goprofiles",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package implements methods to compare lists of genes based on comparing the corresponding 'functional profiles'.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/goProfiles.html"
            },
            {
                "name": "FASTA",
                "uri": "https://bio.tools/fasta",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "The FASTA programs find regions of local or global similarity between protein or DNA sequences, either by searching protein or DNA databases, or by identifying local duplications within a sequence. Like BLAST, FASTA can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families.",
                "homepage": "http://fasta.bioch.virginia.edu/"
            },
            {
                "name": "GSE",
                "uri": "https://bio.tools/gse",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3321",
                            "term": "Molecular genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database for storing, visualizing, and analyzing ChIP-based transcription factor binding data and gene expression data.",
                "homepage": "http://groups.csail.mit.edu/cgs/gse.html"
            },
            {
                "name": "NeoFuse",
                "uri": "https://bio.tools/NeoFuse",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Peptide immunogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Immunogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Antigenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Predicting fusion neoantigens from RNA sequencing data.\n\nThe Section for Bioinformatrics at the Biocenter of Innsbruck Medical University is commited to the generation, management, integration, and leveraging data from genomics studies.\n\nQuantification of the tumor immune contexture.\n\nZlatko Trajanoski awarded with ERC Advanced Grant.",
                "homepage": "https://icbi.i-med.ac.at/NeoFuse/"
            }
        ],
        "inputs": [
            "input",
            "index",
            "transcriptome",
            "annotation",
            "anno_type",
            "org_name",
            "genome_name",
            "release"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { \"all\" }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "makeReport": {
        "name_process": "makeReport",
        "string_process": "\nprocess makeReport {\n    label (params.LABEL)\n    \n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(input)\n\t\n    output:\n\tpath(\"multiqc_report.html\")\n\t\n    script:\n    \"\"\"\n\t\tmultiqc ${params.EXTRAPARS} .\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n\t\tmultiqc ${params.EXTRAPARS} .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "input"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "makeReportID": {
        "name_process": "makeReportID",
        "string_process": "\nprocess makeReportID {\n    label (params.LABEL)\n    tag { id }\n    \n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(id), path(input)\n\t\n    output:\n\ttuple val(id), path(id)\n\t\n    script:\n    \"\"\"\n\t\tmultiqc ${params.EXTRAPARS} -o ${id} .\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n\t\tmultiqc ${params.EXTRAPARS} -o ${id} .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "id",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "getWorkflow": {
        "name_process": "getWorkflow",
        "string_process": "\nprocess getWorkflow {\n    container params.CONTAINER\n\n\tinput:\n\tval(flowcell) \n    val(kit)\n\n    output:\n\tstdout emit: out    \n    \n    shell:\n    \"\"\"\n\t\tguppy_basecaller --version\n\t\tguppy_basecaller --print_workflows | grep ${flowcell} | grep ${kit}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n\t\tguppy_basecaller --version\n\t\tguppy_basecaller --print_workflows | grep ${flowcell} | grep ${kit}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "flowcell",
            "kit"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "baseCall": {
        "name_process": "baseCall",
        "string_process": "\nprocess baseCall {\n    tag { idfile }\n    label (params.LABEL)\n\tif (params.MOP == \"YES\")  { if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5',  mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile.split('---')[0]}/${file.split('\\\\/')[-1]}\" } ) } }\n\telse if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5',  mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile}/${file.split('\\\\/')[-1]}\" } ) }\n\n    container params.CONTAINER\n             \n    input:\n    tuple val(idfile), path(fast5)\n    \n    output:\n    tuple val(idfile), path(\"${idfile}_out/workspace/*.fast5\"), emit: basecalled_fast5\n    tuple val(idfile), path(\"*.fastq.gz\"), emit: basecalled_fastq\n    tuple val(idfile), path(\"${idfile}_out/sequencing_summary.txt\"), emit: basecalling_stats\n\n    script:\n    def infolder = \"./\"\n\n    \"\"\"\n        ${library_export}\n        guppy_basecaller ${gpu_cmd} \\\n        --fast5_out ${params.EXTRAPARS_BC} -i ${infolder} \\\n        --save_path ./${idfile}_out \\\n        --gpu_runners_per_device 1 \\\n        --cpu_threads_per_caller 1 \\\n\t    --num_callers  ${task.cpus}\n        cat ${idfile}_out/*.fastq >> ${idfile}.fastq\n        rm ${idfile}_out/*.fastq\n        gzip ${idfile}.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def infolder = \"./\"\n\n    \"\"\"\n        ${library_export}\n        guppy_basecaller ${gpu_cmd} \\\n        --fast5_out ${params.EXTRAPARS_BC} -i ${infolder} \\\n        --save_path ./${idfile}_out \\\n        --gpu_runners_per_device 1 \\\n        --cpu_threads_per_caller 1 \\\n\t    --num_callers  ${task.cpus}\n        cat ${idfile}_out/*.fastq >> ${idfile}.fastq\n        rm ${idfile}_out/*.fastq\n        gzip ${idfile}.fastq\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idfile",
            "fast5"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { idfile }",
            "label (params.LABEL) if (params.MOP == \"YES\") { if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5', mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile.split('---')[0]}/${file.split(' /')[-1]}\" } ) } } else if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5', mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile}/${file.split(' /')[-1]}\" } ) }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "baseCallAndDemultiPlex": {
        "name_process": "baseCallAndDemultiPlex",
        "string_process": "\nprocess baseCallAndDemultiPlex {\n    tag { idfile }\n    label (params.LABEL)\n\tif (params.MOP == \"YES\")  { if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5',  mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile.split('---')[0]}/${file.split('\\\\/')[-1]}\" } ) } }\n\telse if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5',  mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile}/${file.split('\\\\/')[-1]}\" } ) }\n    \n    container params.CONTAINER\n             \n    input:\n    tuple val(idfile), path(fast5)\n    \n    output:\n    tuple val(idfile), path(\"${idfile}_out/workspace/*.fast5\"), emit: basecalled_fast5\n    tuple val(idfile), path(\"${idfile}.*.gz\"), emit: basecalled_fastq\n    tuple val(idfile), path(\"${idfile}_out/sequencing_summary.txt\"), emit: basecalling_stats\n\n    script:\n    def infolder = \"./\"\n\n    \"\"\"\n     ${library_export}\n\t\tguppy_basecaller ${gpu_cmd} \\\n\t\t${params.EXTRAPARS_BC} ${params.EXTRAPARS_DEM} \\\n\t\t--num_barcode_threads ${task.cpus} \\\n\t\t--trim_barcodes  \\\n\t\t--fast5_out -i ${infolder} \\\n\t\t--save_path ./${idfile}_out \\\n        --gpu_runners_per_device 1 \\\n\t\t--cpu_threads_per_caller 1  \\\n\t\t--num_callers ${task.cpus}\n\t\tcd ${idfile}_out; \n\t\tif [ -d barcode01 ]; then\n\t\t\tfor d in barcode*; do echo \\$d; cat \\$d/*.fastq > ../${idfile}.\\$d.fastq; done;\n\t\tfi\n\t\tif [ -d unclassified ]; then\n\t\t\tcat unclassified/*.fastq > ../${idfile}.unclassified.fastq; cd ../\n\t\tfi\n\t\tfor i in *.fastq; do gzip \\$i; done\t\n        rm *_out/*/*.fastq\n     \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def infolder = \"./\"\n\n    \"\"\"\n     ${library_export}\n\t\tguppy_basecaller ${gpu_cmd} \\\n\t\t${params.EXTRAPARS_BC} ${params.EXTRAPARS_DEM} \\\n\t\t--num_barcode_threads ${task.cpus} \\\n\t\t--trim_barcodes  \\\n\t\t--fast5_out -i ${infolder} \\\n\t\t--save_path ./${idfile}_out \\\n        --gpu_runners_per_device 1 \\\n\t\t--cpu_threads_per_caller 1  \\\n\t\t--num_callers ${task.cpus}\n\t\tcd ${idfile}_out; \n\t\tif [ -d barcode01 ]; then\n\t\t\tfor d in barcode*; do echo \\$d; cat \\$d/*.fastq > ../${idfile}.\\$d.fastq; done;\n\t\tfi\n\t\tif [ -d unclassified ]; then\n\t\t\tcat unclassified/*.fastq > ../${idfile}.unclassified.fastq; cd ../\n\t\tfi\n\t\tfor i in *.fastq; do gzip \\$i; done\t\n        rm *_out/*/*.fastq\n     \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idfile",
            "fast5"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { idfile }",
            "label (params.LABEL) if (params.MOP == \"YES\") { if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5', mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile.split('---')[0]}/${file.split(' /')[-1]}\" } ) } } else if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern: '*_out/workspace/*.fast5', mode: params.OUTPUTMODE, saveAs: { file -> \"${idfile}/${file.split(' /')[-1]}\" } ) }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n    label (params.LABEL)\n    tag { \"${reference}\" }\n    container params.CONTAINER\n\n    input:\n    path(reference)\n    path(genome)\n    val(indexname)\n\n    output:\n    path(\"${indexname}\")\n\n    script:\n    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def clean_ref = unzip_ref[2]\n    def unzip_genome = unzipCmd(genome)\n    def cmd_genome = unzip_genome[1]\n    def genome_name = unzip_genome[0]\n    def clean_genome = unzip_genome[2]\n    \"\"\"\n    ${cmd_ref}\n    ${cmd_genome}\n\n    grep \"^>\" ${genome_name} | cut -d \" \" -f 1 > decoys.txt\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat ${ref_name} ${genome_name} >> gentrome.fa\n    gzip gentrome.fa\n    salmon index ${params.EXTRAPARSINDEX} -p ${task.cpus} -d decoys.txt -t gentrome.fa.gz -i ${indexname}\n\n    ${clean_ref}\n    ${clean_genome}\n    rm gentrome.fa.gz\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def clean_ref = unzip_ref[2]\n    def unzip_genome = unzipCmd(genome)\n    def cmd_genome = unzip_genome[1]\n    def genome_name = unzip_genome[0]\n    def clean_genome = unzip_genome[2]\n    \"\"\"\n    ${cmd_ref}\n    ${cmd_genome}\n\n    grep \"^>\" ${genome_name} | cut -d \" \" -f 1 > decoys.txt\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat ${ref_name} ${genome_name} >> gentrome.fa\n    gzip gentrome.fa\n    salmon index ${params.EXTRAPARSINDEX} -p ${task.cpus} -d decoys.txt -t gentrome.fa.gz -i ${indexname}\n\n    ${clean_ref}\n    ${clean_genome}\n    rm gentrome.fa.gz\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "reference",
            "genome",
            "indexname"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { \"${reference}\" }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "sampleCompare": {
        "name_process": "sampleCompare",
        "string_process": "\nprocess sampleCompare {\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${folder_name_A} vs ${folder_name_B}\" \n \t\t\n    input:\n    tuple val(folder_name_A), val(folder_name_B), path(tsv_folder_A), path(tsv_folder_B)\n    file(reference)\n    \n    output:\n    file(\"${folder_name_A}-${folder_name_B}_nanocompore/*_results.tsv.gz\")\n    \n    script:\n\t\"\"\"\n\tnanocompore sampcomp --nthreads ${task.cpus}\\\n    --file_list1 ${tsv_folder_A}/out_eventalign_collapse.tsv \\\n    --file_list2 ${tsv_folder_B}/out_eventalign_collapse.tsv \\\n    --label1 ${folder_name_A} \\\n    --label2 ${folder_name_B} \\\n    --fasta ${reference} \\\n    --outpath ./${folder_name_A}-${folder_name_B}_nanocompore/ \\\n    ${params.EXTRAPARS} --pvalue_thr 1 --outprefix ${folder_name_A}_vs_${folder_name_B} --logit --comparison_methods GMM,KS,MW,TT --overwrite \n      gzip ${folder_name_A}-${folder_name_B}_nanocompore/*_results.tsv \t\n      \"\"\"\n\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\"\"\"\n\tnanocompore sampcomp --nthreads ${task.cpus}\\\n    --file_list1 ${tsv_folder_A}/out_eventalign_collapse.tsv \\\n    --file_list2 ${tsv_folder_B}/out_eventalign_collapse.tsv \\\n    --label1 ${folder_name_A} \\\n    --label2 ${folder_name_B} \\\n    --fasta ${reference} \\\n    --outpath ./${folder_name_A}-${folder_name_B}_nanocompore/ \\\n    ${params.EXTRAPARS} --pvalue_thr 1 --outprefix ${folder_name_A}_vs_${folder_name_B} --logit --comparison_methods GMM,KS,MW,TT --overwrite \n      gzip ${folder_name_A}-${folder_name_B}_nanocompore/*_results.tsv \t\n      \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Nanocompore"
        ],
        "tools_url": [
            "https://bio.tools/Nanocompore"
        ],
        "tools_dico": [
            {
                "name": "Nanocompore",
                "uri": "https://bio.tools/Nanocompore",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0428",
                                    "term": "PolyA signal detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Post-translational modification analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Protein post-translation modification site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Post-translational modification site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM site analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Post-translation modification site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0428",
                                    "term": "Polyadenylation signal prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0428",
                                    "term": "Polyadenylation signal detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0428",
                                    "term": "PolyA signal prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0428",
                                    "term": "PolyA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0428",
                                    "term": "PolyA detection"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "RNA modifications detection by comparative Nanopore direct RNA sequencing.\n\nRNA modifications detection from Nanopore dRNA-Seq data.\n\nNanocompore identifies differences in ONT nanopore sequencing raw signal corresponding to RNA modifications by comparing 2 samples.\n\nAnalyses performed for the nanocompore paper.\n\nNanocompore compares 2 ONT nanopore direct RNA sequencing datasets from different experimental conditions expected to have a significant impact on RNA modifications. It is recommended to have at least 2 replicates per condition. For example one can use a control condition with a significantly reduced number of modifications such as a cell line for which a modification writing enzyme was knocked-down or knocked-out. Alternatively, on a smaller scale transcripts of interests could be synthesized in-vitro",
                "homepage": "https://github.com/tleonardi/nanocompore"
            }
        ],
        "inputs": [
            "folder_name_A",
            "folder_name_B",
            "tsv_folder_A",
            "tsv_folder_B",
            "reference"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${folder_name_A} vs ${folder_name_B}\""
        ],
        "when": "",
        "stub": ""
    },
    "getDiscordant": {
        "name_process": "getDiscordant",
        "string_process": "\nprocess getDiscordant {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(\"${params.OUTPUT}/lumpy_bam\", mode:'copy') }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.discordants.bam\") \n \n    \"\"\"    \n    samtools view -@ ${task.cpus} -b -F 1294 ${pair_id}.bam > ${pair_id}.discordants.unsorted.bam\n    samtools sort -@ ${task.cpus} -o ${pair_id}.discordants.bam ${pair_id}.discordants.unsorted.bam \n\trm ${pair_id}.discordants.unsorted.bam\n    \"\"\"    \n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"    \n    samtools view -@ ${task.cpus} -b -F 1294 ${pair_id}.bam > ${pair_id}.discordants.unsorted.bam\n    samtools sort -@ ${task.cpus} -o ${pair_id}.discordants.bam ${pair_id}.discordants.unsorted.bam \n\trm ${pair_id}.discordants.unsorted.bam\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(\"${params.OUTPUT}/lumpy_bam\", mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "getSplitReads": {
        "name_process": "getSplitReads",
        "string_process": "\nprocess getSplitReads {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    publishDir(\"${params.OUTPUT}/lumpy_bam\", mode:'copy')\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.splitters.bam\") \n \n    \"\"\"    \n\tsamtools view -@ {task.cpus} -h ${reads} \\\n    \t| extractSplitReads_BwaMem -i stdin \\\n    \t| samtools view -@ {task.cpus} -Sb - > ${pair_id}.splitters.unsorted.bam\n    samtools sort -@ ${task.cpus} -o ${pair_id}.splitters.bam ${pair_id}.splitters.unsorted.bam \n\trm ${pair_id}.splitters.unsorted.bam\n    \"\"\"    \n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"    \n\tsamtools view -@ {task.cpus} -h ${reads} \\\n    \t| extractSplitReads_BwaMem -i stdin \\\n    \t| samtools view -@ {task.cpus} -Sb - > ${pair_id}.splitters.unsorted.bam\n    samtools sort -@ ${task.cpus} -o ${pair_id}.splitters.bam ${pair_id}.splitters.unsorted.bam \n\trm ${pair_id}.splitters.unsorted.bam\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER",
            "publishDir(\"${params.OUTPUT}/lumpy_bam\", mode:'copy')"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_express_single": {
        "name_process": "lumpy_express_single",
        "string_process": "\nprocess lumpy_express_single {\n    publishDir(\"${params.OUTPUT}/lumpy_vcf\", mode:'copy')\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n\n    input:\n    tuple val(pair_id), path(bam), path(split)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.vcf\") \n \n    \"\"\"\n\tlumpyexpress \\\n\t\t${params.EXTRAPARS} \\\n    \t-B ${bam} \\\n    \t-S ${split} \\\n    \t-D ${discordant} \\\n    \t-o ${pair_id}.vcf\n    \"\"\"    \n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n\tlumpyexpress \\\n\t\t${params.EXTRAPARS} \\\n    \t-B ${bam} \\\n    \t-S ${split} \\\n    \t-D ${discordant} \\\n    \t-o ${pair_id}.vcf\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "bam",
            "split"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "publishDir(\"${params.OUTPUT}/lumpy_vcf\", mode:'copy')",
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "eventalign": {
        "name_process": "eventalign",
        "string_process": "\nprocess eventalign {\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${idsample}--${fast5_file}\" \n \t\n    input:\n    tuple val(idsample), path(fast5_file), path(bam), path(bai), path(fastq), path(seqsummary), path(\"*\")\n    path(reference)\n    \n    output:\n    tuple val(idsample), path(\"*_event_align.tsv.gz\")\n\n    script:\n    \"\"\" \n    mkdir ${idsample}/\n    cd ${idsample}/; ln -s ../*.fast5 .; cd ../\n    nanopolish eventalign -t ${task.cpus} --reads ${fastq} --bam ${bam} --genome ${reference} --samples --print-read-names --scale-events --samples 2>/dev/null | pigz -p ${task.cpus} > ${idsample}_${fast5_file}_event_align.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\" \n    mkdir ${idsample}/\n    cd ${idsample}/; ln -s ../*.fast5 .; cd ../\n    nanopolish eventalign -t ${task.cpus} --reads ${fastq} --bam ${bam} --genome ${reference} --samples --print-read-names --scale-events --samples 2>/dev/null | pigz -p ${task.cpus} > ${idsample}_${fast5_file}_event_align.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "nanopolish",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nanopolish",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "nanopolish",
                "uri": "https://bio.tools/nanopolish",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0867",
                                "term": "Sequence alignment report"
                            }
                        ]
                    }
                ],
                "description": "A package for detecting cytosine methylations and genetic variations from nanopore MinION sequencing data.",
                "homepage": "https://github.com/jts/nanopolish"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "idsample",
            "fast5_file",
            "bam",
            "bai",
            "fastq",
            "seqsummary",
            "reference"
        ],
        "nb_inputs": 7,
        "outputs": [
            "idsample"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${idsample}--${fast5_file}\""
        ],
        "when": "",
        "stub": ""
    },
    "eventalignCollapse": {
        "name_process": "eventalignCollapse",
        "string_process": "\nprocess eventalignCollapse {\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${idsample}\" \n \t\n    input:\n    tuple val(idsample), path(aligned_events)\n    \n    output:\n    tuple val(idsample), path(\"*_collapsed_align_events\")\n\n    script:\n    \"\"\" \n\t\tzcat ${aligned_events} | awk '!(/^contig/ && NR>1)' | tee   >(pigz -p ${task.cpus} -9 - > ${idsample}_combined.eventalign.tsv.gz) | NanopolishComp Eventalign_collapse -t ${task.cpus} -o ${idsample}_collapsed_align_events\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\" \n\t\tzcat ${aligned_events} | awk '!(/^contig/ && NR>1)' | tee   >(pigz -p ${task.cpus} -9 - > ${idsample}_combined.eventalign.tsv.gz) | NanopolishComp Eventalign_collapse -t ${task.cpus} -o ${idsample}_collapsed_align_events\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idsample",
            "aligned_events"
        ],
        "nb_inputs": 2,
        "outputs": [
            "idsample"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${idsample}\""
        ],
        "when": "",
        "stub": ""
    },
    "polyAtail": {
        "name_process": "polyAtail",
        "string_process": "\nprocess polyAtail {\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${sampleID}--${fast5}\" \n  \n\tinput:\n\ttuple val(sampleID), path(fast5), path(alignment), path(alnindex), path(fastq)\n\tpath(reference)\n\n\toutput:\n\ttuple val(sampleID), path(\"*.polya.estimation.tsv.gz\")\n\n\tscript:\n\tdef fast5_index=fast5.getSimpleName()\n\t\"\"\"\n\t#index reads\n\tnanopolish index -d ./ ${fastq}\n\t# polya length estimation\n\tnanopolish polya -r ${fastq} ${params.EXTRAPARS} -g ${reference} -t ${task.cpus} -b ${alignment} | pigz -p ${task.cpus}  > ${sampleID}-${fast5_index}.polya.estimation.tsv.gz\n\trm ${fastq}.inde*\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\tdef fast5_index=fast5.getSimpleName()\n\t\"\"\"\n\t#index reads\n\tnanopolish index -d ./ ${fastq}\n\t# polya length estimation\n\tnanopolish polya -r ${fastq} ${params.EXTRAPARS} -g ${reference} -t ${task.cpus} -b ${alignment} | pigz -p ${task.cpus}  > ${sampleID}-${fast5_index}.polya.estimation.tsv.gz\n\trm ${fastq}.inde*\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "nanopolish"
        ],
        "tools_url": [
            "https://bio.tools/nanopolish"
        ],
        "tools_dico": [
            {
                "name": "nanopolish",
                "uri": "https://bio.tools/nanopolish",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0867",
                                "term": "Sequence alignment report"
                            }
                        ]
                    }
                ],
                "description": "A package for detecting cytosine methylations and genetic variations from nanopore MinION sequencing data.",
                "homepage": "https://github.com/jts/nanopolish"
            }
        ],
        "inputs": [
            "sampleID",
            "fast5",
            "alignment",
            "alnindex",
            "fastq",
            "reference"
        ],
        "nb_inputs": 6,
        "outputs": [
            "sampleID"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${sampleID}--${fast5}\""
        ],
        "when": "",
        "stub": ""
    },
    "collect_polyA_results": {
        "name_process": "collect_polyA_results",
        "string_process": "\nprocess collect_polyA_results {\n        if (params.OUTPUT != \"\") { publishDir(params.OUTPUT,pattern: \"*.polya.estimation.tsv.gz\", mode:params.OUTPUTMODE ) }\n\ttag { sampleID }  \n        container params.CONTAINER\n\t\n\tinput:\n\ttuple val(sampleID), path(\"nanopol_*\")\n\t\n\toutput:\n    tuple val(sampleID), path(\"${sampleID}.nanopol.len.gz\"), emit: filtered_est\n    path(\"*.polya.estimation.tsv.gz\"), emit: polya_est\n\n\tscript:\n\t\"\"\"\n\tzcat nanopol_* | awk '!(NR>1 && /leader_start/)' | grep -v \"READ_FAILED_LOAD\" | pigz > ${sampleID}.polya.estimation.tsv.gz\n\tzcat ${sampleID}.polya.estimation.tsv.gz | awk -F\"\\t\" '{if (\\$10==\"PASS\") print \\$1\"\\t\"\\$9}' | pigz > ${sampleID}.nanopol.len.gz\n\t\"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\t\"\"\"\n\tzcat nanopol_* | awk '!(NR>1 && /leader_start/)' | grep -v \"READ_FAILED_LOAD\" | pigz > ${sampleID}.polya.estimation.tsv.gz\n\tzcat ${sampleID}.polya.estimation.tsv.gz | awk -F\"\\t\" '{if (\\$10==\"PASS\") print \\$1\"\\t\"\\$9}' | pigz > ${sampleID}.nanopol.len.gz\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleID"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { sampleID }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "filterPE": {
        "name_process": "filterPE",
        "string_process": "\nprocess filterPE {\n    if (params.OUTPUT != \"\") {publishDir(params.OUTPUT, mode: 'copy') }\n   \n    tag {pair_id }\n    container params.CONTAINER\n    label (params.LABEL)\n\n    input:\n    tuple val (pair_id), path(fastq)\n\n    output:\n    tuple val (pair_id), path (\"${pair_id}_1P.fq.gz\"), path (\"${pair_id}_2P.fq.gz\"), emit: trimmed_reads\n    tuple val (pair_id), path (\"${pair_id}.log\"), emit: trim_log\n\n    script:\n\n    \"\"\"\n    trimmomatic PE \\\n    -threads ${task.cpus} -trimlog ${pair_id}.log \\\n    ${fastq} \\\n    ${pair_id}_1P.fq.gz \\\n    ${pair_id}_2P.fq.gz \\\n    ${pair_id}_1UP.fq.gz \\\n    ${pair_id}_2UP.fq.gz \\\n    ${params.EXTRAPARS}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    trimmomatic PE \\\n    -threads ${task.cpus} -trimlog ${pair_id}.log \\\n    ${fastq} \\\n    ${pair_id}_1P.fq.gz \\\n    ${pair_id}_2P.fq.gz \\\n    ${pair_id}_1UP.fq.gz \\\n    ${pair_id}_2UP.fq.gz \\\n    ${params.EXTRAPARS}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "pair_id",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag {pair_id }",
            "container params.CONTAINER",
            "label (params.LABEL)"
        ],
        "when": "",
        "stub": ""
    },
    "filterSE": {
        "name_process": "filterSE",
        "string_process": "\nprocess filterSE {\n    if (params.OUTPUT != \"\") {publishDir(params.OUTPUT, mode: 'copy') }\n    \n    tag {pair_id }\n    container params.CONTAINER\n    label (params.LABEL)\n\n    input:\n    tuple val (pair_id), path(fastq)\n\n    output:\n    tuple val (pair_id), path (\"${pair_id}_P.fq.gz\"), emit: trimmed_reads\n    tuple val (pair_id), path (\"${pair_id}.log\"), emit: trim_log\n\n    script:\n\n    \"\"\"\n    trimmomatic SE \\\n    -threads ${task.cpus} -trimlog ${pair_id}.log \\\n    ${fastq} \\\n    ${pair_id}_P.fq.gz \\\n    ${params.EXTRAPARS}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    trimmomatic SE \\\n    -threads ${task.cpus} -trimlog ${pair_id}.log \\\n    ${fastq} \\\n    ${pair_id}_P.fq.gz \\\n    ${params.EXTRAPARS}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "pair_id",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag {pair_id }",
            "container params.CONTAINER",
            "label (params.LABEL)"
        ],
        "when": "",
        "stub": ""
    },
    "mapSE": {
        "name_process": "mapSE",
        "string_process": "\nprocess mapSE {\n    label (params.LABEL)\n    tag { \"${pair_id}\" }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy')}\n\n    input:\n    tuple val(pair_id), path(reads)\n    path(index)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}\")\n\n    script:\n    \"\"\"\n    salmon quant ${params.EXTRAPARS} --validateMappings --seqBias -l A --gcBias -p ${task.cpus} -i ${index} -r ${reads} -o ${pair_id}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    salmon quant ${params.EXTRAPARS} --validateMappings --seqBias -l A --gcBias -p ${task.cpus} -i ${index} -r ${reads} -o ${pair_id}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { \"${pair_id}\" }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy')}"
        ],
        "when": "",
        "stub": ""
    },
    "mapPE": {
        "name_process": "mapPE",
        "string_process": "\nprocess mapPE {\n    label (params.LABEL)\n    tag { \"${pair_id}\" }\n\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy')}\n\n    input:\n    tuple val(pair_id), path(pairs)\n    path(index)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}\")\n\n    script:\n    def readsA = pairs[0]\n    def readsB = pairs[1]\n    \"\"\"\n    salmon quant ${params.EXTRAPARS} --validateMappings --seqBias -l A --gcBias -p ${task.cpus} -i ${index} -1 ${readsA} -2 ${readsB} -o ${pair_id}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    def readsA = pairs[0]\n    def readsB = pairs[1]\n    \"\"\"\n    salmon quant ${params.EXTRAPARS} --validateMappings --seqBias -l A --gcBias -p ${task.cpus} -i ${index} -1 ${readsA} -2 ${readsB} -o ${pair_id}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "pair_id",
            "pairs",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { \"${pair_id}\" }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy')}"
        ],
        "when": "",
        "stub": ""
    },
    "get_read_length": {
        "name_process": "get_read_length",
        "string_process": "\nprocess get_read_length {\n\n  input:\n  tuple val(pair_id), path(reads)\n\n  output:\n  stdout emit: out\n\n  script:\n  \"\"\"\n        if [ `echo ${reads} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${reads} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", sum/100; exit} }'\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n        if [ `echo ${reads} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${reads} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", sum/100; exit} }'\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "bracken_build": {
        "name_process": "bracken_build",
        "string_process": "\nprocess bracken_build {\n\n  maxForks 1\n\n  tag { read_size }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  val(read_size)\n  path(database)\n\n  output:\n  path(\"database*\"), emit: brackendb\n  path(\"out${read_size}\"), emit: bracken_out\n\n  script:\n  \"\"\"\n  kraken2 --db=${database} --threads=${task.cpus} <( find -L ${database}/library \\\\( -name \"*.fna\" -o -name \"*.fasta\" -o -name \"*.fa\" \\\\) -exec cat {} + ) > database.kraken\n  /usr/local/bracken/src/kmer2read_distr --seqid2taxid ${database}/seqid2taxid.map --taxonomy ${database}/taxonomy --kraken database.kraken --output database${read_size}mers.kraken -l ${read_size} -t ${task.cpus}\n  python /usr/local/bracken/src/generate_kmer_distribution.py -i database${read_size}mers.kraken -o database${read_size}mers.kmer_distrib > out${read_size}\n  \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  kraken2 --db=${database} --threads=${task.cpus} <( find -L ${database}/library \\\\( -name \"*.fna\" -o -name \"*.fasta\" -o -name \"*.fa\" \\\\) -exec cat {} + ) > database.kraken\n  /usr/local/bracken/src/kmer2read_distr --seqid2taxid ${database}/seqid2taxid.map --taxonomy ${database}/taxonomy --kraken database.kraken --output database${read_size}mers.kraken -l ${read_size} -t ${task.cpus}\n  python /usr/local/bracken/src/generate_kmer_distribution.py -i database${read_size}mers.kraken -o database${read_size}mers.kmer_distrib > out${read_size}\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "read_size",
            "database"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "maxForks 1",
            "tag { read_size }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "bracken": {
        "name_process": "bracken",
        "string_process": "\nprocess bracken {\n\n  tag { pair_id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(pair_id), path(reads)\n  path(brackendb)\n  path(\"kraken2_${pair_id}.report\")\n  path(\"kraken2_${pair_id}.out\")\n\n  output:\n  path(\"bracken_${pair_id}.*.report\"), emit: report\n  path(\"bracken_${pair_id}.*.out\"), emit: output\n  path(\"kraken2_${pair_id}_bracken_species.report\"), emit: default_report\n\n  script:\n  \"\"\"\n  FIRST=\\$(echo ${reads} | head -n1 | awk '{print \\$1;}')\n  if [ `echo \\$FIRST | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n  READSIZE=\\$(\\$cat \\$FIRST | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", sum/100; exit} } ')\n  bracken -d . -i kraken2_${pair_id}.report -o bracken_${pair_id}.\\${READSIZE}.report -r \\$READSIZE -l S -t ${task.cpus} > bracken_${pair_id}.\\${READSIZE}.out\n  \"\"\"\n\n  }",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  FIRST=\\$(echo ${reads} | head -n1 | awk '{print \\$1;}')\n  if [ `echo \\$FIRST | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n  READSIZE=\\$(\\$cat \\$FIRST | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", sum/100; exit} } ')\n  bracken -d . -i kraken2_${pair_id}.report -o bracken_${pair_id}.\\${READSIZE}.report -r \\$READSIZE -l S -t ${task.cpus} > bracken_${pair_id}.\\${READSIZE}.out\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "brackendb"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pair_id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "assembleTranscripts": {
        "name_process": "assembleTranscripts",
        "string_process": "\nprocess assembleTranscripts {\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${sampleID}\" \n \t\n    input:\n    path(genome)\n    path(annotation)\n    tuple val(sampleID), path(bamfiles)\n    \n    output:\n    tuple val(sampleID), path(\"${sampleID}_bambu\")\n    \n    script:\n\tdef unzipGen  \t = unzipCmd(genome)\n\tdef genome_name  = unzipGen[0]\n\tdef cmd_g_unzip  = unzipGen[1]\n\tdef cmd_g_clean  = unzipGen[2]\n\n\tdef unzipAnno  \t\t = unzipCmd(annotation)\n\tdef annotation_name  = unzipAnno[0]\n\tdef cmd_a_unzip  \t = unzipAnno[1]\n\tdef cmd_a_clean  \t = unzipAnno[2]\n    def extrapars\t\t = \"\"\n    if (params.EXTRAPARS != \"\") {\n    \textrapars = \", ${params.EXTRAPARS}\"\n    }\n\t\"\"\"\n\t${cmd_g_unzip}\n\t${cmd_a_unzip}\n\tR --vanilla --slave -e \"library(bambu)\nbamfiles <- list.files(path='./', full.names = TRUE, pattern = '*.bam')\nbamFiles <- Rsamtools::BamFileList(bamfiles)\nbambuAnnotations <- prepareAnnotations(\\'./${annotation_name}\\')\nRsamtools::indexFa(\\'./${genome_name}\\')\nse <- bambu(reads = bamFiles, annotations = bambuAnnotations, genome = \\'./${genome_name}\\', \\\nncore = ${task.cpus} ${extrapars})\nwriteBambuOutput(se, \\'${sampleID}_bambu\\')\"\n\t${cmd_g_clean}\n\t${cmd_a_clean}\n\t\"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "\tdef unzipGen  \t = unzipCmd(genome)\n\tdef genome_name  = unzipGen[0]\n\tdef cmd_g_unzip  = unzipGen[1]\n\tdef cmd_g_clean  = unzipGen[2]\n\n\tdef unzipAnno  \t\t = unzipCmd(annotation)\n\tdef annotation_name  = unzipAnno[0]\n\tdef cmd_a_unzip  \t = unzipAnno[1]\n\tdef cmd_a_clean  \t = unzipAnno[2]\n    def extrapars\t\t = \"\"\n    if (params.EXTRAPARS != \"\") {\n    \textrapars = \", ${params.EXTRAPARS}\"\n    }\n\t\"\"\"\n\t${cmd_g_unzip}\n\t${cmd_a_unzip}\n\tR --vanilla --slave -e \"library(bambu)\nbamfiles <- list.files(path='./', full.names = TRUE, pattern = '*.bam')\nbamFiles <- Rsamtools::BamFileList(bamfiles)\nbambuAnnotations <- prepareAnnotations(\\'./${annotation_name}\\')\nRsamtools::indexFa(\\'./${genome_name}\\')\nse <- bambu(reads = bamFiles, annotations = bambuAnnotations, genome = \\'./${genome_name}\\', \\\nncore = ${task.cpus} ${extrapars})\nwriteBambuOutput(se, \\'${sampleID}_bambu\\')\"\n\t${cmd_g_clean}\n\t${cmd_a_clean}\n\t\"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "GSE",
            "gencore"
        ],
        "tools_url": [
            "https://bio.tools/gse",
            "https://bio.tools/gencore"
        ],
        "tools_dico": [
            {
                "name": "GSE",
                "uri": "https://bio.tools/gse",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3321",
                            "term": "Molecular genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database for storing, visualizing, and analyzing ChIP-based transcription factor binding data and gene expression data.",
                "homepage": "http://groups.csail.mit.edu/cgs/gse.html"
            },
            {
                "name": "gencore",
                "uri": "https://bio.tools/gencore",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "an efficient tool to generate consensus reads for error suppressing and duplicate removing of NGS data.\n\nGenerate consensus reads to reduce sequencing noises and remove duplications.\n\nA fast tool to remove sequencing duplications and eliminate sequencing errors by generating consensus reads.\n\ngencore is a tool for fast and powerful deduplication for paired-end next-generation sequencing (NGS) data. It is much faster and uses much less memory than Picard and other tools. It generates very informative reports in both HTML and JSON formats. It's based on an algorithm for generating consensus reads, and that's why it's named gencore",
                "homepage": "https://github.com/OpenGene/gencore"
            }
        ],
        "inputs": [
            "genome",
            "annotation",
            "sampleID",
            "bamfiles"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sampleID"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${sampleID}\""
        ],
        "when": "",
        "stub": ""
    },
    "nanoCount": {
        "name_process": "nanoCount",
        "string_process": "\nprocess nanoCount {\n    tag { id }\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n   \n    input:\n    tuple val(id), path(bamfile), path(bai)\n\n    output:\n    tuple val(id), path(\"${id}.count\")\n    \n\tscript:    \n\t\"\"\"\n\t\tNanoCount -i ${bamfile} ${params.EXTRAPARS} -o ${id}.count\n\t\"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\t\tNanoCount -i ${bamfile} ${params.EXTRAPARS} -o ${id}.count\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "bamfile",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "runScallop": {
        "name_process": "runScallop",
        "string_process": "\nprocess runScallop {\n\n  tag { id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(id), path(bam_alignment)\n\n  output:\n  tuple val(id), path(\"${id}.scallop.gtf\")\n\n  \"\"\"\n  scallop -i ${bam_alignment} ${params.EXTRAPARS} -o ${id}.scallop.gtf --verbose --library_type first\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  scallop -i ${bam_alignment} ${params.EXTRAPARS} -o ${id}.scallop.gtf --verbose --library_type first\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Scallop-LR"
        ],
        "tools_url": [
            "https://bio.tools/Scallop-LR"
        ],
        "tools_dico": [
            {
                "name": "Scallop-LR",
                "uri": "https://bio.tools/Scallop-LR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Read binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0264",
                                    "term": "Alternative splicing prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning shotgun reads"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0264",
                                    "term": "Differential splicing analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0264",
                                    "term": "Alternative splicing detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0264",
                                    "term": "Splice transcript prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0264",
                                    "term": "Alternative splicing analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Accurate reference-based transcript assembler.",
                "homepage": "https://github.com/Kingsford-Group/scallop"
            }
        ],
        "inputs": [
            "id",
            "bam_alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "fastqScreen": {
        "name_process": "fastqScreen",
        "string_process": "\nprocess fastqScreen {\n    tag \"${fastq}\"\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(conf)\n    tuple val(id), path(fastq)\n\n    output:\n    tuple val(id), path(\"*_screen.*\") \n\n    script:\n\t\"\"\"\n\tfastq_screen ${params.EXTRAPARS} --conf ${conf} --threads ${task.cpus} ${fastq} \n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\tfastq_screen ${params.EXTRAPARS} --conf ${conf} --threads ${task.cpus} ${fastq} \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "conf",
            "id",
            "fastq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${fastq}\"",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "getEffectiveGenomeSize": {
        "name_process": "getEffectiveGenomeSize",
        "string_process": "\nprocess getEffectiveGenomeSize {\n    label (params.LABEL)\n    tag { reference }\n    container params.CONTAINER\n\n    input:\n    val read_size\n    path(reference)\n\n    output:\n\tpath(\"epic-effective.out\")\n    \n\tscript:\n    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def cmd_clean = unzip_ref[2]\n    \"\"\"\n    ${cmd_ref}\n    epic-effective -t ./ --read-length=${read_size} -n ${task.cpus} ${ref_name} 2>/dev/null > epic-effective.out\n    ${cmd_clean}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    def unzip_ref = unzipCmd(reference)\n    def cmd_ref = unzip_ref[1]\n    def ref_name = unzip_ref[0]\n    def cmd_clean = unzip_ref[2]\n    \"\"\"\n    ${cmd_ref}\n    epic-effective -t ./ --read-length=${read_size} -n ${task.cpus} ${ref_name} 2>/dev/null > epic-effective.out\n    ${cmd_clean}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "read_size",
            "reference"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { reference }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "annotatePeaks": {
        "name_process": "annotatePeaks",
        "string_process": "\nprocess annotatePeaks {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    \n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy', pattern: '*.anno') }\n\n    input:\n    tuple val(pair_id), path(bedfile)\n    path(annofile)\n\n    output:\n    tuple val(pair_id), path(\"*.anno\") \n    \n\tscript:\n\tdef unzip      = unzipCmd(annofile)\n\tdef file_name  = unzip[0]\n\tdef cmd_unzip  = unzip[1]\n\tdef cmd_clean  = unzip[2]\n\t\"\"\"\n\t${cmd_unzip}\n\tannotatePeaks.pl ${bedfile} none -gtf ${file_name} > ${pair_id}.anno\n\t${cmd_clean}\n    \"\"\"    \n}",
        "nb_lignes_process": 24,
        "string_script": "\tdef unzip      = unzipCmd(annofile)\n\tdef file_name  = unzip[0]\n\tdef cmd_unzip  = unzip[1]\n\tdef cmd_clean  = unzip[2]\n\t\"\"\"\n\t${cmd_unzip}\n\tannotatePeaks.pl ${bedfile} none -gtf ${file_name} > ${pair_id}.anno\n\t${cmd_clean}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "bedfile",
            "annofile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy', pattern: '*.anno') }"
        ],
        "when": "",
        "stub": ""
    },
    "runStrawberry": {
        "name_process": "runStrawberry",
        "string_process": "\nprocess runStrawberry {\n\n  tag { id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(id), path(bam_alignment)\n\n  output:\n  tuple val(id), path(\"${id}.strawberry.gtf\")\n\n  \"\"\"\n  /home/strawberry/bin/strawberry -p ${task.cpus} ${params.EXTRAPARS} -o ${id}.strawberry.gtf ${bam_alignment}\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  /home/strawberry/bin/strawberry -p ${task.cpus} ${params.EXTRAPARS} -o ${id}.strawberry.gtf ${bam_alignment}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "bam_alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "demultiplex": {
        "name_process": "demultiplex",
        "string_process": "\nprocess demultiplex {\n    tag { idfile }\n    label (params.LABEL)\n\n    container params.CONTAINER\n             \n    input:\n    tuple val(idfile), path(fast5), path(models)\n\n    output:\n\ttuple val(idfile), path(\"${idfile}_demux.tsv\"), emit: demux_files\n \n    script:  \n    \"\"\"\t\n    \tdeeplexicon_sub.py dmux ${params.EXTRAPARS} -p ./ > ${idfile}_demux.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\t\n    \tdeeplexicon_sub.py dmux ${params.EXTRAPARS} -p ./ > ${idfile}_demux.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idfile",
            "fast5",
            "models"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { idfile }",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "fastQC": {
        "name_process": "fastQC",
        "string_process": "\nprocess fastQC {\n    tag \"${fastq}\"\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(fastq)\n\n    output:\n    path(\"*_fastqc.*\") \n\n    script:\n\t\"\"\"\n\tfastqc -t ${task.cpus} ${fastq} \n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\tfastqc -t ${task.cpus} ${fastq} \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${fastq}\"",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "fastQC2": {
        "name_process": "fastQC2",
        "string_process": "\nprocess fastQC2 {\n    tag \"${fastq}\"\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(id), path(fastq)\n\n    output:\n    tuple val(id), path(\"*_fastqc.*\") \n\n    script:\n\t\"\"\"\n\tfastqc -t ${task.cpus} ${fastq} \n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\tfastqc -t ${task.cpus} ${fastq} \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "id",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${fastq}\"",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "filter": {
        "name_process": "filter",
        "string_process": "\nprocess filter {\n    tag { idfile }\n    label (params.LABEL)\n    if (params.OUTPUT != \"\") {publishDir(params.OUTPUT, mode: 'copy') }\n\n    container params.CONTAINER\n             \n    input:\n    tuple val(idfile), path(fastq)\n \n    \n    output:\n    tuple val(idfile), path(\"*-filt.fastq*\")\n\n    script:\n    def output = \"${idfile}-filt.fastq.gz\"\n\t\"\"\"\n\t\tnanoq -i ${fastq} ${params.EXTRAPARS} -O g -o ${output}\n\t\"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "    def output = \"${idfile}-filt.fastq.gz\"\n\t\"\"\"\n\t\tnanoq -i ${fastq} ${params.EXTRAPARS} -O g -o ${output}\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idfile",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "idfile"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { idfile }",
            "label (params.LABEL) if (params.OUTPUT != \"\") {publishDir(params.OUTPUT, mode: 'copy') }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "sortAln": {
        "name_process": "sortAln",
        "string_process": "\nprocess sortAln {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}_s.bam\") \n    \n\tscript:\n    \"\"\"    \n    samtools sort -@ ${task.cpus} ${params.EXTRAPARS} -o ${pair_id}_s.bam  ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"    \n    samtools sort -@ ${task.cpus} ${params.EXTRAPARS} -o ${pair_id}_s.bam  ${reads}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }"
        ],
        "when": "",
        "stub": ""
    },
    "indexBam": {
        "name_process": "indexBam",
        "string_process": "\nprocess indexBam {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"*.bai\") \n    \n\tscript:\n    \"\"\"    \n    samtools index ${params.EXTRAPARS} ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"    \n    samtools index ${params.EXTRAPARS} ${reads}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }"
        ],
        "when": "",
        "stub": ""
    },
    "catAln": {
        "name_process": "catAln",
        "string_process": "\nprocess catAln {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"*_cat.bam\") \n    \n\tscript:\n    \"\"\"    \n    samtools cat ${params.EXTRAPARS} -o ${pair_id}_cat.bam ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"    \n    samtools cat ${params.EXTRAPARS} -o ${pair_id}_cat.bam ${reads}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }"
        ],
        "when": "",
        "stub": ""
    },
    "viewBam": {
        "name_process": "viewBam",
        "string_process": "\nprocess viewBam {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}_f.bam\") \n    \n\tscript:\n    \"\"\"    \n\tsamtools view -@ ${task.cpus} ${params.EXTRAPARS} ${reads} > ${pair_id}_f.bam\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"    \n\tsamtools view -@ ${task.cpus} ${params.EXTRAPARS} ${reads} > ${pair_id}_f.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }"
        ],
        "when": "",
        "stub": ""
    },
    "statBam": {
        "name_process": "statBam",
        "string_process": "\nprocess statBam {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.stat\") \n    \n\tscript:\n    \"\"\"    \n\tsamtools flagstat -@ ${params.EXTRAPARS} ${reads} > ${pair_id}.stat\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"    \n\tsamtools flagstat -@ ${params.EXTRAPARS} ${reads} > ${pair_id}.stat\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:params.OUTPUTMODE) }"
        ],
        "when": "",
        "stub": ""
    },
    "peakCall": {
        "name_process": "peakCall",
        "string_process": "\nprocess peakCall {\n    label (params.LABEL)\n    tag { comp_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(comp_id), path(sample), path(input)\n    val(gsize)\n\n    output:\n    tuple val(comp_id), path(\"${comp_id}_peaks.narrowPeak\"), optional: true, emit: narrowPeaks\n    tuple val(comp_id), path(\"${comp_id}_peaks.xls\"), emit: xlsPeaks\n    tuple val(comp_id), path(\"${comp_id}_summits.bed\"), optional: true,  emit: bedSummits\n    tuple val(comp_id), path(\"${comp_id}_peaks.gappedPeak\"), optional: true, emit: gappedPeaks\n    tuple val(comp_id), path(\"${comp_id}_peaks.broadPeak\"), optional: true, emit: broadPeaks\n    \n\tscript:\n\n    \"\"\"\n    macs2 callpeak ${params.EXTRAPARS} -t ${sample} -c ${input} -g ${gsize} -n ${comp_id} --fix-bimodal\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    macs2 callpeak ${params.EXTRAPARS} -t ${sample} -c ${input} -g ${gsize} -n ${comp_id} --fix-bimodal\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "comp_id",
            "sample",
            "input",
            "gsize"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { comp_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "kraken2_build": {
        "name_process": "kraken2_build",
        "string_process": "\nprocess kraken2_build {\n\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  val(groups)\n  val(dbname)\n\n  output:\n  path(dbname)\n\n  script:\n  \"\"\"\n  kraken2-build --download-taxonomy --db ${dbname}\n  orgs=${groups}\n  for o in \\${orgs//,/ }\n  do\n          kraken2-build --download-library \\$o --db ${dbname}\n          sleep 30\n  done\n  kraken2-build --build --db ${dbname}\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  kraken2-build --download-taxonomy --db ${dbname}\n  orgs=${groups}\n  for o in \\${orgs//,/ }\n  do\n          kraken2-build --download-library \\$o --db ${dbname}\n          sleep 30\n  done\n  kraken2-build --build --db ${dbname}\n\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "groups",
            "dbname"
        ],
        "nb_inputs": 2,
        "outputs": [
            "dbname"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "kraken2": {
        "name_process": "kraken2",
        "string_process": "\nprocess kraken2 {\n\n  tag { pair_id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(pair_id), path(reads)\n  path(database)\n\n  output:\n  path(\"kraken2*.report\"), emit: report\n  path(\"kraken2*.out\"), emit: output\n  path(\"cfs*.fq.gz\"), emit: classified\n  path(\"ucfs*.fq.gz\"), emit: unclassified\n\n  script:\n  \"\"\"\n  mode=\"\"\n  if [[ \"${reads}\" = *\" \"* ]]; then\n    mode=\"--paired\"\n  fi\n  kraken2 --db ${database} --report kraken2_${pair_id}.report --threads ${task.cpus} \\${mode} ${reads} --classified-out cfs_${pair_id}#.fq --unclassified-out ucfs_${pair_id}#.fq ${params.EXTRAPARS} > kraken2_${pair_id}.out\n  gzip *.fq\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  mode=\"\"\n  if [[ \"${reads}\" = *\" \"* ]]; then\n    mode=\"--paired\"\n  fi\n  kraken2 --db ${database} --report kraken2_${pair_id}.report --threads ${task.cpus} \\${mode} ${reads} --classified-out cfs_${pair_id}#.fq --unclassified-out ucfs_${pair_id}#.fq ${params.EXTRAPARS} > kraken2_${pair_id}.out\n  gzip *.fq\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "database"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pair_id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "addGeneNames": {
        "name_process": "addGeneNames",
        "string_process": "\nprocess addGeneNames {\n    label (params.LABEL)\n    tag { id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(id), path(anno)\n    path(annofile)\n\n    output:\n    tuple val(id), path(\"*_g.anno\"), emit: g_anno\n    tuple val(id), path(\"*.stats\"), emit:  stats\n    \n\tscript:\n    \"\"\"\n    addGeneNameToHomer.pl -g ${annofile} -a ${anno} -o ${id}_g.anno\n    awk -F \"\\\\t\" '{split(\\$8,a,\" \"); if (a[1]!=\"Annotation\") {print a[1]}}' ${id}_g.anno |sort |uniq -c| awk -v file=${id} 'BEGIN{print \"Features\\\\t\"file}{print \\$2\"\\\\t\"\\$1}' > ${id}.anno.stats \n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    addGeneNameToHomer.pl -g ${annofile} -a ${anno} -o ${id}_g.anno\n    awk -F \"\\\\t\" '{split(\\$8,a,\" \"); if (a[1]!=\"Annotation\") {print a[1]}}' ${id}_g.anno |sort |uniq -c| awk -v file=${id} 'BEGIN{print \"Features\\\\t\"file}{print \\$2\"\\\\t\"\\$1}' > ${id}.anno.stats \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "anno",
            "annofile"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "makeAnnoReport": {
        "name_process": "makeAnnoReport",
        "string_process": "\nprocess makeAnnoReport {\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(anno_vals)\n\n    output:\n \tfile(\"peak_anno_stats_mqc.txt\")\n    \n\tscript:\n    \"\"\"\n    makePeakAnnoReport.pl -ext .anno.stats -o peak_anno_stats_mqc.txt\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    makePeakAnnoReport.pl -ext .anno.stats -o peak_anno_stats_mqc.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "anno_vals"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "geneidtrainer": {
        "name_process": "geneidtrainer",
        "string_process": "\nprocess geneidtrainer {\n\n  tag { id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(species), path(gff), path(fasta), val(reduced), path(userdata)\n\n  output:\n  tuple val(species), path(\"${species}.geneid.optimized.param\")\n\n  script:\n  \"\"\"\n  REDUCED=no\n  USERDATA=\"\"\n  if [ ! -z \"${reduced}\" ]\n  then\n    REDUCED=${reduced}\n  fi\n  if [ ! -z \"${userdata}\" ]\n  then\n    USERDATA=\"--userdata ${userdata}\"\n  fi\n\n  /scripts/geneidTRAINer4docker.pl -species ${species} -gff ${gff} -fastas ${fasta} -reduced \\$REDUCED \\$USERDATA -results ${params.OUTPUT} ${params.EXTRAPARS}\n  \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "  \"\"\"\n  REDUCED=no\n  USERDATA=\"\"\n  if [ ! -z \"${reduced}\" ]\n  then\n    REDUCED=${reduced}\n  fi\n  if [ ! -z \"${userdata}\" ]\n  then\n    USERDATA=\"--userdata ${userdata}\"\n  fi\n\n  /scripts/geneidTRAINer4docker.pl -species ${species} -gff ${gff} -fastas ${fasta} -reduced \\$REDUCED \\$USERDATA -results ${params.OUTPUT} ${params.EXTRAPARS}\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "species",
            "reduced",
            "gff",
            "fasta",
            "userdata"
        ],
        "nb_inputs": 5,
        "outputs": [
            "species"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "runClassTranscripts": {
        "name_process": "runClassTranscripts",
        "string_process": "\nprocess runClassTranscripts {\n\n  tag { id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(id), path(bam_alignment)\n\n  output:\n  tuple val(id), path(\"${id}.class.gtf\")\n\n  \"\"\"\n  perl /usr/local/src/CLASS/run_class.pl -a ${bam_alignment} -o ${id}.class.gtf -p ${task.cpus} --verbose\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  perl /usr/local/src/CLASS/run_class.pl -a ${bam_alignment} -o ${id}.class.gtf -p ${task.cpus} --verbose\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "bam_alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "seqClean": {
        "name_process": "seqClean",
        "string_process": "\nprocess seqClean {\n\n  tag { id }\n  label (params.LABEL)\n\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(id), path(fasta)\n  path(filterfasta)\n\n  output:\n  path(\"${id}.cln\"), emit: cln\n  path(\"${id}.cidx\"), emit: cidx\n  path(\"${id}.clean\"), emit: clean\n\n  \"\"\"\n  export USER=\\$(id -u -n)\n  /usr/local/src/PASApipeline/bin/seqclean ${fasta} -v ${filterfasta} -c ${task.cpus} ${params.EXTRAPARS}\n  \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n  export USER=\\$(id -u -n)\n  /usr/local/src/PASApipeline/bin/seqclean ${fasta} -v ${filterfasta} -c ${task.cpus} ${params.EXTRAPARS}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fasta",
            "filterfasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "importMySQLPasa": {
        "name_process": "importMySQLPasa",
        "string_process": "\nprocess importMySQLPasa {\n\n  label (params.LABEL)\n\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n\tinput:\n\tpath(pasaconffilegeneral)\n  path(dbparams)\n  path(pasaschema)\n\n\toutput:\n\tpath(\"conftxt.new\")\n\n\t\"\"\"\n  source ${dbparams}\n\tmysql -u\\${dbuser} -p\\${dbpass} -h\\${dbhost} -P\\${dbport} -e \"DROP DATABASE IF EXISTS \\${dbname}; CREATE DATABASE \\${dbname};\"\n\tmysql -u\\${dbuser} -p\\${dbpass} \\${dbname} -h\\${dbhost} -P\\${dbport} < ${pasaschema} > done_mysql\n\n \t# Simple modification. This would need more love\n \tcp ${pasaconffilegeneral} conftxt.new\n\tsed -i '/^MYSQLSERVER=/d' conftxt.new\n\techo \"MYSQLSERVER=\\${dbhost}:\\${dbport}\" >> conftxt.new\n\t\"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n  source ${dbparams}\n\tmysql -u\\${dbuser} -p\\${dbpass} -h\\${dbhost} -P\\${dbport} -e \"DROP DATABASE IF EXISTS \\${dbname}; CREATE DATABASE \\${dbname};\"\n\tmysql -u\\${dbuser} -p\\${dbpass} \\${dbname} -h\\${dbhost} -P\\${dbport} < ${pasaschema} > done_mysql\n\n \t# Simple modification. This would need more love\n \tcp ${pasaconffilegeneral} conftxt.new\n\tsed -i '/^MYSQLSERVER=/d' conftxt.new\n\techo \"MYSQLSERVER=\\${dbhost}:\\${dbport}\" >> conftxt.new\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pasaconffilegeneral",
            "dbparams",
            "pasaschema"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "runPASA": {
        "name_process": "runPASA",
        "string_process": "\nprocess runPASA {\n\n  label (params.LABEL)\n\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  path(relatedfasta)\n  path(genome)\n  path(seqclean_idx)\n  path(seqclean_clean)\n  path(seqclean_cln)\n  path(model_gtf_file)\n  path(pasaconffiledb)\n  path(conftxt)                       \n  val(pasamode)\n\n  output:\n  path(\"pasa*\"), emit: pasa_files\n  path(\"*assemblies.fasta\"), emit: pasa_fasta\n  path(\"*assemblies.gff3\"), emit: pasa_gff3\n\n  if ( workflow.containerEngine == \"singularity\" ) {\n    containerOptions \"--bind ./conftxt.new:/usr/local/src/PASApipeline/pasa_conf/conf.txt\"\n  } else {\n    containerOptions \"--volume ./conftxt.new:/usr/local/src/PASApipeline/pasa_conf/conf.txt\"\n  }\n\n\t\"\"\"\n /usr/local/src/PASApipeline/Launch_PASA_pipeline.pl -c ${pasaconffiledb} \\\n -R -g ${genome} -t ${seqclean_clean} -T -u ${relatedfasta} \\\n --trans_gtf ${model_gtf_file} --ALIGNERS ${pasamode} --TRANSDECODER --CPU ${task.cpus}\n\t\"\"\"\n\n}",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n /usr/local/src/PASApipeline/Launch_PASA_pipeline.pl -c ${pasaconffiledb} \\\n -R -g ${genome} -t ${seqclean_clean} -T -u ${relatedfasta} \\\n --trans_gtf ${model_gtf_file} --ALIGNERS ${pasamode} --TRANSDECODER --CPU ${task.cpus}\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "relatedfasta",
            "genome",
            "seqclean_idx",
            "seqclean_clean",
            "seqclean_cln",
            "model_gtf_file",
            "pasaconffiledb",
            "conftxt",
            "pasamode"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "generatePASAtrainingSet": {
        "name_process": "generatePASAtrainingSet",
        "string_process": "\nprocess generatePASAtrainingSet {\n\n  tag { pasa_assemblies_fasta }\n  label (params.LABEL)\n\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  path(pasa_assemblies_fasta)\n  path(pasa_assemblies_gff3)\n  path(conftxt)                       \n\n  output:\n  path(\"*.transdecoder.gff3\"), emit: transdecoder_gff3\n  path(\"*.transdecoder.pep\"), emit: transdecoder_pep\n\n  if ( workflow.containerEngine == \"singularity\" ) {\n    containerOptions \"--bind ./conftxt.new:/usr/local/src/PASApipeline/pasa_conf/conf.txt\"\n  } else {\n    containerOptions \"--volume ./conftxt.new:/usr/local/src/PASApipeline/pasa_conf/conf.txt\"\n  }\n\n  \"\"\"\n  /usr/local/src/PASApipeline/scripts/pasa_asmbls_to_training_set.dbi --pasa_transcripts_fasta ${pasa_assemblies_fasta} --pasa_transcripts_gff3 ${pasa_assemblies_gff3} --single_best_only\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n  /usr/local/src/PASApipeline/scripts/pasa_asmbls_to_training_set.dbi --pasa_transcripts_fasta ${pasa_assemblies_fasta} --pasa_transcripts_gff3 ${pasa_assemblies_gff3} --single_best_only\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pasa_assemblies_fasta",
            "pasa_assemblies_gff3",
            "conftxt"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pasa_assemblies_fasta }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "calcVarFrequencies": {
        "name_process": "calcVarFrequencies",
        "string_process": "\nprocess calcVarFrequencies {\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy', pattern: '*.csv.gz') }\n\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${sampleID}\" \n \t\n    input:\n    tuple val(sampleID), path(tsvfile)\n    \n    output:\n    tuple val(sampleID), path(\"*.tsv.per.site.var.csv.gz\"), emit: per_site_vars\n    tuple val(sampleID), path(\"*.csv.gz\"), emit: all_vars\n    \n    script:\n\t\"\"\"\n\tTSV_to_Variants_Freq.py3 -f ${tsvfile} -t ${task.cpus}\n\tfor i in *.csv; do gzip \\$i; done\n\t\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\t\"\"\"\n\tTSV_to_Variants_Freq.py3 -f ${tsvfile} -t ${task.cpus}\n\tfor i in *.csv; do gzip \\$i; done\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleID",
            "tsvfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${sampleID}\""
        ],
        "when": "",
        "stub": ""
    },
    "de": {
        "name_process": "de",
        "string_process": "\nprocess de {\n    label (params.LABEL)\n    tag { comp_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(comp_id), path(peaks), path(input_untreated), path(ip_untreated), path(input_treated), path(ip_treated)\n    path(annofile)\n    val(read_size)\n    val(frag_len)\n    \n\n    output:\n    tuple val(comp_id), path(\"${comp_id}_deq_results.txt\"), emit: deq_res\n    \n\tscript:\n  def input_untreated_r = \"c(\\'${input_untreated.join('\\',\\'')}\\')\"\n  def ip_untreated_r = \"c(\\'${ip_untreated.join('\\',\\'')}\\')\"\n  def input_treated_r = \"c(\\'${input_treated.join('\\',\\'')}\\')\"\n  def ip_treated_r = \"c(\\'${ip_treated.join('\\',\\'')}\\')\"\n  def outfile = \"\\'${comp_id}_deq_results.txt\\'\"\n  def gtffile = \"\\'${annofile}\\'\"\n  def peaksfile = \"\\'${peaks}\\'\"\n  def cmd = \"input.bams, ip.bams, treated.input.bams, treated.ip.bams, peak.files, gtf, outfi = out, readlen = ${read_size}, fraglen = ${frag_len}, nthreads = ${task.cpus}\"\n  if (params.EXTRAPARS != \"\") {\n    cmd = \"${cmd}, ${params.EXTRAPARS}\"\n  }\n     \"\"\" \n    Rscript -e \"library('deq') \n    input.bams <- ${input_untreated_r}\n    ip.bams <- ${ip_untreated_r}\n    treated.input.bams <- ${input_treated_r}\n    treated.ip.bams <- ${ip_treated_r}\n    peak.files <- ${peaksfile}\n    gtf <- ${gtffile}\n    out <- ${outfile}\n    deq(${cmd})\"\n\n     \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "  def input_untreated_r = \"c(\\'${input_untreated.join('\\',\\'')}\\')\"\n  def ip_untreated_r = \"c(\\'${ip_untreated.join('\\',\\'')}\\')\"\n  def input_treated_r = \"c(\\'${input_treated.join('\\',\\'')}\\')\"\n  def ip_treated_r = \"c(\\'${ip_treated.join('\\',\\'')}\\')\"\n  def outfile = \"\\'${comp_id}_deq_results.txt\\'\"\n  def gtffile = \"\\'${annofile}\\'\"\n  def peaksfile = \"\\'${peaks}\\'\"\n  def cmd = \"input.bams, ip.bams, treated.input.bams, treated.ip.bams, peak.files, gtf, outfi = out, readlen = ${read_size}, fraglen = ${frag_len}, nthreads = ${task.cpus}\"\n  if (params.EXTRAPARS != \"\") {\n    cmd = \"${cmd}, ${params.EXTRAPARS}\"\n  }\n     \"\"\" \n    Rscript -e \"library('deq') \n    input.bams <- ${input_untreated_r}\n    ip.bams <- ${ip_untreated_r}\n    treated.input.bams <- ${input_treated_r}\n    treated.ip.bams <- ${ip_treated_r}\n    peak.files <- ${peaksfile}\n    gtf <- ${gtffile}\n    out <- ${outfile}\n    deq(${cmd})\"\n\n     \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GTfold",
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/gtfold",
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "GTfold",
                "uri": "https://bio.tools/gtfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0271",
                                    "term": "Structure prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "GTfold is a fast, scalable multicore code for predicting RNA secondary structure that is one to two orders of magnitude faster than the de facto standard programs and achieves comparable accuracy of prediction.",
                "homepage": "http://gtfold.sourceforge.net/"
            },
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "comp_id",
            "peaks",
            "input_untreated",
            "ip_untreated",
            "input_treated",
            "ip_treated",
            "annofile",
            "read_size",
            "frag_len"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { comp_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "estimateBinSize": {
        "name_process": "estimateBinSize",
        "string_process": "\nprocess estimateBinSize {\n    tag { \"${genomefile}\" }\n    \n    label (params.LABEL)\n    container params.CONTAINER\n\n    input:\n    path(genomefile)\n    path(bamfiles)\n    path(indexes)\n\n    output:\n    stdout\n \n \tscript:\n \tdef unzip_data = unzipCmd(genomefile)\n \tdef cmd = unzip_data[1]\n \tdef fname = unzip_data[0]\n    \"\"\"\n    ${cmd}\n\tcnvkit.py access ${fname} -s 10000 -o access-10kb.bed\n\tcnvkit.py autobin *.bam -m wgs -b 50000 -g access-10kb.bed > stats.txt\n\tcat stats.txt | tail -n 1|cut -f 3 \n    \"\"\"    \n}",
        "nb_lignes_process": 24,
        "string_script": " \tdef unzip_data = unzipCmd(genomefile)\n \tdef cmd = unzip_data[1]\n \tdef fname = unzip_data[0]\n    \"\"\"\n    ${cmd}\n\tcnvkit.py access ${fname} -s 10000 -o access-10kb.bed\n\tcnvkit.py autobin *.bam -m wgs -b 50000 -g access-10kb.bed > stats.txt\n\tcat stats.txt | tail -n 1|cut -f 3 \n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomefile",
            "bamfiles",
            "indexes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { \"${genomefile}\" }",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "doIndexWGS_UCSC_NONORM": {
        "name_process": "doIndexWGS_UCSC_NONORM",
        "string_process": "\nprocess doIndexWGS_UCSC_NONORM {\n    tag { genomefile }\n    label (params.LABEL)\n    container params.CONTAINER\n\n    input:\n    path(genomefile)\n    path(annotation)\n    val(breaksize)\n\n    output:\n    path(\"reference\") \n \n \tscript:\n \tdef unzip_data = unzipCmd(genomefile)\n \tdef cmd = unzip_data[1]\n \tdef fname = unzip_data[0]\n    \"\"\"\t\n    ${cmd}\n    cnvkit.py batch ${params.EXTRAPARS_IND} --target-avg-size ${breaksize} --annotate ${annotation} -m wgs -n -f ${fname} -d reference\n    grep \"chr\" reference/reference.cnn > reference/reference2.cnn\n    mv reference/reference.cnn reference/reference.cnn.ori\n    mv reference/reference2.cnn reference/reference.cnn\n    \"\"\"    \n}",
        "nb_lignes_process": 24,
        "string_script": " \tdef unzip_data = unzipCmd(genomefile)\n \tdef cmd = unzip_data[1]\n \tdef fname = unzip_data[0]\n    \"\"\"\t\n    ${cmd}\n    cnvkit.py batch ${params.EXTRAPARS_IND} --target-avg-size ${breaksize} --annotate ${annotation} -m wgs -n -f ${fname} -d reference\n    grep \"chr\" reference/reference.cnn > reference/reference2.cnn\n    mv reference/reference.cnn reference/reference.cnn.ori\n    mv reference/reference2.cnn reference/reference.cnn\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomefile",
            "annotation",
            "breaksize"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { genomefile }",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "doIndexWGS_UCSC": {
        "name_process": "doIndexWGS_UCSC",
        "string_process": "\nprocess doIndexWGS_UCSC {\n    tag { genomefile }\n    label (params.LABEL)\n    container params.CONTAINER\n\n    input:\n    path(genomefile)\n    path(annotation)\n    path(norm_samples)\n    val(breaksize)\n  \n\n    output:\n    path(\"reference\") \n \n \tscript:\n \tdef unzip_data = unzipCmd(genomefile)\n \tdef cmd = unzip_data[1]\n \tdef fname = unzip_data[0]\n \tdef normals = norm_samples.join(' ')\n    \"\"\"\t\n    ${cmd}\n    cnvkit.py batch ${params.EXTRAPARS_IND} --target-avg-size ${breaksize} --annotate ${annotation} --segment-method hmm -m wgs -n ${normals} -f ${fname} -d reference\n    grep \"chr\" reference/reference.cnn > reference/reference2.cnn\n    mv reference/reference.cnn reference/reference.cnn.ori\n    mv reference/reference2.cnn reference/reference.cnn\n    \"\"\"    \n}",
        "nb_lignes_process": 27,
        "string_script": " \tdef unzip_data = unzipCmd(genomefile)\n \tdef cmd = unzip_data[1]\n \tdef fname = unzip_data[0]\n \tdef normals = norm_samples.join(' ')\n    \"\"\"\t\n    ${cmd}\n    cnvkit.py batch ${params.EXTRAPARS_IND} --target-avg-size ${breaksize} --annotate ${annotation} --segment-method hmm -m wgs -n ${normals} -f ${fname} -d reference\n    grep \"chr\" reference/reference.cnn > reference/reference2.cnn\n    mv reference/reference.cnn reference/reference.cnn.ori\n    mv reference/reference2.cnn reference/reference.cnn\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomefile",
            "annotation",
            "norm_samples",
            "breaksize"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { genomefile }",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "doCNV": {
        "name_process": "doCNV",
        "string_process": "\nprocess doCNV {\n    tag { pair_id }\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(reference)\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}_out/${pair_id}.cns\"), path(\"${pair_id}_out/${pair_id}.cnr\") \n \n \tscript:\n    \"\"\"\t\n    cnvkit.py batch ${params.EXTRAPARS} --segment-method hmm -m wgs -d ${pair_id}_out -r ${reference}/reference.cnn ${reads}\n    mv ${pair_id}_out/`basename ${reads} .bam`.cns ${pair_id}_out/${pair_id}.cns \n    mv ${pair_id}_out/`basename ${reads} .bam`.cnr ${pair_id}_out/${pair_id}.cnr \n    \"\"\"    \n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\t\n    cnvkit.py batch ${params.EXTRAPARS} --segment-method hmm -m wgs -d ${pair_id}_out -r ${reference}/reference.cnn ${reads}\n    mv ${pair_id}_out/`basename ${reads} .bam`.cns ${pair_id}_out/${pair_id}.cns \n    mv ${pair_id}_out/`basename ${reads} .bam`.cnr ${pair_id}_out/${pair_id}.cnr \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reference",
            "pair_id",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pair_id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "plotDiagram": {
        "name_process": "plotDiagram",
        "string_process": "\nprocess plotDiagram {\n    tag { pair_id }\n    label (params.LABEL)\n    container params.CONTAINER\n    publishDir(params.OUTPUT, mode:'copy')\n\n    input:\n    tuple val(pair_id), path(cnsfile), path(cnrfile)\n\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.diag.pdf\") \n \n \tscript:\n    \"\"\"\t\n\tcnvkit.py diagram  -s ${cnsfile} ${cnrfile} -o ${pair_id}.diag.pdf\n    \"\"\"    \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\t\n\tcnvkit.py diagram  -s ${cnsfile} ${cnrfile} -o ${pair_id}.diag.pdf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "cnsfile",
            "cnrfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pair_id }",
            "label (params.LABEL)",
            "container params.CONTAINER",
            "publishDir(params.OUTPUT, mode:'copy')"
        ],
        "when": "",
        "stub": ""
    },
    "plotScatter": {
        "name_process": "plotScatter",
        "string_process": "\nprocess plotScatter {\n    tag { pair_id }\n    label (params.LABEL)\n    container params.CONTAINER\n    publishDir(params.OUTPUT, mode:'copy')\n\n    input:\n    tuple val(pair_id), path(cnsfile), path(cnrfile)\n\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.scatter.pdf\") \n \n \tscript:\n    \"\"\"\t\n\tcnvkit.py scatter  -s ${cnsfile} ${cnrfile} -o ${pair_id}.scatter.pdf\n    \"\"\"    \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\t\n\tcnvkit.py scatter  -s ${cnsfile} ${cnrfile} -o ${pair_id}.scatter.pdf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "cnsfile",
            "cnrfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pair_id }",
            "label (params.LABEL)",
            "container params.CONTAINER",
            "publishDir(params.OUTPUT, mode:'copy')"
        ],
        "when": "",
        "stub": ""
    },
    "calcBreaks": {
        "name_process": "calcBreaks",
        "string_process": "\nprocess calcBreaks {\n    tag { pair_id }\n    label (params.LABEL)\n    container params.CONTAINER\n    publishDir(params.OUTPUT, mode:'copy')\n\n    input:\n    tuple val(pair_id), path(cnsfile), path(cnrfile)\n\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}.breaks.txt\") \n \n \tscript:\n    \"\"\"\t\n    cnvkit.py breaks ${cnrfile} ${cnsfile} > ${pair_id}.breaks.txt\n    \"\"\"    \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\t\n    cnvkit.py breaks ${cnrfile} ${cnsfile} > ${pair_id}.breaks.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "cnsfile",
            "cnrfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { pair_id }",
            "label (params.LABEL)",
            "container params.CONTAINER",
            "publishDir(params.OUTPUT, mode:'copy')"
        ],
        "when": "",
        "stub": ""
    },
    "MOP_nanoPlot": {
        "name_process": "MOP_nanoPlot",
        "string_process": "\nprocess MOP_nanoPlot {\n    tag { id }\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n   \n    input:\n    tuple val(id), path(bamfile)\n\n    output:\n    tuple val(id), path(\"*_plot/*\"), emit: plots optional true\n    tuple val(id), path(\"${id}_stats_mqc.png\"), emit: pngs optional true \n    \n    script:\n    \"\"\"\n    NanoPlot --bam ${bamfile} -o ${id}_plot --maxlength 5000 -t ${task.cpus}\n    mkdir tmp_dir\n    cp ${id}_plot/PercentIdentityvsAverageBaseQuality_kde.png tmp_dir\n    cp ${id}_plot/LengthvsQualityScatterPlot_dot.png tmp_dir\n    cp ${id}_plot/HistogramReadlength.png tmp_dir \n    cp ${id}_plot/Weighted_HistogramReadlength.png tmp_dir\n    gm montage tmp_dir/*.png -tile 2x2 -geometry 800x800 ${id}_stats_mqc.png\n    rm -fr tmp_dir\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    NanoPlot --bam ${bamfile} -o ${id}_plot --maxlength 5000 -t ${task.cpus}\n    mkdir tmp_dir\n    cp ${id}_plot/PercentIdentityvsAverageBaseQuality_kde.png tmp_dir\n    cp ${id}_plot/LengthvsQualityScatterPlot_dot.png tmp_dir\n    cp ${id}_plot/HistogramReadlength.png tmp_dir \n    cp ${id}_plot/Weighted_HistogramReadlength.png tmp_dir\n    gm montage tmp_dir/*.png -tile 2x2 -geometry 800x800 ${id}_stats_mqc.png\n    rm -fr tmp_dir\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "IgM"
        ],
        "tools_url": [
            "https://bio.tools/IgM"
        ],
        "tools_dico": [
            {
                "name": "IgM",
                "uri": "https://bio.tools/IgM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0804",
                            "term": "Immunology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Biomarkers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Diagnostic markers"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Diagnostic Profiling of the Human Public IgM Repertoire With Scalable Mimotope Libraries.\n\nGENERATING AND TESTING MIMOTOPE LIBRARIES.\n\nProof of pricniple diagnostic use with feature selection and predictor construction.\n\ncomparison between IgM reactivity with different peptide libraries.",
                "homepage": "https://github.com/ansts/IgMimoPap1"
            }
        ],
        "inputs": [
            "id",
            "bamfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "HtseqCount": {
        "name_process": "HtseqCount",
        "string_process": "\nprocess HtseqCount {\n    tag \"${id}\"\n    label (params.LABEL)\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern:'*.counts', mode:'copy') }\n   \n   \n    input:\n    path(annotation_file)\n    tuple val(id), path(bamfile), path(indexfile)\n    val(doanno)\n\n    output:\n    tuple val(id), path(\"${id}.counts\"), emit: counts\n    tuple val(id), path(\"${id}_anno.bam\"), emit: bam optional true\n  \n\tscript:    \n\tdef anno = unzipNamedPipe(annotation_file)\n\tdef annopar = \"\"\n\tif (doanno==\"yes\") {\n\t\tannopar = \"-p bam -o ${id}_anno.bam\"\n\t} \n\t\"\"\"\n\t    htseq-count ${annopar} ${params.EXTRAPARS} -n ${task.cpus} ${bamfile} ${anno} > ${id}.counts\n\t\"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\tdef anno = unzipNamedPipe(annotation_file)\n\tdef annopar = \"\"\n\tif (doanno==\"yes\") {\n\t\tannopar = \"-p bam -o ${id}_anno.bam\"\n\t} \n\t\"\"\"\n\t    htseq-count ${annopar} ${params.EXTRAPARS} -n ${task.cpus} ${bamfile} ${anno} > ${id}.counts\n\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation_file",
            "id",
            "bamfile",
            "indexfile",
            "doanno"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${id}\"",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, pattern:'*.counts', mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "getReadLen": {
        "name_process": "getReadLen",
        "string_process": "\nprocess getReadLen {\n    tag { fastq }\n    label (params.LABEL)\n\n    input:\n    path(fastq)\n\n    output:\n\tstdout()\n\n\n    script:\n\t\"\"\"\n       if [ `echo ${fastq} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${fastq} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", sum/100; exit} }'\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n       if [ `echo ${fastq} | grep \"gz\"` ]; then cat=\"zcat\"; else cat=\"cat\"; fi\n        \\$cat ${fastq} | awk '{num++}{if (num%4==2){line++; sum+=length(\\$0)} if (line==100) {printf \"%.0f\", sum/100; exit} }'\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { fastq }",
            "label (params.LABEL)"
        ],
        "when": "",
        "stub": ""
    },
    "estimateTailSize": {
        "name_process": "estimateTailSize",
        "string_process": "\nprocess estimateTailSize {\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy', pattern: '*.csv.gz') }\n\n    container params.CONTAINER\n    label (params.LABEL)\n    tag \"${sampleID}\" \n \t\n\tinput:\n\ttuple val(sampleID), path(fast5)\n\n\toutput:\n\ttuple val(sampleID), path(\"*_findr.csv.gz\") \n\n\tscript:\n\t\"\"\"\n\tR --vanilla --slave -e \"library(tailfindr); find_tails(fast5_dir = './' , save_dir = './', ${params.EXTRAPARS}, csv_filename = \\'${sampleID}_findr.csv\\', num_cores = ${task.cpus})\"\n\tgzip *_findr.csv\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\t\"\"\"\n\tR --vanilla --slave -e \"library(tailfindr); find_tails(fast5_dir = './' , save_dir = './', ${params.EXTRAPARS}, csv_filename = \\'${sampleID}_findr.csv\\', num_cores = ${task.cpus})\"\n\tgzip *_findr.csv\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleID",
            "fast5"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleID"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "container params.CONTAINER",
            "label (params.LABEL)",
            "tag \"${sampleID}\""
        ],
        "when": "",
        "stub": ""
    },
    "sortSamCoord": {
        "name_process": "sortSamCoord",
        "string_process": "\nprocess sortSamCoord {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}_s.bam\") \n    \n\tscript:\n\n    \"\"\"    \n\tpicard SortSam I=${reads} TMP_DIR=`pwd`/tmp O=${pair_id}_s.bam SORT_ORDER=coordinate\n\trm -fr tmp\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"    \n\tpicard SortSam I=${reads} TMP_DIR=`pwd`/tmp O=${pair_id}_s.bam SORT_ORDER=coordinate\n\trm -fr tmp\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "markDuplicates": {
        "name_process": "markDuplicates",
        "string_process": "\nprocess markDuplicates {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(pair_id), path(reads)\n\tval(remove)\n\n    output:\n    tuple val(pair_id), path(\"${pair_id}_dedup.bam\") \n    \n\n\tscript:\n    def remove_cmd = \"\"\n    if (remove == \"remove\") {\n    \tremove_cmd = \"REMOVE_SEQUENCING_DUPLICATES=TRUE\"\n    }     \n    \"\"\"    \n\tpicard MarkDuplicates ${params.EXTRAPARS} TMP_DIR=`pwd`/tmp ${remove_cmd} I=${reads} O=${pair_id}_dedup.bam M=${pair_id}.dupmet.txt \n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    def remove_cmd = \"\"\n    if (remove == \"remove\") {\n    \tremove_cmd = \"REMOVE_SEQUENCING_DUPLICATES=TRUE\"\n    }     \n    \"\"\"    \n\tpicard MarkDuplicates ${params.EXTRAPARS} TMP_DIR=`pwd`/tmp ${remove_cmd} I=${reads} O=${pair_id}_dedup.bam M=${pair_id}.dupmet.txt \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "remove"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pair_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "sortBed": {
        "name_process": "sortBed",
        "string_process": "\nprocess sortBed {\n    label (params.LABEL)\n    tag { id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(id), path(input)\n\n    output:\n\ttuple val(id), path(\"${id}_sorted.bed\")\n    \n\tscript:\n    \"\"\"\n\tbedtools sort -i ${input} ${params.EXTRAPARS} > ${id}_sorted.bed\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n\tbedtools sort -i ${input} ${params.EXTRAPARS} > ${id}_sorted.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "id",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "mergeBed": {
        "name_process": "mergeBed",
        "string_process": "\nprocess mergeBed {\n    label (params.LABEL)\n    tag { id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(id), path(input)\n\n    output:\n\ttuple val(id), path(\"${id}_merged.bed\")\n    \n\tscript:\n    \"\"\"\n\tbedtools sort -i ${input} | bedtools merge ${params.EXTRAPARS} -i - > ${id}_merged.bed\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n\tbedtools sort -i ${input} | bedtools merge ${params.EXTRAPARS} -i - > ${id}_merged.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "id",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "concatBed": {
        "name_process": "concatBed",
        "string_process": "\nprocess concatBed {\n    label (params.LABEL)\n    tag { id }\n    container params.CONTAINER\n\n    input:\n    tuple val(id), path(input)\n\n    output:\n\ttuple val(id), path(\"${id}_concat.bed\")\n    \n\tscript:\n    \"\"\"\n\tcat ${input} | awk '{OFS=\"\\t\"; print \\$1,\\$2,\\$3,\\$4,\\$5,\\$6}' > ${id}_concat.bed\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n\tcat ${input} | awk '{OFS=\"\\t\"; print \\$1,\\$2,\\$3,\\$4,\\$5,\\$6}' > ${id}_concat.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "multiInter": {
        "name_process": "multiInter",
        "string_process": "\nprocess multiInter {\n    label (params.LABEL)\n    tag { id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(id), path(input)\n\n    output:\n\ttuple val(id), path(\"${id}_multiinter.bed\")\n    \n\tscript:\n    \"\"\"\n\tbedtools multiinter ${params.EXTRAPARS} -header -i ${input} > ${id}_multiinter.bed\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n\tbedtools multiinter ${params.EXTRAPARS} -header -i ${input} > ${id}_multiinter.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "id",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "runStringtie": {
        "name_process": "runStringtie",
        "string_process": "\nprocess runStringtie {\n\n  tag { id }\n  label (params.LABEL)\n  container params.CONTAINER\n  if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n  input:\n  tuple val(id), path(bam_alignment)\n\n  output:\n  tuple val(id), path(\"${id}.stringtie.gtf\")\n\n  \"\"\"\n  stringtie ${bam_alignment} ${params.EXTRAPARS} --rf -p ${task.cpus} -v -o ${id}.stringtie.gtf\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  stringtie ${bam_alignment} ${params.EXTRAPARS} --rf -p ${task.cpus} -v -o ${id}.stringtie.gtf\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "id",
            "bam_alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag { id }",
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "resquiggle_rna": {
        "name_process": "resquiggle_rna",
        "string_process": "\nprocess resquiggle_rna {\n    tag \"${idsample}\"\n    label (params.LABEL)\n    container params.CONTAINER\n                                                                                           \n\t\n    input:\n    tuple val(idsample), path(fast5_folder)\n    path(reference)\n    \n    output:\n    tuple val(idsample), path (\"*.resquiggle.failed.tsv\"), emit: failed_resquiggles\n    tuple val(idsample), path  (\".*.tombo.index\"), emit: tombo_indexes\n\n    script:    \n    \"\"\" \n    # resquiggling\n    tombo resquiggle ${params.EXTRAPARS} ${fast5_folder} ${reference} --rna --processes ${task.cpus} --overwrite --failed-reads-filename ${idsample}.resquiggle.failed.tsv \n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\" \n    # resquiggling\n    tombo resquiggle ${params.EXTRAPARS} ${fast5_folder} ${reference} --rna --processes ${task.cpus} --overwrite --failed-reads-filename ${idsample}.resquiggle.failed.tsv \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idsample",
            "fast5_folder",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${idsample}\"",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "getModificationsWithModelSampleCompare": {
        "name_process": "getModificationsWithModelSampleCompare",
        "string_process": "\nprocess getModificationsWithModelSampleCompare {\n     tag \"${idA} vs ${idB}\"\n\n    label (params.LABEL)\n\tcontainer params.CONTAINER\n                                                                                         \n            \n    input:\n    tuple val(idA), val(idB), path(indexA), path(fast5_dirA), path(indexB), path(fast5_dirB)\n    file(reference)\n    \n    output:\n    tuple val(\"${idA}---${idB}\"), path(\"*.bedgraph.gz\"), emit: bedgraphs\n\ttuple val(\"${idA}---${idB}\"), path(\"*.wig.gz\"), emit:  dampened_wiggles\n \n    script:\n\t\"\"\"\n\tmkdir ${idA} ${idB}\n\tmv ${fast5_dirA} ${indexA} ${idA}\n\tmv ${fast5_dirB} ${indexB} ${idB}\n\t\n    tombo detect_modifications model_sample_compare ${params.EXTRAPARS} --fast5-basedirs ${idA}/* \\\n       --control-fast5-basedirs ${idB}/* \\\n       --processes ${task.cpus} ${params.EXTRAPARS} \\\n       --statistics-file-basename ${idA}_vs_${idB}_model_sample_compare\n      \n    tombo text_output browser_files --fast5-basedirs ${idA}/* \\\n       --control-fast5-basedirs ${idB}/* \\\n       --browser-file-basename ${idA}_vs_${idB}.features \\\n       --statistics-filename ${idA}_vs_${idB}_model_sample_compare.tombo.stats \\\n       --file-types 'dampened_fraction' 'coverage'\n    \n    for i in *.{bedgraph,wig,stats}; do gzip \\$i; done \n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\t\"\"\"\n\tmkdir ${idA} ${idB}\n\tmv ${fast5_dirA} ${indexA} ${idA}\n\tmv ${fast5_dirB} ${indexB} ${idB}\n\t\n    tombo detect_modifications model_sample_compare ${params.EXTRAPARS} --fast5-basedirs ${idA}/* \\\n       --control-fast5-basedirs ${idB}/* \\\n       --processes ${task.cpus} ${params.EXTRAPARS} \\\n       --statistics-file-basename ${idA}_vs_${idB}_model_sample_compare\n      \n    tombo text_output browser_files --fast5-basedirs ${idA}/* \\\n       --control-fast5-basedirs ${idB}/* \\\n       --browser-file-basename ${idA}_vs_${idB}.features \\\n       --statistics-filename ${idA}_vs_${idB}_model_sample_compare.tombo.stats \\\n       --file-types 'dampened_fraction' 'coverage'\n    \n    for i in *.{bedgraph,wig,stats}; do gzip \\$i; done \n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idA",
            "idB",
            "indexA",
            "fast5_dirA",
            "indexB",
            "fast5_dirB",
            "reference"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${idA} vs ${idB}\"",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "getModificationsWithLevelSampleCompare": {
        "name_process": "getModificationsWithLevelSampleCompare",
        "string_process": "\nprocess getModificationsWithLevelSampleCompare {\n    tag \"${idA} vs ${idB}\"\n\n    label (params.LABEL)\n\tcontainer params.CONTAINER\n                                                                                         \n            \n    input:\n    tuple val(idA), val(idB), path(indexA), path(fast5_dirA), path(indexB), path(fast5_dirB)\n    file(reference)\n    \n    output:\n    tuple val(\"${idA}---${idB}\"), path(\"*.bedgraph.gz\"), emit: bedgraphs\n\ttuple val(\"${idA}---${idB}\"), path(\"*.wig.gz\"), emit: dampened_wiggles\n    \n    script:\n\t\"\"\"\n\tmkdir ${idA} ${idB}\n\tmv ${fast5_dirA} ${indexA} ${idA}\n\tmv ${fast5_dirB} ${indexB} ${idB}\n\t\n    tombo detect_modifications level_sample_compare ${params.EXTRAPARS} --fast5-basedirs ${idA}/* \\\n       --alternate-fast5-basedirs ${idB}/* \\\n       --processes ${task.cpus} ${params.EXTRAPARS} \\\n       --statistics-file-basename ${idA}_vs_${idB}_level_sample_compare\n      \n    tombo text_output browser_files --fast5-basedirs ${idA}/* \\\n       --control-fast5-basedirs ${idB}/* \\\n       --browser-file-basename ${idA}_vs_${idB}.features \\\n       --statistics-filename ${idA}_vs_${idB}_level_sample_compare.tombo.stats \\\n       --file-types {'coverage','statistic'}\n       \n    for i in *.{bedgraph,wig,stats}; do gzip \\$i; done \n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\t\"\"\"\n\tmkdir ${idA} ${idB}\n\tmv ${fast5_dirA} ${indexA} ${idA}\n\tmv ${fast5_dirB} ${indexB} ${idB}\n\t\n    tombo detect_modifications level_sample_compare ${params.EXTRAPARS} --fast5-basedirs ${idA}/* \\\n       --alternate-fast5-basedirs ${idB}/* \\\n       --processes ${task.cpus} ${params.EXTRAPARS} \\\n       --statistics-file-basename ${idA}_vs_${idB}_level_sample_compare\n      \n    tombo text_output browser_files --fast5-basedirs ${idA}/* \\\n       --control-fast5-basedirs ${idB}/* \\\n       --browser-file-basename ${idA}_vs_${idB}.features \\\n       --statistics-filename ${idA}_vs_${idB}_level_sample_compare.tombo.stats \\\n       --file-types {'coverage','statistic'}\n       \n    for i in *.{bedgraph,wig,stats}; do gzip \\$i; done \n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "idA",
            "idB",
            "indexA",
            "fast5_dirA",
            "indexB",
            "fast5_dirB",
            "reference"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "tag \"${idA} vs ${idB}\"",
            "label (params.LABEL)",
            "container params.CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "trimWithSkewer": {
        "name_process": "trimWithSkewer",
        "string_process": "\nprocess trimWithSkewer {\n    label (params.LABEL)\n    tag { pair_id }\n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    tuple val(pair_id), path(reads)\n\n    output:\n    tuple val(pair_id), path(\"*trimmed*.fastq.gz\"), emit: trimmed_reads\n    path \"*trimmed.log\", emit: trim_log\n    \n    \"\"\"\n    skewer ${params.EXTRAPARS} -t ${task.cpus} -n -u -o ${pair_id} -z ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    skewer ${params.EXTRAPARS} -t ${task.cpus} -n -u -o ${pair_id} -z ${reads}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Skewer"
        ],
        "tools_url": [
            "https://bio.tools/skewer"
        ],
        "tools_dico": [
            {
                "name": "Skewer",
                "uri": "https://bio.tools/skewer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3237",
                                    "term": "Primer removal"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Sequence read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Skewer implements a novel dynamic programming algorithm dedicated to the task of adapter trimming and it is specially designed for processing illumina paired-end sequences.",
                "homepage": "https://sourceforge.net/projects/skewer/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "tag { pair_id }",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    },
    "makePeakReport": {
        "name_process": "makePeakReport",
        "string_process": "\nprocess makePeakReport {\n    label (params.LABEL)\n    \n    container params.CONTAINER\n    if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }\n\n    input:\n    path(input)\n\t\n    output:\n\tpath(\"peak_stats_mqc.txt\")\n\t\n    script:\n    \"\"\"\necho '# id: peakcall\n# plot_type: bargraph\n# section_name: Peak calling statistics\n# description: Number of peaks\nFilename\tpeaks' > peak_stats_mqc.txt;\n\tfor i in `ls ${input}`; do wc -l \\$i | awk '{print \\$2\"\\\\t\"\\$1}' | sed s/_peaks\\\\.bed//g >> peak_stats_mqc.txt; done\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\necho '# id: peakcall\n# plot_type: bargraph\n# section_name: Peak calling statistics\n# description: Number of peaks\nFilename\tpeaks' > peak_stats_mqc.txt;\n\tfor i in `ls ${input}`; do wc -l \\$i | awk '{print \\$2\"\\\\t\"\\$1}' | sed s/_peaks\\\\.bed//g >> peak_stats_mqc.txt; done\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "biocorecrg__BioNextflow",
        "directive": [
            "label (params.LABEL)",
            "container params.CONTAINER if (params.OUTPUT != \"\") { publishDir(params.OUTPUT, mode:'copy') }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "createHisat2index": {
        "name_process": "createHisat2index",
        "string_process": "\nprocess createHisat2index {\n\n    input:\n    path rawGenomePath from \"$params.rawGenomePath\"\n\n    when:\n    params.createIndexes == true && params.jf_only == false\n\n    script:\n    \"\"\"\n    hisat2-build ${rawGenomePath} ${params.genome_index}\n    mkdir -p \"${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\"\n    cp *.ht2 ${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    hisat2-build ${rawGenomePath} ${params.genome_index}\n    mkdir -p \"${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\"\n    cp *.ht2 ${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "\"$params"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.createIndexes == true && params.jf_only == false",
        "stub": ""
    },
    "collectHisat2index": {
        "name_process": "collectHisat2index",
        "string_process": "\nprocess collectHisat2index {\n\n    input:\n    path hisat2index from Channel.fromPath(\"${params.genomeIndexPath}/${params.genome_index}/*.ht2\").collect()\n\n    output:\n    val \"done\" into hiast2IndexProcess_collected\n    path hisat2index into hs2_indices_collected, hs2_indices_collected_duplicate\n\n    when:\n    params.createIndexes == false\n\n    script:\n    \"\"\"\n    echo $hisat2index\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    echo $hisat2index\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "hiast2IndexProcess_collected",
            "hs2_indices_collected",
            "hs2_indices_collected_duplicate"
        ],
        "nb_outputs": 3,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.createIndexes == false",
        "stub": ""
    },
    "createJellyfishIndex": {
        "name_process": "createJellyfishIndex",
        "string_process": "\nprocess createJellyfishIndex {\n\n    input:\n    path rawGenomePath from \"$params.rawGenomePath\"\n    path buildJellyfishIndexes from \"$projectDir/helperScripts/buildJellyfishIndexes.sh\"\n\n    when:\n    params.createIndexes == true\n\n    script:\n    \"\"\"\n    bash ${buildJellyfishIndexes} ${params.l} ${params.L} ${params.genome_index} ${rawGenomePath}\n    mkdir -p \"${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\"\n    cp *.jf ${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    bash ${buildJellyfishIndexes} ${params.l} ${params.L} ${params.genome_index} ${rawGenomePath}\n    mkdir -p \"${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\"\n    cp *.jf ${projectDir}/UPLOAD_HERE/genome_index/${params.genome_index}/\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "\"$params",
            "\"$projectDir/helperScripts/buildJellyfishIndexes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.createIndexes == true",
        "stub": ""
    },
    "collectJellyfishindex": {
        "name_process": "collectJellyfishindex",
        "string_process": "\nprocess collectJellyfishindex {\n\n    input:\n    path jellyfishIndex from Channel.fromPath(\"${params.genomeIndexPath}/${params.genome_index}/*.jf\").collect()\n\n    output:\n    val \"done\" into jellyfishIndexProcess_collected\n    path jellyfishIndex into jellyfish_indices_collected, jellyfish_indices_collected_duplicate\n\n    when:\n    params.createIndexes == false\n\n    script:\n    \"\"\"\n    echo $jellyfishIndex\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    echo $jellyfishIndex\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "jellyfishIndexProcess_collected",
            "jellyfish_indices_collected",
            "jellyfish_indices_collected_duplicate"
        ],
        "nb_outputs": 3,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.createIndexes == false",
        "stub": ""
    },
    "blockParse": {
        "name_process": "blockParse",
        "string_process": "\nprocess blockParse {\n\n    input:\n    val hisat2indexDone from hiast2IndexProcess_collected\n    val jellyfishIndexDone from jellyfishIndexProcess_collected\n    path blockParseScript from \"$projectDir/OligoMiner/blockParse.py\"\n    path inFile from \"${params.inFilePath}\"\n\n    output:\n    path \"${params.name}_blockparse.fastq\" into blockparseProcess, blockparseProcess_count, blockparseProcess_unfiltered\n\n    script:\n    if( params.overlapMode == \"no\" )\n      \"\"\"\n      python ${blockParseScript}\\\n        -f ${inFile}\\\n        -o ${params.name}_blockparse\\\n        -l ${params.l}\\\n        -L ${params.L}\\\n        --Spacing ${params.spacing}\\\n        -F ${params.F}\\\n        -s ${params.s}\\\n        -g ${params.g}\\\n        -G ${params.G}\\\n        -t ${params.t}\\\n        -T ${params.T}\\\n        --header chr1:10000000-10050000\n        \"\"\"\n\n    else if( params.overlapMode == \"yes\" )\n      \"\"\"\n      python ${blockParseScript}\\\n        -f ${inFile}\\\n        -o ${params.name}_blockparse\\\n        -l ${params.l}\\\n        -L ${params.L}\\\n        --Spacing ${params.spacing}\\\n        -F ${params.F}\\\n        -s ${params.s}\\\n        -g ${params.g}\\\n        -G ${params.G}\\\n        -t ${params.t}\\\n        -T ${params.T}\\\n        --header chr1:10000000-10050000\\\n        --OverlapMode\n      \"\"\"\n\n    else\n      exit 1, \"Invalid alignment mode: ${params.overlapMode}\"\n\n}",
        "nb_lignes_process": 50,
        "string_script": "    if( params.overlapMode == \"no\" )\n      \"\"\"\n      python ${blockParseScript}\\\n        -f ${inFile}\\\n        -o ${params.name}_blockparse\\\n        -l ${params.l}\\\n        -L ${params.L}\\\n        --Spacing ${params.spacing}\\\n        -F ${params.F}\\\n        -s ${params.s}\\\n        -g ${params.g}\\\n        -G ${params.G}\\\n        -t ${params.t}\\\n        -T ${params.T}\\\n        --header chr1:10000000-10050000\n        \"\"\"\n\n    else if( params.overlapMode == \"yes\" )\n      \"\"\"\n      python ${blockParseScript}\\\n        -f ${inFile}\\\n        -o ${params.name}_blockparse\\\n        -l ${params.l}\\\n        -L ${params.L}\\\n        --Spacing ${params.spacing}\\\n        -F ${params.F}\\\n        -s ${params.s}\\\n        -g ${params.g}\\\n        -G ${params.G}\\\n        -t ${params.t}\\\n        -T ${params.T}\\\n        --header chr1:10000000-10050000\\\n        --OverlapMode\n      \"\"\"\n\n    else\n      exit 1, \"Invalid alignment mode: ${params.overlapMode}\"",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hiast2IndexProcess_collected",
            "jellyfishIndexProcess_collected",
            "\"$projectDir/OligoMiner/blockParse",
            "\"${params"
        ],
        "nb_inputs": 4,
        "outputs": [
            "blockparseProcess",
            "blockparseProcess_count",
            "blockparseProcess_unfiltered"
        ],
        "nb_outputs": 3,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "countInitialProbes": {
        "name_process": "countInitialProbes",
        "string_process": "\nprocess countInitialProbes {\n\n    input:\n    path \"${params.name}_blockparse.fastq\" from blockparseProcess_count\n\n    output:\n    stdout result into InitialNprobesProcess\n\n    script:\n    \"\"\"\n    initNprobes=\\$(grep -c \"@\" ${params.name}_blockparse.fastq)\n    echo \"Number of probes found: \\${initNprobes}\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    initNprobes=\\$(grep -c \"@\" ${params.name}_blockparse.fastq)\n    echo \"Number of probes found: \\${initNprobes}\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blockparseProcess_count"
        ],
        "nb_inputs": 1,
        "outputs": [
            "InitialNprobesProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "outputUnfiltered": {
        "name_process": "outputUnfiltered",
        "string_process": "\nprocess outputUnfiltered {\n\n    input:\n    path \"${params.name}_blockparse.fastq\" from blockparseProcess_unfiltered\n\n    output:\n    path \"${params.name}_unfiltered.fasta\" into unfilteredProbesEndo, unfilteredProbesExo\n\n    script:\n\n    if (params.outputUnfiltered == true)\n      \"\"\"\n      fastq_to_fasta\\\n        -r\\\n        -i ${params.name}_blockparse.fastq\\\n        -o ${params.name}_unfiltered_wrongOrientation.fasta\n      fastx_reverse_complement\\\n        -i ${params.name}_unfiltered_wrongOrientation.fasta\\\n        -o ${params.name}_unfiltered.fasta\n      \"\"\"\n\n    else\n      \"\"\"\n      touch ${params.name}_unfiltered.fasta\n      \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    if (params.outputUnfiltered == true)\n      \"\"\"\n      fastq_to_fasta\\\n        -r\\\n        -i ${params.name}_blockparse.fastq\\\n        -o ${params.name}_unfiltered_wrongOrientation.fasta\n      fastx_reverse_complement\\\n        -i ${params.name}_unfiltered_wrongOrientation.fasta\\\n        -o ${params.name}_unfiltered.fasta\n      \"\"\"\n\n    else\n      \"\"\"\n      touch ${params.name}_unfiltered.fasta\n      \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blockparseProcess_unfiltered"
        ],
        "nb_inputs": 1,
        "outputs": [
            "unfilteredProbesEndo",
            "unfilteredProbesExo"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "initial_mapping": {
        "name_process": "initial_mapping",
        "string_process": "\nprocess initial_mapping {\n\n    input:\n    path \"${params.name}_blockparse.fastq\" from blockparseProcess\n    path hs2_indices from hs2_indices_collected.collect()\n\n\n    output:\n    path \"${params.name}_hisat2.sam\" into initialMappingProcess_endo, initialMappingProcess_exo\n\n    script:\n    \"\"\"\n    hisat2\\\n      -x ${params.genome_index}\\\n      -U ${params.name}_blockparse.fastq\\\n      -S ${params.name}_hisat2.sam\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    hisat2\\\n      -x ${params.genome_index}\\\n      -U ${params.name}_blockparse.fastq\\\n      -S ${params.name}_hisat2.sam\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blockparseProcess",
            "hs2_indices_collected"
        ],
        "nb_inputs": 2,
        "outputs": [
            "initialMappingProcess_endo",
            "initialMappingProcess_exo"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "filteringEndo": {
        "name_process": "filteringEndo",
        "string_process": "\nprocess filteringEndo {\n\n    input:\n    path outputCleanScript from \"$projectDir/OligoMiner/outputClean.py\"\n    path \"${params.name}_hisat2.sam\" from initialMappingProcess_endo\n\n    output:\n    path \"${params.name}_cleaned.bed\" into outputCleanProcessEndo\n\n    when:\n    params.mode == \"endo\"\n\n    script:\n    \"\"\"\n    samtools view -q 60 ${params.name}_hisat2.sam  > ${params.name}_cleaned_temp.sam\n\n    python ${outputCleanScript}\\\n      -F ${params.F}\\\n      -f ${params.name}_cleaned_temp.sam\\\n      -o ${params.name}_cleaned\\\n      -u\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    samtools view -q 60 ${params.name}_hisat2.sam  > ${params.name}_cleaned_temp.sam\n\n    python ${outputCleanScript}\\\n      -F ${params.F}\\\n      -f ${params.name}_cleaned_temp.sam\\\n      -o ${params.name}_cleaned\\\n      -u\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "\"$projectDir/OligoMiner/outputClean",
            "initialMappingProcess_endo"
        ],
        "nb_inputs": 2,
        "outputs": [
            "outputCleanProcessEndo"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.mode == \"endo\"",
        "stub": ""
    },
    "filteringExo": {
        "name_process": "filteringExo",
        "string_process": "\nprocess filteringExo {\n\n    input:\n    path outputCleanScript from \"$projectDir/OligoMiner/outputClean.py\"\n    path \"${params.name}_hisat2.sam\" from initialMappingProcess_exo\n\n    output:\n    path \"${params.name}_cleaned.bed\" into outputCleanProcessExo\n\n    when:\n    params.mode == \"exo\"\n\n    script:\n    \"\"\"\n    samtools view -f 4 ${params.name}_hisat2.sam  > ${params.name}_cleaned_temp.sam\n\n    python ${outputCleanScript}\\\n      -F ${params.F}\\\n      -f ${params.name}_cleaned_temp.sam\\\n      -o ${params.name}_cleaned\\\n      --zero\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    samtools view -f 4 ${params.name}_hisat2.sam  > ${params.name}_cleaned_temp.sam\n\n    python ${outputCleanScript}\\\n      -F ${params.F}\\\n      -f ${params.name}_cleaned_temp.sam\\\n      -o ${params.name}_cleaned\\\n      --zero\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "\"$projectDir/OligoMiner/outputClean",
            "initialMappingProcess_exo"
        ],
        "nb_inputs": 2,
        "outputs": [
            "outputCleanProcessExo"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.mode == \"exo\"",
        "stub": ""
    },
    "checkStrand": {
        "name_process": "checkStrand",
        "string_process": "\nprocess checkStrand {\n\n  input:\n    path \"${params.name}_cleaned.bed\" from outputCleanProcessEndo.mix(outputCleanProcessExo)\n    path probeRCScript from \"$projectDir/OligoMiner/probeRC.py\"\n\n  output:\n    path \"${params.name}_strandChecked.bed\" into checkStrandProcess\n\n  script:\n    if (((params.strand == \"+\" || params.strand == \"plus\") & params.mode == \"endo\") || params.mode == \"exo\")\n      \"\"\"\n      python ${probeRCScript}\\\n        -f ${params.name}_cleaned.bed\\\n        -o ${params.name}_strandChecked\n      \"\"\"\n\n    else\n      \"\"\"\n      cp ${params.name}_cleaned.bed ${params.name}_strandChecked.bed\n      \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    if (((params.strand == \"+\" || params.strand == \"plus\") & params.mode == \"endo\") || params.mode == \"exo\")\n      \"\"\"\n      python ${probeRCScript}\\\n        -f ${params.name}_cleaned.bed\\\n        -o ${params.name}_strandChecked\n      \"\"\"\n\n    else\n      \"\"\"\n      cp ${params.name}_cleaned.bed ${params.name}_strandChecked.bed\n      \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputCleanProcessEndo",
            "outputCleanProcessExo",
            "\"$projectDir/OligoMiner/probeRC"
        ],
        "nb_inputs": 3,
        "outputs": [
            "checkStrandProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "kmerFilter": {
        "name_process": "kmerFilter",
        "string_process": "\nprocess kmerFilter {\n\n    input:\n    path \"${params.name}_strandChecked.bed\" from checkStrandProcess\n    path kmerFilterScript from \"$projectDir/OligoMiner/kmerFilter.py\"\n    path jfDict from jellyfish_indices_collected.collect()\n\n    output:\n    path \"${params.name}_kmerFilter.bed\" into kmerFilterProcess\n\n    shell:\n  \t'''\n  \tfor i in `seq !{params.l} !{params.L}`; do \\\n      python !{kmerFilterScript}\\\n        -f !{params.name}_strandChecked.bed\\\n        -m $i\\\n        -j \"!{projectDir}/genomes/indexes/!{params.genome_index}/!{params.genome_index}_$i.jf\"\\\n        -k 4 -o !{params.name}_kmerFilter_$i; \\\n    done\n    awk '{print}' *_kmerFilter_*.bed | sort -u | grep . > !{params.name}_kmerFilter.bed\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "  \t'''\n  \tfor i in `seq !{params.l} !{params.L}`; do \\\n      python !{kmerFilterScript}\\\n        -f !{params.name}_strandChecked.bed\\\n        -m $i\\\n        -j \"!{projectDir}/genomes/indexes/!{params.genome_index}/!{params.genome_index}_$i.jf\"\\\n        -k 4 -o !{params.name}_kmerFilter_$i; \\\n    done\n    awk '{print}' *_kmerFilter_*.bed | sort -u | grep . > !{params.name}_kmerFilter.bed\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "checkStrandProcess",
            "\"$projectDir/OligoMiner/kmerFilter",
            "jellyfish_indices_collected"
        ],
        "nb_inputs": 3,
        "outputs": [
            "kmerFilterProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "structureCheck": {
        "name_process": "structureCheck",
        "string_process": "\nprocess structureCheck {\n\n    input:\n    path \"${params.name}_kmerFilter.bed\" from kmerFilterProcess\n    path structureCheckScript from \"$projectDir/OligoMiner/structureCheck.py\"\n\n    output:\n    path \"${params.name}_structureCheck.bed\" into structureCheckProcessFastq, structureCheckProcessFasta\n\n    script:\n    \"\"\"\n    python ${structureCheckScript}\\\n      -f ${params.name}_kmerFilter.bed\\\n      -o ${params.name}_structureCheck\\\n      -t 0.05\\\n      -F ${params.F}\\\n      --hybTemp ${params.hybrTemp}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    python ${structureCheckScript}\\\n      -f ${params.name}_kmerFilter.bed\\\n      -o ${params.name}_structureCheck\\\n      -t 0.05\\\n      -F ${params.F}\\\n      --hybTemp ${params.hybrTemp}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kmerFilterProcess",
            "\"$projectDir/OligoMiner/structureCheck"
        ],
        "nb_inputs": 2,
        "outputs": [
            "structureCheckProcessFastq",
            "structureCheckProcessFasta"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "bed2fasta": {
        "name_process": "bed2fasta",
        "string_process": "\nprocess bed2fasta {\n\n    input:\n    path \"${params.name}_structureCheck.bed\" from structureCheckProcessFasta\n    path bed2FastaScript from \"$projectDir/helperScripts/customBed2Fasta.py\"\n\n    output:\n    path \"${params.name}_finalProbes.fasta\" into bed2fastaProcessEndoZip, bed2fastaProcessExoZip, bed2fastaProcessExoAlign, bed2fastaProcessRevCompl, bed2fastaProcessTm, bed2fastaProcessTab\n\n    script:\n    \"\"\"\n    python ${bed2FastaScript}\\\n      -f \"${params.name}_structureCheck.bed\"\\\n      -o \"${params.name}_finalProbes\"\\\n      --header \"${params.name}\"\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    python ${bed2FastaScript}\\\n      -f \"${params.name}_structureCheck.bed\"\\\n      -o \"${params.name}_finalProbes\"\\\n      --header \"${params.name}\"\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "structureCheckProcessFasta",
            "\"$projectDir/helperScripts/customBed2Fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bed2fastaProcessEndoZip",
            "bed2fastaProcessExoZip",
            "bed2fastaProcessExoAlign",
            "bed2fastaProcessRevCompl",
            "bed2fastaProcessTm",
            "bed2fastaProcessTab"
        ],
        "nb_outputs": 6,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fasta2tab": {
        "name_process": "fasta2tab",
        "string_process": "\nprocess fasta2tab {\n\n    input:\n    path \"${params.name}_finalProbes.fasta\" from bed2fastaProcessTab\n\n    output:\n    path \"${params.name}_oder.tab\" into fasta2tabEndoZip, fasta2tabExoZip\n\n    script:\n    \"\"\"\n    seqkit fx2tab ${params.name}_finalProbes.fasta > ${params.name}_oder.tab\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    seqkit fx2tab ${params.name}_finalProbes.fasta > ${params.name}_oder.tab\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed2fastaProcessTab"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fasta2tabEndoZip",
            "fasta2tabExoZip"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "bed2fastq": {
        "name_process": "bed2fastq",
        "string_process": "\nprocess bed2fastq {\n\n    input:\n    path \"${params.name}_structureCheck.bed\" from structureCheckProcessFastq\n    path bedToFastqScript from \"$projectDir/OligoMiner/bedToFastq.py\"\n\n    output:\n    path \"${params.name}_finalProbes.fastq\" into finalFastqProcessMapping, finalFastqProcessCount\n\n    script:\n    \"\"\"\n    python ${bedToFastqScript}\\\n      -f ${params.name}_structureCheck.bed\\\n      -o ${params.name}_finalProbes\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    python ${bedToFastqScript}\\\n      -f ${params.name}_structureCheck.bed\\\n      -o ${params.name}_finalProbes\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "structureCheckProcessFastq",
            "\"$projectDir/OligoMiner/bedToFastq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "finalFastqProcessMapping",
            "finalFastqProcessCount"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "countFinalProbes": {
        "name_process": "countFinalProbes",
        "string_process": "\nprocess countFinalProbes {\n\n    input:\n    path \"${params.name}_finalProbes.fastq\" from finalFastqProcessCount\n\n    output:\n    stdout result into FinalNprobesProcess\n\n    script:\n    \"\"\"\n    final_Nprobes=\\$(grep -c \"@\" ${params.name}_finalProbes.fastq)\n    echo \"Number of probes that passed all the filters: \\${final_Nprobes}\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    final_Nprobes=\\$(grep -c \"@\" ${params.name}_finalProbes.fastq)\n    echo \"Number of probes that passed all the filters: \\${final_Nprobes}\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "finalFastqProcessCount"
        ],
        "nb_inputs": 1,
        "outputs": [
            "FinalNprobesProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mappingFinalProbes": {
        "name_process": "mappingFinalProbes",
        "string_process": "\nprocess mappingFinalProbes {\n\n    input:\n    path \"${params.name}_finalProbes.fastq\" from finalFastqProcessMapping\n    path hs2_indices_duplicate from hs2_indices_collected_duplicate.collect()\n\n    output:\n    path \"${params.name}_finalProbes.sam\" into mappingFinalProcess\n\n    when:\n    params.mode == \"endo\"\n\n    script:\n    \"\"\"\n    hisat2\\\n      -x ${params.genome_index}\\\n      -U ${params.name}_finalProbes.fastq\\\n      -S ${params.name}_finalProbes.sam\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    hisat2\\\n      -x ${params.genome_index}\\\n      -U ${params.name}_finalProbes.fastq\\\n      -S ${params.name}_finalProbes.sam\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "finalFastqProcessMapping",
            "hs2_indices_collected_duplicate"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mappingFinalProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.mode == \"endo\"",
        "stub": ""
    },
    "sam2bam": {
        "name_process": "sam2bam",
        "string_process": "\nprocess sam2bam {\n\n    input:\n    path \"${params.name}_finalProbes.sam\" from mappingFinalProcess\n\n    output:\n    path \"${params.name}_finalProbes.bam\" into finalBamProcess\n\n    script:\n    \"\"\"\n    samtools view -Sb ${params.name}_finalProbes.sam > ${params.name}_finalProbes.bam\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    samtools view -Sb ${params.name}_finalProbes.sam > ${params.name}_finalProbes.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mappingFinalProcess"
        ],
        "nb_inputs": 1,
        "outputs": [
            "finalBamProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "sortBam": {
        "name_process": "sortBam",
        "string_process": "\nprocess sortBam {\n\n    input:\n    path \"${params.name}_finalProbes.bam\" from finalBamProcess\n\n    output:\n    path \"${params.name}_finalProbes_sorted.bam\" into alignment1ProcessSort, alignment1ProcessZip\n\n    script:\n    \"\"\"\n    samtools sort ${params.name}_finalProbes.bam > ${params.name}_finalProbes_sorted.bam\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    samtools sort ${params.name}_finalProbes.bam > ${params.name}_finalProbes_sorted.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "finalBamProcess"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alignment1ProcessSort",
            "alignment1ProcessZip"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "sortIndexBam": {
        "name_process": "sortIndexBam",
        "string_process": "\nprocess sortIndexBam {\n\n    input:\n    path \"${params.name}_finalProbes_sorted.bam\" from alignment1ProcessSort\n\n    output:\n    path \"${params.name}_finalProbes_sorted.bam.bai\" into alignment2Process\n\n    script:\n    \"\"\"\n    samtools index ${params.name}_finalProbes_sorted.bam\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    samtools index ${params.name}_finalProbes_sorted.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "alignment1ProcessSort"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alignment2Process"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "revComplement": {
        "name_process": "revComplement",
        "string_process": "\nprocess revComplement {\n\n    input:\n    path \"${params.name}_finalProbes.fasta\" from bed2fastaProcessRevCompl\n\n    output:\n    path \"${params.name}_finalProbes_revComplement.fasta\" into revComplEndo, revComplExo\n\n    script:\n    \"\"\"\n    fastx_reverse_complement\\\n      -i ${params.name}_finalProbes.fasta\\\n      -o ${params.name}_finalProbes_revComplement.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    fastx_reverse_complement\\\n      -i ${params.name}_finalProbes.fasta\\\n      -o ${params.name}_finalProbes_revComplement.fasta\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed2fastaProcessRevCompl"
        ],
        "nb_inputs": 1,
        "outputs": [
            "revComplEndo",
            "revComplExo"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "probeTm": {
        "name_process": "probeTm",
        "string_process": "\nprocess probeTm {\n\n    input:\n    path \"${params.name}_finalProbes.fasta\" from bed2fastaProcessTm\n    path probeTmScript from \"$projectDir/OligoMiner/probeTm.py\"\n\n    output:\n    path \"${params.name}_finalProbes_Tm.txt\" into probeTmEndo, probeTmExo\n\n    script:\n    \"\"\"\n    awk 'BEGIN{RS=\">\"}{print \"#\"\\$1\"\\t\"\\$2;}' ${params.name}_finalProbes.fasta |\\\n      tail -n+2 > ${params.name}_finalProbes.txt\n\n    python ${probeTmScript}\\\n      -f ${params.name}_finalProbes.txt\\\n      -F ${params.F}\\\n      -o ${params.name}_finalProbes_Tm\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    awk 'BEGIN{RS=\">\"}{print \"#\"\\$1\"\\t\"\\$2;}' ${params.name}_finalProbes.fasta |\\\n      tail -n+2 > ${params.name}_finalProbes.txt\n\n    python ${probeTmScript}\\\n      -f ${params.name}_finalProbes.txt\\\n      -F ${params.F}\\\n      -o ${params.name}_finalProbes_Tm\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed2fastaProcessTm",
            "\"$projectDir/OligoMiner/probeTm"
        ],
        "nb_inputs": 2,
        "outputs": [
            "probeTmEndo",
            "probeTmExo"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "makeLog": {
        "name_process": "makeLog",
        "string_process": "\nprocess makeLog {\n\n    input:\n    val initNprobes from InitialNprobesProcess\n    val finalNprobes from FinalNprobesProcess\n\n    output:\n    stdout result into makeLogProcessPrint\n    path \"${params.name}_log.txt\" into makeLogProcessEndo, makeLogProcessExo\n\n    script:\n    \"\"\"\n    touch ${params.name}_log.txt\n\n    run_date=\\$(date)\n\n    echo -e \"anglerFISH version 1.3\" >> ${params.name}_log.txt\n    echo -e \"Sequence name: ${params.name}\\n\" >> ${params.name}_log.txt\n    echo -e \"Date of run: \\$run_date \\n\" >> ${params.name}_log.txt\n    echo -e \"\\nParameters of the run:\\n\" >> \"${params.name}_log.txt\"\n    echo -e \"Type of sequence (endogenous / exogenous): ${params.mode}\\n\" >> ${params.name}_log.txt\n    echo -e \"Strand of the target RNA (for endogenous targets): ${params.strand}\\n\" >> ${params.name}_log.txt\n    echo -e \"Target organism genome: ${params.genome_index}\\n\" >> ${params.name}_log.txt\n    echo -e \"Min probe length, nt: ${params.l}\\n\" >> ${params.name}_log.txt\n    echo -e \"Max probe length, nt: ${params.L}\\n\" >> ${params.name}_log.txt\n    echo -e \"Probes spacing, nt: ${params.spacing}\\n\" >> ${params.name}_log.txt\n    echo -e \"Formamide concentration, %: ${params.F}\\n\" >> ${params.name}_log.txt\n    echo -e \"min GC content, %: ${params.g}\\n\" >> ${params.name}_log.txt\n    echo -e \"max GC content, %: ${params.G}\\n\" >> ${params.name}_log.txt\n    echo -e \"min Tm, degC: ${params.t}\\n\" >> ${params.name}_log.txt\n    echo -e \"max Tm, degC: ${params.T}\\n\" >> ${params.name}_log.txt\n    echo -e \"\\n${initNprobes}\\n\" >> ${params.name}_log.txt\n    echo -e \"${finalNprobes}\" >> ${params.name}_log.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    touch ${params.name}_log.txt\n\n    run_date=\\$(date)\n\n    echo -e \"anglerFISH version 1.3\" >> ${params.name}_log.txt\n    echo -e \"Sequence name: ${params.name}\\n\" >> ${params.name}_log.txt\n    echo -e \"Date of run: \\$run_date \\n\" >> ${params.name}_log.txt\n    echo -e \"\\nParameters of the run:\\n\" >> \"${params.name}_log.txt\"\n    echo -e \"Type of sequence (endogenous / exogenous): ${params.mode}\\n\" >> ${params.name}_log.txt\n    echo -e \"Strand of the target RNA (for endogenous targets): ${params.strand}\\n\" >> ${params.name}_log.txt\n    echo -e \"Target organism genome: ${params.genome_index}\\n\" >> ${params.name}_log.txt\n    echo -e \"Min probe length, nt: ${params.l}\\n\" >> ${params.name}_log.txt\n    echo -e \"Max probe length, nt: ${params.L}\\n\" >> ${params.name}_log.txt\n    echo -e \"Probes spacing, nt: ${params.spacing}\\n\" >> ${params.name}_log.txt\n    echo -e \"Formamide concentration, %: ${params.F}\\n\" >> ${params.name}_log.txt\n    echo -e \"min GC content, %: ${params.g}\\n\" >> ${params.name}_log.txt\n    echo -e \"max GC content, %: ${params.G}\\n\" >> ${params.name}_log.txt\n    echo -e \"min Tm, degC: ${params.t}\\n\" >> ${params.name}_log.txt\n    echo -e \"max Tm, degC: ${params.T}\\n\" >> ${params.name}_log.txt\n    echo -e \"\\n${initNprobes}\\n\" >> ${params.name}_log.txt\n    echo -e \"${finalNprobes}\" >> ${params.name}_log.txt\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "InitialNprobesProcess",
            "FinalNprobesProcess"
        ],
        "nb_inputs": 2,
        "outputs": [
            "makeLogProcessPrint",
            "makeLogProcessEndo",
            "makeLogProcessExo"
        ],
        "nb_outputs": 3,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "alignExo": {
        "name_process": "alignExo",
        "string_process": "\nprocess alignExo{\n\n    input:\n    path \"${params.name}_finalProbes.fasta\" from bed2fastaProcessExoAlign\n    path inFile from \"${params.inFilePath}\"\n\n\n    output:\n    path \"${params.name}_alignment.doc\" into alignExoProcess\n\n    when:\n    params.mode == \"exo\"\n\n    script:\n    \"\"\"\n    needle ${inFile} ${params.name}_finalProbes.fasta\\\n      -sreverse2\\\n      -outfile ${params.name}_alignment.doc\\\n      -gapopen 10\\\n      -gapextend 10\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    needle ${inFile} ${params.name}_finalProbes.fasta\\\n      -sreverse2\\\n      -outfile ${params.name}_alignment.doc\\\n      -gapopen 10\\\n      -gapextend 10\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "needle"
        ],
        "tools_url": [
            "https://bio.tools/needle"
        ],
        "tools_dico": [
            {
                "name": "needle",
                "uri": "https://bio.tools/needle",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2928",
                                    "term": "Alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2928",
                                    "term": "Alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2928",
                                    "term": "Alignment generation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Needleman-Wunsch global alignment of two sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/needle.html"
            }
        ],
        "inputs": [
            "bed2fastaProcessExoAlign",
            "\"${params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "alignExoProcess"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "params.mode == \"exo\"",
        "stub": ""
    },
    "createTempZip": {
        "name_process": "createTempZip",
        "string_process": "\nprocess createTempZip {\n    input:\n    path \"${params.name}_unfiltered.fasta\" from unfilteredProbesExo.mix(unfilteredProbesEndo)\n\n    output:\n    path \"./${params.outputName}.zip\" into temp_zip_endo, temp_zip_exo\n\n    script:\n    if (params.outputUnfiltered == true)\n      \"\"\"\n      zip ${params.outputName}.zip ${params.name}_unfiltered.fasta\n      \"\"\"\n\n    else\n      \"\"\"\n      touch foo.txt\n      zip ${params.outputName}.zip foo.txt\n      zip -d ${params.outputName}.zip foo.txt\n      \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    if (params.outputUnfiltered == true)\n      \"\"\"\n      zip ${params.outputName}.zip ${params.name}_unfiltered.fasta\n      \"\"\"\n\n    else\n      \"\"\"\n      touch foo.txt\n      zip ${params.outputName}.zip foo.txt\n      zip -d ${params.outputName}.zip foo.txt\n      \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unfilteredProbesExo",
            "unfilteredProbesEndo"
        ],
        "nb_inputs": 2,
        "outputs": [
            "temp_zip_endo",
            "temp_zip_exo"
        ],
        "nb_outputs": 2,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "zipOutFilesEndo": {
        "name_process": "zipOutFilesEndo",
        "string_process": "\nprocess zipOutFilesEndo {\n\n    publishDir \"${projectDir}/UPLOAD_HERE/results/\"\n\n    output:\n    path \"./${params.outputName}.zip\" into zip_endo\n\n    input:\n    path \"${params.name}_finalProbes_sorted.bam\" from alignment1ProcessZip\n    path \"${params.name}_finalProbes_sorted.bam.bai\" from alignment2Process\n    path \"${params.name}_finalProbes.fasta\" from bed2fastaProcessEndoZip\n    path \"${params.name}_oder.tab\" from fasta2tabEndoZip\n    path \"${params.name}_finalProbes_revComplement.fasta\" from revComplEndo\n    path \"${params.name}_finalProbes_Tm.txt\" from probeTmEndo\n    path \"${params.name}_log.txt\" from makeLogProcessEndo\n    path \"./${params.outputName}.zip\" from temp_zip_endo\n\n    when:\n    params.mode == \"endo\"\n\n    script:\n    \"\"\"\n    zip -u\\\n      ${params.outputName}.zip\\\n      ${params.name}_finalProbes_sorted.bam\\\n      ${params.name}_finalProbes_sorted.bam.bai\\\n      ${params.name}_finalProbes.fasta\\\n      ${params.name}_oder.tab\\\n      ${params.name}_finalProbes_revComplement.fasta\\\n      ${params.name}_finalProbes_Tm.txt\\\n      ${params.name}_log.txt\\\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    zip -u\\\n      ${params.outputName}.zip\\\n      ${params.name}_finalProbes_sorted.bam\\\n      ${params.name}_finalProbes_sorted.bam.bai\\\n      ${params.name}_finalProbes.fasta\\\n      ${params.name}_oder.tab\\\n      ${params.name}_finalProbes_revComplement.fasta\\\n      ${params.name}_finalProbes_Tm.txt\\\n      ${params.name}_log.txt\\\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment1ProcessZip",
            "alignment2Process",
            "bed2fastaProcessEndoZip",
            "fasta2tabEndoZip",
            "revComplEndo",
            "probeTmEndo",
            "makeLogProcessEndo",
            "temp_zip_endo"
        ],
        "nb_inputs": 8,
        "outputs": [
            "zip_endo"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [
            "publishDir \"${projectDir}/UPLOAD_HERE/results/\""
        ],
        "when": "params.mode == \"endo\"",
        "stub": ""
    },
    "zipOutFilesExo": {
        "name_process": "zipOutFilesExo",
        "string_process": "\nprocess zipOutFilesExo {\n\n    publishDir \"${projectDir}/UPLOAD_HERE/results/\"\n\n    input:\n    path \"${params.name}_finalProbes.fasta\" from bed2fastaProcessExoZip\n    path \"${params.name}_oder.tab\" from fasta2tabExoZip\n    path \"${params.name}_alignment.doc\" from alignExoProcess\n    path \"${params.name}_finalProbes_revComplement.fasta\" from revComplExo\n    path \"${params.name}_finalProbes_Tm.txt\" from probeTmExo\n    path \"${params.name}_log.txt\" from makeLogProcessExo\n    path \"./${params.outputName}.zip\" from temp_zip_exo\n\n    output:\n    path \"./${params.outputName}.zip\" into zip_exo\n\n    when:\n    params.mode == \"exo\"\n\n    script:\n    \"\"\"\n    zip ${params.outputName}.zip\\\n      ${params.name}_finalProbes.fasta\\\n      ${params.name}_oder.tab\\\n      ${params.name}_alignment.doc\\\n      ${params.name}_finalProbes_revComplement.fasta\\\n      ${params.name}_finalProbes_Tm.txt\\\n      ${params.name}_log.txt\\\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    zip ${params.outputName}.zip\\\n      ${params.name}_finalProbes.fasta\\\n      ${params.name}_oder.tab\\\n      ${params.name}_alignment.doc\\\n      ${params.name}_finalProbes_revComplement.fasta\\\n      ${params.name}_finalProbes_Tm.txt\\\n      ${params.name}_log.txt\\\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed2fastaProcessExoZip",
            "fasta2tabExoZip",
            "alignExoProcess",
            "revComplExo",
            "probeTmExo",
            "makeLogProcessExo",
            "temp_zip_exo"
        ],
        "nb_inputs": 7,
        "outputs": [
            "zip_exo"
        ],
        "nb_outputs": 1,
        "name_workflow": "episkadlo__anglerFISH",
        "directive": [
            "publishDir \"${projectDir}/UPLOAD_HERE/results/\""
        ],
        "when": "params.mode == \"exo\"",
        "stub": ""
    }
}
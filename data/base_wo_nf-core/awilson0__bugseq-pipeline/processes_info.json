{
    "get_genome_sizes": {
        "name_process": "get_genome_sizes",
        "string_process": "\nprocess get_genome_sizes {\n\tcpus 1\n\tmemory '500 MB'\n\t\n\toutput:\n\tfile('species_genome_size.txt') into ncbi_genome_size\n\n\tscript:\n\n\t\"\"\"\n\twget -c ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/species_genome_size.txt.gz -O - | gunzip > species_genome_size.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\twget -c ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/species_genome_size.txt.gz -O - | gunzip > species_genome_size.txt\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ncbi_genome_size"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "cpus 1",
            "memory '500 MB'"
        ],
        "when": "",
        "stub": ""
    },
    "recentrifuge_getdb": {
        "name_process": "recentrifuge_getdb",
        "string_process": "\nprocess recentrifuge_getdb {\n\tconda '/home/schorlton/.conda/envs/recentrifuge/'                                    \n\tcpus 1\n\n\toutput:\n\tfile('taxdump/') into recentrifuge_db\n\n\n\t\n\t\"\"\"\n\tretaxdump\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n\tretaxdump\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "recentrifuge_db"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda '/home/schorlton/.conda/envs/recentrifuge/'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "validate": {
        "name_process": "validate",
        "string_process": "\nprocess validate {\nconda 'bioconda::fqtools=2.0'\ncpus 1\nmemory '4 GB'\n\ninput:\nset file(input),val(filename),val(case_control) from fastqs\n\noutput:\nset file(input), val(filename), val(case_control), stdout into validation_results\n\n\"\"\"\nfqtools validate $input\n\"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\nfqtools validate $input\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fqtools"
        ],
        "tools_url": [
            "https://bio.tools/fqtools"
        ],
        "tools_dico": [
            {
                "name": "fqtools",
                "uri": "https://bio.tools/fqtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A package that provides tools for efficient FASTQ files manipulation.",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@fqtools@1.1"
            }
        ],
        "inputs": [
            "fastqs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "validation_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::fqtools=2.0'",
            "cpus 1",
            "memory '4 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\nconda 'bioconda::fastqc=0.11.8'\n                                              \ncpus 1\nmemory '2 GB'\n\ninput:\nset file(fastq),val(path),val(case_control), val(passed) from passed_fastqs\n\noutput:\nfile '*_fastqc.zip' into fastqc\n\n\"\"\"\nfastqc $fastq\n\"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\nfastqc $fastq\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "passed_fastqs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::fastqc=0.11.8'",
            "cpus 1",
            "memory '2 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "demultiplex": {
        "name_process": "demultiplex",
        "string_process": "\nprocess demultiplex {\n\tconda 'bioconda::qcat future'\n\tcpus 8\n\tmemory '4 GB'\n\techo true\n\t\n\tinput:\n\tset file(input),val(path),val(case_control),val(passed) from passed_fastqs2\t\n\n\toutput:\n\tset val(path), file('output/*.fastq'), val(case_control) into chopped mode flatten\n\t\n\t\"\"\"\n\tqcat -f $input --trim -t 8 -b output\n\t\"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n\tqcat -f $input --trim -t 8 -b output\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "seqCAT"
        ],
        "tools_url": [
            "https://bio.tools/seqcat"
        ],
        "tools_dico": [
            {
                "name": "seqCAT",
                "uri": "https://bio.tools/seqcat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package uses variant calling data (in the form of VCF files) from high throughput sequencing technologies to authenticate and validate the source, function and characteristics of biological samples used in scientific endeavours.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/seqCAT.html"
            }
        ],
        "inputs": [
            "passed_fastqs2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chopped"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::qcat future'",
            "cpus 8",
            "memory '4 GB'",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "filter_low_complexity": {
        "name_process": "filter_low_complexity",
        "string_process": "\nprocess filter_low_complexity {\n\tconda 'bioconda::prinseq'\n\tcpus 2\n\tmemory '2 GB'\n\t                                \n\t\n\tinput:\n\tset val(filename), file(input), val(case_control) from chopped\n\n\toutput:\n\tset val(filename), val(input.baseName), val(case_control), file('out.fastq') into high_complexity\n\tset val(filename), file('out.fastq') into high_complexity2\n\n\t\"\"\"\n\tprinseq-lite.pl -min_qual_mean 7 -lc_method dust -lc_threshold 7 -min_len 250 -fastq $input -out_good out -out_bad null\n\t\n\t\"\"\"\n\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n\tprinseq-lite.pl -min_qual_mean 7 -lc_method dust -lc_threshold 7 -min_len 250 -fastq $input -out_good out -out_bad null\n\t\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chopped"
        ],
        "nb_inputs": 1,
        "outputs": [
            "high_complexity",
            "high_complexity2"
        ],
        "nb_outputs": 2,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::prinseq'",
            "cpus 2",
            "memory '2 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "read_classify": {
        "name_process": "read_classify",
        "string_process": "\nprocess read_classify {\n\tconda 'bioconda::minimap2'\n\tmemory '125 GB'\n\tcpus 32\n\tpublishDir params.outdir\n\n\tinput:\n\tset val(filename), val(adapter), val(case_control), file(input) from high_complexity\n\tfile minimap2_index\n\t\n\toutput:\n\tset val(filename), val(adapter), val(case_control), stdout into centrifuge_results\n\n\tscript:\n\tindex_base = centrifuge_index[0].toString() - ~/.\\d.cfl?/\n\t\n\t\"\"\"\n\tminimap2 -t 32 -x $index_base $input\n\n\t\"\"\"\n\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\tindex_base = centrifuge_index[0].toString() - ~/.\\d.cfl?/\n\t\n\t\"\"\"\n\tminimap2 -t 32 -x $index_base $input\n\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "high_complexity",
            "minimap2_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "centrifuge_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::minimap2'",
            "memory '125 GB'",
            "cpus 32",
            "publishDir params.outdir"
        ],
        "when": "",
        "stub": ""
    },
    "refine_alignments": {
        "name_process": "refine_alignments",
        "string_process": "\nprocess refine_alignments {\n\tconda 'bioconda::pathoscope'\n\n\n}",
        "nb_lignes_process": 4,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::pathoscope'"
        ],
        "when": "",
        "stub": ""
    },
    "recentrifuge": {
        "name_process": "recentrifuge",
        "string_process": "\nprocess recentrifuge {\n\tconda '/home/schorlton/.conda/envs/recentrifuge/'\n\tcpus 8\n\tpublishDir params.outdir\t\n\n\tinput:\n\t\n\tfile cases from cases_recentrifuge_files.collect { it[3] }\n\tval case_cmd from cases_recentrifuge_command.collect{[' -g ', it[3].baseName+'.class'].flatten()}\n\t\n\tfile controls from controls_recentrifuge_files.collect { it[3] }\n\tval control_cmd from controls_recentrifuge_command.collect{[' -g ', it[3].baseName+'.class'].flatten()}\n\t\n\tval control_count\t\n\n\tfile('*') from recentrifuge_db\n\t\n\n\toutput:\n\t\n\tfile('*.class.rcf.data.tsv') into recentrifuge_out\n\t\n\tscript:\t\n\t\n\tif (control_count>0){\t\n\t\"\"\"\t\n\trcf --format \"TYP:TSV, TID:3, LEN:7, SCO:9, UNC:0\" -x 9606 -s GENERIC -e TSV -y 30 -c $control_count${control_cmd.join()}${case_cmd.join()}\n\t\"\"\"\n\t}\n\telse {\n\t\"\"\"\n\trcf --format \"TYP:TSV, TID:3, LEN:7, SCO:9, UNC:0\" -x 9606 -s GENERIC -e TSV -y 30${case_cmd.join()}\n\t\"\"\"\n}\n}",
        "nb_lignes_process": 34,
        "string_script": "\tif (control_count>0){\t\n\t\"\"\"\t\n\trcf --format \"TYP:TSV, TID:3, LEN:7, SCO:9, UNC:0\" -x 9606 -s GENERIC -e TSV -y 30 -c $control_count${control_cmd.join()}${case_cmd.join()}\n\t\"\"\"\n\t}\n\telse {\n\t\"\"\"\n\trcf --format \"TYP:TSV, TID:3, LEN:7, SCO:9, UNC:0\" -x 9606 -s GENERIC -e TSV -y 30${case_cmd.join()}\n\t\"\"\"\n}",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "URCFG"
        ],
        "tools_url": [
            "https://bio.tools/URCFG"
        ],
        "tools_dico": [
            {
                "name": "URCFG",
                "uri": "https://bio.tools/URCFG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Expression correlation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Co-expression analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Expression-Based Cell Lineage Analysis in Drosophila Through a Course-Based Research Experience for Early Undergraduates.",
                "homepage": "http://www.urcfg.ucla.edu"
            }
        ],
        "inputs": [
            "cases_recentrifuge_files",
            "cases_recentrifuge_command",
            "controls_recentrifuge_files",
            "controls_recentrifuge_command",
            "control_count",
            "recentrifuge_db"
        ],
        "nb_inputs": 6,
        "outputs": [
            "recentrifuge_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda '/home/schorlton/.conda/envs/recentrifuge/'",
            "cpus 8",
            "publishDir params.outdir"
        ],
        "when": "",
        "stub": ""
    },
    "build_centrifuge_index": {
        "name_process": "build_centrifuge_index",
        "string_process": "\nprocess build_centrifuge_index {\n        conda 'bioconda::centrifuge bioconda::blast'\n        memory '300 GB'\n        cpus 32\n\tpublishDir './Centrifuge_index'\n       \techo true \n\n\toutput:\n        file('*.cf') into centrifuge_index\n        \n\twhen:\n        params.centrifuge_db == null\n\n\t\n        \"\"\"\n\t\n        centrifuge-download -P 32 -o taxonomy taxonomy\n        centrifuge-download -P 32 -o library -m -a \"Any\" -d \"archaea,viral,fungi,protozoa\" refseq > seqid2taxid.map\n        centrifuge-download -P 32 -o library -m -d \"bacteria\" refseq >> seqid2taxid.map\n        centrifuge-download -P 32 -o library -m -d \"vertebrate_mammalian\" -a \"Chromosome\" -t 9606 -c 'reference genome' refseq >> seqid2taxid.map\n        centrifuge-download -P 32 -o library -m contaminants >> seqid2taxid.map\n       \tcat library/*/*.fna > input-sequences.fna\n       \tcentrifuge-build -p 32 --conversion-table seqid2taxid.map --taxonomy-tree taxonomy/nodes.dmp --name-table taxonomy/names.dmp input-sequences.fna refseq_microbial\n        \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n\t\n        centrifuge-download -P 32 -o taxonomy taxonomy\n        centrifuge-download -P 32 -o library -m -a \"Any\" -d \"archaea,viral,fungi,protozoa\" refseq > seqid2taxid.map\n        centrifuge-download -P 32 -o library -m -d \"bacteria\" refseq >> seqid2taxid.map\n        centrifuge-download -P 32 -o library -m -d \"vertebrate_mammalian\" -a \"Chromosome\" -t 9606 -c 'reference genome' refseq >> seqid2taxid.map\n        centrifuge-download -P 32 -o library -m contaminants >> seqid2taxid.map\n       \tcat library/*/*.fna > input-sequences.fna\n       \tcentrifuge-build -p 32 --conversion-table seqid2taxid.map --taxonomy-tree taxonomy/nodes.dmp --name-table taxonomy/names.dmp input-sequences.fna refseq_microbial\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "centrifuge_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "awilson0__bugseq-pipeline",
        "directive": [
            "conda 'bioconda::centrifuge bioconda::blast'",
            "memory '300 GB'",
            "cpus 32",
            "publishDir './Centrifuge_index'",
            "echo true"
        ],
        "when": "params.centrifuge_db == null",
        "stub": ""
    }
}
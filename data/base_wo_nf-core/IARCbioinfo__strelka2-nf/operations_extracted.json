{
    "OPERATION_1": {
        "string": "pairs = Channel.fromPath(params.input_file).splitCsv(header: true, sep: '\\t', strip: true)\n\t\t\t.map{ row -> [ row.sample , file(params.input_folder + \"/\" + row.tumor), file(params.input_folder + \"/\" + row.tumor+ext_ind), file(params.input_folder + \"/\" + row.normal), file(params.input_folder + \"/\" + row.normal+ext_ind), \n\t\t\t\t\tfile(params.input_folder + \"/\" + row.vcf1) , file(params.input_folder + \"/\" + row.vcf1 + \".tbi\") ,\n\t\t\t\t\tfile(params.input_folder + \"/\" + row.vcf2) , file(params.input_folder + \"/\" + row.vcf2 + \".tbi\") ]}",
        "origin": [
            [
                "params.input_file",
                "A"
            ]
        ],
        "gives": [
            [
                "pairs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "pairs = Channel.fromPath(params.input_file).splitCsv(header: true, sep: '\\t', strip: true)\n  .map{ row -> [row.sample, file(params.input_folder + row.tumor), file(params.input_folder + row.tumor+ext_ind), file(params.input_folder + row.normal), \n                file(params.input_folder + row.normal+ext_ind), file(params.input_folder + row.vcf), file(params.input_folder + row.vcf+'.tbi') ] }",
        "origin": [
            [
                "params.input_file",
                "A"
            ]
        ],
        "gives": [
            [
                "pairs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "bamFiles = Channel.fromPath(params.input_file).splitCsv(header: true, sep: '\\t', strip: true)\n   .map{ row -> [row.sample, file(params.input_folder + row.bam), file(params.input_folder + row.bam+ext_ind), file(params.input_folder + row.vcf), \n   file(params.input_folder + row.vcf+'.tbi') ] }",
        "origin": [
            [
                "params.input_file",
                "A"
            ]
        ],
        "gives": [
            [
                "bamFiles",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "bamFiles = Channel.fromFilePairs( params.input_folder + \"/*.{${params.ext},${params.ext}${ext_ind}}\",flat: true)\n                       .map{row -> [row[0],row[1],row[2],file('NO_VCF'),file('NO_VCF_TBI')]}",
        "origin": [
            [
                "params.input_folder + \"/*.{${params.ext},${params.ext}${ext_ind}}\",flat: true",
                "A"
            ]
        ],
        "gives": [
            [
                "bamFiles",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "pairs2genotype = pairs.groupTuple(by: 0)\n\t\t\t      .map { row -> tuple(row[0] , row[1], row[2] , row[3][0] , row[4][0] ,  row[5],row[6],row[7],row[8]  ) }",
        "origin": [
            [
                "pairs",
                "P"
            ]
        ],
        "gives": [
            [
                "pairs2genotype",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "passfiles.into{ vcffiles1 ; vcffiles2 }",
        "origin": [
            [
                "passfiles",
                "P"
            ]
        ],
        "gives": [
            [
                "vcffiles1",
                "P"
            ],
            [
                "vcffiles2",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "vcffiles.into{ vcffiles1 ; vcffiles2 }",
        "origin": [
            [
                "vcffiles",
                "P"
            ]
        ],
        "gives": [
            [
                "vcffiles1",
                "P"
            ],
            [
                "vcffiles2",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "vcffiles.into{ vcffiles1 ; vcffiles2 }",
        "origin": [
            [
                "vcffiles",
                "P"
            ]
        ],
        "gives": [
            [
                "vcffiles1",
                "P"
            ],
            [
                "vcffiles2",
                "P"
            ]
        ]
    }
}
{
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "\nprocess GUNZIP {\n    tag \"$archive\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n    \n    input:\n    path archive\n    \n    output:\n    path \"$gunzip\",       emit: gunzip\n    path \"*.version.txt\", emit: version\n    \n    script:\n    def software = getSoftwareName(task.process)\n    gunzip       = archive.toString() - '.gz'\n    \"\"\"\n    gunzip -f $options.args --keep $archive\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    gunzip       = archive.toString() - '.gz'\n    \"\"\"\n    gunzip -f $options.args --keep $archive\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$archive\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SNPEFF_ANNOTATION": {
        "name_process": "SNPEFF_ANNOTATION",
        "string_process": "\nprocess SNPEFF_ANNOTATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::snpeff=5.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1'\n    } else {\n        container 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1'\n    }\n\n    input:\n    tuple val(meta), path(vcf)\n    path db\n    path config\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.snpEff.csv\")   , emit: csv\n    tuple val(meta), path(\"*.vcf.gz*\")      , emit: vcf\n    tuple val(meta), path(\"*.txt\")          , emit: txt\n    tuple val(meta), path(\"*.html\")         , emit: html\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def lastPath   = params.fasta.lastIndexOf(File.separator)\n    def lastExt    = params.fasta.lastIndexOf(\".\")\n    def index_base = params.fasta.substring(lastPath+1,lastExt)\n\n    \"\"\"\n    snpEff ${index_base} \\\\\n        -config $config \\\\\n        -dataDir $db \\\\\n        $vcf \\\\\n        -csvStats ${prefix}.snpEff.csv \\\\\n        | bgzip -c > ${prefix}.snpEff.vcf.gz\n\n    tabix -p vcf -f ${prefix}.snpEff.vcf.gz\n    mv snpEff_summary.html ${prefix}.snpEff.summary.html\n\n    SnpSift extractFields -s \",\" \\\\\n        -e \".\" \\\\\n        ${prefix}.snpEff.vcf.gz \\\\\n        CHROM POS REF ALT \\\\\n        \"ANN[*].GENE\" \"ANN[*].GENEID\" \\\\\n        \"ANN[*].IMPACT\" \"ANN[*].EFFECT\" \\\\\n        \"ANN[*].FEATURE\" \"ANN[*].FEATUREID\" \\\\\n        \"ANN[*].BIOTYPE\" \"ANN[*].RANK\" \"ANN[*].HGVS_C\" \\\\\n        \"ANN[*].HGVS_P\" \"ANN[*].CDNA_POS\" \"ANN[*].CDNA_LEN\" \\\\\n        \"ANN[*].CDS_POS\" \"ANN[*].CDS_LEN\" \"ANN[*].AA_POS\" \\\\\n        \"ANN[*].AA_LEN\" \"ANN[*].DISTANCE\" \"EFF[*].EFFECT\" \\\\\n        \"EFF[*].FUNCLASS\" \"EFF[*].CODON\" \"EFF[*].AA\" \"EFF[*].AA_LEN\" \\\\\n        > ${prefix}.snpSift.table.txt\n    \t\"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def lastPath   = params.fasta.lastIndexOf(File.separator)\n    def lastExt    = params.fasta.lastIndexOf(\".\")\n    def index_base = params.fasta.substring(lastPath+1,lastExt)\n\n    \"\"\"\n    snpEff ${index_base} \\\\\n        -config $config \\\\\n        -dataDir $db \\\\\n        $vcf \\\\\n        -csvStats ${prefix}.snpEff.csv \\\\\n        | bgzip -c > ${prefix}.snpEff.vcf.gz\n\n    tabix -p vcf -f ${prefix}.snpEff.vcf.gz\n    mv snpEff_summary.html ${prefix}.snpEff.summary.html\n\n    SnpSift extractFields -s \",\" \\\\\n        -e \".\" \\\\\n        ${prefix}.snpEff.vcf.gz \\\\\n        CHROM POS REF ALT \\\\\n        \"ANN[*].GENE\" \"ANN[*].GENEID\" \\\\\n        \"ANN[*].IMPACT\" \"ANN[*].EFFECT\" \\\\\n        \"ANN[*].FEATURE\" \"ANN[*].FEATUREID\" \\\\\n        \"ANN[*].BIOTYPE\" \"ANN[*].RANK\" \"ANN[*].HGVS_C\" \\\\\n        \"ANN[*].HGVS_P\" \"ANN[*].CDNA_POS\" \"ANN[*].CDNA_LEN\" \\\\\n        \"ANN[*].CDS_POS\" \"ANN[*].CDS_LEN\" \"ANN[*].AA_POS\" \\\\\n        \"ANN[*].AA_LEN\" \"ANN[*].DISTANCE\" \"EFF[*].EFFECT\" \\\\\n        \"EFF[*].FUNCLASS\" \"EFF[*].CODON\" \"EFF[*].AA\" \"EFF[*].AA_LEN\" \\\\\n        > ${prefix}.snpSift.table.txt\n    \t\"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "snpEff",
            "SnpSift",
            "Chromas"
        ],
        "tools_url": [
            "https://bio.tools/snpeff",
            "https://bio.tools/snpsift",
            "https://bio.tools/chromas"
        ],
        "tools_dico": [
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            },
            {
                "name": "SnpSift",
                "uri": "https://bio.tools/snpsift",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Toolbox that allows you to filter and manipulate annotated vcf files.",
                "homepage": "http://snpeff.sourceforge.net/SnpSift.html"
            },
            {
                "name": "Chromas",
                "uri": "https://bio.tools/chromas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0266",
                                    "term": "Vector sequence detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Chromas is a low-cost chromatogram file editor with search, vector sequence detection and multi-format sequence export functions, plus powerful batch processing.",
                "homepage": "http://technelysium.com.au/?page_id=13"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "db",
            "config",
            "fasta"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::snpeff=5.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' } else { container 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "TRIMMOMATIC": {
        "name_process": "TRIMMOMATIC",
        "string_process": "\nprocess TRIMMOMATIC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::trimmomatic=0.39' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/trimmomatic:0.39--hdfd78af_2'\n    } else {\n        container 'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz'), emit: reads\n    tuple val(meta), path('*.stats')        , emit: stats\n    tuple val(meta), path('*.log')          , emit: log\n    path '*.version.txt'                    , emit: version\n\n\n    script:\n                                                                           \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n\n    if (params.single_end && !params.adapters) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trimmomatic SE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}.fastq.gz \\\\\n            ${prefix}.trim.fastq.gz \\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    } else if (params.single_end && params.adapters) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trimmomatic SE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}.fastq.gz \\\\\n            ${prefix}.trim.fastq.gz \\\\\n            ILLUMINACLIP:${params.adapters}:${params.illumina_clip}\\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    } else if (!params.single_end && !params.adapters) {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trimmomatic PE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz \\\\\n            ${prefix}_1.paired.trim.fastq.gz \\\\\n            ${prefix}_1.unpaired.fastq.gz \\\\\n            ${prefix}_2.paired.trim.fastq.gz \\\\\n            ${prefix}_2.unpaired.fastq.gz \\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trimmomatic PE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz \\\\\n            ${prefix}_1.paired.trim.fastq.gz \\\\\n            ${prefix}_1.unpaired.fastq.gz \\\\\n            ${prefix}_2.paired.trim.fastq.gz \\\\\n            ${prefix}_2.unpaired.fastq.gz \\\\\n            ILLUMINACLIP:${params.adapters}:${params.illumina_clip} \\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 95,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n\n    if (params.single_end && !params.adapters) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trimmomatic SE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}.fastq.gz \\\\\n            ${prefix}.trim.fastq.gz \\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    } else if (params.single_end && params.adapters) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trimmomatic SE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}.fastq.gz \\\\\n            ${prefix}.trim.fastq.gz \\\\\n            ILLUMINACLIP:${params.adapters}:${params.illumina_clip}\\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    } else if (!params.single_end && !params.adapters) {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trimmomatic PE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz \\\\\n            ${prefix}_1.paired.trim.fastq.gz \\\\\n            ${prefix}_1.unpaired.fastq.gz \\\\\n            ${prefix}_2.paired.trim.fastq.gz \\\\\n            ${prefix}_2.unpaired.fastq.gz \\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trimmomatic PE \\\\\n            -threads $task.cpus \\\\\n            -summary ${prefix}.stats \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz \\\\\n            ${prefix}_1.paired.trim.fastq.gz \\\\\n            ${prefix}_1.unpaired.fastq.gz \\\\\n            ${prefix}_2.paired.trim.fastq.gz \\\\\n            ${prefix}_2.unpaired.fastq.gz \\\\\n            ILLUMINACLIP:${params.adapters}:${params.illumina_clip} \\\\\n            LEADING:${params.leading} TRAILING:${params.trailing} SLIDINGWINDOW:${params.window_size}:${params.window_quality} MINLEN:${params.min_length} \\\\\n            2> ${prefix}.trimmomatic.log\n\n        echo \\$(trimmomatic --version 2>&1) | sed -e \"s/trimmomatic //g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 68,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::trimmomatic=0.39' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/trimmomatic:0.39--hdfd78af_2' } else { container 'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2' }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTP": {
        "name_process": "FASTP",
        "string_process": "\nprocess FASTP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::fastp=0.20.1' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/fastp:0.20.1--h8b12597_0'\n    } else {\n        container 'quay.io/biocontainers/fastp:0.20.1--h8b12597_0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz'), emit: reads\n    tuple val(meta), path('*.json')         , emit: json\n    tuple val(meta), path('*.html')         , emit: html\n    tuple val(meta), path('*.log')          , emit: log\n    path '*.version.txt'                    , emit: version\n    tuple val(meta), path('*.fail.fastq.gz'), optional:true, emit: reads_fail\n\n    script:\n                                                                           \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (params.single_end) {\n        def fail_fastq = params.save_trimmed_fail ? \"--failed_out ${prefix}.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}.fastq.gz \\\\\n            --out1 ${prefix}.trim.fastq.gz \\\\\n            --thread $task.cpus \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $options.args \\\\\n            2> ${prefix}.fastp.log\n        echo \\$(fastp --version 2>&1) | sed -e \"s/fastp //g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        def fail_fastq = params.save_trimmed_fail ? \"--unpaired1 ${prefix}_1.fail.fastq.gz --unpaired2 ${prefix}_2.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}_1.fastq.gz \\\\\n            --in2 ${prefix}_2.fastq.gz \\\\\n            --out1 ${prefix}_1.trim.fastq.gz \\\\\n            --out2 ${prefix}_2.trim.fastq.gz \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            --thread $task.cpus \\\\\n            --detect_adapter_for_pe \\\\\n            $options.args \\\\\n            2> ${prefix}.fastp.log\n\n        echo \\$(fastp --version 2>&1) | sed -e \"s/fastp //g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 65,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (params.single_end) {\n        def fail_fastq = params.save_trimmed_fail ? \"--failed_out ${prefix}.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}.fastq.gz \\\\\n            --out1 ${prefix}.trim.fastq.gz \\\\\n            --thread $task.cpus \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $options.args \\\\\n            2> ${prefix}.fastp.log\n        echo \\$(fastp --version 2>&1) | sed -e \"s/fastp //g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        def fail_fastq = params.save_trimmed_fail ? \"--unpaired1 ${prefix}_1.fail.fastq.gz --unpaired2 ${prefix}_2.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}_1.fastq.gz \\\\\n            --in2 ${prefix}_2.fastq.gz \\\\\n            --out1 ${prefix}_1.trim.fastq.gz \\\\\n            --out2 ${prefix}_2.trim.fastq.gz \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            --thread $task.cpus \\\\\n            --detect_adapter_for_pe \\\\\n            $options.args \\\\\n            2> ${prefix}.fastp.log\n\n        echo \\$(fastp --version 2>&1) | sed -e \"s/fastp //g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::fastp=0.20.1' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/fastp:0.20.1--h8b12597_0' } else { container 'quay.io/biocontainers/fastp:0.20.1--h8b12597_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_COUNTS": {
        "name_process": "MERGE_COUNTS",
        "string_process": "\nprocess MERGE_COUNTS {\n    tag \"${prefix}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n\n    input:\n    path tsv\n    val  prefix\n\n    output:\n    path  '*.csv' , emit: csv\n\n    script:\n    \n    \"\"\"\n    merge_read_counts.py --input $tsv --prefix $prefix $options.args \n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    merge_read_counts.py --input $tsv --prefix $prefix $options.args \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tsv",
            "prefix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "\nprocess SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"*.version.txt\"           , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools stats $bam > ${bam}.stats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools stats $bam > ${bam}.stats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BCFTOOLS_CONSENSUS": {
        "name_process": "BCFTOOLS_CONSENSUS",
        "string_process": "\nprocess BCFTOOLS_CONSENSUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.11' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/bcftools:1.11--h7c999a4_0'\n    } else {\n        container 'quay.io/biocontainers/bcftools:1.11--h7c999a4_0'\n    }\n\n    input:\n    tuple val(meta), path(vcf)\n    tuple val(meta), path(tbi)\n    tuple val(meta), path(bam)\n    path fasta\n\n    output:\n    tuple val(meta), path('*.fa'), emit: fasta\n    path  '*.version.txt'        , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bcftools consensus -f $fasta $vcf -o ${prefix}.consensus.fa\n    bedtools genomecov \\\\\n        -bga \\\\\n        -ibam $bam \\\\\n        | awk '\\$4 < $params.min_coverage' | bedtools merge > ${prefix}.mask.bed\n    bedtools maskfasta \\\\\n        -fi ${prefix}.consensus.fa \\\\\n        -bed ${prefix}.mask.bed \\\\\n        -fo ${prefix}.consensus.masked.fa\n    rename_headers_masked_consensus.py -m ${prefix}.consensus.masked.fa -p ${prefix}\n    echo \\$(bcftools --version 2>&1) | sed 's/^.*bcftools //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    bcftools consensus -f $fasta $vcf -o ${prefix}.consensus.fa\n    bedtools genomecov \\\\\n        -bga \\\\\n        -ibam $bam \\\\\n        | awk '\\$4 < $params.min_coverage' | bedtools merge > ${prefix}.mask.bed\n    bedtools maskfasta \\\\\n        -fi ${prefix}.consensus.fa \\\\\n        -bed ${prefix}.mask.bed \\\\\n        -fo ${prefix}.consensus.masked.fa\n    rename_headers_masked_consensus.py -m ${prefix}.consensus.masked.fa -p ${prefix}\n    echo \\$(bcftools --version 2>&1) | sed 's/^.*bcftools //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "meta",
            "tbi",
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.11' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/bcftools:1.11--h7c999a4_0' } else { container 'quay.io/biocontainers/bcftools:1.11--h7c999a4_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_IDXSTATS": {
        "name_process": "SAMTOOLS_IDXSTATS",
        "string_process": "\nprocess SAMTOOLS_IDXSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools idxstats $bam > ${bam}.idxstats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools idxstats $bam > ${bam}.idxstats\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PARSE_FLAGSTAT": {
        "name_process": "PARSE_FLAGSTAT",
        "string_process": "\nprocess PARSE_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n\n    input:\n    tuple val(meta), path(flagstat)\n\n    output:\n    tuple val(meta), path('*.tsv')         , emit: tsv\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    extract_alignment_stats.py --flagstat $flagstat --output ${prefix}.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    extract_alignment_stats.py --flagstat $flagstat --output ${prefix}.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "flagstat"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    },
    "PLOT_READ_COUNTS": {
        "name_process": "PLOT_READ_COUNTS",
        "string_process": "\nprocess PLOT_READ_COUNTS {\n    tag \"${prefix}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n    \n    input:\n    path            counts\n    val             prefix\n    \n\n    output:\n    path \"*.pdf\"\n\n    script:\n    \"\"\"\n    plot_read_counts.R --counts $counts --prefix $prefix --outdir ./\n    \"\"\"\n\n                            \n                                                                           \n           \"\"\"\n    //     plot_read_counts.R --counts $counts --prefix $prefix --outdir ./\n    //     \"\"\"\n               \n                                            \n           \"\"\"\n    //     plot_read_counts.R --counts $counts --prefix $prefix --outdir ./\n    //     \"\"\"\n        \n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    plot_read_counts.R --counts $counts --prefix $prefix --outdir ./\n    \"\"\"\n\n                            \n                                                                           \n           \"\"\"\n    //     plot_read_counts.R --counts $counts --prefix $prefix --outdir ./\n    //     \"\"\"\n               \n                                            \n           \"\"\"\n    //     plot_read_counts.R --counts $counts --prefix $prefix --outdir ./\n    //     \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts",
            "prefix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_MAPPED_BAM": {
        "name_process": "SAMTOOLS_MAPPED_BAM",
        "string_process": "\nprocess SAMTOOLS_MAPPED_BAM {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path(\"*.bai\"), emit: bai\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools view -b -F 4 $bam >  ${prefix}.bam\n    samtools index ${prefix}.bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools view -b -F 4 $bam >  ${prefix}.bam\n    samtools index ${prefix}.bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_GENOME_COVERAGE": {
        "name_process": "BEDTOOLS_GENOME_COVERAGE",
        "string_process": "\nprocess BEDTOOLS_GENOME_COVERAGE {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? 'bioconda::bedtools=2.30.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0\"\n    } else {\n        container \"quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path('*.genomecov.coverage.bed')        , emit: coverage_bed\n    path  '*.version.txt'                                    , emit: version\n\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    echo -e \\\"reference_name\\tposition\\tdepth\\\" > ${prefix}.genomecov.coverage.bed\n    bedtools genomecov -d -ibam $bam >> ${prefix}.genomecov.coverage.bed\n    \n    bedtools --version | sed  -e 's/bedtools v//g' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    echo -e \\\"reference_name\\tposition\\tdepth\\\" > ${prefix}.genomecov.coverage.bed\n    bedtools genomecov -d -ibam $bam >> ${prefix}.genomecov.coverage.bed\n    \n    bedtools --version | sed  -e 's/bedtools v//g' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? 'bioconda::bedtools=2.30.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0\" } else { container \"quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_MPA_PLOT": {
        "name_process": "KRAKEN2_MPA_PLOT",
        "string_process": "\nprocess KRAKEN2_MPA_PLOT {\n    tag \"${prefix}\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process)) }\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    } else {\n        container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    }\n\n    input:\n    path counts\n    val  prefix\n    \n\n    output:\n    path (\"*.svg\")   , emit: svg\n    path (\"*.pdf\")   , emit: pdf\n\n    script:\n    def software     = getSoftwareName(task.process)\n    \n    \"\"\"\n    plot_kraken2_mpa.r --species_count $counts --prefix $prefix --outdir ./\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software     = getSoftwareName(task.process)\n    \n    \"\"\"\n    plot_kraken2_mpa.r --species_count $counts --prefix $prefix --outdir ./\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts",
            "prefix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process)) }",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' } else { container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' }"
        ],
        "when": "",
        "stub": ""
    },
    "VARSCAN_MPILEUP": {
        "name_process": "VARSCAN_MPILEUP",
        "string_process": "\nprocess VARSCAN_MPILEUP {\n    label 'process_medium'\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::varscan=2.4.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/varscan:2.4.4--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/varscan:2.4.4--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(mpileup)\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\")           , emit: vcf\n    tuple val(meta), path(\"*.tbi\")              , emit: tbi\n    tuple val(meta), path(\"*stats.txt\")         , emit: stats\n    tuple val(meta), path(\"*.varscan.log\")      , emit: log\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def lofreq_prefix = \"${prefix}.AF${params.min_allele_freq}\"\n    def hifreq_prefix = \"${prefix}.AF${params.max_allele_freq}\"\n    def strand = params.varscan_strand_filter ? \"--strand-filter 1\" : \"--strand-filter 0\"\n\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n    varscan mpileup2cns \\\\\n        $mpileup \\\\\n        $options.args \\\\\n        --output-vcf 1 \\\\\n        --variants \\\\\n        --vcf-sample-list sample_name.list \\\\\n        $strand \\\\\n        2> ${prefix}.varscan.log \\\\\n        | bgzip -c > ${lofreq_prefix}.vcf.gz\n    tabix -p vcf -f ${lofreq_prefix}.vcf.gz\n    bcftools stats ${lofreq_prefix}.vcf.gz > ${lofreq_prefix}.bcftools_stats.txt\n    sed -i.bak '/LC_ALL/d' ${prefix}.varscan.log\n\n    bcftools filter \\\\\n        $options.args2 \\\\\n        --output-type z \\\\\n        --output ${hifreq_prefix}.vcf.gz \\\\\n        ${lofreq_prefix}.vcf.gz\n    tabix -p vcf -f ${hifreq_prefix}.vcf.gz\n    bcftools stats ${hifreq_prefix}.vcf.gz > ${hifreq_prefix}.bcftools_stats.txt\n    varscan 2>&1 | sed 's/^.*VarScan //; s/ .*\\$//' | sed -n 1p > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def lofreq_prefix = \"${prefix}.AF${params.min_allele_freq}\"\n    def hifreq_prefix = \"${prefix}.AF${params.max_allele_freq}\"\n    def strand = params.varscan_strand_filter ? \"--strand-filter 1\" : \"--strand-filter 0\"\n\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n    varscan mpileup2cns \\\\\n        $mpileup \\\\\n        $options.args \\\\\n        --output-vcf 1 \\\\\n        --variants \\\\\n        --vcf-sample-list sample_name.list \\\\\n        $strand \\\\\n        2> ${prefix}.varscan.log \\\\\n        | bgzip -c > ${lofreq_prefix}.vcf.gz\n    tabix -p vcf -f ${lofreq_prefix}.vcf.gz\n    bcftools stats ${lofreq_prefix}.vcf.gz > ${lofreq_prefix}.bcftools_stats.txt\n    sed -i.bak '/LC_ALL/d' ${prefix}.varscan.log\n\n    bcftools filter \\\\\n        $options.args2 \\\\\n        --output-type z \\\\\n        --output ${hifreq_prefix}.vcf.gz \\\\\n        ${lofreq_prefix}.vcf.gz\n    tabix -p vcf -f ${hifreq_prefix}.vcf.gz\n    bcftools stats ${hifreq_prefix}.vcf.gz > ${hifreq_prefix}.bcftools_stats.txt\n    varscan 2>&1 | sed 's/^.*VarScan //; s/ .*\\$//' | sed -n 1p > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "VarScan",
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/varscan",
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "VarScan",
                "uri": "https://bio.tools/varscan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "VarScan, an open source tool for variant detection that is compatible with several short read align-ers.",
                "homepage": "http://dkoboldt.github.io/varscan/"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "mpileup"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "label 'process_medium'",
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::varscan=2.4.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/varscan:2.4.4--h9402c20_2\" } else { container \"quay.io/biocontainers/varscan:2.4.4--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ABACAS_CONTIGUATE": {
        "name_process": "ABACAS_CONTIGUATE",
        "string_process": "\nprocess ABACAS_CONTIGUATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::abacas=1.3.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/abacas:1.3.1--pl526_0\"\n    } else {\n        container \"quay.io/biocontainers/abacas:1.3.1--pl526_0\"\n    }\n\n    input:\n    tuple val(meta), path(contigs)\n    path  fasta\n\n    output:\n    tuple val(meta), path('*.nucmer.delta*')      , emit: nucmer_delta\n    tuple val(meta), path('*.filtered.delta*')    , emit: filtered_delta\n    tuple val(meta), path('*.tiling')             , emit: tiling\n    tuple val(meta), path('*.out')                , emit: out\n    tuple val(meta), path('*.bin')                , emit: bin\n    tuple val(meta), path('*.fasta')              , emit: fasta\n    tuple val(meta), path('*.gaps')               , emit: gaps\n    tuple val(meta), path('*.gaps.tab*')          , emit: gaps_tab\n    path '*.version.txt'                          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    abacas.pl \\\\\n        -r $fasta \\\\\n        -q $contigs \\\\\n        $options.args \\\\\n        -o ${prefix}.abacas\n    mv nucmer.delta ${prefix}.abacas.nucmer.delta\n    mv nucmer.filtered.delta ${prefix}.abacas.nucmer.filtered.delta\n    mv nucmer.tiling ${prefix}.abacas.nucmer.tiling\n    mv unused_contigs.out ${prefix}.abacas.unused.contigs.out\n    rename_headers_masked_consensus.py -m ${prefix}.abacas.fasta -p ${prefix}\n    echo \\$(abacas.pl -v 2>&1) | sed 's/^.*ABACAS.//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    abacas.pl \\\\\n        -r $fasta \\\\\n        -q $contigs \\\\\n        $options.args \\\\\n        -o ${prefix}.abacas\n    mv nucmer.delta ${prefix}.abacas.nucmer.delta\n    mv nucmer.filtered.delta ${prefix}.abacas.nucmer.filtered.delta\n    mv nucmer.tiling ${prefix}.abacas.nucmer.tiling\n    mv unused_contigs.out ${prefix}.abacas.unused.contigs.out\n    rename_headers_masked_consensus.py -m ${prefix}.abacas.fasta -p ${prefix}\n    echo \\$(abacas.pl -v 2>&1) | sed 's/^.*ABACAS.//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "contigs",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::abacas=1.3.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/abacas:1.3.1--pl526_0\" } else { container \"quay.io/biocontainers/abacas:1.3.1--pl526_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "TRINITY_ASSEMBLE": {
        "name_process": "TRINITY_ASSEMBLE",
        "string_process": "\nprocess TRINITY_ASSEMBLE {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? 'bioconda::trinity=date.2011_11_26' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/trinity:date.2011_11_26\"\n    } else {\n        container \"quay.io/biocontainers/trinity:date.2011_11_26\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n                                                                                \n    tuple val(meta), path(\"*.fasta\")   , emit: contig\n    path  '*.version.txt'                                      , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def avail_mem = 8\n    if (!task.memory) {\n        log.info '[Trinity] Available memory not known - defaulting to 8G. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \n    \n    if (params.single_end) {\n        \"\"\"\n        Trinity \\\\\n            --seqType fq \\\\\n            --single $reads \\\\\n            --CPU ${task.cpus} \\\\\n            --max_memory ${avail_mem}G \\\\\n            $options.args \\\\\n            --output ${prefix}_trinity\n        mv ${prefix}_trinity/Trinity.fasta ${prefix}_trinity/${prefix}.fasta\n        \"\"\"\n    } else {\n        \"\"\"\n        Trinity \\\\\n            --seqType fq \\\\\n            --left ${reads[0]} \\\\\n            --right ${reads[1]} \\\\\n            --CPU ${task.cpus} \\\\\n            --max_memory ${avail_mem}G \\\\\n            $options.args \\\\\n            --output ${prefix}_trinity \n        \n        mv ${prefix}_trinity/Trinity.fasta ${prefix}_trinity/${prefix}.fasta\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 58,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def avail_mem = 8\n    if (!task.memory) {\n        log.info '[Trinity] Available memory not known - defaulting to 8G. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \n    \n    if (params.single_end) {\n        \"\"\"\n        Trinity \\\\\n            --seqType fq \\\\\n            --single $reads \\\\\n            --CPU ${task.cpus} \\\\\n            --max_memory ${avail_mem}G \\\\\n            $options.args \\\\\n            --output ${prefix}_trinity\n        mv ${prefix}_trinity/Trinity.fasta ${prefix}_trinity/${prefix}.fasta\n        \"\"\"\n    } else {\n        \"\"\"\n        Trinity \\\\\n            --seqType fq \\\\\n            --left ${reads[0]} \\\\\n            --right ${reads[1]} \\\\\n            --CPU ${task.cpus} \\\\\n            --max_memory ${avail_mem}G \\\\\n            $options.args \\\\\n            --output ${prefix}_trinity \n        \n        mv ${prefix}_trinity/Trinity.fasta ${prefix}_trinity/${prefix}.fasta\n        \"\"\"\n    }",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "Trinity"
        ],
        "tools_url": [
            "https://bio.tools/trinity"
        ],
        "tools_dico": [
            {
                "name": "Trinity",
                "uri": "https://bio.tools/trinity",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Trinity is a transcriptome assembler which relies on three different tools, inchworm an assembler, chrysalis which pools contigs and butterfly which amongst others compacts a graph resulting from butterfly with reads.",
                "homepage": "https://github.com/trinityrnaseq/trinityrnaseq/wiki"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? 'bioconda::trinity=date.2011_11_26' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/trinity:date.2011_11_26\" } else { container \"quay.io/biocontainers/trinity:date.2011_11_26\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BOWTIE2_ALIGN": {
        "name_process": "BOWTIE2_ALIGN",
        "string_process": "\nprocess BOWTIE2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.2 bioconda::samtools=1.11 conda-forge::pigz=2.3.4' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:577a697be67b5ae9b16f637fd723b8263a3898b3-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:577a697be67b5ae9b16f637fd723b8263a3898b3-0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path('*.bam'), emit: bam\n    tuple val(meta), path('*.log'), emit: log\n    path  '*.version.txt'         , emit: version\n    tuple val(meta), path('*fastq.gz'), optional:true, emit: fastq\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (params.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $options.args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $options.args2 -bhS -o ${prefix}.bam -\n\n        echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $options.args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $options.args2 -bhS -o ${prefix}.bam -\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n        echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 65,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (params.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $options.args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $options.args2 -bhS -o ${prefix}.bam -\n\n        echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $options.args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $options.args2 -bhS -o ${prefix}.bam -\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n        echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.2 bioconda::samtools=1.11 conda-forge::pigz=2.3.4' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:577a697be67b5ae9b16f637fd723b8263a3898b3-0\" } else { container \"quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:577a697be67b5ae9b16f637fd723b8263a3898b3-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CONSENSUS_QC": {
        "name_process": "CONSENSUS_QC",
        "string_process": "\nprocess CONSENSUS_QC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0\"\n    } else {\n        container \"quay.io/biocontainers/ivar:1.3.1--h089eab3_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(fasta)\n    path reference\n\n    output:\n    tuple val(meta), path(\"*.qc.csv\")   , emit: csv\n\n\n    script:\n    def prefix       = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    generate_consensus_qc.py \\\\\n        --prefix $prefix \\\\\n        --bam $bam \\\\\n        --reference $reference \\\\\n        --consensus-fasta $fasta \\\\\n        --outfile ${prefix}.qc.csv\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def prefix       = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    generate_consensus_qc.py \\\\\n        --prefix $prefix \\\\\n        --bam $bam \\\\\n        --reference $reference \\\\\n        --consensus-fasta $fasta \\\\\n        --outfile ${prefix}.qc.csv\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0\" } else { container \"quay.io/biocontainers/ivar:1.3.1--h089eab3_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_MPA_SUMMARY": {
        "name_process": "KRAKEN2_MPA_SUMMARY",
        "string_process": "\nprocess KRAKEN2_MPA_SUMMARY {\n    tag \"${prefix}\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process)) }\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    } else {\n        container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    }\n\n    input:\n    path reports\n    val  prefix\n    \n\n    output:\n    path (\"*.species.txt\")   , emit: species\n\n    script:\n    def software     = getSoftwareName(task.process)\n    \n    \"\"\"\n    merge_mpa_tables.py --input $reports --prefix $prefix\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software     = getSoftwareName(task.process)\n    \n    \"\"\"\n    merge_mpa_tables.py --input $reports --prefix $prefix\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reports",
            "prefix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process)) }",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' } else { container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' }"
        ],
        "when": "",
        "stub": ""
    },
    "BWA_INDEX": {
        "name_process": "BWA_INDEX",
        "string_process": "\nprocess BWA_INDEX {\n    tag \"$fasta\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', publish_id:'') }\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7\"\n    } else {\n        container \"quay.io/biocontainers/bwa:0.7.17--hed695b0_7\"\n    }\n\n    input:\n    path fasta\n\n    output:\n    path \"bwa\"          , emit: index\n    path \"*.version.txt\", emit: version\n\n                \n                                                              \n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    mkdir bwa\n    bwa index $options.args -p bwa/${fasta.baseName} $fasta\n    echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    mkdir bwa\n    bwa index $options.args -p bwa/${fasta.baseName} $fasta\n    echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7\" } else { container \"quay.io/biocontainers/bwa:0.7.17--hed695b0_7\" }"
        ],
        "when": "",
        "stub": ""
    },
    "TADPOLE_ASSEMBLE": {
        "name_process": "TADPOLE_ASSEMBLE",
        "string_process": "\nprocess TADPOLE_ASSEMBLE {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? 'bioconda::bbmap=38.87' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bbmap:38.87--hf29c6f4_0\"\n    } else {\n        container \"quay.io/biocontainers/bbmap:38.87--hf29c6f4_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.contigs.fasta\")   , emit: contigs\n                                                                \n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads    = params.single_end ? \"-in=$reads\" : \"-in=${reads[0]} -in2=${reads[1]}\"\n    def mem = 4\n    if (!task.memory) {\n        log.info \"[tadpole.sh] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.\"\n    } else {\n        mem = task.memory.giga\n    }\n\n    \"\"\"\n    tadpole.sh \\\\\n        threads=${task.cpus} \\\\\n        showstats=t \\\\\n        k=31 \\\\\n        prealloc=t \\\\\n        overwrite=f \\\\\n        -Xmx${mem}g \\\\\n        $input_reads \\\\\n        out=${prefix}.contigs.fasta \\\\\n        mode=contig \\\\\n        mincountseed=3 \\\\\n        mincountextend=2 \\\\ \n        minextension=2 \\\\\n        mincontig=auto \\\\\n        mincoverage=3 \\\\\n        ecc=t \\\\\n        reassemble=t\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads    = params.single_end ? \"-in=$reads\" : \"-in=${reads[0]} -in2=${reads[1]}\"\n    def mem = 4\n    if (!task.memory) {\n        log.info \"[tadpole.sh] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.\"\n    } else {\n        mem = task.memory.giga\n    }\n\n    \"\"\"\n    tadpole.sh \\\\\n        threads=${task.cpus} \\\\\n        showstats=t \\\\\n        k=31 \\\\\n        prealloc=t \\\\\n        overwrite=f \\\\\n        -Xmx${mem}g \\\\\n        $input_reads \\\\\n        out=${prefix}.contigs.fasta \\\\\n        mode=contig \\\\\n        mincountseed=3 \\\\\n        mincountextend=2 \\\\ \n        minextension=2 \\\\\n        mincontig=auto \\\\\n        mincoverage=3 \\\\\n        ecc=t \\\\\n        reassemble=t\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "MEMo"
        ],
        "tools_url": [
            "https://bio.tools/memo_cancer"
        ],
        "tools_dico": [
            {
                "name": "MEMo",
                "uri": "https://bio.tools/memo_cancer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Method for identifying mutually exclusive driver networks in cancer. The method identifies networks defined by three properties: first, member genes are recurrently altered via somatic mutation or copy number changes; second, member genes are likely to participate in the same biological pathway or process, as determined from prior pathway and network knowledge; and third, genomic events within the network exhibit a statistically significant level of mutual exclusivity.",
                "homepage": "http://cbio.mskcc.org/tools/memo/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? 'bioconda::bbmap=38.87' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bbmap:38.87--hf29c6f4_0\" } else { container \"quay.io/biocontainers/bbmap:38.87--hf29c6f4_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PICARD_MARKDUPLICATES": {
        "name_process": "PICARD_MARKDUPLICATES",
        "string_process": "\nprocess PICARD_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::picard=2.23.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/picard:2.23.9--0\"\n    } else {\n        container \"quay.io/biocontainers/picard:2.23.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")        , emit: bam\n    tuple val(meta), path(\"*.metrics.txt\"), emit: metrics\n    path  \"*.version.txt\"                 , emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $options.args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.bam \\\\\n        METRICS_FILE=${prefix}.MarkDuplicates.metrics.txt\n\n    echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d: > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $options.args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.bam \\\\\n        METRICS_FILE=${prefix}.MarkDuplicates.metrics.txt\n\n    echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d: > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "Picard",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::picard=2.23.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/picard:2.23.9--0\" } else { container \"quay.io/biocontainers/picard:2.23.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_UNMAPPED_FASTQ": {
        "name_process": "SAMTOOLS_UNMAPPED_FASTQ",
        "string_process": "\nprocess SAMTOOLS_UNMAPPED_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\")  ,  emit: reads\n    path  \"*.version.txt\"                ,  emit: version\n\n    \n                               \n           \"\"\"\n    //     samtools view -b --threads ${task.cpus} -f 4 $bam > ${prefix}.unmapped.bam\n    //     samtools sort -n --threads $task.cpus -o ${prefix}.unmapped.sorted.bam -T $prefix ${prefix}.unmapped.bam\n    //     bedtools bamtofastq -i ${prefix}.unmapped.sorted.bam -fq ${prefix}_R1.fastq\n    //     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    //     \"\"\"\n               \n           \"\"\"\n    //     samtools view -b --threads ${task.cpus} -f 4 $bam > ${prefix}.unmapped.bam\n    //     samtools sort -n --threads $task.cpus -o ${prefix}.unmapped.sorted.bam -T $prefix ${prefix}.unmapped.bam\n    //     bedtools bamtofastq -i ${prefix}.unmapped.sorted.bam -fq ${prefix}_R1.fastq  -fq2 ${prefix}_R2.fastq\n    //     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    //     \"\"\"\n            \n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    if (params.single_end) {\n        \"\"\"\n        samtools fastq $options.args -f 4--threads $task.cpus $bam  > ${prefix}.fastq.gz\n\n        echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n        \"\"\"\n\n    } else {\n        \"\"\"\n        samtools fastq $options.args -f 4 --threads $task.cpus -1 ${prefix}_1.fastq.gz -2 ${prefix}_2.fastq.gz -0 /dev/null -s /dev/null $bam\n\n        echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 56,
        "string_script": "\"\"\"\n    //     samtools view -b --threads ${task.cpus} -f 4 $bam > ${prefix}.unmapped.bam\n    //     samtools sort -n --threads $task.cpus -o ${prefix}.unmapped.sorted.bam -T $prefix ${prefix}.unmapped.bam\n    //     bedtools bamtofastq -i ${prefix}.unmapped.sorted.bam -fq ${prefix}_R1.fastq\n    //     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    //     \"\"\"\n               \n           \"\"\"\n    //     samtools view -b --threads ${task.cpus} -f 4 $bam > ${prefix}.unmapped.bam\n    //     samtools sort -n --threads $task.cpus -o ${prefix}.unmapped.sorted.bam -T $prefix ${prefix}.unmapped.bam\n    //     bedtools bamtofastq -i ${prefix}.unmapped.sorted.bam -fq ${prefix}_R1.fastq  -fq2 ${prefix}_R2.fastq\n    //     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    //     \"\"\"\n            \n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    if (params.single_end) {\n        \"\"\"\n        samtools fastq $options.args -f 4--threads $task.cpus $bam  > ${prefix}.fastq.gz\n\n        echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n        \"\"\"\n\n    } else {\n        \"\"\"\n        samtools fastq $options.args -f 4 --threads $task.cpus -1 ${prefix}_1.fastq.gz -2 ${prefix}_2.fastq.gz -0 /dev/null -s /dev/null $bam\n\n        echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "\nprocess SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_VIEW": {
        "name_process": "SAMTOOLS_VIEW",
        "string_process": "\nprocess SAMTOOLS_VIEW {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools view $options.args $bam > ${prefix}.bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools view $options.args $bam > ${prefix}.bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_MPILEUP": {
        "name_process": "SAMTOOLS_MPILEUP",
        "string_process": "\nprocess SAMTOOLS_MPILEUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.mpileup\"), emit: mpileup\n    path  \"*.version.txt\"             , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        --output ${prefix}.mpileup \\\\\n        $options.args \\\\\n        $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        --output ${prefix}.mpileup \\\\\n        $options.args \\\\\n        $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BCFTOOLS_MPILEUP": {
        "name_process": "BCFTOOLS_MPILEUP",
        "string_process": "\nprocess BCFTOOLS_MPILEUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::bcftools=1.11\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bcftools:1.11--h7c999a4_0\"\n    } else {\n        container \"quay.io/biocontainers/bcftools:1.11--h7c999a4_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.gz\")      , emit: vcf\n    tuple val(meta), path(\"*.tbi\")     , emit: tbi\n    tuple val(meta), path(\"*stats.txt\"), emit: stats\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n    bcftools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        $options.args \\\\\n        $bam \\\\\n        | bcftools call --output-type v $options.args2 \\\\\n        | bcftools reheader --samples sample_name.list \\\\\n        | bcftools view --output-file ${prefix}.vcf.gz --output-type z $options.args3\n    tabix -p vcf -f ${prefix}.vcf.gz\n    bcftools stats ${prefix}.vcf.gz > ${prefix}.bcftools_stats.txt\n    echo \\$(bcftools --version 2>&1) | sed 's/^.*bcftools //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n    bcftools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        $options.args \\\\\n        $bam \\\\\n        | bcftools call --output-type v $options.args2 \\\\\n        | bcftools reheader --samples sample_name.list \\\\\n        | bcftools view --output-file ${prefix}.vcf.gz --output-type z $options.args3\n    tabix -p vcf -f ${prefix}.vcf.gz\n    bcftools stats ${prefix}.vcf.gz > ${prefix}.bcftools_stats.txt\n    echo \\$(bcftools --version 2>&1) | sed 's/^.*bcftools //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::bcftools=1.11\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bcftools:1.11--h7c999a4_0\" } else { container \"quay.io/biocontainers/bcftools:1.11--h7c999a4_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bai\"), emit: bai\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools index $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools index $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "\nprocess KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    } else {\n        container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n\n    output:\n    tuple val(meta), path('*classified*')  , emit: classified\n    tuple val(meta), path('*unclassified*'), emit: unclassified\n    tuple val(meta), path('*report.txt')   , emit: txt\n    path '*.version.txt'                   , emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        --use-mpa-style \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n    pigz -p $task.cpus *.fastq\n    echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//' | head -n 1 > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software     = getSoftwareName(task.process)\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        --use-mpa-style \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n    pigz -p $task.cpus *.fastq\n    echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//' | head -n 1 > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' } else { container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' }"
        ],
        "when": "",
        "stub": ""
    },
    "METASPADES_ASSEMBLE": {
        "name_process": "METASPADES_ASSEMBLE",
        "string_process": "\nprocess METASPADES_ASSEMBLE {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? 'bioconda::spades=3.14.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/spades:3.14.0--h21ccd2c_0\"\n    } else {\n        container \"quay.io/biocontainers/spades:3.14.0--h21ccd2c_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa')    , optional:true, emit: scaffolds\n    tuple val(meta), path('*.contigs.fa')      , optional:true, emit: contigs\n    tuple val(meta), path('*.assembly.gfa')    , optional:true, emit: gfa\n    tuple val(meta), path('*.log')             , emit: log\n    path  '*.version.txt'                      , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads    = params.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n\n    \"\"\"\n    metaspades.py \\\\\n        $options.args \\\\\n        --threads $task.cpus \\\\\n        $input_reads \\\\\n        -o ./\n\n    mv spades.log ${prefix}.spades.log\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n    fi\n    \n    echo \\$(spades.py --version 2>&1) | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//' > ${software}.version.txt\n         \n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads    = params.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n\n    \"\"\"\n    metaspades.py \\\\\n        $options.args \\\\\n        --threads $task.cpus \\\\\n        $input_reads \\\\\n        -o ./\n\n    mv spades.log ${prefix}.spades.log\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n    fi\n    \n    echo \\$(spades.py --version 2>&1) | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//' > ${software}.version.txt\n         \n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? 'bioconda::spades=3.14.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/spades:3.14.0--h21ccd2c_0\" } else { container \"quay.io/biocontainers/spades:3.14.0--h21ccd2c_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "VARSCAN_CONSENSUS": {
        "name_process": "VARSCAN_CONSENSUS",
        "string_process": "\nprocess VARSCAN_CONSENSUS {\n    label 'process_medium'\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::varscan=2.4.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/varscan:2.4.4--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/varscan:2.4.4--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(vcf)\n    tuple val(meta), path(tbi)\n    tuple val(meta), path(bam)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.fa\"), emit: fasta\n    path  '*.version.txt'        , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    cat $fasta | bcftools consensus $vcf > ${prefix}.consensus.fa\n    bedtools genomecov \\\\\n        -bga \\\\\n        -ibam $bam \\\\\n        -g $fasta \\\\\n        | awk '\\$4 < $params.min_coverage' | bedtools merge > ${prefix}.mask.bed\n    bedtools maskfasta \\\\\n        -fi ${prefix}.consensus.fa \\\\\n        -bed ${prefix}.mask.bed \\\\\n        -fo ${prefix}.consensus.masked.fa\n\n    rename_headers_masked_consensus.py -m ${prefix}.consensus.masked.fa -p $prefix\n    \n    varscan 2>&1 | sed 's/^.*VarScan //; s/ .*\\$//' | sed -n 1p > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    cat $fasta | bcftools consensus $vcf > ${prefix}.consensus.fa\n    bedtools genomecov \\\\\n        -bga \\\\\n        -ibam $bam \\\\\n        -g $fasta \\\\\n        | awk '\\$4 < $params.min_coverage' | bedtools merge > ${prefix}.mask.bed\n    bedtools maskfasta \\\\\n        -fi ${prefix}.consensus.fa \\\\\n        -bed ${prefix}.mask.bed \\\\\n        -fo ${prefix}.consensus.masked.fa\n\n    rename_headers_masked_consensus.py -m ${prefix}.consensus.masked.fa -p $prefix\n    \n    varscan 2>&1 | sed 's/^.*VarScan //; s/ .*\\$//' | sed -n 1p > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "BEDTools",
            "VarScan"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/bedtools",
            "https://bio.tools/varscan"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "VarScan",
                "uri": "https://bio.tools/varscan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "VarScan, an open source tool for variant detection that is compatible with several short read align-ers.",
                "homepage": "http://dkoboldt.github.io/varscan/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "meta",
            "tbi",
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "label 'process_medium'",
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::varscan=2.4.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/varscan:2.4.4--h9402c20_2\" } else { container \"quay.io/biocontainers/varscan:2.4.4--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BOWTIE2_BUILD": {
        "name_process": "BOWTIE2_BUILD",
        "string_process": "\nprocess BOWTIE2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', publish_id:'') }\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.2' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/bowtie2:2.4.2--py38h1c8e9b9_1'\n    } else {\n        container 'quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1'\n    }\n\n    input:\n    path fasta\n\n    output:\n    path 'bowtie2'      , emit: index\n    path '*.version.txt', emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $options.args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software  = getSoftwareName(task.process)\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $options.args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', publish_id:'') }",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.2' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/bowtie2:2.4.2--py38h1c8e9b9_1' } else { container 'quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n    \n    output:\n    path \"software_versions.csv\"     , emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "QC_SUMMARY_CSV": {
        "name_process": "QC_SUMMARY_CSV",
        "string_process": "\nprocess QC_SUMMARY_CSV {\n    tag \"${prefix}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n\n    input:\n    path csv\n    path readcounts\n    val  prefix\n\n    output:\n    path  '*.csv' , emit: csv\n\n    script:\n    \"\"\"\n    summarize_qc_csv.py --input $csv --read-counts $readcounts --prefix $prefix\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    summarize_qc_csv.py --input $csv --read-counts $readcounts --prefix $prefix\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "csv",
            "readcounts",
            "prefix"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "\nprocess UNTAR {\n    tag \"$archive\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path archive\n    \n    output:\n    path \"$untar\"       , emit: untar\n    path \"*.version.txt\", emit: version\n    \n    script:\n    def software = getSoftwareName(task.process) \n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process) \n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$archive\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_FLAGSTAT": {
        "name_process": "SAMTOOLS_FLAGSTAT",
        "string_process": "\nprocess SAMTOOLS_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools flagstat $bam > ${bam}.flagstat\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools flagstat $bam > ${bam}.flagstat\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SNPEFF_BUILD_DB": {
        "name_process": "SNPEFF_BUILD_DB",
        "string_process": "\nprocess SNPEFF_BUILD_DB {\n    tag \"$fasta\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::snpeff=5.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1'\n    } else {\n        container 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1'\n    }\n\n    input:\n    path fasta\n    path gff\n\n    output:\n    path(\"snpeff_db\"), emit: db\n    path(\"*.config\"),  emit: config\n        \n    script:\n    def software = getSoftwareName(task.process)\n    def lastPath   = fasta.lastIndexOf(File.separator)\n    def lastExt    = fasta.lastIndexOf(\".\")\n    def index_base = params.fasta.substring(lastPath+1,lastExt)\n        \n    \"\"\"\n    echo \"${index_base}.genome : ${index_base}\" > snpeff.config   \n    build_snpeff_db.py --reference $fasta --gff $gff --config snpeff.config --snpeff-db snpeff_db\n    echo \\$(snpEff -version 2>&1) | sed 's/^.*SnpEff //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n    \n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def lastPath   = fasta.lastIndexOf(File.separator)\n    def lastExt    = fasta.lastIndexOf(\".\")\n    def index_base = params.fasta.substring(lastPath+1,lastExt)\n        \n    \"\"\"\n    echo \"${index_base}.genome : ${index_base}\" > snpeff.config   \n    build_snpeff_db.py --reference $fasta --gff $gff --config snpeff.config --snpeff-db snpeff_db\n    echo \\$(snpEff -version 2>&1) | sed 's/^.*SnpEff //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::snpeff=5.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' } else { container 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "SNPEFF_ANNOTATE": {
        "name_process": "SNPEFF_ANNOTATE",
        "string_process": "\nprocess SNPEFF_ANNOTATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::snpeff=5.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1'\n    } else {\n        container 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1'\n    }\n\n    input:\n    tuple val(meta), path(vcf)\n    path fasta\n    path gff\n\n    output:\n    tuple val(meta), path(\"*.snpEff.csv\")   , emit: csv\n    tuple val(meta), path(\"*.vcf.gz*\")      , emit: vcf\n    tuple val(meta), path(\"*.txt\")          , emit: txt\n    tuple val(meta), path(\"*.html\")         , emit: html\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                \n                                                     \n                                                                  \n\n    \"\"\"\n    annotate_variants.py \\\\\n        --reference $fasta \\\\\n        --gff $gff \\\\\n        --vcf-file $vcf \\\\\n        --csv ${prefix}.snpEff.csv \\\\\n        --vcf-out ${prefix}.snpEff.vcf.gz\n\n    echo \\$(snpEff -version 2>&1) | sed 's/^.*SnpEff //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                \n                                                     \n                                                                  \n\n    \"\"\"\n    annotate_variants.py \\\\\n        --reference $fasta \\\\\n        --gff $gff \\\\\n        --vcf-file $vcf \\\\\n        --csv ${prefix}.snpEff.csv \\\\\n        --vcf-out ${prefix}.snpEff.vcf.gz\n\n    echo \\$(snpEff -version 2>&1) | sed 's/^.*SnpEff //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf",
            "fasta",
            "gff"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::snpeff=5.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' } else { container 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.9--pyh9f0ad1d_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.9--pyh9f0ad1d_0\"\n    }\n\n    input:\n    path multiqc_config\n    path multiqc_custom_config\n    path software_versions\n    path workflow_summary\n    path ('fastqc/*')\n    path ('fastp/log/*')\n    path ('trimmomatic/log/*')\n            'bowtie2/*' \n    \n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n\n    script:\n    def software      = getSoftwareName(task.process)\n    def custom_config = params.multiqc_config ? \"--config $multiqc_custom_config\" : ''\n    \"\"\"\n    multiqc -f $options.args $custom_config .\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software      = getSoftwareName(task.process)\n    def custom_config = params.multiqc_config ? \"--config $multiqc_custom_config\" : ''\n    \"\"\"\n    multiqc -f $options.args $custom_config .\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_config",
            "multiqc_custom_config",
            "software_versions",
            "workflow_summary"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.9--pyh9f0ad1d_0\" } else { container \"quay.io/biocontainers/multiqc:1.9--pyh9f0ad1d_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "READ_COUNT": {
        "name_process": "READ_COUNT",
        "string_process": "\nprocess READ_COUNT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n    \n    input:\n    tuple val(meta), path(reads)    \n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    tuple val(meta), path(\"*.csv\"),   emit: csv\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (params.single_end) {\n        \"\"\"\n        reformat.sh in=$reads -Xmx4G 2> ${prefix}.stats\n        parse_read_counts.py --stats ${prefix}.stats --output ${prefix}.csv\n        \"\"\"\n    } else {\n        \"\"\"\n        reformat.sh in=${reads[0]} in1=${reads[1]} -Xmx4G 2> ${prefix}.stats\n        parse_read_counts.py --stats ${prefix}.stats --output ${prefix}.csv\n        \"\"\"\n    }    \n}",
        "nb_lignes_process": 27,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (params.single_end) {\n        \"\"\"\n        reformat.sh in=$reads -Xmx4G 2> ${prefix}.stats\n        parse_read_counts.py --stats ${prefix}.stats --output ${prefix}.csv\n        \"\"\"\n    } else {\n        \"\"\"\n        reformat.sh in=${reads[0]} in1=${reads[1]} -Xmx4G 2> ${prefix}.stats\n        parse_read_counts.py --stats ${prefix}.stats --output ${prefix}.csv\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    },
    "BWA_MEM": {
        "name_process": "BWA_MEM",
        "string_process": "\nprocess BWA_MEM {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.12\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:66ed1b38d280722529bb8a0167b0cf02f8a0b488-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:66ed1b38d280722529bb8a0167b0cf02f8a0b488-0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def read_group = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa mem \\\\\n        $options.args \\\\\n        $read_group \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools view $options.args2 -@ $task.cpus -bhS -o ${prefix}.bam -\n\n    echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def read_group = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa mem \\\\\n        $options.args \\\\\n        $read_group \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools view $options.args2 -@ $task.cpus -bhS -o ${prefix}.bam -\n\n    echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.12\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:66ed1b38d280722529bb8a0167b0cf02f8a0b488-0\" } else { container \"quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:66ed1b38d280722529bb8a0167b0cf02f8a0b488-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "COVERAGE_PLOTS": {
        "name_process": "COVERAGE_PLOTS",
        "string_process": "\nprocess COVERAGE_PLOTS {\n    tag \"${prefix}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n    \n    input:\n    path            consensus_fasta\n    path            genomecov_bed\n    file            metadata\n    file            consensus_summary\n    val             prefix\n\n    output:\n    path \"*.pdf\"\n\n    script:\n    def meta   = params.metadata ? \"--metadata ${metadata}\" :  \" \"\n\n                             \n           \"\"\"\n    //     plot_nucleotide_densities.r --consensus_files $consensus_fasta --prefix $prefix --outdir ./\n    //     plot_genome_coverage.r --coverage_files $genomecov_bed $meta --prefix $prefix --outdir ./\n    //     plot_coverage_vs_ct.r --summary $consensus_summary $meta --prefix $prefix --outdir ./\n    //     \"\"\"\n               \n       \"\"\"\n    // plot_nucleotide_densities.r --consensus_files $consensus_fasta --prefix $prefix --outdir ./\n    // plot_genome_coverage.r --coverage_files $genomecov_bed --prefix $prefix --outdir ./\n    // plot_coverage_vs_ct.r --summary $consensus_summary --prefix $prefix --outdir ./\n    // \"\"\"\n\n    \"\"\"\n    plot_nucleotide_densities.r --consensus_files $consensus_fasta --prefix $prefix --outdir ./\n    plot_genome_coverage.r --coverage_files $genomecov_bed $meta --prefix $prefix --outdir ./\n    plot_coverage_vs_ct.r --summary $consensus_summary $meta --prefix $prefix --outdir ./\n    \"\"\"\n       \n    \n}",
        "nb_lignes_process": 40,
        "string_script": "    def meta   = params.metadata ? \"--metadata ${metadata}\" :  \" \"\n\n                             \n           \"\"\"\n    //     plot_nucleotide_densities.r --consensus_files $consensus_fasta --prefix $prefix --outdir ./\n    //     plot_genome_coverage.r --coverage_files $genomecov_bed $meta --prefix $prefix --outdir ./\n    //     plot_coverage_vs_ct.r --summary $consensus_summary $meta --prefix $prefix --outdir ./\n    //     \"\"\"\n               \n       \"\"\"\n    // plot_nucleotide_densities.r --consensus_files $consensus_fasta --prefix $prefix --outdir ./\n    // plot_genome_coverage.r --coverage_files $genomecov_bed --prefix $prefix --outdir ./\n    // plot_coverage_vs_ct.r --summary $consensus_summary --prefix $prefix --outdir ./\n    // \"\"\"\n\n    \"\"\"\n    plot_nucleotide_densities.r --consensus_files $consensus_fasta --prefix $prefix --outdir ./\n    plot_genome_coverage.r --coverage_files $genomecov_bed $meta --prefix $prefix --outdir ./\n    plot_coverage_vs_ct.r --summary $consensus_summary $meta --prefix $prefix --outdir ./\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "consensus_fasta",
            "genomecov_bed",
            "metadata",
            "consensus_summary",
            "prefix"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_STATS": {
        "name_process": "MERGE_STATS",
        "string_process": "\nprocess MERGE_STATS {\n    tag \"${prefix}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options) }\n\n    input:\n    path raw\n    path trimmed\n    path mapped\n    val  prefix\n\n    output:\n    path  '*.csv' , emit: csv\n\n    script:\n    \n    \n\n    if (!params.run_id) {\n        \"\"\"\n        merge_stats.py --raw $raw  --trimmed $trimmed --mapped $mapped --prefix $prefix\n        \"\"\"\n    } else {\n        \"\"\"\n        merge_stats.py --raw $raw  --trimmed $trimmed --mapped $mapped --prefix $prefix\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 29,
        "string_script": "    if (!params.run_id) {\n        \"\"\"\n        merge_stats.py --raw $raw  --trimmed $trimmed --mapped $mapped --prefix $prefix\n        \"\"\"\n    } else {\n        \"\"\"\n        merge_stats.py --raw $raw  --trimmed $trimmed --mapped $mapped --prefix $prefix\n        \"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "raw",
            "trimmed",
            "mapped",
            "prefix"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__viclara",
        "directive": [
            "tag \"${prefix}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options) }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "Align_Input_Volumes": {
        "name_process": "Align_Input_Volumes",
        "string_process": "\nprocess Align_Input_Volumes {\n    tag \"${sid}\"\n    publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'\n\n    input:\n        tuple val(sid), file(pdw), file(mtw), file(t1w) from mtsat_for_alignment\n\n    output:\n        tuple val(sid), \"${sid}_acq-MTon_MTS_aligned.nii.gz\", \"${sid}_acq-MToff_MTS_aligned.nii.gz\"\\\n        into mtsat_from_alignment\n        file \"${sid}_acq-MTon_MTS_aligned.nii.gz\"\n        file \"${sid}_acq-MToff_MTS_aligned.nii.gz\"\n        file \"${sid}_mtw_to_t1w_displacement.*.mat\"\n        file \"${sid}_pdw_to_t1w_displacement.*.mat\"\n\n    script:\n        \"\"\"\n        antsRegistration -d $params.ants_dim\\\\ \n            --float 0\\\\ \n            -o [${sid}_mtw_to_t1w_displacement.mat,${sid}_acq-MTon_MTS_aligned.nii.gz]\\\\ \n            --transform $params.ants_transform\\\\ \n            --metric $params.ants_metric[$t1w,$mtw,$params.ants_metric_weight,\\\\\n            $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct]\\\\ \n            --convergence $params.ants_convergence\\\\ \n            --shrink-factors $params.ants_shrink\\\\ \n            --smoothing-sigmas $params.ants_smoothing\n\n        antsRegistration -d $params.ants_dim\\\\ \n            --float 0\\\\ \n            -o [${sid}_pdw_to_t1w_displacement.mat,${sid}_acq-MToff_MTS_aligned.nii.gz]\\\\ \n            --transform $params.ants_transform\\\\ \n            --metric $params.ants_metric[$t1w,$pdw,$params.ants_metric_weight,\\\\\n            $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct]\\\\ \n            --convergence $params.ants_convergence\\\\ \n            --shrink-factors $params.ants_shrink\\\\ \n            --smoothing-sigmas $params.ants_smoothing\n        \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "        \"\"\"\n        antsRegistration -d $params.ants_dim\\\\ \n            --float 0\\\\ \n            -o [${sid}_mtw_to_t1w_displacement.mat,${sid}_acq-MTon_MTS_aligned.nii.gz]\\\\ \n            --transform $params.ants_transform\\\\ \n            --metric $params.ants_metric[$t1w,$mtw,$params.ants_metric_weight,\\\\\n            $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct]\\\\ \n            --convergence $params.ants_convergence\\\\ \n            --shrink-factors $params.ants_shrink\\\\ \n            --smoothing-sigmas $params.ants_smoothing\n\n        antsRegistration -d $params.ants_dim\\\\ \n            --float 0\\\\ \n            -o [${sid}_pdw_to_t1w_displacement.mat,${sid}_acq-MToff_MTS_aligned.nii.gz]\\\\ \n            --transform $params.ants_transform\\\\ \n            --metric $params.ants_metric[$t1w,$pdw,$params.ants_metric_weight,\\\\\n            $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct]\\\\ \n            --convergence $params.ants_convergence\\\\ \n            --shrink-factors $params.ants_shrink\\\\ \n            --smoothing-sigmas $params.ants_smoothing\n        \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mtsat_for_alignment"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mtsat_from_alignment"
        ],
        "nb_outputs": 1,
        "name_workflow": "agahkarakuzu__mtsatflow",
        "directive": [
            "tag \"${sid}\"",
            "publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "Extract_Brain": {
        "name_process": "Extract_Brain",
        "string_process": "\nprocess Extract_Brain{\n    tag \"${sid}\"\n    publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'\n\n    when:\n        params.USE_BET == true\n\n    input:\n        tuple val(sid), file(t1w) from mtsat_for_bet\n\n    output:\n        tuple val(sid), \"${sid}_acq-T1w_mask.nii.gz\" optional true into mtsat_from_bet\n        file \"${sid}_acq-T1w_mask.nii.gz\"\n\n    script:\n         if (params.bet_recursive){\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -R -n -f $params.bet_threshold\n        \"\"\"}\n        else{\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -n -f $params.bet_threshold\n        \"\"\"\n        }\n\n}",
        "nb_lignes_process": 25,
        "string_script": "         if (params.bet_recursive){\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -R -n -f $params.bet_threshold\n        \"\"\"}\n        else{\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -n -f $params.bet_threshold\n        \"\"\"\n        }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "DBETH"
        ],
        "tools_url": [
            "https://bio.tools/dbeth"
        ],
        "tools_dico": [
            {
                "name": "DBETH",
                "uri": "https://bio.tools/dbeth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2840",
                            "term": "Toxicology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Human biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Humans"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature recognition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of sequences, structures, interaction networks and analytical results for 229 exotoxins, from 26 different human pathogenic bacterial genus. All toxins are classified into 24 different Toxin classes. The aim is to provide a comprehensive database for human pathogenic bacterial exotoxins.",
                "homepage": "http://www.hpppi.iicb.res.in/btox/"
            }
        ],
        "inputs": [
            "mtsat_for_bet"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mtsat_from_bet"
        ],
        "nb_outputs": 1,
        "name_workflow": "agahkarakuzu__mtsatflow",
        "directive": [
            "tag \"${sid}\"",
            "publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'"
        ],
        "when": "params.USE_BET == true",
        "stub": ""
    },
    "Fit_MTsat_With_B1map_With_Bet": {
        "name_process": "Fit_MTsat_With_B1map_With_Bet",
        "string_process": "\nprocess Fit_MTsat_With_B1map_With_Bet{\n    tag \"${sid}\"\n    publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'\n\n    when:\n        params.USE_B1 == true && params.USE_BET == true\n\n    input:\n        tuple val(sid), file(t1w), file(mtw_reg), file(pdw_reg),\\\n        file(b1map), file(t1wj), file(mtwj), file(pdwj), file(mask) from mtsat_with_b1_bet_merged\n        \n    output:\n        file \"${sid}_T1map.nii.gz\" \n        file \"${sid}_MTsat.nii.gz\"\n        file \"${sid}_T1map.json\" \n        file \"${sid}_MTsat.json\"  \n        file \"${sid}_mt_sat.qmrlab.mat\"\n\n    script: \n        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','b1map','$b1map','b1factor',$params.COR_B1,'qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','b1map','$b1map','b1factor',$params.COR_B1,'qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1w",
            "mtw_reg",
            "pdw_reg",
            "mtsat_with_b1_bet_merged"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "agahkarakuzu__mtsatflow",
        "directive": [
            "tag \"${sid}\"",
            "publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'"
        ],
        "when": "params.USE_B1 == true && params.USE_BET == true",
        "stub": ""
    },
    "Fit_MTsat_With_B1map_Without_Bet": {
        "name_process": "Fit_MTsat_With_B1map_Without_Bet",
        "string_process": "\nprocess Fit_MTsat_With_B1map_Without_Bet{\n    tag \"${sid}\"\n    publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'\n\n    when:\n        params.USE_B1 == true && params.USE_BET == false\n\n    input:\n        tuple val(sid), file(t1w), file(mtw_reg), file(pdw_reg),\\\n        file(b1map), file(t1wj), file(mtwj), file(pdwj) from mtsat_with_b1\n\n    output:\n        file \"${sid}_T1map.nii.gz\" \n        file \"${sid}_MTsat.nii.gz\" \n        file \"${sid}_T1map.json\" \n        file \"${sid}_MTsat.json\" \n        file \"${sid}_mt_sat.qmrlab.mat\"\n\n    script: \n        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','b1map','$b1map','b1factor',$params.COR_B1,'qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"\n               \n}",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','b1map','$b1map','b1factor',$params.COR_B1,'qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1w",
            "mtw_reg",
            "pdw_reg",
            "mtsat_with_b1"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "agahkarakuzu__mtsatflow",
        "directive": [
            "tag \"${sid}\"",
            "publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'"
        ],
        "when": "params.USE_B1 == true && params.USE_BET == false",
        "stub": ""
    },
    "Fit_MTsat_Without_B1map_With_Bet": {
        "name_process": "Fit_MTsat_Without_B1map_With_Bet",
        "string_process": "\nprocess Fit_MTsat_Without_B1map_With_Bet{\n    tag \"${sid}\"\n    publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'\n    \n    when:\n        params.USE_B1 == false && params.USE_BET==true\n\n    input:\n        tuple val(sid), file(t1w), file(mtw_reg), file(pdw_reg),\\\n        file(t1wj), file(mtwj), file(pdwj), file(mask) from mtsat_without_b1_bet_merged\n\n    output:\n        file \"${sid}_T1map.nii.gz\" \n        file \"${sid}_MTsat.nii.gz\" \n        file \"${sid}_T1map.json\" \n        file \"${sid}_MTsat.json\" \n        file \"${sid}_mt_sat.qmrlab.mat\"\n\n    script: \n        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1w",
            "mtw_reg",
            "pdw_reg",
            "mtsat_without_b1_bet_merged"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "agahkarakuzu__mtsatflow",
        "directive": [
            "tag \"${sid}\"",
            "publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'"
        ],
        "when": "params.USE_B1 == false && params.USE_BET==true",
        "stub": ""
    },
    "Fit_MTsat_Without_B1map_Without_Bet": {
        "name_process": "Fit_MTsat_Without_B1map_Without_Bet",
        "string_process": "\nprocess Fit_MTsat_Without_B1map_Without_Bet{\n    tag \"${sid}\"\n    publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'\n    \n    when:\n        params.USE_B1 == false && params.USE_BET==false\n\n    input:\n        tuple val(sid), file(t1w), file(mtw_reg), file(pdw_reg),\\\n        file(t1wj), file(mtwj), file(pdwj) from mtsat_without_b1\n\n    output:\n        file \"${sid}_T1map.nii.gz\" \n        file \"${sid}_MTsat.nii.gz\"\n        file \"${sid}_T1map.json\" \n        file \"${sid}_MTsat.json\"  \n        file \"${sid}_mt_sat.qmrlab.mat\"\n\n    script: \n        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd --no-gui --eval \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n            wget -O mt_sat_wrapper.m https://raw.githubusercontent.com/agahkarakuzu/mtsatflow/master/mt_sat_wrapper.m\n\n            $params.runcmd --no-gui --eval \"mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','qMRLab','$params.qMRLab_DIR'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1w",
            "mtw_reg",
            "pdw_reg",
            "mtsat_without_b1"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "agahkarakuzu__mtsatflow",
        "directive": [
            "tag \"${sid}\"",
            "publishDir \"$root/derivatives/qMRLab/${sid}\", mode: 'copy'"
        ],
        "when": "params.USE_B1 == false && params.USE_BET==false",
        "stub": ""
    }
}
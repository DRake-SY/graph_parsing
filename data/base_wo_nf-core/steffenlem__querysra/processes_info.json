{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy',\n            saveAs: { filename ->\n                if (filename.indexOf(\".csv\") > 0) filename\n                else null\n            }\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    echo \\$(R --version 2>&1) > v_R.txt\n    echo \\$(python --version 2>&1) > v_python.txt\n    echo \\$(pip freeze | grep Click 2>&1) > v_click.txt\n    Rscript -e \"library(argparse); write(x=as.character(packageVersion('argparse')), file='v_argparse.txt')\"\n    Rscript -e \"library(SRAdb); write(x=as.character(packageVersion('SRAdb')), file='v_SRAdb.txt')\"\n    Rscript -e \"library(stringr); write(x=as.character(packageVersion('stringr')), file='v_stringr.txt')\"\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    echo \\$(R --version 2>&1) > v_R.txt\n    echo \\$(python --version 2>&1) > v_python.txt\n    echo \\$(pip freeze | grep Click 2>&1) > v_click.txt\n    Rscript -e \"library(argparse); write(x=as.character(packageVersion('argparse')), file='v_argparse.txt')\"\n    Rscript -e \"library(SRAdb); write(x=as.character(packageVersion('SRAdb')), file='v_SRAdb.txt')\"\n    Rscript -e \"library(stringr); write(x=as.character(packageVersion('stringr')), file='v_stringr.txt')\"\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "steffenlem__querysra",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "SRAdb": {
        "name_process": "SRAdb",
        "string_process": "\nprocess SRAdb {\n    publishDir \"${params.outdir}/SRAdb\", mode: 'copy'\n\n    input:\n    file(keyword_file) from keyword_channel\n    file(database_file) from sradb_file\n\n    output:\n    file \"prefiltering.tsv\" into prefiltered_runs\n\n    script:\n    def sradb = database_file != 'NO_FILE' ? \"-db $database_file\" : ''\n    \"\"\"\n    query_sra.R -k $keyword_file $sradb -t $params.taxon_id -l $params.library_strategy \n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    def sradb = database_file != 'NO_FILE' ? \"-db $database_file\" : ''\n    \"\"\"\n    query_sra.R -k $keyword_file $sradb -t $params.taxon_id -l $params.library_strategy \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "keyword_channel",
            "sradb_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "prefiltered_runs"
        ],
        "nb_outputs": 1,
        "name_workflow": "steffenlem__querysra",
        "directive": [
            "publishDir \"${params.outdir}/SRAdb\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "keyword_filtering": {
        "name_process": "keyword_filtering",
        "string_process": "\nprocess keyword_filtering {\n    publishDir \"${params.outdir}/keyword_filtering\", mode: 'copy'\n\n    input:\n    file(filtered_sra) from prefiltered_runs\n    file(blacklist) from blacklist_file\n    file(classes_keywords_list) from classes_keywords_file\n\n    output:\n    file \"*\" into outfiles\n\n    script:\n    def get_access_status_param = params.get_access_status ? \"--get_access_status\" : ''\n    def ncbi_api_key_param = params.ncbi_api_key ? \"--ncbi_api_key $params.ncbi_api_key\" : ''\n    \"\"\"\n    sra_filtering.py -i $filtered_sra -o . -b $blacklist -k  $classes_keywords_list $get_access_status_param $ncbi_api_key_param\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    def get_access_status_param = params.get_access_status ? \"--get_access_status\" : ''\n    def ncbi_api_key_param = params.ncbi_api_key ? \"--ncbi_api_key $params.ncbi_api_key\" : ''\n    \"\"\"\n    sra_filtering.py -i $filtered_sra -o . -b $blacklist -k  $classes_keywords_list $get_access_status_param $ncbi_api_key_param\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefiltered_runs",
            "blacklist_file",
            "classes_keywords_file"
        ],
        "nb_inputs": 3,
        "outputs": [
            "outfiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "steffenlem__querysra",
        "directive": [
            "publishDir \"${params.outdir}/keyword_filtering\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file output_docs from ch_output_docs\n\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "steffenlem__querysra",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n    .fromFilePairs(\"$params.input/**/bundles/*.trk\",\n                   size: -1) { it.parent.parent.name }\n    .into{bundles_for_rm_invalid; bundles_for_fixel_afd}",
        "origin": [],
        "gives": [
            [
                "bundles_for_rm_invalid",
                "P"
            ],
            [
                "bundles_for_fixel_afd",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromFilePairs(\"$params.input/**/metrics/*.nii.gz\",\n                   size: -1) { it.parent.parent.name }\n    .set{in_metrics}",
        "origin": [],
        "gives": [
            [
                "in_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromFilePairs(\"$params.input/**/centroids/*.trk\",\n        size: -1) { it.parent.parent.name }\n    .into{centroids_for_resample; in_centroids_check}",
        "origin": [],
        "gives": [
            [
                "centroids_for_resample",
                "P"
            ],
            [
                "in_centroids_check",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromFilePairs(\"$params.input/**/*lesion_mask.nii.gz\",\n        size: -1) { it.parent.name }\n    .set{lesion_for_lesion_load}",
        "origin": [],
        "gives": [
            [
                "lesion_for_lesion_load",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromFilePairs(\"$params.input/**/*fodf.nii.gz\",\n        size: -1) { it.parent.name }\n    .set{fodf_for_fixel_afd}",
        "origin": [],
        "gives": [
            [
                "fodf_for_fixel_afd",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "in_metrics\n    .set{metrics_for_rename}",
        "origin": [
            [
                "in_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_for_rename",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "bundles_for_fixel_afd\n    .join(fodf_for_fixel_afd)\n    .set{bundle_fodf_for_fixel_afd}",
        "origin": [
            [
                "bundles_for_fixel_afd",
                "P"
            ],
            [
                "fodf_for_fixel_afd",
                "P"
            ]
        ],
        "gives": [
            [
                "bundle_fodf_for_fixel_afd",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "centroids_provided\n        .set{centroids_for_label_and_distance_map}",
        "origin": [
            [
                "centroids_provided",
                "P"
            ]
        ],
        "gives": [
            [
                "centroids_for_label_and_distance_map",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "centroids_computed\n        .set{centroids_for_label_and_distance_map}",
        "origin": [
            [
                "centroids_computed",
                "P"
            ]
        ],
        "gives": [
            [
                "centroids_for_label_and_distance_map",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "bundles_for_label_and_distance_map\n    .join(centroids_for_label_and_distance_map, by: 0)\n    .set{bundles_centroids_for_label_and_distance_map}",
        "origin": [
            [
                "bundles_for_label_and_distance_map",
                "P"
            ]
        ],
        "gives": [
            [
                "bundles_centroids_for_label_and_distance_map",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "lesion_for_lesion_load\n    .join(bundles_for_lesion_load, by: 0)\n    .join(voxel_label_map_for_lesion_load, by: 0)\n    .set{lesion_bundles_voxel_label_maps_for_lesion_load}",
        "origin": [
            [
                "lesion_for_lesion_load",
                "P"
            ]
        ],
        "gives": [
            [
                "lesion_bundles_voxel_label_maps_for_lesion_load",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "metrics_for_endpoints_roi_stats\n    .mix(fixel_afd_for_endpoints_roi_stats)\n    .groupTuple(by: 0)\n     .map{it -> [it[0], it[1..-1].flatten()]}\n    .set{metrics_afd_for_endpoints_roi_stats}",
        "origin": [
            [
                "metrics_for_endpoints_roi_stats",
                "P"
            ],
            [
                "fixel_afd_for_endpoints_roi_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_afd_for_endpoints_roi_stats",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "metrics_afd_for_endpoints_roi_stats\n    .combine(endpoints_maps_for_roi_stats, by: 0)\n    .set{metrics_endpoints_for_roi_stats}",
        "origin": [
            [
                "metrics_afd_for_endpoints_roi_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_endpoints_for_roi_stats",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "metrics_for_endpoints_metrics\n    .mix(fixel_afd_for_endpoints_metrics)\n    .groupTuple(by: 0)\n    .map{it -> [it[0], it[1..-1].flatten()]}\n    .set{metrics_afd_for_endpoints_metrics}",
        "origin": [
            [
                "metrics_for_endpoints_metrics",
                "P"
            ],
            [
                "fixel_afd_for_endpoints_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_afd_for_endpoints_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "bundles_for_endpoints_metrics\n    .flatMap{ sid, bundles -> bundles.collect{[sid, it]} }\n    .combine(metrics_afd_for_endpoints_metrics, by: 0)\n    .set{metrics_bundles_for_endpoints_metrics}",
        "origin": [
            [
                "bundles_for_endpoints_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_bundles_for_endpoints_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "metrics_for_mean_std\n    .mix(fixel_afd_for_mean_std)\n    .groupTuple(by: 0)\n     .map{it -> [it[0], it[1..-1].flatten()]}\n    .set{metrics_afd_for_mean_std}",
        "origin": [
            [
                "metrics_for_mean_std",
                "P"
            ],
            [
                "fixel_afd_for_mean_std",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_afd_for_mean_std",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "metrics_afd_for_mean_std\n    .combine(bundles_for_mean_std, by: 0)\n    .set{metrics_bundles_for_mean_std}PROCESS DEF Bundle_Mean_Std",
        "origin": [
            [
                "metrics_afd_for_mean_std",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_bundles_for_mean_std",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "metrics_for_mean_std_per_point\n    .mix(fixel_afd_for_mean_std_per_point)\n    .groupTuple(by: 0)\n     .map{it -> [it[0], it[1..-1].flatten()]}\n    .set{metrics_afd_for_std_per_point}",
        "origin": [
            [
                "metrics_for_mean_std_per_point",
                "P"
            ],
            [
                "fixel_afd_for_mean_std_per_point",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_afd_for_std_per_point",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "metrics_afd_for_std_per_point\n    .join(bundles_for_mean_std_per_point, by: 0)\n    .join(label_distance_maps_for_mean_std_per_point, by: 0)\n    .set{metrics_bundles_label_distance_maps_for_mean_std_per_point}",
        "origin": [
            [
                "metrics_afd_for_std_per_point",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_bundles_label_distance_maps_for_mean_std_per_point",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "lesion_load_to_aggregate\n    .collect()\n    .set{all_lesion_load_to_aggregate}",
        "origin": [
            [
                "lesion_load_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_lesion_load_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "lesion_load_per_point_to_aggregate\n    .collect()\n    .set{all_lesion_load_per_point_to_aggregate}",
        "origin": [
            [
                "lesion_load_per_point_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_lesion_load_per_point_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "endpoints_maps_to_aggregate\n    .collect()\n    .set{all_aggregate_endspoints_map}",
        "origin": [
            [
                "endpoints_maps_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_aggregate_endspoints_map",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "endpoints_metric_stats_to_aggregate\n    .collect()\n    .set{all_aggregate_all_endpoints_metric_stats}",
        "origin": [
            [
                "endpoints_metric_stats_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_aggregate_all_endpoints_metric_stats",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "bundles_length_stats_to_aggregate\n    .collect()\n    .set{all_bundle_length_stats_to_aggretate}",
        "origin": [
            [
                "bundles_length_stats_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_bundle_length_stats_to_aggretate",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "mean_std_to_aggregate\n    .collect()\n    .set{all_mean_std_to_aggregate}",
        "origin": [
            [
                "mean_std_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_mean_std_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "volumes_to_aggregate\n    .collect()\n    .set{all_volumes_to_aggregate}",
        "origin": [
            [
                "volumes_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_volumes_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "streamline_counts_to_aggregate\n    .collect()\n    .set{all_streamline_counts_to_aggregate}",
        "origin": [
            [
                "streamline_counts_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_streamline_counts_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "volumes_per_label_to_aggregate\n    .collect()\n    .set{all_volumes_per_label_to_aggregate}",
        "origin": [
            [
                "volumes_per_label_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_volumes_per_label_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "mean_std_per_point_to_aggregate\n    .collect()\n    .set{all_mean_std_per_point_to_aggregate}",
        "origin": [
            [
                "mean_std_per_point_to_aggregate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_mean_std_per_point_to_aggregate",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "population_mean_std_per_point\n    .concat(population_lesion_load_per_point)\n    .set{population_mean_std_lesion_per_point}",
        "origin": [
            [
                "population_mean_std_per_point",
                "P"
            ],
            [
                "population_lesion_load_per_point",
                "P"
            ]
        ],
        "gives": [
            [
                "population_mean_std_lesion_per_point",
                "P"
            ]
        ]
    }
}
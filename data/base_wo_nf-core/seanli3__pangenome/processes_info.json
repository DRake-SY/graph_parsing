{
    "edyeet": {
        "name_process": "edyeet",
        "string_process": "\nprocess edyeet {\n  input:\n  tuple val(f), path(fasta)\n\n  output:\n  tuple val(f), path(fasta), path(\"${f}.paf\")\n\n  \"\"\"\n  edyeet ${edyeet_exclude_cmd} \\\n     -s ${params.edyeet_segment_length} \\\n     ${edyeet_merge_cmd} \\\n     ${edyeet_split_cmd} \\\n     -p ${params.edyeet_map_pct_id} \\\n     -n ${params.edyeet_n_secondary} \\\n     -a ${params.edyeet_align_pct_id} \\\n     -k ${params.edyeet_mash_kmer} \\\n     -t ${task.cpus} \\\n     $fasta $fasta \\\n     >${f}.paf \n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  edyeet ${edyeet_exclude_cmd} \\\n     -s ${params.edyeet_segment_length} \\\n     ${edyeet_merge_cmd} \\\n     ${edyeet_split_cmd} \\\n     -p ${params.edyeet_map_pct_id} \\\n     -n ${params.edyeet_n_secondary} \\\n     -a ${params.edyeet_align_pct_id} \\\n     -k ${params.edyeet_mash_kmer} \\\n     -t ${task.cpus} \\\n     $fasta $fasta \\\n     >${f}.paf \n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "f",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "f"
        ],
        "nb_outputs": 1,
        "name_workflow": "seanli3__pangenome",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "seqwish": {
        "name_process": "seqwish",
        "string_process": "\nprocess seqwish {\n  input:\n  tuple val(f), path(fasta), path(alignment)\n\n  output:\n    tuple val(f), path(\"${f}.seqwish.gfa\")\n\n  script:\n    \"\"\"\n    seqwish \\\n      -t ${task.cpus} \\\n      -s $fasta \\\n      -p $alignment \\\n      -k ${params.seqwish_min_match_length} \\\n      -g ${f}.seqwish.gfa -P \\\n      -B ${params.seqwish_transclose_batch}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    seqwish \\\n      -t ${task.cpus} \\\n      -s $fasta \\\n      -p $alignment \\\n      -k ${params.seqwish_min_match_length} \\\n      -g ${f}.seqwish.gfa -P \\\n      -B ${params.seqwish_transclose_batch}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "f",
            "fasta",
            "alignment"
        ],
        "nb_inputs": 3,
        "outputs": [
            "f"
        ],
        "nb_outputs": 1,
        "name_workflow": "seanli3__pangenome",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "smoothxg": {
        "name_process": "smoothxg",
        "string_process": "\nprocess smoothxg {\n  input:\n    tuple val(f), path(graph)\n\n  output:\n    path(\"${f}.smooth.gfa\"), emit: gfa_smooth\n    path(\"${f}*.consensus*.gfa\"), emit: consensus_smooth\n\n  script:\n    \"\"\"\n    smoothxg \\\n      -t ${task.cpus} \\\n      -g $graph \\\n      -w ${params.smoothxg_max_block_weight} \\\n      -j ${params.smoothxg_max_path_jump} \\\n      -e ${params.smoothxg_max_edge_jump} \\\n      -l ${params.smoothxg_max_poa_length} \\\n      -o ${f}.smooth.gfa \\\n      -m ${f}.smooth.maf \\\n      -s ${f}.consensus \\\n      -a \\\n      -C ${params.smoothxg_consensus_jump_max}\n    \"\"\"  \n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    smoothxg \\\n      -t ${task.cpus} \\\n      -g $graph \\\n      -w ${params.smoothxg_max_block_weight} \\\n      -j ${params.smoothxg_max_path_jump} \\\n      -e ${params.smoothxg_max_edge_jump} \\\n      -l ${params.smoothxg_max_poa_length} \\\n      -o ${f}.smooth.gfa \\\n      -m ${f}.smooth.maf \\\n      -s ${f}.consensus \\\n      -a \\\n      -C ${params.smoothxg_consensus_jump_max}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "f",
            "graph"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seanli3__pangenome",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "odgiBuild": {
        "name_process": "odgiBuild",
        "string_process": "\nprocess odgiBuild {\n  input:\n  path(graph)\n\n  output:\n  path(\"${graph}.og\")\n\n  \"\"\"\n  odgi build -g $graph -o ${graph}.og\n  \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n  odgi build -g $graph -o ${graph}.og\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "graph"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seanli3__pangenome",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "odgiStats": {
        "name_process": "odgiStats",
        "string_process": "\nprocess odgiStats {\n  publishDir \"${params.outdir}/odgiStats\", mode: 'copy'\n\n  input: \n  path(graph)\n\n  output:\n  path(\"${graph}.stats\")\n\n  \"\"\"\n  odgi stats -i $graph -S -s -d -l > \"${graph}.stats\" 2>&1\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n  odgi stats -i $graph -S -s -d -l > \"${graph}.stats\" 2>&1\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "graph"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seanli3__pangenome",
        "directive": [
            "publishDir \"${params.outdir}/odgiStats\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "odgiViz": {
        "name_process": "odgiViz",
        "string_process": "\nprocess odgiViz {\n  publishDir \"${params.outdir}/odgiViz\", mode: 'copy'\n\n  input:\n  path(graph)\n\n  output:\n  path(\"${graph}.viz_mqc.png\")\n\n  \"\"\"\n  odgi viz \\\n    -i $graph \\\n    -o ${graph}.viz_mqc.png \\\n    -x 1500 -y 500 -P 5\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n  odgi viz \\\n    -i $graph \\\n    -o ${graph}.viz_mqc.png \\\n    -x 1500 -y 500 -P 5\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "graph"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seanli3__pangenome",
        "directive": [
            "publishDir \"${params.outdir}/odgiViz\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "odgiChop": {
        "name_process": "odgiChop",
        "string_process": "\nprocess odgiChop {\n  input:\n  path(graph)\n\n  output:\n  path(\"${graph}.chop.og\")\n\n  \"\"\"\n  odgi chop -i $graph -c 100 -o ${graph}.chop.og\n  \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n  odgi chop -i $graph -c 100 -o ${graph}.chop.og\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "graph"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seanli3__pangenome",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "odgiLayout": {
        "name_process": "odgiLayout",
        "string_process": "\nprocess odgiLayout {\n  input:\n  path(graph)\n\n  output:\n  tuple path(graph), path(\"${graph}.lay\")\n\n  \"\"\"\n  odgi layout \\\n    -i $graph \\\n    -o ${graph}.lay \\\n    -t ${task.cpus} -P\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n  odgi layout \\\n    -i $graph \\\n    -o ${graph}.lay \\\n    -t ${task.cpus} -P\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "graph"
        ],
        "nb_inputs": 1,
        "outputs": [
            "graph"
        ],
        "nb_outputs": 1,
        "name_workflow": "seanli3__pangenome",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "odgiDraw": {
        "name_process": "odgiDraw",
        "string_process": "\nprocess odgiDraw {\n  publishDir \"${params.outdir}/odgiDraw\", mode: 'copy'\n\n  input:\n  tuple path(graph), path(layoutGraph)\n\n  output:\n  path(\"${layoutGraph}.draw_mqc.png\")\n\n  \"\"\"\n  odgi draw \\\n    -i $graph \\\n    -c $layoutGraph \\\n    -p ${layoutGraph}.draw_mqc.png \\\n    -C \\\n    -H 1000 -t ${task.cpus}\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  odgi draw \\\n    -i $graph \\\n    -c $layoutGraph \\\n    -p ${layoutGraph}.draw_mqc.png \\\n    -C \\\n    -H 1000 -t ${task.cpus}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "graph",
            "layoutGraph"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seanli3__pangenome",
        "directive": [
            "publishDir \"${params.outdir}/odgiDraw\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
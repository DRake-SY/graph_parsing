{
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n\n\ttag \"$name\"                                                        \n\n\tinput:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (fastqc_args)\n\t\tval (verbose)\n\n\toutput:\n\t    tuple val(name), path (\"*fastqc*\"), emit: all\n\t\tpath \"*.zip\",  emit: report\n\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\n\t\tif (params.nogroup){\n\t\t\t                                               \n\t\t\tfastqc_args += \" --nogroup \"\n\t\t}\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] FASTQC ARGS: \"+ fastqc_args)\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load fastqc\n\t\tfastqc $fastqc_args -q -t 2 ${reads}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "\t\tif (params.nogroup){\n\t\t\t                                               \n\t\t\tfastqc_args += \" --nogroup \"\n\t\t}\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] FASTQC ARGS: \"+ fastqc_args)\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load fastqc\n\t\tfastqc $fastqc_args -q -t 2 ${reads}\n\t\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "fastqc_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_BARCODES": {
        "name_process": "MERGE_BARCODES",
        "string_process": "\nprocess MERGE_BARCODES {\n\n    tag \"$name\"                                                        \n\n    input: \n        tuple val(name), path(reads)\n        val (outputdir)\n        \n    output:    \n        tuple val(name), path (\"*fastq\"), emit: merged_fastq\n        \n    publishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n        \"\"\"\n        cat ${reads}/*fastq > ${name}.fastq\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        cat ${reads}/*fastq > ${name}.fastq\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "BISMARK_DEDUPLICATION": {
        "name_process": "BISMARK_DEDUPLICATION",
        "string_process": "\nprocess BISMARK_DEDUPLICATION {\n\t\n\ttag \"$bam\"                                                        \n\n\t                                                   \n\tcpus = 1\n\tmemory { 20.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n  \tmaxRetries 5\n  \t\n    input:\n\t    tuple val(name), path(bam)\n\t\tval (outputdir)\n\t\tval (deduplicate_bismark_args)\n\t\tval (verbose)\n\n\toutput:\n\t\tpath \"*report.txt\", emit: report\n\t\ttuple val(name), path (\"*bam\"),        emit: bam\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK DEDUPLICATION ARGS: \" + deduplicate_bismark_args)\n\t\t}\n\n\t\t                     \n\t\tdeduplication_options = deduplicate_bismark_args\n\t\tdeduplication_options += \" --bam \"\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tdeduplicate_bismark ${deduplication_options} ${bam}\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK DEDUPLICATION ARGS: \" + deduplicate_bismark_args)\n\t\t}\n\n\t\t                     \n\t\tdeduplication_options = deduplicate_bismark_args\n\t\tdeduplication_options += \" --bam \"\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tdeduplicate_bismark ${deduplication_options} ${bam}\n\t\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bam",
            "outputdir",
            "deduplicate_bismark_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$bam\"",
            "cpus = 1",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 5"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "\nprocess SAMTOOLS_SORT{\t\n    \n\ttag \"$bam\"                                                        \n\tlabel 'bigMem'        \n\n\tinput:\n\t\tpath(bam)\n\t\tval (outputdir)\n\t\tval (samtools_sort_args)\n\t\tval (verbose)\n\n\toutput:\n\t\t                                   \n\t\tpath \"*bam\",        emit: bam\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\t\n    script:\n\t\tsamtools_sort_options = samtools_sort_args\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] SAMTOOLS SORT ARGS: \" + samtools_sort_args)\n\t\t}\n\t\t\n\t\t                                                                     \n\n\t\t\"\"\"\n\t\tmodule load samtools\n\t\tsamtools sort $samtools_sort_options $bam -o ${bam}_sorted.bam \n\t\trename .bam_sorted _sorted *\n    \t\"\"\"\n\t\t\n\t\n}",
        "nb_lignes_process": 35,
        "string_script": "\t\tsamtools_sort_options = samtools_sort_args\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] SAMTOOLS SORT ARGS: \" + samtools_sort_args)\n\t\t}\n\t\t\n\t\t                                                                     \n\n\t\t\"\"\"\n\t\tmodule load samtools\n\t\tsamtools sort $samtools_sort_options $bam -o ${bam}_sorted.bam \n\t\trename .bam_sorted _sorted *\n    \t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam",
            "outputdir",
            "samtools_sort_args",
            "verbose"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$bam\"",
            "label 'bigMem'"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX{\t\n    \n\ttag \"$bam\"                                                            \n\tlabel 'bigMem'        \n\n\tinput:\n\t\tpath(bam)\n\t\tval (outputdir)\n\t\tval (samtools_index_args)\n\t\tval (verbose)\n\n\toutput:\n\t\tpath \"*.bai\",     emit: bai\n    \t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\tsamtools_index_options = samtools_index_args\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] SAMTOOLS INDEX ARGS: \" + samtools_index_args)\n\t\t}\n\t\t\n\t\t\"\"\"\n\t\tmodule load samtools\n\t\tsamtools index $samtools_index_options $bam\n\t\t\"\"\"\n\t\t\n\t\n}",
        "nb_lignes_process": 30,
        "string_script": "\t\tsamtools_index_options = samtools_index_args\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] SAMTOOLS INDEX ARGS: \" + samtools_index_args)\n\t\t}\n\t\t\n\t\t\"\"\"\n\t\tmodule load samtools\n\t\tsamtools index $samtools_index_options $bam\n\t\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam",
            "outputdir",
            "samtools_index_args",
            "verbose"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$bam\"",
            "label 'bigMem'"
        ],
        "when": "",
        "stub": ""
    },
    "TRAEL_PREPROCESSING": {
        "name_process": "TRAEL_PREPROCESSING",
        "string_process": "\nprocess TRAEL_PREPROCESSING {\n\t\n\ttag \"$name\"                                                        \n\t\t\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (trael_preprocessing_args)\n\t\tval (verbose)\n\n\toutput:\n\t\tpath \"*.txt\", optional: true, emit: stats \n\t\ttuple val(name), path (\"*UMIed*.fastq.gz\"), emit: reads\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TrAEL-PREPROCESSING ARGS: \" + trael_preprocessing_args)\n\t\t}\n\n\t\t                                                                            \n\t\t\"\"\"\n\t\tmodule load python\n\t\t/bi/apps/TrAELseq/TrAEL-seq/TrAELseq_preprocessing.py \t\t\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TrAEL-PREPROCESSING ARGS: \" + trael_preprocessing_args)\n\t\t}\n\n\t\t                                                                            \n\t\t\"\"\"\n\t\tmodule load python\n\t\t/bi/apps/TrAELseq/TrAEL-seq/TrAELseq_preprocessing.py \t\t\n\t\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "trael_preprocessing_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "TRAEL_PREPROCESSING_INDEXING": {
        "name_process": "TRAEL_PREPROCESSING_INDEXING",
        "string_process": "\nprocess TRAEL_PREPROCESSING_INDEXING {\n\t\n\ttag \"$name\"                                                        \n\t\t\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (trael_preprocessing_args)\n\t\tval (verbose)\n\n\toutput:\n\t\tpath \"*.txt\", optional: true, emit: stats \n\t\ttuple val(name), path (\"*UMIed*.fastq.gz\"), emit: reads\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TrAEL-PREPROCESSING ARGS: \" + trael_preprocessing_args)\n\t\t}\n\n\t\t                                                                            \n\t\t\"\"\"\n\t\tmodule load python\n\t\t/bi/apps/TrAELseq/TrAEL-seq/TrAELseq_preprocessing_UMIplusBarcode.py\t\t\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TrAEL-PREPROCESSING ARGS: \" + trael_preprocessing_args)\n\t\t}\n\n\t\t                                                                            \n\t\t\"\"\"\n\t\tmodule load python\n\t\t/bi/apps/TrAELseq/TrAEL-seq/TrAELseq_preprocessing_UMIplusBarcode.py\t\t\n\t\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "trael_preprocessing_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "TRAEL_SEQDEDUP": {
        "name_process": "TRAEL_SEQDEDUP",
        "string_process": "\nprocess TRAEL_SEQDEDUP {\n\t\n\ttag \"$name\"                                                        \n\t\t\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (trael_preprocessing_args)\n\t\tval (verbose)\n\n\toutput:\n\t\tpath \"*.txt\", optional: true, emit: stats \n\t\ttuple val(name), path (\"*seqDedup*fastq.gz\"), emit: reads\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TrAEL-PREPROCESSING ARGS: \" + trael_preprocessing_args)\n\t\t}\n\n\t\t                                                                            \n\t\t\"\"\"\n\t\tmodule load python\n\t\t/bi/apps/TrAELseq/TrAEL-seq/TrAELseq_sequence_based_deduplication.py\t\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TrAEL-PREPROCESSING ARGS: \" + trael_preprocessing_args)\n\t\t}\n\n\t\t                                                                            \n\t\t\"\"\"\n\t\tmodule load python\n\t\t/bi/apps/TrAELseq/TrAEL-seq/TrAELseq_sequence_based_deduplication.py\t\n\t\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "trael_preprocessing_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "COVERAGE2CYTOSINE": {
        "name_process": "COVERAGE2CYTOSINE",
        "string_process": "\nprocess COVERAGE2CYTOSINE {\n\ttag \"$coverage_file\"                                                        \n\n\t                    \n\tmemory { 20.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 20 as long); return 'retry' }\n\tmaxRetries 5\n\n    input:\n\t    path(coverage_file)\n\t\tval (outputdir)\n\t\tval (coverage2cytosine_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*{report.txt.gz,report.txt}\", emit: report\n\t\tpath \"*{.cov.gz,.cov}\",             emit: coverage\n\t\tpath \"*cytosine_context_summary.txt\", optional: true, emit: summary\n\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n    \n\tscript:\n\t\t\n\t\t                                                        \n\t\t                                                                              \n\t\toutfile_basename = coverage_file.toString()                                                                            \n\t\toutfile_basename = (outfile_basename - ~/.bismark.cov.gz$/)\n\t\toutfile_basename = (outfile_basename - ~/.cov.gz$/)\n\t\toutfile_basename = (outfile_basename - ~/.cov$/)\n\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK COVERAGE2CYTOSINE ARGS: \" + coverage2cytosine_args)\n\t\t\tprintln (\"Bismark Genome is: \" + genome)\n\t\t}\n\n\t\t                     \n\t\tcov2cyt_options = coverage2cytosine_args + \" --gzip \"\n\t\t\n\t\tif (params.nome){\n\t\t\tif (verbose){\n\t\t\t\tprintln (\"NOMe-seq outfile basename: $outfile_basename\")\n\t\t\t}\n\t\t\tcov2cyt_options += \" --nome\"\n\t\t}\n\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"Now running command: coverage2cytosine --genome $genome $cov2cyt_options --output ${outfile_basename} $coverage_file \")\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tcoverage2cytosine --genome $genome $cov2cyt_options --output ${outfile_basename} $coverage_file\n\t\t\"\"\"\n\t\t\n\t\t\n}",
        "nb_lignes_process": 57,
        "string_script": "\t\toutfile_basename = coverage_file.toString()                                                                            \n\t\toutfile_basename = (outfile_basename - ~/.bismark.cov.gz$/)\n\t\toutfile_basename = (outfile_basename - ~/.cov.gz$/)\n\t\toutfile_basename = (outfile_basename - ~/.cov$/)\n\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK COVERAGE2CYTOSINE ARGS: \" + coverage2cytosine_args)\n\t\t\tprintln (\"Bismark Genome is: \" + genome)\n\t\t}\n\n\t\t                     \n\t\tcov2cyt_options = coverage2cytosine_args + \" --gzip \"\n\t\t\n\t\tif (params.nome){\n\t\t\tif (verbose){\n\t\t\t\tprintln (\"NOMe-seq outfile basename: $outfile_basename\")\n\t\t\t}\n\t\t\tcov2cyt_options += \" --nome\"\n\t\t}\n\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"Now running command: coverage2cytosine --genome $genome $cov2cyt_options --output ${outfile_basename} $coverage_file \")\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tcoverage2cytosine --genome $genome $cov2cyt_options --output ${outfile_basename} $coverage_file\n\t\t\"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coverage_file",
            "outputdir",
            "coverage2cytosine_args",
            "verbose"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$coverage_file\"",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 20 as long); return 'retry' }",
            "maxRetries 5"
        ],
        "when": "",
        "stub": ""
    },
    "BISMARK2SUMMARY": {
        "name_process": "BISMARK2SUMMARY",
        "string_process": "\nprocess BISMARK2SUMMARY {\n    \n\tinput:\n\t    file (file)\n\t\tval (outputdir)\n\t\tval (bismark2summary_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*html\",       emit: html\n\t\tpath \"*txt\",        emit: report \n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\t                                                                                                              \n\t\t                                                                              \n\t\t                                                      \n\t\tbismark2summary_args = bismark2summary_args.replaceAll(/'/,\"\")\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK2SUMMARY ARGS: \" + bismark2summary_args)\n\t\t}\n\n\t\tif (params.prefix == \"\"){\n\t\t\t\"\"\"\n\t\t\tmodule load bismark\n\t\t\tbismark2summary\n\t\t\t\"\"\"\n\t\t}\n\t\telse{\n\t\t\t\"\"\"\n\t\t\tmodule load bismark\n\t\t\tbismark2summary\n\t\t\tmv bismark_summary_report.txt  ${params.prefix}bismark_summary_report.txt \n\t\t\tmv bismark_summary_report.html ${params.prefix}bismark_summary_report.html\n\t\t\t\"\"\"\n\t\t}\n}",
        "nb_lignes_process": 38,
        "string_script": "\t\tbismark2summary_args = bismark2summary_args.replaceAll(/'/,\"\")\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK2SUMMARY ARGS: \" + bismark2summary_args)\n\t\t}\n\n\t\tif (params.prefix == \"\"){\n\t\t\t\"\"\"\n\t\t\tmodule load bismark\n\t\t\tbismark2summary\n\t\t\t\"\"\"\n\t\t}\n\t\telse{\n\t\t\t\"\"\"\n\t\t\tmodule load bismark\n\t\t\tbismark2summary\n\t\t\tmv bismark_summary_report.txt  ${params.prefix}bismark_summary_report.txt \n\t\t\tmv bismark_summary_report.html ${params.prefix}bismark_summary_report.html\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputdir",
            "bismark2summary_args",
            "verbose"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "BISMARK_METHYLATION_EXTRACTOR": {
        "name_process": "BISMARK_METHYLATION_EXTRACTOR",
        "string_process": "\nprocess BISMARK_METHYLATION_EXTRACTOR {\n\tlabel 'bigMem'                \n\tlabel 'quadCore'                  \n\t\n\ttag \"$bam\"                                                        \n\n    input:\n\t    tuple val (name), path(bam)\n\t\tval (outputdir)\n\t\tval (bismark_methylation_extractor_args)\n\t\tval (verbose)\n\n\toutput:\n\t    tuple val (name), path (\"CpG*\"),        emit: context_files_CG\n\t\tpath \"CH*\",                             emit: context_files_nonCG\n\t\tpath \"*report.txt\",                     emit: report\n\t\tpath \"*M-bias.txt\",                     emit: mbias\n\t\tpath \"*cov.gz\",                         emit: coverage\n\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n    \n\tscript:\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK METHYLATION EXTRACTOR ARGS: \" + bismark_methylation_extractor_args)\n\t\t}\n\n\t\tcores = 4\n\n\t\t                     \n\t\tmethXtract_options = bismark_methylation_extractor_args + \" --gzip \"\n\t\t\n\t\tif (params.singlecell){\n\t\t\t                                                                 \n\t\t}\n\n\t\tif (params.nonCG){\n\t\t\tif (verbose){\n\t\t\t\tprintln (\"FLAG nonCG specified: adding flag --CX \")\n\t\t\t}\n\t\t\tmethXtract_options +=  \" --CX \"\n\t\t}\n\n\t\tisPE = isPairedEnd(bam)\n\t\tif (isPE){\n\t\t\t                                                                       \n\t\t\tif (!params.rrbs && !params.singlecell && !params.pbat){\n\t\t\t\t                                                     \n\t\t\t\tmethXtract_options +=  \" --ignore_r2 2 \"\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t                                         \n\t\t}\n\n\t\t                                                                                                                 \n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark_methylation_extractor --bedGraph --buffer 10G -parallel ${cores} ${methXtract_options} ${bam}\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 62,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK METHYLATION EXTRACTOR ARGS: \" + bismark_methylation_extractor_args)\n\t\t}\n\n\t\tcores = 4\n\n\t\t                     \n\t\tmethXtract_options = bismark_methylation_extractor_args + \" --gzip \"\n\t\t\n\t\tif (params.singlecell){\n\t\t\t                                                                 \n\t\t}\n\n\t\tif (params.nonCG){\n\t\t\tif (verbose){\n\t\t\t\tprintln (\"FLAG nonCG specified: adding flag --CX \")\n\t\t\t}\n\t\t\tmethXtract_options +=  \" --CX \"\n\t\t}\n\n\t\tisPE = isPairedEnd(bam)\n\t\tif (isPE){\n\t\t\t                                                                       \n\t\t\tif (!params.rrbs && !params.singlecell && !params.pbat){\n\t\t\t\t                                                     \n\t\t\t\tmethXtract_options +=  \" --ignore_r2 2 \"\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t                                         \n\t\t}\n\n\t\t                                                                                                                 \n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark_methylation_extractor --bedGraph --buffer 10G -parallel ${cores} ${methXtract_options} ${bam}\n\t\t\"\"\"",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [
            "CoreSlicer",
            "xiSPEC"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer",
            "https://bio.tools/xispec"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            },
            {
                "name": "xiSPEC",
                "uri": "https://bio.tools/xispec",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3214",
                                    "term": "Spectral analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3214",
                                    "term": "Spectrum analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3214",
                                    "term": "Mass spectrum analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Next-generation web-based spectrum viewer for visualizing, analyzing and sharing mass spectrometry data. Allows users to save and share their datasets publicly or password protected for providing access to collaborators or readers and reviewers of manuscripts. The identification table features advanced interaction controls and spectra are presented in three interconnected views: (i) annotated mass spectrum, (ii) peptide sequence fragmentation key and (iii) quality control error plots of matched fragments.",
                "homepage": "https://spectrumviewer.org"
            }
        ],
        "inputs": [
            "name",
            "bam",
            "outputdir",
            "bismark_methylation_extractor_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "label 'bigMem'",
            "label 'quadCore'",
            "tag \"$bam\""
        ],
        "when": "",
        "stub": ""
    },
    "BISMARK": {
        "name_process": "BISMARK",
        "string_process": "\nprocess BISMARK {\n\t\n\n\ttag \"$name\"                                                        \n\n\t                                                                 \n\t                 \n\n\tcpus { 5 }\n  \tmemory { 20.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n  \tmaxRetries 3\n\t\n\t                 \n\t                    \n\t                   \n\t\t\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (bismark_args)\n\t\tval (verbose)\n\n\toutput:\n\t    tuple val(name), path (\"*bam\"),        emit: bam\n\t\tpath \"*report.txt\", emit: report\n\t\t                                                                                                  \n\t\ttuple val(name), path (\"*unmapped_reads_1.fq.gz\"), optional: true, emit: unmapped1\n\t\ttuple val(name), path (\"*unmapped_reads_2.fq.gz\"), optional: true, emit: unmapped2\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\tcores = 1\n\t\treadString = \"\"\n\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK ARGS: \" + bismark_args)\n\t\t}\n\n\t\t                     \n\t\tbismark_options = bismark_args\n\t\tif (params.singlecell){\n\t\t\tbismark_options += \" --non_directional \"\n\t\t}\n\t\telse{\n\t\t\n\t\t}\n\t\t\n\t\tunmapped_1_name = ''\n\t\tunmapped_2_name = ''\n\t\t\n\t\tif (params.unmapped){\n\t\t\tbismark_options += \" --unmapped \"\n\t\t\tunmapped_1_name = name + \"_unmapped_R1\"\n\t\t\tunmapped_2_name = name + \"_unmapped_R2\"\n\t\t}\n\n\t\tif (params.pbat){\n\t\t\tbismark_options += \" --pbat \"\n\t\t}\n\n\t\tif (reads instanceof List) {\n\t\t\treadString = \"-1 \"+reads[0]+\" -2 \"+reads[1]\n\t\t}\n\t\telse {\n\t\t\treadString = reads\n\t\t}\n\n\t\tindex = \"--genome \" + params.genome[\"bismark\"]\n\n\t\tunmapped_name = ''\t\n\t\t\t                                              \n\t\tif (params.read_identity == \"1\" || params.read_identity == \"2\"){\n\t\t\t                                  \n\t\t\tif (params.read_identity == \"1\"){\n\t\t\t\tunmapped_name = name + \"_unmapped_R1\"\n\t\t\t}\n\t\t\telse{\n\t\t\t\tunmapped_name = name + \"_unmapped_R2\"\n\t\t\t}\n\n\t\t\tif (bismark_args =~ /-hisat/){                                           \n\t\t\t\tbismark_name = unmapped_name + \"_\" + params.genome[\"name\"] + \"_bismark_hisat2\"\n\t\t\t}\n\t\t\telse{                       \n\t\t\t\tbismark_name = unmapped_name + \"_\" + params.genome[\"name\"] + \"_bismark_bt2\"\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif (bismark_args =~ /-hisat/){                                           \n\t\t\t\tbismark_name = name + \"_\" + params.genome[\"name\"] + \"_bismark_hisat2\"\n\t\t\t}\n\t\t\telse{                       \n\t\t\t\tbismark_name = name + \"_\" + params.genome[\"name\"] + \"_bismark_bt2\"\n\t\t\t}\n\t\t}\t\n\t\t                                             \n\t\t\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark --parallel $cores --basename $bismark_name $index $bismark_options $readString\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 105,
        "string_script": "\t\tcores = 1\n\t\treadString = \"\"\n\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK ARGS: \" + bismark_args)\n\t\t}\n\n\t\t                     \n\t\tbismark_options = bismark_args\n\t\tif (params.singlecell){\n\t\t\tbismark_options += \" --non_directional \"\n\t\t}\n\t\telse{\n\t\t\n\t\t}\n\t\t\n\t\tunmapped_1_name = ''\n\t\tunmapped_2_name = ''\n\t\t\n\t\tif (params.unmapped){\n\t\t\tbismark_options += \" --unmapped \"\n\t\t\tunmapped_1_name = name + \"_unmapped_R1\"\n\t\t\tunmapped_2_name = name + \"_unmapped_R2\"\n\t\t}\n\n\t\tif (params.pbat){\n\t\t\tbismark_options += \" --pbat \"\n\t\t}\n\n\t\tif (reads instanceof List) {\n\t\t\treadString = \"-1 \"+reads[0]+\" -2 \"+reads[1]\n\t\t}\n\t\telse {\n\t\t\treadString = reads\n\t\t}\n\n\t\tindex = \"--genome \" + params.genome[\"bismark\"]\n\n\t\tunmapped_name = ''\t\n\t\t\t                                              \n\t\tif (params.read_identity == \"1\" || params.read_identity == \"2\"){\n\t\t\t                                  \n\t\t\tif (params.read_identity == \"1\"){\n\t\t\t\tunmapped_name = name + \"_unmapped_R1\"\n\t\t\t}\n\t\t\telse{\n\t\t\t\tunmapped_name = name + \"_unmapped_R2\"\n\t\t\t}\n\n\t\t\tif (bismark_args =~ /-hisat/){                                           \n\t\t\t\tbismark_name = unmapped_name + \"_\" + params.genome[\"name\"] + \"_bismark_hisat2\"\n\t\t\t}\n\t\t\telse{                       \n\t\t\t\tbismark_name = unmapped_name + \"_\" + params.genome[\"name\"] + \"_bismark_bt2\"\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif (bismark_args =~ /-hisat/){                                           \n\t\t\t\tbismark_name = name + \"_\" + params.genome[\"name\"] + \"_bismark_hisat2\"\n\t\t\t}\n\t\t\telse{                       \n\t\t\t\tbismark_name = name + \"_\" + params.genome[\"name\"] + \"_bismark_bt2\"\n\t\t\t}\n\t\t}\t\n\t\t                                             \n\t\t\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark --parallel $cores --basename $bismark_name $index $bismark_options $readString\n\t\t\"\"\"",
        "nb_lignes_script": 69,
        "language_script": "bash",
        "tools": [
            "CoreSlicer",
            "CINdex",
            "Bismark"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer",
            "https://bio.tools/cindex",
            "https://bio.tools/bismark"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            },
            {
                "name": "Bismark",
                "uri": "https://bio.tools/bismark",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3173",
                            "term": "Epigenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite sequence mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bismark is a tool to map bisulfite treated sequencing reads and perform methylation calling in a quick and easy-to-use fashion.",
                "homepage": "https://github.com/FelixKrueger/Bismark"
            }
        ],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "bismark_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\"",
            "cpus { 5 }",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "BISMARK2REPORT": {
        "name_process": "BISMARK2REPORT",
        "string_process": "\nprocess BISMARK2REPORT {\n\t\n    input:\n\t    file (file)\n\t\tval (outputdir)\n\t\tval (bismark2report_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*html\",       emit: html\n\t\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK2REPORT ARGS: \" + bismark2report_args)\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark2report\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK2REPORT ARGS: \" + bismark2report_args)\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark2report\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputdir",
            "bismark2report_args",
            "verbose"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "BOWTIE2": {
        "name_process": "BOWTIE2",
        "string_process": "\nprocess BOWTIE2 {\n\t\n\ttag \"$name\"                                                        \n\n\tlabel 'bigMem'\n\tlabel 'multiCore'\n\t\t\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (bowtie2_args)\n\t\tval (verbose)\n\n\toutput:\n\t    tuple val(name), path (\"*bam\"),        emit: bam\n\t\tpath \"*stats.txt\", emit: stats \n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BOWTIE2 ARGS: \" + bowtie2_args)\n\t\t}\n\n\t\tcores = 8\n\t\treadString = \"\"\n\n\t\t                     \n\t\tbowtie_options = bowtie2_args\n\t\tbowtie_options +=  \" --no-unal \"                                                 \n\t\t\n\t\tif (params.local == '--local'){\n\t\t\t                                              \n\t\t\tbowtie_options += \" ${params.local} \" \n\t\t}\n\n\t\tif (reads instanceof List) {\n\t\t\treadString = \"-1 \" + reads[0] + \" -2 \" + reads[1]\n\t\t\tbowtie_options += \" --no-discordant --no-mixed \"                                     \n\t\t}\n\t\telse {\n\t\t\treadString = \"-U \" + reads\n\t\t}\n\n\n\t\tindex = params.genome[\"bowtie2\"]\n\t\tbowtie_name = name + \"_\" + params.genome[\"name\"]\n\n\t\t\"\"\"\n\t\tmodule load bowtie2\n\t\tmodule load samtools\n\t\tbowtie2 -x ${index} -p ${cores} ${bowtie_options} ${readString}  2>${bowtie_name}_bowtie2_stats.txt | samtools view -bS -F 4 -F 8 -F 256 -> ${bowtie_name}_bowtie2.bam\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 55,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BOWTIE2 ARGS: \" + bowtie2_args)\n\t\t}\n\n\t\tcores = 8\n\t\treadString = \"\"\n\n\t\t                     \n\t\tbowtie_options = bowtie2_args\n\t\tbowtie_options +=  \" --no-unal \"                                                 \n\t\t\n\t\tif (params.local == '--local'){\n\t\t\t                                              \n\t\t\tbowtie_options += \" ${params.local} \" \n\t\t}\n\n\t\tif (reads instanceof List) {\n\t\t\treadString = \"-1 \" + reads[0] + \" -2 \" + reads[1]\n\t\t\tbowtie_options += \" --no-discordant --no-mixed \"                                     \n\t\t}\n\t\telse {\n\t\t\treadString = \"-U \" + reads\n\t\t}\n\n\n\t\tindex = params.genome[\"bowtie2\"]\n\t\tbowtie_name = name + \"_\" + params.genome[\"name\"]\n\n\t\t\"\"\"\n\t\tmodule load bowtie2\n\t\tmodule load samtools\n\t\tbowtie2 -x ${index} -p ${cores} ${bowtie_options} ${readString}  2>${bowtie_name}_bowtie2_stats.txt | samtools view -bS -F 4 -F 8 -F 256 -> ${bowtie_name}_bowtie2.bam\n\t\t\"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "CoreSlicer",
            "CINdex",
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer",
            "https://bio.tools/cindex",
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            },
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "bowtie2_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\"",
            "label 'bigMem'",
            "label 'multiCore'"
        ],
        "when": "",
        "stub": ""
    },
    "HISAT2": {
        "name_process": "HISAT2",
        "string_process": "\nprocess HISAT2 {\n\t\n\ttag \"$name\"                                                        \n\n\tlabel 'bigMem'\n\tlabel 'multiCore'\n\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (hisat2_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*bam\",       emit: bam\n\t\tpath \"*stats.txt\", emit: stats\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] HISAT2 ARGS: \" + hisat2_args)\n\t\t}\n\t\n\t\tcores = 8\n\t\treadString = \"\"\n\t\thisat_options = hisat2_args\n\n\t\t                     \n\t\thisat_options = hisat_options + \" --no-unal --no-softclip --new-summary\"\n\n\t\tif (reads instanceof List) {\n\t\t\treadString = \"-1 \"+reads[0]+\" -2 \"+reads[1]\n\t\t\thisat_options = hisat_options + \" --no-mixed --no-discordant\"\n\t\t}\n\t\telse {\n\t\t\treadString = \"-U \"+reads\n\t\t}\n\t\tindex = params.genome[\"hisat2\"]\n\t\t\n\t\t                                                                                                                 \n\t\tsplices = \" --known-splicesite-infile \" + params.genome[\"hisat2_splices\"]\n\t\thisat_name = name + \"_\" + params.genome[\"name\"]\n\n\t\t\"\"\"\n\t\tmodule load hisat2\n\t\tmodule load samtools\n\t\thisat2 -p ${cores} ${hisat_options} -x ${index} ${splices} ${readString}  2>${hisat_name}_hisat2_stats.txt | samtools view -bS -F 4 -F 8 -F 256 -> ${hisat_name}_hisat2.bam\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 52,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] HISAT2 ARGS: \" + hisat2_args)\n\t\t}\n\t\n\t\tcores = 8\n\t\treadString = \"\"\n\t\thisat_options = hisat2_args\n\n\t\t                     \n\t\thisat_options = hisat_options + \" --no-unal --no-softclip --new-summary\"\n\n\t\tif (reads instanceof List) {\n\t\t\treadString = \"-1 \"+reads[0]+\" -2 \"+reads[1]\n\t\t\thisat_options = hisat_options + \" --no-mixed --no-discordant\"\n\t\t}\n\t\telse {\n\t\t\treadString = \"-U \"+reads\n\t\t}\n\t\tindex = params.genome[\"hisat2\"]\n\t\t\n\t\t                                                                                                                 \n\t\tsplices = \" --known-splicesite-infile \" + params.genome[\"hisat2_splices\"]\n\t\thisat_name = name + \"_\" + params.genome[\"name\"]\n\n\t\t\"\"\"\n\t\tmodule load hisat2\n\t\tmodule load samtools\n\t\thisat2 -p ${cores} ${hisat_options} -x ${index} ${splices} ${readString}  2>${hisat_name}_hisat2_stats.txt | samtools view -bS -F 4 -F 8 -F 256 -> ${hisat_name}_hisat2.bam\n\t\t\"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "CoreSlicer",
            "CINdex",
            "spliceSites",
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer",
            "https://bio.tools/cindex",
            "https://bio.tools/splicesites",
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            },
            {
                "name": "spliceSites",
                "uri": "https://bio.tools/splicesites",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2499",
                                    "term": "Splicing analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2499",
                                    "term": "Splicing model analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Performs splice centered analysis on RNA-seq data.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/spliceSites.html"
            },
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "hisat2_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\"",
            "label 'bigMem'",
            "label 'multiCore'"
        ],
        "when": "",
        "stub": ""
    },
    "PYCHOPPER": {
        "name_process": "PYCHOPPER",
        "string_process": "\nprocess PYCHOPPER {\n\n    tag \"$name\"                                                        \n\n    input: \n        tuple val(name), path(reads)\n        val (outputdir)\n        val(projectname)\n             \n    output:    \n        path \"*\", emit: all\n        \n    publishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n        \"\"\"\n        wc -l ${reads} > ${projectname}_${name}.log\n        module load python\n        module load hmmer\n        module load ssub\n        cdna_classifier.py -r report_${name}_${projectname}.pdf -u unclassified_${name}_${projectname}.fastq -w rescued_${name}.fastq -S stats_${name}_${projectname} ${reads} full_length_barcode_${name}.fastq\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        wc -l ${reads} > ${projectname}_${name}.log\n        module load python\n        module load hmmer\n        module load ssub\n        cdna_classifier.py -r report_${name}_${projectname}.pdf -u unclassified_${name}_${projectname}.fastq -w rescued_${name}.fastq -S stats_${name}_${projectname} ${reads} full_length_barcode_${name}.fastq\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "projectname"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "BISMARK2BEDGRAPH": {
        "name_process": "BISMARK2BEDGRAPH",
        "string_process": "\nprocess BISMARK2BEDGRAPH {\n\t\n\ttag \"$name\"                                                        \n\n\tlabel 'bigMem'       \n\t\t\t\n    input:\n\t    tuple val (name), path(reads)\n\t\tval (outputdir)\n\t\tval (bismark2bedGraph_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*cov.gz\",        emit: coverage\n\t\tpath \"*bedGraph.gz\",   emit: bedGraph\n\t\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK2BEDGRAPH ARGS: \" + bismark2bedGraph_args)\n\t\t}\n\n\t\t                     \n\t\tbismark2bedGraph_options = bismark2bedGraph_args\n\n\t\tif (params.dirty_harry){\n\t\t\toutput_name = name + \"_DH.bedGraph.gz\"                \n\t\t} \n\t\telse{\n\t\t\toutput_name = name + \".bedGraph.gz\"\n\t\t}\n\t\t                                        \n\t\t                                  \n\t\t\n\t\tall_reads = reads\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark2bedGraph --buffer 15G -o $output_name $bismark2bedGraph_options $all_reads\n\t\t\"\"\"\n\t\t\n}",
        "nb_lignes_process": 44,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] BISMARK2BEDGRAPH ARGS: \" + bismark2bedGraph_args)\n\t\t}\n\n\t\t                     \n\t\tbismark2bedGraph_options = bismark2bedGraph_args\n\n\t\tif (params.dirty_harry){\n\t\t\toutput_name = name + \"_DH.bedGraph.gz\"                \n\t\t} \n\t\telse{\n\t\t\toutput_name = name + \".bedGraph.gz\"\n\t\t}\n\t\t                                        \n\t\t                                  \n\t\t\n\t\tall_reads = reads\n\n\t\t\"\"\"\n\t\tmodule load bismark\n\t\tbismark2bedGraph --buffer 15G -o $output_name $bismark2bedGraph_options $all_reads\n\t\t\"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "bismark2bedGraph_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\"",
            "label 'bigMem'"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQ_SCREEN": {
        "name_process": "FASTQ_SCREEN",
        "string_process": "\nprocess FASTQ_SCREEN {\n\t\n\ttag \"$name\"                                                        \n\n\t                  \n\t\n\tlabel 'multiCore'\n\t\n\tmemory { 30.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n  \tmaxRetries 3\n  \t\n    input:\n\t    tuple val(name), path(reads)\n\t\tval (outputdir)\n\t\tval (fastq_screen_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*png\",  emit: png\n\t    path \"*html\", emit: html\n\t\tpath \"*txt\",  emit: report\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] FASTQ SCREEN ARGS: \"+ fastq_screen_args)\n\t\t}\n\n\t\tif (params.single_end){\n\t\t\t                                 \n\t\t}\n\t\telse{\n\t\t\t                                                                                         \n\t\t\tif (reads instanceof List) {\n\t\t\t\treads = reads[0]\n\t\t\t}\n\t\t}\n\t\tif (params.bisulfite){\n\t\t\t                                 \n\t\t\tfastq_screen_args += \" --bisulfite \"\n\t\t\t                              \n\t\t}\t\n\n\t\"\"\"\n\tmodule load fastq_screen\n\tfastq_screen $fastq_screen_args $reads\n\t\"\"\"\n\n}",
        "nb_lignes_process": 52,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] FASTQ SCREEN ARGS: \"+ fastq_screen_args)\n\t\t}\n\n\t\tif (params.single_end){\n\t\t\t                                 \n\t\t}\n\t\telse{\n\t\t\t                                                                                         \n\t\t\tif (reads instanceof List) {\n\t\t\t\treads = reads[0]\n\t\t\t}\n\t\t}\n\t\tif (params.bisulfite){\n\t\t\t                                 \n\t\t\tfastq_screen_args += \" --bisulfite \"\n\t\t\t                              \n\t\t}\t\n\n\t\"\"\"\n\tmodule load fastq_screen\n\tfastq_screen $fastq_screen_args $reads\n\t\"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "Readseq"
        ],
        "tools_url": [
            "https://bio.tools/readseq"
        ],
        "tools_dico": [
            {
                "name": "Readseq",
                "uri": "https://bio.tools/readseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ]
                    }
                ],
                "description": "Convert biosequences between a selection of common biological sequence formats.",
                "homepage": "http://www.ebi.ac.uk/Tools/sfc/readseq/"
            }
        ],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "fastq_screen_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\"",
            "label 'multiCore'",
            "memory { 30.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "TRIM_GALORE": {
        "name_process": "TRIM_GALORE",
        "string_process": "\nprocess TRIM_GALORE {\t\n    \n\ttag \"$name\"                                                                                \n\n\tlabel 'quadCore'                                    \n\t\n\t                    \n\tmemory { 10.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n\tmaxRetries 2\n    \n\tinput:\n\t    tuple val (name), path (reads)\n\t\tval (outputdir)\n\t\tval (trim_galore_args)\n\t\tval (verbose)\n\n\toutput:\n\t    tuple val(name), path (\"*fq.gz\"), emit: reads\n\t\tpath \"*trimming_report.txt\", optional: true, emit: report\n\t\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\n    script:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TRIM GALORE ARGS: \" + trim_galore_args)\n\t\t}\n\t\t\n\t\tpairedString = \"\"\n\t\tif (params.single_end){\n\t\t\t                                                                 \n\t\t}\n\t\telse{\n\t\t\tif (reads instanceof List) {\n\t\t\t\tpairedString = \"--paired\"\n\t\t\t}\n\t\t}\n\n\t\t                                            \n\t\tif (params.clock){\n\t\t\ttrim_galore_args += \" --breitling \"\t\n\t\t}\n\t\telse{\n\t\t\tif (params.singlecell){\n\t\t\t\ttrim_galore_args += \" --clip_r1 6 \"\n\t\t\t\tif (pairedString == \"--paired\"){\n\t\t\t\t\ttrim_galore_args += \" --clip_r2 6 \"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params.rrbs){\n\t\t\t\ttrim_galore_args = trim_galore_args + \" --rrbs \"\n\t\t\t}\n\t\t\t\n\t\t\tif  (params.pbat){\n\t\t\t\ttrim_galore_args = trim_galore_args + \" --clip_r1 $params.pbat \"\n\t\t\t\tif (pairedString == \"--paired\"){\n\t\t\t\t\ttrim_galore_args = trim_galore_args + \" --clip_r2 $params.pbat \"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t                                   \n\t\t\tif (params.three_prime_clip_R1 && params.three_prime_clip_R2){\n\t\t\t\ttrim_galore_args +=\t\" --three_prime_clip_R1 ${params.three_prime_clip_R1} --three_prime_clip_R2 ${params.three_prime_clip_R2} \"\n\t\t\t}\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load trim_galore\n\t\tmodule load fastqc\n\t\ttrim_galore $trim_galore_args ${pairedString} ${reads}\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 75,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] TRIM GALORE ARGS: \" + trim_galore_args)\n\t\t}\n\t\t\n\t\tpairedString = \"\"\n\t\tif (params.single_end){\n\t\t\t                                                                 \n\t\t}\n\t\telse{\n\t\t\tif (reads instanceof List) {\n\t\t\t\tpairedString = \"--paired\"\n\t\t\t}\n\t\t}\n\n\t\t                                            \n\t\tif (params.clock){\n\t\t\ttrim_galore_args += \" --breitling \"\t\n\t\t}\n\t\telse{\n\t\t\tif (params.singlecell){\n\t\t\t\ttrim_galore_args += \" --clip_r1 6 \"\n\t\t\t\tif (pairedString == \"--paired\"){\n\t\t\t\t\ttrim_galore_args += \" --clip_r2 6 \"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params.rrbs){\n\t\t\t\ttrim_galore_args = trim_galore_args + \" --rrbs \"\n\t\t\t}\n\t\t\t\n\t\t\tif  (params.pbat){\n\t\t\t\ttrim_galore_args = trim_galore_args + \" --clip_r1 $params.pbat \"\n\t\t\t\tif (pairedString == \"--paired\"){\n\t\t\t\t\ttrim_galore_args = trim_galore_args + \" --clip_r2 $params.pbat \"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t                                   \n\t\t\tif (params.three_prime_clip_R1 && params.three_prime_clip_R2){\n\t\t\t\ttrim_galore_args +=\t\" --three_prime_clip_R1 ${params.three_prime_clip_R1} --three_prime_clip_R2 ${params.three_prime_clip_R2} \"\n\t\t\t}\n\t\t}\n\n\t\t\"\"\"\n\t\tmodule load trim_galore\n\t\tmodule load fastqc\n\t\ttrim_galore $trim_galore_args ${pairedString} ${reads}\n\t\t\"\"\"",
        "nb_lignes_script": 47,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "outputdir",
            "trim_galore_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$name\"",
            "label 'quadCore'",
            "memory { 10.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 2"
        ],
        "when": "",
        "stub": ""
    },
    "RESTRAININGORDER": {
        "name_process": "RESTRAININGORDER",
        "string_process": "\nprocess RESTRAININGORDER {\n\t\n\ttag \"$bam\"                                        \n\t\n\tlabel 'hugeMem'\n\t\t\t\n    input:\n\t    tuple val(name), path(bam)\n\t\tval (outputdir)\n\t\tval (reStrainingOrder_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*.html\",  emit: html\n\t\tpath \"*.txt\", emit: stats \n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] reStrainingOrder ARGS: \" + reStrainingOrder_args)\n\t\t}\n\n\t\t                     \n\t\treStraining_options = reStrainingOrder_args\n\t\treStraining_options +=  \"--snp_file /bi/apps/reStrainingOrder/MGPv5_SNP_matrix_chr1.txt.gz \" \n\t\n\t\t\"\"\"\n\t\tmodule load reStrainingOrder\n\t\treStrainingOrder $reStraining_options $bam\n\t\t\"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] reStrainingOrder ARGS: \" + reStrainingOrder_args)\n\t\t}\n\n\t\t                     \n\t\treStraining_options = reStrainingOrder_args\n\t\treStraining_options +=  \"--snp_file /bi/apps/reStrainingOrder/MGPv5_SNP_matrix_chr1.txt.gz \" \n\t\n\t\t\"\"\"\n\t\tmodule load reStrainingOrder\n\t\treStrainingOrder $reStraining_options $bam\n\t\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bam",
            "outputdir",
            "reStrainingOrder_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$bam\"",
            "label 'hugeMem'"
        ],
        "when": "",
        "stub": ""
    },
    "UMIBAM": {
        "name_process": "UMIBAM",
        "string_process": "\nprocess UMIBAM {\t\n    \n\ttag \"$bam\"                                                        \n\n\t                                                   \n\tcpus = 1\n\tmemory { 20.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n  \tmaxRetries 5\n\t  \n\tinput:\n\t    tuple val(name), path(bam)\n\t\tval (outputdir)\n\t\tval (umibam_args)\n\t\tval (verbose)\n\n\toutput:\n\t\tpath \"*report.txt\", emit: report\n\t\ttuple val(name), path (\"*bam\"),        emit: bam\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\n    script:\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] UMIBAM ARGS: \" + umibam_args)\n\t\t}\n\t\t\n\t\t                                            \n\t\tif (params.dual){\n\t\t\tumibam_args += \" --double_umi \"\t\n\t\t}\n\t\telse{\n\t\t\tumibam_args += \" --umi \"\t\n\t\t}\n\t\t\n\t\t\"\"\"\n\t\tmodule load UmiBam\n\t\t\n\t\tUmiBam $umibam_args  $bam\n\t\t\n\t\trename UMI_d d *\n\t\t\"\"\"\n\t\t\n\t\t                                                                                     \n\t\t\n\t\t                            \n\t\t                                                          \n\t\t\n\t\t                                               \n\t\t                   \n\n\t\t                                                                                                              \n\t\t                                                                 \n}",
        "nb_lignes_process": 55,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] UMIBAM ARGS: \" + umibam_args)\n\t\t}\n\t\t\n\t\t                                            \n\t\tif (params.dual){\n\t\t\tumibam_args += \" --double_umi \"\t\n\t\t}\n\t\telse{\n\t\t\tumibam_args += \" --umi \"\t\n\t\t}\n\t\t\n\t\t\"\"\"\n\t\tmodule load UmiBam\n\t\t\n\t\tUmiBam $umibam_args  $bam\n\t\t\n\t\trename UMI_d d *\n\t\t\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bam",
            "outputdir",
            "umibam_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$bam\"",
            "cpus = 1",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 5"
        ],
        "when": "",
        "stub": ""
    },
    "CELLRANGER_COUNT": {
        "name_process": "CELLRANGER_COUNT",
        "string_process": "\nprocess CELLRANGER_COUNT {\n\t\n\ttag \"$sampleID\"                                                        \n\tlabel 'cellranger'\n\n\tcpus 16\n  \tmemory { 35.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n  \tmaxRetries 2\n\t\n\t                 \n\t                    \n\t\t\n    input:\n\t\tval (sampleID)\n\t\tval (fastqs_dir)\n\t\tval (outputdir)\n\t\tval (cellranger_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"${sampleID}/outs/*\"\n\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n    script:\n\t\tcores = 16\n\t\treadString = \"\"\n\n\t\t                                                    \n\t\t                       \n\t\t\n\t\t                                              \n\t\t\n\t\t                                                                                        \n\t\t                                                                                                                                                                                                               \n\t\t                                                                                     \n\t\t                                                                                                                                                         \n\t\t                                                                                       \n\t\t\n\t\t                                                                                  \n\t\t                                                              \n\t\t                                                                                    \n\n\t\tcommand = 'cellranger count '\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] Constructing the command:\\n[MODULE]: >>$command<<\")\n\t\t}\n\t\tcommand += \" $cellranger_args \"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] CELLRANGER ARGS: \" + cellranger_args)\n\t\t}\n\n\t\tcommand += \" --localcores=$cores --localmem=${task.memory.toGiga()} --transcriptome=\" + params.genome[\"cellranger\"]\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\t\t\n\t\tcommand += \" --sample=$sampleID\"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\n\t\tcommand += \" --id=$sampleID\"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\t\t\n\t\tcommand += \" --fastqs=$fastqs_dir\"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\t\t                  \n\t\t                                                                                                                                                                                                                                                                                                                                              \n\t\t\n\n\t\t\"\"\"\n\t\tmodule load cellranger\n\t\tmodule load ssub\n\n\t\t$command\n        \n\t\t\"\"\"\n\t\t\n}",
        "nb_lignes_process": 85,
        "string_script": "\t\tcores = 16\n\t\treadString = \"\"\n\n\t\t                                                    \n\t\t                       \n\t\t\n\t\t                                              \n\t\t\n\t\t                                                                                        \n\t\t                                                                                                                                                                                                               \n\t\t                                                                                     \n\t\t                                                                                                                                                         \n\t\t                                                                                       \n\t\t\n\t\t                                                                                  \n\t\t                                                              \n\t\t                                                                                    \n\n\t\tcommand = 'cellranger count '\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] Constructing the command:\\n[MODULE]: >>$command<<\")\n\t\t}\n\t\tcommand += \" $cellranger_args \"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] CELLRANGER ARGS: \" + cellranger_args)\n\t\t}\n\n\t\tcommand += \" --localcores=$cores --localmem=${task.memory.toGiga()} --transcriptome=\" + params.genome[\"cellranger\"]\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\t\t\n\t\tcommand += \" --sample=$sampleID\"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\n\t\tcommand += \" --id=$sampleID\"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\t\t\n\t\tcommand += \" --fastqs=$fastqs_dir\"\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE]: >>$command<<\")\n\t\t}\n\t\t                  \n\t\t                                                                                                                                                                                                                                                                                                                                              \n\t\t\n\n\t\t\"\"\"\n\t\tmodule load cellranger\n\t\tmodule load ssub\n\n\t\t$command\n        \n\t\t\"\"\"",
        "nb_lignes_script": 56,
        "language_script": "bash",
        "tools": [
            "CoreSlicer",
            "COMMAND"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer",
            "https://bio.tools/COMMAND"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            },
            {
                "name": "COMMAND",
                "uri": "https://bio.tools/COMMAND",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Web-based application used to download, collect and manage gene expression data from public databases.",
                "homepage": "https://github.com/marcomoretto/command"
            }
        ],
        "inputs": [
            "sampleID",
            "fastqs_dir",
            "outputdir",
            "cellranger_args",
            "verbose"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "tag \"$sampleID\"",
            "label 'cellranger'",
            "cpus 16",
            "memory { 35.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 2"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n\t\n\tlabel 'quadCore'\n\n\t                    \n\tmemory { 20.GB * task.attempt }  \n\terrorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }\n\tmaxRetries 3\n\n    input:\n\t    path (file)\n\t\tval (outputdir)\n\t\tval (multiqc_args)\n\t\tval (verbose)\n\n\toutput:\n\t    path \"*html\",       emit: html\n\t\t\n\tpublishDir \"$outputdir\",\n\t\tmode: \"link\", overwrite: true\n\n\tscript:\n\n\t\t\n\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] MULTIQC ARGS: \" + multiqc_args)\n\t\t}\n\t\n\t\t\"\"\"\n\t\tmodule load multiqc\n\t\tmultiqc $multiqc_args -x work --filename ${params.prefix}multiqc_report.html .\n\t\t\"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "\t\tif (verbose){\n\t\t\tprintln (\"[MODULE] MULTIQC ARGS: \" + multiqc_args)\n\t\t}\n\t\n\t\t\"\"\"\n\t\tmodule load multiqc\n\t\tmultiqc $multiqc_args -x work --filename ${params.prefix}multiqc_report.html .\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "outputdir",
            "multiqc_args",
            "verbose"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "s-andrews__nextflow_pipelines",
        "directive": [
            "label 'quadCore'",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 30 as long); return 'retry' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "TRIMMING": {
        "name_process": "TRIMMING",
        "string_process": "\nprocess TRIMMING {\n    publishDir \"${params.outdir}/\", mode: 'copy', pattern: \"*/*.html\"\n    if( params.output_trimmed ){\n        publishDir \"${params.outdir}/trimmed_reads\", mode: 'copy', pattern: \"*val*.fq.gz\"}\n\n    input:\n        tuple val(pair_id), path(reads)\n        val trim_args\n\n    output:\n        tuple val(pair_id), path('*.fq.gz'),     emit: trimread\n        path \"*/*fastqc.html\" ,                  emit: fastqc\n\n    script:\n    def read_files = params.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    def read_pairing = params.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    mkdir FASTQC_raw_reads FASTQC_trimmed_reads\n    fastqc -o FASTQC_raw_reads -t $task.cpus $read_files\n    trim_galore --cores $task.cpus --fastqc --gzip $trim_args $read_pairing $read_files\n    fastqc -o FASTQC_trimmed_reads -t $task.cpus *val*.fq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    def read_files = params.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    def read_pairing = params.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    mkdir FASTQC_raw_reads FASTQC_trimmed_reads\n    fastqc -o FASTQC_raw_reads -t $task.cpus $read_files\n    trim_galore --cores $task.cpus --fastqc --gzip $trim_args $read_pairing $read_files\n    fastqc -o FASTQC_trimmed_reads -t $task.cpus *val*.fq.gz\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "trim_args"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"${params.outdir}/\", mode: 'copy', pattern: \"*/*.html\" if( params.output_trimmed ){ publishDir \"${params.outdir}/trimmed_reads\", mode: 'copy', pattern: \"*val*.fq.gz\"}"
        ],
        "when": "",
        "stub": ""
    },
    "DEDUPE": {
        "name_process": "DEDUPE",
        "string_process": "\nprocess DEDUPE {\n    input:\n        tuple val(pair_id), path(reads)\n\n    output:\n        tuple val(pair_id), path('reads.unique.*.fq.gz'),     emit: dedupreads\n\n    script:\n    def read_in = params.single_end ? \"-i $reads \" : \"-i ${reads[0]} -j ${reads[1]}\"\n    def read_out = params.single_end ? \"-o reads.unique.1.fq.gz \" : \"-o reads.unique.1.fq.gz -p reads.unique.2.fq.gz\"\n    \"\"\"\n    tally $read_in $read_out --pair-by-offset --with-quality\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    def read_in = params.single_end ? \"-i $reads \" : \"-i ${reads[0]} -j ${reads[1]}\"\n    def read_out = params.single_end ? \"-o reads.unique.1.fq.gz \" : \"-o reads.unique.1.fq.gz -p reads.unique.2.fq.gz\"\n    \"\"\"\n    tally $read_in $read_out --pair-by-offset --with-quality\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Tally"
        ],
        "tools_url": [
            "https://bio.tools/tally"
        ],
        "tools_dico": [
            {
                "name": "Tally",
                "uri": "https://bio.tools/tally",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0290",
                                    "term": "Sequence redundancy removal"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3187",
                                    "term": "Sequence contamination filtering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Sequence read pre-processing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tally is a program for deduplicating sequence fragments for both single and paired end input. Single reads, paired-end reads.",
                "homepage": "http://bioinfo.montp.cnrs.fr/?r=Tally"
            }
        ],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "NORM": {
        "name_process": "NORM",
        "string_process": "\nprocess NORM {\n    publishDir \"${params.outdir}/normalized\", mode: 'copy', pattern: \"*.normalization_stats.txt\" \n\n    input:\n        tuple val(pair_id), path(reads)\n\n    output:\n        tuple val(pair_id), path('reads.norm.*.fq.gz'),         emit: normreads\n        path \"*.normalization_stats.txt\",                       emit: stats\n\n    script:\n    def read_in = params.single_end ? \"in=$reads\" : \"in=${reads[0]} in2=${reads[1]}\"\n    def read_out = params.single_end ? \"out=reads.norm.1.fq.gz\" : \"out=reads.norm.1.fq.gz out2=reads.norm.2.fq.gz\"\n    \"\"\"\n    bbnorm.sh overwrite=true mindepth=1 target=100 $read_in $read_out\n    stats.sh overwrite=true in=reads.norm.1.fq.gz out=${pair_id}.normalization_stats.txt \n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    def read_in = params.single_end ? \"in=$reads\" : \"in=${reads[0]} in2=${reads[1]}\"\n    def read_out = params.single_end ? \"out=reads.norm.1.fq.gz\" : \"out=reads.norm.1.fq.gz out2=reads.norm.2.fq.gz\"\n    \"\"\"\n    bbnorm.sh overwrite=true mindepth=1 target=100 $read_in $read_out\n    stats.sh overwrite=true in=reads.norm.1.fq.gz out=${pair_id}.normalization_stats.txt \n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"${params.outdir}/normalized\", mode: 'copy', pattern: \"*.normalization_stats.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "CORRECT": {
        "name_process": "CORRECT",
        "string_process": "\nprocess CORRECT {\n\n    input:\n        tuple val(pair_id), path(reads)\n\n    output:\n        tuple val(pair_id), path('reads.rep.*.fq.gz'),         emit: correctreads\n\n    script:\n    def read_in = params.single_end ? \"in=$reads\" : \"in=${reads[0]} in2=${reads[1]}\"\n    def read_out = params.single_end ? \"out=reads.corr.1.fq.gz\" : \"out=reads.corr.1.fq.gz out2=reads.corr.2.fq.gz\"\n    def read_in2 = params.single_end ? \"in1=reads.corr.1.fq.gz\" : \"in1=reads.corr.1.fq.gz in2=reads.corr.1.fq.gz\"\n    def read_out2 = params.single_end ? \"out1=reads.rep.1.fq.gz\" : \"out1=reads.rep.1.fq.gz out2=reads.rep.2.fq.gz\"\n    \"\"\"\n    tadpole.sh $read_in $read_out mode=correct k=$params.correct_kmer ecc=t -Xmx1g prealloc=t prefilter=2 prepasses=auto prefiltersize=0.6\n    repair.sh overwrite=true $read_in2 $read_out2 repair\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    def read_in = params.single_end ? \"in=$reads\" : \"in=${reads[0]} in2=${reads[1]}\"\n    def read_out = params.single_end ? \"out=reads.corr.1.fq.gz\" : \"out=reads.corr.1.fq.gz out2=reads.corr.2.fq.gz\"\n    def read_in2 = params.single_end ? \"in1=reads.corr.1.fq.gz\" : \"in1=reads.corr.1.fq.gz in2=reads.corr.1.fq.gz\"\n    def read_out2 = params.single_end ? \"out1=reads.rep.1.fq.gz\" : \"out1=reads.rep.1.fq.gz out2=reads.rep.2.fq.gz\"\n    \"\"\"\n    tadpole.sh $read_in $read_out mode=correct k=$params.correct_kmer ecc=t -Xmx1g prealloc=t prefilter=2 prepasses=auto prefiltersize=0.6\n    repair.sh overwrite=true $read_in2 $read_out2 repair\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "MERGE": {
        "name_process": "MERGE",
        "string_process": "\nprocess MERGE {\n    publishDir \"${params.outdir}/merge\", mode: 'copy', pattern: \"*inserts.txt\" \n\n    input:\n        tuple val(pair_id), path(reads1), path(reads2)\n\n    output:\n        tuple val(pair_id), path('reads.merged.fq.gz'),                 emit: overlapreads\n        path \"*inserts.txt\",                                            emit: inserts\n\n    script:\n    \"\"\"\n    bbmerge.sh in=$reads1 in2=$reads2 out=reads.merged.fq.gz outu1=reads1.unmerged.fq.gz outu2=reads2.unmerged.fq.gz outinsert=${pair_id}.inserts.txt\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    bbmerge.sh in=$reads1 in2=$reads2 out=reads.merged.fq.gz outu1=reads1.unmerged.fq.gz outu2=reads2.unmerged.fq.gz outinsert=${pair_id}.inserts.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads1",
            "reads2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"${params.outdir}/merge\", mode: 'copy', pattern: \"*inserts.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "SPLIT": {
        "name_process": "SPLIT",
        "string_process": "\nprocess SPLIT {\n    publishDir \"${params.outdir}/split_tags\", mode: 'copy', pattern: \"*fq.gz\" \n\n    input:\n        tuple val(pair_id), path(reads)\n\n    output:\n        tuple val(pair_id), path('*.fq.gz'),                        emit: splitreads\n\n    script:\n    \"\"\"\n    $projectDir/bin/split_barcode.py --input $reads --prefix $pair_id --len $params.tag_len\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    $projectDir/bin/split_barcode.py --input $reads --prefix $pair_id --len $params.tag_len\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"${params.outdir}/split_tags\", mode: 'copy', pattern: \"*fq.gz\""
        ],
        "when": "",
        "stub": ""
    },
    "CLUSTER": {
        "name_process": "CLUSTER",
        "string_process": "\nprocess CLUSTER {\n    publishDir \"$params.outdir/exons/\", mode: 'copy'\n\n    input:\n        tuple val(pair_id), path(seqs)\n        path exons\n\n    output:\n        tuple val(pair_id), path(\"exon_clusters/$pair_id/*txt.fa\"),           emit: clusterseqs\n        tuple val(pair_id), path(\"exon_clusters/$pair_id/*clw\"),              emit: alignments\n\n    script:\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    mkdir -p exon_clusters\n    create_cluster $exons $seqs nucl exon_clusters/$pair_id $task.cpus\n    cp exon_clusters/$pair_id/*_clusters/*clw exon_clusters/$pair_id/\n    cp exon_clusters/$pair_id/*_clusters/*txt.fa exon_clusters/$pair_id/\n   \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    source $projectDir/bin/functions.sh\n    mkdir -p exon_clusters\n    create_cluster $exons $seqs nucl exon_clusters/$pair_id $task.cpus\n    cp exon_clusters/$pair_id/*_clusters/*clw exon_clusters/$pair_id/\n    cp exon_clusters/$pair_id/*_clusters/*txt.fa exon_clusters/$pair_id/\n   \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "seqs",
            "exons"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"$params.outdir/exons/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "NGMALIGN": {
        "name_process": "NGMALIGN",
        "string_process": "\nprocess NGMALIGN {\n    input:\n        tuple val(pair_id), path(reads)\n        path reference\n\n    output:\n        tuple val(pair_id), path('align.ngm.bam'),                  emit: ngmbam\n\n    script:\n    def read_in = params.single_end ? \"-q $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    ngm -b -r $reference $read_in -o align.ngm.bam -t $task.cpus > ngm.log 2> ngm.err\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    def read_in = params.single_end ? \"-q $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    ngm -b -r $reference $read_in -o align.ngm.bam -t $task.cpus > ngm.log 2> ngm.err\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "NGMLR"
        ],
        "tools_url": [
            "https://bio.tools/ngmlr"
        ],
        "tools_dico": [
            {
                "name": "NGMLR",
                "uri": "https://bio.tools/ngmlr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2520",
                                    "term": "DNA mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3497",
                                "term": "DNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "An algorithm to map third generation long-read sequencing data (PacBio and Oxford Nanopore) to a reference genome with a focus on reads that span structural variation.",
                "homepage": "https://github.com/philres/ngmlr"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "EXTRACTBAM": {
        "name_process": "EXTRACTBAM",
        "string_process": "\nprocess EXTRACTBAM {\n    input:\n        tuple val(pair_id), path(bam)\n\n    output:\n        tuple val(pair_id), path('*.fq.gz'),     emit: extractread\n\n    script:\n    if( params.single_end ){\n        \"\"\"\n        source $projectDir/bin/functions.sh\n        extract_bam_reads_se $bam $task.cpus\n        \"\"\"\n    }\n    else {\n        \"\"\"\n        source $projectDir/bin/functions.sh\n        extract_bam_reads $bam $task.cpus\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 20,
        "string_script": "    if( params.single_end ){\n        \"\"\"\n        source $projectDir/bin/functions.sh\n        extract_bam_reads_se $bam $task.cpus\n        \"\"\"\n    }\n    else {\n        \"\"\"\n        source $projectDir/bin/functions.sh\n        extract_bam_reads $bam $task.cpus\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "COMPLEXITYFILTER": {
        "name_process": "COMPLEXITYFILTER",
        "string_process": "\nprocess COMPLEXITYFILTER {\n    input:\n        tuple val(pair_id), path(reads)\n        val trimargs\n\n    output:\n        tuple val(pair_id), path('good*fq.gz'),    emit: filterread\n\n    script:\n    def read_in = params.single_end ? \"-i $reads\" : \"-i ${reads[0]} -I ${reads[1]}\"\n    def read_out = params.single_end ? \"-o good.fq.gz\" : \"-o good.1.fq.gz -O good.2.fq.gz\"\n    \"\"\"\n    fastp -G -A -L -Q --low_complexity_filter $read_in $read_out\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    def read_in = params.single_end ? \"-i $reads\" : \"-i ${reads[0]} -I ${reads[1]}\"\n    def read_out = params.single_end ? \"-o good.fq.gz\" : \"-o good.1.fq.gz -O good.2.fq.gz\"\n    \"\"\"\n    fastp -G -A -L -Q --low_complexity_filter $read_in $read_out\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "trimargs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "SPADESASSEM": {
        "name_process": "SPADESASSEM",
        "string_process": "\nprocess SPADESASSEM {\n    input:\n        tuple val(pair_id), path(reads)\n        val assemargs\n\n    output:\n        tuple val(pair_id), path('spades.fa'),           emit: assembly\n\n    script:\n    def read_in = params.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    spades.py $assemargs $read_in -t $task.cpus -o spades_assembly \n    if [ -s spades_assembly/scaffolds.fasta ]; then\n      cp spades_assembly/scaffolds.fasta spades.fa\n      echo \"Assembly complete.\"\n    else\n      if [ -s spades_assembly/contigs.fasta ]; then\n        cp spades_assembly/contigs.fasta spades.fa\n        echo \"Warning: Partial assembly, likely low quality data. Assembly complete.\"\n      else\n        echo \"Error with assembly $pair_id.\"\n        return 1\n      fi\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def read_in = params.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    spades.py $assemargs $read_in -t $task.cpus -o spades_assembly \n    if [ -s spades_assembly/scaffolds.fasta ]; then\n      cp spades_assembly/scaffolds.fasta spades.fa\n      echo \"Assembly complete.\"\n    else\n      if [ -s spades_assembly/contigs.fasta ]; then\n        cp spades_assembly/contigs.fasta spades.fa\n        echo \"Warning: Partial assembly, likely low quality data. Assembly complete.\"\n      else\n        echo \"Error with assembly $pair_id.\"\n        return 1\n      fi\n    fi\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "noreturn"
        ],
        "tools_url": [
            "https://bio.tools/noreturn"
        ],
        "tools_dico": [
            {
                "name": "noreturn",
                "uri": "https://bio.tools/noreturn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Remove carriage return from ASCII files.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/noreturn.html"
            }
        ],
        "inputs": [
            "pair_id",
            "reads",
            "assemargs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "BLASTFILTER": {
        "name_process": "BLASTFILTER",
        "string_process": "\nprocess BLASTFILTER {\n    input:\n        tuple val(pair_id), path(contigs)\n        path reference\n        val fasta_command\n\n    output:\n        tuple val(pair_id), path('scaffolds.verified.fasta'),           emit: filtercontigs\n\n    script:\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    $fasta_command -E 1e-10 -T $task.cpus -m 8  $contigs $reference | \\\n        sed 's/_/ /g' |sed 's/ /_/g' |awk '{print \\$1}' |sort |uniq > scaffolds.blast.list\n    if [ ! -s scaffolds.blast.list ]; then\n      return 1\n    fi\n    extractBlastedScaff scaffolds.blast.list $contigs scaffolds.verified.fasta T\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    source $projectDir/bin/functions.sh\n    $fasta_command -E 1e-10 -T $task.cpus -m 8  $contigs $reference | \\\n        sed 's/_/ /g' |sed 's/ /_/g' |awk '{print \\$1}' |sort |uniq > scaffolds.blast.list\n    if [ ! -s scaffolds.blast.list ]; then\n      return 1\n    fi\n    extractBlastedScaff scaffolds.blast.list $contigs scaffolds.verified.fasta T\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "noreturn"
        ],
        "tools_url": [
            "https://bio.tools/noreturn"
        ],
        "tools_dico": [
            {
                "name": "noreturn",
                "uri": "https://bio.tools/noreturn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Remove carriage return from ASCII files.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/noreturn.html"
            }
        ],
        "inputs": [
            "pair_id",
            "contigs",
            "reference",
            "fasta_command"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "CYCLEASSEM": {
        "name_process": "CYCLEASSEM",
        "string_process": "\nprocess CYCLEASSEM {\n\n    input:\n        tuple val(pair_id), path(initial_contigs)\n        tuple val(pair_id), path(reads)\n        path reference\n        val fasta_command\n        val maxit\n\n    output:\n        tuple val(pair_id), path(\"${pair_id}.scaffolds.fa\"),           emit: cyclecontigs\n\n    script:\n    def ngm_in = params.single_end ? \"-q $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    filter_in = params.single_end ? \"-i reads/output.fq.gz\" : \"-i reads/output.1.fq.gz -I reads/output.2.fq.gz\"\n    filter_out = params.single_end ? \"-o reads/good.fq.gz\" : \"-o reads/good.1.fq.gz -O reads/good.2.fq.gz\"\n    def spades_in = params.single_end ? \"-s reads/good.fq.gz\" : \"-1 reads/good.1.fq.gz -2 reads/good.2.fq.gz\"\n    def bam_extract = params.single_end ? \"extract_bam_reads_se\" : \"extract_bam_reads\"\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    i=0\n    contcount=10 \n    cycle_genome=$initial_contigs\n    mkdir -p reads\n\n    while ( [ \\\"\\$i\\\" -lt \\\"$maxit\\\" ] && [ \\\"\\$contcount\\\" -gt \\\"1\\\" ] ); do\n        let i=i+1 \n        mkdir run_\\$i/\n\n        #### Map reads against seed contigs to get mapped reads ####\n        ngm -b -i 0.99 -r \\$cycle_genome $ngm_in -o run_\\$i/output.bam -t $task.cpus > run_\\$i/ngm.log 2> run_\\$i/ngm.err\n        command_success=0\n        grep '(0 reads mapped' run_\\$i/ngm.err > /dev/null 2>1 || command_success=1\n        if [ \\\"\\$command_success\\\" -eq 0 ]; then\n          if [ \\\"\\$i\\\" -eq 1 ]; then\n            echo 'Mapping to cycle assembly failed. Using inital contigs.'\n            cp $initial_contigs ${pair_id}.final_scaffolds.fa\n          else\n            echo 'Subsequent cycle mapping failed. Using previous cycle.'\n            let i=i-1\n            cp run_\\$i/scaffolds.verified.fasta ${pair_id}.final_scaffolds.fa\n            break\n          fi\n        fi\n        $bam_extract run_\\$i/output $task.cpus\n        mv run_\\$i/*.fq.gz reads/\n        rm -f run_\\$i/*.bam run_\\$i/*.ngm run_\\$i/*.bt2\n\n        #### Do de novo assembly of plastid reads ####\n        fastp -G -A -L -Q --low_complexity_filter $filter_in $filter_out\n        spades.py --cov-cutoff 1 $spades_in -t $task.cpus -o run_\\$i/spades_assembly\n        if [ -s run_\\$i/spades_assembly/scaffolds.fasta ]; then\n          cp run_\\$i/spades_assembly/scaffolds.fasta run_\\$i/scaff.fa\n        else\n          if [ -s run_\\$i/spades_assembly/contigs.fasta ]; then\n            echo 'Warning: only contigs produced in spades assembly.'\n            cp run_\\$i/spades_assembly/contigs.fasta run_\\$i/scaff.fa\n          else\n            echo 'Error in spades cycle assembly. Low quality data likely.'\n            exit 1\n          fi\n        fi\n\n        #### Only keep scaffolds that blast back to reference genome to discard junk ####\n        $fasta_command -E 1e-10 -T $task.cpus -m 8 run_\\$i/scaff.fa $reference | \\\n            sed 's/_/ /g' |sed 's/ /_/g' |awk '{print \\$1}' |sort |uniq > run_\\$i/spades_assembly/scaffolds.blast.list\n        if [ ! -s run_\\$i/spades_assembly/scaffolds.blast.list ]; then\n          if [ \\\"\\$i\\\" -eq 1 ]; then\n            echo 'No hits found. Using inital contigs.'\n            cp $initial_contigs run_\\$i/scaff.fa\n          else\n            echo 'No hits found. Using previous cycle.'\n            let i=i-1\n            cp run_\\$i/scaffolds.verified.fasta run_\\$i/scaff.fa\n          fi\n          $fasta_command -E 1e-10 -T $task.cpus -m 8 run_\\$i/scaff.fa $reference | \\\n            sed 's/_/ /g' |sed 's/ /_/g' |awk '{print \\$1}' |sort |uniq > run_\\$i/spades_assembly/scaffolds.blast.list\n          extractBlastedScaff run_\\$i/spades_assembly/scaffolds.blast.list run_\\$i/scaff.fa run_\\$i/scaffolds.verified.fasta T\n          samtools faidx run_\\$i/scaffolds.verified.fasta\n          break\n        fi\n        extractBlastedScaff run_\\$i/spades_assembly/scaffolds.blast.list run_\\$i/scaff.fa run_\\$i/scaffolds.verified.fasta T\n\n        #### Check summary statistics of new plastid assembly ####\n        contcount=\\$(grep -c \\\">\\\" run_\\$i/scaffolds.verified.fasta)\n        samtools faidx run_\\$i/scaffolds.verified.fasta\n        cycle_genome=run_\\$i/scaffolds.verified.fasta\n        rm -f run_\\$i/*fq* run_\\$i/*fa run_\\$i/*ngm reads/*fq.gz\n    done\n    if [ \\\"\\$i\\\" -eq \\\"$maxit\\\" ] || [ \\\"\\$contcount\\\" -eq \\\"1\\\" ]; then\n        cp run_\\$i/scaffolds.verified.fasta ${pair_id}.scaffolds.fa\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 93,
        "string_script": "    def ngm_in = params.single_end ? \"-q $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    filter_in = params.single_end ? \"-i reads/output.fq.gz\" : \"-i reads/output.1.fq.gz -I reads/output.2.fq.gz\"\n    filter_out = params.single_end ? \"-o reads/good.fq.gz\" : \"-o reads/good.1.fq.gz -O reads/good.2.fq.gz\"\n    def spades_in = params.single_end ? \"-s reads/good.fq.gz\" : \"-1 reads/good.1.fq.gz -2 reads/good.2.fq.gz\"\n    def bam_extract = params.single_end ? \"extract_bam_reads_se\" : \"extract_bam_reads\"\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    i=0\n    contcount=10 \n    cycle_genome=$initial_contigs\n    mkdir -p reads\n\n    while ( [ \\\"\\$i\\\" -lt \\\"$maxit\\\" ] && [ \\\"\\$contcount\\\" -gt \\\"1\\\" ] ); do\n        let i=i+1 \n        mkdir run_\\$i/\n\n        #### Map reads against seed contigs to get mapped reads ####\n        ngm -b -i 0.99 -r \\$cycle_genome $ngm_in -o run_\\$i/output.bam -t $task.cpus > run_\\$i/ngm.log 2> run_\\$i/ngm.err\n        command_success=0\n        grep '(0 reads mapped' run_\\$i/ngm.err > /dev/null 2>1 || command_success=1\n        if [ \\\"\\$command_success\\\" -eq 0 ]; then\n          if [ \\\"\\$i\\\" -eq 1 ]; then\n            echo 'Mapping to cycle assembly failed. Using inital contigs.'\n            cp $initial_contigs ${pair_id}.final_scaffolds.fa\n          else\n            echo 'Subsequent cycle mapping failed. Using previous cycle.'\n            let i=i-1\n            cp run_\\$i/scaffolds.verified.fasta ${pair_id}.final_scaffolds.fa\n            break\n          fi\n        fi\n        $bam_extract run_\\$i/output $task.cpus\n        mv run_\\$i/*.fq.gz reads/\n        rm -f run_\\$i/*.bam run_\\$i/*.ngm run_\\$i/*.bt2\n\n        #### Do de novo assembly of plastid reads ####\n        fastp -G -A -L -Q --low_complexity_filter $filter_in $filter_out\n        spades.py --cov-cutoff 1 $spades_in -t $task.cpus -o run_\\$i/spades_assembly\n        if [ -s run_\\$i/spades_assembly/scaffolds.fasta ]; then\n          cp run_\\$i/spades_assembly/scaffolds.fasta run_\\$i/scaff.fa\n        else\n          if [ -s run_\\$i/spades_assembly/contigs.fasta ]; then\n            echo 'Warning: only contigs produced in spades assembly.'\n            cp run_\\$i/spades_assembly/contigs.fasta run_\\$i/scaff.fa\n          else\n            echo 'Error in spades cycle assembly. Low quality data likely.'\n            exit 1\n          fi\n        fi\n\n        #### Only keep scaffolds that blast back to reference genome to discard junk ####\n        $fasta_command -E 1e-10 -T $task.cpus -m 8 run_\\$i/scaff.fa $reference | \\\n            sed 's/_/ /g' |sed 's/ /_/g' |awk '{print \\$1}' |sort |uniq > run_\\$i/spades_assembly/scaffolds.blast.list\n        if [ ! -s run_\\$i/spades_assembly/scaffolds.blast.list ]; then\n          if [ \\\"\\$i\\\" -eq 1 ]; then\n            echo 'No hits found. Using inital contigs.'\n            cp $initial_contigs run_\\$i/scaff.fa\n          else\n            echo 'No hits found. Using previous cycle.'\n            let i=i-1\n            cp run_\\$i/scaffolds.verified.fasta run_\\$i/scaff.fa\n          fi\n          $fasta_command -E 1e-10 -T $task.cpus -m 8 run_\\$i/scaff.fa $reference | \\\n            sed 's/_/ /g' |sed 's/ /_/g' |awk '{print \\$1}' |sort |uniq > run_\\$i/spades_assembly/scaffolds.blast.list\n          extractBlastedScaff run_\\$i/spades_assembly/scaffolds.blast.list run_\\$i/scaff.fa run_\\$i/scaffolds.verified.fasta T\n          samtools faidx run_\\$i/scaffolds.verified.fasta\n          break\n        fi\n        extractBlastedScaff run_\\$i/spades_assembly/scaffolds.blast.list run_\\$i/scaff.fa run_\\$i/scaffolds.verified.fasta T\n\n        #### Check summary statistics of new plastid assembly ####\n        contcount=\\$(grep -c \\\">\\\" run_\\$i/scaffolds.verified.fasta)\n        samtools faidx run_\\$i/scaffolds.verified.fasta\n        cycle_genome=run_\\$i/scaffolds.verified.fasta\n        rm -f run_\\$i/*fq* run_\\$i/*fa run_\\$i/*ngm reads/*fq.gz\n    done\n    if [ \\\"\\$i\\\" -eq \\\"$maxit\\\" ] || [ \\\"\\$contcount\\\" -eq \\\"1\\\" ]; then\n        cp run_\\$i/scaffolds.verified.fasta ${pair_id}.scaffolds.fa\n    fi\n    \"\"\"",
        "nb_lignes_script": 79,
        "language_script": "bash",
        "tools": [
            "carlet",
            "NGMLR",
            "NullSeq",
            "BreakSeq",
            "fastPHASE",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/carlet",
            "https://bio.tools/ngmlr",
            "https://bio.tools/nullseq",
            "https://bio.tools/breakseq",
            "https://bio.tools/fastphase",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "carlet",
                "uri": "https://bio.tools/carlet",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Single-cell tumor phylogeny inference with copy-number constrained mutation losses.\n\nSCARLET (Single-cell Algorithm for Reconstructing Loss-supported Evolution of Tumors) is an algorithm that reconstructs tumor phylogenies from single-cell DNA sequencing data. SCARLET uses a loss-supported model that constrains mutation losses based on observed copy-number data.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'S carlet', 'loss-supported'",
                "homepage": "http://github.com/raphael-group/scarlet"
            },
            {
                "name": "NGMLR",
                "uri": "https://bio.tools/ngmlr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2520",
                                    "term": "DNA mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3497",
                                "term": "DNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "An algorithm to map third generation long-read sequencing data (PacBio and Oxford Nanopore) to a reference genome with a focus on reads that span structural variation.",
                "homepage": "https://github.com/philres/ngmlr"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            },
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "initial_contigs",
            "pair_id",
            "reads",
            "reference",
            "fasta_command",
            "maxit"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "ORIENT": {
        "name_process": "ORIENT",
        "string_process": "\nprocess ORIENT {\n\n    input:\n        tuple val(pair_id), path(contigs)\n        path(reference)\n\n    output:\n        tuple val(pair_id), path(\"${pair_id}.oriented.fa\"),           emit: oriented\n\n    script:\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    cp $reference reference.fa\n    sed -i 's/_length.*//g' $contigs\n    # Coordinates start from the end of the contig if they align on negative strand so avoid that by adding revcomp of all contigs\n    seqtk seq -r $contigs > scaffolds.rev.fa\n    sed -i 's/>/>R/g' scaffolds.rev.fa\n    cat scaffolds.rev.fa >> $contigs\n    fasta36 -E 1E-10 -T $task.cpus -m 8 $reference $contigs > gene_search.txt 2> /dev/null\n    awk '(\\$8>\\$7) && (\\$10>\\$9) {print \\$2}' gene_search.txt |sort |uniq > gene_search.stranded.txt\n    samtools faidx $contigs\n    extract_seq gene_search.stranded.txt $contigs ${pair_id}.oriented.fa F    \n    sed -i 's/-/__/g' ${pair_id}.oriented.fa\n    sed -i 's/:/___/g' ${pair_id}.oriented.fa\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    source $projectDir/bin/functions.sh\n    cp $reference reference.fa\n    sed -i 's/_length.*//g' $contigs\n    # Coordinates start from the end of the contig if they align on negative strand so avoid that by adding revcomp of all contigs\n    seqtk seq -r $contigs > scaffolds.rev.fa\n    sed -i 's/>/>R/g' scaffolds.rev.fa\n    cat scaffolds.rev.fa >> $contigs\n    fasta36 -E 1E-10 -T $task.cpus -m 8 $reference $contigs > gene_search.txt 2> /dev/null\n    awk '(\\$8>\\$7) && (\\$10>\\$9) {print \\$2}' gene_search.txt |sort |uniq > gene_search.stranded.txt\n    samtools faidx $contigs\n    extract_seq gene_search.stranded.txt $contigs ${pair_id}.oriented.fa F    \n    sed -i 's/-/__/g' ${pair_id}.oriented.fa\n    sed -i 's/:/___/g' ${pair_id}.oriented.fa\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "NullSeq",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/nullseq",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "contigs",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "SCAFFOLDSOUT": {
        "name_process": "SCAFFOLDSOUT",
        "string_process": "\nprocess SCAFFOLDSOUT {\n    publishDir \"$params.outdir/assembled_contigs/\", mode: 'copy'\n\n    input:\n        tuple val(pair_id), path(contigs)\n\n    output:\n        tuple val(pair_id), path(\"${pair_id}.final_scaffolds.fa\"),           emit: finalscaffs\n\n    script:\n    \"\"\"\n    mv $contigs ${pair_id}.final_scaffolds.fa\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    mv $contigs ${pair_id}.final_scaffolds.fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pair_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"$params.outdir/assembled_contigs/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "EXTRACTEXONS": {
        "name_process": "EXTRACTEXONS",
        "string_process": "\nprocess EXTRACTEXONS {\n    publishDir \"$params.outdir/exons/sequences/\", mode: 'copy'\n\n    input:\n        tuple val(pair_id), path(contigs)\n        path(exons)\n\n    output:\n        tuple val(pair_id), path(\"${pair_id}.fa\"),           emit: exonseqs\n\n    script:\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    cp $exons exons.fa\n    # Extract sequences that are hits for exons\n    sed -i 's/_length.*//g' $contigs\n    # Coordinates start from the end of the contig if they align on negative strand so avoid that by adding revcomp of all contigs\n    seqtk seq -r $contigs > scaffolds.rev.fa\n    sed -i 's/>/>R/g' scaffolds.rev.fa\n    cat scaffolds.rev.fa >> $contigs\n    fasta36 -E 1E-10 -T $task.cpus -m 8 $exons $contigs > gene_search.txt 2> /dev/null\n    awk '(\\$8>\\$7) && (\\$10>\\$9) {print \\$0}' gene_search.txt > gene_search.stranded.txt\n    # Only except hits that span >80% of the exon\n    samtools faidx exons.fa\n    $projectDir/bin/mergeBlastHits.py gene_search.stranded.txt gene_search.stranded_merge.txt flanking_positive 50\n    join <(awk '{printf \\\"%s %s:%s-%s %s\\\\n\\\",\\$1,\\$2,\\$9,\\$10,\\$8-\\$7}' gene_search.stranded_merge.txt |sort -k1,1 |uniq) <(awk '{print \\$1,\\$2}' exons.fa.fai |sort -k1,1) \\\n        |awk '((0.8*\\$4) < \\$3) {print \\$2}' |uniq > gene_search.filtered.txt\n    extract_seq gene_search.filtered.txt $contigs ${pair_id}.fa F    \n    sed -i 's/-/__/g' ${pair_id}.fa\n    sed -i 's/:/___/g' ${pair_id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    source $projectDir/bin/functions.sh\n    cp $exons exons.fa\n    # Extract sequences that are hits for exons\n    sed -i 's/_length.*//g' $contigs\n    # Coordinates start from the end of the contig if they align on negative strand so avoid that by adding revcomp of all contigs\n    seqtk seq -r $contigs > scaffolds.rev.fa\n    sed -i 's/>/>R/g' scaffolds.rev.fa\n    cat scaffolds.rev.fa >> $contigs\n    fasta36 -E 1E-10 -T $task.cpus -m 8 $exons $contigs > gene_search.txt 2> /dev/null\n    awk '(\\$8>\\$7) && (\\$10>\\$9) {print \\$0}' gene_search.txt > gene_search.stranded.txt\n    # Only except hits that span >80% of the exon\n    samtools faidx exons.fa\n    $projectDir/bin/mergeBlastHits.py gene_search.stranded.txt gene_search.stranded_merge.txt flanking_positive 50\n    join <(awk '{printf \\\"%s %s:%s-%s %s\\\\n\\\",\\$1,\\$2,\\$9,\\$10,\\$8-\\$7}' gene_search.stranded_merge.txt |sort -k1,1 |uniq) <(awk '{print \\$1,\\$2}' exons.fa.fai |sort -k1,1) \\\n        |awk '((0.8*\\$4) < \\$3) {print \\$2}' |uniq > gene_search.filtered.txt\n    extract_seq gene_search.filtered.txt $contigs ${pair_id}.fa F    \n    sed -i 's/-/__/g' ${pair_id}.fa\n    sed -i 's/:/___/g' ${pair_id}.fa\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "NullSeq",
            "SAMtools",
            "joineRML"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/nullseq",
            "https://bio.tools/samtools",
            "https://bio.tools/joinerml"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "joineRML",
                "uri": "https://bio.tools/joinerml",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3569",
                            "term": "Applied mathematics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Joint Modelling of Multivariate Longitudinal Data and Time-to-Event Outcomes.",
                "homepage": "https://cran.r-project.org/web/packages/joineRML/"
            }
        ],
        "inputs": [
            "pair_id",
            "contigs",
            "exons"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"$params.outdir/exons/sequences/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "FINDEXONS": {
        "name_process": "FINDEXONS",
        "string_process": "\nprocess FINDEXONS {\n    publishDir \"$params.outdir/exons/identified/\", mode: 'copy'\n\n    input:\n        tuple val(pair_id), path(seqs)\n        path(exons)\n\n    output:\n        tuple val(pair_id), path(\"$pair_id/*.fa\"),           emit: exonsbra\n\n    script:\n    \"\"\"\n    source $projectDir/bin/functions.sh\n    # Get the best reciprical alignment between exons and extracted sequences to only have 1 per exons\n    getBRA $seqs $exons dna_dna\n    mkdir -p $pair_id/\n    while IFS=' ' read col1 col2\n    do\n        echo \\$col2\n      samtools faidx $seqs \\$col1 > $pair_id/\\${col2}.fa\n      sed -i 's/___/:/g' $pair_id/\\${col2}.fa\n      sed -i 's/__/-/g' $pair_id/\\${col2}.fa\n    done < ${seqs}.BRA.dna_dna.txt\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    source $projectDir/bin/functions.sh\n    # Get the best reciprical alignment between exons and extracted sequences to only have 1 per exons\n    getBRA $seqs $exons dna_dna\n    mkdir -p $pair_id/\n    while IFS=' ' read col1 col2\n    do\n        echo \\$col2\n      samtools faidx $seqs \\$col1 > $pair_id/\\${col2}.fa\n      sed -i 's/___/:/g' $pair_id/\\${col2}.fa\n      sed -i 's/__/-/g' $pair_id/\\${col2}.fa\n    done < ${seqs}.BRA.dna_dna.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "pair_id",
            "seqs",
            "exons"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ntoda03__cycleassembler",
        "directive": [
            "publishDir \"$params.outdir/exons/identified/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
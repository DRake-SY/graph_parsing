{
    "extract_reads": {
        "name_process": "extract_reads",
        "string_process": "\nprocess extract_reads {\n\n    input:\n    set val(name), file(alignment) from input_ch\n\n    output:\n    file('*.log') into extract_log_ch\n    set val(name), file('*.fq.gz') into reads_ch\n\n    script:\n    \"\"\"\n    arcasHLA extract ${alignment} -o . --unmapped -t ${task.cpus} --log ${name}.extract.log --temp \\$TMPDIR\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    arcasHLA extract ${alignment} -o . --unmapped -t ${task.cpus} --log ${name}.extract.log --temp \\$TMPDIR\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "extract_log_ch",
            "reads_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "ameynert__nf-arcasHLA",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "genotype": {
        "name_process": "genotype",
        "string_process": "\nprocess genotype {\n\n    input:\n    set val(name), file(reads) from reads_ch\n\n    output:\n    file(\"*.log\")\n    file('*.json') into genotype_ch\n\n    script:\n    \"\"\"\n    arcasHLA genotype ${reads} -g A,B,C,DPB1,DQB1,DQA1,DRB1 -o . -t ${task.cpus} --log ${name}.genotype.log --temp \\$TMPDIR\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    arcasHLA genotype ${reads} -g A,B,C,DPB1,DQB1,DQA1,DRB1 -o . -t ${task.cpus} --log ${name}.genotype.log --temp \\$TMPDIR\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genotype_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-arcasHLA",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n\n   publishDir params.outdir, mode: 'copy'\n   validExitStatus 0,1\n\n   input:\n   file(output) from genotype_ch.collect()\n\n   output:\n   file('*.tsv') into merged_ch\n\n   script:\n   \"\"\"\n   arcasHLA merge --indir . --outdir . --run ${params.name}\n   perl -pi -e 's/Aligned//' ${params.name}.genotypes.tsv\n   \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "   \"\"\"\n   arcasHLA merge --indir . --outdir . --run ${params.name}\n   perl -pi -e 's/Aligned//' ${params.name}.genotypes.tsv\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genotype_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-arcasHLA",
        "directive": [
            "publishDir params.outdir, mode: 'copy'",
            "validExitStatus 0,1"
        ],
        "when": "",
        "stub": ""
    }
}
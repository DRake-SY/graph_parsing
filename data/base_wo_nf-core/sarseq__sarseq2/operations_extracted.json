{
    "OPERATION_1": {
        "string": "ch_bc2sample = Channel.from(file (\"empty\"))",
        "origin": [],
        "gives": [
            [
                "ch_bc2sample",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "parameter_summary = Channel\n    .fromPath(full_initial_summary_file)",
        "origin": [
            [
                "full_initial_summary_file",
                "A"
            ]
        ],
        "gives": [
            [
                "parameter_summary",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .from(\n    file(\"${params.inputdir}/*R1*\", checkIfExists: true, maxDepth: 1),\n    file(\"${params.inputdir}/*R2*\", checkIfExists: true, maxDepth: 1),\n    file(\"${params.inputdir}/*I1*\", checkIfExists: true, maxDepth: 1),\n    file(\"${params.inputdir}/*I2*\", checkIfExists: true, maxDepth: 1)\n    )\n    .collect()\n    .ifEmpty { error \"Cannot find any files matching R1 R2 I1 I2 in inputdir ${params.inputdir}/\" }\n    .set{ch_input}",
        "origin": [],
        "gives": [
            [
                "ch_input",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_dmx = Channel.fromPath(\"${params.redo}/*fastq\")",
        "origin": [
            [
                "\"${params.redo}/*fastq\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_dmx",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_dmx_rmd = Channel.fromPath(\"${params.redo}/QC__demux.tsv\")",
        "origin": [
            [
                "\"${params.redo}/QC__demux.tsv\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_dmx_rmd",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_lineage = Channel.from(file(\"empty\"))",
        "origin": [],
        "gives": [
            [
                "ch_lineage",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_aln2spike_multiqc_report = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_aln2spike_multiqc_report",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "full_initial_summary = summary.collect { k,v -> \"${k.padRight(20)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": [
            [
                "full_initial_summary",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "parameter_summary.into{parameter_summary1;parameter_summary2}",
        "origin": [
            [
                "parameter_summary",
                "P"
            ]
        ],
        "gives": [
            [
                "parameter_summary1",
                "P"
            ],
            [
                "parameter_summary2",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_dmx.collect().flatten().map{ l ->\n    [ l.getName().split(\"-\")[1] - \".R12.fastq\" ,l]\n}.groupTuple().into{ch_aln2spike_set;ch_read2tile}",
        "origin": [
            [
                "ch_dmx",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_aln2spike_set",
                "P"
            ],
            [
                "ch_read2tile",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_r2t_fastq\n    .collect()\n    .flatten()\n    .map{ l ->\n    [  l.getName().split(\"-\")[1] - \".R12.fastq\" ,l]\n}.groupTuple().set{ch_r2t_fastq_set}",
        "origin": [
            [
                "ch_r2t_fastq",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_r2t_fastq_set",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "ch_aln2tile_bam_log.collect().flatten().map{ l ->\n    [ l.getName() - \".bam\" - \".flagstat\"  ,l]\n}.groupTuple().map{ l ->\n    [ l[1][0],l[1][1] ]\n    }.set{ch_aln2tile_bam_log_per_sample}",
        "origin": [
            [
                "ch_aln2tile_bam_log",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_aln2tile_bam_log_per_sample",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_aln2tile_bam_log_per_sample\n                                              \n    .collect()\n    .flatten()\n    .filter( ~/.*bam/ )\n    .map{ l ->\n    [ l.getName().split(\"-\")[1] - \".bam\" ,l]\n}.groupTuple().set{ch_aln2tile_bam_set}",
        "origin": [
            [
                "ch_aln2tile_bam_log_per_sample",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_aln2tile_bam_set",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "ch_aln2spike_bam_log.collect().flatten().map{ l ->\n      [ l.getName() - \".bam\" - \".flagstat\"  ,l]\n  }.groupTuple().map{ l ->\n      [ l[1][0],l[1][1] ]\n  }.set{ch_aln2spike_bam_log_per_sample}",
        "origin": [
            [
                "ch_aln2spike_bam_log",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_aln2spike_bam_log_per_sample",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "ch_aln2spike_bam_log_per_sample\n                                                \n    .collect()\n    .flatten()\n    .filter( ~/.*bam/ )\n    .map{ l ->\n    [ l.getName().split(\"-\")[1] - \".bam\" ,l]\n  }.groupTuple().set{ch_aln2spike_bam_set}",
        "origin": [
            [
                "ch_aln2spike_bam_log_per_sample",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_aln2spike_bam_set",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "text=full_initial_summary",
        "origin": [
            [
                "full_initial_summary",
                "P"
            ]
        ],
        "gives": [
            [
                "text",
                "P"
            ]
        ]
    }
}
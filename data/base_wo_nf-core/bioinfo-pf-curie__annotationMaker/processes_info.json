{
    "getFasta": {
        "name_process": "getFasta",
        "string_process": "\nprocess getFasta {\n  label 'unix'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/genome\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  input:\n  val(url) from chFastaLink\n\n  output:\n  file(\"*.{fa,fasta}\") into chFastaURL\n\n  script:\n  if (url.endsWith(\".tar.gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url} -O chromFa.tar.gz\n\n  mkdir ./tmp\n  tar zxvf chromFa.tar.gz -C ./tmp\n  for i in \\$(ls tmp/*.fa | grep -v \"_\" | sort -V); do cat \\$i >> ${build}.fa; done\n  for i in \\$(ls tmp/*.fa | grep \"_\" | sort -V); do cat \\$i >> ${build}.fa; done\n  rm -rf ./tmp\n  \"\"\"\n  }else if (url.endsWith(\".gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url}\n  gunzip *.gz\n  \"\"\"\n  }else{\n  \"\"\"\n  wget --no-check-certificate ${url}\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 35,
        "string_script": "  if (url.endsWith(\".tar.gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url} -O chromFa.tar.gz\n\n  mkdir ./tmp\n  tar zxvf chromFa.tar.gz -C ./tmp\n  for i in \\$(ls tmp/*.fa | grep -v \"_\" | sort -V); do cat \\$i >> ${build}.fa; done\n  for i in \\$(ls tmp/*.fa | grep \"_\" | sort -V); do cat \\$i >> ${build}.fa; done\n  rm -rf ./tmp\n  \"\"\"\n  }else if (url.endsWith(\".gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url}\n  gunzip *.gz\n  \"\"\"\n  }else{\n  \"\"\"\n  wget --no-check-certificate ${url}\n  \"\"\"\n  }",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chFastaLink"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chFastaURL"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/genome\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "",
        "stub": ""
    },
    "getTranscriptome": {
        "name_process": "getTranscriptome",
        "string_process": "\nprocess getTranscriptome {\n  label 'unix'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/gtf\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  input:\n  val(url) from chTrsLink\n\n  output:\n  file(\"*.{fa,fasta}\") into chTrsURL\n\n  script:\n  if (url.endsWith(\".gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url}\n  gunzip *.gz\n  \"\"\"\n  }else{\n  \"\"\"\n  wget --no-check-certificate ${url}\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 25,
        "string_script": "  if (url.endsWith(\".gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url}\n  gunzip *.gz\n  \"\"\"\n  }else{\n  \"\"\"\n  wget --no-check-certificate ${url}\n  \"\"\"\n  }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chTrsLink"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chTrsURL"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/gtf\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "",
        "stub": ""
    },
    "getAnnotation": {
        "name_process": "getAnnotation",
        "string_process": "\nprocess getAnnotation {\n  label 'unix'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/gtf\", mode: 'copy'\n\n  input:\n  val(url) from chGffLink.concat(chGtfLink).dump(tag:'annot')\n\n  output:\n  file(\"*.{gtf,gff}\") into chAnnotURL\n\n  script:\n  if (url.endsWith(\".gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url}\n  gunzip *.gz\n  \"\"\"\n  }else{\n  \"\"\"\n  wget --no-check-certificate ${url}\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 24,
        "string_script": "  if (url.endsWith(\".gz\")){\n  \"\"\"\n  wget --no-check-certificate ${url}\n  gunzip *.gz\n  \"\"\"\n  }else{\n  \"\"\"\n  wget --no-check-certificate ${url}\n  \"\"\"\n  }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chGffLink",
            "chGtfLink"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chAnnotURL"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/gtf\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "convertGFFtoGTF": {
        "name_process": "convertGFFtoGTF",
        "string_process": " process convertGFFtoGTF {\n    label 'gffread'\n    label 'lowCpu'\n    label 'lowMem'\n\n    publishDir \"${params.outDir}/gtf\", mode: 'copy'\n\n    input:\n    file gff from chGff\n\n    output:\n    file \"${gff.baseName}.gtf\" into chGtfHisat2Splicesites, chGtfHisat2Index, chGtf, chGtfBed12, chGtfGene, chGtfCellranger\n\n    script:\n    \"\"\"\n    gffread $gff --keep-exon-attrs -F -T -o ${gff.baseName}.gtf\n    \"\"\"\n  }",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    gffread $gff --keep-exon-attrs -F -T -o ${gff.baseName}.gtf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "chGff"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chGtfHisat2Splicesites",
            "chGtfHisat2Index",
            "chGtf",
            "chGtfBed12",
            "chGtfGene",
            "chGtfCellranger"
        ],
        "nb_outputs": 6,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'gffread'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/gtf\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "indexFasta": {
        "name_process": "indexFasta",
        "string_process": "\nprocess indexFasta {\n  label 'samtools'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/genome\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  input:\n  file(fasta) from chFasta\n\n  output:\n  set file(fasta), file(\"*.fai\") into chFastaDict, chFastaSize, chFastaEffgsize\n\n  script:\n  \"\"\"\n  samtools faidx ${fasta}\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  samtools faidx ${fasta}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "chFasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chFastaDict",
            "chFastaSize",
            "chFastaEffgsize"
        ],
        "nb_outputs": 3,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'samtools'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/genome\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "",
        "stub": ""
    },
    "makeDict": {
        "name_process": "makeDict",
        "string_process": "\nprocess makeDict {\n  label 'picard'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/genome\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  input:\n  set file(fasta), file(faidx) from chFastaDict\n\n  output:\n  file(\"*.dict\") into chDict\n\n  script:\n  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  picard CreateSequenceDictionary REFERENCE=${fasta} OUTPUT=${pfix}.dict\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  picard CreateSequenceDictionary REFERENCE=${fasta} OUTPUT=${pfix}.dict\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "chFastaDict"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chDict"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'picard'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/genome\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "",
        "stub": ""
    },
    "makeChromSizes": {
        "name_process": "makeChromSizes",
        "string_process": "\nprocess makeChromSizes {\n  label 'unix'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/genome\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  input:\n  set file(fasta), file(faidx) from chFastaSize\n\n  output:\n  file(\"*sizes\") into (chChromSize, chChromSizeStar)\n\n  script:\n  \"\"\"\n  cut -f1,2 ${faidx} > chrom_${build}.sizes\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  cut -f1,2 ${faidx} > chrom_${build}.sizes\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chFastaSize"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/genome\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "",
        "stub": ""
    },
    "effectiveGenomeSize": {
        "name_process": "effectiveGenomeSize",
        "string_process": "\nprocess effectiveGenomeSize {\n  label 'ucsctools'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/genome\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  input:\n  set file(fasta), file(faidx) from chFastaEffgsize\n\n  output:\n  file(\"*effgsize\") into chEffSize\n\n  script:\n  \"\"\"\n  faSize ${fasta} > ${build}_fasize.log\n  awk -v genome=${build} 'NR==1{print genome\"\\t\"\\$5}' ${build}_fasize.log > ${build}.effgsize\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  faSize ${fasta} > ${build}_fasize.log\n  awk -v genome=${build} 'NR==1{print genome\"\\t\"\\$5}' ${build}_fasize.log > ${build}.effgsize\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chFastaEffgsize"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chEffSize"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'ucsctools'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/genome\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "",
        "stub": ""
    },
    "makeBwaIndex": {
        "name_process": "makeBwaIndex",
        "string_process": "\nprocess makeBwaIndex {\n  label 'bwamem'\n  label 'medCpu'\n  label 'medMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'bwa' in aligners\n\n  input:\n  file(fasta) from chFastaBwa\n\n  output:\n  file \"bwa\" into chBwaIdx\n\n  script:\n  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  mkdir bwa\n  bwa index -p bwa/${pfix} ${fasta} > bwa.log 2>&1\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  mkdir bwa\n  bwa index -p bwa/${pfix} ${fasta} > bwa.log 2>&1\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "chFastaBwa"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chBwaIdx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'bwamem'",
            "label 'medCpu'",
            "label 'medMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'bwa' in aligners",
        "stub": ""
    },
    "makeStarIndex": {
        "name_process": "makeStarIndex",
        "string_process": "\nprocess makeStarIndex {\n  label 'star'\n  label 'medCpu'\n  label 'highMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'star' in aligners\n\n  input:\n  file(fasta) from chFastaStar\n  file(chrSize) from chChromSizeStar\n\n  output:\n  file \"STAR*\" into chStarIdx\n\n  script:\n  \"\"\"\n  odir=\\$(STAR --version | cut -d_ -f2)\n  mkdir -p STAR_\\${odir}\n  chrBinNbits=\\$(awk -F\"\\t\" '{s+=\\$2;l+=1}END{p=log(s/l)/log(2); printf(\"%.0f\", (p<18 ? p:18))}' ${chrSize})\n  STAR --runMode genomeGenerate --limitGenomeGenerateRAM 33524399488 --genomeChrBinNbits \\${chrBinNbits} --runThreadN ${task.cpus} --genomeDir STAR_\\${odir} --genomeFastaFiles $fasta\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  odir=\\$(STAR --version | cut -d_ -f2)\n  mkdir -p STAR_\\${odir}\n  chrBinNbits=\\$(awk -F\"\\t\" '{s+=\\$2;l+=1}END{p=log(s/l)/log(2); printf(\"%.0f\", (p<18 ? p:18))}' ${chrSize})\n  STAR --runMode genomeGenerate --limitGenomeGenerateRAM 33524399488 --genomeChrBinNbits \\${chrBinNbits} --runThreadN ${task.cpus} --genomeDir STAR_\\${odir} --genomeFastaFiles $fasta\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "chFastaStar",
            "chChromSizeStar"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chStarIdx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'star'",
            "label 'medCpu'",
            "label 'highMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'star' in aligners",
        "stub": ""
    },
    "makeBowtie2Index": {
        "name_process": "makeBowtie2Index",
        "string_process": "\nprocess makeBowtie2Index {\n  label 'bowtie2'\n  label 'medCpu'\n  label 'highMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'bowtie2' in aligners\n\n  input:\n  file(fasta) from chFastaBowtie2\n\n  output:\n  file(\"bowtie2\") into chBowtie2Idx\n\n  script:\n  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  mkdir -p bowtie2\n  bowtie2-build ${fasta} bowtie2/${pfix}\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  mkdir -p bowtie2\n  bowtie2-build ${fasta} bowtie2/${pfix}\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chFastaBowtie2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chBowtie2Idx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'bowtie2'",
            "label 'medCpu'",
            "label 'highMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'bowtie2' in aligners",
        "stub": ""
    },
    "makeHisat2Splicesites": {
        "name_process": "makeHisat2Splicesites",
        "string_process": "\nprocess makeHisat2Splicesites {\n  label 'hisat2'\n  label 'lowCpu'\n  label 'medMem'\n\n  publishDir \"${params.outDir}/indexes/hisat2\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'hisat2' in aligners\n\n  input:\n  file gtf from chGtfHisat2Splicesites.collect()\n\n  output:\n  file \"${gtf.baseName}.hisat2_splice_sites.txt\" into indexingSplicesites\n\n  script:\n  \"\"\"\n  mkdir -p hisat2\n  hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.hisat2_splice_sites.txt\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  mkdir -p hisat2\n  hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.hisat2_splice_sites.txt\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chGtfHisat2Splicesites"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indexingSplicesites"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'hisat2'",
            "label 'lowCpu'",
            "label 'medMem'",
            "publishDir \"${params.outDir}/indexes/hisat2\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'hisat2' in aligners",
        "stub": ""
    },
    "makeHisat2Index": {
        "name_process": "makeHisat2Index",
        "string_process": "\nprocess makeHisat2Index {\n  label 'hisat2'\n  label 'highCpu'\n  label 'highMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'hisat2' in aligners\n\n  input:\n  file fasta from chFastaHisat2\n  file indexing_splicesites from indexingSplicesites.collect()\n  file gtf from chGtfHisat2Index.collect()\n\n  output:\n  file(\"hisat2\") into chHisat2Idx\n\n  script:\n  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  mkdir -p hisat2\n  hisat2_extract_exons.py $gtf > ${gtf.baseName}.hisat2_exons.txt\n  hisat2-build -p ${task.cpus} --ss $indexing_splicesites --exon ${gtf.baseName}.hisat2_exons.txt $fasta hisat2/${pfix}\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  pfix = fasta.toString() - ~/(\\.fa)?(\\.fasta)?$/\n  \"\"\"\n  mkdir -p hisat2\n  hisat2_extract_exons.py $gtf > ${gtf.baseName}.hisat2_exons.txt\n  hisat2-build -p ${task.cpus} --ss $indexing_splicesites --exon ${gtf.baseName}.hisat2_exons.txt $fasta hisat2/${pfix}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chFastaHisat2",
            "indexingSplicesites",
            "chGtfHisat2Index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "chHisat2Idx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'hisat2'",
            "label 'highCpu'",
            "label 'highMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'hisat2' in aligners",
        "stub": ""
    },
    "cellRangerFilterGtf": {
        "name_process": "cellRangerFilterGtf",
        "string_process": "\nprocess cellRangerFilterGtf {\n  label 'unix'\n  label 'medCpu'\n  label 'medMem'\n\n  when:\n  'cellranger' in aligners\n\n  input:\n  file gtf from chGtfCellranger\n\n  output:\n  file(\"cellranger_filtered.gtf\") into chFilteredGtfCellranger\n\n  script:\n  \"\"\"\n  cellranger mkgtf $gtf cellranger_filtered.gtf \\\n    --attribute=gene_biotype:protein_coding --attribute=gene_biotype:lincRNA \\\n    --attribute=gene_biotype:antisense --attribute=gene_biotype:IG_LV_gene \\\n    --attribute=gene_biotype:IG_V_gene --attribute=gene_biotype:IG_V_pseudogene \\\n    --attribute=gene_biotype:IG_D_gene --attribute=gene_biotype:IG_J_gene \\\n    --attribute=gene_biotype:IG_J_pseudogene --attribute=gene_biotype:IG_C_gene \\\n    --attribute=gene_biotype:IG_C_pseudogene --attribute=gene_biotype:TR_V_gene \\\n    --attribute=gene_biotype:TR_V_pseudogene --attribute=gene_biotype:TR_D_gene \\\n    --attribute=gene_biotype:TR_J_gene --attribute=gene_biotype:TR_J_pseudogene \\\n    --attribute=gene_biotype:TR_C_gene\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  cellranger mkgtf $gtf cellranger_filtered.gtf \\\n    --attribute=gene_biotype:protein_coding --attribute=gene_biotype:lincRNA \\\n    --attribute=gene_biotype:antisense --attribute=gene_biotype:IG_LV_gene \\\n    --attribute=gene_biotype:IG_V_gene --attribute=gene_biotype:IG_V_pseudogene \\\n    --attribute=gene_biotype:IG_D_gene --attribute=gene_biotype:IG_J_gene \\\n    --attribute=gene_biotype:IG_J_pseudogene --attribute=gene_biotype:IG_C_gene \\\n    --attribute=gene_biotype:IG_C_pseudogene --attribute=gene_biotype:TR_V_gene \\\n    --attribute=gene_biotype:TR_V_pseudogene --attribute=gene_biotype:TR_D_gene \\\n    --attribute=gene_biotype:TR_J_gene --attribute=gene_biotype:TR_J_pseudogene \\\n    --attribute=gene_biotype:TR_C_gene\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chGtfCellranger"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chFilteredGtfCellranger"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'medCpu'",
            "label 'medMem'"
        ],
        "when": "'cellranger' in aligners",
        "stub": ""
    },
    "makeCellRangerIndex": {
        "name_process": "makeCellRangerIndex",
        "string_process": "\nprocess makeCellRangerIndex {\n  label 'unix'\n  label 'highCpu'\n  label 'extraMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'cellranger' in aligners\n\n  input:\n  file fasta from chFastaCellranger\n  file filteredGtf from chFilteredGtfCellranger\n\n  output:\n  file(\"cellranger\") into chCellrangerIdx\n\n  script:\n  (full, mem) = (task.memory =~ /(\\d+)\\s*[a-z]*/)[0]\n  \"\"\"\n  cellranger mkref \\\n    --genome=cellranger \\\n    --fasta=$fasta \\\n    --genes=$filteredGtf \\\n    --nthreads ${task.cpus} --memgb ${mem} --ref-version ${build}\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  (full, mem) = (task.memory =~ /(\\d+)\\s*[a-z]*/)[0]\n  \"\"\"\n  cellranger mkref \\\n    --genome=cellranger \\\n    --fasta=$fasta \\\n    --genes=$filteredGtf \\\n    --nthreads ${task.cpus} --memgb ${mem} --ref-version ${build}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chFastaCellranger",
            "chFilteredGtfCellranger"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chCellrangerIdx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'highCpu'",
            "label 'extraMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'cellranger' in aligners",
        "stub": ""
    },
    "makeKallistoIndex": {
        "name_process": "makeKallistoIndex",
        "string_process": "\nprocess makeKallistoIndex {\n  label 'kallisto'\n  label 'medCpu'\n  label 'highMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'kallisto' in aligners\n\n  input:\n  file transcrpitsFasta from chTranscriptsKallisto\n\n  output:\n  file(\"kallisto_${suffix}\") into chKallistoIdx\n\n  script:\n  suffix=transcrpitsFasta.toString() - ~/([_.])?(transcripts.fa)?(.gz)?$/\n  \"\"\"\n  mkdir -p kallisto_${suffix}\n  kallisto index -i kallisto_${suffix}/transcriptome.idx $transcrpitsFasta\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  suffix=transcrpitsFasta.toString() - ~/([_.])?(transcripts.fa)?(.gz)?$/\n  \"\"\"\n  mkdir -p kallisto_${suffix}\n  kallisto index -i kallisto_${suffix}/transcriptome.idx $transcrpitsFasta\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "kallisto"
        ],
        "tools_url": [
            "https://bio.tools/kallisto"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            }
        ],
        "inputs": [
            "chTranscriptsKallisto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chKallistoIdx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'kallisto'",
            "label 'medCpu'",
            "label 'highMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'kallisto' in aligners",
        "stub": ""
    },
    "makeSalmonIndex": {
        "name_process": "makeSalmonIndex",
        "string_process": "\nprocess makeSalmonIndex {\n  label 'salmon'\n  label 'medCpu'\n  label 'highMem'\n\n  publishDir \"${params.outDir}/indexes/\", mode: 'copy',\n    saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}\n\n  when:\n  'salmon' in aligners\n\n  input:\n  file genomeFasta from chFastaSalmon\n  file transcrpitsFasta from chTranscriptsSalmon\n\n  output:\n  file(\"salmon_${suffix}/\") into chSalmonIdx\n\n  script:\n  suffix=transcrpitsFasta.toString() - ~/([_.])?(transcripts.fa)?(.gz)?$/\n  \"\"\"\n  grep \"^>\" ${genomeFasta} | cut -d \" \" -f 1 > decoys.txt\n  sed -i.bak -e 's/>//g' decoys.txt\n  cat ${transcrpitsFasta} ${genomeFasta} > gentrome.fa\n\n  salmon index \\\n    -t gentrome.fa \\\n    --decoy decoys.txt \\\n    -i salmon_${suffix} \\\n    -p ${task.cpus} \\\n    --gencode\n\n  mv gentrome.fa salmon_${suffix}/\n  gzip salmon_${suffix}/*.fa\n  mv decoys.txt salmon_${suffix}/\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  suffix=transcrpitsFasta.toString() - ~/([_.])?(transcripts.fa)?(.gz)?$/\n  \"\"\"\n  grep \"^>\" ${genomeFasta} | cut -d \" \" -f 1 > decoys.txt\n  sed -i.bak -e 's/>//g' decoys.txt\n  cat ${transcrpitsFasta} ${genomeFasta} > gentrome.fa\n\n  salmon index \\\n    -t gentrome.fa \\\n    --decoy decoys.txt \\\n    -i salmon_${suffix} \\\n    -p ${task.cpus} \\\n    --gencode\n\n  mv gentrome.fa salmon_${suffix}/\n  gzip salmon_${suffix}/*.fa\n  mv decoys.txt salmon_${suffix}/\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "chFastaSalmon",
            "chTranscriptsSalmon"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chSalmonIdx"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'salmon'",
            "label 'medCpu'",
            "label 'highMem'",
            "publishDir \"${params.outDir}/indexes/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".log\") > 0) \"logs/$filename\" else filename}"
        ],
        "when": "'salmon' in aligners",
        "stub": ""
    },
    "reduceGtf": {
        "name_process": "reduceGtf",
        "string_process": "\nprocess reduceGtf {\n  label 'unix'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/gtf\", mode: 'copy',\n\n  when:\n  !params.skipGtfProcessing\n\n  input:\n  file(gtf) from chGtf\n\n  output:\n  file(\"*proteinCoding.gtf\") optional true into (chGtfReducedBed12, chGtfReducedGene)\n\n  script:\n  \"\"\"\n  nbPC=\\$(head -n 1000 | awk '\\$0~\"gene_biotype \\\\\"protein_coding\\\\\"\" || \\$0~\"gene_type \\\\\"protein_coding\\\\\"\" {print}' ${gtf} | wc -l)\n  if [[ \\$nbPC -gt 0 ]]; then\n    awk '\\$0~\"gene_biotype \\\\\"protein_coding\\\\\"\" || \\$0~\"gene_type \\\\\"protein_coding\\\\\"\" {print}' ${gtf} > ${gtf.baseName}_proteinCoding.gtf\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  nbPC=\\$(head -n 1000 | awk '\\$0~\"gene_biotype \\\\\"protein_coding\\\\\"\" || \\$0~\"gene_type \\\\\"protein_coding\\\\\"\" {print}' ${gtf} | wc -l)\n  if [[ \\$nbPC -gt 0 ]]; then\n    awk '\\$0~\"gene_biotype \\\\\"protein_coding\\\\\"\" || \\$0~\"gene_type \\\\\"protein_coding\\\\\"\" {print}' ${gtf} > ${gtf.baseName}_proteinCoding.gtf\n  fi\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chGtf"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'unix'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/gtf\", mode: 'copy',"
        ],
        "when": "!params.skipGtfProcessing",
        "stub": ""
    },
    "gtf2bed12": {
        "name_process": "gtf2bed12",
        "string_process": "\nprocess gtf2bed12 {\n  label 'ucsctools'\n  label 'lowCpu'\n  label 'lowMem'\n\n  publishDir \"${params.outDir}/gtf\", mode: 'copy',\n\n  when:\n  !params.skipGtfProcessing\n\n  input:\n  file(gtf) from chGtfBed12.concat(chGtfReducedBed12)\n\n  output:\n  file(\"*.bed12\") into chBed12\n\n  script:\n  \"\"\"\n  gtfToGenePred -genePredExt -geneNameAsName2 -allErrors -ignoreGroupsWithoutExons ${gtf} ${gtf.baseName}.genepred 2> genepred.log\n  genePredToBed ${gtf.baseName}.genepred ${gtf.baseName}.bed12\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  gtfToGenePred -genePredExt -geneNameAsName2 -allErrors -ignoreGroupsWithoutExons ${gtf} ${gtf.baseName}.genepred 2> genepred.log\n  genePredToBed ${gtf.baseName}.genepred ${gtf.baseName}.bed12\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chGtfBed12",
            "chGtfReducedBed12"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chBed12"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'ucsctools'",
            "label 'lowCpu'",
            "label 'lowMem'",
            "publishDir \"${params.outDir}/gtf\", mode: 'copy',"
        ],
        "when": "!params.skipGtfProcessing",
        "stub": ""
    },
    "gtf2genes": {
        "name_process": "gtf2genes",
        "string_process": "\nprocess gtf2genes {\n  label 'r'\n  label 'lowCpu'\n  label 'medMem'\n\n  publishDir \"${params.outDir}/gtf\", mode: 'copy',\n\n  when:\n  !params.skipGtfProcessing\n\n  input:\n  file(gtf) from chGtfGene.concat(chGtfReducedGene)\n\n  output:\n  file(\"*_gene.bed\") into chGeneBed\n\n  script:\n  \"\"\"\n  extractGeneFromGTF.r ${gtf} ${gtf.baseName}_gene.bed\n  sort -k1,1V -k2,2n ${gtf.baseName}_gene.bed > ${gtf.baseName}_gene_sorted.bed\n  mv ${gtf.baseName}_gene_sorted.bed ${gtf.baseName}_gene.bed\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  extractGeneFromGTF.r ${gtf} ${gtf.baseName}_gene.bed\n  sort -k1,1V -k2,2n ${gtf.baseName}_gene.bed > ${gtf.baseName}_gene_sorted.bed\n  mv ${gtf.baseName}_gene_sorted.bed ${gtf.baseName}_gene.bed\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chGtfGene",
            "chGtfReducedGene"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chGeneBed"
        ],
        "nb_outputs": 1,
        "name_workflow": "bioinfo-pf-curie__annotationMaker",
        "directive": [
            "label 'r'",
            "label 'lowCpu'",
            "label 'medMem'",
            "publishDir \"${params.outDir}/gtf\", mode: 'copy',"
        ],
        "when": "!params.skipGtfProcessing",
        "stub": ""
    }
}
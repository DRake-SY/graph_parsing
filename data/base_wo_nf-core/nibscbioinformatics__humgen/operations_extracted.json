{
    "OPERATION_1": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-humgen-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nibscbioinformatics/humgen Workflow Summary'\n    section_href: 'https://github.com/nibscbioinformatics/humgen'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_bwaIndex = Channel.value(file(params.bwaIndex))",
        "origin": [],
        "gives": [
            [
                "ch_bwaIndex",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_dict = Channel.value(file(params.dict))",
        "origin": [],
        "gives": [
            [
                "ch_dict",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_fastaFai = Channel.value(file(params.fastaFai))",
        "origin": [],
        "gives": [
            [
                "ch_fastaFai",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.value(file(params.dbsnpIndex))",
        "origin": [],
        "gives": []
    },
    "OPERATION_8": {
        "string": "Channel.value(file(params.germlineResourceIndex))",
        "origin": [],
        "gives": []
    },
    "OPERATION_9": {
        "string": "Channel.value(file(params.knownIndelsIndex))",
        "origin": [],
        "gives": []
    },
    "OPERATION_10": {
        "string": "ch_ponIndex = Channel.value(file(params.pon_index))",
        "origin": [],
        "gives": [
            [
                "ch_ponIndex",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "ch_knownIndelsIndex = knownIndelsIndexBuilt.collect() ",
        "origin": [
            [
                "knownIndelsIndexBuilt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_knownIndelsIndex",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "forrecal = recaltable.join(markedbamforapply)",
        "origin": [
            [
                "recaltable",
                "P"
            ],
            [
                "markedbamforapply",
                "P"
            ]
        ],
        "gives": [
            [
                "forrecal",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "forcaller = recalibratedforcaller.join(indexedbam)",
        "origin": [
            [
                "recalibratedforcaller",
                "P"
            ],
            [
                "indexedbam",
                "P"
            ]
        ],
        "gives": [
            [
                "forcaller",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "forcaller.into {\n  forcaller1\n  forcaller2\n}",
        "origin": [
            [
                "forcaller",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_16": {
        "string": "rawvars = calledhaps.join(filteredmuts)",
        "origin": [
            [
                "calledhaps",
                "P"
            ],
            [
                "filteredmuts",
                "P"
            ]
        ],
        "gives": [
            [
                "rawvars",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "ch_bwaIndex  = bwaIndexes",
        "origin": [
            [
                "bwaIndexes",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bwaIndex",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "ch_dict  = dictBuilt",
        "origin": [
            [
                "dictBuilt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dict",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ch_fastaFai  = fastaFaiBuilt",
        "origin": [
            [
                "fastaFaiBuilt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_fastaFai",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "ch_dbsnpIndex  = dbsnpIndexBuilt",
        "origin": [
            [
                "dbsnpIndexBuilt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dbsnpIndex",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "ch_germlineResourceIndex  = germlineResourceIndexBuilt",
        "origin": [
            [
                "germlineResourceIndexBuilt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_germlineResourceIndex",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "ch_ponIndex  = ponIndexBuilt",
        "origin": [
            [
                "ponIndexBuilt",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_ponIndex",
                "P"
            ]
        ]
    }
}
{
    "HQ_VCF": {
        "name_process": "HQ_VCF",
        "string_process": "\nprocess HQ_VCF{\n  cpus '1'\n  memory '1G'\n  tag \"hq_vcf\"\n\n  publishDir params.output_folder+'/VCF_highconf/', mode: 'copy'\n  input:\n  set val(tumor_id), file(vcf) from svcfs\n  output:\n  set val(tumor_id), file(\"${vcf.baseName}_highconf.vcf.gz\") into hc_vcfs\n  when:\n  params.somatic_vcfs != 'null'\n\n  script:\n  if(params.debug == false){\n  \"\"\"\n  #we assume that tumor WGS is the second sample in the VCF file\n  # SNVs variants with a minimum read support of 5 are kept as high quality\n  bcftools view -Oz -e 'FORMAT/AD[1:0]<5 | TYPE!=\"snps\"' ${vcf} -o ${vcf.baseName}_filter.vcf.gz\n  #we reheader the vcf file to match purple, cobalt, and amber sample names\n  zcat ${vcf.baseName}_filter.vcf.gz | egrep \"^#CHR\" |\\\n  awk -v tid=${tumor_id} '{print \\$(NF-1)\" \"tid\"_N\"; print \\$NF\" \"tid\"_T\"}' > rename_sample.txt\n  bcftools reheader -s rename_sample.txt -o ${vcf.baseName}_highconf.vcf.gz ${vcf.baseName}_filter.vcf.gz\n  \"\"\"\n  }else{\n  \"\"\"\n    touch ${vcf.baseName}_highconf.vcf.gz\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 29,
        "string_script": "  if(params.debug == false){\n  \"\"\"\n  #we assume that tumor WGS is the second sample in the VCF file\n  # SNVs variants with a minimum read support of 5 are kept as high quality\n  bcftools view -Oz -e 'FORMAT/AD[1:0]<5 | TYPE!=\"snps\"' ${vcf} -o ${vcf.baseName}_filter.vcf.gz\n  #we reheader the vcf file to match purple, cobalt, and amber sample names\n  zcat ${vcf.baseName}_filter.vcf.gz | egrep \"^#CHR\" |\\\n  awk -v tid=${tumor_id} '{print \\$(NF-1)\" \"tid\"_N\"; print \\$NF\" \"tid\"_T\"}' > rename_sample.txt\n  bcftools reheader -s rename_sample.txt -o ${vcf.baseName}_highconf.vcf.gz ${vcf.baseName}_filter.vcf.gz\n  \"\"\"\n  }else{\n  \"\"\"\n    touch ${vcf.baseName}_highconf.vcf.gz\n  \"\"\"\n  }",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "svcfs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hc_vcfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "IARCbioinfo__purple-nf",
        "directive": [
            "cpus '1'",
            "memory '1G'",
            "tag \"hq_vcf\"",
            "publishDir params.output_folder+'/VCF_highconf/', mode: 'copy'"
        ],
        "when": "params.somatic_vcfs != 'null'",
        "stub": ""
    },
    "COBALT": {
        "name_process": "COBALT",
        "string_process": "\nprocess COBALT {\n\n cpus params.cpu\n memory params.mem+'G'\n\n\n  publishDir params.output_folder+'/COBALT/', mode: 'copy'\n  input:\n  set val(tumor_id), file(tumor), file(tumor_index), file(normal), file(normal_index) from tn_pairs_cobalt\n  file(ref) from ref_fasta\n  file(fai) from ref_fai\n\n  output:\n  set val(tumor_id), path(\"${tumor_id}_COBALT\") into cobalt\n  script:\n  if(params.debug == false){\n     if(params.tumor_only){\n       \"\"\"\n     COBALT  -Xms1g -Xmx${params.mem}g -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n              -ref_genome ${ref} -tumor_only -tumor_only_diploid_bed /hmftools/hg38/DiploidRegions.38.bed \\\\\n     \t        -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_COBALT -threads ${params.cpu}\n       \"\"\"\n     }else{\n       \"\"\"\n     COBALT  -Xms1g -Xmx${params.mem}g -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n              -ref_genome ${ref} -reference ${tumor_id}_N -reference_bam ${normal} \\\\\n     \t        -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_COBALT -threads ${params.cpu}\n      \"\"\"\n     }\n  }else{\n                             \n    \"\"\"\n    mkdir ${tumor_id}_COBALT\n    touch ${tumor_id}_COBALT/${tumor_id}.cobalt\n    \"\"\"\n  }\n}",
        "nb_lignes_process": 36,
        "string_script": "  if(params.debug == false){\n     if(params.tumor_only){\n       \"\"\"\n     COBALT  -Xms1g -Xmx${params.mem}g -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n              -ref_genome ${ref} -tumor_only -tumor_only_diploid_bed /hmftools/hg38/DiploidRegions.38.bed \\\\\n     \t        -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_COBALT -threads ${params.cpu}\n       \"\"\"\n     }else{\n       \"\"\"\n     COBALT  -Xms1g -Xmx${params.mem}g -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n              -ref_genome ${ref} -reference ${tumor_id}_N -reference_bam ${normal} \\\\\n     \t        -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_COBALT -threads ${params.cpu}\n      \"\"\"\n     }\n  }else{\n                             \n    \"\"\"\n    mkdir ${tumor_id}_COBALT\n    touch ${tumor_id}_COBALT/${tumor_id}.cobalt\n    \"\"\"\n  }",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tn_pairs_cobalt",
            "ref_fasta",
            "ref_fai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "cobalt"
        ],
        "nb_outputs": 1,
        "name_workflow": "IARCbioinfo__purple-nf",
        "directive": [
            "cpus params.cpu",
            "memory params.mem+'G'",
            "publishDir params.output_folder+'/COBALT/', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "AMBER": {
        "name_process": "AMBER",
        "string_process": "\nprocess AMBER {\n\n cpus params.cpu\n memory params.mem+'G'\n\n  publishDir params.output_folder+'/AMBER/', mode: 'copy'\n  input:\n  set val(tumor_id), file(tumor), file(tumor_index), file(normal), file(normal_index) from tn_pairs_amber\n  file(ref) from ref_fasta\n  file(fai) from ref_fai\n  output:\n  set val(tumor_id), path(\"${tumor_id}_AMBER\") into amber\n  script:\n  if(params.debug == false){\n     if(params.tumor_only){\n       \"\"\"\n      AMBER  -Xms1g -Xmx${params.mem}g  -loci /hmftools/hg38/GermlineHetPon.38.vcf -ref_genome ${ref} -tumor_only \\\\\n              -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_AMBER -threads ${params.cpu}\n      \"\"\"\n     }else{\n       \"\"\"\n       AMBER   -Xms1g -Xmx${params.mem}g -loci /hmftools/hg38/GermlineHetPon.38.vcf -ref_genome ${ref} \\\\\n               -reference ${tumor_id}_N -reference_bam ${normal}  \\\\\n               -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_AMBER -threads ${params.cpu}\n        \"\"\"\n     }\n  }else{\n    \"\"\"\n    mkdir ${tumor_id}_AMBER\n    touch ${tumor_id}_AMBER/${tumor_id}.amber\n    \"\"\"\n  }\n}",
        "nb_lignes_process": 32,
        "string_script": "  if(params.debug == false){\n     if(params.tumor_only){\n       \"\"\"\n      AMBER  -Xms1g -Xmx${params.mem}g  -loci /hmftools/hg38/GermlineHetPon.38.vcf -ref_genome ${ref} -tumor_only \\\\\n              -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_AMBER -threads ${params.cpu}\n      \"\"\"\n     }else{\n       \"\"\"\n       AMBER   -Xms1g -Xmx${params.mem}g -loci /hmftools/hg38/GermlineHetPon.38.vcf -ref_genome ${ref} \\\\\n               -reference ${tumor_id}_N -reference_bam ${normal}  \\\\\n               -tumor  ${tumor_id}_T -tumor_bam ${tumor} -output_dir ${tumor_id}_AMBER -threads ${params.cpu}\n        \"\"\"\n     }\n  }else{\n    \"\"\"\n    mkdir ${tumor_id}_AMBER\n    touch ${tumor_id}_AMBER/${tumor_id}.amber\n    \"\"\"\n  }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "AMBER"
        ],
        "tools_url": [
            "https://bio.tools/amber"
        ],
        "tools_dico": [
            {
                "name": "AMBER",
                "uri": "https://bio.tools/amber",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Assisted Model Building with Energy Refinement tool refers to two things: a set of molecular mechanical force fields for the simulation of biomolecules (which are in the public domain, and are used in a variety of simulation programs); and a package of molecular simulation programs which includes source code and demos.",
                "homepage": "http://ambermd.org/"
            }
        ],
        "inputs": [
            "tn_pairs_amber",
            "ref_fasta",
            "ref_fai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "amber"
        ],
        "nb_outputs": 1,
        "name_workflow": "IARCbioinfo__purple-nf",
        "directive": [
            "cpus params.cpu",
            "memory params.mem+'G'",
            "publishDir params.output_folder+'/AMBER/', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PURPLE": {
        "name_process": "PURPLE",
        "string_process": "\nprocess PURPLE {\n\n cpus params.cpu\n memory params.mem+'G'\n\n  publishDir params.output_folder+'/PURPLE/', mode: 'copy'\n\n  input:\n  set val(tumor_id), path(amber_dir), path(cobalt_dir), file(hcvcf) from amber_cobalt_vcf\n  file(ref) from ref_fasta\n  file(fai) from ref_fai\n  file(dict) from ref_dict\n  output:\n  set val(tumor_id), path(\"${tumor_id}_PURPLE\") into purple\n  file(\"${tumor_id}_T.purple.purity.sample.tsv\") into stats_purple\n\n  script:\n  def include_vcf_purple = hcvcf.name != 'NO_VCF' ? \"-somatic_vcf ${hcvcf}\" : ''\n  if(params.debug == false){\n     if(params.tumor_only){\n       \"\"\"\n       PURPLE  -Xms1g -Xmx${params.mem}g -tumor_only  -tumor ${tumor_id}_T \\\\\n               -no_charts \\\\\n               -output_dir ${tumor_id}_PURPLE \\\\\n               -amber ${amber_dir} \\\\\n               -cobalt ${cobalt_dir} \\\\\n               -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n               -threads ${params.cpu} \\\\\n               -ref_genome ${ref} ${include_vcf_purple}\n\n        awk -v tumor=${tumor_id} '{print tumor\"\\t\"\\$0}' ${tumor_id}_PURPLE/${tumor_id}_T.purple.purity.tsv > ${tumor_id}_T.purple.purity.sample.tsv\n\n       \"\"\"\n     }else{\n       \"\"\"\n        PURPLE  -Xms1g -Xmx${params.mem}g -reference ${tumor_id}_N  -tumor ${tumor_id}_T \\\\\n               -no_charts \\\\\n               -output_dir ${tumor_id}_PURPLE \\\\\n               -amber ${amber_dir} \\\\\n               -cobalt ${cobalt_dir} \\\\\n               -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n               -threads ${params.cpu} \\\\\n               -ref_genome ${ref} ${include_vcf_purple}\n\n         awk -v tumor=${tumor_id} '{print tumor\"\\t\"\\$0}' ${tumor_id}_PURPLE/${tumor_id}_T.purple.purity.tsv > ${tumor_id}_T.purple.purity.sample.tsv\n       \"\"\"\n     }\n   }else{\n     \"\"\"\n     echo PURPLE  -Xms1g -Xmx${params.mem}g -reference ${tumor_id}_N  -tumor ${tumor_id}_T \\\\\n            -no_charts \\\\\n            -output_dir ${tumor_id}_PURPLE \\\\\n            -amber ${amber_dir} \\\\\n            -cobalt ${cobalt_dir} \\\\\n            -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n            -threads ${params.cpu} \\\\\n            -ref_genome ${ref} ${include_vcf_purple}\n      mkdir ${tumor_id}_PURPLE\n      touch ${tumor_id}_T.purple.purity.sample.tsv\n     \"\"\"\n   }\n}",
        "nb_lignes_process": 61,
        "string_script": "  def include_vcf_purple = hcvcf.name != 'NO_VCF' ? \"-somatic_vcf ${hcvcf}\" : ''\n  if(params.debug == false){\n     if(params.tumor_only){\n       \"\"\"\n       PURPLE  -Xms1g -Xmx${params.mem}g -tumor_only  -tumor ${tumor_id}_T \\\\\n               -no_charts \\\\\n               -output_dir ${tumor_id}_PURPLE \\\\\n               -amber ${amber_dir} \\\\\n               -cobalt ${cobalt_dir} \\\\\n               -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n               -threads ${params.cpu} \\\\\n               -ref_genome ${ref} ${include_vcf_purple}\n\n        awk -v tumor=${tumor_id} '{print tumor\"\\t\"\\$0}' ${tumor_id}_PURPLE/${tumor_id}_T.purple.purity.tsv > ${tumor_id}_T.purple.purity.sample.tsv\n\n       \"\"\"\n     }else{\n       \"\"\"\n        PURPLE  -Xms1g -Xmx${params.mem}g -reference ${tumor_id}_N  -tumor ${tumor_id}_T \\\\\n               -no_charts \\\\\n               -output_dir ${tumor_id}_PURPLE \\\\\n               -amber ${amber_dir} \\\\\n               -cobalt ${cobalt_dir} \\\\\n               -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n               -threads ${params.cpu} \\\\\n               -ref_genome ${ref} ${include_vcf_purple}\n\n         awk -v tumor=${tumor_id} '{print tumor\"\\t\"\\$0}' ${tumor_id}_PURPLE/${tumor_id}_T.purple.purity.tsv > ${tumor_id}_T.purple.purity.sample.tsv\n       \"\"\"\n     }\n   }else{\n     \"\"\"\n     echo PURPLE  -Xms1g -Xmx${params.mem}g -reference ${tumor_id}_N  -tumor ${tumor_id}_T \\\\\n            -no_charts \\\\\n            -output_dir ${tumor_id}_PURPLE \\\\\n            -amber ${amber_dir} \\\\\n            -cobalt ${cobalt_dir} \\\\\n            -gc_profile /hmftools/hg38/GC_profile.1000bp.38.cnp \\\\\n            -threads ${params.cpu} \\\\\n            -ref_genome ${ref} ${include_vcf_purple}\n      mkdir ${tumor_id}_PURPLE\n      touch ${tumor_id}_T.purple.purity.sample.tsv\n     \"\"\"\n   }",
        "nb_lignes_script": 43,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "amber_cobalt_vcf",
            "ref_fasta",
            "ref_fai",
            "ref_dict"
        ],
        "nb_inputs": 4,
        "outputs": [
            "purple",
            "stats_purple"
        ],
        "nb_outputs": 2,
        "name_workflow": "IARCbioinfo__purple-nf",
        "directive": [
            "cpus params.cpu",
            "memory params.mem+'G'",
            "publishDir params.output_folder+'/PURPLE/', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
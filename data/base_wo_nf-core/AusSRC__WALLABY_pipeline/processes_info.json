{
    "s2p_setup": {
        "name_process": "s2p_setup",
        "string_process": "\nprocess s2p_setup {\n    container = params.S2P_SETUP_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n\n    input:\n        val image_cube_file\n        val sofia_parameter_file_template\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        python3 -u /app/s2p_setup.py \\\n            ${params.S2P_TEMPLATE} \\\n            $image_cube_file \\\n            $sofia_parameter_file_template \\\n            ${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR}\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        python3 -u /app/s2p_setup.py \\\n            ${params.S2P_TEMPLATE} \\\n            $image_cube_file \\\n            $sofia_parameter_file_template \\\n            ${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR}\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "image_cube_file",
            "sofia_parameter_file_template"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "container = params.S2P_SETUP_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "update_sofiax_config": {
        "name_process": "update_sofiax_config",
        "string_process": "\nprocess update_sofiax_config {\n    container = params.UPDATE_SOFIAX_CONFIG_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n\n    input:\n        val s2p_setup\n\n    output:\n        val \"${params.WORKDIR}/${params.RUN_NAME}/${params.SOFIAX_CONFIG_FILENAME}\", emit: sofiax_config\n    \n    script:\n        \"\"\"\n        python3 -u /app/update_linmos_config.py \\\n            --config ${params.SOFIAX_CONFIG_FILE} \\\n            --output ${params.WORKDIR}/${params.RUN_NAME}/${params.SOFIAX_CONFIG_FILENAME} \\\n            --run_name ${params.RUN_NAME}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        python3 -u /app/update_linmos_config.py \\\n            --config ${params.SOFIAX_CONFIG_FILE} \\\n            --output ${params.WORKDIR}/${params.RUN_NAME}/${params.SOFIAX_CONFIG_FILENAME} \\\n            --run_name ${params.RUN_NAME}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "s2p_setup"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "container = params.UPDATE_SOFIAX_CONFIG_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_parameter_files": {
        "name_process": "get_parameter_files",
        "string_process": "\nprocess get_parameter_files {\n    executor = 'local'\n\n    input:\n        val sofiax_config\n\n    output:\n        val parameter_files, emit: parameter_files\n\n    exec:\n        parameter_files = file(\"${params.WORKDIR}/${params.RUN_NAME}/sofia_*.par\")\n}",
        "nb_lignes_process": 11,
        "string_script": "        parameter_files = file(\"${params.WORKDIR}/${params.RUN_NAME}/sofia_*.par\")",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sofiax_config"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "executor = 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "sofia": {
        "name_process": "sofia",
        "string_process": "\nprocess sofia {\n    container = params.SOFIA_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n    \n    input:\n        file parameter_file\n\n    output:\n        path parameter_file, emit: parameter_file\n\n    script:\n        \"\"\"\n        #!/bin/bash\n        \n        OMP_NUM_THREADS=8 sofia $parameter_file\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        #!/bin/bash\n        \n        OMP_NUM_THREADS=8 sofia $parameter_file\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "parameter_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "container = params.SOFIA_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "sofiax": {
        "name_process": "sofiax",
        "string_process": "\nprocess sofiax {\n    container = params.SOFIAX_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n    \n    input:\n        file parameter_file\n\n    output:\n        stdout emit: output\n\n    script:\n        \"\"\"\n        #!/bin/bash\n        sofiax -c ${params.WORKDIR}/${params.RUN_NAME}/${params.SOFIAX_CONFIG_FILE} -p $parameter_file\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        #!/bin/bash\n        sofiax -c ${params.WORKDIR}/${params.RUN_NAME}/${params.SOFIAX_CONFIG_FILE} -p $parameter_file\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "parameter_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "container = params.SOFIAX_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "rename_mosaic": {
        "name_process": "rename_mosaic",
        "string_process": "\nprocess rename_mosaic {\n    input:\n        val sofiax\n    \n    script:\n        \"\"\"\n        #!/bin/bash\n\n        # Rename mosaic image file if it exists\n        [ -f ${params.WORKDIR}/${params.RUN_NAME}/mosaic.fits ] && \\\n            { mv ${params.WORKDIR}/${params.RUN_NAME}/mosaic.fits ${params.WORKDIR}/${params.RUN_NAME}/\\$(echo \"image.restored.i.SB${params.SBIDS.replaceAll(',', ' ')}.mosaic.cube.fits\" | tr \" \" .) }\n\n        # Remame weights image file if it exists\n        [ -f ${params.WORKDIR}/${params.RUN_NAME}/mosaic.fits ] && \\\n            { mv ${params.WORKDIR}/${params.RUN_NAME}/mosaic.weights.fits ${params.WORKDIR}/${params.RUN_NAME}/\\$(echo \"weights.i.SB${params.SBIDS.replaceAll(',', ' ')}.mosaic.cube.fits\" | tr \" \" .) }\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        #!/bin/bash\n\n        # Rename mosaic image file if it exists\n        [ -f ${params.WORKDIR}/${params.RUN_NAME}/mosaic.fits ] && \\\n            { mv ${params.WORKDIR}/${params.RUN_NAME}/mosaic.fits ${params.WORKDIR}/${params.RUN_NAME}/\\$(echo \"image.restored.i.SB${params.SBIDS.replaceAll(',', ' ')}.mosaic.cube.fits\" | tr \" \" .) }\n\n        # Remame weights image file if it exists\n        [ -f ${params.WORKDIR}/${params.RUN_NAME}/mosaic.fits ] && \\\n            { mv ${params.WORKDIR}/${params.RUN_NAME}/mosaic.weights.fits ${params.WORKDIR}/${params.RUN_NAME}/\\$(echo \"weights.i.SB${params.SBIDS.replaceAll(',', ' ')}.mosaic.cube.fits\" | tr \" \" .) }\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sofiax"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "dependency_check": {
        "name_process": "dependency_check",
        "string_process": "\nprocess dependency_check {\n    input:\n        val footprints\n        val weights\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/bin/bash\n\n        # Ensure working directory exists\n        [ ! -d ${params.WORKDIR}/${params.RUN_NAME} ] && mkdir ${params.WORKDIR}/${params.RUN_NAME}\n\n        # Ensure all image cube files exist\n        [ ! -f ${footprints} ] && { echo \"Footprint file could not be found\"; exit 1; }\n\n        # Ensure all weights cube files exist\n        [ ! -f ${weights} ] && { echo \"Weight file could not be found\"; exit 1; }\n\n        # Ensure default linmos config file exists\n        [ ! -f ${params.LINMOS_CONFIG_FILE} ] && \\\n            { echo \"Linmos configuration file (params.LINMOS_CONFIG_FILE) not found\"; exit 1; }\n\n        # Ensure source finding parameter file exists\n        [ ! -f ${params.SOFIA_PARAMETER_FILE} ] && \\\n            { echo \"Source finding parameter file (params.SOFIA_PARAMETER_FILE) not found\"; exit 1; }\n\n        # Ensure s2p setup file exists\n        [ ! -f ${params.S2P_TEMPLATE} ] && \\\n            { echo \"Source finding s2p_setup template file (params.S2P_TEMPLATE) not found\"; exit 1; }\n\n        exit 0\n        \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "        \"\"\"\n        #!/bin/bash\n\n        # Ensure working directory exists\n        [ ! -d ${params.WORKDIR}/${params.RUN_NAME} ] && mkdir ${params.WORKDIR}/${params.RUN_NAME}\n\n        # Ensure all image cube files exist\n        [ ! -f ${footprints} ] && { echo \"Footprint file could not be found\"; exit 1; }\n\n        # Ensure all weights cube files exist\n        [ ! -f ${weights} ] && { echo \"Weight file could not be found\"; exit 1; }\n\n        # Ensure default linmos config file exists\n        [ ! -f ${params.LINMOS_CONFIG_FILE} ] && \\\n            { echo \"Linmos configuration file (params.LINMOS_CONFIG_FILE) not found\"; exit 1; }\n\n        # Ensure source finding parameter file exists\n        [ ! -f ${params.SOFIA_PARAMETER_FILE} ] && \\\n            { echo \"Source finding parameter file (params.SOFIA_PARAMETER_FILE) not found\"; exit 1; }\n\n        # Ensure s2p setup file exists\n        [ ! -f ${params.S2P_TEMPLATE} ] && \\\n            { echo \"Source finding s2p_setup template file (params.S2P_TEMPLATE) not found\"; exit 1; }\n\n        exit 0\n        \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "footprints",
            "weights"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "update_linmos_config": {
        "name_process": "update_linmos_config",
        "string_process": "\nprocess update_linmos_config {\n    container = params.UPDATE_LINMOS_CONFIG_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n\n    input:\n        val footprints\n        val weights\n        val check\n\n    output:\n        val \"${params.WORKDIR}/${params.RUN_NAME}/${params.LINMOS_CONFIG_FILENAME}\", emit: config\n\n    script:\n        \"\"\"\n        python3 -u /app/update_linmos_config.py \\\n            --config ${params.LINMOS_CONFIG_FILE} \\\n            --output ${params.WORKDIR}/${params.RUN_NAME}/${params.LINMOS_CONFIG_FILENAME} \\\n            --linmos.names \"$footprints\" \\\n            --linmos.weights \"$weights\" \\\n            --linmos.outname \"${params.WORKDIR}/${params.RUN_NAME}/mosaic\" \\\n            --linmos.outweight \"${params.WORKDIR}/${params.RUN_NAME}/weights.mosaic\"\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        python3 -u /app/update_linmos_config.py \\\n            --config ${params.LINMOS_CONFIG_FILE} \\\n            --output ${params.WORKDIR}/${params.RUN_NAME}/${params.LINMOS_CONFIG_FILENAME} \\\n            --linmos.names \"$footprints\" \\\n            --linmos.weights \"$weights\" \\\n            --linmos.outname \"${params.WORKDIR}/${params.RUN_NAME}/mosaic\" \\\n            --linmos.outweight \"${params.WORKDIR}/${params.RUN_NAME}/weights.mosaic\"\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "footprints",
            "weights",
            "check"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "container = params.UPDATE_LINMOS_CONFIG_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "linmos": {
        "name_process": "linmos",
        "string_process": "\nprocess linmos {\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n    clusterOptions = params.LINMOS_CLUSTER_OPTIONS\n\n    input:\n        val linmos_config\n    \n    output:\n        val \"${params.WORKDIR}/${params.RUN_NAME}/${params.MOSAIC_OUTPUT_FILENAME}.fits\", emit: cube\n\n    script:\n        \"\"\"\n        #!/bin/bash\n\n        export SINGULARITY_PULLDIR=${params.SINGULARITY_CACHEDIR}\n        export PMIX_MCA_gds=hash\n        singularity pull ${params.SINGULARITY_CACHEDIR}/yandasoft.img ${params.LINMOS_IMAGE}\n        srun --nodes=12 --ntasks-per-node=24 --cpus-per-task=1 \\\n            singularity exec \\\n            --bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT} \\\n            ${params.SINGULARITY_CACHEDIR}/yandasoft.img \\\n            linmos-mpi -c $linmos_config\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        #!/bin/bash\n\n        export SINGULARITY_PULLDIR=${params.SINGULARITY_CACHEDIR}\n        export PMIX_MCA_gds=hash\n        singularity pull ${params.SINGULARITY_CACHEDIR}/yandasoft.img ${params.LINMOS_IMAGE}\n        srun --nodes=12 --ntasks-per-node=24 --cpus-per-task=1 \\\n            singularity exec \\\n            --bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT} \\\n            ${params.SINGULARITY_CACHEDIR}/yandasoft.img \\\n            linmos-mpi -c $linmos_config\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Singularity Hub",
            "crossrun"
        ],
        "tools_url": [
            "https://bio.tools/singularity_hub",
            "https://bio.tools/crossrun"
        ],
        "tools_dico": [
            {
                "name": "Singularity Hub",
                "uri": "https://bio.tools/singularity_hub",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3524",
                            "term": "Simulation experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Framework to build and deploy Singularity containers for mobility of compute, and the singularity-python software with novel metrics for assessing reproducibility of such containers.",
                "homepage": "https://singularity-hub.org/"
            },
            {
                "name": "crossrun",
                "uri": "https://bio.tools/crossrun",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Joint distribution for number of crossings and longest run in independent Bernoulli observations. The R package crossrun.\n\nThe R package crossrun computes the joint distribution of the number of crossings and the longest run in a sequence of independent Bernoulli observations. The main intended application is statistical process control where the joint distribution may be used for systematic investigation, and possibly refinement, of existing rules for distinguishing between signal and noise. While the crossrun vignette is written to assist in practical use, this article gives a hands-on explanation of why the procedures works. The article also includes a discussion of limitations of the present version of crossrun together with an outline of ongoing work to meet these limitations.",
                "homepage": "https://cran.r-project.org/web/packages/crossrun/index.html"
            }
        ],
        "inputs": [
            "linmos_config"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_pipeline",
        "directive": [
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"",
            "clusterOptions = params.LINMOS_CLUSTER_OPTIONS"
        ],
        "when": "",
        "stub": ""
    }
}
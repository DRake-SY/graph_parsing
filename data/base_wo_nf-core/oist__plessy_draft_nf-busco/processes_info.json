{
    "BUSCO": {
        "name_process": "BUSCO",
        "string_process": "\nprocess BUSCO {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::busco=5.2.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/busco:5.2.1--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/busco:5.2.1--pyhdfd78af_0\"\n    }\n\n    input:\n    tuple val(meta), path(fasta), path(augustus_config), val(species)\n    val(lineage)\n\n    output:\n    tuple val(meta), path(\"${meta.id}/run_*/full_table.tsv\"),    emit: tsv\n    tuple val(meta), path(\"${meta.id}/run_*/short_summary.txt\"), emit: txt\n    path \"*.version.txt\",                                        emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (lineage) options.args += \" --lineage_dataset $lineage\"\n    \"\"\"\n    if [ -e $augustus_config ]\n    then\n        # Copy the AUGUSTUS config directory as BUSO needs write access\n        cp -rL $augustus_config ${augustus_config}_copy && export AUGUSTUS_CONFIG_PATH=${augustus_config}_copy\n    else\n        # Copy the image's AUGUSTUS config directory if it was not provided to the module\n        cp -a /usr/local/config augustus_config && export AUGUSTUS_CONFIG_PATH='augustus_config'\n    fi\n    busco \\\\\n        $options.args \\\\\n        --augustus \\\\\n        --augustus_species $species \\\\\n        --mode genome \\\\\n        --cpu $task.cpus \\\\\n        --in  $fasta \\\\\n        --out $meta.id\n\n    echo \\$(busco --version 2>&1) | sed 's/^BUSCO //' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (lineage) options.args += \" --lineage_dataset $lineage\"\n    \"\"\"\n    if [ -e $augustus_config ]\n    then\n        # Copy the AUGUSTUS config directory as BUSO needs write access\n        cp -rL $augustus_config ${augustus_config}_copy && export AUGUSTUS_CONFIG_PATH=${augustus_config}_copy\n    else\n        # Copy the image's AUGUSTUS config directory if it was not provided to the module\n        cp -a /usr/local/config augustus_config && export AUGUSTUS_CONFIG_PATH='augustus_config'\n    fi\n    busco \\\\\n        $options.args \\\\\n        --augustus \\\\\n        --augustus_species $species \\\\\n        --mode genome \\\\\n        --cpu $task.cpus \\\\\n        --in  $fasta \\\\\n        --out $meta.id\n\n    echo \\$(busco --version 2>&1) | sed 's/^BUSCO //' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "meta",
            "species",
            "fasta",
            "augustus_config",
            "lineage"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "oist__plessy_draft_nf-busco",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::busco=5.2.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/busco:5.2.1--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/busco:5.2.1--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    }
}
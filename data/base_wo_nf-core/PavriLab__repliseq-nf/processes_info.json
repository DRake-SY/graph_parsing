{
    "MakeGenomeFilter": {
        "name_process": "MakeGenomeFilter",
        "string_process": "\nprocess MakeGenomeFilter {\n    tag \"$fasta\"\n\n    input:\n    file fasta from fastaForGenomeSizes\n\n    output:\n\n    file \"*.sizes\" into chromSizesChannel\n\n    script:\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fastaForGenomeSizes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chromSizesChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "BWAIndex": {
        "name_process": "BWAIndex",
        "string_process": " process BWAIndex {\n          tag \"$bwa_base\"\n\n          input:\n          file fasta from fastaForBwa\n\n          output:\n          file \"BWAIndex\" into bwaIndex\n\n          shell:\n          bwa_base = fasta.toString() - ~/(\\.fa)?(\\.fasta)?(\\.fas)?$/\n          \"\"\"\n          mkdir bowtie2Index\n\n          bwa index -a bwtsw ${fasta}\n          mkdir BWAIndex && mv ${fasta}* BWAIndex\n\n\t        \"\"\"\n\n      }",
        "nb_lignes_process": 18,
        "string_script": "          bwa_base = fasta.toString() - ~/(\\.fa)?(\\.fasta)?(\\.fas)?$/\n          \"\"\"\n          mkdir bowtie2Index\n\n          bwa index -a bwtsw ${fasta}\n          mkdir BWAIndex && mv ${fasta}* BWAIndex\n\n\t        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fastaForBwa"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bwaIndex"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$bwa_base\""
        ],
        "when": "",
        "stub": ""
    },
    "CheckDesign": {
        "name_process": "CheckDesign",
        "string_process": "\nprocess CheckDesign {\n    tag \"$design\"\n    publishDir \"${params.outputDir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file design from designChannel\n\n    output:\n    file \"*.csv\" into designCheckedChannel\n\n    script:\n    \"\"\"\n    check_design.py $design design_reads.csv\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    check_design.py $design design_reads.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "designChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "designCheckedChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$design\"",
            "publishDir \"${params.outputDir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "FastQC": {
        "name_process": "FastQC",
        "string_process": "\nprocess FastQC {\n   tag \"$name\"\n\n   input:\n   set val(name), file(reads) from rawReadsFastqcChannel\n\n   output:\n   file \"*.{zip,html}\" into fastqcMultiqcChannel\n\n   script:\n   if (params.singleEnd) {\n       \"\"\"\n       [ ! -f  ${name}.fastq.gz ] && ln -s $reads ${name}.fastq.gz\n       fastqc -q -t $task.cpus ${name}.fastq.gz\n       \"\"\"\n   } else {\n       \"\"\"\n       [ ! -f  ${name}_1.fastq.gz ] && ln -s ${reads[0]} ${name}_1.fastq.gz\n       [ ! -f  ${name}_2.fastq.gz ] && ln -s ${reads[1]} ${name}_2.fastq.gz\n       fastqc -q -t $task.cpus ${name}_1.fastq.gz\n       fastqc -q -t $task.cpus ${name}_2.fastq.gz\n       \"\"\"\n   }\n}",
        "nb_lignes_process": 23,
        "string_script": "   if (params.singleEnd) {\n       \"\"\"\n       [ ! -f  ${name}.fastq.gz ] && ln -s $reads ${name}.fastq.gz\n       fastqc -q -t $task.cpus ${name}.fastq.gz\n       \"\"\"\n   } else {\n       \"\"\"\n       [ ! -f  ${name}_1.fastq.gz ] && ln -s ${reads[0]} ${name}_1.fastq.gz\n       [ ! -f  ${name}_2.fastq.gz ] && ln -s ${reads[1]} ${name}_2.fastq.gz\n       fastqc -q -t $task.cpus ${name}_1.fastq.gz\n       fastqc -q -t $task.cpus ${name}_2.fastq.gz\n       \"\"\"\n   }",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "rawReadsFastqcChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqcMultiqcChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "TrimGalore": {
        "name_process": "TrimGalore",
        "string_process": "\nprocess TrimGalore {\n    tag \"$name\"\n\n    input:\n    set val(name), file(reads) from rawReadsTrimgaloreChannel\n\n    output:\n    set val(name), file(\"*.fq.gz\") into trimmedReadChannel\n    file \"*.txt\" into trimgaloreMultiqcChannel\n    file \"*.{zip,html}\" into trimgaloreFastqcMultiqcChannel\n\n    script:\n    if (params.singleEnd) {\n        \"\"\"\n        [ ! -f  ${name}.fastq.gz ] && ln -s $reads ${name}.fastq.gz\n        trim_galore --fastqc --gzip ${name}.fastq.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${name}_1.fastq.gz ] && ln -s ${reads[0]} ${name}_1.fastq.gz\n        [ ! -f  ${name}_2.fastq.gz ] && ln -s ${reads[1]} ${name}_2.fastq.gz\n        trim_galore --paired --fastqc --gzip ${name}_1.fastq.gz ${name}_2.fastq.gz\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 24,
        "string_script": "    if (params.singleEnd) {\n        \"\"\"\n        [ ! -f  ${name}.fastq.gz ] && ln -s $reads ${name}.fastq.gz\n        trim_galore --fastqc --gzip ${name}.fastq.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${name}_1.fastq.gz ] && ln -s ${reads[0]} ${name}_1.fastq.gz\n        [ ! -f  ${name}_2.fastq.gz ] && ln -s ${reads[1]} ${name}_2.fastq.gz\n        trim_galore --paired --fastqc --gzip ${name}_1.fastq.gz ${name}_2.fastq.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rawReadsTrimgaloreChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmedReadChannel",
            "trimgaloreMultiqcChannel",
            "trimgaloreFastqcMultiqcChannel"
        ],
        "nb_outputs": 3,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "BWAMem": {
        "name_process": "BWAMem",
        "string_process": "\nprocess BWAMem {\n    tag \"$name\"\n    publishDir \"${params.outputDir}\", mode: 'copy',\n        saveAs: { filename ->\n                      if (filename.endsWith(\".flagstat\")) \"samtools_stats/$filename\"\n                      else if (filename.endsWith(\".idxstats\")) \"samtools_stats/$filename\"\n                      else if (filename.endsWith(\".stats\")) \"samtools_stats/$filename\"\n                      else if (filename.endsWith(\".metrics.txt\")) \"picard_metrics/$filename\"\n                      else if (filename.endsWith(\".bam\")) \"bams/$filename\"\n                      else if (filename.endsWith(\".bai\")) \"bams/$filename\"\n                      else filename\n                }\n\n    input:\n    set val(name), file(reads) from trimmedReadChannel\n    file index from bwaIndex.collect()\n    file bamtoolsFilterConfig from bamtoolsFilterConfigChannel\n\n    output:\n    set val(name), file(\"*.filtered.{bam,bam.bai}\") into bwaChannel\n    file \"*.{flagstat,idxstats,stats}\" into bwaMultiqcChannel\n\n    script:\n    filter_params = params.singleEnd ? \"-F 0x004\" : \"-F 0x004 -F 0x0008 -f 0x001\"\n    \"\"\"\n    bwa mem \\\\\n        -t $task.cpus \\\\\n        -M \\\\\n        ${index}/${bwa_base} \\\\\n        $reads \\\\\n        | samtools view -@ $task.cpus -b -h -F 0x0100 -O BAM -o unsorted.bam -\n\n    samtools sort -@ $task.cpus -o sorted.bam unsorted.bam\n\n    samtools view \\\\\n        $filter_params \\\\\n        -F 0x0400 -q 1 \\\\\n        -b sorted.bam \\\\\n        | bamtools filter \\\\\n            -out ${name}.filtered.bam \\\\\n            -script $bamtoolsFilterConfig\n\n    samtools index ${name}.filtered.bam\n    samtools flagstat ${name}.filtered.bam > ${name}.filtered.bam.flagstat\n    samtools idxstats ${name}.filtered.bam > ${name}.filtered.bam.idxstats\n    samtools stats ${name}.filtered.bam > ${name}.filtered.bam.stats\n\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    filter_params = params.singleEnd ? \"-F 0x004\" : \"-F 0x004 -F 0x0008 -f 0x001\"\n    \"\"\"\n    bwa mem \\\\\n        -t $task.cpus \\\\\n        -M \\\\\n        ${index}/${bwa_base} \\\\\n        $reads \\\\\n        | samtools view -@ $task.cpus -b -h -F 0x0100 -O BAM -o unsorted.bam -\n\n    samtools sort -@ $task.cpus -o sorted.bam unsorted.bam\n\n    samtools view \\\\\n        $filter_params \\\\\n        -F 0x0400 -q 1 \\\\\n        -b sorted.bam \\\\\n        | bamtools filter \\\\\n            -out ${name}.filtered.bam \\\\\n            -script $bamtoolsFilterConfig\n\n    samtools index ${name}.filtered.bam\n    samtools flagstat ${name}.filtered.bam > ${name}.filtered.bam.flagstat\n    samtools idxstats ${name}.filtered.bam > ${name}.filtered.bam.idxstats\n    samtools stats ${name}.filtered.bam > ${name}.filtered.bam.stats\n\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools",
            "BamTools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools",
            "https://bio.tools/bamtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "BamTools",
                "uri": "https://bio.tools/bamtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BamTools provides a fast, flexible C++ API & toolkit for reading, writing, and managing BAM files.",
                "homepage": "https://github.com/pezmaster31/bamtools"
            }
        ],
        "inputs": [
            "trimmedReadChannel",
            "bwaIndex",
            "bamtoolsFilterConfigChannel"
        ],
        "nb_inputs": 3,
        "outputs": [
            "bwaChannel",
            "bwaMultiqcChannel"
        ],
        "nb_outputs": 2,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outputDir}\", mode: 'copy' , saveAs: { filename -> if (filename.endsWith(\".flagstat\")) \"samtools_stats/$filename\" else if (filename.endsWith(\".idxstats\")) \"samtools_stats/$filename\" else if (filename.endsWith(\".stats\")) \"samtools_stats/$filename\" else if (filename.endsWith(\".metrics.txt\")) \"picard_metrics/$filename\" else if (filename.endsWith(\".bam\")) \"bams/$filename\" else if (filename.endsWith(\".bai\")) \"bams/$filename\" else filename }"
        ],
        "when": "",
        "stub": ""
    },
    "MergedRepBAM": {
        "name_process": "MergedRepBAM",
        "string_process": "\nprocess MergedRepBAM {\n    tag \"$name\"\n    publishDir \"${params.outputDir}\", mode: 'copy',\n        saveAs: { filename ->\n                      if (filename.endsWith(\".flagstat\")) \"samtools_stats/$filename\"\n                      else if (filename.endsWith(\".idxstats\")) \"samtools_stats/$filename\"\n                      else if (filename.endsWith(\".stats\")) \"samtools_stats/$filename\"\n                      else if (filename.endsWith(\".metrics.txt\")) \"picard_metrics/$filename\"\n                      else if (filename.endsWith(\".bam\")) \"bams/$filename\"\n                      else if (filename.endsWith(\".bai\")) \"bams/$filename\"\n                      else filename\n                }\n\n    input:\n    set val(name), file(bams) from mergeChannel\n\n    output:\n    set val(name), file(\"*.markdup.{bam,bam.bai}\") into bedGraphChannel\n    set val(name), file(\"*.flagstat\") into mergeFlagstatMultiqcChannel\n    file \"*.{idxstats,stats}\" into mergeidxStatsMultiqcChannel\n    file \"*.txt\" into mergeMarkDuplicatesMultiqcChannel\n\n    script:\n    bam_files = bams.findAll { it.toString().endsWith('.bam') }.sort()\n\n    if (bam_files.size() > 1) {\n        \"\"\"\n        samtools merge -@ $task.cpus ${name}.merged.bam ${bam_files.join(' ')}\n\n        samtools index ${name}.merged.bam\n\n        picard -Xmx${task.memory.toGiga()}g MarkDuplicates \\\\\n            INPUT=${name}.merged.bam \\\\\n            OUTPUT=${name}.markdup.bam \\\\\n            ASSUME_SORTED=true \\\\\n            REMOVE_DUPLICATES=true \\\\\n            METRICS_FILE=${name}.MarkDuplicates.metrics.txt \\\\\n            VALIDATION_STRINGENCY=LENIENT \\\\\n            TMP_DIR=tmp\n\n        samtools index ${name}.markdup.bam\n        samtools flagstat ${name}.markdup.bam > ${name}.markdup.bam.flagstat\n        samtools idxstats ${name}.markdup.bam > ${name}.markdup.bam.idxstats\n        samtools stats ${name}.markdup.bam > ${name}.markdup.bam.stats\n        \"\"\"\n    } else {\n      \"\"\"\n\n      picard -Xmx${task.memory.toGiga()}g MarkDuplicates \\\\\n          INPUT=${bams[0]} \\\\\n          OUTPUT=${name}.markdup.bam \\\\\n          ASSUME_SORTED=true \\\\\n          REMOVE_DUPLICATES=true \\\\\n          METRICS_FILE=${name}.MarkDuplicates.metrics.txt \\\\\n          VALIDATION_STRINGENCY=LENIENT \\\\\n          TMP_DIR=tmp\n\n      samtools index ${name}.markdup.bam\n      samtools flagstat ${name}.markdup.bam > ${name}.markdup.bam.flagstat\n      samtools idxstats ${name}.markdup.bam > ${name}.markdup.bam.idxstats\n      samtools stats ${name}.markdup.bam > ${name}.markdup.bam.stats\n      \"\"\"\n    }\n}",
        "nb_lignes_process": 63,
        "string_script": "    bam_files = bams.findAll { it.toString().endsWith('.bam') }.sort()\n\n    if (bam_files.size() > 1) {\n        \"\"\"\n        samtools merge -@ $task.cpus ${name}.merged.bam ${bam_files.join(' ')}\n\n        samtools index ${name}.merged.bam\n\n        picard -Xmx${task.memory.toGiga()}g MarkDuplicates \\\\\n            INPUT=${name}.merged.bam \\\\\n            OUTPUT=${name}.markdup.bam \\\\\n            ASSUME_SORTED=true \\\\\n            REMOVE_DUPLICATES=true \\\\\n            METRICS_FILE=${name}.MarkDuplicates.metrics.txt \\\\\n            VALIDATION_STRINGENCY=LENIENT \\\\\n            TMP_DIR=tmp\n\n        samtools index ${name}.markdup.bam\n        samtools flagstat ${name}.markdup.bam > ${name}.markdup.bam.flagstat\n        samtools idxstats ${name}.markdup.bam > ${name}.markdup.bam.idxstats\n        samtools stats ${name}.markdup.bam > ${name}.markdup.bam.stats\n        \"\"\"\n    } else {\n      \"\"\"\n\n      picard -Xmx${task.memory.toGiga()}g MarkDuplicates \\\\\n          INPUT=${bams[0]} \\\\\n          OUTPUT=${name}.markdup.bam \\\\\n          ASSUME_SORTED=true \\\\\n          REMOVE_DUPLICATES=true \\\\\n          METRICS_FILE=${name}.MarkDuplicates.metrics.txt \\\\\n          VALIDATION_STRINGENCY=LENIENT \\\\\n          TMP_DIR=tmp\n\n      samtools index ${name}.markdup.bam\n      samtools flagstat ${name}.markdup.bam > ${name}.markdup.bam.flagstat\n      samtools idxstats ${name}.markdup.bam > ${name}.markdup.bam.idxstats\n      samtools stats ${name}.markdup.bam > ${name}.markdup.bam.stats\n      \"\"\"\n    }",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "mergeChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bedGraphChannel",
            "mergeFlagstatMultiqcChannel",
            "mergeidxStatsMultiqcChannel",
            "mergeMarkDuplicatesMultiqcChannel"
        ],
        "nb_outputs": 4,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outputDir}\", mode: 'copy' , saveAs: { filename -> if (filename.endsWith(\".flagstat\")) \"samtools_stats/$filename\" else if (filename.endsWith(\".idxstats\")) \"samtools_stats/$filename\" else if (filename.endsWith(\".stats\")) \"samtools_stats/$filename\" else if (filename.endsWith(\".metrics.txt\")) \"picard_metrics/$filename\" else if (filename.endsWith(\".bam\")) \"bams/$filename\" else if (filename.endsWith(\".bai\")) \"bams/$filename\" else filename }"
        ],
        "when": "",
        "stub": ""
    },
    "ELRatio": {
        "name_process": "ELRatio",
        "string_process": "\nprocess ELRatio {\n\n    tag \"$name\"\n\n    input:\n    set val(name), val(bam) from conditionChannel\n\n    output:\n    file(\"*.bg\") into ELRatioChannel\n\n    script:\n\n    earlyBam = bam[0].containsKey(\"E\") ? bam[0][\"E\"] : bam[1][\"E\"]\n    lateBam  = bam[0].containsKey(\"L\") ? bam[0][\"L\"] : bam[1][\"L\"]\n\n    \"\"\"\n    bamCompare -b1 ${earlyBam[0]} \\\n               -b2 ${lateBam[0]} \\\n               -o ${name}.bg -of bedgraph \\\n               -bs ${params.windowSize} \\\n               --scaleFactorsMethod readCount \\\n               --operation log2 -p $task.cpus\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    earlyBam = bam[0].containsKey(\"E\") ? bam[0][\"E\"] : bam[1][\"E\"]\n    lateBam  = bam[0].containsKey(\"L\") ? bam[0][\"L\"] : bam[1][\"L\"]\n\n    \"\"\"\n    bamCompare -b1 ${earlyBam[0]} \\\n               -b2 ${lateBam[0]} \\\n               -o ${name}.bg -of bedgraph \\\n               -bs ${params.windowSize} \\\n               --scaleFactorsMethod readCount \\\n               --operation log2 -p $task.cpus\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "conditionChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ELRatioChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "RTNormalization": {
        "name_process": "RTNormalization",
        "string_process": "\nprocess RTNormalization {\n\n  publishDir \"${params.outputDir}\", mode: 'copy', overwrite: 'true',\n      saveAs: { filename ->\n                    if (filename.endsWith(\".bedGraph\")) \"bedGraph/$filename\"\n                    else filename\n              }\n\n    input:\n    file(bedgraph) from ELRatioChannel.collect()\n\n    output:\n    file(\"*.bedGraph\") into RTNormalizationChannel\n\n    shell:\n\n    if (multipleGroups) {\n\n      '''\n      echo -e \"chr\\tstart\\tstop\\t\"`ls *.bg` | sed \"s/\\\\ /\\\\t/g\" > merge_RT.txt\n      bedtools unionbedg -filler \"NA\" -i *.bg >> merge_RT.txt\n\n      rtnormalize.r -r merge_RT.txt -s !{params.loessSpan}\n\n      for file in `ls *bg`;\n      do\n        name=${file%.bg}\n        sort -k1,1 -k2,2n $file > ${name}.bedGraph\n      done\n\n      '''\n\n    } else {\n\n      '''\n      echo -e \"chr\\tstart\\tstop\\t\"`ls *.bg` | sed \"s/\\\\ /\\\\t/g\" > merge_RT.txt\n      cat *.bg >> merge_RT.txt\n\n      rtnormalize.r -r merge_RT.txt -s !{params.loessSpan}\n\n      for file in `ls *bg`;\n      do\n        name=${file%.bg}\n        sort -k1,1 -k2,2n $file > ${name}.bedGraph\n      done\n\n      '''\n    }\n}",
        "nb_lignes_process": 48,
        "string_script": "    if (multipleGroups) {\n\n      '''\n      echo -e \"chr\\tstart\\tstop\\t\"`ls *.bg` | sed \"s/\\\\ /\\\\t/g\" > merge_RT.txt\n      bedtools unionbedg -filler \"NA\" -i *.bg >> merge_RT.txt\n\n      rtnormalize.r -r merge_RT.txt -s !{params.loessSpan}\n\n      for file in `ls *bg`;\n      do\n        name=${file%.bg}\n        sort -k1,1 -k2,2n $file > ${name}.bedGraph\n      done\n\n      '''\n\n    } else {\n\n      '''\n      echo -e \"chr\\tstart\\tstop\\t\"`ls *.bg` | sed \"s/\\\\ /\\\\t/g\" > merge_RT.txt\n      cat *.bg >> merge_RT.txt\n\n      rtnormalize.r -r merge_RT.txt -s !{params.loessSpan}\n\n      for file in `ls *bg`;\n      do\n        name=${file%.bg}\n        sort -k1,1 -k2,2n $file > ${name}.bedGraph\n      done\n\n      '''\n    }",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "ELRatioChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "RTNormalizationChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "publishDir \"${params.outputDir}\", mode: 'copy', overwrite: 'true' , saveAs: { filename -> if (filename.endsWith(\".bedGraph\")) \"bedGraph/$filename\" else filename }"
        ],
        "when": "",
        "stub": ""
    },
    "bigwig": {
        "name_process": "bigwig",
        "string_process": "\nprocess bigwig {\n\n  publishDir \"${params.outputDir}\", mode: 'copy', overwrite: 'true',\n      saveAs: { filename ->\n                    if (filename.endsWith(\".qnorm.bw\")) \"bigwigs/quantile_normalized/$filename\"\n                    else if (filename.endsWith(\".qnorm.loess.bw\")) \"bigwigs/quantile_normalized_loess/$filename\"\n                    else if (filename.endsWith(\".loess.bw\")) \"bigwigs/unnormalized_loess/$filename\"\n                    else \"bigwigs/unnormalized/$filename\"\n              }\n\n    tag \"$name\"\n\n    input:\n    file(chrsizes) from chromSizesChannel.collect()\n    set val(name), file(bedgraph) from bigwigInputChannel\n\n    output:\n    file(\"*.bw\") into bigwigOutput\n\n    script:\n\n    \"\"\"\n    bedGraphToBigWig $bedgraph $chrsizes ${name}.bw\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    bedGraphToBigWig $bedgraph $chrsizes ${name}.bw\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "chromSizesChannel",
            "bigwigInputChannel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bigwigOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "publishDir \"${params.outputDir}\", mode: 'copy', overwrite: 'true' , saveAs: { filename -> if (filename.endsWith(\".qnorm.bw\")) \"bigwigs/quantile_normalized/$filename\" else if (filename.endsWith(\".qnorm.loess.bw\")) \"bigwigs/quantile_normalized_loess/$filename\" else if (filename.endsWith(\".loess.bw\")) \"bigwigs/unnormalized_loess/$filename\" else \"bigwigs/unnormalized/$filename\" }",
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "MultiQC": {
        "name_process": "MultiQC",
        "string_process": "\nprocess MultiQC {\n    publishDir \"${params.outputDir}/multiqc/\", mode: 'copy'\n\n    input:\n    file multiqcConfig from multiqcConfigChannel\n\n    file ('fastqc/*') from fastqcMultiqcChannel.collect().ifEmpty([])\n    file ('trimgalore/*') from trimgaloreMultiqcChannel.collect().ifEmpty([])\n    file ('trimgalore/fastqc/*') from trimgaloreFastqcMultiqcChannel.collect().ifEmpty([])\n\n    file ('alignment/replicates/*') from bwaMultiqcChannel.collect()\n    file ('alignment/*') from mergeFlagstatMultiqcChannel.collect()\n    file ('alignment/*') from mergeidxStatsMultiqcChannel.collect()\n    file ('alignment/picard_metrics/*') from mergeMarkDuplicatesMultiqcChannel.collect()\n\n    output:\n    file \"*multiqc_report.html\" into multiQCChannel\n    file \"*_data\"\n    file \"multiqc_plots\"\n\n    script:\n    rtitle = customRunName ? \"--title \\\"$customRunName\\\"\" : ''\n    rfilename = customRunName ? \"--filename \" + customRunName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n    \"\"\"\n    multiqc . -f $rtitle $rfilename --config $multiqcConfig \\\\\n        -m custom_content -m fastqc -m cutadapt -m samtools -m picard\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    rtitle = customRunName ? \"--title \\\"$customRunName\\\"\" : ''\n    rfilename = customRunName ? \"--filename \" + customRunName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n    \"\"\"\n    multiqc . -f $rtitle $rfilename --config $multiqcConfig \\\\\n        -m custom_content -m fastqc -m cutadapt -m samtools -m picard\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqcConfigChannel",
            "fastqcMultiqcChannel",
            "trimgaloreMultiqcChannel",
            "trimgaloreFastqcMultiqcChannel",
            "bwaMultiqcChannel",
            "mergeFlagstatMultiqcChannel",
            "mergeidxStatsMultiqcChannel",
            "mergeMarkDuplicatesMultiqcChannel"
        ],
        "nb_inputs": 8,
        "outputs": [
            "multiQCChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "PavriLab__repliseq-nf",
        "directive": [
            "publishDir \"${params.outputDir}/multiqc/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
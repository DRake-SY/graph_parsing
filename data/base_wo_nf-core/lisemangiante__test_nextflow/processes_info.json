{
    "coverage": {
        "name_process": "coverage",
        "string_process": "\nprocess coverage {\n\n    input:\n    file bam\n    file bed  \n      \n    output:\n    file 'coverage.txt' into coverage\n        \n    shell:\n    '''\n    bedtools coverage -d -a !{bed} -b !{bam} > coverage.txt\n    '''\n}",
        "nb_lignes_process": 13,
        "string_script": "    '''\n    bedtools coverage -d -a !{bed} -b !{bam} > coverage.txt\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bam",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [
            "coverage"
        ],
        "nb_outputs": 1,
        "name_workflow": "lisemangiante__test_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mean": {
        "name_process": "mean",
        "string_process": "\nprocess mean {\n\n    input:\n    file coverage\n      \n    output:\n    stdout average\n        \n    shell:\n    '''\n    awk '{ sum += $6 } END { if (NR > 0) print sum / NR }' !{coverage}\n    '''\n}",
        "nb_lignes_process": 12,
        "string_script": "    '''\n    awk '{ sum += $6 } END { if (NR > 0) print sum / NR }' !{coverage}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coverage"
        ],
        "nb_inputs": 1,
        "outputs": [
            "average"
        ],
        "nb_outputs": 1,
        "name_workflow": "lisemangiante__test_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "plot": {
        "name_process": "plot",
        "string_process": "\nprocess plot {\n\n    input:\n    file all_average\n      \n    output:\n    file 'coverage.pdf'\n        \n    publishDir '.', mode: 'move' \n        \n    shell:\n    '''\n    #!/usr/bin/env Rscript\n    pdf(\"coverage.pdf\")\n    hist(read.table(\"all_average.txt\")[,1],col=\"pink\")\n    dev.off()\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    #!/usr/bin/env Rscript\n    pdf(\"coverage.pdf\")\n    hist(read.table(\"all_average.txt\")[,1],col=\"pink\")\n    dev.off()\n    '''",
        "nb_lignes_script": 5,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_average"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lisemangiante__test_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
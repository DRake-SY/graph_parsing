{
    "NGMLRmap": {
        "name_process": "NGMLRmap",
        "string_process": "\tprocess NGMLRmap{\n\t\tlabel 'cpus_24'\n\t\tlabel 'ngmlr'\n\t\tstageInMode 'copy'\n\t\tinput:\n\t\t\tval name_string from params.names\n\t\t\tfile fasta from ch_fasta\n\t\t\tfile fq1 from ch_fastq1\n\t\toutput:\n\t\t\tfile \"${name_string}.sam\" into ngmlr_sam\n\t\tscript:\n\t\t\"\"\"\n\t\tngmlr -t ${task.cpus} --bam-fix -r ${fasta} -q ${fq1} -o ${name_string}.sam\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 13,
        "string_script": "\t\t\"\"\"\n\t\tngmlr -t ${task.cpus} --bam-fix -r ${fasta} -q ${fq1} -o ${name_string}.sam\n\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "NGMLR"
        ],
        "tools_url": [
            "https://bio.tools/ngmlr"
        ],
        "tools_dico": [
            {
                "name": "NGMLR",
                "uri": "https://bio.tools/ngmlr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2520",
                                    "term": "DNA mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3497",
                                "term": "DNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "An algorithm to map third generation long-read sequencing data (PacBio and Oxford Nanopore) to a reference genome with a focus on reads that span structural variation.",
                "homepage": "https://github.com/philres/ngmlr"
            }
        ],
        "inputs": [
            "params",
            "ch_fasta",
            "ch_fastq1"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ngmlr_sam"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'cpus_24'",
            "label 'ngmlr'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "NGMLRsort": {
        "name_process": "NGMLRsort",
        "string_process": "\tprocess NGMLRsort{\n\t  publishDir params.outdir, mode:'copy'\n\t  label 'cpus_8'\n\t  label 'samtools_1_9'\n\t  input:\n\t  \tval name_string from params.names\n\t\tfile sam from ngmlr_sam\n\t  output:\n\t\tfile \"${name_string}.ngmlr.aligned.bam\" into ch_bam_map\n\t\tfile \"${name_string}.ngmlr.aligned.bam.bai\" into ch_bam_index\n\t  script:\n\t  \"\"\"\n\t  samtools sort --threads ${task.cpus} -m 30${sam} > ${name_string}.ngmlr.aligned.bam\n\t  samtools index ${name_string}.ngmlr.aligned.bam\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 14,
        "string_script": "\t  \"\"\"\n\t  samtools sort --threads ${task.cpus} -m 30${sam} > ${name_string}.ngmlr.aligned.bam\n\t  samtools index ${name_string}.ngmlr.aligned.bam\n\t  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params",
            "ngmlr_sam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_bam_map",
            "ch_bam_index"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'samtools_1_9'"
        ],
        "when": "",
        "stub": ""
    },
    "sniffles": {
        "name_process": "sniffles",
        "string_process": "\tprocess sniffles {\n\t\tpublishDir params.outdir, mode:'copy'\n\t\tlabel 'cpus_8'\n\t\tlabel 'sniffles'\n\t\tinput:\n\t\t\tfile bam from ch_bam_map\n\t\toutput:\n\t\t\tfile \"*.vcf\" into sniffles_vcf\n\t\t\tpath(vcf_path) into vcf_sniffles_path\n\t\tscript:\n\t\t\t  \"\"\"\n\t\t\t  sniffles -m ${bam} -v sniffles_calls.vcf\n\t\t\t  echo ${params.outdir}/sniffles_calls.vcf > vcf_path # for later merging\n\t\t\t  \"\"\"\n\t}",
        "nb_lignes_process": 13,
        "string_script": "\t\t\t  \"\"\"\n\t\t\t  sniffles -m ${bam} -v sniffles_calls.vcf\n\t\t\t  echo ${params.outdir}/sniffles_calls.vcf > vcf_path # for later merging\n\t\t\t  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_bam_map"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sniffles_vcf",
            "vcf_sniffles_path"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'sniffles'"
        ],
        "when": "",
        "stub": ""
    },
    "svim": {
        "name_process": "svim",
        "string_process": "\tprocess svim {\n\t\tpublishDir params.outdir, mode:'copy'\n\t\tlabel 'cpus_8'\n\t\tlabel 'svim'\n\t\tinput:\n\t\t\tval name_string from params.names\n\t\t\tfile bam from ch_bam_map\n\t\t\tfile fasta from ch_fasta\n\t\toutput:\n\t\t\tpath \"${name_string}_svim\" into svim_output\n\t\t\tfile \"svim_variants.vcf\" into svim_vcf\n\t\tscript:\n\t\t\t  \"\"\"\n\t\t\t  svim alignment ${name_string}_svim ${bam} ${fasta}\n\t\t\t  cp ${name_string}_svim/variants.vcf svim_variants.vcf\n\t\t\t  \"\"\"\n\t}",
        "nb_lignes_process": 15,
        "string_script": "\t\t\t  \"\"\"\n\t\t\t  svim alignment ${name_string}_svim ${bam} ${fasta}\n\t\t\t  cp ${name_string}_svim/variants.vcf svim_variants.vcf\n\t\t\t  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params",
            "ch_bam_map",
            "ch_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "svim_output",
            "svim_vcf"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'svim'"
        ],
        "when": "",
        "stub": ""
    },
    "cutesv_css": {
        "name_process": "cutesv_css",
        "string_process": "\tprocess cutesv_css {\n\t\t\tpublishDir params.outdir, mode:'copy'\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'cutesv'\n\t\t\tinput:\n\t\t\t\tfile bam from ch_bam_map\n\t\t\t\tfile bai from ch_bam_index\n\t\t\t\tfile fasta from ch_fasta\n\t\t\toutput:\n\t\t\t\tfile \"cutesv_calls.vcf\" into cutesv_css_vcf\n\t\t\tscript:\n\t\t\t\t  \"\"\"\n\t\t\t\t  cuteSV ${bam} ${fasta} cutesv_calls.vcf ./ \\\n\t\t\t\t  --threads ${task.cpus} \\\n                  --max_cluster_bias_INS 1000 \\\n                  --diff_ratio_merging_INS 0.9 \\\n                  --max_cluster_bias_DEL 1000 \\\n                  --diff_ratio_merging_DEL 0.5\n\t\t\t\t  \"\"\"\n\t\t}",
        "nb_lignes_process": 18,
        "string_script": "\t\t\t\t  \"\"\"\n\t\t\t\t  cuteSV ${bam} ${fasta} cutesv_calls.vcf ./ \\\n\t\t\t\t  --threads ${task.cpus} \\\n                  --max_cluster_bias_INS 1000 \\\n                  --diff_ratio_merging_INS 0.9 \\\n                  --max_cluster_bias_DEL 1000 \\\n                  --diff_ratio_merging_DEL 0.5\n\t\t\t\t  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_bam_map",
            "ch_bam_index",
            "ch_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "cutesv_css_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'cutesv'"
        ],
        "when": "",
        "stub": ""
    },
    "cutesv_clr": {
        "name_process": "cutesv_clr",
        "string_process": "\tprocess cutesv_clr {\n\t\t\tpublishDir params.outdir, mode:'copy'\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'cutesv'\n\t\t\tinput:\n\t\t\t\tfile bam from ch_bam_map\n\t\t\t\tfile bai from ch_bam_index\n\t\t\t\tfile fasta from ch_fasta\n\t\t\toutput:\n\t\t\t\tfile \"cutesv_calls.vcf\" into cutesv_clr_vcf\n\t\t\tscript:\n\t\t\t\t  \"\"\"\n\t\t\t\t  cuteSV ${bam} ${fasta} cutesv_calls.vcf ./ \\\n\t\t\t\t  --threads ${task.cpus} \\\n                  --max_cluster_bias_INS 100 \\\n                  --diff_ratio_merging_INS 0.3 \\\n                  --max_cluster_bias_DEL 200 \\\n                  --diff_ratio_merging_DEL 0.5\n\t\t\t\t  \"\"\"\n\t\t}",
        "nb_lignes_process": 18,
        "string_script": "\t\t\t\t  \"\"\"\n\t\t\t\t  cuteSV ${bam} ${fasta} cutesv_calls.vcf ./ \\\n\t\t\t\t  --threads ${task.cpus} \\\n                  --max_cluster_bias_INS 100 \\\n                  --diff_ratio_merging_INS 0.3 \\\n                  --max_cluster_bias_DEL 200 \\\n                  --diff_ratio_merging_DEL 0.5\n\t\t\t\t  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_bam_map",
            "ch_bam_index",
            "ch_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "cutesv_clr_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'cutesv'"
        ],
        "when": "",
        "stub": ""
    },
    "BuildPBMM2index": {
        "name_process": "BuildPBMM2index",
        "string_process": "\tprocess BuildPBMM2index {\n\t\ttag \"${fasta}\"\n\t\tlabel 'cpus_8'\n\t\tlabel 'pbmm2'\n\t\tstageInMode 'copy'\n\t\tinput:\n\t\t\tfile fasta from ch_fasta\n\t\toutput:\n\t\t\tfile(\"${fasta.baseName}.mmi\") into pbmm2_built\n\t\tscript:\n\t\t\"\"\"\n\t\tpbmm2 index ${fasta} ${fasta.baseName}.mmi\t\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 12,
        "string_script": "\t\t\"\"\"\n\t\tpbmm2 index ${fasta} ${fasta.baseName}.mmi\t\n\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pbmm2_built"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"${fasta}\"",
            "label 'cpus_8'",
            "label 'pbmm2'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PBMM2fastqMap_css": {
        "name_process": "PBMM2fastqMap_css",
        "string_process": "\tprocess PBMM2fastqMap_css{\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'pbmm2'\n\t\t\tpublishDir params.outdir, mode:'copy'\n\t\t\tinput:\n\t\t\t\tval name_string from params.names\n\t\t\t\tfile mmi from pbmm2_built\n\t\t\t\tfile fq1 from ch_fastq1\n\n\t\t\toutput:\n\t\t\t\tfile \"${name_string}.pbmm2.aligned.bam\" into pbmm2_bam_css\n\t\t\tscript:\n\t\t\t\"\"\"\n\t\t\tpbmm2 align ${mmi} ${fq1} ${name_string}.pbmm2.aligned.bam --preset CCS --sort -j ${task.cpus}\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_process": 14,
        "string_script": "\t\t\t\"\"\"\n\t\t\tpbmm2 align ${mmi} ${fq1} ${name_string}.pbmm2.aligned.bam --preset CCS --sort -j ${task.cpus}\n\t\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params",
            "pbmm2_built",
            "ch_fastq1"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pbmm2_bam_css"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'cpus_8'",
            "label 'pbmm2'",
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PBMM2fastqMap_clr": {
        "name_process": "PBMM2fastqMap_clr",
        "string_process": "\tprocess PBMM2fastqMap_clr{\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'pbmm2'\n\t\t\tpublishDir params.outdir, mode:'copy'\n\t\t\tinput:\n\t\t\t\tval name_string from params.names\n\t\t\t\tfile mmi from pbmm2_built\n\t\t\t\tfile fq1 from ch_fastq1\n\n\t\t\toutput:\n\t\t\t\tfile \"${name_string}.pbmm2.aligned.bam\" into pbmm2_bam_clr\n\t\t\tscript:\n\t\t\t\"\"\"\n\t\t\tpbmm2 align ${mmi} ${fq1} ${name_string}.pbmm2.aligned.bam --median-filter --sort -j ${task.cpus}\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_process": 14,
        "string_script": "\t\t\t\"\"\"\n\t\t\tpbmm2 align ${mmi} ${fq1} ${name_string}.pbmm2.aligned.bam --median-filter --sort -j ${task.cpus}\n\t\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params",
            "pbmm2_built",
            "ch_fastq1"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pbmm2_bam_clr"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'cpus_8'",
            "label 'pbmm2'",
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pbsv_discovery_tandem": {
        "name_process": "pbsv_discovery_tandem",
        "string_process": "\tprocess pbsv_discovery_tandem{\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'pbsv'\n\t\t\tinput:\n\t\t\t\tfile bam from pbmm2_bam\n\t\t\toutput:\n\t\t\t\tfile \"*.svsig.gz\" into pbsv_svsig_tandem\n\t\t\twhen: !(ch_pbsvTandem)\n\t\t\tscript:\n\t\t\t\"\"\"\n\t\t\t/usr/bin/env bash ${projectDir}/bin/pbsv_tandem.sh ${bam} ${bam.baseName}.svsig.gz\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_process": 11,
        "string_script": "\t\t\t\"\"\"\n\t\t\t/usr/bin/env bash ${projectDir}/bin/pbsv_tandem.sh ${bam} ${bam.baseName}.svsig.gz\n\t\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "pbmm2_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pbsv_svsig_tandem"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'cpus_8'",
            "label 'pbsv'"
        ],
        "when": "",
        "stub": ""
    },
    "pbsv_discovery_no_tandem": {
        "name_process": "pbsv_discovery_no_tandem",
        "string_process": "\tprocess pbsv_discovery_no_tandem{\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'pbsv'\n\t\t\tinput:\n\t\t\t\tfile bam from pbmm2_bam\n\t\t\t\tfile tandem from ch_pbsvTandem\n\t\t\toutput:\n\t\t\t\tfile \"*.svsig.gz\" into pbsv_svsig_no_tandem\n\t\t\twhen: ch_pbsvTandem\n\t\t\tscript:\n\t\t\t\"\"\"\n\t\t\tpbsv discover ${bam} ${bam.baseName}.svsig.gz\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_process": 12,
        "string_script": "\t\t\t\"\"\"\n\t\t\tpbsv discover ${bam} ${bam.baseName}.svsig.gz\n\t\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pbmm2_bam",
            "ch_pbsvTandem"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pbsv_svsig_no_tandem"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'cpus_8'",
            "label 'pbsv'"
        ],
        "when": "",
        "stub": ""
    },
    "pbsv_call_ccs": {
        "name_process": "pbsv_call_ccs",
        "string_process": "\tprocess pbsv_call_ccs{\n\t\t\tpublishDir params.outdir, mode:'copy'\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'pbsv'\n\t\t\tstageInMode 'copy'\n\t\t\tinput:\n\t\t\t\tfile svsig from pbsv_svsig\n\t\t\t\tfile fasta from ch_fasta\n\t\t\toutput:\n\t\t\t\tfile \"*.vcf\" into pbsv_vcf_ccs\n\t\t\t\tpath(vcf_path) into vcf_pbsv_path\n\t\t\t\"\"\"\n\t\t\tpbsv call --ccs ${fasta} ${svsig} pbsv_calls.vcf\n\t\t\techo ${params.outdir}/pbsv_calls.vcf > vcf_path # for later merging\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n\t\t\tpbsv call --ccs ${fasta} ${svsig} pbsv_calls.vcf\n\t\t\techo ${params.outdir}/pbsv_calls.vcf > vcf_path # for later merging\n\t\t\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pbsv_svsig",
            "ch_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pbsv_vcf_ccs",
            "vcf_pbsv_path"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'pbsv'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pbsv_call_clr": {
        "name_process": "pbsv_call_clr",
        "string_process": "\tprocess pbsv_call_clr{\n\t\t\tpublishDir params.outdir, mode:'copy'\n\t\t\tlabel 'cpus_8'\n\t\t\tlabel 'pbsv'\n\t\t\tstageInMode 'copy'\n\t\t\tinput:\n\t\t\t\tfile svsig from pbsv_svsig\n\t\t\t\tfile fasta from ch_fasta\n\t\t\toutput:\n\t\t\t\tfile \"*.vcf\" into pbsv_vcf_clr\n\t\t\t\tpath(vcf_path) into vcf_pbsv_path\n\t\t\t\"\"\"\n\t\t\tpbsv call ${fasta} ${svsig} pbsv_calls.vcf\n\t\t\techo ${params.outdir}/pbsv_calls.vcf > vcf_path # for later merging\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n\t\t\tpbsv call ${fasta} ${svsig} pbsv_calls.vcf\n\t\t\techo ${params.outdir}/pbsv_calls.vcf > vcf_path # for later merging\n\t\t\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pbsv_svsig",
            "ch_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pbsv_vcf_clr",
            "vcf_pbsv_path"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'cpus_8'",
            "label 'pbsv'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prep_vcf_list": {
        "name_process": "prep_vcf_list",
        "string_process": "\tprocess prep_vcf_list{\n    label 'tiny_job'\n    input:\n        file \"pbsv_calls.vcf\" from pbsv_vcf_ccs\n        file \"sniffles_calls.vcf\" from sniffles_vcf\n    output:\n        file \"vcf_list\" into ch_vcf\n    script:\n    \"\"\"\n    ls pbsv_calls.vcf >> vcf_list\n    ls sniffles_calls.vcf >> vcf_list\n    \"\"\"\n\t}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    ls pbsv_calls.vcf >> vcf_list\n    ls sniffles_calls.vcf >> vcf_list\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pbsv_vcf_ccs",
            "sniffles_vcf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'tiny_job'"
        ],
        "when": "",
        "stub": ""
    },
    "BuildBWAindexes": {
        "name_process": "BuildBWAindexes",
        "string_process": "\tprocess BuildBWAindexes {\n\t\ttag \"${fasta}\"\n\t\tlabel 'bwa'\n\t\tpublishDir params.outdir, mode: 'copy'\n\t\tinput:\n\t\t\tfile(fasta) from ch_fasta\n\t\toutput:\n\t\t\tfile(\"${fasta}.*\") into bwa_built\n\t\twhen: !(params.bwa) && params.fasta && params.fastq1\n\t\tscript:\n\t\t\"\"\"\n\t\tbwa index ${fasta}\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 12,
        "string_script": "\t\t\"\"\"\n\t\tbwa index ${fasta}\n\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bwa_built"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"${fasta}\"",
            "label 'bwa'",
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "readgroup": {
        "name_process": "readgroup",
        "string_process": "\tprocess readgroup{\n\t  label 'python2'\n\t  input:\n\t\tfile fq1 from ch_fastq1\n\t\tval sample_name from params.names\t\t\n\t  output:\n\t\tfile \"${sample_name}.rg\" into readgroup\n\t  script:\n\t  \"\"\"\n\t  /usr/bin/env python ${projectDir}/bin/read_group_from_fastq.py -o ${sample_name}.rg $fq1\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 10,
        "string_script": "\t  \"\"\"\n\t  /usr/bin/env python ${projectDir}/bin/read_group_from_fastq.py -o ${sample_name}.rg $fq1\n\t  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fastq1",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "readgroup"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'python2'"
        ],
        "when": "",
        "stub": ""
    },
    "map": {
        "name_process": "map",
        "string_process": "\tprocess map{\n\t  label 'bwa'\n\t  label 'cpus_8'\n\t  stageInMode 'copy'\n\t  input:\n\t\tfile fq1 from ch_fastq1\n\t\tfile fq2 from ch_fastq2\n\t\tfile faidx from ch_bwa\n\t\tfile fasta from ch_fasta\n\t\tfile rgr from readgroup\n\t\tval sample_name from params.names\n\t  output:\n\t\tfile \"${sample_name}.sam\" into ch_sam_map\n\t  when: !(params.bam) && params.fastq1\n\t  script:\n\t  \"\"\"\n\t  bwa mem -K 100000000 -R \\$(cat $rgr) -t ${task.cpus} -M ${fasta} $fq1 $fq2 > ${sample_name}.sam\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 17,
        "string_script": "\t  \"\"\"\n\t  bwa mem -K 100000000 -R \\$(cat $rgr) -t ${task.cpus} -M ${fasta} $fq1 $fq2 > ${sample_name}.sam\n\t  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fastq1",
            "ch_fastq2",
            "ch_bwa",
            "ch_fasta",
            "readgroup",
            "params"
        ],
        "nb_inputs": 6,
        "outputs": [
            "ch_sam_map"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'bwa'",
            "label 'cpus_8'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "map2": {
        "name_process": "map2",
        "string_process": "\tprocess map2{\n\t  publishDir \"${params.outdir}/alignments\", mode:'copy'\n\t  label 'cpus_8'\n\t  label 'samtools'\n\t  input:\n\t\tfile sam from ch_sam_map\n\t\tval sample_name from params.names\n\t  output:\n\t\tfile \"${sample_name}.bam\" into ch_bam_map\n\t  script:\n\t  \"\"\"\n\t  samtools sort --threads ${task.cpus} -m 30G $sam > ${sample_name}.bam\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 12,
        "string_script": "\t  \"\"\"\n\t  samtools sort --threads ${task.cpus} -m 30G $sam > ${sample_name}.bam\n\t  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_sam_map",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_bam_map"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir \"${params.outdir}/alignments\", mode:'copy'",
            "label 'cpus_8'",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "dedup": {
        "name_process": "dedup",
        "string_process": "\tprocess dedup{\n\t  publishDir \"${params.outdir}/alignments\", mode:'copy'\n\t  label 'gatk'\n\t  label 'cpus_8'\n\t  input:\n\t\tfile bamf from ch_bam_und\n\t\tval sample_name from params.names\n\t  output:\n\t  \ttuple sample_name, file(\"${bamf.baseName}.md.bam\"), file(\"${bamf.baseName}.md.bam.bai\") into ch_sample_name_bam_bai\n\t\tfile \"${bamf.baseName}.metrics\" into bam_markd_m\n\t  script:\n\t  \tmarkdup_java_options = task.memory.toGiga() > 8 ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n\t  \"\"\"\n\t  gatk --java-options ${markdup_java_options} \\\n\t\t\tMarkDuplicates \\\n\t\t\t--MAX_RECORDS_IN_RAM 50000 \\\n\t\t\t--INPUT ${bamf} \\\n\t\t\t--METRICS_FILE ${bamf.baseName}.metrics \\\n\t\t\t--TMP_DIR . \\\n\t\t\t--ASSUME_SORT_ORDER coordinate \\\n\t\t\t--CREATE_INDEX true \\\n\t\t\t--REMOVE_DUPLICATES true \\\n\t\t\t--OUTPUT ${bamf.baseName}.md.bam\n\t\n\t\tmv ${bamf.baseName}.md.bai ${bamf.baseName}.md.bam.bai\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 25,
        "string_script": "\t  \tmarkdup_java_options = task.memory.toGiga() > 8 ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n\t  \"\"\"\n\t  gatk --java-options ${markdup_java_options} \\\n\t\t\tMarkDuplicates \\\n\t\t\t--MAX_RECORDS_IN_RAM 50000 \\\n\t\t\t--INPUT ${bamf} \\\n\t\t\t--METRICS_FILE ${bamf.baseName}.metrics \\\n\t\t\t--TMP_DIR . \\\n\t\t\t--ASSUME_SORT_ORDER coordinate \\\n\t\t\t--CREATE_INDEX true \\\n\t\t\t--REMOVE_DUPLICATES true \\\n\t\t\t--OUTPUT ${bamf.baseName}.md.bam\n\t\n\t\tmv ${bamf.baseName}.md.bai ${bamf.baseName}.md.bam.bai\n\t  \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "ch_bam_und",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_sample_name_bam_bai",
            "bam_markd_m"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir \"${params.outdir}/alignments\", mode:'copy'",
            "label 'gatk'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "avoid_race_condition": {
        "name_process": "avoid_race_condition",
        "string_process": "\tprocess avoid_race_condition{\n\t\tstageInMode 'copy'\n\t\tlabel 'samtools'\n\t\toutput:\n  \t\tfile file into avoid_race_cond_1\n\t\t\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"\n\t}",
        "nb_lignes_process": 7,
        "string_script": "\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mrcfile"
        ],
        "tools_url": [
            "https://bio.tools/mrcfile"
        ],
        "tools_dico": [
            {
                "name": "mrcfile",
                "uri": "https://bio.tools/mrcfile",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "mrcfile is a Python implementation of the MRC2014 file format, which is used in structural biology to store image and volume data.\n\nIt allows MRC files to be created and opened easily using a very simple API, which exposes the file\u2019s header and data as numpy arrays. The code runs in Python 2 and 3 and is fully unit-tested.\n\nThis library aims to allow users and developers to read and write standard-compliant MRC files in Python as easily as possible, and with no dependencies on any compiled libraries except numpy. You can use it interactively to inspect files, correct headers and so on, or in scripts and larger software packages to provide basic MRC file I/O functions.",
                "homepage": "https://mrcfile.readthedocs.io/en/latest/readme.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "avoid_race_cond_1"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "stageInMode 'copy'",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "avoid_race_condition_2": {
        "name_process": "avoid_race_condition_2",
        "string_process": "\tprocess avoid_race_condition_2{\n\t\tstageInMode 'copy'\n\t\tlabel 'lumpy'\n\t\tinput:\n\t\tfile arc2 from avoid_race_cond_1\n\t\toutput:\n  \t\tfile file into avoid_race_cond_2\n\t\t\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"\n\t}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mrcfile"
        ],
        "tools_url": [
            "https://bio.tools/mrcfile"
        ],
        "tools_dico": [
            {
                "name": "mrcfile",
                "uri": "https://bio.tools/mrcfile",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "mrcfile is a Python implementation of the MRC2014 file format, which is used in structural biology to store image and volume data.\n\nIt allows MRC files to be created and opened easily using a very simple API, which exposes the file\u2019s header and data as numpy arrays. The code runs in Python 2 and 3 and is fully unit-tested.\n\nThis library aims to allow users and developers to read and write standard-compliant MRC files in Python as easily as possible, and with no dependencies on any compiled libraries except numpy. You can use it interactively to inspect files, correct headers and so on, or in scripts and larger software packages to provide basic MRC file I/O functions.",
                "homepage": "https://mrcfile.readthedocs.io/en/latest/readme.html"
            }
        ],
        "inputs": [
            "avoid_race_cond_1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "avoid_race_cond_2"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "stageInMode 'copy'",
            "label 'lumpy'"
        ],
        "when": "",
        "stub": ""
    },
    "avoid_race_condition_3": {
        "name_process": "avoid_race_condition_3",
        "string_process": "\tprocess avoid_race_condition_3{\n\t\tstageInMode 'copy'\n\t\tlabel 'breakdancer'\n\t\tinput:\n\t\tfile arc3 from avoid_race_cond_2\n\t\toutput:\n  \t\tfile file into avoid_race_cond_3\n\t\t\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"\n\t}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mrcfile"
        ],
        "tools_url": [
            "https://bio.tools/mrcfile"
        ],
        "tools_dico": [
            {
                "name": "mrcfile",
                "uri": "https://bio.tools/mrcfile",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "mrcfile is a Python implementation of the MRC2014 file format, which is used in structural biology to store image and volume data.\n\nIt allows MRC files to be created and opened easily using a very simple API, which exposes the file\u2019s header and data as numpy arrays. The code runs in Python 2 and 3 and is fully unit-tested.\n\nThis library aims to allow users and developers to read and write standard-compliant MRC files in Python as easily as possible, and with no dependencies on any compiled libraries except numpy. You can use it interactively to inspect files, correct headers and so on, or in scripts and larger software packages to provide basic MRC file I/O functions.",
                "homepage": "https://mrcfile.readthedocs.io/en/latest/readme.html"
            }
        ],
        "inputs": [
            "avoid_race_cond_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "avoid_race_cond_3"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "stageInMode 'copy'",
            "label 'breakdancer'"
        ],
        "when": "",
        "stub": ""
    },
    "avoid_race_condition_4": {
        "name_process": "avoid_race_condition_4",
        "string_process": "\tprocess avoid_race_condition_4{\n\t\tstageInMode 'copy'\n\t\tlabel 'manta'\n\t\tinput:\n\t\tfile arc4 from avoid_race_cond_3\n\t\toutput:\n  \t\tfile file into avoid_race_cond_4\n\t\t\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"\n\t}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mrcfile"
        ],
        "tools_url": [
            "https://bio.tools/mrcfile"
        ],
        "tools_dico": [
            {
                "name": "mrcfile",
                "uri": "https://bio.tools/mrcfile",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "mrcfile is a Python implementation of the MRC2014 file format, which is used in structural biology to store image and volume data.\n\nIt allows MRC files to be created and opened easily using a very simple API, which exposes the file\u2019s header and data as numpy arrays. The code runs in Python 2 and 3 and is fully unit-tested.\n\nThis library aims to allow users and developers to read and write standard-compliant MRC files in Python as easily as possible, and with no dependencies on any compiled libraries except numpy. You can use it interactively to inspect files, correct headers and so on, or in scripts and larger software packages to provide basic MRC file I/O functions.",
                "homepage": "https://mrcfile.readthedocs.io/en/latest/readme.html"
            }
        ],
        "inputs": [
            "avoid_race_cond_3"
        ],
        "nb_inputs": 1,
        "outputs": [
            "avoid_race_cond_4"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "stageInMode 'copy'",
            "label 'manta'"
        ],
        "when": "",
        "stub": ""
    },
    "avoid_race_condition_5": {
        "name_process": "avoid_race_condition_5",
        "string_process": "\tprocess avoid_race_condition_5{\n\t\tstageInMode 'copy'\n\t\tlabel 'cnmops'\n\t\tinput:\n\t\tfile arc5 from avoid_race_cond_4\n\t\toutput:\n  \t\tfile file into avoid_race_cond_5\n\t\t\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"\n\t}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mrcfile"
        ],
        "tools_url": [
            "https://bio.tools/mrcfile"
        ],
        "tools_dico": [
            {
                "name": "mrcfile",
                "uri": "https://bio.tools/mrcfile",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "mrcfile is a Python implementation of the MRC2014 file format, which is used in structural biology to store image and volume data.\n\nIt allows MRC files to be created and opened easily using a very simple API, which exposes the file\u2019s header and data as numpy arrays. The code runs in Python 2 and 3 and is fully unit-tested.\n\nThis library aims to allow users and developers to read and write standard-compliant MRC files in Python as easily as possible, and with no dependencies on any compiled libraries except numpy. You can use it interactively to inspect files, correct headers and so on, or in scripts and larger software packages to provide basic MRC file I/O functions.",
                "homepage": "https://mrcfile.readthedocs.io/en/latest/readme.html"
            }
        ],
        "inputs": [
            "avoid_race_cond_4"
        ],
        "nb_inputs": 1,
        "outputs": [
            "avoid_race_cond_5"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "stageInMode 'copy'",
            "label 'cnmops'"
        ],
        "when": "",
        "stub": ""
    },
    "avoid_race_condition_6": {
        "name_process": "avoid_race_condition_6",
        "string_process": "\tprocess avoid_race_condition_6{\n\t\tstageInMode 'copy'\n\t\tlabel 'delly'\n\t\tinput:\n\t\tfile arc6 from avoid_race_cond_5\n\t\toutput:\n  \t\tfile file into avoid_race_cond_6\n\t\t\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"\n\t}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    \techo 'Hello world!' > file\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mrcfile"
        ],
        "tools_url": [
            "https://bio.tools/mrcfile"
        ],
        "tools_dico": [
            {
                "name": "mrcfile",
                "uri": "https://bio.tools/mrcfile",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "mrcfile is a Python implementation of the MRC2014 file format, which is used in structural biology to store image and volume data.\n\nIt allows MRC files to be created and opened easily using a very simple API, which exposes the file\u2019s header and data as numpy arrays. The code runs in Python 2 and 3 and is fully unit-tested.\n\nThis library aims to allow users and developers to read and write standard-compliant MRC files in Python as easily as possible, and with no dependencies on any compiled libraries except numpy. You can use it interactively to inspect files, correct headers and so on, or in scripts and larger software packages to provide basic MRC file I/O functions.",
                "homepage": "https://mrcfile.readthedocs.io/en/latest/readme.html"
            }
        ],
        "inputs": [
            "avoid_race_cond_5"
        ],
        "nb_inputs": 1,
        "outputs": [
            "avoid_race_cond_6"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "stageInMode 'copy'",
            "label 'delly'"
        ],
        "when": "",
        "stub": ""
    },
    "bam_insertsize": {
        "name_process": "bam_insertsize",
        "string_process": "\tprocess bam_insertsize{\n\t  publishDir \"${params.outdir}/alignments\", mode:'copy'\n\t  label 'samtools'\n\t  input:\n\t\ttuple sample_name, bam_input, bam_index from ch_sample_name_bam_bai\n\t  output:\n\t\tfile \"insert_size.txt\" into ins_size_ch\n\t  script:\n\t  \"\"\"\n\t  samtools stats $bam_input |grep \"^IS\" |awk '{a = a + \\$2*\\$3; b = b + \\$3}END{print int(a/b)}' > insert_size.txt\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 10,
        "string_script": "\t  \"\"\"\n\t  samtools stats $bam_input |grep \"^IS\" |awk '{a = a + \\$2*\\$3; b = b + \\$3}END{print int(a/b)}' > insert_size.txt\n\t  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_sample_name_bam_bai"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ins_size_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir \"${params.outdir}/alignments\", mode:'copy'",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "fastaindex": {
        "name_process": "fastaindex",
        "string_process": "\tprocess fastaindex{\n\t  publishDir \"${params.outdir}/alignments\", mode:'copy'\n\t  label 'samtools'\n\t  input:\n\t\tfile fasta from ch_fasta\n\n\t  output:\n\t\tfile \"${fasta}.fai\" into fasta_fai_ch\n\n\t  script:\n\t  \"\"\"\n\t  samtools faidx $fasta\n\t  \"\"\"\n\t}",
        "nb_lignes_process": 12,
        "string_script": "\t  \"\"\"\n\t  samtools faidx $fasta\n\t  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fasta_fai_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir \"${params.outdir}/alignments\", mode:'copy'",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_mapping": {
        "name_process": "lumpy_mapping",
        "string_process": "\tprocess lumpy_mapping {\n\t\ttag \"$sample_name\"\n\t\tlabel 'lumpy'\n\t\tlabel 'cpus_8'\n\t\tpublishDir \"${params.outdir}/alignments/mapped_lumpy\", pattern: \"*_alignBWA_lumpy.bam\", mode: 'copy'\n\t\tcpus params.threads\n\n\t\tinput:\n\t\t\ttuple sample_name, bam_input, bam_index from in_lumpy\n\n\t\toutput:\n\t\t\ttuple sample_name, path(bam_bwa_lumpy) into ( bam_bwa_lumpy_ch, bam_bwa_lumpy_splits_ch )\n\t\t\ttuple sample_name, path(dis_unsorted_bam) into dis_unsorted_bam_ch\n\n\t\tscript:\n\t\t\tlog.info \"Mapping Lumpy (Map clipped reads, read group info, extract discordant alignments)\"\n\n\t\t\t                    \n\t\t\tbam_name_sort      = sample_name + \"_alignBWA_ReadNameSort\"\n\t\t\tbam_name_sort_full = sample_name + \"_alignBWA_ReadNameSort.bam\"\n\t\t\tbam_bwa_lumpy      = sample_name + \"_alignBWA_lumpy.bam\"\n\t\t\tbam_bwa_lumpy_sort = sample_name + \"_alignBWA_lumpySort.bam\"\n\t\t\tdis_unsorted_bam   = sample_name + \"_discordants.unsorted.bam\"\n\t\t\tdis_sorted_bam     = sample_name + \"_discordants.sorted.bam\"\n\t\t\tsplit_unsorted_bam = sample_name + \"_splitters.unsorted.bam\"\n\t\t\tsplit_sorted_bam   = sample_name + \"_splitters.sorted.bam\"\n\t\t\t\"\"\"\n\t\t\t# Clipped_rc reads mapping to Genome\n\t\t\tsamtools sort -n ${bam_input} -o ${bam_name_sort_full} -@ ${params.threads}\n\t\t\t# manual read group info\n\t\t\tsamtools view -h ${bam_name_sort_full} \\\n\t\t\t| samblaster --acceptDupMarks --excludeDups --addMateTags \\\n\t\t\t\t\t\t--ignoreUnmated --maxSplitCount 2 --minNonOverlap 20 \\\n\t\t\t| samtools view -@ ${params.threads} -S -b - > ${bam_bwa_lumpy}\n\t\t\t# Extract the discordant pairedend alignments\n\t\t\tsamtools view -@ ${params.threads} -b -F 1294 ${bam_bwa_lumpy} > ${dis_unsorted_bam}\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 36,
        "string_script": "\t\t\tlog.info \"Mapping Lumpy (Map clipped reads, read group info, extract discordant alignments)\"\n\n\t\t\t                    \n\t\t\tbam_name_sort      = sample_name + \"_alignBWA_ReadNameSort\"\n\t\t\tbam_name_sort_full = sample_name + \"_alignBWA_ReadNameSort.bam\"\n\t\t\tbam_bwa_lumpy      = sample_name + \"_alignBWA_lumpy.bam\"\n\t\t\tbam_bwa_lumpy_sort = sample_name + \"_alignBWA_lumpySort.bam\"\n\t\t\tdis_unsorted_bam   = sample_name + \"_discordants.unsorted.bam\"\n\t\t\tdis_sorted_bam     = sample_name + \"_discordants.sorted.bam\"\n\t\t\tsplit_unsorted_bam = sample_name + \"_splitters.unsorted.bam\"\n\t\t\tsplit_sorted_bam   = sample_name + \"_splitters.sorted.bam\"\n\t\t\t\"\"\"\n\t\t\t# Clipped_rc reads mapping to Genome\n\t\t\tsamtools sort -n ${bam_input} -o ${bam_name_sort_full} -@ ${params.threads}\n\t\t\t# manual read group info\n\t\t\tsamtools view -h ${bam_name_sort_full} \\\n\t\t\t| samblaster --acceptDupMarks --excludeDups --addMateTags \\\n\t\t\t\t\t\t--ignoreUnmated --maxSplitCount 2 --minNonOverlap 20 \\\n\t\t\t| samtools view -@ ${params.threads} -S -b - > ${bam_bwa_lumpy}\n\t\t\t# Extract the discordant pairedend alignments\n\t\t\tsamtools view -@ ${params.threads} -b -F 1294 ${bam_bwa_lumpy} > ${dis_unsorted_bam}\n\t\t\"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "SAMBLASTER"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/samblaster"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SAMBLASTER",
                "uri": "https://bio.tools/samblaster",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split-read mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool to mark duplicates and extract discordant and split reads from SAM files.",
                "homepage": "https://github.com/GregoryFaust/samblaster"
            }
        ],
        "inputs": [
            "in_lumpy"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "dis_unsorted_bam_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'lumpy'",
            "label 'cpus_8'",
            "publishDir \"${params.outdir}/alignments/mapped_lumpy\", pattern: \"*_alignBWA_lumpy.bam\", mode: 'copy'",
            "cpus params.threads"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_bwa_sort": {
        "name_process": "lumpy_bwa_sort",
        "string_process": "\tprocess lumpy_bwa_sort {\n\t\ttag \"$sample_name\"\n\t\tlabel 'picard'\n\t\tlabel 'cpus_8'\n\n\t\tinput:\n\t\ttuple sample_name, path(bam_bwa_lumpy) from bam_bwa_lumpy_ch\n\n\t\toutput:\n\t\ttuple sample_name, path(\"${bam_bwa_lumpy_sort}.ba[mi]\") into bam_bwa_lumpy_sort_ch\n\n\t\tscript:\n\t\tlog.info \"Mapping Lumpy (bam sort)\"\n\t\tbam_bwa_lumpy_sort = sample_name + \"_alignBWA_lumpySort\"         \n\t\t\"\"\"\n\t\tpicard SortSam I=${bam_bwa_lumpy} O=${bam_bwa_lumpy_sort}.bam \\\n\t\t\tSORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 17,
        "string_script": "\t\tlog.info \"Mapping Lumpy (bam sort)\"\n\t\tbam_bwa_lumpy_sort = sample_name + \"_alignBWA_lumpySort\"         \n\t\t\"\"\"\n\t\tpicard SortSam I=${bam_bwa_lumpy} O=${bam_bwa_lumpy_sort}.bam \\\n\t\t\tSORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true\n\t\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_bwa_lumpy_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_bwa_lumpy_sort_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'picard'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_discordant_sort": {
        "name_process": "lumpy_discordant_sort",
        "string_process": "\tprocess lumpy_discordant_sort {\n\t\ttag \"$sample_name\"\n\t\tlabel 'picard'\n\t\tlabel 'cpus_8'\n\n\t\tinput:\n\t\ttuple sample_name, path(dis_unsorted_bam) from dis_unsorted_bam_ch\n\n\t\toutput:\n\t\ttuple sample_name, path(\"${dis_sorted_bam}.ba[mi]\") into dis_sorted_bam_ch\n\n\t\tscript:\n\t\tlog.info \"Mapping Lumpy (discordant sort)\"\n\t\tdis_sorted_bam = sample_name + \"_discordants.sorted\"         \n\t\t\"\"\"\n\t\tpicard SortSam I=${dis_unsorted_bam} O=${dis_sorted_bam}.bam \\\n\t\t\tSORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 17,
        "string_script": "\t\tlog.info \"Mapping Lumpy (discordant sort)\"\n\t\tdis_sorted_bam = sample_name + \"_discordants.sorted\"         \n\t\t\"\"\"\n\t\tpicard SortSam I=${dis_unsorted_bam} O=${dis_sorted_bam}.bam \\\n\t\t\tSORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true\n\t\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "dis_unsorted_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dis_sorted_bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'picard'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_extract_splits": {
        "name_process": "lumpy_extract_splits",
        "string_process": "\tprocess lumpy_extract_splits {\n\t\ttag \"$sample_name\"\n\t\tlabel 'lumpy'\n\t\tlabel 'cpus_8'\n\n\t\tinput:\n\t\ttuple sample_name, path(bam_bwa_lumpy) from bam_bwa_lumpy_splits_ch\n\n\t\toutput:\n\t\ttuple sample_name, path(\"${split_unsorted_bam}.ba[mi]\") into split_unsorted_bam_ch\n\n\t\tscript:\n\t\tlog.info \"Mapping Lumpy (extract the splitread alignments)\"\n\t\textractSplitReads_BwaMem = \"extractSplitReads_BwaMem\"\n\t\tsplit_unsorted_bam = sample_name + \"_splitters.unsorted\"         \n\t\t\"\"\"\n\t\tsamtools view -h ${bam_bwa_lumpy} \\\n\t\t| ${extractSplitReads_BwaMem} -i stdin \\\n\t\t| samtools view -Sb - > ${split_unsorted_bam}.bam\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 19,
        "string_script": "\t\tlog.info \"Mapping Lumpy (extract the splitread alignments)\"\n\t\textractSplitReads_BwaMem = \"extractSplitReads_BwaMem\"\n\t\tsplit_unsorted_bam = sample_name + \"_splitters.unsorted\"         \n\t\t\"\"\"\n\t\tsamtools view -h ${bam_bwa_lumpy} \\\n\t\t| ${extractSplitReads_BwaMem} -i stdin \\\n\t\t| samtools view -Sb - > ${split_unsorted_bam}.bam\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_bwa_lumpy_splits_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "split_unsorted_bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'lumpy'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_split_bam_sort": {
        "name_process": "lumpy_split_bam_sort",
        "string_process": "\tprocess lumpy_split_bam_sort {\n\t\ttag \"$sample_name\"\n\t\tlabel 'picard'\n\t\tlabel 'cpus_8'\n\t\tpublishDir \"${params.outdir}/alignments/mapped_lumpy\", pattern: \"*_splitters.sorted.ba*\", mode: 'copy'\n\n\t\tinput:\n\t\ttuple sample_name, path(split_unsorted_bam) from split_unsorted_bam_ch\n\n\t\toutput:\n\t\ttuple sample_name, path(\"${split_sorted_bam}.ba[mi]\") into split_sorted_bam_ch\n\n\t\tscript:\n\t\tlog.info \"Mapping Lumpy (sort split reads)\"\n\t\tsplit_sorted_bam = sample_name + \"_splitters.sorted\"         \n\t\t\"\"\"\n\t\tpicard SortSam I=${split_unsorted_bam[0]} O=${split_sorted_bam}.bam \\\n\t\t\tSORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 18,
        "string_script": "\t\tlog.info \"Mapping Lumpy (sort split reads)\"\n\t\tsplit_sorted_bam = sample_name + \"_splitters.sorted\"         \n\t\t\"\"\"\n\t\tpicard SortSam I=${split_unsorted_bam[0]} O=${split_sorted_bam}.bam \\\n\t\t\tSORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true\n\t\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "split_unsorted_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "split_sorted_bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'picard'",
            "label 'cpus_8'",
            "publishDir \"${params.outdir}/alignments/mapped_lumpy\", pattern: \"*_splitters.sorted.ba*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "lumpy_call_sv": {
        "name_process": "lumpy_call_sv",
        "string_process": "\tprocess lumpy_call_sv {\n\t\ttag \"$sample_name\"\n\t\tlabel 'lumpy'\n\t\tlabel 'cpus_8'\n\t\tpublishDir \"${params.outdir}/alignments/mapped_lumpy\", pattern: \"*_discordants.sorted.ba*\", mode: 'move'\n\n\t\t                                                                                                          \n\n\t\tinput:\n\t\t\ttuple sample_name, path(bam_bwa_lumpy_sort) from bam_bwa_lumpy_sort_ch\n\t\t\ttuple sample_name, path(split_sorted_bam) from split_sorted_bam_ch\n\t\t\ttuple sample_name, path(dis_sorted_bam) from dis_sorted_bam_ch\n\t\t\tval abs_outdir from abs_outdir\n\n\t\toutput:\n\t                                               \n\t                                                                                                                     \n\t                                         \n\t\t\tfile lumpy_sort_vcf into reheader_lumpy\n\t\t\t\n\t\t\t\n\n\t\tshell:\n\t\t\tlog.info \"Call SV by Lumpy, sort vcf\"\n\t\t\tpairend_distro = \"pairend_distro.py\"\n\t\t\thisto          = sample_name + \"_alignBWA_lumpySort.lib1.histo\"\n\t\t\tlumpy_vcf      = sample_name + \"_lumpyOut.vcf\"\n\t\t\tlumpy_sort_vcf = sample_name + \"_lumpySort.vcf\"\n\t\t\texclude_regions = \"/ref_data/mm10.gaps.centro_telo.scafold.exclude.bed\"\n\t\t\t'''\n\t\t\tRG_ID=$(samtools view -H !{bam_bwa_lumpy_sort[1]} | grep '^@RG' | sed \"s/.*ID:\\\\([^\\\\t]*\\\\).*/\\\\1/g\")\n\t\t\t#orig: metrics=$(samtools view -r \"${RG_ID}\" !{bam_bwa_lumpy_sort[1]} | tail -n+100000 | !{pairend_distro} -r 150 -X 4 -N 10000 -o !{histo}) 2>&1\n\t\t\tsamtools view -r \"${RG_ID}\" !{bam_bwa_lumpy_sort[1]} | tail -n+100000 > pre_metrics 2>/dev/null\n\t\t\tmetrics=$(cat pre_metrics | !{pairend_distro} -r 150 -X 4 -N 10000 -o !{histo}) 2>/dev/null \\\n\t\t\t\t&& [ $? = 141 ] && echo 'metrics to pairend_distro had exitcode: '$?;\n\t\t\tmean=$(echo \"${metrics}\" | cut -d \" \" -f 1)\n\t\t\tmean=$(echo \"${mean}\"    | cut -d \":\" -f 2)\n\t\t\tstd_dev=$(echo \"${metrics}\" | cut -d \" \" -f 2)\n\t\t\tstd_dev=$(echo \"${std_dev}\" | cut -d \":\" -f 2)\n\t\t\trm pre_metrics;\n\n\t\t\tlumpy \\\n\t\t\t\t-mw 4 \\\n\t\t\t\t-x !{exclude_regions} \\\n\t\t\t\t-pe id:\"${RG_ID}\",bam_file:!{dis_sorted_bam[1]},histo_file:!{histo},mean:\"${mean}\",stdev:\"${std_dev}\",read_length:150,min_non_overlap:150,discordant_z:5,back_distance:10,weight:1,min_mapping_threshold:20 \\\n\t\t\t\t-sr id:\"${RG_ID}\",bam_file:!{split_sorted_bam[1]},back_distance:10,weight:1,min_mapping_threshold:20 \\\n\t\t\t\t> !{lumpy_vcf}\n\n\t\t\tvcfSort.sh !{lumpy_vcf} !{lumpy_sort_vcf}\n\t\t\t'''\n\t}",
        "nb_lignes_process": 49,
        "string_script": "\t\t\tlog.info \"Call SV by Lumpy, sort vcf\"\n\t\t\tpairend_distro = \"pairend_distro.py\"\n\t\t\thisto          = sample_name + \"_alignBWA_lumpySort.lib1.histo\"\n\t\t\tlumpy_vcf      = sample_name + \"_lumpyOut.vcf\"\n\t\t\tlumpy_sort_vcf = sample_name + \"_lumpySort.vcf\"\n\t\t\texclude_regions = \"/ref_data/mm10.gaps.centro_telo.scafold.exclude.bed\"\n\t\t\t'''\n\t\t\tRG_ID=$(samtools view -H !{bam_bwa_lumpy_sort[1]} | grep '^@RG' | sed \"s/.*ID:\\\\([^\\\\t]*\\\\).*/\\\\1/g\")\n\t\t\t#orig: metrics=$(samtools view -r \"${RG_ID}\" !{bam_bwa_lumpy_sort[1]} | tail -n+100000 | !{pairend_distro} -r 150 -X 4 -N 10000 -o !{histo}) 2>&1\n\t\t\tsamtools view -r \"${RG_ID}\" !{bam_bwa_lumpy_sort[1]} | tail -n+100000 > pre_metrics 2>/dev/null\n\t\t\tmetrics=$(cat pre_metrics | !{pairend_distro} -r 150 -X 4 -N 10000 -o !{histo}) 2>/dev/null \\\n\t\t\t\t&& [ $? = 141 ] && echo 'metrics to pairend_distro had exitcode: '$?;\n\t\t\tmean=$(echo \"${metrics}\" | cut -d \" \" -f 1)\n\t\t\tmean=$(echo \"${mean}\"    | cut -d \":\" -f 2)\n\t\t\tstd_dev=$(echo \"${metrics}\" | cut -d \" \" -f 2)\n\t\t\tstd_dev=$(echo \"${std_dev}\" | cut -d \":\" -f 2)\n\t\t\trm pre_metrics;\n\n\t\t\tlumpy \\\n\t\t\t\t-mw 4 \\\n\t\t\t\t-x !{exclude_regions} \\\n\t\t\t\t-pe id:\"${RG_ID}\",bam_file:!{dis_sorted_bam[1]},histo_file:!{histo},mean:\"${mean}\",stdev:\"${std_dev}\",read_length:150,min_non_overlap:150,discordant_z:5,back_distance:10,weight:1,min_mapping_threshold:20 \\\n\t\t\t\t-sr id:\"${RG_ID}\",bam_file:!{split_sorted_bam[1]},back_distance:10,weight:1,min_mapping_threshold:20 \\\n\t\t\t\t> !{lumpy_vcf}\n\n\t\t\tvcfSort.sh !{lumpy_vcf} !{lumpy_sort_vcf}\n\t\t\t'''",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "HIstome",
            "SAMtools",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/histome",
            "https://bio.tools/samtools",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "HIstome",
                "uri": "https://bio.tools/histome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "Protein modifications"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Human biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0821",
                            "term": "Enzymes"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "Protein post-translational modification"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "PTMs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "Post-translational modifications"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Humans"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0821",
                            "term": "Enzymology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3645",
                                    "term": "PTM identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3755",
                                    "term": "PTM localisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3755",
                                    "term": "Site localisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3755",
                                    "term": "PTM scoring"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Post-translational modification analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Protein post-translation modification site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Post-translational modification site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "PTM site analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0417",
                                    "term": "Post-translation modification site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A browsable, manually curated, and relational database of human histone proteins and histone modifying enzymes. It contains 55 human histone proteins, 106 distinct sites of their post-translational modifications (PTMs) and 152 histone-modifying enzymes. Entries have been grouped into 5 types of histones, 8 types of post-translational modifications and 14 types of enzymes that catalyze addition and removal of these modifications.",
                "homepage": "http://www.iiserpune.ac.in/~coee/histome/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "bam_bwa_lumpy_sort_ch",
            "split_sorted_bam_ch",
            "dis_sorted_bam_ch",
            "abs_outdir"
        ],
        "nb_inputs": 4,
        "outputs": [
            "reheader_lumpy"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'lumpy'",
            "label 'cpus_8'",
            "publishDir \"${params.outdir}/alignments/mapped_lumpy\", pattern: \"*_discordants.sorted.ba*\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "reheader_lumpy": {
        "name_process": "reheader_lumpy",
        "string_process": "\tprocess reheader_lumpy {\n\t\ttag \"$sample_name\"\n\t\tlabel 'bcftools'\n\t\tlabel 'tiny_job'\n\t\tpublishDir \"${params.outdir}/lumpySVOut\", pattern: \"*_lumpySort.vcf\", mode: 'move'\n\n\t\tinput:\n\t\t\tval abs_outdir from abs_outdir\n\t\t\tval sample_name from params.names\n\t\t\tfile \"lumpySort.vcf\" from reheader_lumpy\n\t\t\n\t\toutput:\n\t\t\tpath(\"${sample_name}_lumpySort.vcf\")\n\t\t\tpath(\"vcf_path\") into vcf_lumpy\n\t\t\n\t\tscript:\n\t\t\tlog.info \"Reheading lumpy SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_lumpy\\n\" > rehead_lumpy.txt\n\t\t\tbcftools reheader --samples rehead_lumpy.txt \\\n\t\t\t\t-o ${sample_name}_lumpySort.vcf \\\n\t\t\t\tlumpySort.vcf\n\t\t\techo ${abs_outdir}/lumpySVOut/${sample_name}_lumpySort.vcf > vcf_path # for later merging\n\t\t\t\"\"\"\n\t}",
        "nb_lignes_process": 23,
        "string_script": "\t\t\tlog.info \"Reheading lumpy SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_lumpy\\n\" > rehead_lumpy.txt\n\t\t\tbcftools reheader --samples rehead_lumpy.txt \\\n\t\t\t\t-o ${sample_name}_lumpySort.vcf \\\n\t\t\t\tlumpySort.vcf\n\t\t\techo ${abs_outdir}/lumpySVOut/${sample_name}_lumpySort.vcf > vcf_path # for later merging\n\t\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "abs_outdir",
            "params",
            "reheader_lumpy"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcf_lumpy"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'bcftools'",
            "label 'tiny_job'",
            "publishDir \"${params.outdir}/lumpySVOut\", pattern: \"*_lumpySort.vcf\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "breakdancer_calling_sv": {
        "name_process": "breakdancer_calling_sv",
        "string_process": "\tprocess breakdancer_calling_sv {\n    tag \"$sample_name\"\n    label 'breakdancer'\n\tlabel 'cpus_8'\n\n    input:\n\t\ttuple sample_name, bam_input, bam_index from in_brkdncr\n\t\tval abs_outdir from abs_outdir\n\n    output:\n\t\tfile breakdancer_sv_out into ch_breakdancer_sv\n\n    script:\n\t\tbreakdancer_config   = sample_name + \"_config\"\n\t\tbreakdancer_sv_out   = sample_name + \"_BreakDancer-SV\"\n\n\t\tlog.info \"Calling BreakDancer SV\"\n\t\t\"\"\"\n\t\tbam2cfg.pl ${bam_input} > ${breakdancer_config}\n\t\tbreakdancer-max -r 5 -s 50 -h ${breakdancer_config} > ${breakdancer_sv_out}\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 20,
        "string_script": "\t\tbreakdancer_config   = sample_name + \"_config\"\n\t\tbreakdancer_sv_out   = sample_name + \"_BreakDancer-SV\"\n\n\t\tlog.info \"Calling BreakDancer SV\"\n\t\t\"\"\"\n\t\tbam2cfg.pl ${bam_input} > ${breakdancer_config}\n\t\tbreakdancer-max -r 5 -s 50 -h ${breakdancer_config} > ${breakdancer_sv_out}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_brkdncr",
            "abs_outdir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_breakdancer_sv"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'breakdancer'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "breakdancer_sv_to_vcf": {
        "name_process": "breakdancer_sv_to_vcf",
        "string_process": "\tprocess breakdancer_sv_to_vcf {\n    tag \"$sample_name\"\n    label 'python'\n\tlabel 'cpus_8'\n\n    input:\n\t\ttuple sample_name, bam_input, bam_index from in_brkdncr\n\t\tval abs_outdir from abs_outdir\n\t\tfile breakdancer_sv_out from ch_breakdancer_sv\n\n    output:\n\t\tfile breakdancer_sort_vcf into reheader_breakdancer\n\n    script:\n\t\tbreakdancer_2_vcf    = sample_name + \"_BreakDancer2VCF.vcf\"\n\t\tbreakdancer_sort_vcf = sample_name + \"_BreakDancerSortVCF.vcf\"\n\n\t\tlog.info \"Converting BreakDancer SV calls to VCF\"\n\t\t\"\"\"\n\n\t\tbreakdancer2vcfHeader.py -i ${breakdancer_sv_out} -o ${breakdancer_2_vcf}\n\t\tvcfSort.sh ${breakdancer_2_vcf} ${breakdancer_sort_vcf}\n\t\t\"\"\"\n\t}",
        "nb_lignes_process": 22,
        "string_script": "\t\tbreakdancer_2_vcf    = sample_name + \"_BreakDancer2VCF.vcf\"\n\t\tbreakdancer_sort_vcf = sample_name + \"_BreakDancerSortVCF.vcf\"\n\n\t\tlog.info \"Converting BreakDancer SV calls to VCF\"\n\t\t\"\"\"\n\n\t\tbreakdancer2vcfHeader.py -i ${breakdancer_sv_out} -o ${breakdancer_2_vcf}\n\t\tvcfSort.sh ${breakdancer_2_vcf} ${breakdancer_sort_vcf}\n\t\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_brkdncr",
            "abs_outdir",
            "ch_breakdancer_sv"
        ],
        "nb_inputs": 3,
        "outputs": [
            "reheader_breakdancer"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'python'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "reheader_breakdancer": {
        "name_process": "reheader_breakdancer",
        "string_process": "\tprocess reheader_breakdancer {\n\t\ttag \"$sample_name\"\n\t\tlabel 'bcftools'\n\t\tlabel 'tiny_job'\n\t\tpublishDir \"${params.outdir}/BreakDancerSVOut\", pattern: \"*_BreakDancerSortVCF.vcf\", mode: 'move'\n\n\t\tinput:\n\t\t\tval abs_outdir from abs_outdir\n\t\t\tval sample_name from params.names\n\t\t\tfile \"BreakDancerSortVCF.vcf\" from reheader_breakdancer\n\t\t\n\t\toutput:\n\t\t\tpath(\"${sample_name}_BreakDancerSortVCF.vcf\")\n\t\t\tpath(\"vcf_path\") into vcf_breakdancer\n\t\t\n\t\tscript:\n\t\t\tlog.info \"Reheading Breakdancer SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_breakdancer\\n\" > rehead_breakdancer.txt\n\t\t\tbcftools reheader --samples rehead_breakdancer.txt \\\n\t\t\t\t-o ${sample_name}_BreakDancerSortVCF.vcf \\\n\t\t\t\tBreakDancerSortVCF.vcf\n\t\t\techo ${abs_outdir}/BreakDancerSVOut/${sample_name}_BreakDancerSortVCF.vcf > vcf_path # for later merging\n\t\t\t\"\"\"\n\t}",
        "nb_lignes_process": 23,
        "string_script": "\t\t\tlog.info \"Reheading Breakdancer SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_breakdancer\\n\" > rehead_breakdancer.txt\n\t\t\tbcftools reheader --samples rehead_breakdancer.txt \\\n\t\t\t\t-o ${sample_name}_BreakDancerSortVCF.vcf \\\n\t\t\t\tBreakDancerSortVCF.vcf\n\t\t\techo ${abs_outdir}/BreakDancerSVOut/${sample_name}_BreakDancerSortVCF.vcf > vcf_path # for later merging\n\t\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "abs_outdir",
            "params",
            "reheader_breakdancer"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcf_breakdancer"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'bcftools'",
            "label 'tiny_job'",
            "publishDir \"${params.outdir}/BreakDancerSVOut\", pattern: \"*_BreakDancerSortVCF.vcf\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "manta_calling_sv": {
        "name_process": "manta_calling_sv",
        "string_process": "\tprocess manta_calling_sv {\n\t\ttag \"$sample_name\"\n\t\tlabel 'manta'\n\t\tlabel 'cpus_8'\n\t\t\n\t\tpublishDir \"${params.outdir}/temps\", pattern: \"mantaSVOut\", enabled: params.keep_intermediate\n\t\tcpus params.threads\n\n\t\tinput:\n\t\t\ttuple sample_name, bam_input, bam_index from in_manta\n\t\t\tfile fasta from ch_fasta\n\t\t\tfile fastfai from fasta_fai_ch\n\t\t\tval abs_outdir from abs_outdir\n\n\t\toutput:\n\t\t\tfile \"candidateSV.vcf\" into reheader_manta\n\n\t\tscript:\n\t\t\tlog.info \"Calling Manta SV\"\n\t\t\t\"\"\"\n\t\t\t/usr/local/bin/configManta.py \\\n\t\t\t\t--runDir mantaSVOut \\\n\t\t\t\t--bam ${bam_input} \\\n\t\t\t\t--referenceFasta ${fasta}\n\t\t\t./mantaSVOut/runWorkflow.py -m local -j ${params.threads}\n\t\t\tmv mantaSVOut/results/variants/candidateSV.vcf.gz ./\n\t\t\tgunzip candidateSV.vcf.gz\n\t\t\t\"\"\"\n\t}",
        "nb_lignes_process": 27,
        "string_script": "\t\t\tlog.info \"Calling Manta SV\"\n\t\t\t\"\"\"\n\t\t\t/usr/local/bin/configManta.py \\\n\t\t\t\t--runDir mantaSVOut \\\n\t\t\t\t--bam ${bam_input} \\\n\t\t\t\t--referenceFasta ${fasta}\n\t\t\t./mantaSVOut/runWorkflow.py -m local -j ${params.threads}\n\t\t\tmv mantaSVOut/results/variants/candidateSV.vcf.gz ./\n\t\t\tgunzip candidateSV.vcf.gz\n\t\t\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_manta",
            "ch_fasta",
            "fasta_fai_ch",
            "abs_outdir"
        ],
        "nb_inputs": 4,
        "outputs": [
            "reheader_manta"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'manta'",
            "label 'cpus_8'",
            "publishDir \"${params.outdir}/temps\", pattern: \"mantaSVOut\", enabled: params.keep_intermediate",
            "cpus params.threads"
        ],
        "when": "",
        "stub": ""
    },
    "reheader_manta": {
        "name_process": "reheader_manta",
        "string_process": "\tprocess reheader_manta {\n\t\ttag \"$sample_name\"\n\t\tlabel 'bcftools'\n\t\tlabel 'tiny_job'\n\t\tpublishDir \"${params.outdir}/mantaSVout\", pattern: \"${sample_name}_candidateSV.vcf\", mode: 'move'\n\n\t\tinput:\n\t\t\tval abs_outdir from abs_outdir\n\t\t\tval sample_name from params.names\n\t\t\tfile \"candidateSV.vcf\" from reheader_manta\n\t\t\n\t\toutput:\n\t\t\tpath(\"${sample_name}_candidateSV.vcf\")\n\t\t\tpath(\"vcf_path\") into vcf_manta\n\t\t\n\t\tscript:\n\t\t\tlog.info \"Reheading Manta SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_manta\\n\" > rehead_manta.txt\n\t\t\tmv candidateSV.vcf ${sample_name}_candidateSV.vcf\n\t\t\techo ${abs_outdir}/mantaSVout/${sample_name}_candidateSV.vcf > vcf_path # for later merging\n\t\t\t\"\"\"\n\t}",
        "nb_lignes_process": 21,
        "string_script": "\t\t\tlog.info \"Reheading Manta SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_manta\\n\" > rehead_manta.txt\n\t\t\tmv candidateSV.vcf ${sample_name}_candidateSV.vcf\n\t\t\techo ${abs_outdir}/mantaSVout/${sample_name}_candidateSV.vcf > vcf_path # for later merging\n\t\t\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "abs_outdir",
            "params",
            "reheader_manta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcf_manta"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'bcftools'",
            "label 'tiny_job'",
            "publishDir \"${params.outdir}/mantaSVout\", pattern: \"${sample_name}_candidateSV.vcf\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "delly_calling_sv": {
        "name_process": "delly_calling_sv",
        "string_process": "\tprocess delly_calling_sv {\n    tag \"$sample_name\"\n    label 'delly'\n\tlabel 'cpus_8'\n\n    input:\n\t\ttuple sample_name, bam_input, bam_index from in_delly\n\t\tfile fasta from ch_fasta\n\t\tfile fastfai from fasta_fai_ch\n    \n    output:\n    \ttuple sample_name, path(delly_bcf) into delly_bcf_out\n\n    script:\n    \tdelly_bcf = sample_name + \"_Dellybcf.bcf\"\n    \tlog.info \"Calling Delly SV\"\n\t\texclude_regions = \"/ref_data/mouse.mm10.excl.tsv\"\n    \"\"\"\n    delly call \\\n          -q 40 \\\n          -x ${exclude_regions} \\\n          -s 500 \\\n          -o ${delly_bcf} \\\n          -g ${fasta} ${bam_input}\n    \"\"\"\n\t}",
        "nb_lignes_process": 24,
        "string_script": "    \tdelly_bcf = sample_name + \"_Dellybcf.bcf\"\n    \tlog.info \"Calling Delly SV\"\n\t\texclude_regions = \"/ref_data/mouse.mm10.excl.tsv\"\n    \"\"\"\n    delly call \\\n          -q 40 \\\n          -x ${exclude_regions} \\\n          -s 500 \\\n          -o ${delly_bcf} \\\n          -g ${fasta} ${bam_input}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Delly2"
        ],
        "tools_url": [
            "https://bio.tools/delly2"
        ],
        "tools_dico": [
            {
                "name": "Delly2",
                "uri": "https://bio.tools/delly2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3796",
                            "term": "Population genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2977",
                                "term": "Nucleic acid sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Integrated structural variant prediction method that can discover, genotype and visualize deletions, tandem duplications, inversions and translocations at single-nucleotide resolution in short-read massively parallel sequencing data. It uses paired-ends and split-reads to sensitively and accurately delineate genomic rearrangements throughout the genome. Structural variants can be visualized using Delly-maze and Delly-suave.",
                "homepage": "https://github.com/dellytools/delly"
            }
        ],
        "inputs": [
            "in_delly",
            "ch_fasta",
            "fasta_fai_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "delly_bcf_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'delly'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "delly_bcf2vcf_sort": {
        "name_process": "delly_bcf2vcf_sort",
        "string_process": "\tprocess delly_bcf2vcf_sort {\n\t\ttag \"$sample_name\"\n\t\tlabel 'bcftools'\n\t\tlabel 'cpus_8'\t\t\n\n\t\tinput:\n\t\t\ttuple sample_name, path(delly_bcf) from delly_bcf_out\n\t\t\tval abs_outdir from abs_outdir\n\n\t\toutput:\n\t\t\tfile \"${delly_sort_vcf}\" into reheader_delly\n\n\t\tscript:\n\t\t\tdelly_vcf      = sample_name + \"_DellyVCF.vcf\"\n\t\t\tdelly_sort_vcf = sample_name + \"_dellySort.vcf\"\n\n\t\t\tlog.info \"Delly bcf2vcf to Sorted VCF\"\n\t\t\t\"\"\"\n\t\t\tbcftools view ${delly_bcf} > ${delly_vcf}\n\t\t\tvcfSort.sh ${delly_vcf} ${delly_sort_vcf}\n\t\t\t\"\"\"\n\t}",
        "nb_lignes_process": 20,
        "string_script": "\t\t\tdelly_vcf      = sample_name + \"_DellyVCF.vcf\"\n\t\t\tdelly_sort_vcf = sample_name + \"_dellySort.vcf\"\n\n\t\t\tlog.info \"Delly bcf2vcf to Sorted VCF\"\n\t\t\t\"\"\"\n\t\t\tbcftools view ${delly_bcf} > ${delly_vcf}\n\t\t\tvcfSort.sh ${delly_vcf} ${delly_sort_vcf}\n\t\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "delly_bcf_out",
            "abs_outdir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "reheader_delly"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'bcftools'",
            "label 'cpus_8'"
        ],
        "when": "",
        "stub": ""
    },
    "reheader_delly": {
        "name_process": "reheader_delly",
        "string_process": "\tprocess reheader_delly {\n\t\ttag \"$sample_name\"\n\t\tlabel 'bcftools'\n\t\tlabel 'tiny_job'\n\t\tpublishDir \"${params.outdir}/DellySVOut\", pattern: \"*_dellySort.vcf\", mode: 'move'\n\n\t\tinput:\n\t\t\tval abs_outdir from abs_outdir\n\t\t\tval sample_name from params.names\n\t\t\tfile \"dellySort.vcf\" from reheader_delly\n\t\t\n\t\toutput:\n\t\t\tpath(\"${sample_name}_dellySort.vcf\")\n\t\t\tpath(\"vcf_path\") into vcf_delly\n\t\t\n\t\tscript:\n\t\t\tlog.info \"Reheading Delly SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_delly\\n\" > rehead_delly.txt\n\t\t\tbcftools reheader --samples rehead_delly.txt \\\n\t\t\t\t-o ${sample_name}_dellySort.vcf \\\n\t\t\t\tdellySort.vcf\n\t\t\techo ${abs_outdir}/DellySVOut/${sample_name}_dellySort.vcf > vcf_path # for later merging\n\t\t\t\"\"\"\n\t}",
        "nb_lignes_process": 23,
        "string_script": "\t\t\tlog.info \"Reheading Delly SV VCF\"\n\t\t\t\"\"\"\n\t\t\tprintf \"${sample_name}_delly\\n\" > rehead_delly.txt\n\t\t\tbcftools reheader --samples rehead_delly.txt \\\n\t\t\t\t-o ${sample_name}_dellySort.vcf \\\n\t\t\t\tdellySort.vcf\n\t\t\techo ${abs_outdir}/DellySVOut/${sample_name}_dellySort.vcf > vcf_path # for later merging\n\t\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "abs_outdir",
            "params",
            "reheader_delly"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcf_delly"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "tag \"$sample_name\"",
            "label 'bcftools'",
            "label 'tiny_job'",
            "publishDir \"${params.outdir}/DellySVOut\", pattern: \"*_dellySort.vcf\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "survivor": {
        "name_process": "survivor",
        "string_process": "\nprocess survivor{\n\tlabel 'long_himem'\n\tlabel 'survivor'\n\tinput:\n\t\tpath(vcf_paths) from sample_vcfs_paths\n\t\tval sample_name from params.names\n\t\tval surv_dist from params.surv_dist\n\t\tval surv_supp from params.surv_supp\n\t\tval surv_type from params.surv_type\n\t\tval surv_strand from params.surv_strand\n\t\tval surv_min from params.surv_min\n\toutput:\n\t\ttuple sample_name, path(\"${sample_name}_mergedCall.BDLM.vcf\") into ( vcf_merged, vcf_mrg_annot )\n\tscript:\n\t\"\"\"\n\tSURVIVOR merge ${vcf_paths} ${surv_dist} ${surv_supp} ${surv_type} ${surv_strand} 0 ${surv_min} ${sample_name}_mergedCall.BDLM.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\tSURVIVOR merge ${vcf_paths} ${surv_dist} ${surv_supp} ${surv_type} ${surv_strand} 0 ${surv_min} ${sample_name}_mergedCall.BDLM.vcf\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_vcfs_paths",
            "params",
            "params",
            "params",
            "params",
            "params",
            "params"
        ],
        "nb_inputs": 7,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'long_himem'",
            "label 'survivor'"
        ],
        "when": "",
        "stub": ""
    },
    "annotate_sv": {
        "name_process": "annotate_sv",
        "string_process": "\nprocess annotate_sv{\n\tlabel 'mid_job'\n\tpublishDir params.outdir, mode:'copy'\n\tinput:\n\t\ttuple sample_name, path(in_vcf) from vcf_merged_1\n\t\tval seqmode from params.seqmode\n\toutput:\n\t\tfile \"${sample_name}.merged.overlap.annotated.txt\" into ch_annot\n\tscript:\n\t\"\"\"\n\t/usr/bin/env bash ${projectDir}/bin/surv_annot.sh ${sample_name} ${in_vcf} ${seqmode}\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\t/usr/bin/env bash ${projectDir}/bin/surv_annot.sh ${sample_name} ${in_vcf} ${seqmode}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "vcf_merged_1",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_annot"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'mid_job'",
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_sv": {
        "name_process": "summarize_sv",
        "string_process": "\nprocess summarize_sv{\n\tlabel 'mid_job'\n\tlabel 'pyvcf'\n\tinput:\n\t\ttuple sample_name, path(in_vcf) from vcf_merged_2\n\toutput:\n\t\tfile \"${sample_name}.survivor_summary.csv\" into ch_summary\n\tscript:\n\t\"\"\"\n\t/usr/bin/env python ${projectDir}/bin/sv_to_table.py -v ${in_vcf} -o ${sample_name}.survivor_summary.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\t/usr/bin/env python ${projectDir}/bin/sv_to_table.py -v ${in_vcf} -o ${sample_name}.survivor_summary.csv\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "vcf_merged_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_summary"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'mid_job'",
            "label 'pyvcf'"
        ],
        "when": "",
        "stub": ""
    },
    "prep_beds": {
        "name_process": "prep_beds",
        "string_process": "\nprocess prep_beds{\n\tlabel 'short_himem'\n\tlabel 'tidyverse'\n\tinput:\n\t\tfile annot from ch_annot\n\t\tfile summary from ch_summary_1\n\t\tval name_string from params.names\n\toutput:\n\t\tfile \"${name_string}.ins.bed\" into ch_ins\n\t\tfile \"${name_string}.inv.bed\" into ch_inv\n\t\tfile \"${name_string}.del.bed\" into ch_del\n\t\tfile \"${name_string}.dup.bed\" into ch_dup\n\t\tfile \"${name_string}.tra.bed\" into ch_tra\n\tscript:\n\t\"\"\"\n\t/usr/bin/env Rscript ${projectDir}/bin/surv_annot_process.R ${annot} ${summary} ${name_string}\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\t/usr/bin/env Rscript ${projectDir}/bin/surv_annot_process.R ${annot} ${summary} ${name_string}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "ch_annot",
            "ch_summary_1",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_ins",
            "ch_inv",
            "ch_del",
            "ch_dup",
            "ch_tra"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'short_himem'",
            "label 'tidyverse'"
        ],
        "when": "",
        "stub": ""
    },
    "intersect_beds": {
        "name_process": "intersect_beds",
        "string_process": "\nprocess intersect_beds{\n\tlabel 'short_himem'\n\tlabel 'bedtools'\n\tinput:\n\t\tval name_string from params.names\n\t\tfile \"ins.bed\" from ch_ins_1\n\t\tfile \"inv.bed\" from ch_inv_1\n\t\tfile \"del.bed\" from ch_del_1\n\t\tfile \"dup.bed\" from ch_dup_1\n\t\tfile \"tra.bed\" from ch_tra_1\n\toutput:\n\t\tfile \"${name_string}.ins.s.bed\" into ch_ins_s\n\t\tfile \"${name_string}.ins.e.bed\" into ch_ins_e\n\t\tfile \"${name_string}.del.s.bed\" into ch_del_s\n\t\tfile \"${name_string}.del.s.bed\" into ch_del_e\n\t\tfile \"${name_string}.inv.e.bed\" into ch_inv_e\n\t\tfile \"${name_string}.tra.e.bed\" into ch_tra_e\n\t\tfile \"${name_string}.dup.e.bed\" into ch_dup_e\n\t\tfile \"${name_string}.ins.genes.bed\" into ch_ins_genes\n\t\tfile \"${name_string}.del.genes.bed\" into ch_del_genes\n\t\tfile \"${name_string}.inv.genes.bed\" into ch_inv_genes\n\t\tfile \"${name_string}.dup.genes.bed\" into ch_dup_genes\n\t\tfile \"${name_string}.tra.genes.bed\" into ch_tra_genes\n\t\tfile \"${name_string}.ins.exons.bed\" into ch_ins_exons\n\t\tfile \"${name_string}.del.exons.bed\" into ch_del_exons\n\t\tfile \"${name_string}.inv.exons.bed\" into ch_inv_exons\n\t\tfile \"${name_string}.dup.exons.bed\" into ch_dup_exons\n\t\tfile \"${name_string}.tra.exons.bed\" into ch_tra_exons\n\tscript:\n\t\"\"\"\n\t/usr/bin/env bash ${projectDir}/bin/intersect_beds.sh ${name_string}\n\t\"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "\t\"\"\"\n\t/usr/bin/env bash ${projectDir}/bin/intersect_beds.sh ${name_string}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "params",
            "ch_ins_1",
            "ch_inv_1",
            "ch_del_1",
            "ch_dup_1",
            "ch_tra_1"
        ],
        "nb_inputs": 6,
        "outputs": [
            "ch_ins_s",
            "ch_ins_e",
            "ch_del_s",
            "ch_del_e",
            "ch_inv_e",
            "ch_tra_e",
            "ch_dup_e",
            "ch_ins_genes",
            "ch_del_genes",
            "ch_inv_genes",
            "ch_dup_genes",
            "ch_tra_genes",
            "ch_ins_exons",
            "ch_del_exons",
            "ch_inv_exons",
            "ch_dup_exons",
            "ch_tra_exons"
        ],
        "nb_outputs": 17,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "label 'short_himem'",
            "label 'bedtools'"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_intersections": {
        "name_process": "summarize_intersections",
        "string_process": "\nprocess summarize_intersections{\n\tpublishDir params.outdir, mode:'copy'\n\tlabel 'short_himem'\n\tlabel 'tidyverse'\n\tinput:\n\t\tval name_string from params.names\n\t\tfile \"summary.csv\" from ch_summary_2\n\t\tfile \"ins.bed\" from ch_ins_2\n\t\tfile \"dup.bed\" from ch_dup_2\n\t\tfile \"tra.bed\" from ch_tra_2\n\t\tfile \"inv.bed\" from ch_inv_2\n\t\tfile \"del.bed\" from ch_del_2\n\t\tfile \"ins.s.bed\" from ch_ins_s\n\t\tfile \"ins.e.bed\" from ch_ins_e\n\t\tfile \"del.s.bed\" from ch_del_s\n\t\tfile \"del.e.bed\" from ch_del_e\n\t\tfile \"dup.e.bed\" from ch_dup_e\n\t\tfile \"inv.e.bed\" from ch_inv_e\n\t\tfile \"tra.e.bed\" from ch_tra_e\n\t\tfile \"ins.genes.bed\" from ch_ins_genes\n\t\tfile \"del.genes.bed\" from ch_del_genes\n\t\tfile \"dup.genes.bed\" from ch_dup_genes\n\t\tfile \"tra.genes.bed\" from ch_tra_genes\n\t\tfile \"inv.genes.bed\" from ch_inv_genes\n\t\tfile \"ins.exons.bed\" from ch_ins_exons_1\n\t\tfile \"del.exons.bed\" from ch_del_exons_1\n\t\tfile \"dup.exons.bed\" from ch_dup_exons_1\n\t\tfile \"tra.exons.bed\" from ch_tra_exons_1\n\t\tfile \"inv.exons.bed\" from ch_inv_exons_1\n\toutput:\n\t\tfile \"${name_string}.survivor_results.csv\"\n\tscript:\n\t\"\"\"\n\t/usr/bin/env Rscript ${projectDir}/bin/post_filt.R\n\tmv survivor_results.csv ${name_string}.survivor_results.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "\t\"\"\"\n\t/usr/bin/env Rscript ${projectDir}/bin/post_filt.R\n\tmv survivor_results.csv ${name_string}.survivor_results.csv\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "params",
            "ch_summary_2",
            "ch_ins_2",
            "ch_dup_2",
            "ch_tra_2",
            "ch_inv_2",
            "ch_del_2",
            "ch_ins_s",
            "ch_ins_e",
            "ch_del_s",
            "ch_del_e",
            "ch_dup_e",
            "ch_inv_e",
            "ch_tra_e",
            "ch_ins_genes",
            "ch_del_genes",
            "ch_dup_genes",
            "ch_tra_genes",
            "ch_inv_genes",
            "ch_ins_exons_1",
            "ch_del_exons_1",
            "ch_dup_exons_1",
            "ch_tra_exons_1",
            "ch_inv_exons_1"
        ],
        "nb_inputs": 24,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'short_himem'",
            "label 'tidyverse'"
        ],
        "when": "",
        "stub": ""
    },
    "annotate_exons": {
        "name_process": "annotate_exons",
        "string_process": "\nprocess annotate_exons{\npublishDir params.outdir, mode:'copy'\nlabel 'midjob'\nlabel 'pysam'\ninput:\n\ttuple sample_name, path(in_vcf) from vcf_merged_3\n\tfile \"ins.exons.bed\" from ch_ins_exons_2\n\tfile \"del.exons.bed\" from ch_del_exons_2\n\tfile \"dup.exons.bed\" from ch_dup_exons_2\n\tfile \"tra.exons.bed\" from ch_tra_exons_2\n\tfile \"inv.exons.bed\" from ch_inv_exons_2\noutput:\n\tfile \"${sample_name}.mergedCalls.InExon.BDLM.vcf\"\nscript:\n\"\"\"\n/usr/bin/env python ${projectDir}/bin/annot_vcf_with_exon.py -v ${in_vcf} \\\n\t-i ins.exons.bed -d del.exons.bed \\\n\t-u dup.exons.bed -t tra.exons.bed -n inv.exons.bed \\\n\t-o ${sample_name}.mergedCalls.InExon.BDLM.vcf\n\"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n/usr/bin/env python ${projectDir}/bin/annot_vcf_with_exon.py -v ${in_vcf} \\\n\t-i ins.exons.bed -d del.exons.bed \\\n\t-u dup.exons.bed -t tra.exons.bed -n inv.exons.bed \\\n\t-o ${sample_name}.mergedCalls.InExon.BDLM.vcf\n\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "vcf_merged_3",
            "ch_ins_exons_2",
            "ch_del_exons_2",
            "ch_dup_exons_2",
            "ch_tra_exons_2",
            "ch_inv_exons_2"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TheJacksonLaboratory__mmrSVD",
        "directive": [
            "publishDir params.outdir, mode:'copy'",
            "label 'midjob'",
            "label 'pysam'"
        ],
        "when": "",
        "stub": ""
    }
}
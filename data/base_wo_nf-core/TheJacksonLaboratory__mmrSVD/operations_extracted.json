{
    "OPERATION_1": {
        "string": "ch_fasta = Channel.value(file(params.fasta))",
        "origin": [],
        "gives": [
            [
                "ch_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_fastq1 = Channel.value(file(params.fastq1))",
        "origin": [],
        "gives": [
            [
                "ch_fastq1",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_fastq2 = Channel.value(file(params.fastq2))",
        "origin": [],
        "gives": [
            [
                "ch_fastq2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_pbsvTandem = Channel.value(file(params.pbsv_tandemrepeats))",
        "origin": [],
        "gives": [
            [
                "ch_pbsvTandem",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_bwa = Channel.value(file(params.bwa))",
        "origin": [],
        "gives": [
            [
                "ch_bwa",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_bam_und = Channel.value(file(params.bam))",
        "origin": [],
        "gives": [
            [
                "ch_bam_und",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "vcf_pbsv_path.concat(\n\tvcf_sniffles_path\n\t)\n\t.collectFile(name: \"sample.vcfs.txt\", sort: false)\n\t.set { sample_vcfs_paths }",
        "origin": [
            [
                "vcf_pbsv_path",
                "P"
            ],
            [
                "vcf_sniffles_path",
                "P"
            ]
        ],
        "gives": [
            [
                "sample_vcfs_paths",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_sample_name_bam_bai.into {\n  \t\tin_brkdncr\n  \t\tin_delly\n  \t\tin_lumpy\n  \t\tin_manta\n\t}",
        "origin": [
            [
                "ch_sample_name_bam_bai",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "vcf_breakdancer.concat(\n\tvcf_delly,\n\tvcf_lumpy,\n\tvcf_manta\n\t)\n\t.collectFile(name: \"sample.vcfs.txt\", sort: false)\n\t.set { sample_vcfs_paths }",
        "origin": [
            [
                "vcf_breakdancer",
                "P"
            ],
            [
                "vcf_delly",
                "P"
            ],
            [
                "vcf_lumpy",
                "P"
            ],
            [
                "vcf_manta",
                "P"
            ]
        ],
        "gives": [
            [
                "sample_vcfs_paths",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "vcf_merged.into{vcf_merged_1; vcf_merged_2; vcf_merged_3}",
        "origin": [
            [
                "vcf_merged",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_merged_1",
                "P"
            ],
            [
                "vcf_merged_2",
                "P"
            ],
            [
                "vcf_merged_3",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_summary.into{ch_summary_1; ch_summary_2}",
        "origin": [
            [
                "ch_summary",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_summary_1",
                "P"
            ],
            [
                "ch_summary_2",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "ch_ins.into{ch_ins_1; ch_ins_2}",
        "origin": [
            [
                "ch_ins",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_ins_1",
                "P"
            ],
            [
                "ch_ins_2",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_inv.into{ch_inv_1; ch_inv_2}",
        "origin": [
            [
                "ch_inv",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_inv_1",
                "P"
            ],
            [
                "ch_inv_2",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "ch_del.into{ch_del_1; ch_del_2}",
        "origin": [
            [
                "ch_del",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_del_1",
                "P"
            ],
            [
                "ch_del_2",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "ch_dup.into{ch_dup_1; ch_dup_2}",
        "origin": [
            [
                "ch_dup",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dup_1",
                "P"
            ],
            [
                "ch_dup_2",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "ch_tra.into{ch_tra_1; ch_tra_2}",
        "origin": [
            [
                "ch_tra",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_tra_1",
                "P"
            ],
            [
                "ch_tra_2",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "ch_ins_exons.into{ch_ins_exons_1; ch_ins_exons_2}",
        "origin": [
            [
                "ch_ins_exons",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_ins_exons_1",
                "P"
            ],
            [
                "ch_ins_exons_2",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "ch_del_exons.into{ch_del_exons_1; ch_del_exons_2}",
        "origin": [
            [
                "ch_del_exons",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_del_exons_1",
                "P"
            ],
            [
                "ch_del_exons_2",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ch_inv_exons.into{ch_inv_exons_1; ch_inv_exons_2}",
        "origin": [
            [
                "ch_inv_exons",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_inv_exons_1",
                "P"
            ],
            [
                "ch_inv_exons_2",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "ch_dup_exons.into{ch_dup_exons_1; ch_dup_exons_2}",
        "origin": [
            [
                "ch_dup_exons",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dup_exons_1",
                "P"
            ],
            [
                "ch_dup_exons_2",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "ch_tra_exons.into{ch_tra_exons_1; ch_tra_exons_2}",
        "origin": [
            [
                "ch_tra_exons",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_tra_exons_1",
                "P"
            ],
            [
                "ch_tra_exons_2",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "pbmm2_bam = pbmm2_bam_css",
        "origin": [
            [
                "pbmm2_bam_css",
                "P"
            ]
        ],
        "gives": [
            [
                "pbmm2_bam",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "pbmm2_bam = pbmm2_bam_clr",
        "origin": [
            [
                "pbmm2_bam_clr",
                "P"
            ]
        ],
        "gives": [
            [
                "pbmm2_bam",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "pbsv_svsig = pbsv_svsig_tandem",
        "origin": [
            [
                "pbsv_svsig_tandem",
                "P"
            ]
        ],
        "gives": [
            [
                "pbsv_svsig",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "pbsv_svsig = pbsv_svsig_no_tandem",
        "origin": [
            [
                "pbsv_svsig_no_tandem",
                "P"
            ]
        ],
        "gives": [
            [
                "pbsv_svsig",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "ch_bwa  = bwa_built",
        "origin": [
            [
                "bwa_built",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bwa",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "ch_bam_und = ch_bam_map",
        "origin": [
            [
                "ch_bam_map",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_und",
                "P"
            ]
        ]
    }
}
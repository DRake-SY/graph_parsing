{
    "TBJOIN": {
        "name_process": "TBJOIN",
        "string_process": "process TBJOIN {\n    tag \"${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"Called/*\")\n    path(\"Position_Tables/*\")\n    path(samplesheet_tsv)\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Joint/${params.project}_joint*samples*.{tab,log}\")\n    path(\"Joint/${params.project}_joint*samples*.tab\"), emit: joint_samples\n\n    script:\n    \"\"\"\n    gatk-register ${gatk_jar}\n\n    mkdir Joint\n\n    ${params.mtbseq_path} --step TBjoin \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBjoin \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Joint\n    touch Joint/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5.tab\n    touch Joint/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5.log\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 65,
        "string_script": "    \"\"\"\n    gatk-register ${gatk_jar}\n\n    mkdir Joint\n\n    ${params.mtbseq_path} --step TBjoin \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet_tsv",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBjoin \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Joint\n    touch Joint/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5.tab\n    touch Joint/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5.log\n\n    \"\"\""
    },
    "TBSTATS": {
        "name_process": "TBSTATS",
        "string_process": "process TBSTATS {\n    tag \"${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"Bam/*\")\n    path(\"Position_Tables/*\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Statistics/Mapping_and_Variant_Statistics.tab\")\n\n    script:\n\n    \"\"\"\n    gatk-register ${gatk_jar}\n\n\n    mkdir Statistics\n\n    ${params.mtbseq_path} --step TBstats \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBstats \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Statistics\n    touch Statistics/Mapping_and_Variant_Statistics.tab\n    \"\"\"\n\n}",
        "nb_lignes_process": 51,
        "string_script": "    \"\"\"\n    gatk-register ${gatk_jar}\n\n\n    mkdir Statistics\n\n    ${params.mtbseq_path} --step TBstats \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBstats \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Statistics\n    touch Statistics/Mapping_and_Variant_Statistics.tab\n    \"\"\""
    },
    "RENAME_FILES": {
        "name_process": "RENAME_FILES",
        "string_process": "process RENAME_FILES {\n    tag \"${genomeFileName}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeFileName), path(reads)\n\n    output:\n    path(\"${genomeFileName}_${params.library_name}_R?.fastq.gz\")\n\n    script:\n    \"\"\"\n    echo \"Renaming ${reads} files as per MTBseq requirements.\"\n\n    cp ${reads[0]} ${genomeFileName}_${params.library_name}_R1.fastq.gz\n    cp ${reads[1]} ${genomeFileName}_${params.library_name}_R2.fastq.gz\n    \"\"\"\n\n    stub:\n    \"\"\"\n    echo \"Renaming ${reads} files as per MTBseq requirements.\"\n\n    touch ${genomeFileName}_${params.library_name}_R1.fastq.gz\n    touch ${genomeFileName}_${params.library_name}_R2.fastq.gz\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    echo \"Renaming ${reads} files as per MTBseq requirements.\"\n\n    cp ${reads[0]} ${genomeFileName}_${params.library_name}_R1.fastq.gz\n    cp ${reads[1]} ${genomeFileName}_${params.library_name}_R2.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFileName",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${genomeFileName}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    echo \"Renaming ${reads} files as per MTBseq requirements.\"\n\n    touch ${genomeFileName}_${params.library_name}_R1.fastq.gz\n    touch ${genomeFileName}_${params.library_name}_R2.fastq.gz\n\n    \"\"\""
    },
    "TBFULL": {
        "name_process": "TBFULL",
        "string_process": "process TBFULL {\n    tag \"${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"*\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Called\")\n    path(\"Position_Tables\")\n    path(\"Classification\")\n    path(\"Statistics\")\n    path(\"Called/*_${params.library_name}*gatk_position_variants*.tab\"), emit: position_variants\n    path(\"Position_Tables/*_${params.library_name}*.gatk_position_table.tab\"), emit: position_tables\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    ${params.mtbseq_path} --step TBfull \\\n        --thread ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"\n\n    stub:\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBfull \\\n        --thread ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir GATK_Bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bai\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bamlog\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.grp\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.intervals\n    mkdir Bam\n    mkdir Bam/${genomeFileName}\n    touch Bam/${genomeFileName}_${params.library_name}.bam\n    touch Bam/${genomeFileName}_${params.library_name}.bai\n    touch Bam/${genomeFileName}_${params.library_name}.bamlog\n    mkdir Called\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_uncovered_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_variants_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n    mkdir Mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileuplog\n    mkdir Classification\n    touch Classification/Strain_Classification.tab\n    mkdir Position_Tables\n    touch Position_Tables/${genomeFileName}_${params.library_name}.gatk_position_table.tab\n    mkdir Statistics\n    touch Statistics/Mapping_and_Variant_Statistics.tab\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 91,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    ${params.mtbseq_path} --step TBfull \\\n        --thread ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBfull \\\n        --thread ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir GATK_Bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bai\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bamlog\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.grp\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.intervals\n    mkdir Bam\n    mkdir Bam/${genomeFileName}\n    touch Bam/${genomeFileName}_${params.library_name}.bam\n    touch Bam/${genomeFileName}_${params.library_name}.bai\n    touch Bam/${genomeFileName}_${params.library_name}.bamlog\n    mkdir Called\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_uncovered_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_variants_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n    mkdir Mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileuplog\n    mkdir Classification\n    touch Classification/Strain_Classification.tab\n    mkdir Position_Tables\n    touch Position_Tables/${genomeFileName}_${params.library_name}.gatk_position_table.tab\n    mkdir Statistics\n    touch Statistics/Mapping_and_Variant_Statistics.tab\n\n    \"\"\""
    },
    "TBPILE": {
        "name_process": "TBPILE",
        "string_process": "process TBPILE {\n    tag \"${genomeFileName} - ${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n    stageInMode 'copy'\n\n    input:\n    tuple val(genomeFileName), path(\"GATK_Bam/*\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Mpileup/${genomeFileName}_${params.library_name}*.gatk.{mpileup,mpileuplog}\")\n    tuple val(genomeFileName), path(\"Mpileup/${genomeFileName}_${params.library_name}*.gatk.mpileup\"), emit: mpileup\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n    mkdir Mpileup\n\n    ${params.mtbseq_path} --step TBpile \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBpile \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileuplog\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 54,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n    mkdir Mpileup\n\n    ${params.mtbseq_path} --step TBpile \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFileName",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${genomeFileName} - ${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBpile \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileup\n    touch Mpileup/${genomeFileName}_${params.library_name}.gatk.mpileuplog\n\n    \"\"\""
    },
    "TBAMEND": {
        "name_process": "TBAMEND",
        "string_process": "process TBAMEND {\n    tag \"${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"Joint/*\")\n    path(samplesheet_tsv)\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Amend/*\"), emit: samples_amended\n\n    script:\n\n    \"\"\"\n    gatk-register ${gatk_jar}\n\n    mkdir Amend\n\n    ${params.mtbseq_path} --step TBamend \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"\n    stub:\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBamend \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}  \"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Amend\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended.tab\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo.tab\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo.plainIDs.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12.tab\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12.plainIDs.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12_removed.tab\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 73,
        "string_script": "    \"\"\"\n    gatk-register ${gatk_jar}\n\n    mkdir Amend\n\n    ${params.mtbseq_path} --step TBamend \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet_tsv",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBamend \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --unambig ${params.unambig} \\\n        --window ${params.window} \\\n        --distance ${params.distance} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}  \"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Amend\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended.tab\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo.tab\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo.plainIDs.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12.tab\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12.plainIDs.fasta\n    touch Amend/${params.project}_joint_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_samples5_amended_u95_phylo_w12_removed.tab\n\n    \"\"\""
    },
    "TBREFINE": {
        "name_process": "TBREFINE",
        "string_process": "process TBREFINE {\n    tag \"${genomeFileName} - ${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeFileName), path(\"Bam/\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    tuple val(genomeFileName), path(\"GATK_Bam/${genomeFileName}_${params.library_name}*gatk.{bam,bai,bamlog,grp,intervals}\"), emit: gatk_bam\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir GATK_Bam\n\n    ${params.mtbseq_path} --step TBrefine \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBrefine \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir GATK_Bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bai\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bamlog\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.grp\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.intervals\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir GATK_Bam\n\n    ${params.mtbseq_path} --step TBrefine \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFileName",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${genomeFileName} - ${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBrefine \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir GATK_Bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bam\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bai\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.bamlog\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.grp\n    touch GATK_Bam/${genomeFileName}_${params.library_name}.gatk.intervals\n    \"\"\""
    },
    "TBLIST": {
        "name_process": "TBLIST",
        "string_process": "process TBLIST {\n    tag \"${genomeFileName} - ${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeFileName), path(\"Mpileup/${genomeFileName}_${params.library_name}*.gatk.mpileup\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Position_Tables/${genomeFileName}_${params.library_name}*.gatk_position_table.tab\"), emit: tbjoin_input\n    tuple val(genomeFileName), path(\"Position_Tables/${genomeFileName}_${params.library_name}*.gatk_position_table.tab\"), emit: position_table_tuple\n    path(\"Position_Tables/${genomeFileName}_${params.library_name}*.gatk_position_table.tab\"), emit: position_table\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir Position_Tables\n\n    ${params.mtbseq_path} --step TBlist \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBlist \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    touch ${task.process}_${genomeFileName}_out.log\n    touch ${task.process}_${genomeFileName}_err.log\n\n    mkdir Position_Tables\n    touch Position_Tables/${genomeFileName}_${params.library_name}.gatk_position_table.tab\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 61,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir Position_Tables\n\n    ${params.mtbseq_path} --step TBlist \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFileName",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${genomeFileName} - ${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBlist \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --minbqual ${params.minbqual} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    touch ${task.process}_${genomeFileName}_out.log\n    touch ${task.process}_${genomeFileName}_err.log\n\n    mkdir Position_Tables\n    touch Position_Tables/${genomeFileName}_${params.library_name}.gatk_position_table.tab\n\n    \"\"\""
    },
    "TBVARIANTS": {
        "name_process": "TBVARIANTS",
        "string_process": "process TBVARIANTS {\n    tag \"${genomeFileName} - ${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeFileName), path(\"Position_Tables/*\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Called/${genomeFileName}_${params.library_name}*gatk_position_{uncovered,variants}*.tab\")\n    path(\"Called/${genomeFileName}_${params.library_name}*gatk_position_variants*.tab\"), emit: tbjoin_input\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir Called\n\n    ${params.mtbseq_path} --step TBvariants \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBvariants \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Called\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_uncovered_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_variants_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 62,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir Called\n\n    ${params.mtbseq_path} --step TBvariants \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFileName",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${genomeFileName} - ${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBvariants \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Called\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_uncovered_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n    touch Called/${genomeFileName}_${params.library_name}.gatk_position_variants_cf${params.mincovf}_cr${params.mincovr}_fr${params.minfreq}_ph${params.minphred}_outmode000.tab\n\n    \"\"\""
    },
    "TBGROUPS": {
        "name_process": "TBGROUPS",
        "string_process": "process TBGROUPS {\n    tag \"${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"Amend/*\")\n    path(samplesheet_tsv)\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Groups/*\")\n\n    script:\n    \"\"\"\n    gatk-register ${gatk_jar}\n\n    mkdir Groups\n\n    ${params.mtbseq_path} --step TBgroups \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --distance ${params.distance} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"\n\n    stub:\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBgroups \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --distance ${params.distance} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Groups\n    touch Groups/${params.project}_joint_cf4_cr4_fr75_ph4_samples5_amended_u95_phylo_w12.matrix\n    touch Groups/${params.project}_joint_cf4_cr4_fr75_ph4_samples35_amended_u95_phylo_w12_d12.groups\n\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    \"\"\"\n    gatk-register ${gatk_jar}\n\n    mkdir Groups\n\n    ${params.mtbseq_path} --step TBgroups \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --distance ${params.distance} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet_tsv",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    echo \"${params.mtbseq_path} --step TBgroups \\\n        --threads ${task.cpus} \\\n        --samples ${samplesheet_tsv} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --distance ${params.distance} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    mkdir Groups\n    touch Groups/${params.project}_joint_cf4_cr4_fr75_ph4_samples5_amended_u95_phylo_w12.matrix\n    touch Groups/${params.project}_joint_cf4_cr4_fr75_ph4_samples35_amended_u95_phylo_w12_d12.groups\n\n    \"\"\""
    },
    "TBBWA": {
        "name_process": "TBBWA",
        "string_process": "process TBBWA {\n    tag \"${genomeFileName} - ${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeFileName), path(\"${genomeFileName}_${params.library_name}_R?.fastq.gz\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Bam/${genomeFileName}_${params.library_name}*.{bam,bai,bamlog}\")\n    tuple val(genomeFileName), path(\"Bam/${genomeFileName}_${params.library_name}*.{bam,bai}\"), emit: bam_tuple\n    path(\"Bam/${genomeFileName}_${params.library_name}*.bam\"), emit: bam\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n    mkdir Bam\n\n    ${params.mtbseq_path} --step TBbwa \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBbwa \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    touch ${task.process}_${genomeFileName}_out.log\n    touch ${task.process}_${genomeFileName}_err.log\n\n    mkdir Bam\n    touch Bam/${genomeFileName}_${params.library_name}.bam\n    touch Bam/${genomeFileName}_${params.library_name}.bai\n    touch Bam/${genomeFileName}_${params.library_name}.bamlog\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 59,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n    mkdir Bam\n\n    ${params.mtbseq_path} --step TBbwa \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFileName",
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${genomeFileName} - ${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \" ${params.mtbseq_path} --step TBbwa \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \"\n\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    touch ${task.process}_${genomeFileName}_out.log\n    touch ${task.process}_${genomeFileName}_err.log\n\n    mkdir Bam\n    touch Bam/${genomeFileName}_${params.library_name}.bam\n    touch Bam/${genomeFileName}_${params.library_name}.bai\n    touch Bam/${genomeFileName}_${params.library_name}.bamlog\n\n    \"\"\""
    },
    "TBSTRAINS": {
        "name_process": "TBSTRAINS",
        "string_process": "process TBSTRAINS {\n    tag \"${params.project}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"Position_Tables/*\")\n    path(gatk_jar)\n    env(USER)\n    tuple path(ref_resistance_list), path(ref_interesting_regions), path(ref_gene_categories), path(ref_base_quality_recalibration)\n\n    output:\n    path(\"Classification/Strain_Classification.tab\")\n\n    script:\n\n    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir Classification\n\n    ${params.mtbseq_path} --step TBstrains \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    echo \"${params.mtbseq_path} --step TBstrains \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    mkdir Classification\n    touch Classification/Strain_Classification.tab\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 61,
        "string_script": "    \"\"\"\n\n    gatk-register ${gatk_jar}\n\n\n    mkdir Classification\n\n    ${params.mtbseq_path} --step TBstrains \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration} \\\n    1>>.command.out \\\n    2>>.command.err \\\n    || true               # NOTE This is a hack to overcome the exit status 1 thrown by mtbseq\n\n\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gatk_jar",
            "USER",
            "ref_resistance_list",
            "ref_interesting_regions",
            "ref_gene_categories",
            "ref_base_quality_recalibration"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mtb-bioinformatics__mtbseq-nf",
        "directive": [
            "tag \"${params.project}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    sleep \\$[ ( \\$RANDOM % 10 )  + 1 ]s\n\n    echo \"${params.mtbseq_path} --step TBstrains \\\n        --threads ${task.cpus} \\\n        --project ${params.project} \\\n        --mincovf ${params.mincovf} \\\n        --mincovr ${params.mincovr} \\\n        --minphred ${params.minphred} \\\n        --minfreq ${params.minfreq} \\\n        --resilist ${ref_resistance_list} \\\n        --intregions ${ref_interesting_regions} \\\n        --categories ${ref_gene_categories} \\\n        --basecalib ${ref_base_quality_recalibration}\"\n\n    mkdir Classification\n    touch Classification/Strain_Classification.tab\n\n    \"\"\""
    }
}
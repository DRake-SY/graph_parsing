{
    "OPERATION_1": {
        "string": "bam_cov = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam_cov",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "bam_ovlp = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam_ovlp",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "circos_data_cov = Channel.create()",
        "origin": [],
        "gives": [
            [
                "circos_data_cov",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "table_data_cov = Channel.create()",
        "origin": [],
        "gives": [
            [
                "table_data_cov",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "samples_filtered.into{samples_rgi; samples_glimmer; samples_map; samples_split}",
        "origin": [
            [
                "samples_filtered",
                "P"
            ]
        ],
        "gives": [
            [
                "samples_rgi",
                "P"
            ],
            [
                "samples_glimmer",
                "P"
            ],
            [
                "samples_map",
                "P"
            ],
            [
                "samples_split",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "samples_split\n    .map{[\n        it[0],\n        it[1],\n        it[2]\n        ]}\n    .splitFasta(record: [id: true, seqString: true])\n    .map{\n        def id = it[0]\n        def lr = it[2]\n                                                           \n        def contigName = it[1]['id']\n        def length = it[1]['seqString'].length()\n        def sequence = it[1]['seqString']\n        [id, lr, contigName, length, sequence]\n       }\n    .filter{it[3] < params.maxLength}\n    .filter{it[3] > params.minLength}\n           \n    .into{contigs; contigs_2; contigs_3}",
        "origin": [
            [
                "samples_split",
                "P"
            ]
        ],
        "gives": [
            [
                "contigs",
                "P"
            ],
            [
                "contigs_2",
                "P"
            ],
            [
                "contigs_3",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "assembly_padded.into{map_padded; gc_padded}",
        "origin": [
            [
                "assembly_padded",
                "P"
            ]
        ],
        "gives": [
            [
                "map_padded",
                "P"
            ],
            [
                "gc_padded",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "samples_map\n           \n    .map{[it[0], \n        it[1], \n        it[2], \n        'normal']}\n    .mix(map_padded\n        .map{[it[0], \n            it[1], \n            it[2][0],\n            it[3]]})\n    .set{to_mapping}",
        "origin": [
            [
                "samples_map",
                "P"
            ]
        ],
        "gives": [
            [
                "to_mapping",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "bam_lr.into{bam_cov; bam_ovlp}",
        "origin": [
            [
                "bam_lr",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_cov",
                "P"
            ],
            [
                "bam_ovlp",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "from_rgi.into{rgi_txt; table_data_rgi}",
        "origin": [
            [
                "from_rgi",
                "P"
            ]
        ],
        "gives": [
            [
                "rgi_txt",
                "P"
            ],
            [
                "table_data_rgi",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "cov_formated.choice(circos_data_cov, table_data_cov) { it[2]  = 0\n } else { \ncov_formated.choice(circos_data_cov, table_data_cov) { it[2]  = 1 }\n }",
        "origin": [
            [
                "cov_formated",
                "P"
            ]
        ],
        "gives": [
            [
                "circos_data_cov",
                "P"
            ],
            [
                "table_data_cov",
                "P"
            ],
            [
                "circos_data_cov",
                "P"
            ],
            [
                "table_data_cov",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "circos_data_gc\n   .join(circos_data_cov)\n       .join(circos_data_rgi)\n           .join(circos_data_genes)\n           .set{circos_data}",
        "origin": [
            [
                "circos_data_gc",
                "P"
            ],
            [
                "circos_data_cov",
                "P"
            ],
            [
                "circos_data_rgi",
                "P"
            ],
            [
                "circos_data_genes",
                "P"
            ]
        ],
        "gives": [
            [
                "circos_data",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "combined_data = circos_reads.combine(circos_data, by: 0)",
        "origin": [
            [
                "circos_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "combined_data",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "table_data_gc\n    .join(table_data_cov)\n        .join(table_data_rgi)\n        .set{table_data}",
        "origin": [
            [
                "table_data_gc",
                "P"
            ],
            [
                "table_data_cov",
                "P"
            ],
            [
                "table_data_rgi",
                "P"
            ]
        ],
        "gives": [
            [
                "table_data",
                "P"
            ]
        ]
    }
}
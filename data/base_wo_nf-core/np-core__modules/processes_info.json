{
    "Gubbins": {
        "name_process": "Gubbins",
        "string_process": "process Gubbins {\n\n    label \"gubbins\"\n    tag { \"Gubbins\" }\n\n    publishDir \"${params.outdir}\", mode: \"copy\", pattern: \"snp.core.gubbins.fasta\"\n\n    input:\n    file(clean_alignment)\n\n    output:\n    file(\"snp.core.gubbins.fasta\")\n\n    \"\"\"\n    run_gubbins.py -p gubbins --threads $task.cpus $clean_alignment $params.gubbins_params\n    snp-sites -c gubbins.filtered_polymorphic_sites.fasta > snp.core.gubbins.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    run_gubbins.py -p gubbins --threads $task.cpus $clean_alignment $params.gubbins_params\n    snp-sites -c gubbins.filtered_polymorphic_sites.fasta > snp.core.gubbins.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "clean_alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"gubbins\"",
            "tag { \"Gubbins\" }",
            "publishDir \"${params.outdir}\", mode: \"copy\", pattern: \"snp.core.gubbins.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "Shovill": {
        "name_process": "Shovill",
        "string_process": "process Shovill {\n\n    tag { id }\n    label \"shovill\"\n\n    publishDir \"$params.outdir/illumina/assembly\", mode: \"copy\", pattern: \"*.fasta\"\n    publishDir \"$params.outdir/illumina/assembly\", mode: \"copy\", pattern: \"*.gfa\"\n\n    input:\n    tuple val(id), file(forward), file(reverse)\n\n    output:\n    tuple val(id), file(\"${id}.assembly.fasta\")\n\n    \"\"\"\n    shovill --R1 $forward --R2 $reverse --cpus $task.cpus --ram $task.memory \\\n    --depth $params.depth --assembler $params.assembler --outdir $id --force\n    mv ${id}/contigs.fa ${id}.assembly.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    shovill --R1 $forward --R2 $reverse --cpus $task.cpus --ram $task.memory \\\n    --depth $params.depth --assembler $params.assembler --outdir $id --force\n    mv ${id}/contigs.fa ${id}.assembly.fasta\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "id",
            "forward",
            "reverse"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"shovill\"",
            "publishDir \"$params.outdir/illumina/assembly\", mode: \"copy\", pattern: \"*.fasta\"",
            "publishDir \"$params.outdir/illumina/assembly\", mode: \"copy\", pattern: \"*.gfa\""
        ],
        "when": "",
        "stub": ""
    },
    "UnicyclerHybrid": {
        "name_process": "UnicyclerHybrid",
        "string_process": "process UnicyclerHybrid {\n\n    label \"unicycler\"\n    tag { \"$id\" }\n\n    memory { params.forest_evaluate_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 5\n\n    publishDir \"${params.outdir}/unicycler/assembly\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(fwd), file(rev), file(fq)\n\n    output:    \n    tuple val(id), file(\"${id}.fasta\")\n\n    \"\"\"\n    unicycler -1 $fwd -2 $rev -l $fq -o unicycler --threads $task.cpus --no_correct\n    mv unicycler/assembly.fasta ${id}.unicycler.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n    unicycler -1 $fwd -2 $rev -l $fq -o unicycler --threads $task.cpus --no_correct\n    mv unicycler/assembly.fasta ${id}.unicycler.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "id",
            "fwd",
            "rev",
            "fq"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"unicycler\"",
            "tag { \"$id\" }",
            "memory { params.forest_evaluate_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/unicycler/assembly\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "MegalodonVariants": {
        "name_process": "MegalodonVariants",
        "string_process": "process MegalodonVariants {\n\n    label \"megalodon\"\n    tag { \"Megalodon: $id\" }\n\n    publishDir \"${params.outdir}/megalodon\", mode: \"copy\"\n\n    input:\n    file(reference)\n    file(candidates)\n    tuple val(id), file(path)\n\n    output:\n    file(\"${id}\")\n\n    \"\"\"\n    mv $path megalodon_in\n    megalodon --guppy-server-path $params.guppy_server_path \\\n            --output-directory ${id} \\\n            --outputs variants \\\n            --reference $reference \\\n            --haploid \\\n            --variant-filename $candidates \\\n            --devices '$params.guppy_devices' \\\n            --processes $task.cpus \\\n            --guppy-params '$params.guppy_params' \\\n            --guppy-config $params.guppy_config \\\n            $params.megalodon_params megalodon_in\n    \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n    mv $path megalodon_in\n    megalodon --guppy-server-path $params.guppy_server_path \\\n            --output-directory ${id} \\\n            --outputs variants \\\n            --reference $reference \\\n            --haploid \\\n            --variant-filename $candidates \\\n            --devices '$params.guppy_devices' \\\n            --processes $task.cpus \\\n            --guppy-params '$params.guppy_params' \\\n            --guppy-config $params.guppy_config \\\n            $params.megalodon_params megalodon_in\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reference",
            "candidates",
            "id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"megalodon\"",
            "tag { \"Megalodon: $id\" }",
            "publishDir \"${params.outdir}/megalodon\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "MegalodonVariantsPanels": {
        "name_process": "MegalodonVariantsPanels",
        "string_process": "\nprocess MegalodonVariantsPanels {\n\n    label \"megalodon\"\n    tag { \"Megalodon: $panel - $barcode\" }\n\n    publishDir \"${params.outdir}/megalodon\", mode: \"copy\"\n\n    input:\n    file(reference)\n    file(candidates)\n    tuple val(panel), val(barcode), file(path)\n\n    output:\n    file(\"${panel}_${barcode}\")\n\n    \"\"\"\n    megalodon --guppy-server-path $params.guppy_server_path \\\n            --output-directory ${panel}_${barcode} \\\n            --outputs variants \\\n            --reference $reference \\\n            --haploid \\\n            --variant-filename $candidates \\\n            --devices '$params.guppy_devices' \\\n            --processes $task.cpus \\\n            --guppy-params \"$params.guppy_params\" \\\n            --guppy-config $params.guppy_config \\\n            $params.megalodon_params $path\n    \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n    megalodon --guppy-server-path $params.guppy_server_path \\\n            --output-directory ${panel}_${barcode} \\\n            --outputs variants \\\n            --reference $reference \\\n            --haploid \\\n            --variant-filename $candidates \\\n            --devices '$params.guppy_devices' \\\n            --processes $task.cpus \\\n            --guppy-params \"$params.guppy_params\" \\\n            --guppy-config $params.guppy_config \\\n            $params.megalodon_params $path\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reference",
            "candidates",
            "panel",
            "barcode"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"megalodon\"",
            "tag { \"Megalodon: $panel - $barcode\" }",
            "publishDir \"${params.outdir}/megalodon\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "CoverM": {
        "name_process": "CoverM",
        "string_process": "process CoverM {\n\n    tag { id }\n    label \"coverm\"\n\n    publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fastq)\n    file(reference)\n    \n    output:\n    tuple val(id), file(\"${id}.coverage.txt\")\n\n    \"\"\"\n    coverm genome -p $params.preset -r $reference -t $task.cpus --single $fastq coverm genome --single-genome -m mean > ${id}.coverage.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    coverm genome -p $params.preset -r $reference -t $task.cpus --single $fastq coverm genome --single-genome -m mean > ${id}.coverage.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fastq",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"coverm\"",
            "publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "IlluminaCoverM": {
        "name_process": "IlluminaCoverM",
        "string_process": "\nprocess IlluminaCoverM {\n\n    tag { id }\n    label \"coverm\"\n\n    publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fastq)\n    file(reference)\n    \n    output:\n    tuple val(id), file(\"${id}.coverage.txt\")\n\n    \"\"\"\n    coverm genome -p $params.preset -r $reference -t $task.cpus --single $fastq coverm genome --single-genome -m mean > ${id}.coverage.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    coverm genome -p $params.preset -r $reference -t $task.cpus --single $fastq coverm genome --single-genome -m mean > ${id}.coverage.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fastq",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"coverm\"",
            "publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "OnlineCoverM": {
        "name_process": "OnlineCoverM",
        "string_process": "\nprocess OnlineCoverM {\n    \n    tag { id }\n    label \"coverm\"\n\n    publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fastq)\n    file(reference)\n    \n    output:\n    tuple val(id), file(\"${id}.coverage.txt\") optional true\n\n                                                                                                                            \n                                                                                                                               \n                                                                                                                 \n\n    \"\"\"\n    \n    coverm genome -p $params.preset -r $reference -t $task.cpus --single $fastq coverm genome --single-genome -m mean > ${id}.coverage.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    \n    coverm genome -p $params.preset -r $reference -t $task.cpus --single $fastq coverm genome --single-genome -m mean > ${id}.coverage.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fastq",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"coverm\"",
            "publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "DateRandomisation": {
        "name_process": "DateRandomisation",
        "string_process": "process DateRandomisation {\n\n    label \"phybeast\"\n    tag { \"$tree\" }\n\n    publishDir \"${params.outdir}/date_randomisation\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(tree), file(alignment), file(rate)\n    file(meta_data)\n\n    output:\n    file(\"${id}_rates.tsv\")\n    file(\"${id}_daterandom.png\")\n\n    \"\"\"\n    nanopath utils date-random-test --dates $meta_data --alignment $alignment --tree $tree --replicates $params.replicates\n    nanopath utils date-random-test --rate_file rates.tsv --clock_rate_file $rate\n    mv date_random_test/date_randomisation_test.png ${id}_daterandom.png\n    mv rates.tsv ${id}_rates.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    nanopath utils date-random-test --dates $meta_data --alignment $alignment --tree $tree --replicates $params.replicates\n    nanopath utils date-random-test --rate_file rates.tsv --clock_rate_file $rate\n    mv date_random_test/date_randomisation_test.png ${id}_daterandom.png\n    mv rates.tsv ${id}_rates.tsv\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "tree",
            "alignment",
            "rate",
            "meta_data"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"phybeast\"",
            "tag { \"$tree\" }",
            "publishDir \"${params.outdir}/date_randomisation\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "VariantSites": {
        "name_process": "VariantSites",
        "string_process": "\nprocess VariantSites {\n\n    label \"phybeast\"\n    tag { \"$alignment\" }\n\n    publishDir \"${params.outdir}/alignment\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(alignment)\n\n    output:\n    tuple val(id), file(\"${id}.noref.variants.fasta\")\n\n    \"\"\"\n    nanopath utils remove-reference -a $alignment -o aln.noref.fasta\n    nanopath utils remove-invariant -a aln.noref.fasta -o ${id}.noref.variants.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    nanopath utils remove-reference -a $alignment -o aln.noref.fasta\n    nanopath utils remove-invariant -a aln.noref.fasta -o ${id}.noref.variants.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"phybeast\"",
            "tag { \"$alignment\" }",
            "publishDir \"${params.outdir}/alignment\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Pilon": {
        "name_process": "Pilon",
        "string_process": "process Pilon {\n\n    tag { id }\n    label \"pilon\"\n\n    publishDir \"$params.outdir/hybrid/assembly\", mode: \"copy\", pattern: \"${id}.*.fasta\"\n\n    input:\n    tuple val(id), file(assembly), file(forward), file(reverse)\n\n    output:\n    tuple val(id), file(\"${id}.${params.tag}.hybrid.fasta\")\n\n\n    \"\"\"\n    minimap2 -ax sr $assembly $forward $reverse > aln.sam && \\\n        samtools view -S -b aln.sam > aln.bam && samtools sort aln.bam -o alignment1.bam && \\\n        samtools index alignment1.bam\n\n    pilon --genome $assembly --frags alignment1.bam --outdir correction1 --changes\n    \n    minimap2 -ax sr correction1/pilon.fasta $forward $reverse > aln.sam && \\\n        samtools view -S -b aln.sam > aln.bam && samtools sort aln.bam -o alignment2.bam && \\\n        samtools index alignment2.bam\n\n    pilon --genome correction1/pilon.fasta --frags alignment2.bam --outdir correction2 --changes && \\\n    mv correction2/pilon.fasta ${id}.${params.tag}.hybrid.fasta \n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    minimap2 -ax sr $assembly $forward $reverse > aln.sam && \\\n        samtools view -S -b aln.sam > aln.bam && samtools sort aln.bam -o alignment1.bam && \\\n        samtools index alignment1.bam\n\n    pilon --genome $assembly --frags alignment1.bam --outdir correction1 --changes\n    \n    minimap2 -ax sr correction1/pilon.fasta $forward $reverse > aln.sam && \\\n        samtools view -S -b aln.sam > aln.bam && samtools sort aln.bam -o alignment2.bam && \\\n        samtools index alignment2.bam\n\n    pilon --genome correction1/pilon.fasta --frags alignment2.bam --outdir correction2 --changes && \\\n    mv correction2/pilon.fasta ${id}.${params.tag}.hybrid.fasta \n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools",
            "pilon"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools",
            "https://bio.tools/pilon"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pilon",
                "uri": "https://bio.tools/pilon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Read alignment analysis to diagnose, report, and automatically improve de novo genome assemblies.",
                "homepage": "http://www.broadinstitute.org/software/pilon/"
            }
        ],
        "inputs": [
            "id",
            "assembly",
            "forward",
            "reverse"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"pilon\"",
            "publishDir \"$params.outdir/hybrid/assembly\", mode: \"copy\", pattern: \"${id}.*.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "AssemblyGenotype": {
        "name_process": "AssemblyGenotype",
        "string_process": " process AssemblyGenotype {\n\n    tag { id }\n    label \"genotype\"\n\n    publishDir \"$params.outdir/${params.tag}/genotypes\", mode: \"copy\", pattern: \"${id}.${params.tag}.tab\"\n\n    input:\n    tuple val(id), file(assembly)\n\n    output:\n    file(\"${id}.${params.tag}.tab\")\n\n    script:\n\n    if (params.kpneumoniae)\n        \n        \"\"\"\n        kleborate -a $assembly --all -o ${id}.${params.tag}.tab\n        \"\"\"\n\n    else if (params.saureus)\n        \n        \"\"\"\n        sccion type -a $assembly > ${id}.${params.tag}.tab\n        \"\"\"\n    \n    else\n\n        \"\"\"\n        mlst $assembly >> ${id}.${params.tag}.tab\n        abricate --db vfdb $assembly >> ${id}.${params.tag}.tab\n        \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "    if (params.kpneumoniae)\n        \n        \"\"\"\n        kleborate -a $assembly --all -o ${id}.${params.tag}.tab\n        \"\"\"\n\n    else if (params.saureus)\n        \n        \"\"\"\n        sccion type -a $assembly > ${id}.${params.tag}.tab\n        \"\"\"\n    \n    else\n\n        \"\"\"\n        mlst $assembly >> ${id}.${params.tag}.tab\n        abricate --db vfdb $assembly >> ${id}.${params.tag}.tab\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "MLST",
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/mlst",
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            },
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "id",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"genotype\"",
            "publishDir \"$params.outdir/${params.tag}/genotypes\", mode: \"copy\", pattern: \"${id}.${params.tag}.tab\""
        ],
        "when": "",
        "stub": ""
    },
    "Mykrobe": {
        "name_process": "Mykrobe",
        "string_process": " process Mykrobe {\n\n    tag { id }\n    label \"genotype\"\n\n    publishDir \"$params.outdir/${params.tag}/genotypes\", mode: \"copy\", pattern: \"${id}.json\"\n\n    input:\n    tuple val(id), file(forward), file(reverse)\n\n    output:\n    file(\"${id}.json\")\n\n    script:\n\n    \"\"\"\n    mykrobe predict $id $params.mykrobe_species $params.mykrobe_other --out ${id}.json --format json -1 $forward $reverse --threads $task.cpus\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    mykrobe predict $id $params.mykrobe_species $params.mykrobe_other --out ${id}.json --format json -1 $forward $reverse --threads $task.cpus\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Mykrobe"
        ],
        "tools_url": [
            "https://bio.tools/Mykrobe"
        ],
        "tools_dico": [
            {
                "name": "Mykrobe",
                "uri": "https://bio.tools/Mykrobe",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Antibiotic resistance prediction for Mycobacterium tuberculosis from genome sequence data with Mykrobe.\n\nAntibiotic resistance prediction in minutes.\n\nTable of Contents generated with DocToc.\n\nAMR prediction (Mykrobe predictor).\n\nBefore attempting to install with bioconda, please ensure you have your channels set up as specified in the documentation. If you don't, you may run into issues with an older version of mykrobe being installed",
                "homepage": "https://github.com/mykrobe-tools/mykrobe"
            }
        ],
        "inputs": [
            "id",
            "forward",
            "reverse"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"genotype\"",
            "publishDir \"$params.outdir/${params.tag}/genotypes\", mode: \"copy\", pattern: \"${id}.json\""
        ],
        "when": "",
        "stub": ""
    },
    "ClairVariants": {
        "name_process": "ClairVariants",
        "string_process": "process ClairVariants {\n\n    label \"clair\"\n    tag { \"$id\" }\n    \n    memory { params.clair_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.vcf\"\n    publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.txt\"\n\n    input:\n    tuple val(id), file(bam), file(bai)\n    file(reference) \n\n    output:\n    tuple val(id), file(\"${id}.vcf\"), file(\"${id}.txt\")\n    tuple val(id), file(bam), file(bai)\n\n    \"\"\"\n    samtools faidx $reference\n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                     --ref_fn $reference \\\n                     --bam_fn $bam \\\n                     --sampleName $id \\\n                     --minCoverage 1 \\\n                     --threads $task.cpus \\\n                     --call_fn ${id}.\\${contig}.clair.vcf \\\n                     --ctgName \\$contig \\\n                     ${params.clair_haploid}\n    done\n\n    vcfcat ${id}.*.clair.vcf | bcftools sort -m 8G -o ${id}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}.txt\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 41,
        "string_script": "\"\"\"\n    samtools faidx $reference\n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                     --ref_fn $reference \\\n                     --bam_fn $bam \\\n                     --sampleName $id \\\n                     --minCoverage 1 \\\n                     --threads $task.cpus \\\n                     --call_fn ${id}.\\${contig}.clair.vcf \\\n                     --ctgName \\$contig \\\n                     ${params.clair_haploid}\n    done\n\n    vcfcat ${id}.*.clair.vcf | bcftools sort -m 8G -o ${id}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}.txt\n    \n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "NPD",
            "Clair",
            "BCFtools",
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/NPD",
            "https://bio.tools/Clair",
            "https://bio.tools/bcftools",
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            },
            {
                "name": "Clair",
                "uri": "https://bio.tools/Clair",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Exploring the limit of using a deep neural network on pileup data for germline variant calling.\n\nClair: Exploring the limit of using deep neural network on pileup data for germline variant calling.\n\nClair - Yet another deep neural network based variant caller.\n\nSingle-molecule sequencing technologies have emerged in recent years and revolutionized structural variant calling, complex genome assembly, and epigenetic mark detection",
                "homepage": "https://github.com/HKU-BAL/Clair"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "id",
            "bam",
            "bai",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"clair\"",
            "tag { \"$id\" }",
            "memory { params.clair_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.vcf\"",
            "publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "ClairEvaluation": {
        "name_process": "ClairEvaluation",
        "string_process": "\nprocess ClairEvaluation {\n\n    label \"clair\"\n    tag { \"$id - $reference\" }\n    \n    memory { params.clair_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/clair\", mode: \"copy\", pattern: \"${id}.vcf\"\n    publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/clair\", mode: \"copy\", pattern: \"${id}.txt\"\n\n    input:\n    tuple val(eval_set), val(id), file(reference), file(bam), file(bai)\n\n    output:\n    tuple val(eval_set), val(id), val(\"${reference.simpleName}\"), file(\"${id}.vcf\"), file(\"${id}.txt\")\n\n    \n    \"\"\"\n    samtools faidx $reference\n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                     --ref_fn $reference \\\n                     --bam_fn $bam \\\n                     --sampleName $id \\\n                     --minCoverage 1 \\\n                     --threads $task.cpus \\\n                     --call_fn ${id}.\\${contig}.clair.vcf \\\n                     --ctgName \\$contig \\\n                     ${params.clair_haploid}\n    done\n\n    vcfcat ${id}.*.clair.vcf | bcftools sort -m 8G -o ${id}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}.txt\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 41,
        "string_script": "\"\"\"\n    samtools faidx $reference\n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                     --ref_fn $reference \\\n                     --bam_fn $bam \\\n                     --sampleName $id \\\n                     --minCoverage 1 \\\n                     --threads $task.cpus \\\n                     --call_fn ${id}.\\${contig}.clair.vcf \\\n                     --ctgName \\$contig \\\n                     ${params.clair_haploid}\n    done\n\n    vcfcat ${id}.*.clair.vcf | bcftools sort -m 8G -o ${id}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}.txt\n    \n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "NPD",
            "Clair",
            "BCFtools",
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/NPD",
            "https://bio.tools/Clair",
            "https://bio.tools/bcftools",
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            },
            {
                "name": "Clair",
                "uri": "https://bio.tools/Clair",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Exploring the limit of using a deep neural network on pileup data for germline variant calling.\n\nClair: Exploring the limit of using deep neural network on pileup data for germline variant calling.\n\nClair - Yet another deep neural network based variant caller.\n\nSingle-molecule sequencing technologies have emerged in recent years and revolutionized structural variant calling, complex genome assembly, and epigenetic mark detection",
                "homepage": "https://github.com/HKU-BAL/Clair"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "eval_set",
            "id",
            "reference",
            "bam",
            "bai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"clair\"",
            "tag { \"$id - $reference\" }",
            "memory { params.clair_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/clair\", mode: \"copy\", pattern: \"${id}.vcf\"",
            "publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/clair\", mode: \"copy\", pattern: \"${id}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "ClairTraining": {
        "name_process": "ClairTraining",
        "string_process": "\nprocess ClairTraining {\n\n    label \"clair\"\n    tag { \"$model_name - $id - $reference\" }\n    \n    memory { 8.GB * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.vcf\"\n    publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.txt\"\n\n    input:\n    tuple val(model_name), val(id), val(ref), val(coverage), file(reference), file(bam), file(bai), file(snippy_vcf)\n\n    output:\n    tuple val(model_name), val(ref), file(\"${id}_${coverage}.vcf\"), file(\"${id}_${coverage}.txt\"), file(snippy_vcf)\n\n\n    \"\"\"\n    samtools faidx $reference\n    \n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                    --ref_fn $reference \\\n                    --bam_fn $bam \\\n                    --sampleName ${id}_${coverage} \\\n                    --minCoverage 1 \\\n                    --threads $task.cpus \\\n                    --call_fn ${id}_${coverage}.\\${contig}.clair.vcf \\\n                    --ctgName \\$contig \\\n                    ${params.clair_haploid}\n    done\n\n    vcfcat ${id}_${coverage}.*.clair.vcf | bcftools sort -m 2G -o ${id}_${coverage}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}_${coverage}.txt               \n\n    \"\"\"\n\n}",
        "nb_lignes_process": 42,
        "string_script": "\"\"\"\n    samtools faidx $reference\n    \n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                    --ref_fn $reference \\\n                    --bam_fn $bam \\\n                    --sampleName ${id}_${coverage} \\\n                    --minCoverage 1 \\\n                    --threads $task.cpus \\\n                    --call_fn ${id}_${coverage}.\\${contig}.clair.vcf \\\n                    --ctgName \\$contig \\\n                    ${params.clair_haploid}\n    done\n\n    vcfcat ${id}_${coverage}.*.clair.vcf | bcftools sort -m 2G -o ${id}_${coverage}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}_${coverage}.txt               \n\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "NPD",
            "Clair",
            "BCFtools",
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/NPD",
            "https://bio.tools/Clair",
            "https://bio.tools/bcftools",
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            },
            {
                "name": "Clair",
                "uri": "https://bio.tools/Clair",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Exploring the limit of using a deep neural network on pileup data for germline variant calling.\n\nClair: Exploring the limit of using deep neural network on pileup data for germline variant calling.\n\nClair - Yet another deep neural network based variant caller.\n\nSingle-molecule sequencing technologies have emerged in recent years and revolutionized structural variant calling, complex genome assembly, and epigenetic mark detection",
                "homepage": "https://github.com/HKU-BAL/Clair"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "model_name",
            "id",
            "ref",
            "coverage",
            "reference",
            "bam",
            "bai",
            "snippy_vcf"
        ],
        "nb_inputs": 8,
        "outputs": [
            "ref"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"clair\"",
            "tag { \"$model_name - $id - $reference\" }",
            "memory { 8.GB * task.attempt }",
            "errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.vcf\"",
            "publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "ClairCandidates": {
        "name_process": "ClairCandidates",
        "string_process": "\nprocess ClairCandidates {\n\n    label \"clair\"\n    tag { \"$id\" }\n    \n    memory { 8.GB * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.vcf\"\n    publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.txt\"\n\n    input:\n    tuple val(id), file(bam), file(bai)\n    file(reference)\n    file(candidates)\n\n    output:\n    tuple val(id), file(\"${id}.vcf\"), file(\"${id}.txt\")\n    tuple val(id), file(bam), file(bai)\n\n    \"\"\"\n    samtools faidx $reference\n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                     --ref_fn $reference \\\n                     --bam_fn $bam \\\n                     --sampleName $id \\\n                     --minCoverage 1 \\\n                     --threads $task.cpus \\\n                     --call_fn ${id}.\\${contig}.clair.vcf \\\n                     --ctgName \\$contig \\\n                     --vcf_fn $candidates\n                     ${params.clair_haploid}\n    done\n\n    vcfcat ${id}.*.clair.vcf | bcftools sort -m 2G -o ${id}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}.txt\n    \n    \"\"\"\n    \n}",
        "nb_lignes_process": 44,
        "string_script": "\"\"\"\n    samtools faidx $reference\n    np phybeast utils print-header --fasta $reference | while read -r contig ; do\n    echo \"Processing contig: \\$contig\"\n    clair callVarBam --chkpnt_fn ${params.clair_model} \\\n                     --ref_fn $reference \\\n                     --bam_fn $bam \\\n                     --sampleName $id \\\n                     --minCoverage 1 \\\n                     --threads $task.cpus \\\n                     --call_fn ${id}.\\${contig}.clair.vcf \\\n                     --ctgName \\$contig \\\n                     --vcf_fn $candidates\n                     ${params.clair_haploid}\n    done\n\n    vcfcat ${id}.*.clair.vcf | bcftools sort -m 2G -o ${id}.vcf \n\n    pysamstats -t variation_strand $bam -f $reference > ${id}.txt\n    \n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "NPD",
            "Clair",
            "BCFtools",
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/NPD",
            "https://bio.tools/Clair",
            "https://bio.tools/bcftools",
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            },
            {
                "name": "Clair",
                "uri": "https://bio.tools/Clair",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Exploring the limit of using a deep neural network on pileup data for germline variant calling.\n\nClair: Exploring the limit of using deep neural network on pileup data for germline variant calling.\n\nClair - Yet another deep neural network based variant caller.\n\nSingle-molecule sequencing technologies have emerged in recent years and revolutionized structural variant calling, complex genome assembly, and epigenetic mark detection",
                "homepage": "https://github.com/HKU-BAL/Clair"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "id",
            "bam",
            "bai",
            "reference",
            "candidates"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"clair\"",
            "tag { \"$id\" }",
            "memory { 8.GB * task.attempt }",
            "errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.vcf\"",
            "publishDir \"${params.outdir}/clair\", mode: \"copy\", pattern: \"${id}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "Rasusa": {
        "name_process": "Rasusa",
        "string_process": "process Rasusa {\n    \n    tag { id }\n    label \"rasusa\"\n\n    publishDir \"$params.outdir/rasusa\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}_rasusa.fq\")\n    \n    \"\"\"\n    rasusa -c $params.coverage -g $params.genome_size -i $fq > ${id}_rasusa.fq\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    rasusa -c $params.coverage -g $params.genome_size -i $fq > ${id}_rasusa.fq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"rasusa\"",
            "publishDir \"$params.outdir/rasusa\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "RasusaMulti": {
        "name_process": "RasusaMulti",
        "string_process": "\nprocess RasusaMulti {\n    \n    tag { \"${id}: ${coverage}x\" }\n    label \"rasusa\"\n\n    publishDir \"$params.outdir/rasusa\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(fq)\n    each coverage\n\n    output:\n    tuple val(\"${id}_${coverage}\"), file(\"${id}_${coverage}.fq\")\n    \n    \"\"\"\n    rasusa -c $coverage -g $params.genome_size -i $fq > ${id}_${coverage}.fq\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    rasusa -c $coverage -g $params.genome_size -i $fq > ${id}_${coverage}.fq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fq",
            "coverage"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"${id}: ${coverage}x\" }",
            "label \"rasusa\"",
            "publishDir \"$params.outdir/rasusa\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "RasusaTraining": {
        "name_process": "RasusaTraining",
        "string_process": "\nprocess RasusaTraining {\n    \n    tag { \"${model_name} - ${id} - ${coverage}x\" }\n    label \"rasusa\"\n\n    publishDir \"$params.outdir/${ref}/polishers/subsets\", mode: \"copy\", pattern: \"${id}_${coverage}.fq\"\n\n    input:\n    tuple val(model_name), val(id), val(ref), file(reference), file(fq), file(snippy_vcf)\n    each coverage\n\n    output:\n    tuple val(model_name), val(id), val(ref), val(coverage), file(reference), file(\"${id}_${coverage}.fq\"), file(\"${id}_${coverage}.ref.vcf\")\n    \n    \"\"\"\n    rasusa -c $coverage -g $params.genome_size -i $fq > ${id}_${coverage}.fq\n    cp $snippy_vcf ${id}_${coverage}.ref.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    rasusa -c $coverage -g $params.genome_size -i $fq > ${id}_${coverage}.fq\n    cp $snippy_vcf ${id}_${coverage}.ref.vcf\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "model_name",
            "id",
            "ref",
            "reference",
            "fq",
            "snippy_vcf",
            "coverage"
        ],
        "nb_inputs": 7,
        "outputs": [
            "coverage"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"${model_name} - ${id} - ${coverage}x\" }",
            "label \"rasusa\"",
            "publishDir \"$params.outdir/${ref}/polishers/subsets\", mode: \"copy\", pattern: \"${id}_${coverage}.fq\""
        ],
        "when": "",
        "stub": ""
    },
    "Dnadiff": {
        "name_process": "Dnadiff",
        "string_process": "process Dnadiff {\n\n    tag { id }\n    label \"dnadiff\"\n\n    publishDir \"$params.outdir/${params.tag}/dnadiff\", mode: \"copy\", pattern: \"*.report\"\n\n    input:\n    tuple val(id), file(query_assembly), file(reference_assembly)\n\n    output:\n    tuple val(id), file(\"${id}.${params.tag}.report\")\n\n\n    \"\"\"\n    dnadiff $reference_assembly $query_assembly -p hybrid\n    mv hybrid.report ${id}.${params.tag}.report\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    dnadiff $reference_assembly $query_assembly -p hybrid\n    mv hybrid.report ${id}.${params.tag}.report\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "query_assembly",
            "reference_assembly"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"dnadiff\"",
            "publishDir \"$params.outdir/${params.tag}/dnadiff\", mode: \"copy\", pattern: \"*.report\""
        ],
        "when": "",
        "stub": ""
    },
    "BeastCPU": {
        "name_process": "BeastCPU",
        "string_process": "process BeastCPU {\n\n                 \n    \n    label \"beast\"\n    tag { \"BEAST2\" }\n\n    publishDir \"${params.outdir}/beast\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(xml)\n    val(beagle_params)\n\n    output:\n    tuple val(id), file(\"${id}.*\")\n\n    \"\"\"\n    beast -threads $task.cpus ${beagle_params} ${params.beast_params} $xml\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    beast -threads $task.cpus ${beagle_params} ${params.beast_params} $xml\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEAST"
        ],
        "tools_url": [
            "https://bio.tools/beast"
        ],
        "tools_dico": [
            {
                "name": "BEAST",
                "uri": "https://bio.tools/beast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Bayesian Evolutionary Analysis Sampling Trees is a cross-platform program for Bayesian analysis of molecular sequences using MCMC (Markov chain Monte Carlo). It is entirely orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models. It can be used as a method of reconstructing phylogenies but is also a framework for testing evolutionary hypotheses without conditioning on a single tree topology.",
                "homepage": "http://beast.bio.ed.ac.uk/"
            }
        ],
        "inputs": [
            "id",
            "xml",
            "beagle_params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"beast\"",
            "tag { \"BEAST2\" }",
            "publishDir \"${params.outdir}/beast\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "BeastGPU": {
        "name_process": "BeastGPU",
        "string_process": "\nprocess BeastGPU {\n\n                 \n    \n    label \"beast_gpu\"\n    tag { \"BEAST2\" }\n\n    publishDir \"${params.outdir}/beast\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(xml)\n    val(beagle_params)\n\n    output:\n    tuple val(id), file(\"${id}.*\")\n\n    \"\"\"\n    beast -threads $task.cpus ${beagle_params} ${params.beast_params} $xml\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    beast -threads $task.cpus ${beagle_params} ${params.beast_params} $xml\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEAST"
        ],
        "tools_url": [
            "https://bio.tools/beast"
        ],
        "tools_dico": [
            {
                "name": "BEAST",
                "uri": "https://bio.tools/beast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Bayesian Evolutionary Analysis Sampling Trees is a cross-platform program for Bayesian analysis of molecular sequences using MCMC (Markov chain Monte Carlo). It is entirely orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models. It can be used as a method of reconstructing phylogenies but is also a framework for testing evolutionary hypotheses without conditioning on a single tree topology.",
                "homepage": "http://beast.bio.ed.ac.uk/"
            }
        ],
        "inputs": [
            "id",
            "xml",
            "beagle_params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"beast_gpu\"",
            "tag { \"BEAST2\" }",
            "publishDir \"${params.outdir}/beast\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Kraken": {
        "name_process": "Kraken",
        "string_process": "process Kraken {\n\n    tag { id }\n    label \"kraken2\"\n\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.report\"\n    publishDir \"$params.outdir/fastq\", pattern: \"$fq\"                                                                                                                                     \n\n    input:\n    tuple val(id), file(fq)\n    each file(db)\n\n    output:\n    tuple val(id), file(\"${id}.kraken\"), file(\"${id}.kraken.report\"), file(\"${id}.bracken\"), file(\"${id}.bracken.report\")\n\n    \"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.kraken --report ${id}.kraken.report $fq\n    bracken -d $db -i ${id}.kraken.report -o ${id}.bracken -w ${id}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.kraken --report ${id}.kraken.report $fq\n    bracken -d $db -i ${id}.kraken.report -o ${id}.bracken -w ${id}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "kraken2",
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/kraken2",
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "id",
            "fq",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"kraken2\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.report\"",
            "publishDir \"$params.outdir/fastq\", pattern: \"$fq\""
        ],
        "when": "",
        "stub": ""
    },
    "KrakenOnline": {
        "name_process": "KrakenOnline",
        "string_process": "\nprocess KrakenOnline {\n\n    tag { \"Batch $batch - $db\" }\n    label \"kraken2\"\n\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.report\"\n\n    input:\n    tuple val(id), file(fq), val(batch)\n    each file(db)\n\n    output:\n    tuple val(id), file(\"${id}.${batch}.kraken\"), file(\"${id}.${batch}.kraken.report\"), file(\"${id}.${batch}.bracken\"), file(\"${id}.${batch}.bracken.report\")\n\n    \"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.${batch}.kraken --report ${id}.${batch}.kraken.report $fq\n    bracken -d $db -i ${id}.${batch}.kraken.report -o ${id}.${batch}.bracken -w ${id}.${batch}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.${batch}.kraken --report ${id}.${batch}.kraken.report $fq\n    bracken -d $db -i ${id}.${batch}.kraken.report -o ${id}.${batch}.bracken -w ${id}.${batch}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "kraken2",
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/kraken2",
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "id",
            "batch",
            "fq",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"Batch $batch - $db\" }",
            "label \"kraken2\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.report\""
        ],
        "when": "",
        "stub": ""
    },
    "KrakenAssemblyOnline": {
        "name_process": "KrakenAssemblyOnline",
        "string_process": "\nprocess KrakenAssemblyOnline {\n\n    tag { \"Batch $batch - $db\" }\n    label \"kraken2\"\n\n    publishDir \"$params.outdir/assembly/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"\n    publishDir \"$params.outdir/assembly/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"\n    publishDir \"$params.outdir/assembly/kraken/$db\", mode: \"copy\", pattern: \"*.report\"\n\n    input:\n    tuple val(id), file(fq), val(batch)\n    each file(db)\n\n    output:\n    tuple val(id), file(\"${id}.${batch}.kraken\"), file(\"${id}.${batch}.kraken.report\"), file(\"${id}.${batch}.bracken\"), file(\"${id}.${batch}.bracken.report\")\n\n    \"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.${batch}.kraken --report ${id}.${batch}.kraken.report $fq\n    bracken -d $db -i ${id}.${batch}.kraken.report -o ${id}.${batch}.bracken -w ${id}.${batch}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.${batch}.kraken --report ${id}.${batch}.kraken.report $fq\n    bracken -d $db -i ${id}.${batch}.kraken.report -o ${id}.${batch}.bracken -w ${id}.${batch}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "kraken2",
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/kraken2",
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "id",
            "batch",
            "fq",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"Batch $batch - $db\" }",
            "label \"kraken2\"",
            "publishDir \"$params.outdir/assembly/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"",
            "publishDir \"$params.outdir/assembly/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"",
            "publishDir \"$params.outdir/assembly/kraken/$db\", mode: \"copy\", pattern: \"*.report\""
        ],
        "when": "",
        "stub": ""
    },
    "KrakenIllumina": {
        "name_process": "KrakenIllumina",
        "string_process": "\nprocess KrakenIllumina {\n\n    tag { id }\n    label \"kraken2\"\n\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"\n    publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.report\"\n\n    input:\n    tuple val(id), file(forward), file(reverse)\n    each file(db)\n\n    output:\n    tuple val(id), file(\"${id}.kraken\"), file(\"${id}.kraken.report\"), file(\"${id}.bracken\"), file(\"${id}.bracken.report\")\n\n    \"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.kraken --report ${id}.kraken.report --paired $forward $reverse\n    bracken -d $db -i ${id}.kraken.report -o ${id}.bracken -w ${id}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    kraken2 --db $db --threads $task.cpus --output ${id}.kraken --report ${id}.kraken.report --paired $forward $reverse\n    bracken -d $db -i ${id}.kraken.report -o ${id}.bracken -w ${id}.bracken.report -r $params.bracken_length -l $params.bracken_level -t $params.bracken_threshold\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "kraken2",
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/kraken2",
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "id",
            "forward",
            "reverse",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"kraken2\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.kraken\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.bracken\"",
            "publishDir \"$params.outdir/kraken/$db\", mode: \"copy\", pattern: \"*.report\""
        ],
        "when": "",
        "stub": ""
    },
    "CheckM": {
        "name_process": "CheckM",
        "string_process": "process CheckM {\n\n    tag { id }\n    label \"coverm\"\n\n    publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fa)\n    \n    output:\n    tuple val(id), file(\"${id}.checkm.txt\")\n\n    \"\"\"\n    checkm lineage_wf -x fa $PWD checkm_output\n    mv checkm_output/\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    checkm lineage_wf -x fa $PWD checkm_output\n    mv checkm_output/\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fa"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"coverm\"",
            "publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "EvaluateRandomForest": {
        "name_process": "EvaluateRandomForest",
        "string_process": "process EvaluateRandomForest {\n\n    label \"forest_evaluate\"\n    tag { \"$id\" }\n\n    memory { params.forest_evaluate_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 5\n\n    publishDir \"${params.outdir}/${ref}/evaluation/${eval_set}/evaluations\", mode: \"copy\", pattern: \"*.tsv\"\n\n    input:\n    tuple val(eval_set), val(id), val(ref), file(\"snippy/*\"), file(\"ont/*\"), file(\"ont/*\")\n    each file(model)\n\n    output:\n    tuple file(\"result/evaluation/${id}.${model.simpleName}.${eval_set}.${ref}_application_truth.tsv\"), file(\"result/evaluation/${id}.${model.simpleName}.${eval_set}.${ref}_classifier_truth.tsv\"), file(\"result/evaluation/${id}.${model.simpleName}.${eval_set}.${ref}_${params.caller}_truth.tsv\")\n    \n\n    \"\"\"\n    np variants forest-evaluate --prefix ${id}.${model.simpleName}.${eval_set}.${ref} --dir_snippy snippy/ --dir_ont ont/ --model $model --mask_weak $params.mask_weak --caller $params.caller --outdir result\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    np variants forest-evaluate --prefix ${id}.${model.simpleName}.${eval_set}.${ref} --dir_snippy snippy/ --dir_ont ont/ --model $model --mask_weak $params.mask_weak --caller $params.caller --outdir result\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "NPD"
        ],
        "tools_url": [
            "https://bio.tools/NPD"
        ],
        "tools_dico": [
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            }
        ],
        "inputs": [
            "eval_set",
            "id",
            "ref",
            "model"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"forest_evaluate\"",
            "tag { \"$id\" }",
            "memory { params.forest_evaluate_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/${ref}/evaluation/${eval_set}/evaluations\", mode: \"copy\", pattern: \"*.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "ProcessEvaluations": {
        "name_process": "ProcessEvaluations",
        "string_process": "\nprocess ProcessEvaluations {\n\n\n    label \"forest_evaluate\"\n    tag { \"$id\" }\n\n    memory { params.forest_evaluate_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/\", mode: \"copy\", pattern: \"model_evaluation.tsv\"\n    publishDir \"${params.outdir}/\", mode: \"copy\", pattern: \"${params.caller}_evaluation.tsv\"\n\n    input:\n    file(collected)\n\n    output:\n    file(\"*_evaluation.tsv\")\n\n    \"\"\"\n    np utils combine-df --dir . --glob \"*_application_truth.tsv\" --extract \"_application_truth.tsv\" --extract_split \".\" --extract_head \"id,model,eval_set,reference\" --output model_evaluation.tsv\n    np utils combine-df --dir . --glob \"*_classifier_truth.tsv\" --extract \"_classifier_truth.tsv\" --extract_split \".\" --extract_head \"id,model,eval_set,reference\" --output classfier_evaluation.tsv\n    np utils combine-df --dir . --glob \"*_${params.caller}_truth.tsv\" --extract \"_${params.caller}_truth.tsv\" --extract_split \".\" --extract_head \"id,model,eval_set,reference\" --clean --output ${params.caller}_evaluation.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    np utils combine-df --dir . --glob \"*_application_truth.tsv\" --extract \"_application_truth.tsv\" --extract_split \".\" --extract_head \"id,model,eval_set,reference\" --output model_evaluation.tsv\n    np utils combine-df --dir . --glob \"*_classifier_truth.tsv\" --extract \"_classifier_truth.tsv\" --extract_split \".\" --extract_head \"id,model,eval_set,reference\" --output classfier_evaluation.tsv\n    np utils combine-df --dir . --glob \"*_${params.caller}_truth.tsv\" --extract \"_${params.caller}_truth.tsv\" --extract_split \".\" --extract_head \"id,model,eval_set,reference\" --clean --output ${params.caller}_evaluation.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "NPD"
        ],
        "tools_url": [
            "https://bio.tools/NPD"
        ],
        "tools_dico": [
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            }
        ],
        "inputs": [
            "collected"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"forest_evaluate\"",
            "tag { \"$id\" }",
            "memory { params.forest_evaluate_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/\", mode: \"copy\", pattern: \"model_evaluation.tsv\"",
            "publishDir \"${params.outdir}/\", mode: \"copy\", pattern: \"${params.caller}_evaluation.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "RandomForestTraining": {
        "name_process": "RandomForestTraining",
        "string_process": "\nprocess RandomForestTraining {\n\n    label \"forest_training\"\n    tag { \"$model - $ref - Composite RFC\" }\n\n    memory { params.forest_train_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/${ref}/polishers/models\", mode: \"copy\", pattern: \"${model}_${ref}.composite.sav\"\n    publishDir \"${params.outdir}/${ref}/polishers/models\", mode: \"copy\", pattern: \"${model}_${ref}.qual.sav\"\n    publishDir \"${params.outdir}/${ref}/polishers/models\", mode: \"copy\", pattern: \"${model}_${ref}_model\"\n\n    input:\n    tuple val(model), val(ref), file(\"ont/*\"), file(\"ont/*\"), file(\"snippy/*\")\n\n    output:\n    tuple val(model), val(ref), file(\"${model}_${ref}.composite.sav\")\n    file(\"${model}_${ref}_model\")\n\n    \"\"\"\n    np variants forest-train --dir_snippy snippy/ --dir_ont ont/ --caller ${params.caller} --prefix ${model}_${ref} --test_size ${params.test_size} --outdir model\n    mv model/models/${model}_${ref}.composite.sav ${model}_${ref}.composite.sav \n    mv model/models/${model}_${ref}.qual.sav ${model}_${ref}.qual.sav \n    mv model/training ${model}_${ref}_model\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    np variants forest-train --dir_snippy snippy/ --dir_ont ont/ --caller ${params.caller} --prefix ${model}_${ref} --test_size ${params.test_size} --outdir model\n    mv model/models/${model}_${ref}.composite.sav ${model}_${ref}.composite.sav \n    mv model/models/${model}_${ref}.qual.sav ${model}_${ref}.qual.sav \n    mv model/training ${model}_${ref}_model\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "NPD"
        ],
        "tools_url": [
            "https://bio.tools/NPD"
        ],
        "tools_dico": [
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            }
        ],
        "inputs": [
            "model",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ref"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"forest_training\"",
            "tag { \"$model - $ref - Composite RFC\" }",
            "memory { params.forest_train_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/${ref}/polishers/models\", mode: \"copy\", pattern: \"${model}_${ref}.composite.sav\"",
            "publishDir \"${params.outdir}/${ref}/polishers/models\", mode: \"copy\", pattern: \"${model}_${ref}.qual.sav\"",
            "publishDir \"${params.outdir}/${ref}/polishers/models\", mode: \"copy\", pattern: \"${model}_${ref}_model\""
        ],
        "when": "",
        "stub": ""
    },
    "Fastp": {
        "name_process": "Fastp",
        "string_process": "process Fastp {\n\n    label \"fastp\"\n    tag { id }\n\n    input:\n    tuple val(id), file(forward), file(reverse)\n\n    output:\n    tuple val(id), file(\"${id}_1_qc.fq.gz\"), file(\"${id}_2_qc.fq.gz\")\n\n    \"\"\"\n    fastp -i $forward -I $reverse -o ${id}_1_qc.fq.gz -O ${id}_2_qc.fq.gz --thread $task.cpus\n    \"\"\"\n\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    fastp -i $forward -I $reverse -o ${id}_1_qc.fq.gz -O ${id}_2_qc.fq.gz --thread $task.cpus\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "id",
            "forward",
            "reverse"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"fastp\"",
            "tag { id }"
        ],
        "when": "",
        "stub": ""
    },
    "FastpTraining": {
        "name_process": "FastpTraining",
        "string_process": "\nprocess FastpTraining {\n\n    label \"fastp\"\n    tag { id }\n\n    input:\n    tuple val(model), val(id), file(forward), file(reverse), file(ont)\n\n    output:\n    tuple val(model), val(id), file(\"${id}_1_qc.fq.gz\"), file(\"${id}_2_qc.fq.gz\"), file(ont)\n\n    \"\"\"\n    fastp --in1 $forward --in2 $reverse --out1 ${id}_1_qc.fq.gz --out2 ${id}_2_qc.fq.gz --thread $task.cpus\n    \"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    fastp --in1 $forward --in2 $reverse --out1 ${id}_1_qc.fq.gz --out2 ${id}_2_qc.fq.gz --thread $task.cpus\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "model",
            "id",
            "forward",
            "reverse",
            "ont"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"fastp\"",
            "tag { id }"
        ],
        "when": "",
        "stub": ""
    },
    "FastpEvaluation": {
        "name_process": "FastpEvaluation",
        "string_process": "\nprocess FastpEvaluation {\n\n    label \"fastp\"\n    tag { id }\n\n    input:\n    tuple val(eval_set), val(id), file(forward), file(reverse)\n\n    output:\n    tuple val(eval_set), val(id), file(\"${id}_1_qc.fq.gz\"), file(\"${id}_2_qc.fq.gz\")\n\n    \"\"\"\n    fastp --in1 $forward --in2 $reverse --out1 ${id}_1_qc.fq.gz --out2 ${id}_2_qc.fq.gz --thread $task.cpus\n    \"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    fastp --in1 $forward --in2 $reverse --out1 ${id}_1_qc.fq.gz --out2 ${id}_2_qc.fq.gz --thread $task.cpus\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "eval_set",
            "id",
            "forward",
            "reverse"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"fastp\"",
            "tag { id }"
        ],
        "when": "",
        "stub": ""
    },
    "Medaka": {
        "name_process": "Medaka",
        "string_process": "process Medaka {\n\n    tag { id }\n    label \"medaka\"\n\n    memory { params.medaka_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 5\n\n    publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.medaka.fasta\"\n\n    input:\n    tuple val(id), file(racon_assembly), file(fastq)\n\n    output:\n    tuple val(id), file(\"${id}.medaka.fasta\")\n    \n    \"\"\" \n    medaka_consensus -i $fastq -d $racon_assembly -o racon_medaka -t $task.cpus -m $params.medaka_model\n    mv racon_medaka/consensus.fasta ${id}.medaka.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\" \n    medaka_consensus -i $fastq -d $racon_assembly -o racon_medaka -t $task.cpus -m $params.medaka_model\n    mv racon_medaka/consensus.fasta ${id}.medaka.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "racon_assembly",
            "fastq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"medaka\"",
            "memory { params.medaka_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.medaka.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "MedakaVariants": {
        "name_process": "MedakaVariants",
        "string_process": "\nprocess MedakaVariants {\n\n    label \"medaka\"\n    tag { \"$id\" }\n\n    memory { params.medaka_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 5\n\n    publishDir \"${params.outdir}/medaka\", mode: \"copy\", pattern: \"${id}.vcf\"\n    publishDir \"${params.outdir}/medaka\", mode: \"copy\", pattern: \"${id}.txt\"\n\n    input:\n    tuple val(id), file(fq)\n    file(reference)\n\n    output:\n    tuple val(id), file(\"${id}.vcf\"), file(\"${id}.txt\")\n    tuple val(id), file(bam), file(bai)\n\n    \"\"\"\n    medaka_haploid_variant --model $params.medaka_model --threads $task.cpus --output_dir vars $fq $reference\n    mv vars/consensus_to_ref.vcf ${id}_${coverage}.vcf\n    pysamstats -t variation_strand vars/calls_to_draft.bam -f $reference > ${id}_${coverage}.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    medaka_haploid_variant --model $params.medaka_model --threads $task.cpus --output_dir vars $fq $reference\n    mv vars/consensus_to_ref.vcf ${id}_${coverage}.vcf\n    pysamstats -t variation_strand vars/calls_to_draft.bam -f $reference > ${id}_${coverage}.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "id",
            "fq",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"medaka\"",
            "tag { \"$id\" }",
            "memory { params.medaka_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/medaka\", mode: \"copy\", pattern: \"${id}.vcf\"",
            "publishDir \"${params.outdir}/medaka\", mode: \"copy\", pattern: \"${id}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "MedakaTraining": {
        "name_process": "MedakaTraining",
        "string_process": "\nprocess MedakaTraining {\n\n    label \"medaka\"\n    tag { \"$model_name - $id - $reference\" }\n\n    memory { params.medaka_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 5\n\n    publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.vcf\"\n    publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.txt\"\n\n    input:\n    tuple val(model_name), val(id), val(ref), val(coverage), file(reference), file(fq), file(snippy_vcf)\n\n    output:\n    tuple val(model_name), val(ref), file(\"${id}_${coverage}.vcf\"), file(\"${id}_${coverage}.txt\"), file(snippy_vcf)\n\n\n    \"\"\"\n    medaka_haploid_variant --model $params.medaka_model --threads $task.cpus --output_dir vars $fq $reference\n    mv vars/consensus_to_ref.vcf ${id}_${coverage}.vcf\n    pysamstats -t variation_strand vars/calls_to_draft.bam -f $reference > ${id}_${coverage}.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    medaka_haploid_variant --model $params.medaka_model --threads $task.cpus --output_dir vars $fq $reference\n    mv vars/consensus_to_ref.vcf ${id}_${coverage}.vcf\n    pysamstats -t variation_strand vars/calls_to_draft.bam -f $reference > ${id}_${coverage}.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "model_name",
            "id",
            "ref",
            "coverage",
            "reference",
            "fq",
            "snippy_vcf"
        ],
        "nb_inputs": 7,
        "outputs": [
            "ref"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"medaka\"",
            "tag { \"$model_name - $id - $reference\" }",
            "memory { params.medaka_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.vcf\"",
            "publishDir \"${params.outdir}/${ref}/polishers/variants\", mode: \"copy\", pattern: \"${id}_${coverage}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "MedakaEvaluation": {
        "name_process": "MedakaEvaluation",
        "string_process": "\nprocess MedakaEvaluation {\n\n    label \"medaka\"\n    tag { \"$id - $reference\" }\n\n    memory { params.medaka_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }\n    maxRetries 5\n\n    publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/medaka\", mode: \"copy\", pattern: \"${id}.vcf\"\n    publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/medaka\", mode: \"copy\", pattern: \"${id}.txt\"\n\n    input:\n    tuple val(eval_set), val(id), file(fq)\n    each file(reference)\n\n    output:\n    tuple val(eval_set), val(id), val(\"${reference.simpleName}\"), file(\"${id}.vcf\"), file(\"${id}.txt\")\n\n\n    \"\"\"\n    medaka_haploid_variant --model $params.medaka_model --threads $task.cpus --output_dir vars $fq $reference\n    mv vars/consensus_to_ref.vcf ${id}.vcf\n    pysamstats -t variation_strand vars/calls_to_draft.bam -f $reference > ${id}.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    medaka_haploid_variant --model $params.medaka_model --threads $task.cpus --output_dir vars $fq $reference\n    mv vars/consensus_to_ref.vcf ${id}.vcf\n    pysamstats -t variation_strand vars/calls_to_draft.bam -f $reference > ${id}.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "pysamstats"
        ],
        "tools_url": [
            "https://bio.tools/pysamstats"
        ],
        "tools_dico": [
            {
                "name": "pysamstats",
                "uri": "https://bio.tools/pysamstats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Python utility for calculating statistics against genome position based on sequence alignments from a SAM, BAM or CRAM file.",
                "homepage": "https://github.com/alimanfoo/pysamstats"
            }
        ],
        "inputs": [
            "eval_set",
            "id",
            "fq",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"medaka\"",
            "tag { \"$id - $reference\" }",
            "memory { params.medaka_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..143 ? 'retry' : 'ignore' }",
            "maxRetries 5",
            "publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/medaka\", mode: \"copy\", pattern: \"${id}.vcf\"",
            "publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}/medaka\", mode: \"copy\", pattern: \"${id}.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "Racon": {
        "name_process": "Racon",
        "string_process": "\nprocess Racon {\n\n    tag { id }\n    label \"racon\"\n\n    input:\n    tuple val(id), file(assembly), file(fastq)\n\n    output:\n    tuple val(id), file(\"${id}.racon.fasta\"), file(fastq)\n\n    script:\n    \"\"\"\n    minimap2 -x map-ont -t $task.cpus $assembly $fastq > assembly_1.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_1.paf $assembly > assembly_consensus_1.fasta\n    minimap2 -x map-ont -t $task.cpus assembly_consensus_1.fasta $fastq > assembly_2.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_2.paf assembly_consensus_1.fasta > assembly_consensus_2.fasta\n    minimap2 -x map-ont -t $task.cpus assembly_consensus_2.fasta $fastq > assembly_3.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_3.paf assembly_consensus_2.fasta > assembly_consensus_3.fasta\n    minimap2 -x map-ont -t $task.cpus assembly_consensus_3.fasta $fastq > assembly_4.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_4.paf assembly_consensus_3.fasta > ${id}.racon.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    minimap2 -x map-ont -t $task.cpus $assembly $fastq > assembly_1.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_1.paf $assembly > assembly_consensus_1.fasta\n    minimap2 -x map-ont -t $task.cpus assembly_consensus_1.fasta $fastq > assembly_2.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_2.paf assembly_consensus_1.fasta > assembly_consensus_2.fasta\n    minimap2 -x map-ont -t $task.cpus assembly_consensus_2.fasta $fastq > assembly_3.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_3.paf assembly_consensus_2.fasta > assembly_consensus_3.fasta\n    minimap2 -x map-ont -t $task.cpus assembly_consensus_3.fasta $fastq > assembly_4.paf\n    racon -m 8 -x -6 -g -8 -w 500 -t $task.cpus $fastq assembly_4.paf assembly_consensus_3.fasta > ${id}.racon.fasta\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "id",
            "assembly",
            "fastq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"racon\""
        ],
        "when": "",
        "stub": ""
    },
    "TreeTime": {
        "name_process": "TreeTime",
        "string_process": "process TreeTime {\n\n    label \"treetime\"\n\n    publishDir \"${params.outdir}/treetime\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(tree), file(alignment)\n    file(meta_data)\n\n    output:\n    tuple val(id), file(tree), file(alignment), file(\"${id}_rate.txt\")\n    file(\"${id}_tt\")\n\n\n    \"\"\"\n    nanopath utils prepare-metadata -m $meta_data -p treetime -o treetime.meta\n    treetime --tree $tree --aln $alignment --dates treetime.meta --branch-length-mode auto \\\n    --covariation --coalescent skyline --confidence --outdir ${id}_tt\n    nanopath utils extract-rate -f ${id}_tt/molecular_clock.txt -p treetime -o ${id}_rate.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    nanopath utils prepare-metadata -m $meta_data -p treetime -o treetime.meta\n    treetime --tree $tree --aln $alignment --dates treetime.meta --branch-length-mode auto \\\n    --covariation --coalescent skyline --confidence --outdir ${id}_tt\n    nanopath utils extract-rate -f ${id}_tt/molecular_clock.txt -p treetime -o ${id}_rate.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "tree",
            "alignment",
            "meta_data"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"treetime\"",
            "publishDir \"${params.outdir}/treetime\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "RavenRegexOnline": {
        "name_process": "RavenRegexOnline",
        "string_process": "process RavenRegexOnline  {\n  \n    tag { \"Batch: $batch  - MAGs\" }\n    label \"raven\"\n\n    publishDir \"$params.outdir/assembly/raven\", mode: \"copy\", pattern: \"${id}.${batch}.*.fa\"\n\n    input:\n    tuple val(id), file(fq), val(batch)\n    file(assembly_update)                                                                          \n\n    output:\n    tuple val(id), file(\"${id}.${batch}.*.fa\"), val(batch)                                                                                          \n    \n    when:\n    batch % params.assembly_every == 0                                     \n\n    shell:\n\n                                                     \n\n    \"\"\"\n    np pathogen raven-mag -p $assembly_update --file_glob \"*\" --regex \"$params.read_regex\" --outdir workdir --raven_args \"$params.assembly_options\"\n    \n    for f in workdir/*.fa; do\n        group=\\$(basename \\$f .fa)\n        mv \\$f ${id}.${batch}.\\${group}.fa\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    np pathogen raven-mag -p $assembly_update --file_glob \"*\" --regex \"$params.read_regex\" --outdir workdir --raven_args \"$params.assembly_options\"\n    \n    for f in workdir/*.fa; do\n        group=\\$(basename \\$f .fa)\n        mv \\$f ${id}.${batch}.\\${group}.fa\n    done\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "NPD"
        ],
        "tools_url": [
            "https://bio.tools/NPD"
        ],
        "tools_dico": [
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            }
        ],
        "inputs": [
            "id",
            "batch",
            "fq",
            "assembly_update"
        ],
        "nb_inputs": 4,
        "outputs": [
            "batch"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"Batch: $batch - MAGs\" }",
            "label \"raven\"",
            "publishDir \"$params.outdir/assembly/raven\", mode: \"copy\", pattern: \"${id}.${batch}.*.fa\""
        ],
        "when": "batch % params.assembly_every == 0",
        "stub": ""
    },
    "RavenRegex": {
        "name_process": "RavenRegex",
        "string_process": "\nprocess RavenRegex {\n  \n    tag { \"$id\" }\n    label \"raven\"\n\n    publishDir \"$params.outdir/assembly/raven\", mode: \"copy\", pattern: \"${id}.*.fa\"\n\n    input:\n    tuple val(id), file(fq)\n    file(assembly_update)\n\n    output:\n    tuple val(id), file(\"${id}.*.fa\")                                                                                          \n    \n    shell:\n\n    \"\"\"\n    np pathogen raven-mag -p $assembly_update --file_glob \"*\" --regex \"$params.read_regex\" --outdir workdir --raven_args \"$params.assembly_options\"\n    for f in workdir/*.fa; do\n        group=\\$(basename \\$f .fa)\n        mv \\$f ${id}.\\${group}.fa\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    np pathogen raven-mag -p $assembly_update --file_glob \"*\" --regex \"$params.read_regex\" --outdir workdir --raven_args \"$params.assembly_options\"\n    for f in workdir/*.fa; do\n        group=\\$(basename \\$f .fa)\n        mv \\$f ${id}.\\${group}.fa\n    done\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "NPD"
        ],
        "tools_url": [
            "https://bio.tools/NPD"
        ],
        "tools_dico": [
            {
                "name": "NPD",
                "uri": "https://bio.tools/NPD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Neyman Pearson detection of microsaccades with maximum likelihood estimation of parameters.\n\nNeyman\u2013Pearson Detector (NPD) for saccadic eye movements.\n\nBy default, our algorithm reads in files X.csv and Y.csv, where the X and Y coordinates of the tracked eye-gaze positions are stored in each of the csv files. Data in the X.csv and Y.csv must be square matrices of same dimensions, and each trail of the tracked eye-gaze positions forms the rows of the input file. Our algorithm can perform the NPD on each row of the dataset independently",
                "homepage": "https://github.com/hz-zhu/NPD-micro-saccade-detection"
            }
        ],
        "inputs": [
            "id",
            "fq",
            "assembly_update"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"$id\" }",
            "label \"raven\"",
            "publishDir \"$params.outdir/assembly/raven\", mode: \"copy\", pattern: \"${id}.*.fa\""
        ],
        "when": "",
        "stub": ""
    },
    "Guppy": {
        "name_process": "Guppy",
        "string_process": "\nprocess Guppy {\n\n    tag { id }\n    label \"guppy\"\n\n    publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.telemetry\"\n    publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.summary\"\n    publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.fq\"\n    publishDir \"$params.outdir/guppy\", mode: 'symlink', pattern: \"${id}\"\n\n    input:\n    tuple val(id), file(path)\n\n    output:\n    tuple val(id), file(\"${id}.fq\")\n    tuple file(\"${id}.summary\"), file(\"${id}.telemetry\"), file(\"${id}\")\n\n    \"\"\"\n\n    if [[ -f $path ]]; then\n        if [[ ($path == *.tar.gz) ]]; then\n            mkdir fast5_in\n            tar -xfz $path -C fast5_in\n        elif [[  ($path == *.tar) ]]; then\n            mkdir fast5_in\n            tar -xf $path -C fast5_in\n        else\n            mkdir fast5_in\n            mv $path fast5_in\n        fi\n    elif [[ -d $path ]]; then\n        mv $path fast5_in\n    else\n        echo \"Error in parsing input\"\n        exit 1\n    fi\n\n    guppy_basecaller -i fast5_in -r -s $id -c $params.guppy_model -d \"$params.guppy_data\" -x \"$params.guppy_devices\" \"$params.guppy_params\" \\\n        --gpu_runners_per_device $params.runners_per_device --chunk_size $params.chunk_size \\\n        --chunks_per_runner $params.chunks_per_runner --num_callers $params.num_callers \\\n        --cpu_threads_per_caller $params.cpu_threads_per_caller\n\n    cat $id/*.fastq > ${id}.fq\n\n    mv $id/sequencing_telemetry.js ${id}.telemetry\n    mv $id/sequencing_summary.txt ${id}.summary\n    \"\"\"\n\n}",
        "nb_lignes_process": 48,
        "string_script": "\"\"\"\n\n    if [[ -f $path ]]; then\n        if [[ ($path == *.tar.gz) ]]; then\n            mkdir fast5_in\n            tar -xfz $path -C fast5_in\n        elif [[  ($path == *.tar) ]]; then\n            mkdir fast5_in\n            tar -xf $path -C fast5_in\n        else\n            mkdir fast5_in\n            mv $path fast5_in\n        fi\n    elif [[ -d $path ]]; then\n        mv $path fast5_in\n    else\n        echo \"Error in parsing input\"\n        exit 1\n    fi\n\n    guppy_basecaller -i fast5_in -r -s $id -c $params.guppy_model -d \"$params.guppy_data\" -x \"$params.guppy_devices\" \"$params.guppy_params\" \\\n        --gpu_runners_per_device $params.runners_per_device --chunk_size $params.chunk_size \\\n        --chunks_per_runner $params.chunks_per_runner --num_callers $params.num_callers \\\n        --cpu_threads_per_caller $params.cpu_threads_per_caller\n\n    cat $id/*.fastq > ${id}.fq\n\n    mv $id/sequencing_telemetry.js ${id}.telemetry\n    mv $id/sequencing_summary.txt ${id}.summary\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"guppy\"",
            "publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.telemetry\"",
            "publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.summary\"",
            "publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.fq\"",
            "publishDir \"$params.outdir/guppy\", mode: 'symlink', pattern: \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "GuppyBatch": {
        "name_process": "GuppyBatch",
        "string_process": "\nprocess GuppyBatch {\n\n    tag { id }\n    label \"guppy\"\n\n    publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.telemetry\"\n    publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.summary\"\n    publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.fq\"\n    publishDir \"$params.outdir/guppy\", mode: 'symlink', pattern: \"${id}\"\n\n    input:\n    tuple val(id), file(path)\n\n    output:\n    tuple val(id), file(\"${id}.fq\")\n    tuple file(\"${id}.summary\"), file(\"${id}.telemetry\"), file(\"${id}\")\n\n    \"\"\"\n    mkdir fast5_in\n    mv $path fast5_in\n\n    guppy_basecaller -i fast5_in -r -s $id -c $params.guppy_model -d \"$params.guppy_data\" -x \"$params.guppy_devices\" \"$params.guppy_params\" \\\n        --gpu_runners_per_device $params.runners_per_device --chunk_size $params.chunk_size \\\n        --chunks_per_runner $params.chunks_per_runner --num_callers $params.num_callers \\\n        --cpu_threads_per_caller $params.cpu_threads_per_caller\n\n    cat $id/*.fastq > ${id}.fq\n\n    mv $id/sequencing_telemetry.js ${id}.telemetry\n    mv $id/sequencing_summary.txt ${id}.summary\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "\"\"\"\n    mkdir fast5_in\n    mv $path fast5_in\n\n    guppy_basecaller -i fast5_in -r -s $id -c $params.guppy_model -d \"$params.guppy_data\" -x \"$params.guppy_devices\" \"$params.guppy_params\" \\\n        --gpu_runners_per_device $params.runners_per_device --chunk_size $params.chunk_size \\\n        --chunks_per_runner $params.chunks_per_runner --num_callers $params.num_callers \\\n        --cpu_threads_per_caller $params.cpu_threads_per_caller\n\n    cat $id/*.fastq > ${id}.fq\n\n    mv $id/sequencing_telemetry.js ${id}.telemetry\n    mv $id/sequencing_summary.txt ${id}.summary\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"guppy\"",
            "publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.telemetry\"",
            "publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.summary\"",
            "publishDir \"$params.outdir/guppy\", mode: 'copy', pattern: \"*.fq\"",
            "publishDir \"$params.outdir/guppy\", mode: 'symlink', pattern: \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "MinimapONT": {
        "name_process": "MinimapONT",
        "string_process": "process MinimapONT {\n\n    label \"minimap2\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/minimap2\", mode: \"symlink\"\n\n    input:\n    tuple val(id), file(fastq)\n    file(reference)\n\n    output:\n    tuple val(id), file(\"${id}.bam\"), file(\"${id}.bam.bai\")\n\n    \"\"\"\n    minimap2 -t $task.cpus -ax map-ont $reference $fastq | samtools sort | samtools view -Sb > ${id}.bam\n    samtools index ${id}.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    minimap2 -t $task.cpus -ax map-ont $reference $fastq | samtools sort | samtools view -Sb > ${id}.bam\n    samtools index ${id}.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "id",
            "fastq",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"minimap2\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/minimap2\", mode: \"symlink\""
        ],
        "when": "",
        "stub": ""
    },
    "MinimapTraining": {
        "name_process": "MinimapTraining",
        "string_process": "\nprocess MinimapTraining {\n\n    label \"minimap2\"\n    tag { \"$model_name - $id - $reference\" }\n\n    publishDir \"${params.outdir}/${ref}/polishers/alignments\", mode: \"symlink\"\n \n    input:\n    tuple val(model_name), val(id), val(ref), val(coverage), file(reference), file(fq_cov), file(snippy_vcf)\n\n    output:\n    tuple val(model_name), val(id), val(ref), val(coverage), file(reference), file(\"${id}_${coverage}.bam\"), file(\"${id}_${coverage}.bam.bai\"), file(snippy_vcf)\n\n    \"\"\"\n    minimap2 -t $task.cpus -ax map-ont $reference $fq_cov | samtools sort | samtools view -Sb > ${id}_${coverage}.bam\n    samtools index ${id}_${coverage}.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    minimap2 -t $task.cpus -ax map-ont $reference $fq_cov | samtools sort | samtools view -Sb > ${id}_${coverage}.bam\n    samtools index ${id}_${coverage}.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "model_name",
            "id",
            "ref",
            "coverage",
            "reference",
            "fq_cov",
            "snippy_vcf"
        ],
        "nb_inputs": 7,
        "outputs": [
            "coverage"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"minimap2\"",
            "tag { \"$model_name - $id - $reference\" }",
            "publishDir \"${params.outdir}/${ref}/polishers/alignments\", mode: \"symlink\""
        ],
        "when": "",
        "stub": ""
    },
    "MinimapEvaluation": {
        "name_process": "MinimapEvaluation",
        "string_process": "\nprocess MinimapEvaluation {\n\n    label \"minimap2\"\n    tag { \"$id - $reference\" }\n\n    memory { params.minimap_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}\", mode: \"symlink\"\n \n    input:\n    tuple val(eval_set), val(id), file(fq)\n    each file(reference)\n\n    output:\n    tuple val(eval_set), val(id), file(reference), file(\"${id}.bam\"), file(\"${id}.bam.bai\")\n\n                                                                                      \n                                           \n\n    \"\"\"\n    minimap2 -t $task.cpus -ax map-ont $reference $fq > tmp.sam \n    samtools sort tmp.sam | samtools view -Sb > ${id}.bam\n    samtools index ${id}.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    minimap2 -t $task.cpus -ax map-ont $reference $fq > tmp.sam \n    samtools sort tmp.sam | samtools view -Sb > ${id}.bam\n    samtools index ${id}.bam\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "eval_set",
            "id",
            "fq",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"minimap2\"",
            "tag { \"$id - $reference\" }",
            "memory { params.minimap_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"${params.outdir}/${reference.simpleName}/evaluation/${eval_set}\", mode: \"symlink\""
        ],
        "when": "",
        "stub": ""
    },
    "Bonito": {
        "name_process": "Bonito",
        "string_process": "\nprocess Bonito {\n\n                                                                      \n\n    tag { id }\n    label \"bonito\"\n\n    publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.summary\"\n    publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.fq\"\n\n    input:\n    tuple val(id), file(path)\n\n    output:\n    tuple val(id), file(\"${id}.fq\")\n    file(\"${id}.summary\")\n\n    \"\"\"\n    if [[ -f $path ]]; then\n        if [[ ($path == *.tar.gz) ]]; then\n            mkdir fast5_in\n            tar -xfz $path -C fast5_in\n        elif [[  ($path == *.tar) ]]; then\n            mkdir fast5_in\n            tar -xf $path -C fast5_in\n        else\n            mkdir fast5_in\n            mv $path fast5_in\n        fi\n    elif [[ -d $path ]]; then\n        mv $path fast5_in\n    else\n        echo \"Error in parsing input\"\n        exit 1\n    fi\n\n    bonito basecaller --device $params.bonito_device $params.bonito_params --fastq $params.bonito_model fast5_in > ${id}.fq\n    mv ${id}_summary.tsv ${id}.summary\n    \"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "\"\"\"\n    if [[ -f $path ]]; then\n        if [[ ($path == *.tar.gz) ]]; then\n            mkdir fast5_in\n            tar -xfz $path -C fast5_in\n        elif [[  ($path == *.tar) ]]; then\n            mkdir fast5_in\n            tar -xf $path -C fast5_in\n        else\n            mkdir fast5_in\n            mv $path fast5_in\n        fi\n    elif [[ -d $path ]]; then\n        mv $path fast5_in\n    else\n        echo \"Error in parsing input\"\n        exit 1\n    fi\n\n    bonito basecaller --device $params.bonito_device $params.bonito_params --fastq $params.bonito_model fast5_in > ${id}.fq\n    mv ${id}_summary.tsv ${id}.summary\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"bonito\"",
            "publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.summary\"",
            "publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.fq\""
        ],
        "when": "",
        "stub": ""
    },
    "BonitoBatch": {
        "name_process": "BonitoBatch",
        "string_process": "\nprocess BonitoBatch {\n\n    tag { id }\n    label \"bonito\"\n\n    publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.summary\"\n    publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.fq\"\n\n    input:\n    tuple val(id), file(path)\n\n    output:\n    tuple val(id), file(\"${id}.fq\")\n    file(\"${id}.summary\")\n\n    \"\"\"\n    mkdir fast5_in\n    mv $path fast5_in\n\n    bonito basecaller --device $params.bonito_device $params.bonito_params --fastq $params.bonito_model fast5_in > ${id}.fq\n    mv ${id}_summary.tsv ${id}.summary\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    mkdir fast5_in\n    mv $path fast5_in\n\n    bonito basecaller --device $params.bonito_device $params.bonito_params --fastq $params.bonito_model fast5_in > ${id}.fq\n    mv ${id}_summary.tsv ${id}.summary\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"bonito\"",
            "publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.summary\"",
            "publishDir \"$params.outdir/bonito\", mode: 'copy', pattern: \"*.fq\""
        ],
        "when": "",
        "stub": ""
    },
    "GraftM": {
        "name_process": "GraftM",
        "string_process": "process GraftM {\n\n    label \"graftm\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/graftm/$pkg\", mode: \"copy\", pattern: \"*\"\n\n    input:\n    tuple val(id), file(fwd), file(rev), val(pkg), file(graftm)\n\n    output:\n    file(\"${id}\")\n\n    \"\"\"\n    graftM graft --forward $fwd --reverse $rev --graftm_package $graftm --output_directory $id\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    graftM graft --forward $fwd --reverse $rev --graftm_package $graftm --output_directory $id\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "GraftM"
        ],
        "tools_url": [
            "https://bio.tools/graftm"
        ],
        "tools_dico": [
            {
                "name": "GraftM",
                "uri": "https://bio.tools/graftm",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2995",
                                    "term": "Sequence classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Nucleic acid feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Sequence feature detection (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Scalable, phylogenetically informed classification of genes within metagenomes.",
                "homepage": "https://pypi.org/project/graftm/"
            }
        ],
        "inputs": [
            "id",
            "pkg",
            "fwd",
            "rev",
            "graftm"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"graftm\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/graftm/$pkg\", mode: \"copy\", pattern: \"*\""
        ],
        "when": "",
        "stub": ""
    },
    "GraftMAG": {
        "name_process": "GraftMAG",
        "string_process": "\nprocess GraftMAG {\n\n    label \"graftm\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/graftm/$pkg\", mode: \"copy\", pattern: \"*\"\n\n    input:\n    tuple val(id), file(fa), val(pkg), file(graftm)\n\n    output:\n    file(\"${id}\")\n\n    \"\"\"\n    graftM graft --forward $fa --graftm_package $graftm --output_directory $id\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    graftM graft --forward $fa --graftm_package $graftm --output_directory $id\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "GraftM"
        ],
        "tools_url": [
            "https://bio.tools/graftm"
        ],
        "tools_dico": [
            {
                "name": "GraftM",
                "uri": "https://bio.tools/graftm",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2995",
                                    "term": "Sequence classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Nucleic acid feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Sequence feature detection (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Scalable, phylogenetically informed classification of genes within metagenomes.",
                "homepage": "https://pypi.org/project/graftm/"
            }
        ],
        "inputs": [
            "id",
            "pkg",
            "fa",
            "graftm"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"graftm\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/graftm/$pkg\", mode: \"copy\", pattern: \"*\""
        ],
        "when": "",
        "stub": ""
    },
    "ProkkaBacteria": {
        "name_process": "ProkkaBacteria",
        "string_process": "process ProkkaBacteria {\n\n    tag { id }\n    label \"prokka\"\n\n    publishDir \"$params.outdir/prokka\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(fasta)\n\n    output:\n    tuple val(id), file(\"${id}_prokka\")\n\n    \"\"\"\n    prokka --compliant --outdir ${id}_prokka \\\n        --locustag $locus_tag --prefix $locus_tag --kingdom Bacteria \\\n        --genus $params.genus --species $params.species --usegenus $fasta\n\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    prokka --compliant --outdir ${id}_prokka \\\n        --locustag $locus_tag --prefix $locus_tag --kingdom Bacteria \\\n        --genus $params.genus --species $params.species --usegenus $fasta\n\n    \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "id",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"prokka\"",
            "publishDir \"$params.outdir/prokka\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "SnippyFastq": {
        "name_process": "SnippyFastq",
        "string_process": " process SnippyFastq {\n\n        label \"snippy\"\n        tag { id }\n\n        publishDir \"${params.outdir}/snippy\", mode: \"symlink\", pattern: \"$id\"\n\n        input:\n        tuple val(id), file(forward), file(reverse)\n        file(reference)\n\n        output:\n        file(\"$id\")                       \n\n        \"\"\"\n        snippy --cpus $task.cpus --outdir $id --prefix $id --reference $reference --R1 $forward --R2 $reverse $params.snippy_params\n        \"\"\"\n\n    }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n        snippy --cpus $task.cpus --outdir $id --prefix $id --reference $reference --R1 $forward --R2 $reverse $params.snippy_params\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "id",
            "forward",
            "reverse",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"snippy\"",
            "tag { id }",
            "publishDir \"${params.outdir}/snippy\", mode: \"symlink\", pattern: \"$id\""
        ],
        "when": "",
        "stub": ""
    },
    "SnippyFasta": {
        "name_process": "SnippyFasta",
        "string_process": " process SnippyFasta {\n\n        label \"snippy\"\n        tag { id }\n\n        publishDir \"${params.outdir}/snippy\", mode: \"symlink\", pattern: \"$id\"\n\n        input:\n        tuple val(id), file(fasta)\n        file(reference)\n\n        output:\n        file(\"$id\")                       \n\n        \"\"\"\n        snippy --cpus $task.cpus --outdir $id --prefix $id --reference $reference --ctgs $fasta $params.snippy_params\n        \"\"\"\n\n    }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n        snippy --cpus $task.cpus --outdir $id --prefix $id --reference $reference --ctgs $fasta $params.snippy_params\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "id",
            "fasta",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"snippy\"",
            "tag { id }",
            "publishDir \"${params.outdir}/snippy\", mode: \"symlink\", pattern: \"$id\""
        ],
        "when": "",
        "stub": ""
    },
    "SnippyCore": {
        "name_process": "SnippyCore",
        "string_process": " process SnippyCore {\n\n        label \"snippy\"\n        tag { \"SnippyCore\" }\n\n        publishDir \"${params.outdir}/snippy_core\", mode: \"copy\", pattern: \"snp.core.vcf\"\n        publishDir \"${params.outdir}/snippy_core\", mode: \"copy\", pattern: \"snp.core.fasta\"\n        publishDir \"${params.outdir}/snippy_core\", mode: \"symlink\", pattern: \"wgs.core.fasta\"\n\n        input:\n        file(snippy_outputs)                                                \n        file(reference)\n\n        output:\n        file(\"wgs.core.fasta\")\n        file(\"snp.core.fasta\")\n        file(\"snp.core.vcf\")\n\n        \"\"\"\n        snippy-core --ref $reference --prefix core $snippy_outputs\n        mv core.aln snp.core.fasta\n        mv core.vcf snp.core.vcf\n        snippy-clean_full_aln core.full.aln > wgs.core.fasta\n        \"\"\"\n\n    }",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n        snippy-core --ref $reference --prefix core $snippy_outputs\n        mv core.aln snp.core.fasta\n        mv core.vcf snp.core.vcf\n        snippy-clean_full_aln core.full.aln > wgs.core.fasta\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snippy_outputs",
            "reference"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"snippy\"",
            "tag { \"SnippyCore\" }",
            "publishDir \"${params.outdir}/snippy_core\", mode: \"copy\", pattern: \"snp.core.vcf\"",
            "publishDir \"${params.outdir}/snippy_core\", mode: \"copy\", pattern: \"snp.core.fasta\"",
            "publishDir \"${params.outdir}/snippy_core\", mode: \"symlink\", pattern: \"wgs.core.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "SnippyTraining": {
        "name_process": "SnippyTraining",
        "string_process": " process SnippyTraining {\n        \n                                                                                             \n\n        label \"snippy\"\n        tag { id }\n\n        publishDir \"${params.outdir}/${ref}/polishers/snippy\", mode: \"symlink\", pattern: \"${id}.vcf\"\n\n        input:\n        tuple val(model), val(id), file(forward), file(reverse), file(ont)\n        each file(reference)\n\n        output:\n        tuple val(model), val(id), val(ref), file(reference), file(ont), file(\"${id}.vcf\") \n\n        script:\n\n        ref = reference.simpleName\n\n        \"\"\"\n        snippy --cpus $task.cpus --outdir ${id}_snippy --prefix $id --reference $reference --R1 $forward --R2 $reverse $params.snippy_params\n        mv ${id}_snippy/${id}.vcf . \n        \"\"\"\n\n    }",
        "nb_lignes_process": 24,
        "string_script": "        ref = reference.simpleName\n\n        \"\"\"\n        snippy --cpus $task.cpus --outdir ${id}_snippy --prefix $id --reference $reference --R1 $forward --R2 $reverse $params.snippy_params\n        mv ${id}_snippy/${id}.vcf . \n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "KOREF",
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/KOREF",
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "KOREF",
                "uri": "https://bio.tools/KOREF",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Chromosome-scale assembly comparison of the Korean Reference Genome KOREF from PromethION and PacBio with Hi-C mapping information.\n\nThe first Korean Reference Genome. KOREF_S means KOREF_Single.",
                "homepage": "http://koref.net"
            },
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "model",
            "id",
            "forward",
            "reverse",
            "ont",
            "reference"
        ],
        "nb_inputs": 6,
        "outputs": [
            "ref"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"snippy\"",
            "tag { id }",
            "publishDir \"${params.outdir}/${ref}/polishers/snippy\", mode: \"symlink\", pattern: \"${id}.vcf\""
        ],
        "when": "",
        "stub": ""
    },
    "SnippyEvaluation": {
        "name_process": "SnippyEvaluation",
        "string_process": " process SnippyEvaluation {\n        \n                                                                                             \n\n        label \"snippy\"\n        tag { id }\n\n        publishDir \"${params.outdir}/${reference.simpleName}/evaluation/$eval_set\", mode: \"copy\", pattern: \"${id}.ref.vcf\"\n\n        input:\n        tuple val(eval_set), val(id), file(forward), file(reverse)\n        each file(reference)\n\n        output:\n        tuple val(eval_set), val(id), val(\"${reference.simpleName}\"), file(\"${id}.ref.vcf\") \n\n\n        \"\"\"\n        snippy --cpus $task.cpus --outdir ${id}_snippy --prefix $id --reference $reference --R1 $forward --R2 $reverse $params.snippy_params\n        mv ${id}_snippy/${id}.vcf ${id}.ref.vcf\n        \"\"\"\n\n    }",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n        snippy --cpus $task.cpus --outdir ${id}_snippy --prefix $id --reference $reference --R1 $forward --R2 $reverse $params.snippy_params\n        mv ${id}_snippy/${id}.vcf ${id}.ref.vcf\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "eval_set",
            "id",
            "forward",
            "reverse",
            "reference"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"snippy\"",
            "tag { id }",
            "publishDir \"${params.outdir}/${reference.simpleName}/evaluation/$eval_set\", mode: \"copy\", pattern: \"${id}.ref.vcf\""
        ],
        "when": "",
        "stub": ""
    },
    "RAxML": {
        "name_process": "RAxML",
        "string_process": "process RAxML {\n\n    label \"raxml\"\n    tag { \"$params.raxml_model\" }\n\n    publishDir \"${params.outdir}/phylogeny\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(alignment)\n\n    output:\n    tuple val(id), file(\"${id}.newick\")\n\n    \"\"\"\n    raxml-ng --msa $alignment --model $params.raxml_model $params.raxml_params --threads $task.cpus --prefix rax --force\n    mv rax.raxml.bestTree ${id}.newick\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    raxml-ng --msa $alignment --model $params.raxml_model $params.raxml_params --threads $task.cpus --prefix rax --force\n    mv rax.raxml.bestTree ${id}.newick\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "RAxML-NG"
        ],
        "tools_url": [
            "https://bio.tools/RAxML-NG"
        ],
        "tools_dico": [
            {
                "name": "RAxML-NG",
                "uri": "https://bio.tools/RAxML-NG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0552",
                                    "term": "Phylogenetic tree bootstrapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
                "homepage": "https://raxml-ng.vital-it.ch/"
            }
        ],
        "inputs": [
            "id",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"raxml\"",
            "tag { \"$params.raxml_model\" }",
            "publishDir \"${params.outdir}/phylogeny\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Nanoq": {
        "name_process": "Nanoq",
        "string_process": "process Nanoq {\n    \n                                                      \n\n    tag { id }\n    label \"nanoq\"\n\n    publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}.filtered.fq\")\n\n    \"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l $params.length -q $params.quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    else\n        nanoq -f $fq -l $params.length -q $params.quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l $params.length -q $params.quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    else\n        nanoq -f $fq -l $params.length -q $params.quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"nanoq\"",
            "publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoqStatistics": {
        "name_process": "NanoqStatistics",
        "string_process": "\nprocess NanoqStatistics {\n    \n                                              \n\n    tag { id }\n    label \"nanoq\"\n\n    publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}.stats.txt\")\n\n    \"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l 0 -q 0 > /dev/null 2> ${id}.stats.txt\n    else\n        nanoq -f $fq -l 0 -q 0 > /dev/null 2> ${id}.stats.txt\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l 0 -q 0 > /dev/null 2> ${id}.stats.txt\n    else\n        nanoq -f $fq -l 0 -q 0 > /dev/null 2> ${id}.stats.txt\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"nanoq\"",
            "publishDir \"$params.outdir/ont/qc\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoqOnline": {
        "name_process": "NanoqOnline",
        "string_process": "\nprocess NanoqOnline {\n    \n                                                                 \n\n    tag { \"Batch $batch - $id\" }\n    label \"nanoq\"\n\n    publishDir \"$params.outdir/fastq/nanoq\", mode: \"copy\", pattern: \"${id}.${batch}.filtered.stats.txt\"\n    publishDir \"$params.outdir/fastq/nanoq\", mode: \"symlink\", pattern: \"${id}.${batch}.filtered.fq\"\n\n    input:\n    tuple val(id), file(fq), val(batch)\n\n    output:\n    tuple val(id), file(\"${id}.${batch}.filtered.fq\"), val(batch)\n    file(\"${id}.${batch}.filtered.stats.txt\")\n\n    \"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l $params.min_length -q $params.min_quality > ${id}.${batch}.filtered.fq 2> ${id}.${batch}.filtered.stats.txt\n    else\n        nanoq -f $fq -l $params.min_length -q $params.min_quality > ${id}.${batch}.filtered.fq 2> ${id}.${batch}.filtered.stats.txt\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l $params.min_length -q $params.min_quality > ${id}.${batch}.filtered.fq 2> ${id}.${batch}.filtered.stats.txt\n    else\n        nanoq -f $fq -l $params.min_length -q $params.min_quality > ${id}.${batch}.filtered.fq 2> ${id}.${batch}.filtered.stats.txt\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "batch",
            "fq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "batch"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"Batch $batch - $id\" }",
            "label \"nanoq\"",
            "publishDir \"$params.outdir/fastq/nanoq\", mode: \"copy\", pattern: \"${id}.${batch}.filtered.stats.txt\"",
            "publishDir \"$params.outdir/fastq/nanoq\", mode: \"symlink\", pattern: \"${id}.${batch}.filtered.fq\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoqOffline": {
        "name_process": "NanoqOffline",
        "string_process": "\nprocess NanoqOffline {\n    \n                                                      \n\n    tag { id }\n    label \"nanoq\"\n\n    publishDir \"$params.outdir/fastq/nanoq\", mode: \"symlink\", pattern: \"${id}.filtered.fq\"\n    publishDir \"$params.outdir/fastq/nanoq\", mode: \"copy\", pattern: \"${id}.filtered.stats.txt\"\n\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}.filtered.fq\")\n    file(\"${id}.filtered.stats.txt\")\n\n\n    \"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l $params.min_length -q $params.min_quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    else\n        nanoq -f $fq -l $params.min_length -q $params.min_quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    if [[ $fq == *.gz ]]\n    then\n        zcat $fq | nanoq -l $params.min_length -q $params.min_quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    else\n        nanoq -f $fq -l $params.min_length -q $params.min_quality > ${id}.filtered.fq 2> ${id}.filtered.stats.txt\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"nanoq\"",
            "publishDir \"$params.outdir/fastq/nanoq\", mode: \"symlink\", pattern: \"${id}.filtered.fq\"",
            "publishDir \"$params.outdir/fastq/nanoq\", mode: \"copy\", pattern: \"${id}.filtered.stats.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoqQcat": {
        "name_process": "NanoqQcat",
        "string_process": "\nprocess NanoqQcat {\n\n    tag { id }\n    label \"ont\"\n\n    publishDir \"$params.outdir/nanoq/$id\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(barcodes)\n\n    output:\n    tuple file(\"*.stats\"), file(\"*.qc.fq\")\n\n    \"\"\"\n    for fq in $barcodes/*.fastq;\n    do\n        barcode=\\$(basename \\$fq .fastq)\n        if [[ ($params.length == 0) && ($params.quality == 0) ]]\n        then\n            nanoq -f \\$fq -l $params.length -q $params.quality > /dev/null 2> \\$barcode.stats\n            ln -s \\$PWD/\\$fq \\$barcode.qc.fq\n        else\n            nanoq -f \\$fq -l $params.length -q $params.quality > \\$barcode.qc.fq 2> \\$barcode.stats\n        fi\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    for fq in $barcodes/*.fastq;\n    do\n        barcode=\\$(basename \\$fq .fastq)\n        if [[ ($params.length == 0) && ($params.quality == 0) ]]\n        then\n            nanoq -f \\$fq -l $params.length -q $params.quality > /dev/null 2> \\$barcode.stats\n            ln -s \\$PWD/\\$fq \\$barcode.qc.fq\n        else\n            nanoq -f \\$fq -l $params.length -q $params.quality > \\$barcode.qc.fq 2> \\$barcode.stats\n        fi\n    done\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "id",
            "barcodes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"ont\"",
            "publishDir \"$params.outdir/nanoq/$id\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Qcat": {
        "name_process": "Qcat",
        "string_process": "process Qcat {\n\n    tag { id }\n    label \"ont\"\n\n    publishDir \"$params.outdir/qcat\", mode: \"copy\"\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}\")\n\n    \"\"\"\n    qcat -f $fq -b ${id} --trim $params.qcat_params\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    qcat -f $fq -b ${id} --trim $params.qcat_params\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "seqCAT"
        ],
        "tools_url": [
            "https://bio.tools/seqcat"
        ],
        "tools_dico": [
            {
                "name": "seqCAT",
                "uri": "https://bio.tools/seqcat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package uses variant calling data (in the form of VCF files) from high throughput sequencing technologies to authenticate and validate the source, function and characteristics of biological samples used in scientific endeavours.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/seqCAT.html"
            }
        ],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"ont\"",
            "publishDir \"$params.outdir/qcat\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Flye": {
        "name_process": "Flye",
        "string_process": "process Flye {\n    \n    tag { id }\n    label \"flye\"\n\n    memory { params.flye_mem * task.attempt }\n\n    errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.fasta\"\n    publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.gfa\"\n    publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}.fasta\")\n    tuple file(\"${id}.txt\"), file(\"${id}.gfa\")\n\n    \"\"\"\n    flye --nano-raw $fq $params.assembly_options -t $task.cpus -o assembly\n    mv assembly/assembly_info.txt ${id}.txt\n    mv assembly/assembly.fasta ${id}.fasta\n    mv assembly/assembly_graph.gfa ${id}.gfa\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    flye --nano-raw $fq $params.assembly_options -t $task.cpus -o assembly\n    mv assembly/assembly_info.txt ${id}.txt\n    mv assembly/assembly.fasta ${id}.fasta\n    mv assembly/assembly_graph.gfa ${id}.gfa\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { id }",
            "label \"flye\"",
            "memory { params.flye_mem * task.attempt }",
            "errorStrategy { task.exitStatus in 137..140 ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.fasta\"",
            "publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.gfa\"",
            "publishDir \"$params.outdir/ont/assembly\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "MetaFlye": {
        "name_process": "MetaFlye",
        "string_process": "\nprocess MetaFlye {\n    \n    tag { \"$id\" }\n    label \"flye\"\n\n    publishDir \"$params.outdir/assembly/metaflye\", mode: \"copy\", pattern: \"*.fasta\"\n    publishDir \"$params.outdir/assembly/metaflye\", mode: \"copy\", pattern: \"*.gfa\"\n    publishDir \"$params.outdir/assembly/metaflye\", mode: \"copy\", pattern: \"*.txt\"\n\n    input:\n    tuple val(id), file(fq)\n\n    output:\n    tuple val(id), file(\"${id}.fasta\") optional true                                                                    \n    tuple file(\"${id}.gfa\"), file(\"${id}.txt\") optional true\n\n    \"\"\"\n    flye --nano-raw $fq --meta $params.assembly_options -t $task.cpus -o assembly\n    \n    if [ -f assembly/assembly.fasta ]; then\n        mv assembly/assembly_info.txt ${id}.txt\n        mv assembly/assembly.fasta ${id}.fasta\n        mv assembly/assembly_graph.gfa ${id}.gfa\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    flye --nano-raw $fq --meta $params.assembly_options -t $task.cpus -o assembly\n    \n    if [ -f assembly/assembly.fasta ]; then\n        mv assembly/assembly_info.txt ${id}.txt\n        mv assembly/assembly.fasta ${id}.fasta\n        mv assembly/assembly_graph.gfa ${id}.gfa\n    fi\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "id",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "tag { \"$id\" }",
            "label \"flye\"",
            "publishDir \"$params.outdir/assembly/metaflye\", mode: \"copy\", pattern: \"*.fasta\"",
            "publishDir \"$params.outdir/assembly/metaflye\", mode: \"copy\", pattern: \"*.gfa\"",
            "publishDir \"$params.outdir/assembly/metaflye\", mode: \"copy\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "MetaWrapQC": {
        "name_process": "MetaWrapQC",
        "string_process": "process MetaWrapQC {\n\n    label \"metawrap_qc\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"READ_QC\"\n\n    input:\n    tuple val(id), file(fwd), file(rev)\n\n    output:\n    tuple val(id), file(\"READ_QC/final_pure_reads_1.fastq\"), file(\"READ_QC/final_pure_reads_2.fastq\")\n\n    \"\"\"\n    metawrap read_qc -1 $fwd -2 $rev -t $task.cpus -o READ_QC/ $params.qc_options\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    metawrap read_qc -1 $fwd -2 $rev -t $task.cpus -o READ_QC/ $params.qc_options\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fwd",
            "rev"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"metawrap_qc\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"READ_QC\""
        ],
        "when": "",
        "stub": ""
    },
    "MetaWrapAssembly": {
        "name_process": "MetaWrapAssembly",
        "string_process": "\nprocess MetaWrapAssembly {\n\n    label \"metawrap_assembly\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"ASSEMBLY\"\n\n    input:\n    tuple val(id), file(fwd), file(rev)\n\n    output:\n    tuple val(id), file(\"ASSEMBLY/final_assembly.fasta\")\n\n    script:\n\n    \"\"\"\n    metawrap assembly -1 $fwd -2 $rev -m $params.assembly_memory -t $task.cpus $params.assembly_options -o ASSEMBLY\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    metawrap assembly -1 $fwd -2 $rev -m $params.assembly_memory -t $task.cpus $params.assembly_options -o ASSEMBLY\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fwd",
            "rev"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"metawrap_assembly\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"ASSEMBLY\""
        ],
        "when": "",
        "stub": ""
    },
    "MetaWrapBinning": {
        "name_process": "MetaWrapBinning",
        "string_process": "\nprocess MetaWrapBinning {\n\n    label \"metawrap_binning\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"INITIAL_BINNING\"\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"BIN_REFINEMENT\"\n\n    input:\n    tuple val(id), file(assembly)\n    tuple val(id), file(fwd), file(rev)\n\n    output:\n    tuple val(id), file(\"BIN_REFINEMENT\")\n\n    \"\"\"\n    metawrap binning -o INITIAL_BINNING -t $task.cpus -a $assembly --metabat2 --maxbin2 --concoct $fwd $rev\n    metawrap bin_refinement -o BIN_REFINEMENT -t $task.cpus -A INITIAL_BINNING/metabat2_bins/ -B INITIAL_BINNING/maxbin2_bins/ -C INITIAL_BINNING/concoct_bins/ -c $params.completeness -x $params.contamination\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    metawrap binning -o INITIAL_BINNING -t $task.cpus -a $assembly --metabat2 --maxbin2 --concoct $fwd $rev\n    metawrap bin_refinement -o BIN_REFINEMENT -t $task.cpus -A INITIAL_BINNING/metabat2_bins/ -B INITIAL_BINNING/maxbin2_bins/ -C INITIAL_BINNING/concoct_bins/ -c $params.completeness -x $params.contamination\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "assembly",
            "id",
            "fwd",
            "rev"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"metawrap_binning\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"INITIAL_BINNING\"",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"BIN_REFINEMENT\""
        ],
        "when": "",
        "stub": ""
    },
    "MetaWrapBinAssembly": {
        "name_process": "MetaWrapBinAssembly",
        "string_process": "\nprocess MetaWrapBinAssembly {\n\n    label \"metawrap_binassembly\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"BIN_REASSEMBLY\"\n\n\n    input:\n    tuple val(id), file(bin_refinement)\n    tuple val(id), file(fwd), file(rev)\n\n    output:\n    tuple val(id), file(\"BIN_REASSEMBLY/\")\n\n    script:\n    \n    \"\"\"\n    metawrap reassemble_bins -o BIN_REASSEMBLY -1 $fwd -2 $rev -t $task.cpus -m $params.assembly_memory -c $params.completeness -x $params.contamination -b $bin_refinement/metawrap_${params.completeness}_${params.contamination}_bins\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    metawrap reassemble_bins -o BIN_REASSEMBLY -1 $fwd -2 $rev -t $task.cpus -m $params.assembly_memory -c $params.completeness -x $params.contamination -b $bin_refinement/metawrap_${params.completeness}_${params.contamination}_bins\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "bin_refinement",
            "id",
            "fwd",
            "rev"
        ],
        "nb_inputs": 5,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"metawrap_binassembly\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"BIN_REASSEMBLY\""
        ],
        "when": "",
        "stub": ""
    },
    "MetaWrapBinOps": {
        "name_process": "MetaWrapBinOps",
        "string_process": "\nprocess MetaWrapBinOps {\n\n    label \"metawrap_binops\"\n    tag { \"$id\" }\n\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"FUNCT_ANNOT\"\n    publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"INITIAL_BINNING\"\n\n\n    input:\n    tuple val(id), file(bin_reassembly)\n    tuple val(id), file(fwd), file(rev)\n\n    \"\"\"\n    metawrap classify_bins -b $bin_reassembly/reassembled_bins -o BIN_CLASSIFICATION -t $task.cpus\n    metawrap annotate_bins -o FUNCT_ANNOT -t $task.cpus -b $bin_reassembly/reassembled_bins/\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    metawrap classify_bins -b $bin_reassembly/reassembled_bins -o BIN_CLASSIFICATION -t $task.cpus\n    metawrap annotate_bins -o FUNCT_ANNOT -t $task.cpus -b $bin_reassembly/reassembled_bins/\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "bin_reassembly",
            "id",
            "fwd",
            "rev"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "np-core__modules",
        "directive": [
            "label \"metawrap_binops\"",
            "tag { \"$id\" }",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"FUNCT_ANNOT\"",
            "publishDir \"${params.outdir}/metawrap\", mode: \"symlink\", pattern: \"INITIAL_BINNING\""
        ],
        "when": "",
        "stub": ""
    }
}
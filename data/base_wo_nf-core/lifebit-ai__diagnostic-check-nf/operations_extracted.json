{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.input)\n    .ifEmpty { exit 1, \"Cannot find input file : ${params.input}\" }\n    .splitCsv(skip:1, by:2)\n    .map { row ->\n            def idPatient  = row[0][0]\n            if( row[0][2] == \"N\") {\n                idSampleNormal = row[0][1]\n                bamNormal = file(row[0][3])\n                baiNormal = file(row[0][4])\n                idSampleTumor = row[1][1]\n                bamTumor = file(row[1][3])\n                baiTumor = file(row[1][4])\n            } else {\n                idSampleNormal = row[1][1]\n                bamNormal = file(row[1][3])\n                baiNormal = file(row[1][4])\n                idSampleTumor = row[0][1]\n                bamTumor = file(row[0][3])\n                baiTumor = file(row[0][4])\n            }\n           [idPatient, idSampleNormal, bamNormal, baiNormal, idSampleTumor, bamTumor, baiTumor]\n        }\n    .into { pairBamManta; pairBamStrelka }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "pairBamManta",
                "P"
            ],
            [
                "pairBamStrelka",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_fasta = Channel.value(file(params.genome_fasta))",
        "origin": [],
        "gives": [
            [
                "ch_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_fai = Channel.value(file(params.genome_fasta_fai))",
        "origin": [],
        "gives": [
            [
                "ch_fai",
                "P"
            ]
        ]
    }
}
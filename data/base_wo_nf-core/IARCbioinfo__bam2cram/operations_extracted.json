{
    "OPERATION_1": {
        "string": "ch_fasta = Channel.value(file(params.fasta)).ifEmpty{exit 1, \"Fasta file not found: ${params.fasta}\"}",
        "origin": [],
        "gives": [
            [
                "ch_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_fai = Channel.value(file(params.fai)).ifEmpty{exit 1, \"fai index file not found: ${params.fai}\"}",
        "origin": [],
        "gives": [
            [
                "ch_fai",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(file(params.bam_csv)).splitCsv(header: true, sep: '\\t', strip: true)\n                      .map{row -> [ row.label, file(row.bam), file(row.index)]}\n                      .ifEmpty{exit 1, \"params.bams_csv was empty - no input files supplied\" }\n                      .into { inputbams; bamstats; sizebams }",
        "origin": [
            [
                "file(params.bam_csv",
                "A"
            ]
        ],
        "gives": [
            [
                "inputbams",
                "P"
            ],
            [
                "bamstats",
                "P"
            ],
            [
                "sizebams",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "bams = Channel.fromPath( params.bams+'/*.bam' )\n                .map {path -> [ path.name.replace(\".bam\",\"\"),path]}",
        "origin": [
            [
                "params.bams+'/*.bam'",
                "A"
            ]
        ],
        "gives": [
            [
                "bams",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "bams_index = Channel.fromPath( params.bams+'/*.bam.bai')\n                .map {  path -> [ path.name.replace(\".bam.bai\",\"\"), path ] }",
        "origin": [
            [
                "params.bams+'/*.bam.bai'",
                "A"
            ]
        ],
        "gives": [
            [
                "bams_index",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "params.collect{ k,v -> \"${k.padRight(18)}: $v\"}.join(\"\\n\")",
        "origin": [
            [
                "params",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "files = bams.join(bams_index)",
        "origin": [
            [
                "bams",
                "P"
            ],
            [
                "bams_index",
                "P"
            ]
        ],
        "gives": [
            [
                "files",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "files.into {inputbams; bamstats; sizebams}",
        "origin": [
            [
                "files",
                "P"
            ]
        ],
        "gives": [
            [
                "inputbams",
                "P"
            ],
            [
                "bamstats",
                "P"
            ],
            [
                "sizebams",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "cram_bam_size = sizecrams.join(sizebams)",
        "origin": [
            [
                "sizecrams",
                "P"
            ],
            [
                "sizebams",
                "P"
            ]
        ],
        "gives": [
            [
                "cram_bam_size",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "cram_bam_qc = cram_qc.join(bam_qc)",
        "origin": [
            [
                "cram_qc",
                "P"
            ],
            [
                "bam_qc",
                "P"
            ]
        ],
        "gives": [
            [
                "cram_bam_qc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "report_qc.collectFile(name: 'bam2cram_summary.txt', storeDir: params.output_folder, seed: 'ID\\tflagstat\\tstats\\tBAM_size\\tCRAM_size\\n', newLine: false, skip: 1)",
        "origin": [
            [
                "report_qc",
                "P"
            ]
        ],
        "gives": []
    }
}
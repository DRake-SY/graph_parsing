{
    "make_ANNOVAR_db": {
        "name_process": "make_ANNOVAR_db",
        "string_process": "\nprocess make_ANNOVAR_db {\n    tag \"${downdb_param}-${protocol_param}\"\n    echo true\n\n    storeDir \"${params.ANNOVAR_DB_DIR}\"\n\n    input:\n    set val(downdb_param), val(output_file), val(protocol_param), file(annovar_db_dir) from annovar_params.combine(annovar_db_dir)\n\n    output:\n    file(output_name)\n\n    script:\n    output_name = \"${params.ANNOVAR_BUILD_VERSION}_${output_file}\"\n    \"\"\"\n    annotate_variation.pl \\\n    -downdb \\\n    -buildver ${params.ANNOVAR_BUILD_VERSION} \\\n    -webfrom annovar \\\n    \"${downdb_param}\" \\\n    \"${annovar_db_dir}\"\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    output_name = \"${params.ANNOVAR_BUILD_VERSION}_${output_file}\"\n    \"\"\"\n    annotate_variation.pl \\\n    -downdb \\\n    -buildver ${params.ANNOVAR_BUILD_VERSION} \\\n    -webfrom annovar \\\n    \"${downdb_param}\" \\\n    \"${annovar_db_dir}\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annovar_params",
            "annovar_db_dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "output_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${downdb_param}-${protocol_param}\"",
            "echo true",
            "storeDir \"${params.ANNOVAR_DB_DIR}\""
        ],
        "when": "",
        "stub": ""
    },
    "make_ref": {
        "name_process": "make_ref",
        "string_process": "\nprocess make_ref {\n    echo true\n    storeDir \"${params.ref_dir}\"\n\n    input:\n    val(foo) from input_channel\n\n    output:\n    file(\"iGenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa\")\n    file(\"iGenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.dict\")\n    file(\"iGenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa.fai\")\n\n    script:\n    \"\"\"\n    wget https://genome.med.nyu.edu/results/external/NYU/snuderllab/ref.tar.gz\n\ttar -xvzf ref.tar.gz ref/iGenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta\n\trm -f ref.tar.gz\n    mv ref/iGenomes .\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    wget https://genome.med.nyu.edu/results/external/NYU/snuderllab/ref.tar.gz\n\ttar -xvzf ref.tar.gz ref/iGenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta\n\trm -f ref.tar.gz\n    mv ref/iGenomes .\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_channel"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "echo true",
            "storeDir \"${params.ref_dir}\""
        ],
        "when": "",
        "stub": ""
    },
    "unzip_samples": {
        "name_process": "unzip_samples",
        "string_process": "\nprocess unzip_samples {\n                             \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/unzip_samples\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf) from sample_variants_zipped.concat(pairs_variants_zipped)\n\n    output:\n    set val(caller), val(sampleID), file(\"${prefix}.vcf\") into sample_variants\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    \"\"\"\n    gunzip -c \"${sample_vcf}\" > \"${prefix}.vcf\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    \"\"\"\n    gunzip -c \"${sample_vcf}\" > \"${prefix}.vcf\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_variants_zipped",
            "pairs_variants_zipped"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_variants"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/unzip_samples\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "normalize_vcf": {
        "name_process": "normalize_vcf",
        "string_process": "\nprocess normalize_vcf {\n                                          \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/normalize_vcf\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf), file(ref_fasta) from sample_variants.combine(ref_fasta)\n\n    output:\n    set val(caller), val(sampleID), file(\"${prefix}.norm.vcf\") into (normalized_variants, normalized_variants2)\n    file(\"${prefix}.bcftools.multiallelics.stats.txt\")\n    file(\"${prefix}.bcftools.realign.stats.txt\")\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    \"\"\"\n    cat ${sample_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${prefix}.bcftools.multiallelics.stats.txt\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${prefix}.bcftools.realign.stats.txt\" > \\\n    \"${prefix}.norm.vcf\"\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    \"\"\"\n    cat ${sample_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${prefix}.bcftools.multiallelics.stats.txt\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${prefix}.bcftools.realign.stats.txt\" > \\\n    \"${prefix}.norm.vcf\"\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_variants",
            "ref_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/normalize_vcf\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "filter_vcf": {
        "name_process": "filter_vcf",
        "string_process": "\nprocess filter_vcf {\n                             \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/filter_vcf\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf), file(ref_fasta), file(ref_fai), file(ref_dict) from normalized_variants2.combine(ref_fasta2).combine(ref_fai2).combine(ref_dict2)\n\n    output:\n    set val(caller), val(sampleID), file(\"${prefix}.filtered.vcf\") into filtered_vcfs\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        # report if\n        # alternate allele freq (allele depth / depth) greater than 0.5\n        # more than 5 variant call supporting reads\n        # quality reads present (reported depth >0)\n        gatk.sh -T SelectVariants \\\n            -R \"${ref_fasta}\" \\\n            -V \"${sample_vcf}\" \\\n            --sample_name \"${sampleID}\" \\\n            -select \"vc.getGenotype('${sampleID}').getAD().1 / vc.getGenotype('${sampleID}').getDP() > 0.50\" \\\n            -select \"vc.getGenotype('${sampleID}').getAD().1 > 5\" \\\n            -select \"vc.getGenotype('${sampleID}').getDP() > 0\" \\\n            > \"${prefix}.filtered.vcf\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        # do not report if frequency is less than 1%\n        gatk.sh -T SelectVariants \\\n                -R \"${ref_fasta}\" \\\n                -V \"${sample_vcf}\" \\\n                -select \"AF > 0.01\"  \\\n                > \"${prefix}.filtered.vcf\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        # report if\n        # T frequency is more than 3%\n        # N frequency is less than 5%\n        # at least 5 variant call supporting reads\n        # T frequency is sufficiently higher than N frequency # \"we recommend applying post-processing filters, e.g. by hard-filtering calls with low minor allele frequencies\"\n        # only 'PASS' entries\n        gatk.sh -T SelectVariants \\\n                -R \"${ref_fasta}\" \\\n                -V \"${sample_vcf}\" \\\n                -select \"(vc.getGenotype('TUMOR').getAD().1 / (vc.getGenotype('TUMOR').getAD().0 + vc.getGenotype('TUMOR').getAD().1) )  > 0.03\" \\\n                -select \"(vc.getGenotype('NORMAL').getAD().1 / (vc.getGenotype('NORMAL').getAD().0 + vc.getGenotype('NORMAL').getAD().1) )  > 0.05\" \\\n                -select \"vc.getGenotype('TUMOR').getAD().1 > 5\" \\\n                -select \"(vc.getGenotype('TUMOR').getAD().1 / (vc.getGenotype('TUMOR').getAD().0 + vc.getGenotype('TUMOR').getAD().1) ) > (vc.getGenotype('NORMAL').getAD().1 / (vc.getGenotype('NORMAL').getAD().0 + vc.getGenotype('NORMAL').getAD().1) ) * 5\" \\\n                -select 'vc.isNotFiltered()' \\\n                > \"${prefix}.filtered.vcf\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        # report if\n        # alternate allele freq (allele depth / depth) greater than 0.5\n        # more than 5 variant call supporting reads\n        # quality reads present (reported depth >0)\n        gatk.sh -T SelectVariants \\\n            -R \"${ref_fasta}\" \\\n            -V \"${sample_vcf}\" \\\n            --sample_name \"${sampleID}\" \\\n            -select \"vc.getGenotype('${sampleID}').getAD().1 / vc.getGenotype('${sampleID}').getDP() > 0.50\" \\\n            -select \"vc.getGenotype('${sampleID}').getAD().1 > 5\" \\\n            -select \"vc.getGenotype('${sampleID}').getDP() > 0\" \\\n            > \"${prefix}.filtered.vcf\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        # do not report if frequency is less than 1%\n        gatk.sh -T SelectVariants \\\n                -R \"${ref_fasta}\" \\\n                -V \"${sample_vcf}\" \\\n                -select \"AF > 0.01\"  \\\n                > \"${prefix}.filtered.vcf\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        # report if\n        # T frequency is more than 3%\n        # N frequency is less than 5%\n        # at least 5 variant call supporting reads\n        # T frequency is sufficiently higher than N frequency # \"we recommend applying post-processing filters, e.g. by hard-filtering calls with low minor allele frequencies\"\n        # only 'PASS' entries\n        gatk.sh -T SelectVariants \\\n                -R \"${ref_fasta}\" \\\n                -V \"${sample_vcf}\" \\\n                -select \"(vc.getGenotype('TUMOR').getAD().1 / (vc.getGenotype('TUMOR').getAD().0 + vc.getGenotype('TUMOR').getAD().1) )  > 0.03\" \\\n                -select \"(vc.getGenotype('NORMAL').getAD().1 / (vc.getGenotype('NORMAL').getAD().0 + vc.getGenotype('NORMAL').getAD().1) )  > 0.05\" \\\n                -select \"vc.getGenotype('TUMOR').getAD().1 > 5\" \\\n                -select \"(vc.getGenotype('TUMOR').getAD().1 / (vc.getGenotype('TUMOR').getAD().0 + vc.getGenotype('TUMOR').getAD().1) ) > (vc.getGenotype('NORMAL').getAD().1 / (vc.getGenotype('NORMAL').getAD().0 + vc.getGenotype('NORMAL').getAD().1) ) * 5\" \\\n                -select 'vc.isNotFiltered()' \\\n                > \"${prefix}.filtered.vcf\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "normalized_variants2",
            "ref_fasta2",
            "ref_fai2",
            "ref_dict2"
        ],
        "nb_inputs": 4,
        "outputs": [
            "filtered_vcfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/filter_vcf\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_2_tsv": {
        "name_process": "vcf_2_tsv",
        "string_process": "\nprocess vcf_2_tsv {\n                              \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/vcf_2_tsv\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf), file(ref_fasta), file(ref_fai), file(ref_dict) from filtered_vcfs.combine(ref_fasta3).combine(ref_fai3).combine(ref_dict3)\n\n    output:\n    set val(caller), val(sampleID), file(sample_vcf), file(\"${prefix}.tsv\") into vcf_tsvs\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        gatk.sh -T VariantsToTable \\\n        -R \"${ref_fasta}\" \\\n        -V \"${sample_vcf}\" \\\n        -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN \\\n        -GF AD -GF DP \\\n        -o \"${prefix}.tsv\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        gatk.sh -T VariantsToTable \\\n        -R \"${ref_fasta}\" \\\n        -V \"${sample_vcf}\" \\\n        -F CHROM -F POS -F ID -F REF -F ALT -F QUAL -F FILTER -F DP -F AF -F SB -F INDEL -F CONSVAR -F HRUN \\\n        -o \"${prefix}.tsv\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        gatk.sh -T VariantsToTable \\\n        -R \"${ref_fasta}\" \\\n        -V \"${sample_vcf}\" \\\n        -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n        -GF AD -GF DP -GF AF \\\n        -o \"${prefix}.tsv\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        gatk.sh -T VariantsToTable \\\n        -R \"${ref_fasta}\" \\\n        -V \"${sample_vcf}\" \\\n        -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN \\\n        -GF AD -GF DP \\\n        -o \"${prefix}.tsv\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        gatk.sh -T VariantsToTable \\\n        -R \"${ref_fasta}\" \\\n        -V \"${sample_vcf}\" \\\n        -F CHROM -F POS -F ID -F REF -F ALT -F QUAL -F FILTER -F DP -F AF -F SB -F INDEL -F CONSVAR -F HRUN \\\n        -o \"${prefix}.tsv\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        gatk.sh -T VariantsToTable \\\n        -R \"${ref_fasta}\" \\\n        -V \"${sample_vcf}\" \\\n        -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n        -GF AD -GF DP -GF AF \\\n        -o \"${prefix}.tsv\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filtered_vcfs",
            "ref_fasta3",
            "ref_fai3",
            "ref_dict3"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcf_tsvs"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/vcf_2_tsv\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "reformat_vcf_tsv": {
        "name_process": "reformat_vcf_tsv",
        "string_process": "\nprocess reformat_vcf_tsv {\n                                                                   \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/reformat_vcf_tsv\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf), file(sample_tsv) from vcf_tsvs\n\n    output:\n    set val(caller), val(sampleID), file(sample_vcf), file(\"${prefix}.reformat.tsv\") into vcfs_tsvs_reformat\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        # reformat and adjust the TSV table for consistency downstream\n        # add extra columns to the VCF TSV file for downstream\n        reformat-vcf-table.py -c GATKHC -s \"${sampleID}\" -i \"${sample_tsv}\" | \\\n        paste-col.py --header \"Sample\" -v \"${sampleID}\"  | \\\n        paste-col.py --header \"Run\" -v \"${params.runID}\" | \\\n        paste-col.py --header \"Results\" -v \"${resultsID}\" | \\\n        paste-col.py --header \"Location\" -v \"${current_dir_path}\" | \\\n        paste-col.py --header \"VariantCaller\" -v \"${caller}\" | \\\n        paste-col.py --header \"System\" -v \"${localhostname}\" > \\\n        \"${prefix}.reformat.tsv\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        reformat-vcf-table.py -c LoFreq -s \"${sampleID}\" -i \"${sample_tsv}\" | \\\n        paste-col.py --header \"Sample\" -v \"${sampleID}\"  | \\\n        paste-col.py --header \"Run\" -v \"${params.runID}\" | \\\n        paste-col.py --header \"Results\" -v \"${resultsID}\" | \\\n        paste-col.py --header \"Location\" -v \"${current_dir_path}\" | \\\n        paste-col.py --header \"VariantCaller\" -v \"${caller}\" | \\\n        paste-col.py --header \"System\" -v \"${localhostname}\" > \\\n        \"${prefix}.reformat.tsv\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        reformat-vcf-table.py -c MuTect2 -s \"${sampleID}\" -i \"${sample_tsv}\" | \\\n        paste-col.py --header \"Sample\" -v \"${sampleID}\"  | \\\n        paste-col.py --header \"Run\" -v \"${params.runID}\" | \\\n        paste-col.py --header \"Results\" -v \"${resultsID}\" | \\\n        paste-col.py --header \"Location\" -v \"${current_dir_path}\" | \\\n        paste-col.py --header \"VariantCaller\" -v \"${caller}\" | \\\n        paste-col.py --header \"System\" -v \"${localhostname}\" > \\\n        \"${prefix}.reformat.tsv\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        # reformat and adjust the TSV table for consistency downstream\n        # add extra columns to the VCF TSV file for downstream\n        reformat-vcf-table.py -c GATKHC -s \"${sampleID}\" -i \"${sample_tsv}\" | \\\n        paste-col.py --header \"Sample\" -v \"${sampleID}\"  | \\\n        paste-col.py --header \"Run\" -v \"${params.runID}\" | \\\n        paste-col.py --header \"Results\" -v \"${resultsID}\" | \\\n        paste-col.py --header \"Location\" -v \"${current_dir_path}\" | \\\n        paste-col.py --header \"VariantCaller\" -v \"${caller}\" | \\\n        paste-col.py --header \"System\" -v \"${localhostname}\" > \\\n        \"${prefix}.reformat.tsv\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        reformat-vcf-table.py -c LoFreq -s \"${sampleID}\" -i \"${sample_tsv}\" | \\\n        paste-col.py --header \"Sample\" -v \"${sampleID}\"  | \\\n        paste-col.py --header \"Run\" -v \"${params.runID}\" | \\\n        paste-col.py --header \"Results\" -v \"${resultsID}\" | \\\n        paste-col.py --header \"Location\" -v \"${current_dir_path}\" | \\\n        paste-col.py --header \"VariantCaller\" -v \"${caller}\" | \\\n        paste-col.py --header \"System\" -v \"${localhostname}\" > \\\n        \"${prefix}.reformat.tsv\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        reformat-vcf-table.py -c MuTect2 -s \"${sampleID}\" -i \"${sample_tsv}\" | \\\n        paste-col.py --header \"Sample\" -v \"${sampleID}\"  | \\\n        paste-col.py --header \"Run\" -v \"${params.runID}\" | \\\n        paste-col.py --header \"Results\" -v \"${resultsID}\" | \\\n        paste-col.py --header \"Location\" -v \"${current_dir_path}\" | \\\n        paste-col.py --header \"VariantCaller\" -v \"${caller}\" | \\\n        paste-col.py --header \"System\" -v \"${localhostname}\" > \\\n        \"${prefix}.reformat.tsv\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_tsvs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcfs_tsvs_reformat"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/reformat_vcf_tsv\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "annotate_vcf": {
        "name_process": "annotate_vcf",
        "string_process": "\nprocess annotate_vcf {\n                            \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/annotate_vcf\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf), file(sample_tsv), file(annovar_db_dir) from vcfs_tsvs_reformat_filtered.combine(annovar_db_dir)\n\n    output:\n    set val(caller), val(sampleID), file(sample_vcf), file(sample_tsv), file(annovar_output_txt), file(\"${prefix}.avinput.tsv\") into vcfs_tsvs_annotations\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    avinput_file = \"${prefix}.avinput\"\n    annovar_output_txt = \"${prefix}.${params.ANNOVAR_BUILD_VERSION}_multianno.txt\"\n    annovar_output_vcf = \"${prefix}.${params.ANNOVAR_BUILD_VERSION}_multianno.vcf\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        # make sure there are variants present, by checking the .TSV file; should have >1 line\n        # [ ! \"\\$( cat \"${sample_tsv}\" | wc -l )\" -gt 1 ] && echo \"ERROR: No variants present in ${sample_tsv}, skipping annotation...\" && exit 11 || :\n\n        # annovate\n        table_annovar.pl \"${sample_vcf}\" \"${annovar_db_dir}\" \\\n        --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n        --remove \\\n        --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n        --operation \"${params.ANNOVAR_OPERATION}\" \\\n        --nastring . \\\n        --vcfinput \\\n        --onetranscript \\\n        --outfile \"${prefix}\"\n\n        printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tAF\\tQuality\\tAD.ALT\\tCHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\n\" > \"${prefix}.avinput.tsv\"\n        cut -f1-14 ${avinput_file} >>  \"${prefix}.avinput.tsv\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        # make sure there are variants present, by checking the .TSV file; should have >1 line\n        [ ! \"\\$( cat \"${sample_tsv}\" | wc -l )\" -gt 1 ] && echo \"ERROR: No variants present in ${sample_tsv}, skipping annotation...\" && exit 11 || :\n\n        table_annovar.pl \"${sample_vcf}\" \"${annovar_db_dir}\" \\\n        --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n        --remove \\\n        --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n        --operation \"${params.ANNOVAR_OPERATION}\" \\\n        --nastring . \\\n        --vcfinput \\\n        --onetranscript \\\n        --outfile \"${prefix}\"\n\n        printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tId\\tQuality\\tDP\\tCHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\n\" > \"${prefix}.avinput.tsv\"\n        cut -f1-14 ${avinput_file} >>  \"${prefix}.avinput.tsv\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        # make sure there are variants present, by checking the .TSV file; should have >1 line\n        [ ! \"\\$( cat \"${sample_tsv}\" | wc -l )\" -gt 1 ] && echo \"ERROR: No variants present in ${sample_tsv}, skipping annotation...\" && exit 11 || :\n\n        table_annovar.pl \"${sample_vcf}\" \"${annovar_db_dir}\" \\\n        --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n        --remove \\\n        --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n        --operation \"${params.ANNOVAR_OPERATION}\" \\\n        --nastring . \\\n        --vcfinput \\\n        --onetranscript \\\n        --outfile \"${prefix}\"\n\n        # TODO: Need to check this! Need a MuTect2 .vcf with passing variants!\n        printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tId\\tQuality\\tDP\\tCHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\n\" > \"${prefix}.avinput.tsv\"\n        cut -f1-14 ${avinput_file} >>  \"${prefix}.avinput.tsv\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"\n}",
        "nb_lignes_process": 75,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    avinput_file = \"${prefix}.avinput\"\n    annovar_output_txt = \"${prefix}.${params.ANNOVAR_BUILD_VERSION}_multianno.txt\"\n    annovar_output_vcf = \"${prefix}.${params.ANNOVAR_BUILD_VERSION}_multianno.vcf\"\n    if( caller == 'HaplotypeCaller' )\n        \"\"\"\n        # make sure there are variants present, by checking the .TSV file; should have >1 line\n        # [ ! \"\\$( cat \"${sample_tsv}\" | wc -l )\" -gt 1 ] && echo \"ERROR: No variants present in ${sample_tsv}, skipping annotation...\" && exit 11 || :\n\n        # annovate\n        table_annovar.pl \"${sample_vcf}\" \"${annovar_db_dir}\" \\\n        --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n        --remove \\\n        --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n        --operation \"${params.ANNOVAR_OPERATION}\" \\\n        --nastring . \\\n        --vcfinput \\\n        --onetranscript \\\n        --outfile \"${prefix}\"\n\n        printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tAF\\tQuality\\tAD.ALT\\tCHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\n\" > \"${prefix}.avinput.tsv\"\n        cut -f1-14 ${avinput_file} >>  \"${prefix}.avinput.tsv\"\n        \"\"\"\n    else if( caller == 'LoFreq' )\n        \"\"\"\n        # make sure there are variants present, by checking the .TSV file; should have >1 line\n        [ ! \"\\$( cat \"${sample_tsv}\" | wc -l )\" -gt 1 ] && echo \"ERROR: No variants present in ${sample_tsv}, skipping annotation...\" && exit 11 || :\n\n        table_annovar.pl \"${sample_vcf}\" \"${annovar_db_dir}\" \\\n        --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n        --remove \\\n        --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n        --operation \"${params.ANNOVAR_OPERATION}\" \\\n        --nastring . \\\n        --vcfinput \\\n        --onetranscript \\\n        --outfile \"${prefix}\"\n\n        printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tId\\tQuality\\tDP\\tCHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\n\" > \"${prefix}.avinput.tsv\"\n        cut -f1-14 ${avinput_file} >>  \"${prefix}.avinput.tsv\"\n        \"\"\"\n    else if( caller == 'MuTect2' )\n        \"\"\"\n        # make sure there are variants present, by checking the .TSV file; should have >1 line\n        [ ! \"\\$( cat \"${sample_tsv}\" | wc -l )\" -gt 1 ] && echo \"ERROR: No variants present in ${sample_tsv}, skipping annotation...\" && exit 11 || :\n\n        table_annovar.pl \"${sample_vcf}\" \"${annovar_db_dir}\" \\\n        --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n        --remove \\\n        --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n        --operation \"${params.ANNOVAR_OPERATION}\" \\\n        --nastring . \\\n        --vcfinput \\\n        --onetranscript \\\n        --outfile \"${prefix}\"\n\n        # TODO: Need to check this! Need a MuTect2 .vcf with passing variants!\n        printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tId\\tQuality\\tDP\\tCHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\n\" > \"${prefix}.avinput.tsv\"\n        cut -f1-14 ${avinput_file} >>  \"${prefix}.avinput.tsv\"\n        \"\"\"\n    else\n        error \"Invalid caller: ${caller}\"",
        "nb_lignes_script": 61,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfs_tsvs_reformat_filtered",
            "annovar_db_dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "vcfs_tsvs_annotations"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/annotate_vcf\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "merge_tables": {
        "name_process": "merge_tables",
        "string_process": "\nprocess merge_tables {\n                                          \n    tag \"${caller}-${sampleID}\"\n    publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/analysis/merge_tables\", overwrite: true\n\n    input:\n    set val(caller), val(sampleID), file(sample_vcf), file(sample_tsv), file(annovar_txt), file(avinput_file) from vcfs_tsvs_annotations\n\n    output:\n    set val(caller), val(sampleID), file(\"${prefix}.annotations.tsv\") into merged_tables\n    file(\"${prefix}.annotations.tsv\") into merged_tables2\n\n    script:\n    prefix = \"${sampleID}.${caller}\"\n    \"\"\"\n    merge-vcf-tables.R \"${sample_tsv}\" \"${annovar_txt}\" \"${avinput_file}\" \"${prefix}.annotations.tmp\"\n    hash-col.py -i \"${prefix}.annotations.tmp\" -o \"${prefix}.annotations.tsv\" --header 'Hash' -k Chr Start End Ref Alt CHROM POS REF ALT Sample Run Results VariantCaller\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = \"${sampleID}.${caller}\"\n    \"\"\"\n    merge-vcf-tables.R \"${sample_tsv}\" \"${annovar_txt}\" \"${avinput_file}\" \"${prefix}.annotations.tmp\"\n    hash-col.py -i \"${prefix}.annotations.tmp\" -o \"${prefix}.annotations.tsv\" --header 'Hash' -k Chr Start End Ref Alt CHROM POS REF ALT Sample Run Results VariantCaller\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfs_tsvs_annotations"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_tables",
            "merged_tables2"
        ],
        "nb_outputs": 2,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "tag \"${caller}-${sampleID}\"",
            "publishDir \"${params.output_dir}/samples/${sampleID}/${caller}\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/analysis/merge_tables\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "collect_annotation_tables": {
        "name_process": "collect_annotation_tables",
        "string_process": "\nprocess collect_annotation_tables {\n    publishDir \"${params.output_dir}/analysis/collect_annotation_tables\", mode: 'copy', overwrite: true\n\n    input:\n    file('table*') from merged_tables2.collect()\n\n    output:\n    file('all_annotations.tsv')\n\n    script:\n    \"\"\"\n    concat-tables.py * > all_annotations.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    concat-tables.py * > all_annotations.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_tables2"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "stevekm__vcf-filter-annotate",
        "directive": [
            "publishDir \"${params.output_dir}/analysis/collect_annotation_tables\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
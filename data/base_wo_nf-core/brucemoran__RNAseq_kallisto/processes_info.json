{
    "endedness": {
        "name_process": "endedness",
        "string_process": "\nprocess endedness {\n\n  input:\n  file(txt) from sampleInputs\n\n  output:\n  file('inputs.txt') into sampleCsvInput\n\n  script:\n  \"\"\"\n  COUNT=\\$(head -n1 $txt | perl -ane '@s=split(/\\\\,/); print scalar(@s);')\n  if [[ \\$COUNT == 2 ]];then\n    echo \"sampleID,read1,read2\" > \"inputs.txt\"\n    tail -n+2 $txt | while read LINE; do\n      echo \\$LINE\",inputs.txt\" >> \"inputs.txt\"\n    done\n  else\n    cat $txt > \"inputs.txt\"\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  COUNT=\\$(head -n1 $txt | perl -ane '@s=split(/\\\\,/); print scalar(@s);')\n  if [[ \\$COUNT == 2 ]];then\n    echo \"sampleID,read1,read2\" > \"inputs.txt\"\n    tail -n+2 $txt | while read LINE; do\n      echo \\$LINE\",inputs.txt\" >> \"inputs.txt\"\n    done\n  else\n    cat $txt > \"inputs.txt\"\n  fi\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleInputs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sampleCsvInput"
        ],
        "nb_outputs": 1,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "bbduk": {
        "name_process": "bbduk",
        "string_process": "\nprocess bbduk {\n\n  input:\n  set val(sampleID), file(read1), file(read2) from bbduking\n\n  output:\n  set val(sampleID), file('*pre.fastq.gz') into fastppreing\n  set val(sampleID), file('*bbduk.fastq.gz') into (kallistoing, fastpposting)\n\n  script:\n  def taskmem = task.memory == null ? \"\" : \"-Xmx\" + javaTaskmem(\"${task.memory}\")\n  \"\"\"\n  {\n  TESTR2=\\$(echo ${read2} | perl -ane 'if(\\$_=~m/q.gz/){print \"FQ\";}')\n  if [[ \\$TESTR2 != \"FQ\" ]]; then\n   ln -s ${read1} ${sampleID}\".pre.fastq.gz\"\n   reformat.sh ${taskmem} \\\n      in=${sampleID}\".pre.fastq.gz\" \\\n      out=\"stdin.fastq\" \\\n      tossjunk=T | \\\n   bbduk.sh ${taskmem} \\\n      int=t \\\n      in=\"stdin.fastq\" \\\n      out=${sampleID}\".bbduk.fastq.gz\" \\\n      k=${params.bbdkmerx} \\\n      mink=${params.bbdmink} \\\n      hdist=1 \\\n      ktrim=r \\\n      trimq=${params.bbdqtrim} \\\n      qtrim=rl \\\n      maq=20 \\\n      ref=${params.bbmapAdapters} \\\n      tpe \\\n      tbo \\\n      stats=${sampleID}\".bbduk.adapterstats.txt\" \\\n      overwrite=T\n  else\n    ln -s ${read1} ${sampleID}\".R1.pre.fastq.gz\"\n    ln -s ${read2} ${sampleID}\".R2.pre.fastq.gz\"\n\n    reformat.sh ${taskmem} \\\n      in1=${sampleID}\".R1.pre.fastq.gz\" \\\n      in2=${sampleID}\".R2.pre.fastq.gz\" \\\n      out=\"stdout.fastq\" \\\n      tossjunk=T | \\\n    bbduk.sh ${taskmem} \\\n      int=t \\\n      in=\"stdin.fastq\" \\\n      out1=${sampleID}\".R1.bbduk.fastq.gz\" \\\n      out2=${sampleID}\".R2.bbduk.fastq.gz\" \\\n      k=${params.bbdkmerx} \\\n      mink=${params.bbdmink} \\\n      hdist=1 \\\n      ktrim=r \\\n      trimq=${params.bbdqtrim} \\\n      qtrim=rl \\\n      maq=20 \\\n      ref=${params.bbmapAdapters} \\\n      tpe \\\n      tbo \\\n      stats=${sampleID}\".bbduk.adapterstats.txt\" \\\n      overwrite=T\n  fi\n  } 2>&1 | tee ${sampleID}\".bbduk.runstats.txt\"\n  \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "  def taskmem = task.memory == null ? \"\" : \"-Xmx\" + javaTaskmem(\"${task.memory}\")\n  \"\"\"\n  {\n  TESTR2=\\$(echo ${read2} | perl -ane 'if(\\$_=~m/q.gz/){print \"FQ\";}')\n  if [[ \\$TESTR2 != \"FQ\" ]]; then\n   ln -s ${read1} ${sampleID}\".pre.fastq.gz\"\n   reformat.sh ${taskmem} \\\n      in=${sampleID}\".pre.fastq.gz\" \\\n      out=\"stdin.fastq\" \\\n      tossjunk=T | \\\n   bbduk.sh ${taskmem} \\\n      int=t \\\n      in=\"stdin.fastq\" \\\n      out=${sampleID}\".bbduk.fastq.gz\" \\\n      k=${params.bbdkmerx} \\\n      mink=${params.bbdmink} \\\n      hdist=1 \\\n      ktrim=r \\\n      trimq=${params.bbdqtrim} \\\n      qtrim=rl \\\n      maq=20 \\\n      ref=${params.bbmapAdapters} \\\n      tpe \\\n      tbo \\\n      stats=${sampleID}\".bbduk.adapterstats.txt\" \\\n      overwrite=T\n  else\n    ln -s ${read1} ${sampleID}\".R1.pre.fastq.gz\"\n    ln -s ${read2} ${sampleID}\".R2.pre.fastq.gz\"\n\n    reformat.sh ${taskmem} \\\n      in1=${sampleID}\".R1.pre.fastq.gz\" \\\n      in2=${sampleID}\".R2.pre.fastq.gz\" \\\n      out=\"stdout.fastq\" \\\n      tossjunk=T | \\\n    bbduk.sh ${taskmem} \\\n      int=t \\\n      in=\"stdin.fastq\" \\\n      out1=${sampleID}\".R1.bbduk.fastq.gz\" \\\n      out2=${sampleID}\".R2.bbduk.fastq.gz\" \\\n      k=${params.bbdkmerx} \\\n      mink=${params.bbdmink} \\\n      hdist=1 \\\n      ktrim=r \\\n      trimq=${params.bbdqtrim} \\\n      qtrim=rl \\\n      maq=20 \\\n      ref=${params.bbmapAdapters} \\\n      tpe \\\n      tbo \\\n      stats=${sampleID}\".bbduk.adapterstats.txt\" \\\n      overwrite=T\n  fi\n  } 2>&1 | tee ${sampleID}\".bbduk.runstats.txt\"\n  \"\"\"",
        "nb_lignes_script": 54,
        "language_script": "bash",
        "tools": [
            "TPES",
            "NetBox"
        ],
        "tools_url": [
            "https://bio.tools/TPES",
            "https://bio.tools/netbox"
        ],
        "tools_dico": [
            {
                "name": "TPES",
                "uri": "https://bio.tools/TPES",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tumor Purity Estimation from SNVs.",
                "homepage": "https://bitbucket.org/l0ka/tpes.git"
            },
            {
                "name": "NetBox",
                "uri": "https://bio.tools/netbox",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "NetBox is a Java-based software tool for performing network analysis on human interaction networks. It is pre-loaded with a Human Interaction Network (HIN) derived from four literature curated data sources, including the Human Protein Reference Database (HPRD), Reactome, NCI-Nature Pathway Interaction (PID) Database, and the MSKCC Cancer Cell Map.",
                "homepage": "http://cbio.mskcc.org/tools/netbox/index.html"
            }
        ],
        "inputs": [
            "bbduking"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastppreing",
            ""
        ],
        "nb_outputs": 2,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp {\n\n  input:\n  set val(sampleID), file(reads) from fastping\n\n  output:\n  file('*.json') into fastp_multiqc\n\n  script:\n  def prepost = \"${reads[0]}\" == \"${sampleID}.R1.bbduk.fastq.gz\" ? \"post\" : \"pre\"\n  def count = \"${reads[1]}\" == null ? \"single\" : \"paired\"\n  \"\"\"\n  if [[ ${count} == \"paired\" ]]; then\n    fastp -w ${task.cpus} \\\n      -j ${sampleID}.${prepost}.fastp.json \\\n      --in1 ${reads[0]} \\\n      --in2 ${reads[1]}\n  else\n    fastp -w ${task.cpus} \\\n      -j ${sampleID}.${prepost}.fastp.json \\\n      --in1 ${reads}\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  def prepost = \"${reads[0]}\" == \"${sampleID}.R1.bbduk.fastq.gz\" ? \"post\" : \"pre\"\n  def count = \"${reads[1]}\" == null ? \"single\" : \"paired\"\n  \"\"\"\n  if [[ ${count} == \"paired\" ]]; then\n    fastp -w ${task.cpus} \\\n      -j ${sampleID}.${prepost}.fastp.json \\\n      --in1 ${reads[0]} \\\n      --in2 ${reads[1]}\n  else\n    fastp -w ${task.cpus} \\\n      -j ${sampleID}.${prepost}.fastp.json \\\n      --in1 ${reads}\n  fi\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "fastping"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastp_multiqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "kallistondx": {
        "name_process": "kallistondx",
        "string_process": "\nprocess kallistondx {\n\n  output:\n  file('*.kallisto') into kallisto_index\n\n  script:\n  \"\"\"\n  if [[ ${params.kallistoindex} == \"null\" ]];then\n    wget ${params.cdna}\n    CDNA=\\$(ls)\n    kallisto index -i \\$CDNA\".kallisto\" \\$CDNA\n  else\n    ln -s ${params.kallistoindex} ${params.kallistoindex}\".kallisto\"\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  if [[ ${params.kallistoindex} == \"null\" ]];then\n    wget ${params.cdna}\n    CDNA=\\$(ls)\n    kallisto index -i \\$CDNA\".kallisto\" \\$CDNA\n  else\n    ln -s ${params.kallistoindex} ${params.kallistoindex}\".kallisto\"\n  fi\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "kallisto"
        ],
        "tools_url": [
            "https://bio.tools/kallisto"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "kallisto_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "kallisto": {
        "name_process": "kallisto",
        "string_process": "\nprocess kallisto {\n\n  publishDir \"${params.outDir}/samples\", mode: \"copy\"\n\n  input:\n  set sampleID, file(reads) from kallistoing\n  file(kallistoindex) from kallisto_index\n\n  output:\n  file(\"${sampleID}\") into de_kallisto\n  file(\"${sampleID}/kallisto/${sampleID}.kallisto.log.txt\") into kallisto_multiqc\n\n  script:\n  def stranding = params.stranded == \"\" ? \"\" : \"--${params.stranded}\"\n  \"\"\"\n  mkdir -p ${sampleID}/kallisto\n  {\n  COUNT=\\$(ls | grep fastq | wc -l)\n  if [[ \\$COUNT != 1 ]]; then\n    kallisto quant \\\n      -t 10 \\\n      -b 100 \\\n      -i ${kallistoindex} \\\n      -o ${sampleID}/kallisto ${stranding} ${reads}\n\n  else\n    kallisto quant \\\n      -t 10 \\\n      -b 100 \\\n      --single \\\n      -l 200 \\\n      -s 30\n      -i ${kallistoindex} \\\n      -o ${sampleID}/kallisto ${stranding} ${reads}\n  fi\n  } 2>&1 | tee > ${sampleID}/kallisto/${sampleID}\".kallisto.log.txt\"\n  \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "  def stranding = params.stranded == \"\" ? \"\" : \"--${params.stranded}\"\n  \"\"\"\n  mkdir -p ${sampleID}/kallisto\n  {\n  COUNT=\\$(ls | grep fastq | wc -l)\n  if [[ \\$COUNT != 1 ]]; then\n    kallisto quant \\\n      -t 10 \\\n      -b 100 \\\n      -i ${kallistoindex} \\\n      -o ${sampleID}/kallisto ${stranding} ${reads}\n\n  else\n    kallisto quant \\\n      -t 10 \\\n      -b 100 \\\n      --single \\\n      -l 200 \\\n      -s 30\n      -i ${kallistoindex} \\\n      -o ${sampleID}/kallisto ${stranding} ${reads}\n  fi\n  } 2>&1 | tee > ${sampleID}/kallisto/${sampleID}\".kallisto.log.txt\"\n  \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "kallisto"
        ],
        "tools_url": [
            "https://bio.tools/kallisto"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            }
        ],
        "inputs": [
            "kallistoing",
            "kallisto_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "de_kallisto",
            "kallisto_multiqc"
        ],
        "nb_outputs": 2,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [
            "publishDir \"${params.outDir}/samples\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "mltiqc": {
        "name_process": "mltiqc",
        "string_process": "\nprocess mltiqc {\n\n  publishDir \"${params.outDir}/multiqc\", mode: \"copy\", pattern: \"*\"\n\n  input:\n  file ('*') from multiqc_multiqc.collect()\n\n  output:\n  file('*') into completedmultiqc\n  file(\"${params.runID}.multiqc_report.html\") into sendmail_multiqc\n\n  script:\n  \"\"\"\n  multiqc -n ${params.runID}.multiqc_report.html -c ${params.multiqcConfig} -f .\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  multiqc -n ${params.runID}.multiqc_report.html -c ${params.multiqcConfig} -f .\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_multiqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "completedmultiqc",
            "sendmail_multiqc"
        ],
        "nb_outputs": 2,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [
            "publishDir \"${params.outDir}/multiqc\", mode: \"copy\", pattern: \"*\""
        ],
        "when": "",
        "stub": ""
    },
    "RNAseqR": {
        "name_process": "RNAseqR",
        "string_process": "\nprocess RNAseqR {\n\n  publishDir \"${params.outDir}\", mode: \"copy\", pattern: \"*[!.zip]\"\n  publishDir \"${params.outDir}/\", mode: \"copy\", pattern: \"*.zip\"\n\n  input:\n  file (kdirs) from de_kallisto.collect()\n\n  output:\n  tuple file(\"${params.runID}_RNAseqR\"), file(\"${params.runID}_RNAseqR.zip\") into completedRNAseqR\n\n  when:\n  params.metadataCsv && params.metadataDesign\n\n  script:\n  def control_ref = params.controlReference == null ? \"NULL\" : params.controlReference\n  def genome_pref = params.genomePrefix == null ? \"hsapiens\" : params.genomePrefix\n  \"\"\"\n  Rscript -e \"RNAseqR::run_prep_modules_bm(metadata_csv = \\\\\"${params.metadataCsv}\\\\\", metadata_design = \\\\\"${params.metadataDesign}\\\\\", tag = \\\\\"${params.runID}\\\\\", output_dir = \\\\\"${params.runID}_RNAseqR\\\\\", data_dir = NULL, control_reference = \\\\\"${control_ref}\\\\\", genome_prefix = \\\\\"${genome_pref}\\\\\", msigdb_species = \\\\\"${params.msigdbSpecies}\\\\\")\"\n  rm Rplots.pdf\n  zip -r ${params.runID}_RNAseqR.zip ${params.runID}_RNAseqR\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  def control_ref = params.controlReference == null ? \"NULL\" : params.controlReference\n  def genome_pref = params.genomePrefix == null ? \"hsapiens\" : params.genomePrefix\n  \"\"\"\n  Rscript -e \"RNAseqR::run_prep_modules_bm(metadata_csv = \\\\\"${params.metadataCsv}\\\\\", metadata_design = \\\\\"${params.metadataDesign}\\\\\", tag = \\\\\"${params.runID}\\\\\", output_dir = \\\\\"${params.runID}_RNAseqR\\\\\", data_dir = NULL, control_reference = \\\\\"${control_ref}\\\\\", genome_prefix = \\\\\"${genome_pref}\\\\\", msigdb_species = \\\\\"${params.msigdbSpecies}\\\\\")\"\n  rm Rplots.pdf\n  zip -r ${params.runID}_RNAseqR.zip ${params.runID}_RNAseqR\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "de_kallisto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "completedRNAseqR"
        ],
        "nb_outputs": 1,
        "name_workflow": "brucemoran__RNAseq_kallisto",
        "directive": [
            "publishDir \"${params.outDir}\", mode: \"copy\", pattern: \"*[!.zip]\"",
            "publishDir \"${params.outDir}/\", mode: \"copy\", pattern: \"*.zip\""
        ],
        "when": "params.metadataCsv && params.metadataDesign",
        "stub": ""
    }
}
{
    "populations": {
        "name_process": "populations",
        "string_process": "\nprocess populations {\nconda 'stacks=2'\npublishDir OUTPUT_DIR, mode: 'copy'\ninput:\n    file popmap from ch_popmap_input\noutput:\n    file '' into ch_populations_output\nscript:\n    \"\"\"\n    mkdir -p ${OUTPUT_DIR}\n    populations -P ${INPUT_DIR} -O ${OUTPUT_DIR} -M ${popmap} -t 24 \\\n    --hwe --fstats \\\n    ${MIN_POPULATIONS} ${MIN_SAMPLES_PER_POP} ${MIN_SAMPLES_OVERALL} ${FILTER_HAPLOTYPE_WISE} ${MIN_MAF} ${MIN_MAC} \\\n    ${MAX_OBS_HET} ${WRITE_SINGLE_SNP} ${WRITE_RANDOM_SNP} ${BLACKLIST} ${WHITELIST} \\\n    ${REF_OUTPUT} --fasta-loci --fasta-samples --vcf --genepop --structure --hzar --phylip --phylip-var --treemix --fasta-samples-raw \\\n    --log-fst-comp \n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    mkdir -p ${OUTPUT_DIR}\n    populations -P ${INPUT_DIR} -O ${OUTPUT_DIR} -M ${popmap} -t 24 \\\n    --hwe --fstats \\\n    ${MIN_POPULATIONS} ${MIN_SAMPLES_PER_POP} ${MIN_SAMPLES_OVERALL} ${FILTER_HAPLOTYPE_WISE} ${MIN_MAF} ${MIN_MAC} \\\n    ${MAX_OBS_HET} ${WRITE_SINGLE_SNP} ${WRITE_RANDOM_SNP} ${BLACKLIST} ${WHITELIST} \\\n    ${REF_OUTPUT} --fasta-loci --fasta-samples --vcf --genepop --structure --hzar --phylip --phylip-var --treemix --fasta-samples-raw \\\n    --log-fst-comp \n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_popmap_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_populations_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'stacks=2'",
            "publishDir OUTPUT_DIR, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "creating_denovo_map": {
        "name_process": "creating_denovo_map",
        "string_process": "\nprocess creating_denovo_map {\n    conda 'stacks'\n    publishDir DENOVO_MAP_DIR, mode: 'copy'\n    maxForks 12\n    input:\n        file popmap from ch_popmap_denovo_input\n        file fq_files from ch_de_novo_input.collect()\n    output:\n        file '' into ch_de_novo_output\n    when:\n        !params.refMapOnly\n    script:\n        \"\"\"\n        mkdir -p ${DENOVO_MAP_DIR}\n        denovo_map.pl --samples ${RADTAG_P_DIR} --popmap ${popmap} -o ${DENOVO_MAP_DIR} -T 20 -m 3 -M 3 -n 2 --paired\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        mkdir -p ${DENOVO_MAP_DIR}\n        denovo_map.pl --samples ${RADTAG_P_DIR} --popmap ${popmap} -o ${DENOVO_MAP_DIR} -T 20 -m 3 -M 3 -n 2 --paired\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_popmap_denovo_input",
            "ch_de_novo_input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_de_novo_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'stacks'",
            "publishDir DENOVO_MAP_DIR, mode: 'copy'",
            "maxForks 12"
        ],
        "when": "!params.refMapOnly",
        "stub": ""
    },
    "creating_ref_map": {
        "name_process": "creating_ref_map",
        "string_process": "\nprocess creating_ref_map {\n    conda 'stacks'\n    publishDir REF_MAP_DIR, mode: 'copy'\n    maxForks 12\n    input:\n        file popmap from ch_popmap_refmap_input\n        file bam_files from ch_ref_map_input\n    output:\n        file '' into ch_ref_map_output\n    script:\n        \"\"\"\n        mkdir -p ${REF_MAP_DIR}\n        ref_map.pl --samples ${SORTED_BAM_DIR} --popmap ${popmap} -o ${REF_MAP_DIR} -T 20 \n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        mkdir -p ${REF_MAP_DIR}\n        ref_map.pl --samples ${SORTED_BAM_DIR} --popmap ${popmap} -o ${REF_MAP_DIR} -T 20 \n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_popmap_refmap_input",
            "ch_ref_map_input"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_ref_map_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'stacks'",
            "publishDir REF_MAP_DIR, mode: 'copy'",
            "maxForks 12"
        ],
        "when": "",
        "stub": ""
    },
    "convert_bz2_to_gz": {
        "name_process": "convert_bz2_to_gz",
        "string_process": "\nprocess convert_bz2_to_gz {\n    publishDir RENAMED_DIR, mode: 'copy', pattern: '*.fastq.gz'\n    maxForks 12                                                                    \n    input:\n        set id, file(reads) from ch_renaming_input\n    output:\n        set id, file('*?_clipped.fastq.gz') into ch_radtags_input\n        file '*?_clipped.fastq.gz' into ch_fastqc_input\n    script:\n        \"\"\" \n        mkdir -p $RADTAGS_DIR\n        bunzip2 -c < ${reads[0].baseName}.bz2 | gzip -c > ${reads[0].baseName}.gz \n        bunzip2 -c < ${reads[1].baseName}.bz2 | gzip -c > ${reads[1].baseName}.gz \n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\" \n        mkdir -p $RADTAGS_DIR\n        bunzip2 -c < ${reads[0].baseName}.bz2 | gzip -c > ${reads[0].baseName}.gz \n        bunzip2 -c < ${reads[1].baseName}.bz2 | gzip -c > ${reads[1].baseName}.gz \n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_renaming_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_radtags_input",
            "ch_fastqc_input"
        ],
        "nb_outputs": 2,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "publishDir RENAMED_DIR, mode: 'copy', pattern: '*.fastq.gz'",
            "maxForks 12"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_bz2": {
        "name_process": "fastqc_bz2",
        "string_process": "\nprocess fastqc_bz2 {\n    conda 'fastqc'\n    publishDir FASTQC_DIR, mode: 'copy', pattern: '*.html'\n    publishDir FASTQC_DIR, mode: 'copy', pattern: '*.zip'\n    publishDir LOG_DIR,    mode: 'copy', pattern: '*.log'\n    maxForks 8\n    input:\n        file read from ch_fastqc_input.flatten()\n    output:\n        file '*.zip'  into ch_fastqc_bz2_zip\n        file '*.html' into ch_fastqc_bz2_html\n        file '*.log'  into ch_fastqc_bz2_log\n    script:\n        \"\"\"\n        mkdir -p ${FASTQC_DIR}\n        fastqc ${read} 2> fastqc_${read.simpleName}_raw.log\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        mkdir -p ${FASTQC_DIR}\n        fastqc ${read} 2> fastqc_${read.simpleName}_raw.log\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_bz2_zip",
            "ch_fastqc_bz2_html",
            "ch_fastqc_bz2_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'fastqc'",
            "publishDir FASTQC_DIR, mode: 'copy', pattern: '*.html'",
            "publishDir FASTQC_DIR, mode: 'copy', pattern: '*.zip'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 8"
        ],
        "when": "",
        "stub": ""
    },
    "process_radtags_bz2": {
        "name_process": "process_radtags_bz2",
        "string_process": "\nprocess process_radtags_bz2 {\n    conda 'stacks=2'\n    maxForks 12\n    input:\n        set id, file(reads) from ch_radtags_input \n    afterScript \"cd !{RADTAGS_DIR} | rename 's/clipped/cleaned/g' *\"\n    script:\n        \"\"\"\n        process_radtags -1 ${reads[0]} -2 ${reads[1]} -o ${RADTAGS_DIR} -t ${READ_LENGTH} --renz_1 ${ENZYME1} ${ENZYME2} -r -c -q -y gzfastq\n        cd ${RADTAGS_DIR}\n        rename 's/clipped/cleaned/g' *\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        process_radtags -1 ${reads[0]} -2 ${reads[1]} -o ${RADTAGS_DIR} -t ${READ_LENGTH} --renz_1 ${ENZYME1} ${ENZYME2} -r -c -q -y gzfastq\n        cd ${RADTAGS_DIR}\n        rename 's/clipped/cleaned/g' *\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_radtags_input"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'stacks=2'",
            "maxForks 12"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_gz": {
        "name_process": "fastqc_gz",
        "string_process": "\nprocess fastqc_gz {\n    conda 'fastqc'\n    publishDir FASTQC_DIR, mode: 'copy', pattern: '*.html'\n    publishDir FASTQC_DIR, mode: 'copy', pattern: '*.zip'\n    publishDir LOG_DIR,    mode: 'copy', pattern: '*.log'\n    maxForks 8\n    input:\n        file read from ch_fastqc_gz_input.flatten()\n    output:\n        file '*.zip'  into ch_fastqc_gz_zip\n        file '*.html' into ch_fastqc_gz_html\n        file '*.log'  into ch_fastqc_gz_log\n    script:\n        \"\"\"\n        echo ${read}\n        mkdir -p ${FASTQC_DIR}\n        fastqc ${read} 2> fastqc_${read.simpleName}_raw.log\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        echo ${read}\n        mkdir -p ${FASTQC_DIR}\n        fastqc ${read} 2> fastqc_${read.simpleName}_raw.log\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc_gz_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_gz_zip",
            "ch_fastqc_gz_html",
            "ch_fastqc_gz_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'fastqc'",
            "publishDir FASTQC_DIR, mode: 'copy', pattern: '*.html'",
            "publishDir FASTQC_DIR, mode: 'copy', pattern: '*.zip'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 8"
        ],
        "when": "",
        "stub": ""
    },
    "process_radtags_gz": {
        "name_process": "process_radtags_gz",
        "string_process": "\nprocess process_radtags_gz {\n    conda 'stacks=2'\n    maxForks 12\n    input:\n        set id, file(reads) from ch_radtags_gz_input \n    afterScript \"cd !{RADTAGS_DIR} | rename 's/clipped/cleaned/g' *\"\n    script:\n        \"\"\"\n        process_radtags -1 ${reads[0]} -2 ${reads[1]} -o ${RADTAGS_DIR} -t ${READ_LENGTH} --renz_1 ${ENZYME1} ${ENZYME2} -r -c -q -y gzfastq\n        cd ${RADTAGS_DIR}\n        rename 's/clipped/cleaned/g' *\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        process_radtags -1 ${reads[0]} -2 ${reads[1]} -o ${RADTAGS_DIR} -t ${READ_LENGTH} --renz_1 ${ENZYME1} ${ENZYME2} -r -c -q -y gzfastq\n        cd ${RADTAGS_DIR}\n        rename 's/clipped/cleaned/g' *\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_radtags_gz_input"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'stacks=2'",
            "maxForks 12"
        ],
        "when": "",
        "stub": ""
    },
    "move_cleaned_reads": {
        "name_process": "move_cleaned_reads",
        "string_process": "\nprocess move_cleaned_reads {\n    stageInMode 'copy'\n    input:\n        file remaining from ch_move_cleaned_reads_input.collect()\n    output:\n        file '' into ch_move_cleaned_reads_output\n    script:\n        \"\"\"\n        mkdir -p ${RADTAG_P_DIR}\n        mv ${remaining} ${RADTAG_P_DIR}\n        cd ${RADTAG_P_DIR}\n        rename 's/_R[1,2]_cleaned//g' *\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        mkdir -p ${RADTAG_P_DIR}\n        mv ${remaining} ${RADTAG_P_DIR}\n        cd ${RADTAG_P_DIR}\n        rename 's/_R[1,2]_cleaned//g' *\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_move_cleaned_reads_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_move_cleaned_reads_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_cleaned": {
        "name_process": "fastqc_cleaned",
        "string_process": "\nprocess fastqc_cleaned {\n    conda 'fastqc'\n    publishDir FASTQC_CLN_DIR, mode: 'copy', pattern: '*.html'\n    publishDir FASTQC_CLN_DIR, mode: 'copy', pattern: '*.zip'\n    publishDir LOG_DIR,        mode: 'copy', pattern: '*.log'\n    maxForks 8\n    input:\n        file read from ch_fastqc_cleaned_input.flatten()\n    output:\n        file '*.zip'  into ch_fastqc_zip_cleaned\n        file '*.html' into ch_fastqc_html\n        file '*.log'  into ch_fastqc_log\n    when:\n        !params.mappingOnly\n    script:\n        \"\"\"\n        fastqc ${read} 2> fastqc_${read.simpleName}_cleaned.log\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        fastqc ${read} 2> fastqc_${read.simpleName}_cleaned.log\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc_cleaned_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_zip_cleaned",
            "ch_fastqc_html",
            "ch_fastqc_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'fastqc'",
            "publishDir FASTQC_CLN_DIR, mode: 'copy', pattern: '*.html'",
            "publishDir FASTQC_CLN_DIR, mode: 'copy', pattern: '*.zip'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 8"
        ],
        "when": "!params.mappingOnly",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    conda 'multiqc'\n    publishDir MULTIQC_DIR, mode: 'copy', pattern: '*.html'\n    publishDir MULTIQC_DIR, mode: 'copy', pattern: 'multiqc_data/*'\n    publishDir LOG_DIR,     mode: 'copy', pattern: '*.log'\n    input:\n        file fastqc_zip_files from ch_fastqc_zip.collect()\n        file fastqc_zip_files_cleaned from ch_fastqc_zip_cleaned.collect()\n    output:\n        file '*.html' into ch_multiqc_report_output\n        file 'multiqc_data/*' into ch_multiqc_data_output\n        file '*.log' into ch_multiqc_log\n    when:\n        !params.mappingOnly\n    script:\n    \"\"\"\n    multiqc -f ${fastqc_zip_files} ${fastqc_zip_files_cleaned} 2> multiqc.log\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    multiqc -f ${fastqc_zip_files} ${fastqc_zip_files_cleaned} 2> multiqc.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_fastqc_zip",
            "ch_fastqc_zip_cleaned"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_multiqc_report_output",
            "ch_multiqc_data_output",
            "ch_multiqc_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'multiqc'",
            "publishDir MULTIQC_DIR, mode: 'copy', pattern: '*.html'",
            "publishDir MULTIQC_DIR, mode: 'copy', pattern: 'multiqc_data/*'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'"
        ],
        "when": "!params.mappingOnly",
        "stub": ""
    },
    "bowtie_mapping": {
        "name_process": "bowtie_mapping",
        "string_process": "\nprocess bowtie_mapping {\n    conda 'bowtie2'\n    publishDir SAM_DIR, mode: 'copy', pattern: '*.sam'\n    publishDir LOG_DIR, mode: 'copy', pattern: '*.log'\n    maxForks 8\n    input:\n        set id, file(reads), file(reference_file), file(indexes_a) from ch_bowtie_input.combine(ch_references_mapping.merge(ch_bowtie_index.collect().toList()))\n    output:\n        file '*.sam' into ch_bowtie_mapping\n        file '*.log' into ch_bowtie_mapping_log\n    shell:\n    '''\n    index_dir=\"$(basename !{reference_file} .fna.gz)\"\n    bowtie2 --threads 20 --very-sensitive-local -x $index_dir -1 !{reads[0]} -2 !{reads[1]} -S !{reads[0].simpleName}_${index_dir}_mapping.sam 2> bowtie_mapping_!{reads[0].simpleName}.log\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    index_dir=\"$(basename !{reference_file} .fna.gz)\"\n    bowtie2 --threads 20 --very-sensitive-local -x $index_dir -1 !{reads[0]} -2 !{reads[1]} -S !{reads[0].simpleName}_${index_dir}_mapping.sam 2> bowtie_mapping_!{reads[0].simpleName}.log\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "ch_bowtie_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bowtie_mapping",
            "ch_bowtie_mapping_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'bowtie2'",
            "publishDir SAM_DIR, mode: 'copy', pattern: '*.sam'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 8"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_unmapped": {
        "name_process": "samtools_unmapped",
        "string_process": "\nprocess samtools_unmapped {\n    conda 'samtools'\n    publishDir BAM_DIR, mode: 'copy', pattern: '*.bam'\n    publishDir LOG_DIR, mode: 'copy', pattern: '*.log'\n    maxForks 2\n    input:\n        file mapping from ch_bowtie_mapping\n    output:\n        file '*.bam' into ch_samtools_unmapped_output\n        file '*.log' into ch_samtools_unmapped_log\n    script:\n    \"\"\"\n    samtools view --threads 6 -bh -F 4 ${mapping} > ${mapping.baseName}.bam 2> samtools_unmapped_${mapping.baseName}.log\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    samtools view --threads 6 -bh -F 4 ${mapping} > ${mapping.baseName}.bam 2> samtools_unmapped_${mapping.baseName}.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_bowtie_mapping"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_samtools_unmapped_output",
            "ch_samtools_unmapped_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'samtools'",
            "publishDir BAM_DIR, mode: 'copy', pattern: '*.bam'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 2"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_sort": {
        "name_process": "samtools_sort",
        "string_process": "\nprocess samtools_sort {\n    conda 'samtools'\n    publishDir SORTED_BAM_DIR, mode: 'copy', pattern: '*_sorted.bam'\n    publishDir LOG_DIR,        mode: 'copy', pattern: '*.log'\n    maxForks 2\n    input:\n        file bam_file from ch_samtools_unmapped_output\n    output:\n        file '*_sorted.bam' into ch_samtools_sorted_output\n        file '*.log'        into ch_samtools_sorted_log\n    script:\n    \"\"\"\n    mkdir -p ${SORTED_BAM_DIR}\n    samtools sort --threads 10 -o ${bam_file.baseName}_sorted.bam ${bam_file.baseName}.bam 2> samtools_sort_${bam_file.baseName}.log\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mkdir -p ${SORTED_BAM_DIR}\n    samtools sort --threads 10 -o ${bam_file.baseName}_sorted.bam ${bam_file.baseName}.bam 2> samtools_sort_${bam_file.baseName}.log\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_samtools_unmapped_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_samtools_sorted_output",
            "ch_samtools_sorted_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'samtools'",
            "publishDir SORTED_BAM_DIR, mode: 'copy', pattern: '*_sorted.bam'",
            "publishDir LOG_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 2"
        ],
        "when": "",
        "stub": ""
    },
    "rename_bam_files": {
        "name_process": "rename_bam_files",
        "string_process": "\nprocess rename_bam_files {\n    input:\n        file sorted_bam from ch_samtools_sorted_output.collect()\n    output:\n        file '' into ch_rename_output\n    script:\n    \"\"\"\n    cd ${SORTED_BAM_DIR}\n    rename 's/(_R1)(.*)(\\\\.)/\\\\./g' *\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n    cd ${SORTED_BAM_DIR}\n    rename 's/(_R1)(.*)(\\\\.)/\\\\./g' *\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_samtools_sorted_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_rename_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "bowtie_index": {
        "name_process": "bowtie_index",
        "string_process": "\nprocess bowtie_index {\n    conda 'bowtie2'\n    publishDir INDEX_DIR, mode: 'copy', pattern: '*.bt2l'\n    publishDir INDEX_DIR, mode: 'copy', pattern: '*.log'\n    maxForks 24\n    input:\n        file reference_file from ch_references_index_input\n    output:\n        file '*.bt2l' into ch_bowtie_index_output\n        file '*.log'  into ch_bowtie_log\n    shell:\n    '''\n    mkdir -p !{INDEX_DIR}\n    reference_name=\"$(basename !{reference_file} .fna.gz)\"\n    bowtie2-build --threads 24 --large-index !{reference_file} $reference_name 2> bowtie_index_${reference_name}.log\n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    mkdir -p !{INDEX_DIR}\n    reference_name=\"$(basename !{reference_file} .fna.gz)\"\n    bowtie2-build --threads 24 --large-index !{reference_file} $reference_name 2> bowtie_index_${reference_name}.log\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_references_index_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bowtie_index_output",
            "ch_bowtie_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "conda 'bowtie2'",
            "publishDir INDEX_DIR, mode: 'copy', pattern: '*.bt2l'",
            "publishDir INDEX_DIR, mode: 'copy', pattern: '*.log'",
            "maxForks 24"
        ],
        "when": "",
        "stub": ""
    },
    "keep_fna": {
        "name_process": "keep_fna",
        "string_process": "\nprocess keep_fna {\n    publishDir INDEX_DIR\n    stageInMode 'copy'\n    errorStrategy 'ignore'\n    input:\n        file fna_file from ch_copy_fna\n    output:\n        file '' into ch_fna_output\n    script:\n    \"\"\"\n    mkdir -p ${INDEX_DIR}\n    mv ${fna_file} ${INDEX_DIR}\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    mkdir -p ${INDEX_DIR}\n    mv ${fna_file} ${INDEX_DIR}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_copy_fna"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fna_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "katharily__pe_stacks_pipeline",
        "directive": [
            "publishDir INDEX_DIR",
            "stageInMode 'copy'",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    }
}
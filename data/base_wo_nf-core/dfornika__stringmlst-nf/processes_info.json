{
    "fastp": {
        "name_process": "fastp",
        "string_process": "process fastp {\n\n  tag { sample_id }\n\n  input:\n  tuple val(grouping_key), path(reads)\n\n  output:\n  tuple val(sample_id), path(\"${sample_id}_fastp.json\"), emit: fastp_json\n  tuple val(sample_id), path(\"${sample_id}_trimmed_R1.fastq.gz\"), path(\"${sample_id}_trimmed_R2.fastq.gz\"), emit: reads\n\n  script:\n  if (grouping_key =~ '_S[0-9]+_') {\n    sample_id = grouping_key.split(\"_S[0-9]+_\")[0]\n  } else if (grouping_key =~ '_') {\n    sample_id = grouping_key.split(\"_\")[0]\n  } else {\n    sample_id = grouping_key\n  }\n  \"\"\"\n  fastp -i ${reads[0]} -I ${reads[1]} -o ${sample_id}_trimmed_R1.fastq.gz -O ${sample_id}_trimmed_R2.fastq.gz\n  mv fastp.json ${sample_id}_fastp.json\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  if (grouping_key =~ '_S[0-9]+_') {\n    sample_id = grouping_key.split(\"_S[0-9]+_\")[0]\n  } else if (grouping_key =~ '_') {\n    sample_id = grouping_key.split(\"_\")[0]\n  } else {\n    sample_id = grouping_key\n  }\n  \"\"\"\n  fastp -i ${reads[0]} -I ${reads[1]} -o ${sample_id}_trimmed_R1.fastq.gz -O ${sample_id}_trimmed_R2.fastq.gz\n  mv fastp.json ${sample_id}_fastp.json\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "grouping_key",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__stringmlst-nf",
        "directive": [
            "tag { sample_id }"
        ],
        "when": "",
        "stub": ""
    },
    "fastp_json_to_csv": {
        "name_process": "fastp_json_to_csv",
        "string_process": "\nprocess fastp_json_to_csv {\n\n  tag { sample_id }\n\n  executor 'local'\n\n  input:\n  tuple val(sample_id), path(fastp_json)\n\n  output:\n  tuple val(sample_id), path(\"${sample_id}_read_count.csv\")\n\n  script:\n  \"\"\"\n  fastp_json_to_csv.py -s ${sample_id} ${fastp_json} > ${sample_id}_read_count.csv\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  fastp_json_to_csv.py -s ${sample_id} ${fastp_json} > ${sample_id}_read_count.csv\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "fastp_json"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__stringmlst-nf",
        "directive": [
            "tag { sample_id }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "stringmlst": {
        "name_process": "stringmlst",
        "string_process": "\nprocess stringmlst {\n\n    tag { sample_id }\n    \n    cpus 1\n\n    publishDir \"${params.outdir}\", mode: 'copy', pattern: \"${sample_id}_mlst.tsv\"\n\n    input:\n    tuple val(sample_id), path(reads_1), path(reads_2), path(db)\n\n    output:\n    tuple val(sample_id), path(\"${sample_id}_mlst.tsv\")\n    \n    script:\n    \"\"\"\n    stringMLST.py --predict -1 ${reads_1} -2 ${reads_2} -k ${params.kmer_size} -P ${db}/${params.db_prefix} > ${sample_id}_mlst.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    stringMLST.py --predict -1 ${reads_1} -2 ${reads_2} -k ${params.kmer_size} -P ${db}/${params.db_prefix} > ${sample_id}_mlst.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads_1",
            "reads_2",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__stringmlst-nf",
        "directive": [
            "tag { sample_id }",
            "cpus 1",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"${sample_id}_mlst.tsv\""
        ],
        "when": "",
        "stub": ""
    }
}
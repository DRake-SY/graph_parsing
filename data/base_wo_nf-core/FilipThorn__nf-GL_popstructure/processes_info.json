{
    "Genotypelikelihoods": {
        "name_process": "Genotypelikelihoods",
        "string_process": "\nprocess Genotypelikelihoods {\n\n   label 'RAM_high'\n    \n   publishDir \"${params.outdir}/01.GL/$subset\", mode:'copy'\n\n   input:\n   tuple val(subset), file(bam) from bams_ch\n\n   output:\n   tuple val(subset), file(\"${subset}.beagle.gz\") into GL_ch\n\n   script:\n   \"\"\"\n   angsd -nThreads ${task.cpus} -bam $bam -rf ${params.chr_ref} \\\n   -uniqueOnly 1 -minMapQ 20 -minQ 20 -GL 2 -doGlf 2 \\\n   -doMajorMinor 1 -skipTriallelic 1 -doMaf 1 -minMaf 0.05 \\\n   -SNP_pval 1e-6 -doCounts 1 -setMinDepth 20 -out $subset\n   \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "   \"\"\"\n   angsd -nThreads ${task.cpus} -bam $bam -rf ${params.chr_ref} \\\n   -uniqueOnly 1 -minMapQ 20 -minQ 20 -GL 2 -doGlf 2 \\\n   -doMajorMinor 1 -skipTriallelic 1 -doMaf 1 -minMaf 0.05 \\\n   -SNP_pval 1e-6 -doCounts 1 -setMinDepth 20 -out $subset\n   \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "ANGSD"
        ],
        "tools_url": [
            "https://bio.tools/angsd"
        ],
        "tools_dico": [
            {
                "name": "ANGSD",
                "uri": "https://bio.tools/angsd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Software for analyzing next generation sequencing data. The software can handle a number of different input types from mapped reads to imputed genotype probabilities. Most methods take genotype uncertainty into account instead of basing the analysis on called genotypes. This is especially useful for low and medium depth data.",
                "homepage": "http://www.popgen.dk/angsd"
            }
        ],
        "inputs": [
            "bams_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "GL_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FilipThorn__nf-GL_popstructure",
        "directive": [
            "label 'RAM_high'",
            "publishDir \"${params.outdir}/01.GL/$subset\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "NGSadmix": {
        "name_process": "NGSadmix",
        "string_process": "\nprocess NGSadmix {\n   \n    label 'RAM_high'\n   \n   publishDir \"${params.outdir}/02.NGSadmix/$subset\", mode:'copy'\n\n   List k_list = 2..params.k\n   \n   input:\n   tuple val(subset), file(GL) from GL_ch1\n   each anc from k_list\n\n   output:\n   tuple val(subset), file(\"${subset}_k${anc}.qopt\") into admixture_ch\n\n   script:\n   \"\"\"\n   NGSadmix -likes $GL -K $anc -P ${task.cpus} -o ${subset}_k${anc}\n   \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "   \"\"\"\n   NGSadmix -likes $GL -K $anc -P ${task.cpus} -o ${subset}_k${anc}\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "GL_ch1",
            "k_list"
        ],
        "nb_inputs": 2,
        "outputs": [
            "admixture_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FilipThorn__nf-GL_popstructure",
        "directive": [
            "label 'RAM_high'",
            "publishDir \"${params.outdir}/02.NGSadmix/$subset\", mode:'copy' List k_list = 2..params.k"
        ],
        "when": "",
        "stub": ""
    },
    "PCAngsd": {
        "name_process": "PCAngsd",
        "string_process": "\nprocess PCAngsd {\n\n  label 'RAM_high'\n\n  publishDir \"${params.outdir}/03.PCAngsd/$subset\", mode:'copy'\n\n  input:\n  set val(subset), file(GL) from GL_ch2\n\n  output:\n  set val(subset), file(\"${subset}.cov\") into covariance_ch\n\n  script:\n  \"\"\"\n  python ${params.PCAngsd} -beagle $GL -o ${subset} -threads ${task.cpus}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  python ${params.PCAngsd} -beagle $GL -o ${subset} -threads ${task.cpus}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "GL_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "covariance_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FilipThorn__nf-GL_popstructure",
        "directive": [
            "label 'RAM_high'",
            "publishDir \"${params.outdir}/03.PCAngsd/$subset\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "NGSadmix_plot": {
        "name_process": "NGSadmix_plot",
        "string_process": " process NGSadmix_plot {\n\n    label 'FAST'\n    \n    publishDir \"${params.outdir}/04.plots/$subset\", mode:'copy'\n    \n    List k_list = 2..params.k\n\n    input:\n    each anc from k_list\n    tuple val(subset), file(\"${subset}_k${anc}.qopt\"), file(name) from admix_comb\n\n    output:\n    file(\"*.pdf\")\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript \n\n    library(\"ggplot2\") \n\n    bam_list<-read.table(\"$name\", header = FALSE)\n\n    pop<-data.frame(indiv=character(0))\n      for( i in 1:length(bam_list[[\"V1\"]])){\n        line<-strsplit(bam_list[i,], split = '/')\n        name<-rev(unlist(line))[2]\n        pop[i,]<-name\n    } \n\n    colpanel <- c(\"antiquewhite3\", \"azure3\", \"cadetblue\", \"chartreuse3\", \"cornflowerblue\", \"darkgoldenrod3\", \"darkolivegreen3\", \"darkorchid3\", \"deeppink1\", \"deepskyblue3\")\n\n    admix <- t(as.matrix(read.table(\"${subset}_k${anc}.qopt\")))\n    K <- nrow(admix)\n    ord<-order(pop[,1])\n\n    plot_nam<-paste0(\"${subset}_NGSadmix_k\",K ,\".pdf\")\n    pdf(plot_nam)\n      bar<-barplot(admix[,ord],col=colpanel[1:K],space=0,border=NA,ylab=\"Admixture proportion\")\n      axis(1, labels = pop[ord,1], at = bar,     las = 2, cex.axis = 0.6)\n\n    dev.off()\n\n    \"\"\"\n  }",
        "nb_lignes_process": 43,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript \n\n    library(\"ggplot2\") \n\n    bam_list<-read.table(\"$name\", header = FALSE)\n\n    pop<-data.frame(indiv=character(0))\n      for( i in 1:length(bam_list[[\"V1\"]])){\n        line<-strsplit(bam_list[i,], split = '/')\n        name<-rev(unlist(line))[2]\n        pop[i,]<-name\n    } \n\n    colpanel <- c(\"antiquewhite3\", \"azure3\", \"cadetblue\", \"chartreuse3\", \"cornflowerblue\", \"darkgoldenrod3\", \"darkolivegreen3\", \"darkorchid3\", \"deeppink1\", \"deepskyblue3\")\n\n    admix <- t(as.matrix(read.table(\"${subset}_k${anc}.qopt\")))\n    K <- nrow(admix)\n    ord<-order(pop[,1])\n\n    plot_nam<-paste0(\"${subset}_NGSadmix_k\",K ,\".pdf\")\n    pdf(plot_nam)\n      bar<-barplot(admix[,ord],col=colpanel[1:K],space=0,border=NA,ylab=\"Admixture proportion\")\n      axis(1, labels = pop[ord,1], at = bar,     las = 2, cex.axis = 0.6)\n\n    dev.off()\n\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "k_list",
            "admix_comb"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FilipThorn__nf-GL_popstructure",
        "directive": [
            "label 'FAST'",
            "publishDir \"${params.outdir}/04.plots/$subset\", mode:'copy' List k_list = 2..params.k"
        ],
        "when": "",
        "stub": ""
    },
    "PCAngsd_plot": {
        "name_process": "PCAngsd_plot",
        "string_process": " process PCAngsd_plot {\n    \n    label 'FAST'\n    \n    publishDir \"${params.outdir}/04.plots/$subset\", mode:'copy'\n\n    input:\n    tuple val(subset), file(\"${subset}.cov\"), file(name) from covariance_comb\n\n    output:\n    file(\"${subset}_PCA.pdf\")\n\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript  \n    \n    library(\"ggplot2\")\n    library(\"ggrepel\")\n\n    bam_list<-read.table(\"${name}\", header = FALSE )\n    \n    pop<-data.frame(indiv=character(0))\n    for( i in 1:length(bam_list[[\"V1\"]])){\n      line<-strsplit(bam_list[i,], split = '/')\n      name<-rev(unlist(line))[2]\n      pop[i,]<-name\n    }\n    pop<-unlist(list(pop[[\"indiv\"]]))\n    \n    C <- as.matrix(read.table(\"${subset}.cov\"))\n    e <-as.data.frame(eigen(C)[[\"vectors\"]])\n    \n    p = ggplot(aes_(x=e[[\"V1\"]], y=e[[\"V2\"]]), data=e)+geom_point()  + \n      theme_classic() +\n      ggtitle(\"${subset}\") +  xlab(\"PC1\") + ylab(\"PC2\") +\n      geom_label_repel(aes_(x=e[[\"V1\"]], y=e[[\"V2\"]], label=pop),\n                        point.padding = 0.1, label.size=0.1, box.padding=0.35,\n                        label.padding = 0.1, show.legend = FALSE, size=4,\n                        min.segment.length = 0.1, max.overlaps = 100)\n\n    plot(p)   \n   \n    ggsave(\n      \"${subset}_PCA.pdf\",\n      plot = last_plot(),\n      device = \"pdf\",\n      scale=1,\n      width = 15,\n      height = 15,\n      unit= \"in\")\n    \"\"\"\n  }",
        "nb_lignes_process": 51,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript  \n    \n    library(\"ggplot2\")\n    library(\"ggrepel\")\n\n    bam_list<-read.table(\"${name}\", header = FALSE )\n    \n    pop<-data.frame(indiv=character(0))\n    for( i in 1:length(bam_list[[\"V1\"]])){\n      line<-strsplit(bam_list[i,], split = '/')\n      name<-rev(unlist(line))[2]\n      pop[i,]<-name\n    }\n    pop<-unlist(list(pop[[\"indiv\"]]))\n    \n    C <- as.matrix(read.table(\"${subset}.cov\"))\n    e <-as.data.frame(eigen(C)[[\"vectors\"]])\n    \n    p = ggplot(aes_(x=e[[\"V1\"]], y=e[[\"V2\"]]), data=e)+geom_point()  + \n      theme_classic() +\n      ggtitle(\"${subset}\") +  xlab(\"PC1\") + ylab(\"PC2\") +\n      geom_label_repel(aes_(x=e[[\"V1\"]], y=e[[\"V2\"]], label=pop),\n                        point.padding = 0.1, label.size=0.1, box.padding=0.35,\n                        label.padding = 0.1, show.legend = FALSE, size=4,\n                        min.segment.length = 0.1, max.overlaps = 100)\n\n    plot(p)   \n   \n    ggsave(\n      \"${subset}_PCA.pdf\",\n      plot = last_plot(),\n      device = \"pdf\",\n      scale=1,\n      width = 15,\n      height = 15,\n      unit= \"in\")\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "covariance_comb"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FilipThorn__nf-GL_popstructure",
        "directive": [
            "label 'FAST'",
            "publishDir \"${params.outdir}/04.plots/$subset\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:                                                                  \n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n    script:                                                                  \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTERQDUMP": {
        "name_process": "FASTERQDUMP",
        "string_process": "\nprocess FASTERQDUMP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    errorStrategy  { task.attempt <= maxRetries  ? 'retry' : 'finish' }\n    maxRetries \n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    container \"seandavi/curatedmetagenomics\"\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    val(meta)\n    val(srr)\n\n    output:\n    val(srr), emit: srr\n                                                                                  \n                                                        \n                                                                         \n    path \"*.version.txt\"          , emit: version\n    path \"out.fastq.gz\", emit: fastq\n    path \"*_fastqc/fastqc_data.txt\", emit: fastqc_data\n    path \"fastq_line_count.txt\"\n    path \".command*\"\n    path \"sampleinfo.txt\"\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    \"\"\"\n    echo \"accessions: ${srr}\" > sampleinfo.txt\n    fasterq-dump \\\n        --skip-technical \\\n        --force \\\n        --threads ${task.cpus} \\\n        --split-files ${srr.join(\" \")}\n    cat *.fastq | gzip > out.fastq.gz\n    gunzip -c out.fastq.gz | wc -l > fastq_line_count.txt\n    rm *.fastq\n    seqtk sample -s100 out.fastq.gz 50000 > out_sample.fastq\n    fastqc --extract out_sample.fastq\n    rm out_sample.fastq\n    fasterq-dump -V | grep 'version' > fasterq-dump.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    \"\"\"\n    echo \"accessions: ${srr}\" > sampleinfo.txt\n    fasterq-dump \\\n        --skip-technical \\\n        --force \\\n        --threads ${task.cpus} \\\n        --split-files ${srr.join(\" \")}\n    cat *.fastq | gzip > out.fastq.gz\n    gunzip -c out.fastq.gz | wc -l > fastq_line_count.txt\n    rm *.fastq\n    seqtk sample -s100 out.fastq.gz 50000 > out_sample.fastq\n    fastqc --extract out_sample.fastq\n    rm out_sample.fastq\n    fasterq-dump -V | grep 'version' > fasterq-dump.version.txt\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "srr"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "errorStrategy { task.attempt <= maxRetries ? 'retry' : 'finish' }",
            "maxRetries",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "container \"seandavi/curatedmetagenomics\""
        ],
        "when": "",
        "stub": ""
    },
    "install_metaphlan_db": {
        "name_process": "install_metaphlan_db",
        "string_process": "\nprocess install_metaphlan_db {\n    cpus 8\n    memory '32g'\n\n    storeDir \"${params.store_dir}\"\n\n    output:\n    path 'metaphlan', emit: metaphlan_db, type: 'dir'\n    path \".command*\"\n\n    script:\n      \"\"\"\n      metaphlan --install --index latest --bowtie2db metaphlan\n      \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "      \"\"\"\n      metaphlan --install --index latest --bowtie2db metaphlan\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "cpus 8",
            "memory '32g'",
            "storeDir \"${params.store_dir}\""
        ],
        "when": "",
        "stub": ""
    },
    "metaphlan_bugs_list": {
        "name_process": "metaphlan_bugs_list",
        "string_process": "\nprocess metaphlan_bugs_list {\n    publishDir \"${params.publish_dir}/${workflow.sessionId}/metaphlan_bugs_list\", pattern: \"{*tsv.gz,.command*}\"\n    errorStrategy 'ignore'\n    \n                       \n\n    time \"1d\"\n    cpus 16\n    memory { 32.GB * task.attempt }\n    \n    input:\n    path fastq\n    path metaphlan_db\n\n\n    output:\n    path 'bowtie2.out.gz', emit: metaphlan_bt2\n    path 'metaphlan_bugs_list.tsv', emit: metaphlan_bugs_list\n    path 'metaphlan_bugs_list.tsv.gz', emit: metaphlan_bugs_list_gz\n    path \".command*\"\n\n    script:\n    \"\"\"\n    find .\n    metaphlan --input_type fastq \\\n        --index ${params.metaphlan_index} \\\n        --bowtie2db metaphlan \\\n        --samout sam.bz2 \\\n        --bowtie2out bowtie2.out \\\n        --nproc ${task.cpus} \\\n        -o metaphlan_bugs_list.tsv \\\n        ${fastq}\n\n    gzip -c metaphlan_bugs_list.tsv > metaphlan_bugs_list.tsv.gz\n    gzip bowtie2.out\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    find .\n    metaphlan --input_type fastq \\\n        --index ${params.metaphlan_index} \\\n        --bowtie2db metaphlan \\\n        --samout sam.bz2 \\\n        --bowtie2out bowtie2.out \\\n        --nproc ${task.cpus} \\\n        -o metaphlan_bugs_list.tsv \\\n        ${fastq}\n\n    gzip -c metaphlan_bugs_list.tsv > metaphlan_bugs_list.tsv.gz\n    gzip bowtie2.out\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "fastq",
            "metaphlan_db"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "publishDir \"${params.publish_dir}/${workflow.sessionId}/metaphlan_bugs_list\", pattern: \"{*tsv.gz,.command*}\"",
            "errorStrategy 'ignore'",
            "time \"1d\"",
            "cpus 16",
            "memory { 32.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "metaphlan_markers": {
        "name_process": "metaphlan_markers",
        "string_process": "\nprocess metaphlan_markers {\n    publishDir \"${params.publish_dir}/${workflow.sessionId}/metaphlan_markers\"\n    \n    cpus 4\n    memory \"16g\"\n\n    input:\n    path metaphlan_bt2\n    path metaphlan_db\n\n    output:\n    path \"marker_abundance.tsv.gz\", emit: marker_abundance\n    path \"marker_presence.tsv.gz\", emit: marker_presence\n    path \".command*\"\n\n    script:\n    \"\"\"\n    metaphlan --input_type bowtie2out \\\n        --index ${params.metaphlan_index} \\\n        --bowtie2db metaphlan \\\n        -t marker_pres_table \\\n        -o marker_presence.tsv \\\n        <( gunzip -c ${metaphlan_bt2} )    \n    metaphlan --input_type bowtie2out \\\n        --index ${params.metaphlan_index} \\\n        --bowtie2db metaphlan \\\n        -t marker_ab_table \\\n        -o marker_abundance.tsv \\\n        <( gunzip -c ${metaphlan_bt2} )\n    gzip *.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    metaphlan --input_type bowtie2out \\\n        --index ${params.metaphlan_index} \\\n        --bowtie2db metaphlan \\\n        -t marker_pres_table \\\n        -o marker_presence.tsv \\\n        <( gunzip -c ${metaphlan_bt2} )    \n    metaphlan --input_type bowtie2out \\\n        --index ${params.metaphlan_index} \\\n        --bowtie2db metaphlan \\\n        -t marker_ab_table \\\n        -o marker_abundance.tsv \\\n        <( gunzip -c ${metaphlan_bt2} )\n    gzip *.tsv\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "metaphlan_bt2",
            "metaphlan_db"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "publishDir \"${params.publish_dir}/${workflow.sessionId}/metaphlan_markers\"",
            "cpus 4",
            "memory \"16g\""
        ],
        "when": "",
        "stub": ""
    },
    "chocophlan_db": {
        "name_process": "chocophlan_db",
        "string_process": "\nprocess chocophlan_db {\n    cpus 1\n    memory \"1g\"\n    time \"1d\"\n\n    storeDir \"${params.store_dir}\"\n\n    output:\n    path \"chocophlan\", emit: chocophlan_db, type: 'dir'\n    path \".command*\"\n\n    script:\n    \"\"\"\n    humann_databases --update-config no --download chocophlan ${params.chocophlan} .\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    humann_databases --update-config no --download chocophlan ${params.chocophlan} .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "cpus 1",
            "memory \"1g\"",
            "time \"1d\"",
            "storeDir \"${params.store_dir}\""
        ],
        "when": "",
        "stub": ""
    },
    "uniref_db": {
        "name_process": "uniref_db",
        "string_process": "\nprocess uniref_db {\n    cpus 1\n    memory \"1g\"\n    time \"1d\"\n\n    storeDir \"${params.store_dir}\"\n\n    output:\n    path \"uniref\", emit: uniref_db, type: 'dir'\n    path \".command*\"\n\n    script:\n    \"\"\"\n    humann_databases --update-config no --download uniref ${params.uniref} .\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    humann_databases --update-config no --download uniref ${params.uniref} .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "cpus 1",
            "memory \"1g\"",
            "time \"1d\"",
            "storeDir \"${params.store_dir}\""
        ],
        "when": "",
        "stub": ""
    },
    "humann": {
        "name_process": "humann",
        "string_process": "\nprocess humann {\n    publishDir \"${params.publish_dir}/${workflow.sessionId}/humann\"\n    cpus 16\n\n    errorStrategy 'ignore'\n\n    time \"3d\"\n    memory \"64g\"\n\n    input:\n    path fastq\n    path metaphlan_bugs_list                           \n    path chocophlan_db\n    path uniref_db\n\n    output:\n                        \n    path(\"out_genefamilies.tsv.gz\")\n    path(\"out_genefamilies_cpm.tsv.gz\")\n    path(\"out_genefamilies_relab.tsv.gz\")\n    path(\"out_genefamilies_stratified.tsv.gz\")\n    path(\"out_genefamilies_unstratified.tsv.gz\")\n    path(\"out_genefamilies_cpm_stratified.tsv.gz\")\n    path(\"out_genefamilies_relab_stratified.tsv.gz\")\n    path(\"out_genefamilies_cpm_unstratified.tsv.gz\")\n    path(\"out_genefamilies_relab_unstratified.tsv.gz\")\n    path(\"out_pathabundance.tsv.gz\")\n    path(\"out_pathabundance_cpm.tsv.gz\")\n    path(\"out_pathabundance_relab.tsv.gz\")\n    path(\"out_pathabundance_stratified.tsv.gz\")\n    path(\"out_pathabundance_unstratified.tsv.gz\")\n    path(\"out_pathabundance_cpm_stratified.tsv.gz\")\n    path(\"out_pathabundance_relab_stratified.tsv.gz\")\n    path(\"out_pathabundance_cpm_unstratified.tsv.gz\")\n    path(\"out_pathabundance_relab_unstratified.tsv.gz\")\n    path(\"out_pathcoverage_unstratified.tsv.gz\")\n    path(\"out_pathcoverage_stratified.tsv.gz\")\n    path(\"out_pathcoverage.tsv.gz\")\n    path \".command*\"\n\n    script:\n    \"\"\"\n    humann -i ${fastq} \\\n        -o '.' \\\n        --verbose \\\n        --metaphlan-options \"-t rel_ab --index latest\" \\\n        --nucleotide-database ${chocophlan_db} \\\n        --taxonomic-profile ${metaphlan_bugs_list} \\\n        --protein-database ${uniref_db} \\\n        --threads ${task.cpus}\n\n    humann_renorm_table \\\n        --input out_pathabundance.tsv \\\n        --output out_pathabundance_cpm.tsv \\\n        --units cpm\n\n    humann_renorm_table \\\n        --input out_genefamilies.tsv \\\n        --output out_genefamilies_cpm.tsv \\\n        --units cpm\n\n    humann_renorm_table \\\n        --input out_genefamilies.tsv \\\n        --output out_genefamilies_relab.tsv \\\n        --units relab\n\n    humann_renorm_table \\\n        --input out_pathabundance.tsv \\\n        --output out_pathabundance_relab.tsv \\\n        --units relab\n\n    humann_split_stratified_table -i out_pathabundance.tsv -o .\n    humann_split_stratified_table -i out_pathabundance_cpm.tsv -o .\n    humann_split_stratified_table -i out_pathabundance_relab.tsv -o .\n    humann_split_stratified_table -i out_pathcoverage.tsv -o .\n    humann_split_stratified_table -i out_genefamilies.tsv -o .\n    humann_split_stratified_table -i out_genefamilies_cpm.tsv -o .\n    humann_split_stratified_table -i out_genefamilies_relab.tsv -o .\n    gzip out_*tsv\n    \"\"\"\n}",
        "nb_lignes_process": 80,
        "string_script": "    \"\"\"\n    humann -i ${fastq} \\\n        -o '.' \\\n        --verbose \\\n        --metaphlan-options \"-t rel_ab --index latest\" \\\n        --nucleotide-database ${chocophlan_db} \\\n        --taxonomic-profile ${metaphlan_bugs_list} \\\n        --protein-database ${uniref_db} \\\n        --threads ${task.cpus}\n\n    humann_renorm_table \\\n        --input out_pathabundance.tsv \\\n        --output out_pathabundance_cpm.tsv \\\n        --units cpm\n\n    humann_renorm_table \\\n        --input out_genefamilies.tsv \\\n        --output out_genefamilies_cpm.tsv \\\n        --units cpm\n\n    humann_renorm_table \\\n        --input out_genefamilies.tsv \\\n        --output out_genefamilies_relab.tsv \\\n        --units relab\n\n    humann_renorm_table \\\n        --input out_pathabundance.tsv \\\n        --output out_pathabundance_relab.tsv \\\n        --units relab\n\n    humann_split_stratified_table -i out_pathabundance.tsv -o .\n    humann_split_stratified_table -i out_pathabundance_cpm.tsv -o .\n    humann_split_stratified_table -i out_pathabundance_relab.tsv -o .\n    humann_split_stratified_table -i out_pathcoverage.tsv -o .\n    humann_split_stratified_table -i out_genefamilies.tsv -o .\n    humann_split_stratified_table -i out_genefamilies_cpm.tsv -o .\n    humann_split_stratified_table -i out_genefamilies_relab.tsv -o .\n    gzip out_*tsv\n    \"\"\"",
        "nb_lignes_script": 38,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq",
            "metaphlan_bugs_list",
            "chocophlan_db",
            "uniref_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "publishDir \"${params.publish_dir}/${workflow.sessionId}/humann\"",
            "cpus 16",
            "errorStrategy 'ignore'",
            "time \"3d\"",
            "memory \"64g\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seandavi__nf-core-cmgd",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "process SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    samtools sort $args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    samtools sort $args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PICARD_MARKDUPLICATES": {
        "name_process": "PICARD_MARKDUPLICATES",
        "string_process": "process PICARD_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")        , emit: bam\n    tuple val(meta), path(\"*.bai\")        , optional:true, emit: bai\n    tuple val(meta), path(\"*.metrics.txt\"), emit: metrics\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $args \\\\\n        I=$bam \\\\\n        O=${prefix}.bam \\\\\n        M=${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $args \\\\\n        I=$bam \\\\\n        O=${prefix}.bam \\\\\n        M=${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' : 'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_JUNCTIONSATURATION": {
        "name_process": "RSEQC_JUNCTIONSATURATION",
        "string_process": "process RSEQC_JUNCTIONSATURATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.pdf\"), emit: pdf\n    tuple val(meta), path(\"*.r\")  , emit: rscript\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_saturation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_saturation.py --version | sed -e \"s/junction_saturation.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_saturation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_saturation.py --version | sed -e \"s/junction_saturation.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SNPSIFT_EXTRACTFIELDS": {
        "name_process": "SNPSIFT_EXTRACTFIELDS",
        "string_process": "process SNPSIFT_EXTRACTFIELDS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::snpsift=4.3.1t\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snpsift:4.3.1t--hdfd78af_3' :\n        'quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.snpsift.txt\"), emit: txt\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[SnpSift] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    SnpSift \\\\\n        -Xmx${avail_mem}g \\\\\n        extractFields \\\\\n        -s \",\" \\\\\n        -e \".\" \\\\\n        $args \\\\\n        $vcf \\\\\n        CHROM POS REF ALT \\\\\n        \"ANN[*].GENE\" \"ANN[*].GENEID\" \\\\\n        \"ANN[*].IMPACT\" \"ANN[*].EFFECT\" \\\\\n        \"ANN[*].FEATURE\" \"ANN[*].FEATUREID\" \\\\\n        \"ANN[*].BIOTYPE\" \"ANN[*].RANK\" \"ANN[*].HGVS_C\" \\\\\n        \"ANN[*].HGVS_P\" \"ANN[*].CDNA_POS\" \"ANN[*].CDNA_LEN\" \\\\\n        \"ANN[*].CDS_POS\" \"ANN[*].CDS_LEN\" \"ANN[*].AA_POS\" \\\\\n        \"ANN[*].AA_LEN\" \"ANN[*].DISTANCE\" \"EFF[*].EFFECT\" \\\\\n        \"EFF[*].FUNCLASS\" \"EFF[*].CODON\" \"EFF[*].AA\" \"EFF[*].AA_LEN\" \\\\\n        > ${prefix}.snpsift.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpsift: \\$( echo \\$(SnpSift split -h 2>&1) | sed 's/^.*version //' | sed 's/(.*//' | sed 's/t//g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[SnpSift] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    SnpSift \\\\\n        -Xmx${avail_mem}g \\\\\n        extractFields \\\\\n        -s \",\" \\\\\n        -e \".\" \\\\\n        $args \\\\\n        $vcf \\\\\n        CHROM POS REF ALT \\\\\n        \"ANN[*].GENE\" \"ANN[*].GENEID\" \\\\\n        \"ANN[*].IMPACT\" \"ANN[*].EFFECT\" \\\\\n        \"ANN[*].FEATURE\" \"ANN[*].FEATUREID\" \\\\\n        \"ANN[*].BIOTYPE\" \"ANN[*].RANK\" \"ANN[*].HGVS_C\" \\\\\n        \"ANN[*].HGVS_P\" \"ANN[*].CDNA_POS\" \"ANN[*].CDNA_LEN\" \\\\\n        \"ANN[*].CDS_POS\" \"ANN[*].CDS_LEN\" \"ANN[*].AA_POS\" \\\\\n        \"ANN[*].AA_LEN\" \"ANN[*].DISTANCE\" \"EFF[*].EFFECT\" \\\\\n        \"EFF[*].FUNCLASS\" \"EFF[*].CODON\" \"EFF[*].AA\" \"EFF[*].AA_LEN\" \\\\\n        > ${prefix}.snpsift.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpsift: \\$( echo \\$(SnpSift split -h 2>&1) | sed 's/^.*version //' | sed 's/(.*//' | sed 's/t//g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "SnpSift",
            "Chromas"
        ],
        "tools_url": [
            "https://bio.tools/snpsift",
            "https://bio.tools/chromas"
        ],
        "tools_dico": [
            {
                "name": "SnpSift",
                "uri": "https://bio.tools/snpsift",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Toolbox that allows you to filter and manipulate annotated vcf files.",
                "homepage": "http://snpeff.sourceforge.net/SnpSift.html"
            },
            {
                "name": "Chromas",
                "uri": "https://bio.tools/chromas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0266",
                                    "term": "Vector sequence detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Chromas is a low-cost chromatogram file editor with search, vector sequence detection and multi-format sequence export functions, plus powerful batch processing.",
                "homepage": "http://technelysium.com.au/?page_id=13"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::snpsift=4.3.1t\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snpsift:4.3.1t--hdfd78af_3' : 'quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HISAT2_ALIGN": {
        "name_process": "HISAT2_ALIGN",
        "string_process": "\nprocess HISAT2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::hisat2=2.2.0 bioconda::samtools=1.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0' :\n        'quay.io/biocontainers/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  splicesites\n\n    output:\n    tuple val(meta), path(\"*.bam\")                   , emit: bam\n    tuple val(meta), path(\"*.log\")                   , emit: summary\n    tuple val(meta), path(\"*fastq.gz\"), optional:true, emit: fastq\n    path  \"versions.yml\"                             , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = meta.single_end ? '--rna-strandness F' : '--rna-strandness FR'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = meta.single_end ? '--rna-strandness R' : '--rna-strandness RF'\n    }\n    def seq_center = params.seq_center ? \"--rg-id ${prefix} --rg SM:$prefix --rg CN:${params.seq_center.replaceAll('\\\\s','_')}\" : \"--rg-id ${prefix} --rg SM:$prefix\"\n    if (meta.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 256 - > ${prefix}.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            --no-mixed \\\\\n            --no-discordant \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 86,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = meta.single_end ? '--rna-strandness F' : '--rna-strandness FR'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = meta.single_end ? '--rna-strandness R' : '--rna-strandness RF'\n    }\n    def seq_center = params.seq_center ? \"--rg-id ${prefix} --rg SM:$prefix --rg CN:${params.seq_center.replaceAll('\\\\s','_')}\" : \"--rg-id ${prefix} --rg SM:$prefix\"\n    if (meta.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 256 - > ${prefix}.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            --no-mixed \\\\\n            --no-discordant \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 64,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "splicesites"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::hisat2=2.2.0 bioconda::samtools=1.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0' : 'quay.io/biocontainers/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:2880dd9d8ad0a7b221d4eacda9a818e92983128d-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_GENOMECOV": {
        "name_process": "BEDTOOLS_GENOMECOV",
        "string_process": "process BEDTOOLS_GENOMECOV {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.forward.bedGraph\"), emit: bedgraph_forward\n    tuple val(meta), path(\"*.reverse.bedGraph\"), emit: bedgraph_reverse\n    path \"versions.yml\"                        , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def prefix_forward = \"${prefix}.forward\"\n    def prefix_reverse = \"${prefix}.reverse\"\n    if (meta.strandedness == 'reverse') {\n        prefix_forward = \"${prefix}.reverse\"\n        prefix_reverse = \"${prefix}.forward\"\n    }\n    \"\"\"\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand + \\\\\n        $args \\\\\n        | bedtools sort > ${prefix_forward}.bedGraph\n\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand - \\\\\n        $args \\\\\n        | bedtools sort > ${prefix_reverse}.bedGraph\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def prefix_forward = \"${prefix}.forward\"\n    def prefix_reverse = \"${prefix}.reverse\"\n    if (meta.strandedness == 'reverse') {\n        prefix_forward = \"${prefix}.reverse\"\n        prefix_reverse = \"${prefix}.forward\"\n    }\n    \"\"\"\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand + \\\\\n        $args \\\\\n        | bedtools sort > ${prefix_forward}.bedGraph\n\n    bedtools \\\\\n        genomecov \\\\\n        -ibam $bam \\\\\n        -bg \\\\\n        -strand - \\\\\n        $args \\\\\n        | bedtools sort > ${prefix_reverse}.bedGraph\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "DUPRADAR": {
        "name_process": "DUPRADAR",
        "string_process": "process DUPRADAR {\n    tag \"$meta.id\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-dupradar=1.18.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dupradar:1.18.0--r40_1' :\n        'quay.io/biocontainers/bioconductor-dupradar:1.18.0--r40_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"*.pdf\")    , emit: pdf\n    tuple val(meta), path(\"*.txt\")    , emit: txt\n    tuple val(meta), path(\"*_mqc.txt\"), emit: multiqc\n    path \"versions.yml\"               , emit: versions\n\n    script:                                                                    \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    def paired_end = meta.single_end ? 'single' :  'paired'\n    \"\"\"\n    dupradar.r \\\\\n        $bam \\\\\n        $prefix \\\\\n        $gtf \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-dupradar: \\$(Rscript -e \"library(dupRadar); cat(as.character(packageVersion('dupRadar')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    def paired_end = meta.single_end ? 'single' :  'paired'\n    \"\"\"\n    dupradar.r \\\\\n        $bam \\\\\n        $prefix \\\\\n        $gtf \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-dupradar: \\$(Rscript -e \"library(dupRadar); cat(as.character(packageVersion('dupRadar')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::bioconductor-dupradar=1.18.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dupradar:1.18.0--r40_1' : 'quay.io/biocontainers/bioconductor-dupradar:1.18.0--r40_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_IDS_TO_RUNINFO": {
        "name_process": "SRA_IDS_TO_RUNINFO",
        "string_process": "\nprocess SRA_IDS_TO_RUNINFO {\n    tag \"$id\"\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    val id\n    val fields\n\n    output:\n    path \"*.tsv\"       , emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:\n    def metadata_fields = fields ? \"--ena_metadata_fields ${fields}\" : ''\n    \"\"\"\n    echo $id > id.txt\n    sra_ids_to_runinfo.py \\\\\n        id.txt \\\\\n        ${id}.runinfo.tsv \\\\\n        $metadata_fields\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def metadata_fields = fields ? \"--ena_metadata_fields ${fields}\" : ''\n    \"\"\"\n    echo $id > id.txt\n    sra_ids_to_runinfo.py \\\\\n        id.txt \\\\\n        ${id}.runinfo.tsv \\\\\n        $metadata_fields\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fields"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$id\"",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "VCFLIB_VCFUNIQ": {
        "name_process": "VCFLIB_VCFUNIQ",
        "string_process": "\nprocess VCFLIB_VCFUNIQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::vcflib=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/vcflib:1.0.2--h3198e80_5':\n        'quay.io/biocontainers/vcflib:1.0.2--h3198e80_5' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    vcfuniq \\\\\n        $vcf \\\\\n        | bgzip -c $args > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcflib: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    vcfuniq \\\\\n        $vcf \\\\\n        | bgzip -c $args > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcflib: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf",
            "tbi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::vcflib=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/vcflib:1.0.2--h3198e80_5': 'quay.io/biocontainers/vcflib:1.0.2--h3198e80_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "process SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'       , emit: csv\n    path \"versions.yml\", emit: versions\n\n    script:                                                                    \n    \"\"\"\n    check_rnaseq_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    check_rnaseq_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$samplesheet\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 19,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_MERGE": {
        "name_process": "BEDTOOLS_MERGE",
        "string_process": "process BEDTOOLS_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n\n    output:\n    tuple val(meta), path('*.bed'), emit: bed\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        merge \\\\\n        -i $bed \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        merge \\\\\n        -i $bed \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "merger"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/merger"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "merger",
                "uri": "https://bio.tools/merger",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            },
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Merge two overlapping sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/merger.html"
            }
        ],
        "inputs": [
            "meta",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NANOPLOT": {
        "name_process": "NANOPLOT",
        "string_process": "process NANOPLOT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::nanoplot=1.39.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nanoplot:1.39.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/nanoplot:1.39.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(ontfile)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.png\") , emit: png\n    tuple val(meta), path(\"*.txt\") , emit: txt\n    tuple val(meta), path(\"*.log\") , emit: log\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"--fastq ${ontfile}\" :\n        (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n    \"\"\"\n    NanoPlot \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        $input_file\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanoplot: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"--fastq ${ontfile}\" :\n        (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n    \"\"\"\n    NanoPlot \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        $input_file\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanoplot: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "ontfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::nanoplot=1.39.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nanoplot:1.39.0--pyhdfd78af_0' : 'quay.io/biocontainers/nanoplot:1.39.0--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MAKE_BED_MASK": {
        "name_process": "MAKE_BED_MASK",
        "string_process": "process MAKE_BED_MASK {\n    tag \"$meta.id\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5 bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-1a35167f7a491c7086c13835aaa74b39f1f43979:6b5cffa1187cfccf2dc983ed3b5359d49b999eb0-0' :\n        'quay.io/biocontainers/mulled-v2-1a35167f7a491c7086c13835aaa74b39f1f43979:6b5cffa1187cfccf2dc983ed3b5359d49b999eb0-0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(vcf)\n    path fasta\n    val save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.bed\")    , emit: bed\n    tuple val(meta), path(\"*.mpileup\"), optional:true, emit: mpileup\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                         \n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: 10\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        $args \\\\\n        --reference $fasta \\\\\n        $bam \\\\\n        $mpileup  \\\\\n        | awk -v OFS='\\\\t' '{print \\$1, \\$2-1, \\$2, \\$4}' | awk '\\$4 < $args2' > lowcov_positions.txt\n\n    make_bed_mask.py \\\\\n        $vcf \\\\\n        lowcov_positions.txt \\\\\n        ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: 10\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        $args \\\\\n        --reference $fasta \\\\\n        $bam \\\\\n        $mpileup  \\\\\n        | awk -v OFS='\\\\t' '{print \\$1, \\$2-1, \\$2, \\$4}' | awk '\\$4 < $args2' > lowcov_positions.txt\n\n    make_bed_mask.py \\\\\n        $vcf \\\\\n        lowcov_positions.txt \\\\\n        ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "mpileup"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/mpileup"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "vcf",
            "fasta",
            "save_mpileup"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5 bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-1a35167f7a491c7086c13835aaa74b39f1f43979:6b5cffa1187cfccf2dc983ed3b5359d49b999eb0-0' : 'quay.io/biocontainers/mulled-v2-1a35167f7a491c7086c13835aaa74b39f1f43979:6b5cffa1187cfccf2dc983ed3b5359d49b999eb0-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UMITOOLS_EXTRACT": {
        "name_process": "UMITOOLS_EXTRACT",
        "string_process": "process UMITOOLS_EXTRACT {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' :\n        'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"versions.yml\"               , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I $reads \\\\\n            -S ${prefix}.umi_extract.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }  else {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I ${reads[0]} \\\\\n            --read2-in=${reads[1]} \\\\\n            -S ${prefix}.umi_extract_1.fastq.gz \\\\\n            --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I $reads \\\\\n            -S ${prefix}.umi_extract.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }  else {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I ${reads[0]} \\\\\n            --read2-in=${reads[1]} \\\\\n            -S ${prefix}.umi_extract_1.fastq.gz \\\\\n            --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "EXTRACT"
        ],
        "tools_url": [
            "https://bio.tools/extract"
        ],
        "tools_dico": [
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' : 'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SRATOOLS_FASTERQDUMP": {
        "name_process": "SRATOOLS_FASTERQDUMP",
        "string_process": "\nprocess SRATOOLS_FASTERQDUMP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' :\n        'quay.io/biocontainers/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' }\"\n\n    input:\n    tuple val(meta), path(sra)\n\n    output:\n    tuple val(meta), path(fastq_output), emit: reads\n    tuple val(meta), path(md5_output)  , emit: md5\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    def args = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def config = \"/LIBS/GUID = \\\"${UUID.randomUUID().toString()}\\\"\\\\n/libs/cloud/report_instance_identity = \\\"true\\\"\\\\n\"\n                                                                                       \n                                                                              \n                                               \n    fastq_output = meta.single_end ? '*.fastq.gz'     : '*_{1,2}.fastq.gz'\n    md5_output = meta.single_end ? '*.fastq.gz.md5' : '*_{1,2}.fastq.gz.md5'\n    \"\"\"\n    eval \"\\$(vdb-config -o n NCBI_SETTINGS | sed 's/[\" ]//g')\"\n    if [[ ! -f \"\\${NCBI_SETTINGS}\" ]]; then\n        mkdir -p \"\\$(dirname \"\\${NCBI_SETTINGS}\")\"\n        printf '${config}' > \"\\${NCBI_SETTINGS}\"\n    fi\n\n    fasterq-dump \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${sra.name}\n\n    pigz \\\\\n        $args2 \\\\\n        --no-name \\\\\n        --processes $task.cpus \\\\\n        *.fastq\n\n    ## Rename FastQ files by meta.id\n    if [ -f  ${sra.name}.fastq.gz ]; then\n        mv ${sra.name}.fastq.gz ${meta.id}.fastq.gz\n        md5sum ${meta.id}.fastq.gz > ${meta.id}.fastq.gz.md5\n    fi\n\n    if [ -f  ${sra.name}_1.fastq.gz ]; then\n        mv ${sra.name}_1.fastq.gz ${meta.id}_1.fastq.gz\n        md5sum ${meta.id}_1.fastq.gz > ${meta.id}_1.fastq.gz.md5\n    fi\n\n    if [ -f  ${sra.name}_2.fastq.gz ]; then\n        mv ${sra.name}_2.fastq.gz ${meta.id}_2.fastq.gz\n        md5sum ${meta.id}_2.fastq.gz > ${meta.id}_2.fastq.gz.md5\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sratools: \\$(fasterq-dump --version 2>&1 | grep -Eo '[0-9.]+')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 66,
        "string_script": "    def args = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def config = \"/LIBS/GUID = \\\"${UUID.randomUUID().toString()}\\\"\\\\n/libs/cloud/report_instance_identity = \\\"true\\\"\\\\n\"\n                                                                                       \n                                                                              \n                                               \n    fastq_output = meta.single_end ? '*.fastq.gz'     : '*_{1,2}.fastq.gz'\n    md5_output = meta.single_end ? '*.fastq.gz.md5' : '*_{1,2}.fastq.gz.md5'\n    \"\"\"\n    eval \"\\$(vdb-config -o n NCBI_SETTINGS | sed 's/[\" ]//g')\"\n    if [[ ! -f \"\\${NCBI_SETTINGS}\" ]]; then\n        mkdir -p \"\\$(dirname \"\\${NCBI_SETTINGS}\")\"\n        printf '${config}' > \"\\${NCBI_SETTINGS}\"\n    fi\n\n    fasterq-dump \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${sra.name}\n\n    pigz \\\\\n        $args2 \\\\\n        --no-name \\\\\n        --processes $task.cpus \\\\\n        *.fastq\n\n    ## Rename FastQ files by meta.id\n    if [ -f  ${sra.name}.fastq.gz ]; then\n        mv ${sra.name}.fastq.gz ${meta.id}.fastq.gz\n        md5sum ${meta.id}.fastq.gz > ${meta.id}.fastq.gz.md5\n    fi\n\n    if [ -f  ${sra.name}_1.fastq.gz ]; then\n        mv ${sra.name}_1.fastq.gz ${meta.id}_1.fastq.gz\n        md5sum ${meta.id}_1.fastq.gz > ${meta.id}_1.fastq.gz.md5\n    fi\n\n    if [ -f  ${sra.name}_2.fastq.gz ]; then\n        mv ${sra.name}_2.fastq.gz ${meta.id}_2.fastq.gz\n        md5sum ${meta.id}_2.fastq.gz > ${meta.id}_2.fastq.gz.md5\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sratools: \\$(fasterq-dump --version 2>&1 | grep -Eo '[0-9.]+')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 47,
        "language_script": "bash",
        "tools": [
            "BTEVAL"
        ],
        "tools_url": [
            "https://bio.tools/bteval"
        ],
        "tools_dico": [
            {
                "name": "BTEVAL",
                "uri": "https://bio.tools/bteval",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Protein sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Sequence analysis (protein)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The aim of BTEVAL server is to evaluate beta turn prediction algorithms on a uniform data set of 426 proteins or subsets of these proteins. It is the new data set in which no two protein chains have more that 25% sequence identity and each chain contains minimum one beta turn.",
                "homepage": "http://www.imtech.res.in/raghava/bteval"
            }
        ],
        "inputs": [
            "meta",
            "sra"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' : 'quay.io/biocontainers/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BCFTOOLS_FILTER": {
        "name_process": "BCFTOOLS_FILTER",
        "string_process": "process BCFTOOLS_FILTER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools filter \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools filter \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SRATOOLS_PREFETCH": {
        "name_process": "SRATOOLS_PREFETCH",
        "string_process": "\nprocess SRATOOLS_PREFETCH {\n    tag \"$id\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sra-tools:2.11.0--pl5262h314213e_0' :\n        'quay.io/biocontainers/sra-tools:2.11.0--pl5262h314213e_0' }\"\n\n    input:\n    tuple val(meta), val(id)\n\n    output:\n    tuple val(meta), path(\"$id\"), emit: sra\n    path \"versions.yml\"         , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def config = \"/LIBS/GUID = \\\"${UUID.randomUUID().toString()}\\\"\\\\n/libs/cloud/report_instance_identity = \\\"true\\\"\\\\n\"\n    \"\"\"\n    eval \"\\$(vdb-config -o n NCBI_SETTINGS | sed 's/[\" ]//g')\"\n    if [[ ! -f \"\\${NCBI_SETTINGS}\" ]]; then\n        mkdir -p \"\\$(dirname \"\\${NCBI_SETTINGS}\")\"\n        printf '${config}' > \"\\${NCBI_SETTINGS}\"\n    fi\n\n    retry_with_backoff.sh prefetch \\\\\n        $args \\\\\n        --progress \\\\\n        $id\n\n    vdb-validate $id\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sratools: \\$(prefetch --version 2>&1 | grep -Eo '[0-9.]+')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def config = \"/LIBS/GUID = \\\"${UUID.randomUUID().toString()}\\\"\\\\n/libs/cloud/report_instance_identity = \\\"true\\\"\\\\n\"\n    \"\"\"\n    eval \"\\$(vdb-config -o n NCBI_SETTINGS | sed 's/[\" ]//g')\"\n    if [[ ! -f \"\\${NCBI_SETTINGS}\" ]]; then\n        mkdir -p \"\\$(dirname \"\\${NCBI_SETTINGS}\")\"\n        printf '${config}' > \"\\${NCBI_SETTINGS}\"\n    fi\n\n    retry_with_backoff.sh prefetch \\\\\n        $args \\\\\n        --progress \\\\\n        $id\n\n    vdb-validate $id\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sratools: \\$(prefetch --version 2>&1 | grep -Eo '[0-9.]+')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "BTEVAL"
        ],
        "tools_url": [
            "https://bio.tools/bteval"
        ],
        "tools_dico": [
            {
                "name": "BTEVAL",
                "uri": "https://bio.tools/bteval",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Protein sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Sequence analysis (protein)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The aim of BTEVAL server is to evaluate beta turn prediction algorithms on a uniform data set of 426 proteins or subsets of these proteins. It is the new data set in which no two protein chains have more that 25% sequence identity and each chain contains minimum one beta turn.",
                "homepage": "http://www.imtech.res.in/raghava/bteval"
            }
        ],
        "inputs": [
            "meta",
            "id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$id\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sra-tools:2.11.0--pl5262h314213e_0' : 'quay.io/biocontainers/sra-tools:2.11.0--pl5262h314213e_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GFFREAD": {
        "name_process": "GFFREAD",
        "string_process": "process GFFREAD {\n    tag \"$gff\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0' :\n        'quay.io/biocontainers/gffread:0.12.1--h8b12597_0' }\"\n\n    input:\n    path gff\n\n    output:\n    path \"*.gtf\"        , emit: gtf\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${gff.baseName}\"\n    \"\"\"\n    gffread \\\\\n        $gff \\\\\n        $args \\\\\n        -o ${prefix}.gtf\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gffread: \\$(gffread --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${gff.baseName}\"\n    \"\"\"\n    gffread \\\\\n        $gff \\\\\n        $args \\\\\n        -o ${prefix}.gtf\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gffread: \\$(gffread --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$gff\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0' : 'quay.io/biocontainers/gffread:0.12.1--h8b12597_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "COLLAPSE_PRIMERS": {
        "name_process": "COLLAPSE_PRIMERS",
        "string_process": "process COLLAPSE_PRIMERS {\n    tag \"$bed\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path bed\n    val left_suffix\n    val right_suffix\n\n    output:\n    path '*.bed'       , emit: bed\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                        \n    \"\"\"\n    collapse_primer_bed.py \\\\\n        --left_primer_suffix $left_suffix \\\\\n        --right_primer_suffix $right_suffix \\\\\n        $bed \\\\\n        ${bed.baseName}.collapsed.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    collapse_primer_bed.py \\\\\n        --left_primer_suffix $left_suffix \\\\\n        --right_primer_suffix $right_suffix \\\\\n        $bed \\\\\n        ${bed.baseName}.collapsed.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "left_suffix",
            "right_suffix"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$bed\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ABACAS": {
        "name_process": "ABACAS",
        "string_process": "process ABACAS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::abacas=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/abacas:1.3.1--pl526_0' :\n        'quay.io/biocontainers/abacas:1.3.1--pl526_0' }\"\n\n    input:\n    tuple val(meta), path(scaffold)\n    path  fasta\n\n    output:\n    tuple val(meta), path('*.abacas*'), emit: results\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abacas.pl \\\\\n        -r $fasta \\\\\n        -q $scaffold \\\\\n        $args \\\\\n        -o ${prefix}.abacas\n\n    mv nucmer.delta ${prefix}.abacas.nucmer.delta\n    mv nucmer.filtered.delta ${prefix}.abacas.nucmer.filtered.delta\n    mv nucmer.tiling ${prefix}.abacas.nucmer.tiling\n    mv unused_contigs.out ${prefix}.abacas.unused.contigs.out\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abacas: \\$(echo \\$(abacas.pl -v 2>&1) | sed 's/^.*ABACAS.//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abacas.pl \\\\\n        -r $fasta \\\\\n        -q $scaffold \\\\\n        $args \\\\\n        -o ${prefix}.abacas\n\n    mv nucmer.delta ${prefix}.abacas.nucmer.delta\n    mv nucmer.filtered.delta ${prefix}.abacas.nucmer.filtered.delta\n    mv nucmer.tiling ${prefix}.abacas.nucmer.tiling\n    mv unused_contigs.out ${prefix}.abacas.unused.contigs.out\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abacas: \\$(echo \\$(abacas.pl -v 2>&1) | sed 's/^.*ABACAS.//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scaffold",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::abacas=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/abacas:1.3.1--pl526_0' : 'quay.io/biocontainers/abacas:1.3.1--pl526_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_STATS": {
        "name_process": "BCFTOOLS_STATS",
        "string_process": "process BCFTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*stats.txt\"), emit: stats\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools stats $args $vcf > ${prefix}.bcftools_stats.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools stats $args $vcf > ${prefix}.bcftools_stats.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_COLLECTMULTIPLEMETRICS": {
        "name_process": "PICARD_COLLECTMULTIPLEMETRICS",
        "string_process": "process PICARD_COLLECTMULTIPLEMETRICS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*_metrics\"), emit: metrics\n    tuple val(meta), path(\"*.pdf\")    , emit: pdf\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectMultipleMetrics \\\\\n        $args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.CollectMultipleMetrics \\\\\n        REFERENCE_SEQUENCE=$fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectMultipleMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectMultipleMetrics \\\\\n        $args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.CollectMultipleMetrics \\\\\n        REFERENCE_SEQUENCE=$fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectMultipleMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' : 'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SYNAPSE_SHOW": {
        "name_process": "SYNAPSE_SHOW",
        "string_process": "\nprocess SYNAPSE_SHOW {\n    tag \"$id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::synapseclient=2.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/synapseclient:2.4.0--pyh5e36f6f_0' :\n        'quay.io/biocontainers/synapseclient:2.4.0--pyh5e36f6f_0' }\"\n\n    input:\n    val id\n    path config\n\n    output:\n    path \"*.txt\"       , emit: metadata\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        show \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.metadata.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        show \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.metadata.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "SHOW"
        ],
        "tools_url": [
            "https://bio.tools/show"
        ],
        "tools_dico": [
            {
                "name": "SHOW",
                "uri": "https://bio.tools/show",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables self-learning of HMM on a set of sequences, sequence segmentation based on the Baum-Welch or the Viterbi algorithms,and sequence simulation under a given HMM. Allows the user to specify any highly structured model and also to process large sets of sequences. Successfully used in diverse tasks such as DNA segmentation in homogeneous segments, bacterial gene prediction and human splice sites detection.",
                "homepage": "http://genome.jouy.inra.fr/ssb/SHOW/"
            }
        ],
        "inputs": [
            "id",
            "config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::synapseclient=2.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/synapseclient:2.4.0--pyh5e36f6f_0' : 'quay.io/biocontainers/synapseclient:2.4.0--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "ARTIC_GUPPYPLEX": {
        "name_process": "ARTIC_GUPPYPLEX",
        "string_process": "process ARTIC_GUPPYPLEX {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' :\n        'quay.io/biocontainers/artic:1.2.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(fastq_dir)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    artic \\\\\n        guppyplex \\\\\n        $args \\\\\n        --directory $fastq_dir \\\\\n        --output ${prefix}.fastq\n\n    pigz -p $task.cpus *.fastq\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    artic \\\\\n        guppyplex \\\\\n        $args \\\\\n        --directory $fastq_dir \\\\\n        --output ${prefix}.fastq\n\n    pigz -p $task.cpus *.fastq\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "ARTIC"
        ],
        "tools_url": [
            "https://bio.tools/artic"
        ],
        "tools_dico": [
            {
                "name": "ARTIC",
                "uri": "https://bio.tools/artic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
                "homepage": "https://github.com/artic-network/fieldbioinformatics"
            }
        ],
        "inputs": [
            "meta",
            "fastq_dir"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' : 'quay.io/biocontainers/artic:1.2.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STRINGTIE": {
        "name_process": "STRINGTIE",
        "string_process": "process STRINGTIE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::stringtie=2.1.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/stringtie:2.1.7--h978d192_0' :\n        'quay.io/biocontainers/stringtie:2.1.7--h978d192_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"*.coverage.gtf\")   , emit: coverage_gtf\n    tuple val(meta), path(\"*.transcripts.gtf\"), emit: transcript_gtf\n    tuple val(meta), path(\"*.abundance.txt\")  , emit: abundance\n    tuple val(meta), path(\"*.ballgown\")       , emit: ballgown\n    path  \"versions.yml\"                      , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--fr'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--rf'\n    }\n    \"\"\"\n    stringtie \\\\\n        $bam \\\\\n        $strandedness \\\\\n        -G $gtf \\\\\n        -o ${prefix}.transcripts.gtf \\\\\n        -A ${prefix}.gene.abundance.txt \\\\\n        -C ${prefix}.coverage.gtf \\\\\n        -b ${prefix}.ballgown \\\\\n        -p $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stringtie: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--fr'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--rf'\n    }\n    \"\"\"\n    stringtie \\\\\n        $bam \\\\\n        $strandedness \\\\\n        -G $gtf \\\\\n        -o ${prefix}.transcripts.gtf \\\\\n        -A ${prefix}.gene.abundance.txt \\\\\n        -C ${prefix}.coverage.gtf \\\\\n        -b ${prefix}.ballgown \\\\\n        -p $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stringtie: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::stringtie=2.1.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/stringtie:2.1.7--h978d192_0' : 'quay.io/biocontainers/stringtie:2.1.7--h978d192_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLOT_BASE_DENSITY": {
        "name_process": "PLOT_BASE_DENSITY",
        "string_process": "process PLOT_BASE_DENSITY {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-reshape2=1.4.4 conda-forge::r-optparse=1.6.6 conda-forge::r-ggplot2=3.3.3 conda-forge::r-scales=1.1.1 conda-forge::r-viridis=0.5.1 conda-forge::r-tidyverse=1.3.0 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-complexheatmap=2.6.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' :\n        'quay.io/biocontainers/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path('*.pdf'), emit: pdf\n    tuple val(meta), path('*.tsv'), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                        \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plot_base_density.r \\\\\n        --fasta_files $fasta \\\\\n        --prefixes $prefix \\\\\n        --output_dir ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plot_base_density.r \\\\\n        --fasta_files $fasta \\\\\n        --prefixes $prefix \\\\\n        --output_dir ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-reshape2=1.4.4 conda-forge::r-optparse=1.6.6 conda-forge::r-ggplot2=3.3.3 conda-forge::r-scales=1.1.1 conda-forge::r-viridis=0.5.1 conda-forge::r-tidyverse=1.3.0 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-complexheatmap=2.6.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' : 'quay.io/biocontainers/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SUBREAD_FEATURECOUNTS": {
        "name_process": "SUBREAD_FEATURECOUNTS",
        "string_process": "process SUBREAD_FEATURECOUNTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0' :\n        'quay.io/biocontainers/subread:2.0.1--hed695b0_0' }\"\n\n    input:\n    tuple val(meta), path(bams), path(annotation)\n\n    output:\n    tuple val(meta), path(\"*featureCounts.txt\")        , emit: counts\n    tuple val(meta), path(\"*featureCounts.txt.summary\"), emit: summary\n    path \"versions.yml\"                                , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-p'\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    \"\"\"\n    featureCounts \\\\\n        $args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -s $strandedness \\\\\n        -o ${prefix}.featureCounts.txt \\\\\n        ${bams.join(' ')}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        subread: \\$( echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-p'\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    \"\"\"\n    featureCounts \\\\\n        $args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -s $strandedness \\\\\n        -o ${prefix}.featureCounts.txt \\\\\n        ${bams.join(' ')}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        subread: \\$( echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "meta",
            "bams",
            "annotation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0' : 'quay.io/biocontainers/subread:2.0.1--hed695b0_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC_MAPPINGS_CONFIG": {
        "name_process": "MULTIQC_MAPPINGS_CONFIG",
        "string_process": "\nprocess MULTIQC_MAPPINGS_CONFIG {\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path csv\n\n    output:\n    path \"*yml\"        , emit: yml\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    multiqc_mappings_config.py \\\\\n        $csv \\\\\n        multiqc_config.yml\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    multiqc_mappings_config.py \\\\\n        $csv \\\\\n        multiqc_config.yml\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "csv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "STAR_GENOMEGENERATE": {
        "name_process": "STAR_GENOMEGENERATE",
        "string_process": "process STAR_GENOMEGENERATE {\n    tag \"$fasta\"\n    label 'process_high'\n\n                                                         \n    conda (params.enable_conda ? \"bioconda::star=2.6.1d bioconda::samtools=1.10 conda-forge::gawk=5.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0' :\n        'quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0' }\"\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"star\"        , emit: index\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args   = (task.ext.args ?: '').tokenize()\n    def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    if (args.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            ${args.join(' ')}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            ${args.join(' ')}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 59,
        "string_script": "    def args   = (task.ext.args ?: '').tokenize()\n    def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    if (args.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            ${args.join(' ')}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            ${args.join(' ')}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::star=2.6.1d bioconda::samtools=1.10 conda-forge::gawk=5.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0' : 'quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:59cdd445419f14abac76b31dd0d71217994cbcc9-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BBMAP_BBSPLIT": {
        "name_process": "BBMAP_BBSPLIT",
        "string_process": "process BBMAP_BBSPLIT {\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.93\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bbmap:38.93--he522d1c_0' :\n        'quay.io/biocontainers/bbmap:38.93--he522d1c_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  primary_ref\n    tuple val(other_ref_names), path (other_ref_paths)\n    val   only_build_index\n\n    output:\n    path \"bbsplit\"                            , optional:true, emit: index\n    tuple val(meta), path('*primary*fastq.gz'), optional:true, emit: primary_fastq\n    tuple val(meta), path('*fastq.gz')        , optional:true, emit: all_fastq\n    tuple val(meta), path('*txt')             , optional:true, emit: stats\n    path \"versions.yml\"                       , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[BBSplit] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    def other_refs = []\n    other_ref_names.eachWithIndex { name, index ->\n        other_refs << \"ref_${name}=${other_ref_paths[index]}\"\n    }\n    if (only_build_index) {\n        if (primary_ref && other_ref_names && other_ref_paths) {\n            \"\"\"\n            bbsplit.sh \\\\\n                -Xmx${avail_mem}g \\\\\n                ref_primary=$primary_ref \\\\\n                ${other_refs.join(' ')} \\\\\n                path=bbsplit \\\\\n                threads=$task.cpus \\\\\n                $args\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                bbmap: \\$(bbversion.sh 2>&1)\n            END_VERSIONS\n            \"\"\"\n        } else {\n            log.error 'ERROR: Please specify as input a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n    } else {\n        def index_files = ''\n        if (index) {\n            index_files = \"path=$index\"\n        } else if (primary_ref && other_ref_names && other_ref_paths) {\n            index_files = \"ref_primary=${primary_ref} ${other_refs.join(' ')}\"\n        } else {\n            log.error 'ERROR: Please either specify a BBSplit index as input or a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n        def fastq_in  = meta.single_end ? \"in=${reads}\" : \"in=${reads[0]} in2=${reads[1]}\"\n        def fastq_out = meta.single_end ? \"basename=${prefix}_%.fastq.gz\" : \"basename=${prefix}_%_#.fastq.gz\"\n        \"\"\"\n        bbsplit.sh \\\\\n            -Xmx${avail_mem}g \\\\\n            $index_files \\\\\n            threads=$task.cpus \\\\\n            $fastq_in \\\\\n            $fastq_out \\\\\n            refstats=${prefix}.stats.txt \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bbmap: \\$(bbversion.sh 2>&1)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 82,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[BBSplit] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    def other_refs = []\n    other_ref_names.eachWithIndex { name, index ->\n        other_refs << \"ref_${name}=${other_ref_paths[index]}\"\n    }\n    if (only_build_index) {\n        if (primary_ref && other_ref_names && other_ref_paths) {\n            \"\"\"\n            bbsplit.sh \\\\\n                -Xmx${avail_mem}g \\\\\n                ref_primary=$primary_ref \\\\\n                ${other_refs.join(' ')} \\\\\n                path=bbsplit \\\\\n                threads=$task.cpus \\\\\n                $args\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                bbmap: \\$(bbversion.sh 2>&1)\n            END_VERSIONS\n            \"\"\"\n        } else {\n            log.error 'ERROR: Please specify as input a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n    } else {\n        def index_files = ''\n        if (index) {\n            index_files = \"path=$index\"\n        } else if (primary_ref && other_ref_names && other_ref_paths) {\n            index_files = \"ref_primary=${primary_ref} ${other_refs.join(' ')}\"\n        } else {\n            log.error 'ERROR: Please either specify a BBSplit index as input or a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n        def fastq_in  = meta.single_end ? \"in=${reads}\" : \"in=${reads[0]} in2=${reads[1]}\"\n        def fastq_out = meta.single_end ? \"basename=${prefix}_%.fastq.gz\" : \"basename=${prefix}_%_#.fastq.gz\"\n        \"\"\"\n        bbsplit.sh \\\\\n            -Xmx${avail_mem}g \\\\\n            $index_files \\\\\n            threads=$task.cpus \\\\\n            $fastq_in \\\\\n            $fastq_out \\\\\n            refstats=${prefix}.stats.txt \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bbmap: \\$(bbversion.sh 2>&1)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "index",
            "primary_ref",
            "other_ref_names",
            "other_ref_paths",
            "only_build_index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.93\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bbmap:38.93--he522d1c_0' : 'quay.io/biocontainers/bbmap:38.93--he522d1c_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "process GUNZIP {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$gunzip\"), emit: gunzip\n    path \"versions.yml\"             , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FASTP": {
        "name_process": "FASTP",
        "string_process": "process FASTP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::fastp=0.23.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastp:0.23.2--h79da9fb_0' :\n        'quay.io/biocontainers/fastp:0.23.2--h79da9fb_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    val   save_trimmed_fail\n    val   save_merged\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz')  , emit: reads\n    tuple val(meta), path('*.json')           , emit: json\n    tuple val(meta), path('*.html')           , emit: html\n    tuple val(meta), path('*.log')            , emit: log\n    path \"versions.yml\"                       , emit: versions\n    tuple val(meta), path('*.fail.fastq.gz')  , optional:true, emit: reads_fail\n    tuple val(meta), path('*.merged.fastq.gz'), optional:true, emit: reads_merged\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def fail_fastq = save_trimmed_fail ? \"--failed_out ${prefix}.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}.fastq.gz \\\\\n            --out1 ${prefix}.trim.fastq.gz \\\\\n            --thread $task.cpus \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def fail_fastq  = save_trimmed_fail ? \"--unpaired1 ${prefix}_1.fail.fastq.gz --unpaired2 ${prefix}_2.fail.fastq.gz\" : ''\n        def merge_fastq = save_merged ? \"-m --merged_out ${prefix}.merged.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}_1.fastq.gz \\\\\n            --in2 ${prefix}_2.fastq.gz \\\\\n            --out1 ${prefix}_1.trim.fastq.gz \\\\\n            --out2 ${prefix}_2.trim.fastq.gz \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $merge_fastq \\\\\n            --thread $task.cpus \\\\\n            --detect_adapter_for_pe \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 73,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def fail_fastq = save_trimmed_fail ? \"--failed_out ${prefix}.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}.fastq.gz \\\\\n            --out1 ${prefix}.trim.fastq.gz \\\\\n            --thread $task.cpus \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def fail_fastq  = save_trimmed_fail ? \"--unpaired1 ${prefix}_1.fail.fastq.gz --unpaired2 ${prefix}_2.fail.fastq.gz\" : ''\n        def merge_fastq = save_merged ? \"-m --merged_out ${prefix}.merged.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}_1.fastq.gz \\\\\n            --in2 ${prefix}_2.fastq.gz \\\\\n            --out1 ${prefix}_1.trim.fastq.gz \\\\\n            --out2 ${prefix}_2.trim.fastq.gz \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $merge_fastq \\\\\n            --thread $task.cpus \\\\\n            --detect_adapter_for_pe \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "save_trimmed_fail",
            "save_merged"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::fastp=0.23.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastp:0.23.2--h79da9fb_0' : 'quay.io/biocontainers/fastp:0.23.2--h79da9fb_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SNPEFF_ANN": {
        "name_process": "SNPEFF_ANN",
        "string_process": "process SNPEFF_ANN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::snpeff=5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' :\n        'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path  db\n    path  config\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.vcf\")      , emit: vcf\n    tuple val(meta), path(\"*.csv\")      , emit: csv\n    tuple val(meta), path(\"*.genes.txt\"), emit: txt\n    tuple val(meta), path(\"*.html\")     , emit: html\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[snpEff] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    snpEff \\\\\n        -Xmx${avail_mem}g \\\\\n        ${fasta.baseName} \\\\\n        -config $config \\\\\n        -dataDir $db \\\\\n        $args \\\\\n        $vcf \\\\\n        -csvStats ${prefix}.snpeff.csv \\\\\n        > ${prefix}.snpeff.vcf\n    mv snpEff_summary.html ${prefix}.snpeff.summary.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpeff: \\$(echo \\$(snpEff -version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[snpEff] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    snpEff \\\\\n        -Xmx${avail_mem}g \\\\\n        ${fasta.baseName} \\\\\n        -config $config \\\\\n        -dataDir $db \\\\\n        $args \\\\\n        $vcf \\\\\n        -csvStats ${prefix}.snpeff.csv \\\\\n        > ${prefix}.snpeff.vcf\n    mv snpEff_summary.html ${prefix}.snpeff.summary.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpeff: \\$(echo \\$(snpEff -version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "snpEff"
        ],
        "tools_url": [
            "https://bio.tools/snpeff"
        ],
        "tools_dico": [
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "db",
            "config",
            "fasta"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::snpeff=5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' : 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEM_PREPAREREFERENCE": {
        "name_process": "RSEM_PREPAREREFERENCE",
        "string_process": "process RSEM_PREPAREREFERENCE {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' :\n        'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' }\"\n\n    input:\n    path fasta, stageAs: \"rsem/*\"\n    path gtf\n\n    output:\n    path \"rsem\"           , emit: index\n    path \"*transcripts.fa\", emit: transcript_fasta\n    path \"versions.yml\"   , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args_list = args.tokenize()\n    if (args_list.contains('--star')) {\n        args_list.removeIf { it.contains('--star') }\n        def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir rsem/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args2\n\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            ${args_list.join(' ')} \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            $args \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 67,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args_list = args.tokenize()\n    if (args_list.contains('--star')) {\n        args_list.removeIf { it.contains('--star') }\n        def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir rsem/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args2\n\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            ${args_list.join(' ')} \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            $args \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 48,
        "language_script": "bash",
        "tools": [
            "STAR",
            "Mgenome"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/mgenome"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' : 'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BCFTOOLS_QUERY": {
        "name_process": "BCFTOOLS_QUERY",
        "string_process": "process BCFTOOLS_QUERY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n    path regions\n    path targets\n    path samples\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions_file = regions ? \"--regions-file ${regions}\" : \"\"\n    def targets_file = targets ? \"--targets-file ${targets}\" : \"\"\n    def samples_file =  samples ? \"--samples-file ${samples}\" : \"\"\n    \"\"\"\n    bcftools query \\\\\n        --output ${prefix}.txt \\\\\n        $regions_file \\\\\n        $targets_file \\\\\n        $samples_file \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions_file = regions ? \"--regions-file ${regions}\" : \"\"\n    def targets_file = targets ? \"--targets-file ${targets}\" : \"\"\n    def samples_file =  samples ? \"--samples-file ${samples}\" : \"\"\n    \"\"\"\n    bcftools query \\\\\n        --output ${prefix}.txt \\\\\n        $regions_file \\\\\n        $targets_file \\\\\n        $samples_file \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "regions",
            "targets",
            "samples"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SPADES": {
        "name_process": "SPADES",
        "string_process": "process SPADES {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0' :\n        'quay.io/biocontainers/spades:3.15.3--h95f258a_0' }\"\n\n    input:\n    tuple val(meta), path(illumina), path(pacbio), path(nanopore)\n    path  hmm\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa.gz')    , optional:true, emit: scaffolds\n    tuple val(meta), path('*.contigs.fa.gz')      , optional:true, emit: contigs\n    tuple val(meta), path('*.transcripts.fa.gz')  , optional:true, emit: transcripts\n    tuple val(meta), path('*.gene_clusters.fa.gz'), optional:true, emit: gene_clusters\n    tuple val(meta), path('*.assembly.gfa.gz')    , optional:true, emit: gfa\n    tuple val(meta), path('*.log')                , emit: log\n    path  \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def maxmem = task.memory.toGiga()\n    def illumina_reads = illumina ? ( meta.single_end ? \"-s $illumina\" : \"-1 ${illumina[0]} -2 ${illumina[1]}\" ) : \"\"\n    def pacbio_reads = pacbio ? \"--pacbio $pacbio\" : \"\"\n    def nanopore_reads = nanopore ? \"--nanopore $nanopore\" : \"\"\n    def custom_hmms = hmm ? \"--custom-hmms $hmm\" : \"\"\n    \"\"\"\n    spades.py \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --memory $maxmem \\\\\n        $custom_hmms \\\\\n        $illumina_reads \\\\\n        $pacbio_reads \\\\\n        $nanopore_reads \\\\\n        -o ./\n    mv spades.log ${prefix}.spades.log\n\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n        gzip -n ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n        gzip -n ${prefix}.contigs.fa\n    fi\n    if [ -f transcripts.fasta ]; then\n        mv transcripts.fasta ${prefix}.transcripts.fa\n        gzip -n ${prefix}.transcripts.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n        gzip -n ${prefix}.assembly.gfa\n    fi\n\n    if [ -f gene_clusters.fasta ]; then\n        mv gene_clusters.fasta ${prefix}.gene_clusters.fa\n        gzip -n ${prefix}.gene_clusters.fa\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        spades: \\$(spades.py --version 2>&1 | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 71,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def maxmem = task.memory.toGiga()\n    def illumina_reads = illumina ? ( meta.single_end ? \"-s $illumina\" : \"-1 ${illumina[0]} -2 ${illumina[1]}\" ) : \"\"\n    def pacbio_reads = pacbio ? \"--pacbio $pacbio\" : \"\"\n    def nanopore_reads = nanopore ? \"--nanopore $nanopore\" : \"\"\n    def custom_hmms = hmm ? \"--custom-hmms $hmm\" : \"\"\n    \"\"\"\n    spades.py \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --memory $maxmem \\\\\n        $custom_hmms \\\\\n        $illumina_reads \\\\\n        $pacbio_reads \\\\\n        $nanopore_reads \\\\\n        -o ./\n    mv spades.log ${prefix}.spades.log\n\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n        gzip -n ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n        gzip -n ${prefix}.contigs.fa\n    fi\n    if [ -f transcripts.fasta ]; then\n        mv transcripts.fasta ${prefix}.transcripts.fa\n        gzip -n ${prefix}.transcripts.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n        gzip -n ${prefix}.assembly.gfa\n    fi\n\n    if [ -f gene_clusters.fasta ]; then\n        mv gene_clusters.fasta ${prefix}.gene_clusters.fa\n        gzip -n ${prefix}.gene_clusters.fa\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        spades: \\$(spades.py --version 2>&1 | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "illumina",
            "pacbio",
            "nanopore",
            "hmm"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0' : 'quay.io/biocontainers/spades:3.15.3--h95f258a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "process KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' :\n        'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n\n    output:\n    tuple val(meta), path('*classified*')  , emit: classified\n    tuple val(meta), path('*unclassified*'), emit: unclassified\n    tuple val(meta), path('*report.txt')   , emit: txt\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' : 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_INFEREXPERIMENT": {
        "name_process": "RSEQC_INFEREXPERIMENT",
        "string_process": "process RSEQC_INFEREXPERIMENT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.infer_experiment.txt\"), emit: txt\n    path  \"versions.yml\"                           , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    infer_experiment.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args \\\\\n        > ${prefix}.infer_experiment.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(infer_experiment.py --version | sed -e \"s/infer_experiment.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    infer_experiment.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args \\\\\n        > ${prefix}.infer_experiment.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(infer_experiment.py --version | sed -e \"s/infer_experiment.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MAKE_VARIANTS_LONG_TABLE": {
        "name_process": "MAKE_VARIANTS_LONG_TABLE",
        "string_process": "process MAKE_VARIANTS_LONG_TABLE {\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5 conda-forge::matplotlib=3.5.1 conda-forge::pandas=1.3.5 conda-forge::r-sys=3.4 conda-forge::regex=2021.11.10 conda-forge::scipy=1.7.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' :\n        'quay.io/biocontainers/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' }\"\n\n    input:\n    path ('bcftools_query/*')\n    path ('snpsift/*')\n    path ('pangolin/*')\n\n    output:\n    path \"*.csv\"       , emit: csv\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                         \n    def args = task.ext.args ?: ''\n    \"\"\"\n    make_variants_long_table.py \\\\\n        --bcftools_query_dir ./bcftools_query \\\\\n        --snpsift_dir ./snpsift \\\\\n        --pangolin_dir ./pangolin \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    make_variants_long_table.py \\\\\n        --bcftools_query_dir ./bcftools_query \\\\\n        --snpsift_dir ./snpsift \\\\\n        --pangolin_dir ./pangolin \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5 conda-forge::matplotlib=3.5.1 conda-forge::pandas=1.3.5 conda-forge::r-sys=3.4 conda-forge::regex=2021.11.10 conda-forge::scipy=1.7.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' : 'quay.io/biocontainers/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SALMON_SUMMARIZEDEXPERIMENT": {
        "name_process": "SALMON_SUMMARIZEDEXPERIMENT",
        "string_process": "process SALMON_SUMMARIZEDEXPERIMENT {\n    tag \"$tx2gene\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-summarizedexperiment=1.20.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-summarizedexperiment:1.20.0--r40_0' :\n        'quay.io/biocontainers/bioconductor-summarizedexperiment:1.20.0--r40_0' }\"\n\n    input:\n    path counts\n    path tpm\n    path tx2gene\n\n    output:\n    path \"*.rds\"       , emit: rds\n    path \"versions.yml\", emit: versions\n\n    script:                                                                    \n    \"\"\"\n    salmon_summarizedexperiment.r \\\\\n        NULL \\\\\n        $counts \\\\\n        $tpm\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-summarizedexperiment: \\$(Rscript -e \"library(SummarizedExperiment); cat(as.character(packageVersion('SummarizedExperiment')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    salmon_summarizedexperiment.r \\\\\n        NULL \\\\\n        $counts \\\\\n        $tpm\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-summarizedexperiment: \\$(Rscript -e \"library(SummarizedExperiment); cat(as.character(packageVersion('SummarizedExperiment')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "counts",
            "tpm",
            "tx2gene"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$tx2gene\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::bioconductor-summarizedexperiment=1.20.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-summarizedexperiment:1.20.0--r40_0' : 'quay.io/biocontainers/bioconductor-summarizedexperiment:1.20.0--r40_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_GETFASTA": {
        "name_process": "BEDTOOLS_GETFASTA",
        "string_process": "process BEDTOOLS_GETFASTA {\n    tag \"$bed\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    path bed\n    path fasta\n\n    output:\n    path \"*.fa\"         , emit: fasta\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${bed.baseName}\"\n    \"\"\"\n    bedtools \\\\\n        getfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${bed.baseName}\"\n    \"\"\"\n    bedtools \\\\\n        getfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bed",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$bed\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path 'multiqc_config.yaml'\n    path multiqc_custom_config\n    path software_versions\n    path workflow_summary\n    path fail_barcodes_no_sample\n    path fail_no_barcode_samples\n    path fail_barcode_count_samples\n    path fail_guppyplex_count_samples\n    path 'amplicon_heatmap_mqc.tsv'\n    path ('pycoqc/*')\n    path ('artic_minion/*')\n    path ('samtools_stats/*')\n    path ('bcftools_stats/*')\n    path ('mosdepth/*')\n    path ('quast/*')\n    path ('snpeff/*')\n    path pangolin_lineage\n    path nextclade_clade\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*.csv\"               , optional:true, emit: csv\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def custom_config = multiqc_custom_config ? \"--config $multiqc_custom_config\" : ''\n    \"\"\"\n    ## Run MultiQC once to parse tool logs\n    multiqc -f $args $custom_config .\n\n    ## Parse YAML files dumped by MultiQC to obtain metrics\n    multiqc_to_custom_csv.py --platform nanopore\n\n    ## Manually remove files that we don't want in the report\n    rm -rf quast\n\n    ## Run MultiQC a second time\n    multiqc -f $args -e general_stats --ignore *nextclade_clade_mqc.tsv $custom_config .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    def args = task.ext.args ?: ''\n    def custom_config = multiqc_custom_config ? \"--config $multiqc_custom_config\" : ''\n    \"\"\"\n    ## Run MultiQC once to parse tool logs\n    multiqc -f $args $custom_config .\n\n    ## Parse YAML files dumped by MultiQC to obtain metrics\n    multiqc_to_custom_csv.py --platform nanopore\n\n    ## Manually remove files that we don't want in the report\n    rm -rf quast\n\n    ## Run MultiQC a second time\n    multiqc -f $args -e general_stats --ignore *nextclade_clade_mqc.tsv $custom_config .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_custom_config",
            "software_versions",
            "workflow_summary",
            "fail_barcodes_no_sample",
            "fail_no_barcode_samples",
            "fail_barcode_count_samples",
            "fail_guppyplex_count_samples",
            "pangolin_lineage",
            "nextclade_clade"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PYCOQC": {
        "name_process": "PYCOQC",
        "string_process": "process PYCOQC {\n    tag \"$summary\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0' :\n        'quay.io/biocontainers/pycoqc:2.5.2--py_0' }\"\n\n    input:\n    path summary\n\n    output:\n    path \"*.html\"        , emit: html\n    path \"*.json\"        , emit: json\n    path  \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    pycoQC \\\\\n        $args \\\\\n        -f $summary \\\\\n        -o pycoqc.html \\\\\n        -j pycoqc.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pycoqc: \\$(pycoQC --version 2>&1 | sed 's/^.*pycoQC v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    pycoQC \\\\\n        $args \\\\\n        -f $summary \\\\\n        -o pycoqc.html \\\\\n        -j pycoqc.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pycoqc: \\$(pycoQC --version 2>&1 | sed 's/^.*pycoQC v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summary"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$summary\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0' : 'quay.io/biocontainers/pycoqc:2.5.2--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BLAST_MAKEBLASTDB": {
        "name_process": "BLAST_MAKEBLASTDB",
        "string_process": "process BLAST_MAKEBLASTDB {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' :\n        'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'blast_db'     , emit: db\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    makeblastdb \\\\\n        -in $fasta \\\\\n        $args\n    mkdir blast_db\n    mv ${fasta}* blast_db\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    makeblastdb \\\\\n        -in $fasta \\\\\n        $args\n    mkdir blast_db\n    mv ${fasta}* blast_db\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' : 'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GET_CHROM_SIZES": {
        "name_process": "GET_CHROM_SIZES",
        "string_process": "process GET_CHROM_SIZES {\n    tag \"$fasta\"\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path '*.sizes'     , emit: sizes\n    path '*.fai'       , emit: fai\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "pyfaidx"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/pyfaidx"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pyfaidx",
                "uri": "https://bio.tools/pyfaidx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This python module implements pure Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index.",
                "homepage": "https://pythonhosted.org/pyfaidx/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_QUANT": {
        "name_process": "SALMON_QUANT",
        "string_process": "process SALMON_QUANT {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' :\n        'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n    path  transcript_fasta\n    val   alignment_mode\n    val   lib_type\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def reference   = \"--index $index\"\n    def input_reads = meta.single_end ? \"-r $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    if (alignment_mode) {\n        reference   = \"-t $transcript_fasta\"\n        input_reads = \"-a $reads\"\n    }\n\n    def strandedness_opts = [\n        'A', 'U', 'SF', 'SR',\n        'IS', 'IU' , 'ISF', 'ISR',\n        'OS', 'OU' , 'OSF', 'OSR',\n        'MS', 'MU' , 'MSF', 'MSR'\n    ]\n    def strandedness =  'A'\n    if (lib_type) {\n        if (strandedness_opts.contains(lib_type)) {\n            strandedness = lib_type\n        } else {\n            log.info \"[Salmon Quant] Invalid library type specified '--libType=${lib_type}', defaulting to auto-detection with '--libType=A'.\"\n        }\n    } else {\n        strandedness = meta.single_end ? 'U' : 'IU'\n        if (meta.strandedness == 'forward') {\n            strandedness = meta.single_end ? 'SF' : 'ISF'\n        } else if (meta.strandedness == 'reverse') {\n            strandedness = meta.single_end ? 'SR' : 'ISR'\n        }\n    }\n    \"\"\"\n    salmon quant \\\\\n        --geneMap $gtf \\\\\n        --threads $task.cpus \\\\\n        --libType=$strandedness \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $args \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 67,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def reference   = \"--index $index\"\n    def input_reads = meta.single_end ? \"-r $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    if (alignment_mode) {\n        reference   = \"-t $transcript_fasta\"\n        input_reads = \"-a $reads\"\n    }\n\n    def strandedness_opts = [\n        'A', 'U', 'SF', 'SR',\n        'IS', 'IU' , 'ISF', 'ISR',\n        'OS', 'OU' , 'OSF', 'OSR',\n        'MS', 'MU' , 'MSF', 'MSR'\n    ]\n    def strandedness =  'A'\n    if (lib_type) {\n        if (strandedness_opts.contains(lib_type)) {\n            strandedness = lib_type\n        } else {\n            log.info \"[Salmon Quant] Invalid library type specified '--libType=${lib_type}', defaulting to auto-detection with '--libType=A'.\"\n        }\n    } else {\n        strandedness = meta.single_end ? 'U' : 'IU'\n        if (meta.strandedness == 'forward') {\n            strandedness = meta.single_end ? 'SF' : 'ISF'\n        } else if (meta.strandedness == 'reverse') {\n            strandedness = meta.single_end ? 'SR' : 'ISR'\n        }\n    }\n    \"\"\"\n    salmon quant \\\\\n        --geneMap $gtf \\\\\n        --threads $task.cpus \\\\\n        --libType=$strandedness \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $args \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "AVA,Dx",
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/AVADx",
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "AVA,Dx",
                "uri": "https://bio.tools/AVADx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Identifying Crohn's disease signal from variome analysis | prediction of individual predisposition to disease x through variation analysis | After years of concentrated research efforts, the exact cause of Crohn\u2019s disease (CD) remains unknown",
                "homepage": "https://bromberglab.org/project/avadx/"
            },
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf",
            "transcript_fasta",
            "alignment_mode",
            "lib_type"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' : 'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_FASTQ_FTP": {
        "name_process": "SRA_FASTQ_FTP",
        "string_process": "\nprocess SRA_FASTQ_FTP {\n    tag \"$meta.id\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), val(fastq)\n\n    output:\n    tuple val(meta), path(\"*fastq.gz\"), emit: fastq\n    tuple val(meta), path(\"*md5\")     , emit: md5\n    path \"versions.yml\"               , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    if (meta.single_end) {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}.fastq.gz\" > ${meta.id}.fastq.gz.md5\n        md5sum -c ${meta.id}.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}_1.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}_1.fastq.gz\" > ${meta.id}_1.fastq.gz.md5\n        md5sum -c ${meta.id}_1.fastq.gz.md5\n\n        curl \\\\\n            $args \\\\\n            -L ${fastq[1]} \\\\\n            -o ${meta.id}_2.fastq.gz\n\n        echo \"${meta.md5_2}  ${meta.id}_2.fastq.gz\" > ${meta.id}_2.fastq.gz.md5\n        md5sum -c ${meta.id}_2.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 59,
        "string_script": "    def args = task.ext.args ?: ''\n    if (meta.single_end) {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}.fastq.gz\" > ${meta.id}.fastq.gz.md5\n        md5sum -c ${meta.id}.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}_1.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}_1.fastq.gz\" > ${meta.id}_1.fastq.gz.md5\n        md5sum -c ${meta.id}_1.fastq.gz.md5\n\n        curl \\\\\n            $args \\\\\n            -L ${fastq[1]} \\\\\n            -o ${meta.id}_2.fastq.gz\n\n        echo \"${meta.md5_2}  ${meta.id}_2.fastq.gz\" > ${meta.id}_2.fastq.gz.md5\n        md5sum -c ${meta.id}_2.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "meta",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_MERGE_SAMPLESHEET": {
        "name_process": "SYNAPSE_MERGE_SAMPLESHEET",
        "string_process": "\nprocess SYNAPSE_MERGE_SAMPLESHEET {\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path ('samplesheets/*')\n\n    output:\n    path \"samplesheet.csv\", emit: samplesheet\n    path \"versions.yml\"   , emit: versions\n\n    script:\n    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BANDAGE_IMAGE": {
        "name_process": "BANDAGE_IMAGE",
        "string_process": "process BANDAGE_IMAGE {\n    tag \"${meta.id}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::bandage=0.8.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bandage:0.8.1--hc9558a2_2' :\n        'quay.io/biocontainers/bandage:0.8.1--hc9558a2_2' }\"\n\n    input:\n    tuple val(meta), path(gfa)\n\n    output:\n    tuple val(meta), path('*.png'), emit: png\n    tuple val(meta), path('*.svg'), emit: svg\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    Bandage image $gfa ${prefix}.png $args\n    Bandage image $gfa ${prefix}.svg $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bandage: \\$(echo \\$(Bandage --version 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    Bandage image $gfa ${prefix}.png $args\n    Bandage image $gfa ${prefix}.svg $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bandage: \\$(echo \\$(Bandage --version 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Bandage"
        ],
        "tools_url": [
            "https://bio.tools/bandage"
        ],
        "tools_dico": [
            {
                "name": "Bandage",
                "uri": "https://bio.tools/bandage",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Sequence assembly visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Sequence assembly rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Assembly visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Assembly rendering"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "GUI program that allows users to interact with the assembly graphs made by de novo assemblers such as Velvet, SPAdes, MEGAHIT and others. It visualises assembly graphs, with connections, using graph layout algorithms.",
                "homepage": "https://rrwick.github.io/Bandage/"
            }
        ],
        "inputs": [
            "meta",
            "gfa"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::bandage=0.8.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bandage:0.8.1--hc9558a2_2' : 'quay.io/biocontainers/bandage:0.8.1--hc9558a2_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SALMON_TXIMPORT": {
        "name_process": "SALMON_TXIMPORT",
        "string_process": "process SALMON_TXIMPORT {\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-tximeta=1.8.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-tximeta:1.8.0--r40_0' :\n        'quay.io/biocontainers/bioconductor-tximeta:1.8.0--r40_0' }\"\n\n    input:\n    path (\"salmon/*\")\n    path  tx2gene\n\n    output:\n    path \"*gene_tpm.tsv\"                 , emit: tpm_gene\n    path \"*gene_counts.tsv\"              , emit: counts_gene\n    path \"*gene_counts_length_scaled.tsv\", emit: counts_gene_length_scaled\n    path \"*gene_counts_scaled.tsv\"       , emit: counts_gene_scaled\n    path \"*transcript_tpm.tsv\"           , emit: tpm_transcript\n    path \"*transcript_counts.tsv\"        , emit: counts_transcript\n    path \"versions.yml\"                  , emit: versions\n\n    script:                                                                    \n    \"\"\"\n    salmon_tximport.r \\\\\n        NULL \\\\\n        salmon \\\\\n        salmon.merged\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-tximeta: \\$(Rscript -e \"library(tximeta); cat(as.character(packageVersion('tximeta')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    salmon_tximport.r \\\\\n        NULL \\\\\n        salmon \\\\\n        salmon.merged\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-tximeta: \\$(Rscript -e \"library(tximeta); cat(as.character(packageVersion('tximeta')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "NullSeq",
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/nullseq",
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            },
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "tx2gene"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::bioconductor-tximeta=1.8.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-tximeta:1.8.0--r40_0' : 'quay.io/biocontainers/bioconductor-tximeta:1.8.0--r40_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BCFTOOLS_CONSENSUS": {
        "name_process": "BCFTOOLS_CONSENSUS",
        "string_process": "process BCFTOOLS_CONSENSUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi), path(fasta)\n\n    output:\n    tuple val(meta), path('*.fa'), emit: fasta\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cat $fasta \\\\\n        | bcftools \\\\\n            consensus \\\\\n            $vcf \\\\\n            $args \\\\\n            > ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cat $fasta \\\\\n        | bcftools \\\\\n            consensus \\\\\n            $vcf \\\\\n            $args \\\\\n            > ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "Consensus"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/consensus"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "Consensus",
                "uri": "https://bio.tools/consensus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Consensus server aligns a sequence to a structural template using a consensus of 5 different alignment methods.  A measure of reliability is produced for each alignment position in order to predict the suitability of regions for comparative modelling.",
                "homepage": "http://stormo.wustl.edu/consensus/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MOSDEPTH": {
        "name_process": "MOSDEPTH",
        "string_process": "process MOSDEPTH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::mosdepth=0.3.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mosdepth:0.3.3--hdfd78af_1' :\n        'quay.io/biocontainers/mosdepth:0.3.3--hdfd78af_1'}\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path  bed\n    val   window_size\n\n    output:\n    tuple val(meta), path('*.global.dist.txt')    , emit: global_txt\n    tuple val(meta), path('*.region.dist.txt')    , emit: regions_txt , optional:true\n    tuple val(meta), path('*.summary.txt')        , emit: summary_txt\n    tuple val(meta), path('*.per-base.d4')        , emit: d4          , optional:true\n    tuple val(meta), path('*.per-base.bed.gz')    , emit: per_base_bed, optional:true\n    tuple val(meta), path('*.per-base.bed.gz.csi'), emit: per_base_csi, optional:true\n    tuple val(meta), path('*.regions.bed.gz')     , emit: regions_bed , optional:true\n    tuple val(meta), path('*.regions.bed.gz.csi') , emit: regions_csi , optional:true\n    path  \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (window_size) {\n        interval = \"--by ${window_size}\"\n    } else if ( bed ) {\n        interval = \"--by ${bed}\"\n    } else {\n        interval = \"\"\n    }\n    \"\"\"\n    mosdepth \\\\\n        $interval \\\\\n        $args \\\\\n        $prefix \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.global.dist.txt\n    touch ${prefix}.region.dist.txt\n    touch ${prefix}.summary.txt\n    touch ${prefix}.per-base.d4\n    touch ${prefix}.per-base.bed.gz\n    touch ${prefix}.per-base.bed.gz.csi\n    touch ${prefix}.regions.bed.gz\n    touch ${prefix}.regions.bed.gz.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 66,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (window_size) {\n        interval = \"--by ${window_size}\"\n    } else if ( bed ) {\n        interval = \"--by ${bed}\"\n    } else {\n        interval = \"\"\n    }\n    \"\"\"\n    mosdepth \\\\\n        $interval \\\\\n        $args \\\\\n        $prefix \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed",
            "window_size"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::mosdepth=0.3.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mosdepth:0.3.3--hdfd78af_1' : 'quay.io/biocontainers/mosdepth:0.3.3--hdfd78af_1'}\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.global.dist.txt\n    touch ${prefix}.region.dist.txt\n    touch ${prefix}.summary.txt\n    touch ${prefix}.per-base.d4\n    touch ${prefix}.per-base.bed.gz\n    touch ${prefix}.per-base.bed.gz.csi\n    touch ${prefix}.regions.bed.gz\n    touch ${prefix}.regions.bed.gz.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BLAST_BLASTN": {
        "name_process": "BLAST_BLASTN",
        "string_process": "process BLAST_BLASTN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' :\n        'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path  db\n\n    output:\n    tuple val(meta), path('*.blastn.txt'), emit: txt\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    DB=`find -L ./ -name \"*.ndb\" | sed 's/.ndb//'`\n    blastn \\\\\n        -num_threads $task.cpus \\\\\n        -db \\$DB \\\\\n        -query $fasta \\\\\n        $args \\\\\n        -out ${prefix}.blastn.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    DB=`find -L ./ -name \"*.ndb\" | sed 's/.ndb//'`\n    blastn \\\\\n        -num_threads $task.cpus \\\\\n        -db \\$DB \\\\\n        -query $fasta \\\\\n        $args \\\\\n        -out ${prefix}.blastn.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' : 'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_FLAGSTAT": {
        "name_process": "SAMTOOLS_FLAGSTAT",
        "string_process": "process SAMTOOLS_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n    path  \"versions.yml\"               , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools flagstat --threads ${task.cpus-1} $bam > ${bam}.flagstat\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools flagstat --threads ${task.cpus-1} $bam > ${bam}.flagstat\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "DESEQ2_QC": {
        "name_process": "DESEQ2_QC",
        "string_process": "process DESEQ2_QC {\n    label \"process_medium\"\n\n                                                                                   \n                                                                                                                                \n    conda (params.enable_conda ? \"conda-forge::r-base=4.0 bioconda::bioconductor-deseq2=1.28.0 bioconda::bioconductor-biocparallel bioconda::bioconductor-tximport bioconda::bioconductor-complexheatmap conda-forge::r-optparse conda-forge::r-ggplot2 conda-forge::r-rcolorbrewer conda-forge::r-pheatmap\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0' :\n        'quay.io/biocontainers/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0' }\"\n\n    input:\n    path counts\n    path pca_header_multiqc\n    path clustering_header_multiqc\n\n    output:\n    path \"*.pdf\"                , optional:true, emit: pdf\n    path \"*.RData\"              , optional:true, emit: rdata\n    path \"*pca.vals.txt\"        , optional:true, emit: pca_txt\n    path \"*pca.vals_mqc.tsv\"    , optional:true, emit: pca_multiqc\n    path \"*sample.dists.txt\"    , optional:true, emit: dists_txt\n    path \"*sample.dists_mqc.tsv\", optional:true, emit: dists_multiqc\n    path \"*.log\"                , optional:true, emit: log\n    path \"size_factors\"         , optional:true, emit: size_factors\n    path \"versions.yml\"         , emit: versions\n\n    script:\n    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def label_lower = args2.toLowerCase()\n    def label_upper = args2.toUpperCase()\n    \"\"\"\n    deseq2_qc.r \\\\\n        --count_file $counts \\\\\n        --outdir ./ \\\\\n        --cores $task.cpus \\\\\n        $args\n\n    if [ -f \"R_sessionInfo.log\" ]; then\n        sed \"s/deseq2_pca/${label_lower}_deseq2_pca/g\" <$pca_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 PCA/${label_upper} DESeq2 PCA/g\" tmp.txt\n        cat tmp.txt *.pca.vals.txt > ${label_lower}.pca.vals_mqc.tsv\n\n        sed \"s/deseq2_clustering/${label_lower}_deseq2_clustering/g\" <$clustering_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 sample/${label_upper} DESeq2 sample/g\" tmp.txt\n        cat tmp.txt *.sample.dists.txt > ${label_lower}.sample.dists_mqc.tsv\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(DESeq2); cat(as.character(packageVersion('DESeq2')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def label_lower = args2.toLowerCase()\n    def label_upper = args2.toUpperCase()\n    \"\"\"\n    deseq2_qc.r \\\\\n        --count_file $counts \\\\\n        --outdir ./ \\\\\n        --cores $task.cpus \\\\\n        $args\n\n    if [ -f \"R_sessionInfo.log\" ]; then\n        sed \"s/deseq2_pca/${label_lower}_deseq2_pca/g\" <$pca_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 PCA/${label_upper} DESeq2 PCA/g\" tmp.txt\n        cat tmp.txt *.pca.vals.txt > ${label_lower}.pca.vals_mqc.tsv\n\n        sed \"s/deseq2_clustering/${label_lower}_deseq2_clustering/g\" <$clustering_header_multiqc >tmp.txt\n        sed -i -e \"s/DESeq2 sample/${label_upper} DESeq2 sample/g\" tmp.txt\n        cat tmp.txt *.sample.dists.txt > ${label_lower}.sample.dists_mqc.tsv\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(DESeq2); cat(as.character(packageVersion('DESeq2')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts",
            "pca_header_multiqc",
            "clustering_header_multiqc"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0 bioconda::bioconductor-deseq2=1.28.0 bioconda::bioconductor-biocparallel bioconda::bioconductor-tximport bioconda::bioconductor-complexheatmap conda-forge::r-optparse conda-forge::r-ggplot2 conda-forge::r-rcolorbrewer conda-forge::r-pheatmap\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0' : 'quay.io/biocontainers/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "IVAR_TRIM": {
        "name_process": "IVAR_TRIM",
        "string_process": "process IVAR_TRIM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' :\n        'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path bed\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path('*.log'), emit: log\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ivar trim \\\\\n        $args \\\\\n        -i $bam \\\\\n        -b $bed \\\\\n        -p $prefix \\\\\n        > ${prefix}.ivar.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ivar trim \\\\\n        $args \\\\\n        -i $bam \\\\\n        -b $bed \\\\\n        -p $prefix \\\\\n        > ${prefix}.ivar.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "AIVAR"
        ],
        "tools_url": [
            "https://bio.tools/AIVAR"
        ],
        "tools_dico": [
            {
                "name": "AIVAR",
                "uri": "https://bio.tools/AIVAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assessing concordance among human, in silico predictions and functional assays on genetic variant classification.",
                "homepage": "https://github.com/TopGene/AIvar"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' : 'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CUTADAPT": {
        "name_process": "CUTADAPT",
        "string_process": "process CUTADAPT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::cutadapt=3.5' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cutadapt:3.5--py39h38f01e4_0' :\n        'quay.io/biocontainers/cutadapt:3.5--py39h38f01e4_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path adapters\n\n    output:\n    tuple val(meta), path('*.fastq.gz'), emit: reads\n    tuple val(meta), path('*.log')     , emit: log\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end ? \"-a file:adapters.sub.fa\" : \"-a file:adapters.sub.fa -A file:adapters.sub.fa\"\n    def trimmed = meta.single_end ? \"-o ${prefix}.fastq.gz\" : \"-o ${prefix}_1.fastq.gz -p ${prefix}_2.fastq.gz\"\n    \"\"\"\n    sed -r '/^[ACTGactg]+\\$/ s/\\$/X/g' $adapters > adapters.sub.fa\n\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $args \\\\\n        $paired \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cutadapt: \\$(cutadapt --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end ? \"-a file:adapters.sub.fa\" : \"-a file:adapters.sub.fa -A file:adapters.sub.fa\"\n    def trimmed = meta.single_end ? \"-o ${prefix}.fastq.gz\" : \"-o ${prefix}_1.fastq.gz -p ${prefix}_2.fastq.gz\"\n    \"\"\"\n    sed -r '/^[ACTGactg]+\\$/ s/\\$/X/g' $adapters > adapters.sub.fa\n\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $args \\\\\n        $paired \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cutadapt: \\$(cutadapt --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "adapters"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::cutadapt=3.5' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cutadapt:3.5--py39h38f01e4_0' : 'quay.io/biocontainers/cutadapt:3.5--py39h38f01e4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC_CUSTOM_BIOTYPE": {
        "name_process": "MULTIQC_CUSTOM_BIOTYPE",
        "string_process": "process MULTIQC_CUSTOM_BIOTYPE {\n    tag \"$meta.id\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    tuple val(meta), path(count)\n    path  header\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cut -f 1,7 $count | tail -n +3 | cat $header - >> ${prefix}.biotype_counts_mqc.tsv\n\n    mqc_features_stat.py \\\\\n        ${prefix}.biotype_counts_mqc.tsv \\\\\n        -s $meta.id \\\\\n        -f rRNA \\\\\n        -o ${prefix}.biotype_counts_rrna_mqc.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cut -f 1,7 $count | tail -n +3 | cat $header - >> ${prefix}.biotype_counts_mqc.tsv\n\n    mqc_features_stat.py \\\\\n        ${prefix}.biotype_counts_mqc.tsv \\\\\n        -s $meta.id \\\\\n        -f rRNA \\\\\n        -o ${prefix}.biotype_counts_rrna_mqc.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "count",
            "header"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SORTMERNA": {
        "name_process": "SORTMERNA",
        "string_process": "process SORTMERNA {\n    tag \"$meta.id\"\n    label \"process_high\"\n\n    conda (params.enable_conda ? \"bioconda::sortmerna=4.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sortmerna:4.3.4--h9ee0642_0' :\n        'quay.io/biocontainers/sortmerna:4.3.4--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  fastas\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"versions.yml\"               , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads $reads \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            $args\n\n        mv non_rRNA_reads.fq.gz ${prefix}.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads ${reads[0]} \\\\\n            --reads ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            --paired_in \\\\\n            --out2 \\\\\n            $args\n\n        mv non_rRNA_reads_fwd.fq.gz ${prefix}_1.fastq.gz\n        mv non_rRNA_reads_rev.fq.gz ${prefix}_2.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads $reads \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            $args\n\n        mv non_rRNA_reads.fq.gz ${prefix}.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads ${reads[0]} \\\\\n            --reads ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            --paired_in \\\\\n            --out2 \\\\\n            $args\n\n        mv non_rRNA_reads_fwd.fq.gz ${prefix}_1.fastq.gz\n        mv non_rRNA_reads_rev.fq.gz ${prefix}_2.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "SortMeRna"
        ],
        "tools_url": [
            "https://bio.tools/sortmerna"
        ],
        "tools_dico": [
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "fastas"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_high\"",
            "conda (params.enable_conda ? \"bioconda::sortmerna=4.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sortmerna:4.3.4--h9ee0642_0' : 'quay.io/biocontainers/sortmerna:4.3.4--h9ee0642_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_BAMSTAT": {
        "name_process": "RSEQC_BAMSTAT",
        "string_process": "process RSEQC_BAMSTAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam_stat.txt\"), emit: txt\n    path  \"versions.yml\"                   , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bam_stat.py \\\\\n        -i $bam \\\\\n        $args \\\\\n        > ${prefix}.bam_stat.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(bam_stat.py --version | sed -e \"s/bam_stat.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bam_stat.py \\\\\n        -i $bam \\\\\n        $args \\\\\n        > ${prefix}.bam_stat.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(bam_stat.py --version | sed -e \"s/bam_stat.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_TO_SAMPLESHEET": {
        "name_process": "SYNAPSE_TO_SAMPLESHEET",
        "string_process": "\nprocess SYNAPSE_TO_SAMPLESHEET {\n    tag \"$meta.id\"\n\n    executor 'local'\n    memory 100.MB\n\n    input:\n    tuple val(meta), path(fastq)\n    val pipeline\n\n    output:\n    tuple val(meta), path(\"*.csv\"), emit: samplesheet\n\n    exec:\n\n                          \n    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n\n    def fastq_1 = \"${params.outdir}/fastq/${fastq}\"\n    def fastq_2 = ''\n    if (fastq instanceof List && fastq.size() == 2) {\n        fastq_1 = \"${params.outdir}/fastq/${fastq[0]}\"\n        fastq_2 = \"${params.outdir}/fastq/${fastq[1]}\"\n    }\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id}\",\n        fastq_1 : fastq_1,\n        fastq_2 : fastq_2\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n}",
        "nb_lignes_process": 48,
        "string_script": "    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n\n    def fastq_1 = \"${params.outdir}/fastq/${fastq}\"\n    def fastq_2 = ''\n    if (fastq instanceof List && fastq.size() == 2) {\n        fastq_1 = \"${params.outdir}/fastq/${fastq[0]}\"\n        fastq_2 = \"${params.outdir}/fastq/${fastq[1]}\"\n    }\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id}\",\n        fastq_1 : fastq_1,\n        fastq_2 : fastq_2\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "pipeline"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "executor 'local'",
            "memory 100.MB"
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_INNERDISTANCE": {
        "name_process": "RSEQC_INNERDISTANCE",
        "string_process": "process RSEQC_INNERDISTANCE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*distance.txt\"), optional:true, emit: distance\n    tuple val(meta), path(\"*freq.txt\")    , optional:true, emit: freq\n    tuple val(meta), path(\"*mean.txt\")    , optional:true, emit: mean\n    tuple val(meta), path(\"*.pdf\")        , optional:true, emit: pdf\n    tuple val(meta), path(\"*.r\")          , optional:true, emit: rscript\n    path  \"versions.yml\"                  , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (!meta.single_end) {\n        \"\"\"\n        inner_distance.py \\\\\n            -i $bam \\\\\n            -r $bed \\\\\n            -o $prefix \\\\\n            $args \\\\\n            > stdout.txt\n        head -n 2 stdout.txt > ${prefix}.inner_distance_mean.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (!meta.single_end) {\n        \"\"\"\n        inner_distance.py \\\\\n            -i $bam \\\\\n            -r $bed \\\\\n            -o $prefix \\\\\n            $args \\\\\n            > stdout.txt\n        head -n 2 stdout.txt > ${prefix}.inner_distance_mean.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_IDXSTATS": {
        "name_process": "SAMTOOLS_IDXSTATS",
        "string_process": "process SAMTOOLS_IDXSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        idxstats \\\\\n        $bam \\\\\n        > ${bam}.idxstats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        idxstats \\\\\n        $bam \\\\\n        > ${bam}.idxstats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "process UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path archive\n\n    output:\n    path \"$untar\"      , emit: untar\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar \\\\\n        -xzvf \\\\\n        $args \\\\\n        $archive \\\\\n        $args2 \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar \\\\\n        -xzvf \\\\\n        $args \\\\\n        $archive \\\\\n        $args2 \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLOT_MOSDEPTH_REGIONS": {
        "name_process": "PLOT_MOSDEPTH_REGIONS",
        "string_process": "process PLOT_MOSDEPTH_REGIONS {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-reshape2=1.4.4 conda-forge::r-optparse=1.6.6 conda-forge::r-ggplot2=3.3.3 conda-forge::r-scales=1.1.1 conda-forge::r-viridis=0.5.1 conda-forge::r-tidyverse=1.3.0 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-complexheatmap=2.6.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' :\n        'quay.io/biocontainers/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' }\"\n\n    input:\n    path beds\n\n    output:\n    path '*coverage.pdf', emit: coverage_pdf\n    path '*coverage.tsv', emit: coverage_tsv\n    path '*heatmap.pdf' , optional:true, emit: heatmap_pdf\n    path '*heatmap.tsv' , optional:true, emit: heatmap_tsv\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                        \n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"mosdepth\"\n    \"\"\"\n    plot_mosdepth_regions.r \\\\\n        --input_files ${beds.join(',')} \\\\\n        --output_dir ./ \\\\\n        --output_suffix $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"mosdepth\"\n    \"\"\"\n    plot_mosdepth_regions.r \\\\\n        --input_files ${beds.join(',')} \\\\\n        --output_dir ./ \\\\\n        --output_suffix $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "beds"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-reshape2=1.4.4 conda-forge::r-optparse=1.6.6 conda-forge::r-ggplot2=3.3.3 conda-forge::r-scales=1.1.1 conda-forge::r-viridis=0.5.1 conda-forge::r-tidyverse=1.3.0 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-complexheatmap=2.6.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' : 'quay.io/biocontainers/mulled-v2-ad9dd5f398966bf899ae05f8e7c54d0fb10cdfa7:05678da05b8e5a7a5130e90a9f9a6c585b965afa-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NEXTCLADE_DATASETGET": {
        "name_process": "NEXTCLADE_DATASETGET",
        "string_process": "process NEXTCLADE_DATASETGET {\n    tag \"$dataset\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' :\n        'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\"\n\n    input:\n    val dataset\n    val reference\n    val tag\n\n    output:\n    path \"$prefix\"     , emit: dataset\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${dataset}\"\n    def fasta = reference ? \"--reference ${reference}\" : ''\n    def version = tag ? \"--tag ${tag}\" : ''\n    \"\"\"\n    nextclade \\\\\n        dataset \\\\\n        get \\\\\n        $args \\\\\n        --name $dataset \\\\\n        $fasta \\\\\n        $version \\\\\n        --output-dir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${dataset}\"\n    def fasta = reference ? \"--reference ${reference}\" : ''\n    def version = tag ? \"--tag ${tag}\" : ''\n    \"\"\"\n    nextclade \\\\\n        dataset \\\\\n        get \\\\\n        $args \\\\\n        --name $dataset \\\\\n        $fasta \\\\\n        $version \\\\\n        --output-dir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "MultiDataSet",
            "WeGet"
        ],
        "tools_url": [
            "https://bio.tools/multidataset",
            "https://bio.tools/weget"
        ],
        "tools_dico": [
            {
                "name": "MultiDataSet",
                "uri": "https://bio.tools/multidataset",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3391",
                            "term": "Omics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Implementation of the BRGE's (Bioinformatic Research Group in Epidemiology from Center for Research in Environmental Epidemiology) dataset and MethylationSet. It is designed for integrating multi omics data sets and MethylationSet to contain normalized methylation data. These package contains base classes for MEAL and rexposome packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/MultiDataSet.html"
            },
            {
                "name": "WeGet",
                "uri": "https://bio.tools/weget",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "WeGET is a computational tool to find mammalian genes that strongly co-express with a human query gene set of interest.",
                "homepage": "http://weget.cmbi.umcn.nl/"
            }
        ],
        "inputs": [
            "dataset",
            "reference",
            "tag"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$dataset\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' : 'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_MPILEUP": {
        "name_process": "BCFTOOLS_MPILEUP",
        "string_process": "process BCFTOOLS_MPILEUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    val save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.gz\")      , emit: vcf\n    tuple val(meta), path(\"*.tbi\")     , emit: tbi\n    tuple val(meta), path(\"*stats.txt\"), emit: stats\n    tuple val(meta), path(\"*.mpileup\") , emit: mpileup, optional: true\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n\n    bcftools \\\\\n        mpileup \\\\\n        --fasta-ref $fasta \\\\\n        $args \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | bcftools call --output-type v $args2 \\\\\n        | bcftools reheader --samples sample_name.list \\\\\n        | bcftools view --output-file ${prefix}.vcf.gz --output-type z $args3\n\n    tabix -p vcf -f ${prefix}.vcf.gz\n\n    bcftools stats ${prefix}.vcf.gz > ${prefix}.bcftools_stats.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n\n    bcftools \\\\\n        mpileup \\\\\n        --fasta-ref $fasta \\\\\n        $args \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | bcftools call --output-type v $args2 \\\\\n        | bcftools reheader --samples sample_name.list \\\\\n        | bcftools view --output-file ${prefix}.vcf.gz --output-type z $args3\n\n    tabix -p vcf -f ${prefix}.vcf.gz\n\n    bcftools stats ${prefix}.vcf.gz > ${prefix}.bcftools_stats.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "mpileup"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/mpileup"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "save_mpileup"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HISAT2_BUILD": {
        "name_process": "HISAT2_BUILD",
        "string_process": "\nprocess HISAT2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n    label 'process_high_memory'\n\n    conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' :\n        'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\"\n\n    input:\n    path fasta\n    path gtf\n    path splicesites\n\n    output:\n    path \"hisat2\"       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def avail_mem = 0\n    if (!task.memory) {\n        log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n    } else {\n        log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n        avail_mem = task.memory.toGiga()\n    }\n\n    def ss = ''\n    def exon = ''\n    def extract_exons = ''\n    def hisat2_build_memory = params.hisat2_build_memory ? (params.hisat2_build_memory as nextflow.util.MemoryUnit).toGiga() : 0\n    if (avail_mem >= hisat2_build_memory) {\n        log.info \"[HISAT2 index build] At least ${hisat2_build_memory} GB available, so using splice sites and exons to build HISAT2 index\"\n        extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.exons.txt\"\n        ss = \"--ss $splicesites\"\n        exon = \"--exon ${gtf.baseName}.exons.txt\"\n    } else {\n        log.info \"[HISAT2 index build] Less than ${hisat2_build_memory} GB available, so NOT using splice sites and exons to build HISAT2 index.\"\n        log.info \"[HISAT2 index build] Use --hisat2_build_memory [small number] to skip this check.\"\n    }\n    \"\"\"\n    mkdir hisat2\n    $extract_exons\n    hisat2-build \\\\\n        -p $task.cpus \\\\\n        $ss \\\\\n        $exon \\\\\n        $args \\\\\n        $fasta \\\\\n        hisat2/${fasta.baseName}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    def args = task.ext.args ?: ''\n    def avail_mem = 0\n    if (!task.memory) {\n        log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n    } else {\n        log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n        avail_mem = task.memory.toGiga()\n    }\n\n    def ss = ''\n    def exon = ''\n    def extract_exons = ''\n    def hisat2_build_memory = params.hisat2_build_memory ? (params.hisat2_build_memory as nextflow.util.MemoryUnit).toGiga() : 0\n    if (avail_mem >= hisat2_build_memory) {\n        log.info \"[HISAT2 index build] At least ${hisat2_build_memory} GB available, so using splice sites and exons to build HISAT2 index\"\n        extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.exons.txt\"\n        ss = \"--ss $splicesites\"\n        exon = \"--exon ${gtf.baseName}.exons.txt\"\n    } else {\n        log.info \"[HISAT2 index build] Less than ${hisat2_build_memory} GB available, so NOT using splice sites and exons to build HISAT2 index.\"\n        log.info \"[HISAT2 index build] Use --hisat2_build_memory [small number] to skip this check.\"\n    }\n    \"\"\"\n    mkdir hisat2\n    $extract_exons\n    hisat2-build \\\\\n        -p $task.cpus \\\\\n        $ss \\\\\n        $exon \\\\\n        $args \\\\\n        $fasta \\\\\n        hisat2/${fasta.baseName}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "SSA",
            "Assexon"
        ],
        "tools_url": [
            "https://bio.tools/ssa",
            "https://bio.tools/Assexon"
        ],
        "tools_dico": [
            {
                "name": "SSA",
                "uri": "https://bio.tools/ssa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0240",
                                    "term": "Sequence motif comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SSA (Signal Search Analysis) is a software package for the analysis of nucleic acid sequence motifs that are postionally correlated with a functional site (e.g a transcription or translation initiation site).",
                "homepage": "http://ccg.vital-it.ch/ssa/"
            },
            {
                "name": "Assexon",
                "uri": "https://bio.tools/Assexon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assembling Exon Using Gene Capture Data | Exon capture across species has been one of the most broadly applied approaches to acquire multi-locus data in phylogenomic studies of non-model organisms. Methods for assembling loci from short-read sequences (eg, Illumina platforms) that rely on mapping reads to a reference genome may not be suitable for studies comprising species across a wide phylogenetic spectrum; thus, de novo assembling methods are more generally applied. Current approaches for assembling targeted exons from short reads are not particularly optimized as they cannot (1) assemble loci with low read depth, (2) handle large files efficiently, and (3) reliably address issues with paralogs. Thus, we present Assexon: a streamlined pipeline that de novo assembles targeted exons and their flanking sequences from raw reads",
                "homepage": "https://github.com/yhadevol/Assexon"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "splicesites"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "label 'process_high_memory'",
            "conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' : 'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_GETCHROMSIZES": {
        "name_process": "CUSTOM_GETCHROMSIZES",
        "string_process": "process CUSTOM_GETCHROMSIZES {\n    tag \"$fasta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path '*.sizes'      , emit: sizes\n    path '*.fai'        , emit: fai\n    path  \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        custom: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        custom: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SNPEFF_BUILD": {
        "name_process": "SNPEFF_BUILD",
        "string_process": "process SNPEFF_BUILD {\n    tag \"$fasta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::snpeff=5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' :\n        'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }\"\n\n    input:\n    path fasta\n    path gff\n\n    output:\n    path 'snpeff_db'   , emit: db\n    path '*.config'    , emit: config\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def basename = fasta.baseName\n\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[snpEff] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    mkdir -p snpeff_db/genomes/\n    cd snpeff_db/genomes/\n    ln -s ../../$fasta ${basename}.fa\n\n    cd ../../\n    mkdir -p snpeff_db/${basename}/\n    cd snpeff_db/${basename}/\n    ln -s ../../$gff genes.gff\n\n    cd ../../\n    echo \"${basename}.genome : ${basename}\" > snpeff.config\n\n    snpEff \\\\\n        -Xmx${avail_mem}g \\\\\n        build \\\\\n        -config snpeff.config \\\\\n        -dataDir ./snpeff_db \\\\\n        -gff3 \\\\\n        -v \\\\\n        ${basename}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpeff: \\$(echo \\$(snpEff -version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def basename = fasta.baseName\n\n    def avail_mem = 4\n    if (!task.memory) {\n        log.info '[snpEff] Available memory not known - defaulting to 4GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    mkdir -p snpeff_db/genomes/\n    cd snpeff_db/genomes/\n    ln -s ../../$fasta ${basename}.fa\n\n    cd ../../\n    mkdir -p snpeff_db/${basename}/\n    cd snpeff_db/${basename}/\n    ln -s ../../$gff genes.gff\n\n    cd ../../\n    echo \"${basename}.genome : ${basename}\" > snpeff.config\n\n    snpEff \\\\\n        -Xmx${avail_mem}g \\\\\n        build \\\\\n        -config snpeff.config \\\\\n        -dataDir ./snpeff_db \\\\\n        -gff3 \\\\\n        -v \\\\\n        ${basename}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpeff: \\$(echo \\$(snpEff -version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "snpEff",
            "PepBuild"
        ],
        "tools_url": [
            "https://bio.tools/snpeff",
            "https://bio.tools/pepbuild"
        ],
        "tools_dico": [
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            },
            {
                "name": "PepBuild",
                "uri": "https://bio.tools/pepbuild",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3542",
                            "term": "Protein secondary structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0736",
                            "term": "Protein folds and structural domains"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3542",
                            "term": "Protein features (secondary structure)"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Protein secondary structure comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2416",
                                    "term": "Protein secondary structure analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0570",
                                    "term": "Structure visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Secondary structure comparison (protein)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2488",
                                    "term": "Protein secondary structure"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2416",
                                    "term": "Secondary structure analysis (protein)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0570",
                                    "term": "Structure rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool that facilitates the construction, from known sequence and secondary/tertiary structures, of capped or uncapped proteins. The output generated is in PDB format.",
                "homepage": "http://www.imtech.res.in/bvs/pepbuild/"
            }
        ],
        "inputs": [
            "fasta",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::snpeff=5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' : 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC_TSV_FROM_LIST": {
        "name_process": "MULTIQC_TSV_FROM_LIST",
        "string_process": "process MULTIQC_TSV_FROM_LIST {\n\n    executor 'local'\n    memory 100.MB\n\n    input:\n    val tsv_data                                \n    val header                            \n    val out_prefix\n\n    output:\n    path \"*.tsv\"\n\n    exec:\n                             \n    def contents = \"\"\n    if (tsv_data.size() > 0) {\n        contents += \"${header.join('\\t')}\\n\"\n        contents += tsv_data.join('\\n')\n    }\n\n                    \n    def mqc_file = task.workDir.resolve(\"${out_prefix}_mqc.tsv\")\n    mqc_file.text = contents\n}",
        "nb_lignes_process": 23,
        "string_script": "    def contents = \"\"\n    if (tsv_data.size() > 0) {\n        contents += \"${header.join('\\t')}\\n\"\n        contents += tsv_data.join('\\n')\n    }\n\n                    \n    def mqc_file = task.workDir.resolve(\"${out_prefix}_mqc.tsv\")\n    mqc_file.text = contents",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tsv_data",
            "header",
            "out_prefix"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "executor 'local'",
            "memory 100.MB"
        ],
        "when": "",
        "stub": ""
    },
    "PRESEQ_LCEXTRAP": {
        "name_process": "PRESEQ_LCEXTRAP",
        "string_process": "process PRESEQ_LCEXTRAP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    label 'error_ignore'\n\n    conda (params.enable_conda ? \"bioconda::preseq=3.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/preseq:3.1.2--h06ef8b0_1' :\n        'quay.io/biocontainers/preseq:3.1.2--h06ef8b0_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.ccurve.txt\"), emit: ccurve\n    tuple val(meta), path(\"*.log\")       , emit: log\n    path  \"versions.yml\"                 , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    \"\"\"\n    preseq \\\\\n        lc_extrap \\\\\n        $args \\\\\n        $paired_end \\\\\n        -output ${prefix}.ccurve.txt \\\\\n        $bam\n    cp .command.err ${prefix}.command.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        preseq: \\$(echo \\$(preseq 2>&1) | sed 's/^.*Version: //; s/Usage:.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    \"\"\"\n    preseq \\\\\n        lc_extrap \\\\\n        $args \\\\\n        $paired_end \\\\\n        -output ${prefix}.ccurve.txt \\\\\n        $bam\n    cp .command.err ${prefix}.command.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        preseq: \\$(echo \\$(preseq 2>&1) | sed 's/^.*Version: //; s/Usage:.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "preseq"
        ],
        "tools_url": [
            "https://bio.tools/preseq"
        ],
        "tools_dico": [
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "label 'error_ignore'",
            "conda (params.enable_conda ? \"bioconda::preseq=3.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/preseq:3.1.2--h06ef8b0_1' : 'quay.io/biocontainers/preseq:3.1.2--h06ef8b0_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "RENAME_FASTA_HEADER": {
        "name_process": "RENAME_FASTA_HEADER",
        "string_process": "process RENAME_FASTA_HEADER {\n    tag \"$meta.id\"\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.fa\"), emit: fasta\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sed \"s/>/>${meta.id} /g\" $fasta > ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sed \"s/>/>${meta.id} /g\" $fasta > ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SALMON_INDEX": {
        "name_process": "SALMON_INDEX",
        "string_process": "process SALMON_INDEX {\n    tag \"$transcript_fasta\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' :\n        'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\"\n\n    input:\n    path genome_fasta\n    path transcript_fasta\n\n    output:\n    path \"salmon\"       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def get_decoy_ids = \"grep '^>' $genome_fasta | cut -d ' ' -f 1 > decoys.txt\"\n    def gentrome      = \"gentrome.fa\"\n    if (genome_fasta.endsWith('.gz')) {\n        get_decoy_ids = \"grep '^>' <(gunzip -c $genome_fasta) | cut -d ' ' -f 1 > decoys.txt\"\n        gentrome      = \"gentrome.fa.gz\"\n    }\n    \"\"\"\n    $get_decoy_ids\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat $transcript_fasta $genome_fasta > $gentrome\n\n    salmon \\\\\n        index \\\\\n        --threads $task.cpus \\\\\n        -t $gentrome \\\\\n        -d decoys.txt \\\\\n        $args \\\\\n        -i salmon\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def get_decoy_ids = \"grep '^>' $genome_fasta | cut -d ' ' -f 1 > decoys.txt\"\n    def gentrome      = \"gentrome.fa\"\n    if (genome_fasta.endsWith('.gz')) {\n        get_decoy_ids = \"grep '^>' <(gunzip -c $genome_fasta) | cut -d ' ' -f 1 > decoys.txt\"\n        gentrome      = \"gentrome.fa.gz\"\n    }\n    \"\"\"\n    $get_decoy_ids\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat $transcript_fasta $genome_fasta > $gentrome\n\n    salmon \\\\\n        index \\\\\n        --threads $task.cpus \\\\\n        -t $gentrome \\\\\n        -d decoys.txt \\\\\n        $args \\\\\n        -i salmon\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Salmon",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/salmon",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "genome_fasta",
            "transcript_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$transcript_fasta\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' : 'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_RUNINFO_TO_FTP": {
        "name_process": "SRA_RUNINFO_TO_FTP",
        "string_process": "\nprocess SRA_RUNINFO_TO_FTP {\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path runinfo\n\n    output:\n    path \"*.tsv\"       , emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    sra_runinfo_to_ftp.py \\\\\n        ${runinfo.join(',')} \\\\\n        ${runinfo.toString().tokenize(\".\")[0]}.runinfo_ftp.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    sra_runinfo_to_ftp.py \\\\\n        ${runinfo.join(',')} \\\\\n        ${runinfo.toString().tokenize(\".\")[0]}.runinfo_ftp.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "runinfo"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "RSEQC_JUNCTIONANNOTATION": {
        "name_process": "RSEQC_JUNCTIONANNOTATION",
        "string_process": "process RSEQC_JUNCTIONANNOTATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.xls\")         , emit: xls\n    tuple val(meta), path(\"*.r\")           , emit: rscript\n    tuple val(meta), path(\"*.log\")         , emit: log\n    tuple val(meta), path(\"*.junction.bed\"), optional:true, emit: bed\n    tuple val(meta), path(\"*.Interact.bed\"), optional:true, emit: interact_bed\n    tuple val(meta), path(\"*junction.pdf\") , optional:true, emit: pdf\n    tuple val(meta), path(\"*events.pdf\")   , optional:true, emit: events_pdf\n    path  \"versions.yml\"                   , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_annotation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args \\\\\n        2> ${prefix}.junction_annotation.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_annotation.py --version | sed -e \"s/junction_annotation.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_annotation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args \\\\\n        2> ${prefix}.junction_annotation.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_annotation.py --version | sed -e \"s/junction_annotation.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": "process TRIMGALORE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::trim-galore=0.6.7' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/trim-galore:0.6.7--hdfd78af_0' :\n        'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fq.gz\")    , emit: reads\n    tuple val(meta), path(\"*report.txt\"), emit: log\n    path \"versions.yml\"                 , emit: versions\n\n    tuple val(meta), path(\"*.html\"), emit: html optional true\n    tuple val(meta), path(\"*.zip\") , emit: zip optional true\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 78,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 57,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::trim-galore=0.6.7' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/trim-galore:0.6.7--hdfd78af_0' : 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GTF_GENE_FILTER": {
        "name_process": "GTF_GENE_FILTER",
        "string_process": "process GTF_GENE_FILTER {\n    tag \"$fasta\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"*.gtf\"       , emit: gtf\n    path \"versions.yml\", emit: versions\n\n    script:                                                                                          \n    \"\"\"\n    filter_gtf_for_genes_in_genome.py \\\\\n        --gtf $gtf \\\\\n        --fasta $fasta \\\\\n        -o ${fasta.baseName}_genes.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    filter_gtf_for_genes_in_genome.py \\\\\n        --gtf $gtf \\\\\n        --fasta $fasta \\\\\n        -o ${fasta.baseName}_genes.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_BUILD": {
        "name_process": "KRAKEN2_BUILD",
        "string_process": "process KRAKEN2_BUILD {\n    tag \"$library\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' :\n        'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\"\n\n    input:\n    val library\n\n    output:\n    path 'kraken2_db'  , emit: db\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    \"\"\"\n    kraken2-build --db kraken2_db --threads $task.cpus $args  --download-taxonomy\n    kraken2-build --db kraken2_db --threads $task.cpus $args2 --download-library $library\n    kraken2-build --db kraken2_db --threads $task.cpus $args3 --build\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    \"\"\"\n    kraken2-build --db kraken2_db --threads $task.cpus $args  --download-taxonomy\n    kraken2-build --db kraken2_db --threads $task.cpus $args2 --download-library $library\n    kraken2-build --db kraken2_db --threads $task.cpus $args3 --build\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$library\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' : 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_BEDGRAPHTOBIGWIG": {
        "name_process": "UCSC_BEDGRAPHTOBIGWIG",
        "string_process": "\nprocess UCSC_BEDGRAPHTOBIGWIG {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1' :\n        'quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1' }\"\n\n    input:\n    tuple val(meta), path(bedgraph)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bigWig\"), emit: bigwig\n    path \"versions.yml\"              , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedGraphToBigWig \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bigWig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedGraphToBigWig \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bigWig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "meta",
            "bedgraph",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1' : 'quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "process SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.bai\") , optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\") , optional:true, emit: csi\n    tuple val(meta), path(\"*.crai\"), optional:true, emit: crai\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_READDISTRIBUTION": {
        "name_process": "RSEQC_READDISTRIBUTION",
        "string_process": "process RSEQC_READDISTRIBUTION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.read_distribution.txt\"), emit: txt\n    path  \"versions.yml\"                            , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_distribution.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        > ${prefix}.read_distribution.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_distribution.py --version | sed -e \"s/read_distribution.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_distribution.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        > ${prefix}.read_distribution.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_distribution.py --version | sed -e \"s/read_distribution.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_BLASTN": {
        "name_process": "FILTER_BLASTN",
        "string_process": "process FILTER_BLASTN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(hits)\n    path header\n\n    output:\n    tuple val(meta), path('*.txt'), emit: txt\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    awk 'BEGIN{OFS=\\\"\\\\t\\\";FS=\\\"\\\\t\\\"}{print \\$0,\\$5/\\$15,\\$5/\\$14}' $hits | awk 'BEGIN{OFS=\\\"\\\\t\\\";FS=\\\"\\\\t\\\"} \\$15 > 200 && \\$17 > 0.7 && \\$1 !~ /phage/ {print \\$0}' > tmp.out\n    cat $header tmp.out > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    awk 'BEGIN{OFS=\\\"\\\\t\\\";FS=\\\"\\\\t\\\"}{print \\$0,\\$5/\\$15,\\$5/\\$14}' $hits | awk 'BEGIN{OFS=\\\"\\\\t\\\";FS=\\\"\\\\t\\\"} \\$15 > 200 && \\$17 > 0.7 && \\$1 !~ /phage/ {print \\$0}' > tmp.out\n    cat $header tmp.out > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "hits",
            "header"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE2_BUILD": {
        "name_process": "BOWTIE2_BUILD",
        "string_process": "process BOWTIE2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bowtie2:2.4.4--py39hbb4e92a_0' :\n        'quay.io/biocontainers/bowtie2:2.4.4--py39hbb4e92a_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'bowtie2'      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bowtie2:2.4.4--py39hbb4e92a_0' : 'quay.io/biocontainers/bowtie2:2.4.4--py39hbb4e92a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TABIX_BGZIP": {
        "name_process": "TABIX_BGZIP",
        "string_process": "process TABIX_BGZIP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: gz\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip -c $args $input > ${prefix}.${input.getExtension()}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip -c $args $input > ${prefix}.${input.getExtension()}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STAR_ALIGN": {
        "name_process": "STAR_ALIGN",
        "string_process": "process STAR_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n                                                         \n    conda (params.enable_conda ? \"bioconda::star=2.6.1d\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/star:2.6.1d--0' :\n        'quay.io/biocontainers/star:2.6.1d--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n\n    output:\n    tuple val(meta), path('*d.out.bam')       , emit: bam\n    tuple val(meta), path('*Log.final.out')   , emit: log_final\n    tuple val(meta), path('*Log.out')         , emit: log_out\n    tuple val(meta), path('*Log.progress.out'), emit: log_progress\n    path \"versions.yml\"                       , emit: versions\n\n    tuple val(meta), path('*sortedByCoord.out.bam')  , optional:true, emit: bam_sorted\n    tuple val(meta), path('*toTranscriptome.out.bam'), optional:true, emit: bam_transcript\n    tuple val(meta), path('*Aligned.unsort.out.bam') , optional:true, emit: bam_unsorted\n    tuple val(meta), path('*fastq.gz')               , optional:true, emit: fastq\n    tuple val(meta), path('*.tab')                   , optional:true, emit: tab\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def ignore_gtf = params.star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_center = params.seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$params.seq_center' 'SM:$prefix'\" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix'\"\n    def out_sam_type = (args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def ignore_gtf = params.star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_center = params.seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$params.seq_center' 'SM:$prefix'\" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix'\"\n    def out_sam_type = (args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::star=2.6.1d\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/star:2.6.1d--0' : 'quay.io/biocontainers/star:2.6.1d--0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SALMON_TX2GENE": {
        "name_process": "SALMON_TX2GENE",
        "string_process": "process SALMON_TX2GENE {\n    tag \"$gtf\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path (\"salmon/*\")\n    path gtf\n\n    output:\n    path \"*.tsv\"       , emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:                                                                    \n    \"\"\"\n    salmon_tx2gene.py \\\\\n        --gtf $gtf \\\\\n        --salmon salmon \\\\\n        --id $params.gtf_group_features \\\\\n        --extra $params.gtf_extra_attributes \\\\\n        -o salmon_tx2gene.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    salmon_tx2gene.py \\\\\n        --gtf $gtf \\\\\n        --salmon salmon \\\\\n        --id $params.gtf_group_features \\\\\n        --extra $params.gtf_extra_attributes \\\\\n        -o salmon_tx2gene.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$gtf\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "process SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"versions.yml\"            , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools stats --threads ${task.cpus-1} ${reference} ${input} > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools stats --threads ${task.cpus-1} ${reference} ${input} > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "RSEM_CALCULATEEXPRESSION": {
        "name_process": "RSEM_CALCULATEEXPRESSION",
        "string_process": "process RSEM_CALCULATEEXPRESSION {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' :\n        'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.genes.results\")   , emit: counts_gene\n    tuple val(meta), path(\"*.isoforms.results\"), emit: counts_transcript\n    tuple val(meta), path(\"*.stat\")            , emit: stat\n    tuple val(meta), path(\"*.log\")             , emit: logs\n    path  \"versions.yml\"                       , emit: versions\n\n    tuple val(meta), path(\"*.STAR.genome.bam\")       , optional:true, emit: bam_star\n    tuple val(meta), path(\"${prefix}.genome.bam\")    , optional:true, emit: bam_genome\n    tuple val(meta), path(\"${prefix}.transcript.bam\"), optional:true, emit: bam_transcript\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--strandedness forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--strandedness reverse'\n    }\n    def paired_end = meta.single_end ? \"\" : \"--paired-end\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.grp\" | sed 's/.grp//'`\n    rsem-calculate-expression \\\\\n        --num-threads $task.cpus \\\\\n        --temporary-folder ./tmp/ \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $args \\\\\n        $reads \\\\\n        \\$INDEX \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--strandedness forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--strandedness reverse'\n    }\n    def paired_end = meta.single_end ? \"\" : \"--paired-end\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.grp\" | sed 's/.grp//'`\n    rsem-calculate-expression \\\\\n        --num-threads $task.cpus \\\\\n        --temporary-folder ./tmp/ \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $args \\\\\n        $reads \\\\\n        \\$INDEX \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.6a\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' : 'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:606b713ec440e799d53a2b51a6e79dbfd28ecf3e-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QUALIMAP_RNASEQ": {
        "name_process": "QUALIMAP_RNASEQ",
        "string_process": "process QUALIMAP_RNASEQ {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' :\n        'quay.io/biocontainers/qualimap:2.2.2d--1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    def memory     = task.memory.toGiga() + \"G\"\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $args \\\\\n        -bam $bam \\\\\n        -gtf $gtf \\\\\n        -p $strandedness \\\\\n        $paired_end \\\\\n        -outdir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    def memory     = task.memory.toGiga() + \"G\"\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $args \\\\\n        -bam $bam \\\\\n        -gtf $gtf \\\\\n        -p $strandedness \\\\\n        $paired_end \\\\\n        -outdir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "QualiMap",
            "RNASEQR"
        ],
        "tools_url": [
            "https://bio.tools/qualimap",
            "https://bio.tools/rnaseqr"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            },
            {
                "name": "RNASEQR",
                "uri": "https://bio.tools/rnaseqr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "PCA plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R package for automated two-group RNA-Seq analysis workflow.\n\nThis R package is designed for case-control RNA-Seq analysis (two-group). There are six steps: \"RNASeqRParam S4 Object Creation\", \"Environment Setup\", \"Quality Assessment\", \"Reads Alignment & Quantification\", \"Gene-level Differential Analyses\" and \"Functional Analyses\". Each step corresponds to a function in this package. After running functions in order, a basic RNASeq analysis would be done easily.",
                "homepage": "https://bioconductor.org/packages/release/bioc/html/RNASeqR.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' : 'quay.io/biocontainers/qualimap:2.2.2d--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "TABIX_TABIX": {
        "name_process": "TABIX_TABIX",
        "string_process": "process TABIX_TABIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(tab)\n\n    output:\n    tuple val(meta), path(\"*.tbi\"), emit: tbi\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SYNAPSE_GET": {
        "name_process": "SYNAPSE_GET",
        "string_process": "\nprocess SYNAPSE_GET {\n    tag \"$meta.id\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"bioconda::synapseclient=2.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/synapseclient:2.4.0--pyh5e36f6f_0' :\n        'quay.io/biocontainers/synapseclient:2.4.0--pyh5e36f6f_0' }\"\n\n    input:\n    val meta\n    path config\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    tuple val(meta), path(\"*md5\")      , emit: md5\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        get \\\\\n        $args \\\\\n        $meta.id\n\n    echo \"${meta.md5} \\t ${meta.name}\" > ${meta.id}.md5\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        get \\\\\n        $args \\\\\n        $meta.id\n\n    echo \"${meta.md5} \\t ${meta.name}\" > ${meta.id}.md5\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "WeGet"
        ],
        "tools_url": [
            "https://bio.tools/weget"
        ],
        "tools_dico": [
            {
                "name": "WeGet",
                "uri": "https://bio.tools/weget",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "WeGET is a computational tool to find mammalian genes that strongly co-express with a human query gene set of interest.",
                "homepage": "http://weget.cmbi.umcn.nl/"
            }
        ],
        "inputs": [
            "meta",
            "config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"bioconda::synapseclient=2.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/synapseclient:2.4.0--pyh5e36f6f_0' : 'quay.io/biocontainers/synapseclient:2.4.0--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GTF2BED": {
        "name_process": "GTF2BED",
        "string_process": "process GTF2BED {\n    tag \"$gtf\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::perl=5.26.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/perl:5.26.2' :\n        'quay.io/biocontainers/perl:5.26.2' }\"\n\n    input:\n    path gtf\n\n    output:\n    path '*.bed'       , emit: bed\n    path \"versions.yml\", emit: versions\n\n    script:                                                                    \n    \"\"\"\n    gtf2bed \\\\\n        $gtf \\\\\n        > ${gtf.baseName}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        perl: \\$(echo \\$(perl --version 2>&1) | sed 's/.*v\\\\(.*\\\\)) built.*/\\\\1/')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    gtf2bed \\\\\n        $gtf \\\\\n        > ${gtf.baseName}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        perl: \\$(echo \\$(perl --version 2>&1) | sed 's/.*v\\\\(.*\\\\)) built.*/\\\\1/')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$gtf\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::perl=5.26.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/perl:5.26.2' : 'quay.io/biocontainers/perl:5.26.2' }\""
        ],
        "when": "",
        "stub": ""
    },
    "IVAR_VARIANTS_TO_VCF": {
        "name_process": "IVAR_VARIANTS_TO_VCF",
        "string_process": "process IVAR_VARIANTS_TO_VCF {\n    tag \"$meta.id\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5 conda-forge::matplotlib=3.5.1 conda-forge::pandas=1.3.5 conda-forge::r-sys=3.4 conda-forge::regex=2021.11.10 conda-forge::scipy=1.7.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' :\n        'quay.io/biocontainers/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' }\"\n\n    input:\n    tuple val(meta), path(tsv)\n    path  header\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), emit: vcf\n    tuple val(meta), path(\"*.log\"), emit: log\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                         \n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ivar_variants_to_vcf.py \\\\\n        $tsv \\\\\n        unsorted.txt \\\\\n        $args \\\\\n        > ${prefix}.variant_counts.log\n\n    ## Order vcf by coordinates\n    cat unsorted.txt | grep \"^#\" > ${prefix}.vcf; cat unsorted.txt | grep -v \"^#\" | sort -k1,1d -k2,2n >> ${prefix}.vcf\n\n    cat $header ${prefix}.variant_counts.log > ${prefix}.variant_counts_mqc.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ivar_variants_to_vcf.py \\\\\n        $tsv \\\\\n        unsorted.txt \\\\\n        $args \\\\\n        > ${prefix}.variant_counts.log\n\n    ## Order vcf by coordinates\n    cat unsorted.txt | grep \"^#\" > ${prefix}.vcf; cat unsorted.txt | grep -v \"^#\" | sort -k1,1d -k2,2n >> ${prefix}.vcf\n\n    cat $header ${prefix}.variant_counts.log > ${prefix}.variant_counts_mqc.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tsv",
            "header"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5 conda-forge::matplotlib=3.5.1 conda-forge::pandas=1.3.5 conda-forge::r-sys=3.4 conda-forge::regex=2021.11.10 conda-forge::scipy=1.7.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' : 'quay.io/biocontainers/mulled-v2-77320db00eefbbf8c599692102c3d387a37ef02a:08144a66f00dc7684fad061f1466033c0176e7ad-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MINIA": {
        "name_process": "MINIA",
        "string_process": "process MINIA {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::minia=3.2.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/minia:3.2.6--h9a82719_0' :\n        'quay.io/biocontainers/minia:3.2.6--h9a82719_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.contigs.fa'), emit: contigs\n    tuple val(meta), path('*.unitigs.fa'), emit: unitigs\n    tuple val(meta), path('*.h5')        , emit: h5\n    path  \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_list = reads.join(\",\")\n    \"\"\"\n    echo \"${read_list}\" | sed 's/,/\\\\n/g' > input_files.txt\n    minia \\\\\n        $args \\\\\n        -nb-cores $task.cpus \\\\\n        -in input_files.txt \\\\\n        -out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minia: \\$(echo \\$(minia --version 2>&1 | grep Minia) | sed 's/^.*Minia version //;')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_list = reads.join(\",\")\n    \"\"\"\n    echo \"${read_list}\" | sed 's/,/\\\\n/g' > input_files.txt\n    minia \\\\\n        $args \\\\\n        -nb-cores $task.cpus \\\\\n        -in input_files.txt \\\\\n        -out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minia: \\$(echo \\$(minia --version 2>&1 | grep Minia) | sed 's/^.*Minia version //;')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Minia"
        ],
        "tools_url": [
            "https://bio.tools/minia"
        ],
        "tools_dico": [
            {
                "name": "Minia",
                "uri": "https://bio.tools/minia",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "Short-read assembler based on a de Bruijn graph, capable of assembling a human genome on a desktop computer in a day.",
                "homepage": "http://minia.genouest.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::minia=3.2.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/minia:3.2.6--h9a82719_0' : 'quay.io/biocontainers/minia:3.2.6--h9a82719_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_MPILEUP": {
        "name_process": "SAMTOOLS_MPILEUP",
        "string_process": "process SAMTOOLS_MPILEUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.mpileup\"), emit: mpileup\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    samtools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        --output ${prefix}.mpileup \\\\\n        $args \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    samtools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        --output ${prefix}.mpileup \\\\\n        $args \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NEXTCLADE_RUN": {
        "name_process": "NEXTCLADE_RUN",
        "string_process": "process NEXTCLADE_RUN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' :\n        'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path dataset\n\n    output:\n    tuple val(meta), path(\"${prefix}.csv\")      , emit: csv\n    tuple val(meta), path(\"${prefix}.tsv\")      , emit: tsv\n    tuple val(meta), path(\"${prefix}.json\")     , emit: json\n    tuple val(meta), path(\"${prefix}.tree.json\"), emit: json_tree\n    path \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    nextclade \\\\\n        run \\\\\n        $args \\\\\n        --jobs $task.cpus \\\\\n        --input-fasta $fasta \\\\\n        --input-dataset $dataset \\\\\n        --output-csv ${prefix}.csv \\\\\n        --output-tsv ${prefix}.tsv \\\\\n        --output-json ${prefix}.json \\\\\n        --output-tree ${prefix}.tree.json \\\\\n        --output-basename ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    nextclade \\\\\n        run \\\\\n        $args \\\\\n        --jobs $task.cpus \\\\\n        --input-fasta $fasta \\\\\n        --input-dataset $dataset \\\\\n        --output-csv ${prefix}.csv \\\\\n        --output-tsv ${prefix}.tsv \\\\\n        --output-json ${prefix}.json \\\\\n        --output-tree ${prefix}.tree.json \\\\\n        --output-basename ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "Faerun"
        ],
        "tools_url": [
            "https://bio.tools/Faerun"
        ],
        "tools_dico": [
            {
                "name": "Faerun",
                "uri": "https://bio.tools/Faerun",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PubChem and ChEMBL Beyond Lipinski.",
                "homepage": "http://faerun.gdb.tools/"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "dataset"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' : 'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CAT_ADDITIONAL_FASTA": {
        "name_process": "CAT_ADDITIONAL_FASTA",
        "string_process": "process CAT_ADDITIONAL_FASTA {\n    tag \"$add_fasta\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path fasta\n    path gtf\n    path add_fasta\n    val  biotype\n\n    output:\n    path \"${name}.fasta\", emit: fasta\n    path \"${name}.gtf\"  , emit: gtf\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def genome_name  = params.genome ? params.genome : fasta.getBaseName()\n    def biotype_name = biotype ? \"-b $biotype\" : ''\n    def add_name     = add_fasta.getBaseName()\n    name             = \"${genome_name}_${add_name}\"\n    \"\"\"\n    fasta2gtf.py \\\\\n        -o ${add_fasta.baseName}.gtf \\\\\n        $biotype_name \\\\\n        $add_fasta\n\n    cat $fasta $add_fasta > ${name}.fasta\n    cat $gtf ${add_fasta.baseName}.gtf > ${name}.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def genome_name  = params.genome ? params.genome : fasta.getBaseName()\n    def biotype_name = biotype ? \"-b $biotype\" : ''\n    def add_name     = add_fasta.getBaseName()\n    name             = \"${genome_name}_${add_name}\"\n    \"\"\"\n    fasta2gtf.py \\\\\n        -o ${add_fasta.baseName}.gtf \\\\\n        $biotype_name \\\\\n        $add_fasta\n\n    cat $fasta $add_fasta > ${name}.fasta\n    cat $gtf ${add_fasta.baseName}.gtf > ${name}.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "goname"
        ],
        "tools_url": [
            "https://bio.tools/goname"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "add_fasta",
            "biotype"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$add_fasta\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QUAST": {
        "name_process": "QUAST",
        "string_process": "process QUAST {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::quast=5.0.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/quast:5.0.2--py37pl526hb5aa323_2' :\n        'quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2' }\"\n\n    input:\n    path consensus\n    path fasta\n    path gff\n    val use_fasta\n    val use_gff\n\n    output:\n    path \"${prefix}\"    , emit: results\n    path '*.tsv'        , emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: 'quast'\n    def features  = use_gff ? \"--features $gff\" : ''\n    def reference = use_fasta ? \"-r $fasta\" : ''\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $reference \\\\\n        $features \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        ${consensus.join(' ')}\n\n    ln -s ${prefix}/report.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        quast: \\$(quast.py --version 2>&1 | sed 's/^.*QUAST v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: 'quast'\n    def features  = use_gff ? \"--features $gff\" : ''\n    def reference = use_fasta ? \"-r $fasta\" : ''\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $reference \\\\\n        $features \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        ${consensus.join(' ')}\n\n    ln -s ${prefix}/report.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        quast: \\$(quast.py --version 2>&1 | sed 's/^.*QUAST v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "consensus",
            "fasta",
            "gff",
            "use_fasta",
            "use_gff"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::quast=5.0.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/quast:5.0.2--py37pl526hb5aa323_2' : 'quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "IVAR_CONSENSUS": {
        "name_process": "IVAR_CONSENSUS",
        "string_process": "process IVAR_CONSENSUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' :\n        'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    val save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.fa\")      , emit: fasta\n    tuple val(meta), path(\"*.qual.txt\"), emit: qual\n    tuple val(meta), path(\"*.mpileup\") , optional:true, emit: mpileup\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        --reference $fasta \\\\\n        $args2 \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            consensus \\\\\n            $args \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        --reference $fasta \\\\\n        $args2 \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            consensus \\\\\n            $args \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "mpileup",
            "AIVAR",
            "Consensus"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/mpileup",
            "https://bio.tools/AIVAR",
            "https://bio.tools/consensus"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "AIVAR",
                "uri": "https://bio.tools/AIVAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assessing concordance among human, in silico predictions and functional assays on genetic variant classification.",
                "homepage": "https://github.com/TopGene/AIvar"
            },
            {
                "name": "Consensus",
                "uri": "https://bio.tools/consensus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Consensus server aligns a sequence to a structural template using a consensus of 5 different alignment methods.  A measure of reliability is produced for each alignment position in order to predict the suitability of regions for comparative modelling.",
                "homepage": "http://stormo.wustl.edu/consensus/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "save_mpileup"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' : 'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_MASKFASTA": {
        "name_process": "BEDTOOLS_MASKFASTA",
        "string_process": "process BEDTOOLS_MASKFASTA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.fa\"), emit: fasta\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        maskfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        maskfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_TIN": {
        "name_process": "RSEQC_TIN",
        "string_process": "process RSEQC_TIN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    tuple val(meta), path(\"*.xls\"), emit: xls\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tin.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(tin.py --version | sed -e \"s/tin.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tin.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(tin.py --version | sed -e \"s/tin.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLASMIDID": {
        "name_process": "PLASMIDID",
        "string_process": "process PLASMIDID {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::plasmidid=1.6.5' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plasmidid:1.6.5--hdfd78af_0' :\n        'quay.io/biocontainers/plasmidid:1.6.5--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(scaffold)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"${prefix}/*final_results.html\"), emit: html\n    tuple val(meta), path(\"${prefix}/*final_results.tab\") , emit: tab\n    tuple val(meta), path(\"${prefix}/images/\")            , emit: images\n    tuple val(meta), path(\"${prefix}/logs/\")              , emit: logs\n    tuple val(meta), path(\"${prefix}/data/\")              , emit: data\n    tuple val(meta), path(\"${prefix}/database/\")          , emit: database\n    tuple val(meta), path(\"${prefix}/fasta_files/\")       , emit: fasta_files\n    tuple val(meta), path(\"${prefix}/kmer/\")              , emit: kmer\n    path \"versions.yml\"                                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plasmidID \\\\\n        -d $fasta \\\\\n        -s $prefix \\\\\n        -c $scaffold \\\\\n        $args \\\\\n        -o .\n\n    mv NO_GROUP/$prefix ./$prefix\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plasmidid: \\$(echo \\$(plasmidID --version 2>&1))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plasmidID \\\\\n        -d $fasta \\\\\n        -s $prefix \\\\\n        -c $scaffold \\\\\n        $args \\\\\n        -o .\n\n    mv NO_GROUP/$prefix ./$prefix\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plasmidid: \\$(echo \\$(plasmidID --version 2>&1))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scaffold",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::plasmidid=1.6.5' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plasmidid:1.6.5--hdfd78af_0' : 'quay.io/biocontainers/plasmidid:1.6.5--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SRA_TO_SAMPLESHEET": {
        "name_process": "SRA_TO_SAMPLESHEET",
        "string_process": "\nprocess SRA_TO_SAMPLESHEET {\n    tag \"$meta.id\"\n\n    executor 'local'\n    memory 100.MB\n\n    input:\n    tuple val(meta), path(fastq)\n    val   pipeline\n    val   mapping_fields\n\n    output:\n    tuple val(meta), path(\"*samplesheet.csv\"), emit: samplesheet\n    tuple val(meta), path(\"*mappings.csv\")   , emit: mappings\n\n    exec:\n      \n                                             \n      \n\n                                                      \n    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n    meta_map.remove(\"fastq_1\")\n    meta_map.remove(\"fastq_2\")\n    meta_map.remove(\"md5_1\")\n    meta_map.remove(\"md5_2\")\n    meta_map.remove(\"single_end\")\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id.split('_')[0..-2].join('_')}\",\n        fastq_1 : \"${params.outdir}/fastq/${fastq[0]}\",\n        fastq_2 : meta.single_end ? '' : \"${params.outdir}/fastq/${fastq[1]}\"\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n\n      \n                                     \n      \n    mappings_map = pipeline_map.clone()\n    def fields = mapping_fields ? ['sample'] + mapping_fields.split(',').collect{ it.trim().toLowerCase() } : []\n    if ((mappings_map.keySet() + fields).unique().size() != mappings_map.keySet().size()) {\n        error(\"Invalid option for '--sample_mapping_fields': ${mapping_fields}.\\nValid options: ${mappings_map.keySet().join(', ')}\")\n    }\n\n                      \n    mappings  = fields.collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    mappings += mappings_map.subMap(fields).values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                             \n    def mappings_file = task.workDir.resolve(\"${meta.id}.mappings.csv\")\n    mappings_file.text = mappings\n}",
        "nb_lignes_process": 68,
        "string_script": "    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n    meta_map.remove(\"fastq_1\")\n    meta_map.remove(\"fastq_2\")\n    meta_map.remove(\"md5_1\")\n    meta_map.remove(\"md5_2\")\n    meta_map.remove(\"single_end\")\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id.split('_')[0..-2].join('_')}\",\n        fastq_1 : \"${params.outdir}/fastq/${fastq[0]}\",\n        fastq_2 : meta.single_end ? '' : \"${params.outdir}/fastq/${fastq[1]}\"\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n\n      \n                                     \n      \n    mappings_map = pipeline_map.clone()\n    def fields = mapping_fields ? ['sample'] + mapping_fields.split(',').collect{ it.trim().toLowerCase() } : []\n    if ((mappings_map.keySet() + fields).unique().size() != mappings_map.keySet().size()) {\n        error(\"Invalid option for '--sample_mapping_fields': ${mapping_fields}.\\nValid options: ${mappings_map.keySet().join(', ')}\")\n    }\n\n                      \n    mappings  = fields.collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    mappings += mappings_map.subMap(fields).values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                             \n    def mappings_file = task.workDir.resolve(\"${meta.id}.mappings.csv\")\n    mappings_file.text = mappings",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "pipeline",
            "mapping_fields"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "executor 'local'",
            "memory 100.MB"
        ],
        "when": "",
        "stub": ""
    },
    "UCSC_BEDCLIP": {
        "name_process": "UCSC_BEDCLIP",
        "string_process": "\nprocess UCSC_BEDCLIP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedclip=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-bedclip:377--h0b8a92a_2' :\n        'quay.io/biocontainers/ucsc-bedclip:377--h0b8a92a_2' }\"\n\n    input:\n    tuple val(meta), path(bedgraph)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bedGraph\"), emit: bedgraph\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedClip \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bedGraph\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedClip \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bedGraph\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bedgraph",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedclip=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-bedclip:377--h0b8a92a_2' : 'quay.io/biocontainers/ucsc-bedclip:377--h0b8a92a_2' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_VIEW": {
        "name_process": "SAMTOOLS_VIEW",
        "string_process": "process SAMTOOLS_VIEW {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' :\n        'quay.io/biocontainers/samtools:1.14--hb421002_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.bam\") , emit: bam , optional: true\n    tuple val(meta), path(\"*.cram\"), emit: cram, optional: true\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--reference ${fasta} -C\" : \"\"\n    def file_type = input.getExtension()\n    if (\"$input\" == \"${prefix}.${file_type}\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        view \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        $args \\\\\n        $input \\\\\n        $args2 \\\\\n        > ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--reference ${fasta} -C\" : \"\"\n    def file_type = input.getExtension()\n    if (\"$input\" == \"${prefix}.${file_type}\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        view \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        $args \\\\\n        $input \\\\\n        $args2 \\\\\n        > ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "iview"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/iview"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "iview",
                "uri": "https://bio.tools/iview",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Interactive HTML5 visualizer of protein-ligand complex.",
                "homepage": "http://istar.cse.cuhk.edu.hk/iview/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.14--hb421002_0' : 'quay.io/biocontainers/samtools:1.14--hb421002_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "process CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(reads, stageAs: \"input*/*\")\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n    path \"versions.yml\"                       , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.join(' ')} > ${prefix}.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.join(' ')} > ${prefix}_2.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.join(' ')} > ${prefix}.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.join(' ')} > ${prefix}_2.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_LIST": {
        "name_process": "SYNAPSE_LIST",
        "string_process": "\nprocess SYNAPSE_LIST {\n    tag \"$id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::synapseclient=2.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/synapseclient:2.4.0--pyh5e36f6f_0' :\n        'quay.io/biocontainers/synapseclient:2.4.0--pyh5e36f6f_0' }\"\n\n    input:\n    val id\n    path config\n\n    output:\n    path \"*.txt\"       , emit: txt\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        list \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.list.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        syanpse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        list \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.list.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        syanpse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "listor"
        ],
        "tools_url": [
            "https://bio.tools/listor"
        ],
        "tools_dico": [
            {
                "name": "listor",
                "uri": "https://bio.tools/listor",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Write a list file of the logical OR of two sets of sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/listor.html"
            }
        ],
        "inputs": [
            "id",
            "config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::synapseclient=2.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/synapseclient:2.4.0--pyh5e36f6f_0' : 'quay.io/biocontainers/synapseclient:2.4.0--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "ASCIIGENOME": {
        "name_process": "ASCIIGENOME",
        "string_process": "process ASCIIGENOME {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::asciigenome=1.16.0 bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-093691b47d719890dc19ac0c13c4528e9776897f:27211b8c38006480d69eb1be3ef09a7bf0a49d76-0' :\n        'quay.io/biocontainers/mulled-v2-093691b47d719890dc19ac0c13c4528e9776897f:27211b8c38006480d69eb1be3ef09a7bf0a49d76-0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(vcf)\n    path fasta\n    path sizes\n    path gff\n    path bed\n    val window\n    val track_height\n\n    output:\n    tuple val(meta), path(\"*pdf\"), emit: pdf\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gff_track = gff ? \"$gff\" : ''\n    def bed_track = bed ? \"$bed\" : ''\n    def paired_end = meta.single_end ? '' : '&& readsAsPairs -on'\n    \"\"\"\n    zcat $vcf \\\\\n        | grep -v '#' \\\\\n        | awk -v FS='\\t' -v OFS='\\t' '{print \\$1, (\\$2-1), (\\$2)}' \\\\\n        > variants.bed\n\n    bedtools \\\\\n        slop \\\\\n        -i variants.bed \\\\\n        -g $sizes \\\\\n        -b $window \\\\\n        > variants.slop.bed\n\n    ASCIIGenome \\\\\n        -ni \\\\\n        -x \"trackHeight 0 bam#1 && trackHeight $track_height bam@2 $paired_end && filterVariantReads && save ${prefix}.%r.pdf\" \\\\\n        --batchFile variants.slop.bed \\\\\n        --fasta $fasta \\\\\n        $bam \\\\\n        $vcf \\\\\n        $bed_track \\\\\n        $gff_track \\\\\n        > /dev/null\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        asciigenome: \\$(echo \\$(ASCIIGenome -ni --version 2>&1) | sed -e \"s/ASCIIGenome //g\")\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 59,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gff_track = gff ? \"$gff\" : ''\n    def bed_track = bed ? \"$bed\" : ''\n    def paired_end = meta.single_end ? '' : '&& readsAsPairs -on'\n    \"\"\"\n    zcat $vcf \\\\\n        | grep -v '#' \\\\\n        | awk -v FS='\\t' -v OFS='\\t' '{print \\$1, (\\$2-1), (\\$2)}' \\\\\n        > variants.bed\n\n    bedtools \\\\\n        slop \\\\\n        -i variants.bed \\\\\n        -g $sizes \\\\\n        -b $window \\\\\n        > variants.slop.bed\n\n    ASCIIGenome \\\\\n        -ni \\\\\n        -x \"trackHeight 0 bam#1 && trackHeight $track_height bam@2 $paired_end && filterVariantReads && save ${prefix}.%r.pdf\" \\\\\n        --batchFile variants.slop.bed \\\\\n        --fasta $fasta \\\\\n        $bam \\\\\n        $vcf \\\\\n        $bed_track \\\\\n        $gff_track \\\\\n        > /dev/null\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        asciigenome: \\$(echo \\$(ASCIIGenome -ni --version 2>&1) | sed -e \"s/ASCIIGenome //g\")\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "SLOPE",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/slope",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "SLOPE",
                "uri": "https://bio.tools/slope",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Detects structural variants from targeted short DNA reads",
                "homepage": "http://www-genepi.med.utah.edu/suppl/SLOPE/index.html"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "vcf",
            "fasta",
            "sizes",
            "gff",
            "bed",
            "window",
            "track_height"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::asciigenome=1.16.0 bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-093691b47d719890dc19ac0c13c4528e9776897f:27211b8c38006480d69eb1be3ef09a7bf0a49d76-0' : 'quay.io/biocontainers/mulled-v2-093691b47d719890dc19ac0c13c4528e9776897f:27211b8c38006480d69eb1be3ef09a7bf0a49d76-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_READDUPLICATION": {
        "name_process": "RSEQC_READDUPLICATION",
        "string_process": "process RSEQC_READDUPLICATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*seq.DupRate.xls\"), emit: seq_xls\n    tuple val(meta), path(\"*pos.DupRate.xls\"), emit: pos_xls\n    tuple val(meta), path(\"*.pdf\")           , emit: pdf\n    tuple val(meta), path(\"*.r\")             , emit: rscript\n    path  \"versions.yml\"                     , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_duplication.py \\\\\n        -i $bam \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_duplication.py --version | sed -e \"s/read_duplication.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_duplication.py \\\\\n        -i $bam \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_duplication.py --version | sed -e \"s/read_duplication.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "UMITOOLS_DEDUP": {
        "name_process": "UMITOOLS_DEDUP",
        "string_process": "process UMITOOLS_DEDUP {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' :\n        'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired   = meta.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    umi_tools dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        $paired \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired   = meta.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    umi_tools dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        $paired \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' : 'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "UNICYCLER": {
        "name_process": "UNICYCLER",
        "string_process": "process UNICYCLER {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3' :\n        'quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3' }\"\n\n    input:\n    tuple val(meta), path(shortreads), path(longreads)\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa.gz'), emit: scaffolds\n    tuple val(meta), path('*.assembly.gfa.gz'), emit: gfa\n    tuple val(meta), path('*.log')            , emit: log\n    path  \"versions.yml\"                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def short_reads = shortreads ? ( meta.single_end ? \"-s $shortreads\" : \"-1 ${shortreads[0]} -2 ${shortreads[1]}\" ) : \"\"\n    def long_reads  = longreads ? \"-l $longreads\" : \"\"\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        $short_reads \\\\\n        $long_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    gzip -n ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    gzip -n ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        unicycler: \\$(echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def short_reads = shortreads ? ( meta.single_end ? \"-s $shortreads\" : \"-1 ${shortreads[0]} -2 ${shortreads[1]}\" ) : \"\"\n    def long_reads  = longreads ? \"-l $longreads\" : \"\"\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        $short_reads \\\\\n        $long_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    gzip -n ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    gzip -n ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        unicycler: \\$(echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "meta",
            "shortreads",
            "longreads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3' : 'quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEM_MERGE_COUNTS": {
        "name_process": "RSEM_MERGE_COUNTS",
        "string_process": "process RSEM_MERGE_COUNTS {\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path ('genes/*')\n    path ('isoforms/*')\n\n    output:\n    path \"rsem.merged.gene_counts.tsv\"      , emit: counts_gene\n    path \"rsem.merged.gene_tpm.tsv\"         , emit: tpm_gene\n    path \"rsem.merged.transcript_counts.tsv\", emit: counts_transcript\n    path \"rsem.merged.transcript_tpm.tsv\"   , emit: tpm_transcript\n    path \"versions.yml\"                     , emit: versions\n\n    script:\n    \"\"\"\n    mkdir -p tmp/genes\n    cut -f 1,2 `ls ./genes/* | head -n 1` > gene_ids.txt\n    for fileid in `ls ./genes/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.genes.results\\$//g`\n        echo \\$samplename > tmp/genes/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/genes/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.tpm.txt\n    done\n\n    mkdir -p tmp/isoforms\n    cut -f 1,2 `ls ./isoforms/* | head -n 1` > transcript_ids.txt\n    for fileid in `ls ./isoforms/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.isoforms.results\\$//g`\n        echo \\$samplename > tmp/isoforms/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/isoforms/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.tpm.txt\n    done\n\n    paste gene_ids.txt tmp/genes/*.counts.txt > rsem.merged.gene_counts.tsv\n    paste gene_ids.txt tmp/genes/*.tpm.txt > rsem.merged.gene_tpm.tsv\n    paste transcript_ids.txt tmp/isoforms/*.counts.txt > rsem.merged.transcript_counts.tsv\n    paste transcript_ids.txt tmp/isoforms/*.tpm.txt > rsem.merged.transcript_tpm.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    \"\"\"\n    mkdir -p tmp/genes\n    cut -f 1,2 `ls ./genes/* | head -n 1` > gene_ids.txt\n    for fileid in `ls ./genes/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.genes.results\\$//g`\n        echo \\$samplename > tmp/genes/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/genes/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/genes/\\${samplename}.tpm.txt\n    done\n\n    mkdir -p tmp/isoforms\n    cut -f 1,2 `ls ./isoforms/* | head -n 1` > transcript_ids.txt\n    for fileid in `ls ./isoforms/*`; do\n        samplename=`basename \\$fileid | sed s/\\\\.isoforms.results\\$//g`\n        echo \\$samplename > tmp/isoforms/\\${samplename}.counts.txt\n        cut -f 5 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.counts.txt\n        echo \\$samplename > tmp/isoforms/\\${samplename}.tpm.txt\n        cut -f 6 \\${fileid} | tail -n+2 >> tmp/isoforms/\\${samplename}.tpm.txt\n    done\n\n    paste gene_ids.txt tmp/genes/*.counts.txt > rsem.merged.gene_counts.tsv\n    paste gene_ids.txt tmp/genes/*.tpm.txt > rsem.merged.gene_tpm.tsv\n    paste transcript_ids.txt tmp/isoforms/*.counts.txt > rsem.merged.transcript_counts.tsv\n    paste transcript_ids.txt tmp/isoforms/*.tpm.txt > rsem.merged.transcript_tpm.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "ARTIC_MINION": {
        "name_process": "ARTIC_MINION",
        "string_process": "process ARTIC_MINION {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' :\n        'quay.io/biocontainers/artic:1.2.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(fastq)\n    path  fast5_dir\n    path  sequencing_summary\n    path  (\"primer-schemes/${scheme}/V${scheme_version}/${scheme}.reference.fasta\")\n    path  (\"primer-schemes/${scheme}/V${scheme_version}/${scheme}.scheme.bed\")\n    path  medaka_model_file\n    val   medaka_model_string\n    val   scheme\n    val   scheme_version\n\n    output:\n    tuple val(meta), path(\"${prefix}.*\")                              , emit: results\n    tuple val(meta), path(\"${prefix}.sorted.bam\")                     , emit: bam\n    tuple val(meta), path(\"${prefix}.sorted.bam.bai\")                 , emit: bai\n    tuple val(meta), path(\"${prefix}.trimmed.rg.sorted.bam\")          , emit: bam_trimmed\n    tuple val(meta), path(\"${prefix}.trimmed.rg.sorted.bam.bai\")      , emit: bai_trimmed\n    tuple val(meta), path(\"${prefix}.primertrimmed.rg.sorted.bam\")    , emit: bam_primertrimmed\n    tuple val(meta), path(\"${prefix}.primertrimmed.rg.sorted.bam.bai\"), emit: bai_primertrimmed\n    tuple val(meta), path(\"${prefix}.consensus.fasta\")                , emit: fasta\n    tuple val(meta), path(\"${prefix}.pass.vcf.gz\")                    , emit: vcf\n    tuple val(meta), path(\"${prefix}.pass.vcf.gz.tbi\")                , emit: tbi\n    tuple val(meta), path(\"*.json\"), optional:true                    , emit: json\n    path  \"versions.yml\"                                              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def version  = scheme_version.toString().toLowerCase().replaceAll('v','')\n    def fast5    = fast5_dir ? \"--fast5-directory $fast5_dir\"             : \"\"\n    def summary  = sequencing_summary ? \"--sequencing-summary $sequencing_summary\" : \"\"\n    def model    = \"\"\n    if (args.tokenize().contains('--medaka')) {\n        fast5   = \"\"\n        summary = \"\"\n        model   = medaka_model_file ? \"--medaka-model ./$medaka_model_file\" : \"--medaka-model $medaka_model_string\"\n    }\n    def hd5_plugin_path = task.ext.hd5_plugin_path ? \"export HDF5_PLUGIN_PATH=\" + task.ext.hd5_plugin_path : \"export HDF5_PLUGIN_PATH=/usr/local/lib/python3.6/site-packages/ont_fast5_api/vbz_plugin\"\n    \"\"\"\n    $hd5_plugin_path\n\n    artic \\\\\n        minion \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --read-file $fastq \\\\\n        --scheme-directory ./primer-schemes \\\\\n        --scheme-version $version \\\\\n        $model \\\\\n        $fast5 \\\\\n        $summary \\\\\n        $scheme \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def version  = scheme_version.toString().toLowerCase().replaceAll('v','')\n    def fast5    = fast5_dir ? \"--fast5-directory $fast5_dir\"             : \"\"\n    def summary  = sequencing_summary ? \"--sequencing-summary $sequencing_summary\" : \"\"\n    def model    = \"\"\n    if (args.tokenize().contains('--medaka')) {\n        fast5   = \"\"\n        summary = \"\"\n        model   = medaka_model_file ? \"--medaka-model ./$medaka_model_file\" : \"--medaka-model $medaka_model_string\"\n    }\n    def hd5_plugin_path = task.ext.hd5_plugin_path ? \"export HDF5_PLUGIN_PATH=\" + task.ext.hd5_plugin_path : \"export HDF5_PLUGIN_PATH=/usr/local/lib/python3.6/site-packages/ont_fast5_api/vbz_plugin\"\n    \"\"\"\n    $hd5_plugin_path\n\n    artic \\\\\n        minion \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --read-file $fastq \\\\\n        --scheme-directory ./primer-schemes \\\\\n        --scheme-version $version \\\\\n        $model \\\\\n        $fast5 \\\\\n        $summary \\\\\n        $scheme \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "SummaryAUC",
            "MoDEL",
            "ARTIC",
            "MinION"
        ],
        "tools_url": [
            "https://bio.tools/SummaryAUC",
            "https://bio.tools/model",
            "https://bio.tools/artic",
            "https://bio.tools/MinION"
        ],
        "tools_dico": [
            {
                "name": "SummaryAUC",
                "uri": "https://bio.tools/SummaryAUC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for evaluating the performance of polygenic risk prediction models in validation datasets with only summary level statistics.",
                "homepage": "https://github.com/lsncibb/SummaryAUC"
            },
            {
                "name": "MoDEL",
                "uri": "https://bio.tools/model",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0842",
                                "term": "Identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Database of protein Molecular Dynamics simulations, with 1800 trajectories representing different structural clusters of the PDB.",
                "homepage": "http://mmb.irbbarcelona.org/MoDEL"
            },
            {
                "name": "ARTIC",
                "uri": "https://bio.tools/artic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
                "homepage": "https://github.com/artic-network/fieldbioinformatics"
            },
            {
                "name": "MinION",
                "uri": "https://bio.tools/MinION",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology.\n\nWorkflow and supporting files for Taylor et al: \"Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology\".\n\nCompanion materials for the manuscript \"Taylor et al: Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology\".\n\nThis repository contains the primary Nextflow workflow (minion_bacterial.nf) for bacterial nanopore assembly described in the manuscript and accessory scripts for reproducing the results therein. Workflows for the phylogenetic analysis can be run separately from the phylogenetics directory. The time series analysis can be reproduced using the following steps:.",
                "homepage": "https://github.com/jvolkening/minion_bacterial"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "fast5_dir",
            "sequencing_summary",
            "medaka_model_file",
            "medaka_model_string",
            "scheme",
            "scheme_version"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' : 'quay.io/biocontainers/artic:1.2.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PANGOLIN": {
        "name_process": "PANGOLIN",
        "string_process": "process PANGOLIN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::pangolin=3.1.20' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pangolin:3.1.20--pyhdfd78af_0' :\n        'quay.io/biocontainers/pangolin:3.1.20--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path('*.csv'), emit: report\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pangolin \\\\\n        $fasta\\\\\n        --outfile ${prefix}.pangolin.csv \\\\\n        --threads $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pangolin: \\$(pangolin --version | sed \"s/pangolin //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pangolin \\\\\n        $fasta\\\\\n        --outfile ${prefix}.pangolin.csv \\\\\n        --threads $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pangolin: \\$(pangolin --version | sed \"s/pangolin //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::pangolin=3.1.20' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pangolin:3.1.20--pyhdfd78af_0' : 'quay.io/biocontainers/pangolin:3.1.20--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_NORM": {
        "name_process": "BCFTOOLS_NORM",
        "string_process": "process BCFTOOLS_NORM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.gz\") , emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools norm \\\\\n        --fasta-ref ${fasta} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools norm \\\\\n        --fasta-ref ${fasta} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SRA_MERGE_SAMPLESHEET": {
        "name_process": "SRA_MERGE_SAMPLESHEET",
        "string_process": "\nprocess SRA_MERGE_SAMPLESHEET {\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path ('samplesheets/*')\n    path ('mappings/*')\n\n    output:\n    path \"samplesheet.csv\", emit: samplesheet\n    path \"id_mappings.csv\", emit: mappings\n    path \"versions.yml\"   , emit: versions\n\n    script:\n    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    head -n 1 `ls ./mappings/* | head -n 1` > id_mappings.csv\n    for fileid in `ls ./mappings/*`; do\n        awk 'NR>1' \\$fileid >> id_mappings.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    head -n 1 `ls ./mappings/* | head -n 1` > id_mappings.csv\n    for fileid in `ls ./mappings/*`; do\n        awk 'NR>1' \\$fileid >> id_mappings.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "HISAT2_EXTRACTSPLICESITES": {
        "name_process": "HISAT2_EXTRACTSPLICESITES",
        "string_process": "\nprocess HISAT2_EXTRACTSPLICESITES {\n    tag \"$gtf\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' :\n        'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\"\n\n    input:\n    path gtf\n\n    output:\n    path \"*.splice_sites.txt\", emit: txt\n    path \"versions.yml\"      , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.splice_sites.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.splice_sites.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$gtf\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' : 'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\""
        ],
        "when": "",
        "stub": ""
    },
    "IVAR_VARIANTS": {
        "name_process": "IVAR_VARIANTS",
        "string_process": "process IVAR_VARIANTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' :\n        'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n    path  fai\n    path  gff\n    val   save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.tsv\")    , emit: tsv\n    tuple val(meta), path(\"*.mpileup\"), optional:true, emit: mpileup\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def features = gff ? \"-g $gff\" : \"\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        $args2 \\\\\n        --reference $fasta \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            variants \\\\\n            $args \\\\\n            $features \\\\\n            -r $fasta \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def features = gff ? \"-g $gff\" : \"\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        $args2 \\\\\n        --reference $fasta \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            variants \\\\\n            $args \\\\\n            $features \\\\\n            -r $fasta \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "mpileup",
            "AIVAR",
            "VariantStore"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/mpileup",
            "https://bio.tools/AIVAR",
            "https://bio.tools/VariantStore"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "AIVAR",
                "uri": "https://bio.tools/AIVAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assessing concordance among human, in silico predictions and functional assays on genetic variant classification.",
                "homepage": "https://github.com/TopGene/AIvar"
            },
            {
                "name": "VariantStore",
                "uri": "https://bio.tools/VariantStore",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3577",
                            "term": "Personalised medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3577",
                            "term": "Precision medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3577",
                            "term": "https://en.wikipedia.org/wiki/Personalized_medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3226",
                                    "term": "Variant prioritisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Large-Scale Genomic Variant Search Index.",
                "homepage": "https://github.com/Kingsford-Group/variantstore"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai",
            "gff",
            "save_mpileup"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' : 'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE2_ALIGN": {
        "name_process": "BOWTIE2_ALIGN",
        "string_process": "process BOWTIE2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' :\n        'quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    val   save_unaligned\n\n    output:\n    tuple val(meta), path('*.bam')    , emit: bam\n    tuple val(meta), path('*.log')    , emit: log\n    tuple val(meta), path('*fastq.gz'), emit: fastq, optional:true\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def unaligned = save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 75,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def unaligned = save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed 's/.rev.1.bt2//'`\n        bowtie2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            $unaligned \\\\\n            $args \\\\\n            2> ${prefix}.bowtie2.log \\\\\n            | samtools view -@ $task.cpus $args2 -bhS -o ${prefix}.bam -\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "save_unaligned"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mahesh-panchal__test_nfcore_workflow_chain",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4 bioconda::samtools=1.14 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' : 'quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:4d235f41348a00533f18e47c9669f1ecb327f629-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    }
}
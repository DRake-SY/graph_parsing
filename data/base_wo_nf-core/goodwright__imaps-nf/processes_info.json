{
    "FILTER_TRANSCRIPTS": {
        "name_process": "FILTER_TRANSCRIPTS",
        "string_process": "process FILTER_TRANSCRIPTS {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    container \"quay.io/biocontainers/samtools:1.14--hb421002_0\"\n    \n    input:\n    tuple val(meta), path(transcriptome_bam)\n    path(transcripts)\n\n    output:\n    tuple val(meta), path(\"*transcriptome.bam\"), emit: filtered_bam\n\n    script:\n      def prefix    = \"${meta.id}\"\n\n           \n    \"\"\"\n    samtools sort $transcriptome_bam > sorted.bam\n    samtools index sorted.bam\n    samtools view -h sorted.bam `cat $transcripts` > filtunsort.bam\n    samtools sort filtunsort.bam > ${prefix}_transcriptome.bam\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "      def prefix    = \"${meta.id}\"\n\n           \n    \"\"\"\n    samtools sort $transcriptome_bam > sorted.bam\n    samtools index sorted.bam\n    samtools view -h sorted.bam `cat $transcripts` > filtunsort.bam\n    samtools sort filtunsort.bam > ${prefix}_transcriptome.bam\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "transcriptome_bam",
            "transcripts"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "container \"quay.io/biocontainers/samtools:1.14--hb421002_0\""
        ],
        "when": "",
        "stub": ""
    },
    "XLSX_TO_CSV": {
        "name_process": "XLSX_TO_CSV",
        "string_process": "process XLSX_TO_CSV {\n    tag \"$xlsx\"\n    label 'process_low'\n\n    container \"quay.io/biocontainers/pandas:1.1.5\"\n\n    input:\n    path xlsx\n\n    output:\n    path \"*.csv\", emit: csv\n\n    script:\n    \"\"\"\n    pip install openpyxl\n\n    python -c \"import pandas as pd; data = pd.read_excel('$xlsx', engine='openpyxl'); data.to_csv('$xlsx' + '.csv', index=False)\"\n\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    pip install openpyxl\n\n    python -c \"import pandas as pd; data = pd.read_excel('$xlsx', engine='openpyxl'); data.to_csv('$xlsx' + '.csv', index=False)\"\n\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "PPIP",
            "Data"
        ],
        "tools_url": [
            "https://bio.tools/ppip",
            "https://bio.tools/Data"
        ],
        "tools_dico": [
            {
                "name": "PPIP",
                "uri": "https://bio.tools/ppip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3631",
                                    "term": "Peptide identification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3631",
                                    "term": "Peptide-spectrum-matching"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0943",
                                "term": "Mass spectrum"
                            },
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2974",
                                "term": "Protein sequence (raw)"
                            }
                        ]
                    }
                ],
                "description": "An automated software for identification of bioactive endogenous peptides",
                "homepage": "https://github.com/Shawn-Xu/PPIP"
            },
            {
                "name": "Data",
                "uri": "https://bio.tools/Data",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> LOW CONFIDENCE! | Data set on the influence of members of a couple on family vacation decision-making | This article describes a database on the perceptions of members of a couple regarding the influence exerted in three stages (initiation, search, and final decision) and seven sub-decisions (destination, accommodation, transport, budget, date, activities, restaurants) in the family vacation decision-making process. We obtained responses from 375 couples, whose members each completed the questionnaire individually, which also enables researchers to obtain information about the consensus between the perceptions of both regarding said influence. To complement this information, we also included sociodemographic and travel behavior variables for the couples analyzed. The data are publicly available at https: github.com mmrojasgracia Data-in-Brief_Influence",
                "homepage": "https://github.com/mmrojasgracia/Data-in-Brief_Influence"
            }
        ],
        "inputs": [
            "xlsx"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$xlsx\"",
            "label 'process_low'",
            "container \"quay.io/biocontainers/pandas:1.1.5\""
        ],
        "when": "",
        "stub": ""
    },
    "ICOUNT_SIGXLS": {
        "name_process": "ICOUNT_SIGXLS",
        "string_process": "process ICOUNT_SIGXLS {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0' :\n        'quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path(segmentation)\n\n    output:\n    tuple val(meta), path(\"*.sigxls.bed.gz\"), emit: sigxls\n    tuple val(meta), path(\"*.scores.tsv\"),    emit: scores\n    path \"versions.yml\",                      emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    iCount-Mini sigxls \\\\\n        $segmentation \\\\\n        $bed \\\\\n        ${prefix}.sigxls.bed.gz \\\\\n        --scores ${prefix}.scores.tsv \\\\\n        $args\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        iCount-Mini: \\$(iCount-Mini -v)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    iCount-Mini sigxls \\\\\n        $segmentation \\\\\n        $bed \\\\\n        ${prefix}.sigxls.bed.gz \\\\\n        --scores ${prefix}.scores.tsv \\\\\n        $args\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        iCount-Mini: \\$(iCount-Mini -v)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "segmentation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0' : 'quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GET_CROSSLINKS": {
        "name_process": "GET_CROSSLINKS",
        "string_process": "process GET_CROSSLINKS {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    container 'quay.io/biocontainers/mulled-v2-c8623b4f6522dddd48913bd12dcf405d1d4f0ce1:10e4c359b727e884f6e19ee978f89c44dbaca255-0'\n\n    input:\n      tuple val(meta), path(bam), path(bai)\n      path(fai)\n\n    output:\n      tuple val(meta), path (\"*bed.gz\"), emit: crosslinkBed\n\n    script:\n      def prefix    = \"${meta.id}\"\n\n             \n      \"\"\"\n      bedtools bamtobed -i $bam > dedupe.bed\n      bedtools shift -m 1 -p -1 -i dedupe.bed -g $fai > shifted.bed\n      bedtools genomecov -dz -strand + -5 -i shifted.bed -g $fai | awk '{OFS=\"\\\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"+\"}' > pos.bed\n      bedtools genomecov -dz -strand - -5 -i shifted.bed -g $fai | awk '{OFS=\"\\\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"-\"}' > neg.bed\n      cat pos.bed neg.bed | sort -k1,1 -k2,2n | pigz > ${prefix}.bed.gz\n      \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "      def prefix    = \"${meta.id}\"\n\n             \n      \"\"\"\n      bedtools bamtobed -i $bam > dedupe.bed\n      bedtools shift -m 1 -p -1 -i dedupe.bed -g $fai > shifted.bed\n      bedtools genomecov -dz -strand + -5 -i shifted.bed -g $fai | awk '{OFS=\"\\\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"+\"}' > pos.bed\n      bedtools genomecov -dz -strand - -5 -i shifted.bed -g $fai | awk '{OFS=\"\\\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"-\"}' > neg.bed\n      cat pos.bed neg.bed | sort -k1,1 -k2,2n | pigz > ${prefix}.bed.gz\n      \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "container 'quay.io/biocontainers/mulled-v2-c8623b4f6522dddd48913bd12dcf405d1d4f0ce1:10e4c359b727e884f6e19ee978f89c44dbaca255-0'"
        ],
        "when": "",
        "stub": ""
    },
    "ICOUNT_PEAKS": {
        "name_process": "ICOUNT_PEAKS",
        "string_process": "\nprocess ICOUNT_PEAKS {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    container \"quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0\"\n\n    input:\n    tuple val(meta), path(bed), path(sigxls)\n\n    output:\n    tuple val(meta), path(\"*peaks.bed.gz\"), emit: peaks\n    path \"*.version.txt\"                   , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount-Mini peaks \\\\\n        $bed \\\\\n        $sigxls \\\\\n        ${prefix}.peaks.bed.gz \\\\\n        $options.args\n    echo \\$(iCount-Mini -v) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount-Mini peaks \\\\\n        $bed \\\\\n        $sigxls \\\\\n        ${prefix}.peaks.bed.gz \\\\\n        $options.args\n    echo \\$(iCount-Mini -v) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "sigxls"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "container \"quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "process SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.bai\") , optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\") , optional:true, emit: csi\n    tuple val(meta), path(\"*.crai\"), optional:true, emit: crai\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${input}.bai\n    touch ${input}.crai\n    touch ${input}.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${input}.bai\n    touch ${input}.crai\n    touch ${input}.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "FILTER_GTF": {
        "name_process": "FILTER_GTF",
        "string_process": "process FILTER_GTF {\n    tag \"$gtf\"\n    label \"process_medium\"\n    container \"quay.io/biocontainers/peka:0.1.4--pyhdfd78af_0\"\n    \n    input:\n    path(gtf)\n\n    output:\n    path \"*.gtf\", emit: post_filtering_gtf\n    \n    script:\n    template 'FilterGtf.py'\n}",
        "nb_lignes_process": 12,
        "string_script": "    template 'FilterGtf.py'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$gtf\"",
            "label \"process_medium\"",
            "container \"quay.io/biocontainers/peka:0.1.4--pyhdfd78af_0\""
        ],
        "when": "",
        "stub": ""
    },
    "FIND_LONGEST_TRANSCRIPT": {
        "name_process": "FIND_LONGEST_TRANSCRIPT",
        "string_process": "process FIND_LONGEST_TRANSCRIPT {\n    tag \"$gtf\"\n    label \"process_medium\"\n    container \"quay.io/biocontainers/gawk:5.1.0\"\n\n    input:\n        path gtf\n\n    output:\n        path \"longest_transcript.txt\",          emit: longest_transcript\n        path \"transcriptome_index.fa.fai\",      emit: transcriptome_index\n\n    script:\n        \"\"\"\n        #Table of CDS lengths for each protein coding transcript.\n        cat ${gtf} | \\\n        gawk -F \"\\\\t\" '\\$3 == \"CDS\" { print \\$0 }' |\n        tr -d \"\\\\\"\" | \\\n        grep \"transcript_type protein_coding\" | \\\n        gawk -F\"\\\\t\" '{ OFS=\"\\\\t\" } { match(\\$0, \"gene_id [[:alnum:].]*\", a) } { match(\\$0, \"transcript_id [[:alnum:].]*\", b) } { print a[0], b[0], 1 + \\$5 - \\$4 }' |\n        tr -d \"gene_id |transcript_id \" |\n        gawk -F \"\\\\t\" 'BEGIN { SUBSEP = OFS = FS } { s[\\$1, \\$2] += \\$3 } END { for (i in s) { print i, s[i] } }' |\n        sort -k1,1 -k3,3nr -k2,2 > cds_lengths.txt\n\n        #Table of transcript lengths for each protein coding transcript.\n        cat ${gtf} | \\\n        gawk -F \"\\\\t\" '\\$3 == \"exon\" { print \\$0 }' |\n        tr -d \"\\\\\"\" | \\\n        grep \"transcript_type protein_coding\" | \\\n        gawk -F\"\\\\t\" '{ OFS=\"\\\\t\" } { match(\\$0, \"gene_id [[:alnum:].]*\", a) } { match(\\$0, \"transcript_id [[:alnum:].]*\", b) } { print a[0], b[0], 1 + \\$5 - \\$4 }' |\n        tr -d \"gene_id |transcript_id \" |\n        gawk -F \"\\\\t\" 'BEGIN { SUBSEP = OFS = FS } { s[\\$1, \\$2] += \\$3 } END { for (i in s) { print i, s[i] } }' |\n        sort -k1,1 -k3,3nr -k2,2 > tx_lengths.txt\n\n        #Use tables of CDS and transcript lengths to select longest protein coding transcript per gene.\n        gawk -F\"\\\\t\" 'NR==FNR { e[\\$1\\$2]=\\$3;next} {print \\$0 FS e[\\$1\\$2]}' tx_lengths.txt cds_lengths.txt | \\\n        sort -k1,1 -k3,3nr -k4,4nr | gawk '\\$1 != x { print } { x = \\$1 }' | gawk '{ print \\$2 }' > longest_transcript.txt\n\n        #Make fake fasta index based on transcript lengths.\n        gawk -F\"\\\\t\" '{ OFS=\"\\\\t\" } { print \\$2, \\$3, sum, 80, 81; sum += \\$3 + 1 }' tx_lengths.txt > transcriptome_index.fa.fai\n        \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "        \"\"\"\n        #Table of CDS lengths for each protein coding transcript.\n        cat ${gtf} | \\\n        gawk -F \"\\\\t\" '\\$3 == \"CDS\" { print \\$0 }' |\n        tr -d \"\\\\\"\" | \\\n        grep \"transcript_type protein_coding\" | \\\n        gawk -F\"\\\\t\" '{ OFS=\"\\\\t\" } { match(\\$0, \"gene_id [[:alnum:].]*\", a) } { match(\\$0, \"transcript_id [[:alnum:].]*\", b) } { print a[0], b[0], 1 + \\$5 - \\$4 }' |\n        tr -d \"gene_id |transcript_id \" |\n        gawk -F \"\\\\t\" 'BEGIN { SUBSEP = OFS = FS } { s[\\$1, \\$2] += \\$3 } END { for (i in s) { print i, s[i] } }' |\n        sort -k1,1 -k3,3nr -k2,2 > cds_lengths.txt\n\n        #Table of transcript lengths for each protein coding transcript.\n        cat ${gtf} | \\\n        gawk -F \"\\\\t\" '\\$3 == \"exon\" { print \\$0 }' |\n        tr -d \"\\\\\"\" | \\\n        grep \"transcript_type protein_coding\" | \\\n        gawk -F\"\\\\t\" '{ OFS=\"\\\\t\" } { match(\\$0, \"gene_id [[:alnum:].]*\", a) } { match(\\$0, \"transcript_id [[:alnum:].]*\", b) } { print a[0], b[0], 1 + \\$5 - \\$4 }' |\n        tr -d \"gene_id |transcript_id \" |\n        gawk -F \"\\\\t\" 'BEGIN { SUBSEP = OFS = FS } { s[\\$1, \\$2] += \\$3 } END { for (i in s) { print i, s[i] } }' |\n        sort -k1,1 -k3,3nr -k2,2 > tx_lengths.txt\n\n        #Use tables of CDS and transcript lengths to select longest protein coding transcript per gene.\n        gawk -F\"\\\\t\" 'NR==FNR { e[\\$1\\$2]=\\$3;next} {print \\$0 FS e[\\$1\\$2]}' tx_lengths.txt cds_lengths.txt | \\\n        sort -k1,1 -k3,3nr -k4,4nr | gawk '\\$1 != x { print } { x = \\$1 }' | gawk '{ print \\$2 }' > longest_transcript.txt\n\n        #Make fake fasta index based on transcript lengths.\n        gawk -F\"\\\\t\" '{ OFS=\"\\\\t\" } { print \\$2, \\$3, sum, 80, 81; sum += \\$3 + 1 }' tx_lengths.txt > transcriptome_index.fa.fai\n        \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "Sumer"
        ],
        "tools_url": [
            "https://bio.tools/Sumer"
        ],
        "tools_dico": [
            {
                "name": "Sumer",
                "uri": "https://bio.tools/Sumer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R package for summarizing multiple enrichment analysis results.",
                "homepage": "https://github.com/bzhanglab/sumer"
            }
        ],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$gtf\"",
            "label \"process_medium\"",
            "container \"quay.io/biocontainers/gawk:5.1.0\""
        ],
        "when": "",
        "stub": ""
    },
    "ICOUNT_SEGMENT": {
        "name_process": "ICOUNT_SEGMENT",
        "string_process": "process ICOUNT_SEGMENT {\n    tag \"$gtf\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0' :\n        'quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0' }\"\n\n    input:\n    path(gtf)\n    path(fai)\n\n    output:\n    path(\"${prefix}.gtf\"), emit: gtf\n    path(\"regions.gtf.gz\"),          emit: regions\n    path \"versions.yml\",             emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def filename = \"icount_segmentation\"\n    prefix       = task.ext.prefix ? \"${filename}${options.suffix}\" : \"${filename}\"\n    \"\"\"\n    iCount-Mini segment \\\\\n        $gtf \\\\\n        ${prefix}.gtf \\\\\n        $fai\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        iCount-Mini: \\$(iCount-Mini -v)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def filename = \"icount_segmentation\"\n    prefix       = task.ext.prefix ? \"${filename}${options.suffix}\" : \"${filename}\"\n    \"\"\"\n    iCount-Mini segment \\\\\n        $gtf \\\\\n        ${prefix}.gtf \\\\\n        $fai\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        iCount-Mini: \\$(iCount-Mini -v)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf",
            "fai"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$gtf\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0' : 'quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UMITOOLS_DEDUP": {
        "name_process": "UMITOOLS_DEDUP",
        "string_process": "process UMITOOLS_DEDUP {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' :\n        'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.bam\")             , emit: bam\n    tuple val(meta), path(\"*edit_distance.tsv\"), emit: tsv_edit_distance\n    tuple val(meta), path(\"*per_umi.tsv\")      , emit: tsv_per_umi\n    tuple val(meta), path(\"*per_position.tsv\") , emit: tsv_umi_per_position\n    path  \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    umi_tools \\\\\n        dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        --output-stats $prefix \\\\\n        $paired \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    umi_tools \\\\\n        dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        --output-stats $prefix \\\\\n        $paired \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' : 'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ULTRAPLEX": {
        "name_process": "ULTRAPLEX",
        "string_process": "process ULTRAPLEX {\n    tag \"${meta.id}\"\n    label \"max_cores\"\n    label \"max_memory\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"bioconda::ultraplex=1.2.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ultraplex:1.2.5--py38h4a8c8d9_0' :\n        'quay.io/biocontainers/ultraplex:1.2.5--py38h4a8c8d9_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path(barcode_file)\n\n    output:\n    tuple val(meta), path(\"*[!no_match].fastq.gz\"),              emit: fastq\n    tuple val(meta), path(\"*no_match.fastq.gz\"), optional: true, emit: no_match_fastq\n    path \"*.log\",                                                emit: report\n    path \"versions.yml\",                                         emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def ultraplex_version = \"1.2.5\"\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    read_list = reads.collect{it.toString()}\n    if (read_list.size > 1){\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --input_2 ${read_list[1]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    } else {\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    }\n\n    \"\"\"\n    ${ultraplex_command}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ultraplex: $ultraplex_version\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def ultraplex_version = \"1.2.5\"\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    read_list = reads.collect{it.toString()}\n    if (read_list.size > 1){\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --input_2 ${read_list[1]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    } else {\n        ultraplex_command = \"\"\"ultraplex \\\\\n        --inputfastq ${read_list[0]} \\\\\n        --barcodes $barcode_file \\\\\n        --threads ${task.cpus} ${args}\"\"\"\n    }\n\n    \"\"\"\n    ${ultraplex_command}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ultraplex: $ultraplex_version\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "barcode_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"${meta.id}\"",
            "label \"max_cores\"",
            "label \"max_memory\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"bioconda::ultraplex=1.2.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ultraplex:1.2.5--py38h4a8c8d9_0' : 'quay.io/biocontainers/ultraplex:1.2.5--py38h4a8c8d9_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PARACLU_PARACLU": {
        "name_process": "PARACLU_PARACLU",
        "string_process": "process PARACLU_PARACLU {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1' :\n        'quay.io/biocontainers/paraclu:10--h9a82719_1' }\"\n\n    input:\n    tuple val(meta), path(crosslinks)\n\n    output:\n    tuple val(meta), path(\"*.sigxls.tsv.gz\"), emit: sigxls\n    path \"versions.yml\",                      emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paraclu_version = '10'\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$6, \\$2+1, \\$5}' | \\\n        sort -k1,1 -k2,2 -k3,3n > paraclu_input.tsv\n\n    paraclu \\\n        $args \\\n        paraclu_input.tsv | \\\n        gzip > ${prefix}.sigxls.tsv.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n        paraclu: $paraclu_version\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paraclu_version = '10'\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$6, \\$2+1, \\$5}' | \\\n        sort -k1,1 -k2,2 -k3,3n > paraclu_input.tsv\n\n    paraclu \\\n        $args \\\n        paraclu_input.tsv | \\\n        gzip > ${prefix}.sigxls.tsv.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n        paraclu: $paraclu_version\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1' : 'quay.io/biocontainers/paraclu:10--h9a82719_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CSV_TO_BARCODE": {
        "name_process": "CSV_TO_BARCODE",
        "string_process": "process CSV_TO_BARCODE {\n    tag \"$annotation\"\n    label 'process_low'\n\n    container \"quay.io/biocontainers/pandas:1.1.5\"\n\n    input:\n    path annotation\n\n    output:\n    path \"barcode.csv\", emit: csv\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n\n    from pandas import read_csv\n    from sys import exit\n\n    data = read_csv(\"$annotation\", dtype=str, keep_default_na=False)\n\n    five_prime = data[\"5' Barcode\"]\n    three_prime = data[\"3' Barcode (optional)\"]\n    sample_names = data[\"Sample Name\"]\n\n    barcode_dict = {}\n\n    for idx in range(len(five_prime)):\n        barcode_dict.setdefault(five_prime[idx], [])\n        barcode_dict[five_prime[idx]].append(\n            three_prime[idx] + \":\" + sample_names[idx]\n        )\n\n    with open(\"barcode.csv\", \"w\") as out_f:\n        for five, threes in barcode_dict.items():\n            if len(threes) > 1:\n                if any([three.startswith(\":\") for three in threes]):\n                    exit(\"5' barcode ambiguity between samples\")\n                out_f.write(\",\".join([five] + threes) + \"\\\\n\")\n            else:\n                if not threes[0].startswith(\":\"):\n                    threes[0] = \",\" + threes[0]\n                out_f.write(five + threes[0] + \"\\\\n\")\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n\n    from pandas import read_csv\n    from sys import exit\n\n    data = read_csv(\"$annotation\", dtype=str, keep_default_na=False)\n\n    five_prime = data[\"5' Barcode\"]\n    three_prime = data[\"3' Barcode (optional)\"]\n    sample_names = data[\"Sample Name\"]\n\n    barcode_dict = {}\n\n    for idx in range(len(five_prime)):\n        barcode_dict.setdefault(five_prime[idx], [])\n        barcode_dict[five_prime[idx]].append(\n            three_prime[idx] + \":\" + sample_names[idx]\n        )\n\n    with open(\"barcode.csv\", \"w\") as out_f:\n        for five, threes in barcode_dict.items():\n            if len(threes) > 1:\n                if any([three.startswith(\":\") for three in threes]):\n                    exit(\"5' barcode ambiguity between samples\")\n                out_f.write(\",\".join([five] + threes) + \"\\\\n\")\n            else:\n                if not threes[0].startswith(\":\"):\n                    threes[0] = \",\" + threes[0]\n                out_f.write(five + threes[0] + \"\\\\n\")\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$annotation\"",
            "label 'process_low'",
            "container \"quay.io/biocontainers/pandas:1.1.5\""
        ],
        "when": "",
        "stub": ""
    },
    "ICOUNT_SUMMARY": {
        "name_process": "ICOUNT_SUMMARY",
        "string_process": "\nprocess ICOUNT_SUMMARY {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:\"icount_summary\", meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0\"\n    } else {\n        container \"quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0\"\n    }\n\n    input:\n    tuple val(meta), path(bed)\n    path(segmentation)\n\n    output:\n    tuple val(meta), path(\"*summary_type.tsv\"), emit: summary_type\n    tuple val(meta), path(\"*summary_subtype.tsv\")  , emit: summary_subtype\n    tuple val(meta), path(\"*summary_gene.tsv\")  , emit: summary_gene\n    path \"*.version.txt\"                   , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount-Mini summary \\\\\n        $segmentation \\\\\n        $bed \\\\\n        . \\\\\n        $options.args\n    mv summary_type.tsv ${prefix}_summary_type.tsv\n    mv summary_subtype.tsv ${prefix}_summary_subtype.tsv\n    mv summary_gene.tsv ${prefix}_summary_gene.tsv\n    echo \\$(iCount-Mini -v) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount-Mini summary \\\\\n        $segmentation \\\\\n        $bed \\\\\n        . \\\\\n        $options.args\n    mv summary_type.tsv ${prefix}_summary_type.tsv\n    mv summary_subtype.tsv ${prefix}_summary_subtype.tsv\n    mv summary_gene.tsv ${prefix}_summary_gene.tsv\n    echo \\$(iCount-Mini -v) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "segmentation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:\"icount_summary\", meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0\" } else { container \"quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BOWTIE_BUILD": {
        "name_process": "BOWTIE_BUILD",
        "string_process": "process BOWTIE_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie=1.3.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bowtie:1.3.0--py38hed8969a_1' :\n        'quay.io/biocontainers/bowtie:1.3.0--py38hed8969a_1' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'bowtie'       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie\n    bowtie-build --threads $task.cpus $fasta bowtie/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie\n    bowtie-build --threads $task.cpus $fasta bowtie/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Bowtie"
        ],
        "tools_url": [
            "https://bio.tools/bowtie"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie=1.3.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bowtie:1.3.0--py38hed8969a_1' : 'quay.io/biocontainers/bowtie:1.3.0--py38hed8969a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CLIPPY": {
        "name_process": "CLIPPY",
        "string_process": "process CLIPPY {\n    tag \"$meta.id\"\n    label \"avg_cores\"\n    label \"high_mem\"\n    label \"regular_queue\"\n\n                                                                              \n                                                                               \n                                         \n    conda (params.enable_conda ? \"bioconda::clippy=1.3.3 conda-forge::werkzeug=2.0.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/clippy:1.3.3--pyhdfd78af_0' :\n        'quay.io/biocontainers/clippy:1.3.3--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(crosslinks)\n    path(gtf)\n    path(fai)\n\n    output:\n    tuple val(meta), path(\"*_Peaks.bed.gz\"),   emit: peaks\n    tuple val(meta), path(\"*_Summits.bed.gz\"), emit: summits\n    path \"versions.yml\",                       emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    clippy -i $crosslinks \\\n        -o $prefix \\\n        -a $gtf \\\n        -g $fai \\\n        -t ${task.cpus} \\\n        $args\n    gzip -n *_Peaks.bed\n    gzip -n *_Summits.bed\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        clippy: \\$(clippy -v)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    clippy -i $crosslinks \\\n        -o $prefix \\\n        -a $gtf \\\n        -g $fai \\\n        -t ${task.cpus} \\\n        $args\n    gzip -n *_Peaks.bed\n    gzip -n *_Summits.bed\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        clippy: \\$(clippy -v)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks",
            "gtf",
            "fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"avg_cores\"",
            "label \"high_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"bioconda::clippy=1.3.3 conda-forge::werkzeug=2.0.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/clippy:1.3.3--pyhdfd78af_0' : 'quay.io/biocontainers/clippy:1.3.3--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "process GUNZIP {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$gunzip\"), emit: gunzip\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RESOLVE_UNANNOTATED": {
        "name_process": "RESOLVE_UNANNOTATED",
        "string_process": "process RESOLVE_UNANNOTATED {\n    tag \"Resolving $filtered_segmentation and $unfiltered_segmentation\"\n    label \"process_medium\"\n    container \"quay.io/biocontainers/peka:0.1.4--pyhdfd78af_0\"\n\n    input:\n    path(filtered_segmentation)\n    path(unfiltered_segmentation), stageAs: \"filtered.regions.gtf.gz\"\n    path(gtf)\n    path(fai)\n\n    output:\n    path \"*.gtf\", emit: annotated_gtf\n    \n    script:\n    template 'ResolveUnannotated.py'\n}",
        "nb_lignes_process": 15,
        "string_script": "    template 'ResolveUnannotated.py'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "filtered_segmentation",
            "unfiltered_segmentation",
            "gtf",
            "fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"Resolving $filtered_segmentation and $unfiltered_segmentation\"",
            "label \"process_medium\"",
            "container \"quay.io/biocontainers/peka:0.1.4--pyhdfd78af_0\""
        ],
        "when": "",
        "stub": ""
    },
    "PARACLU_CONVERT": {
        "name_process": "PARACLU_CONVERT",
        "string_process": "process PARACLU_CONVERT {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(peaks)\n\n    output:\n    tuple val(meta), path(\"*.peaks.bed.gz\"), emit: peaks\n    path \"versions.yml\",                     emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gzip -d -c $peaks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$3-1, \\$4, \".\", \\$6, \\$2}' |\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.peaks.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gzip -d -c $peaks | \\\n        awk '{OFS = \"\\t\"}{print \\$1, \\$3-1, \\$4, \".\", \\$6, \\$2}' |\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.peaks.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "peaks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PARACLU_CUT": {
        "name_process": "PARACLU_CUT",
        "string_process": "process PARACLU_CUT {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1' :\n        'quay.io/biocontainers/paraclu:10--h9a82719_1' }\"\n\n    input:\n    tuple val(meta), path(sigxls)\n\n    output:\n    tuple val(meta), path(\"*.peaks.tsv.gz\"), emit: peaks\n    path \"versions.yml\",                     emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paraclu_version = '10'\n    \"\"\"\n    gzip -d -c $sigxls | \\\n        paraclu-cut \\\n        $args | \\\n        gzip > ${prefix}.peaks.tsv.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n        paraclu: $paraclu_version\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paraclu_version = '10'\n    \"\"\"\n    gzip -d -c $sigxls | \\\n        paraclu-cut \\\n        $args | \\\n        gzip > ${prefix}.peaks.tsv.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n        paraclu: $paraclu_version\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "sigxls"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1' : 'quay.io/biocontainers/paraclu:10--h9a82719_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "STAR_GENOMEGENERATE": {
        "name_process": "STAR_GENOMEGENERATE",
        "string_process": "process STAR_GENOMEGENERATE {\n    tag \"$fasta\"\n    label 'process_high'\n\n                                                         \n    conda (params.enable_conda ? \"bioconda::star=2.7.9a bioconda::samtools=1.15.1 conda-forge::gawk=5.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' :\n        'quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' }\"\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"star\"         , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args_list = args.tokenize()\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    if (args_list.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 67,
        "string_script": "    def args = task.ext.args ?: ''\n    def args_list = args.tokenize()\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    if (args_list.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::star=2.7.9a bioconda::samtools=1.15.1 conda-forge::gawk=5.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' : 'quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE_ALIGN": {
        "name_process": "BOWTIE_ALIGN",
        "string_process": "process BOWTIE_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie=1.3.0 bioconda::samtools=1.15.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' :\n        'quay.io/biocontainers/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path('*.bam'), emit: bam\n    tuple val(meta), path('*.out'), emit: log\n    path  \"versions.yml\"          , emit: versions\n    tuple val(meta), path('*fastq.gz'), optional:true, emit: fastq\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def unaligned = params.save_unaligned ? \"--un ${prefix}.unmapped.fastq\" : ''\n    def endedness = meta.single_end ? \"$reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.3.ebwt\" | sed 's/.3.ebwt//'`\n    bowtie \\\\\n        --threads $task.cpus \\\\\n        --sam \\\\\n        -x \\$INDEX \\\\\n        -q \\\\\n        $unaligned \\\\\n        $args \\\\\n        $endedness \\\\\n        2> ${prefix}.out \\\\\n        | samtools view $args2 -@ $task.cpus -bS -o ${prefix}.bam -\n\n    if [ -f ${prefix}.unmapped.fastq ]; then\n        gzip ${prefix}.unmapped.fastq\n    fi\n    if [ -f ${prefix}.unmapped_1.fastq ]; then\n        gzip ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def unaligned = params.save_unaligned ? \"--un ${prefix}.unmapped.fastq\" : ''\n    def endedness = meta.single_end ? \"$reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.3.ebwt\" | sed 's/.3.ebwt//'`\n    bowtie \\\\\n        --threads $task.cpus \\\\\n        --sam \\\\\n        -x \\$INDEX \\\\\n        -q \\\\\n        $unaligned \\\\\n        $args \\\\\n        $endedness \\\\\n        2> ${prefix}.out \\\\\n        | samtools view $args2 -@ $task.cpus -bS -o ${prefix}.bam -\n\n    if [ -f ${prefix}.unmapped.fastq ]; then\n        gzip ${prefix}.unmapped.fastq\n    fi\n    if [ -f ${prefix}.unmapped_1.fastq ]; then\n        gzip ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "Bowtie",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bowtie",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie=1.3.0 bioconda::samtools=1.15.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' : 'quay.io/biocontainers/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STAR_ALIGN": {
        "name_process": "STAR_ALIGN",
        "string_process": "process STAR_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n                                                         \n    conda (params.enable_conda ? 'bioconda::star=2.7.9a' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/star:2.7.9a--h9ee0642_0' :\n        'quay.io/biocontainers/star:2.7.9a--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n    val star_ignore_sjdbgtf\n    val seq_platform\n    val seq_center\n\n    output:\n    tuple val(meta), path('*d.out.bam')       , emit: bam\n    tuple val(meta), path('*Log.final.out')   , emit: log_final\n    tuple val(meta), path('*Log.out')         , emit: log_out\n    tuple val(meta), path('*Log.progress.out'), emit: log_progress\n    path  \"versions.yml\"                      , emit: versions\n\n    tuple val(meta), path('*sortedByCoord.out.bam')  , optional:true, emit: bam_sorted\n    tuple val(meta), path('*toTranscriptome.out.bam'), optional:true, emit: bam_transcript\n    tuple val(meta), path('*Aligned.unsort.out.bam') , optional:true, emit: bam_unsorted\n    tuple val(meta), path('*fastq.gz')               , optional:true, emit: fastq\n    tuple val(meta), path('*.tab')                   , optional:true, emit: tab\n    tuple val(meta), path('*.out.junction')          , optional:true, emit: junction\n    tuple val(meta), path('*.out.sam')               , optional:true, emit: sam\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def ignore_gtf      = star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_platform    = seq_platform ? \"'PL:$seq_platform'\" : \"\"\n    def seq_center      = seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$seq_center' 'SM:$prefix' $seq_platform \" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix' $seq_platform \"\n    def out_sam_type    = (args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def ignore_gtf      = star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_platform    = seq_platform ? \"'PL:$seq_platform'\" : \"\"\n    def seq_center      = seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$seq_center' 'SM:$prefix' $seq_platform \" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix' $seq_platform \"\n    def out_sam_type    = (args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf",
            "star_ignore_sjdbgtf",
            "seq_platform",
            "seq_center"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::star=2.7.9a' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/star:2.7.9a--h9ee0642_0' : 'quay.io/biocontainers/star:2.7.9a--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CROSSLINKS_NORMCOVERAGE": {
        "name_process": "CROSSLINKS_NORMCOVERAGE",
        "string_process": "process CROSSLINKS_NORMCOVERAGE {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(crosslinks)\n\n    output:\n    tuple val(meta), path(\"$prefix*.bedgraph.gz\"), emit: bedgraph\n    path \"versions.yml\",                           emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    TOTAL=`gunzip -c $crosslinks | awk 'BEGIN {total=0} {total=total+\\$5} END {print total}'`\n\n    gzip -d -c $crosslinks | \\\n        awk -v total=\\$TOTAL '{printf \"%s\\\\t%i\\\\t%i\\\\t%s\\\\t%f\\\\t%s\\\\n\", \\$1, \\$2, \\$3, \\$4, 1000000*\\$5/total, \\$6}' | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.norm.bedgraph.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    TOTAL=`gunzip -c $crosslinks | awk 'BEGIN {total=0} {total=total+\\$5} END {print total}'`\n\n    gzip -d -c $crosslinks | \\\n        awk -v total=\\$TOTAL '{printf \"%s\\\\t%i\\\\t%i\\\\t%s\\\\t%f\\\\t%s\\\\n\", \\$1, \\$2, \\$3, \\$4, 1000000*\\$5/total, \\$6}' | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        sort -k1,1 -k2,2n | \\\n        gzip > ${prefix}.norm.bedgraph.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CROSSLINKS_COVERAGE": {
        "name_process": "CROSSLINKS_COVERAGE",
        "string_process": "process CROSSLINKS_COVERAGE {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(crosslinks)\n\n    output:\n    tuple val(meta), path(\"$prefix*.bedgraph.gz\"), emit: bedgraph\n    path \"versions.yml\",                           emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        gzip > ${prefix}.bedgraph.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gzip -d -c $crosslinks | \\\n        awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n        gzip > ${prefix}.bedgraph.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ICOUNT_RNAMAPS": {
        "name_process": "ICOUNT_RNAMAPS",
        "string_process": "\nprocess ICOUNT_RNAMAPS {\n    tag \"$meta.id\"\n    label \"low_cores\"\n    label \"low_mem\"\n    label \"regular_queue\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:\"icount_rnamaps\", meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0\"\n    } else {\n        container \"quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0\"\n    }\n\n    input:\n    tuple val(meta), path(bed)\n    path(segmentation)\n\n    output:\n    tuple val(meta), path(\"rnamaps*\"), emit: rnamaps\n    path \"*.version.txt\"                   , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount-Mini rnamaps \\\\\n        $bed \\\\\n        $segmentation \\\\\n        $options.args\n    echo \\$(iCount-Mini -v) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    iCount-Mini rnamaps \\\\\n        $bed \\\\\n        $segmentation \\\\\n        $options.args\n    echo \\$(iCount-Mini -v) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "segmentation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label \"low_cores\"",
            "label \"low_mem\"",
            "label \"regular_queue\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:\"icount_rnamaps\", meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::icount-mini=2.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/icount-mini:2.0.3--pyh5e36f6f_0\" } else { container \"quay.io/biocontainers/icount-mini:2.0.3--pyh5e36f6f_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_FAIDX": {
        "name_process": "SAMTOOLS_FAIDX",
        "string_process": "process SAMTOOLS_FAIDX {\n    tag \"$fasta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path (\"*.fai\"), emit: fai\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${fasta}.fai\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "pyfaidx"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/pyfaidx"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pyfaidx",
                "uri": "https://bio.tools/pyfaidx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This python module implements pure Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index.",
                "homepage": "https://pythonhosted.org/pyfaidx/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${fasta}.fai\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": "process TRIMGALORE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::trim-galore=0.6.7' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/trim-galore:0.6.7--hdfd78af_0' :\n        'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fq.gz\")    , emit: reads\n    tuple val(meta), path(\"*report.txt\"), emit: log\n    path \"versions.yml\"                 , emit: versions\n\n    tuple val(meta), path(\"*.html\"), emit: html optional true\n    tuple val(meta), path(\"*.zip\") , emit: zip optional true\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 81,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 57,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goodwright__imaps-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::trim-galore=0.6.7' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/trim-galore:0.6.7--hdfd78af_0' : 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    }
}
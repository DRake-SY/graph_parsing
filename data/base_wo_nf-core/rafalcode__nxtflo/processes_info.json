{
    "foo": {
        "name_process": "foo",
        "string_process": "\nprocess foo {\n  input:\n  file x from samples_ch\n  output:\n  file 'file.fq' into unzipped_ch\n  script:\n  \"\"\"\n  < $x zcat > file.fq\n  \"\"\"\n\n          \n                          \n                                                                            \n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  < $x zcat > file.fq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samples_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "unzipped_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "rafalcode__nxtflo",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "blastSearch": {
        "name_process": "blastSearch",
        "string_process": "\nprocess blastSearch {\n    input:\n    file query from query_ch\n                                                                    \n                                                      \n                      \n                                                               \n              \n\n    output:\n    file \"top_hits.txt\" into top_hits_ch\n\n    \"\"\"\n    blastp -db $db -query $query -outfmt 6 > blast_result\n    cat blast_result | head -n 10 | cut -f 2 > top_hits.txt\n    \"\"\"\n                                                                         \n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    blastp -db $db -query $query -outfmt 6 > blast_result\n    cat blast_result | head -n 10 | cut -f 2 > top_hits.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "query_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "top_hits_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "rafalcode__nxtflo",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "extractTopHits": {
        "name_process": "extractTopHits",
        "string_process": "\nprocess extractTopHits {\n    input:\n    file top_hits from top_hits_ch\n\n    output:\n    file \"sequences.txt\" into sequences_ch\n\n    \"\"\"\n    blastdbcmd -db $db -entry_batch $top_hits > sequences.txt\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n    blastdbcmd -db $db -entry_batch $top_hits > sequences.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "top_hits_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sequences_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "rafalcode__nxtflo",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "splitLetters": {
        "name_process": "splitLetters",
        "string_process": "\nprocess splitLetters {\n\n    output:\n                                                  \n    file 'chunk_*' into chunkfiles\n\n    \"\"\"\n    printf '${params.str}' | split -b 6 - chunk_\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    printf '${params.str}' | split -b 6 - chunk_\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "chunkfiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "rafalcode__nxtflo",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "convertToUpper": {
        "name_process": "convertToUpper",
        "string_process": "\nprocess convertToUpper {\n    input:\n    file x from chunkfiles.flatten()\n\n                                                      \n                                                             \n                                              \n\n    output:\n    stdout resultvar\n                                                             \n\n    \"\"\"\n    echo -n \"nxf internal file $x: \"\n    cat $x | tr '[a-z]' '[A-Z]'\n    \"\"\"\n                                                                    \n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    echo -n \"nxf internal file $x: \"\n    cat $x | tr '[a-z]' '[A-Z]'\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chunkfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "resultvar"
        ],
        "nb_outputs": 1,
        "name_workflow": "rafalcode__nxtflo",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
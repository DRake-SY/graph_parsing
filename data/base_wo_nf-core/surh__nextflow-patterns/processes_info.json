{
    "id_from_file_pair": {
        "name_process": "id_from_file_pair",
        "string_process": "\nprocess id_from_file_pair{\n\n input:\n tuple id, files from CH\n\n exec:\n println \"======\"\n println id\n println files[0]\n println files[1]\n println \"======\"\n}",
        "nb_lignes_process": 11,
        "string_script": " println \"======\"\n println id\n println files[0]\n println files[1]\n println \"======\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CH"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "surh__nextflow-patterns",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "native_and_script": {
        "name_process": "native_and_script",
        "string_process": "process native_and_script{\n  publishDir \"output\",\n    saveAs: {\"${num}.txt\"}\n\n  input:\n  val num from Channel.from(1,2,3,4)\n  \n  output:\n  path \".command.out\"\n\n  exec:\n  println num\n  num2 = num + 1\n\n  script:\n  \"\"\"\n  echo \"Number: $num, Number + 1 = $num2\"\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  println num\n  num2 = num + 1\n\n  script:\n  \"\"\"\n  echo \"Number: $num, Number + 1 = $num2\"\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "surh__nextflow-patterns",
        "directive": [
            "publishDir \"output\" , saveAs: {\"${num}.txt\"}"
        ],
        "when": "",
        "stub": ""
    },
    "flag_param": {
        "name_process": "flag_param",
        "string_process": "\nprocess flag_param{\n  input:\n  val flag from Channel.from(params.flag)\n\n  exec:\n  println \"======$flag======\"\n}",
        "nb_lignes_process": 6,
        "string_script": "  println \"======$flag======\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "surh__nextflow-patterns",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "publish_subdir": {
        "name_process": "publish_subdir",
        "string_process": "\nprocess publish_subdir{\n  publishDir 'output',\n    pattern: 'dir/subdir',\n    saveAs: {\"$x\"}\n\n  input:\n  val x from Channel.from(\"a\", \"b\", \"c\")\n  \n  output:\n  path \"dir/subdir\"\n\n  \"\"\"\n  mkdir dir\n  mkdir dir/subdir\n  touch dir/subdir/$x\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  mkdir dir\n  mkdir dir/subdir\n  touch dir/subdir/$x\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "surh__nextflow-patterns",
        "directive": [
            "publishDir 'output' , pattern: 'dir/subdir' , saveAs: {\"$x\"}"
        ],
        "when": "",
        "stub": ""
    },
    "p1": {
        "name_process": "p1",
        "string_process": "\nprocess p1{\n    input:\n    val line from IN\n\n    output:\n    tuple n_cols, new_str into OUT\n\n    exec:\n    cols = line.split(\"\\t\")\n    n_cols = cols.size()\n    new_str = 'n_cols: ' + n_cols + \"\\t\" +\n        cols[2] + ':' + cols[1] + ':' + cols[0]\n\n}",
        "nb_lignes_process": 13,
        "string_script": "    cols = line.split(\"\\t\")\n    n_cols = cols.size()\n    new_str = 'n_cols: ' + n_cols + \"\\t\" +\n        cols[2] + ':' + cols[1] + ':' + cols[0]",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "IN"
        ],
        "nb_inputs": 1,
        "outputs": [
            "OUT"
        ],
        "nb_outputs": 1,
        "name_workflow": "surh__nextflow-patterns",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "stage_files": {
        "name_process": "stage_files",
        "string_process": "\nprocess stage_files{\n  publishDir \"output\"\n\n  input:\n  tuple id, file(\"in*.txt\") from FILES\n\n  output:\n  file \"${id}_final.txt\"\n\n  \"\"\"\n  cat *.txt > ${id}_final.txt\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n  cat *.txt > ${id}_final.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "FILES"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "surh__nextflow-patterns",
        "directive": [
            "publishDir \"output\""
        ],
        "when": "",
        "stub": ""
    }
}
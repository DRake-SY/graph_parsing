{
    "downloadMotifs": {
        "name_process": "downloadMotifs",
        "string_process": "process downloadMotifs {\n\n    cpus 1\n    memory 1.GB\n\n    publishDir params.outdir, mode: 'copy'\n\n    input:\n    val(url)\n\n    output:\n    path(\"*.motif\"), emit: motifs\n\n    script:\n    \"\"\"\n    wget -q $url\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    wget -q $url\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "url"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__nf_findMotifs",
        "directive": [
            "cpus 1",
            "memory 1.GB",
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "findMotifs": {
        "name_process": "findMotifs",
        "string_process": "process findMotifs {\n\n    tag \"$sample_id\"\n\n    cpus   params.threads\n    memory params.mem\n    \n    publishDir params.outdir, mode: 'move'\n\n    if(workflow.profile.contains('conda'))  { conda \"$params.environment\" }\n    if(workflow.profile.contains('docker')) { container \"$params.container\" }\n    if(workflow.profile.contains('singularity')) { container \"$params.container\" }\n\n    input:\n    tuple val(sample_id), path(foreground), path(background)\n    path(motifs_reference)\n\n    output:\n    path(foldername)\n    path(\"${foldername}_findMotifs.sh\")\n    path(\"${foldername}_findMotifs.log\")\n\n    script:\n    n1 = [foreground].join(\"\").split(\"\\\\.\")[0]\n    n2 = [background].join(\"\").split(\"\\\\.\")[0]\n    foldername = [n1, n2].join('__vs__')\n    \n    \"\"\"\n    findMotifs.pl \\\n        $foreground fasta $foldername -fasta $background \\\n        -mcheck $motifs_reference -mknown $motifs_reference \\\n        -p $task.cpus $params.additional\n\n    #/ publish command and log into the findMotifs.pl output folders:\n    cat .command.sh > ${foldername}_findMotifs.sh\n    cat .command.log > ${foldername}_findMotifs.log\n\n    #/ return no software version as findMotifs.pl has no flag for that, check env.yml/container for it\n    #/ currently it is 4.11\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 41,
        "string_script": "    n1 = [foreground].join(\"\").split(\"\\\\.\")[0]\n    n2 = [background].join(\"\").split(\"\\\\.\")[0]\n    foldername = [n1, n2].join('__vs__')\n    \n    \"\"\"\n    findMotifs.pl \\\n        $foreground fasta $foldername -fasta $background \\\n        -mcheck $motifs_reference -mknown $motifs_reference \\\n        -p $task.cpus $params.additional\n\n    #/ publish command and log into the findMotifs.pl output folders:\n    cat .command.sh > ${foldername}_findMotifs.sh\n    cat .command.log > ${foldername}_findMotifs.log\n\n    #/ return no software version as findMotifs.pl has no flag for that, check env.yml/container for it\n    #/ currently it is 4.11\n\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "SCN1A",
            "GARN2"
        ],
        "tools_url": [
            "https://bio.tools/SCN1A",
            "https://bio.tools/garn"
        ],
        "tools_dico": [
            {
                "name": "SCN1A",
                "uri": "https://bio.tools/SCN1A",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3304",
                            "term": "Neurobiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3334",
                            "term": "Neurology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3334",
                            "term": "https://en.wikipedia.org/wiki/Neurology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0331",
                                    "term": "Variant effect prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0331",
                                    "term": "Variant functional prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "individualizing for genes with molecular sub-regional stratification.\n\nThis database collects SCN1A mutations identified in patients with epilepsies and other neurological diseases, based mostly on reviewing published literature. We welcome information on SCN1A mutations from other sources.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Optimization silico tools predicting genetic variants'",
                "homepage": "http://www.caae.org.cn/gzneurosci/scn1adatabase/index.php"
            },
            {
                "name": "GARN2",
                "uri": "https://bio.tools/garn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2441",
                                    "term": "RNA structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Coarse-grained prediction of 3D structure of large RNA molecules by regret minimization.",
                "homepage": "http://garn.lri.fr/"
            }
        ],
        "inputs": [
            "sample_id",
            "foreground",
            "background",
            "motifs_reference"
        ],
        "nb_inputs": 4,
        "outputs": [
            "foldername"
        ],
        "nb_outputs": 1,
        "name_workflow": "ATpoint__nf_findMotifs",
        "directive": [
            "tag \"$sample_id\"",
            "cpus params.threads",
            "memory params.mem",
            "publishDir params.outdir, mode: 'move' if(workflow.profile.contains('conda')) { conda \"$params.environment\" } if(workflow.profile.contains('docker')) { container \"$params.container\" } if(workflow.profile.contains('singularity')) { container \"$params.container\" }"
        ],
        "when": "",
        "stub": ""
    }
}
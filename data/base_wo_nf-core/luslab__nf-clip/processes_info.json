{
    "star": {
        "name_process": "star",
        "string_process": "\nprocess star {\n    tag \"${sample_id}\"\n\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(reads), path(star_index)\n\n    output:\n      tuple val(sample_id), path(\"*Aligned.*.out.*\"), emit: bamFiles\n      tuple val(sample_id), path(\"*SJ.out.tab\"), emit: sjFiles\n      tuple val(sample_id), path(\"*Log.final.out\"), emit: finalLogFiles\n      tuple val(sample_id), path(\"*Log.out\"), emit: outLogFiles\n      tuple val(sample_id), path(\"*Log.progress.out\"), emit: progressLogFiles\n      path \"*Log.final.out\", emit: report\n\n    shell:\n    \n                             \n    star_args = ''\n    star_args += \"--genomeDir $star_index \"\n    star_args += \"--readFilesIn $reads \"\n\n                                                            \n    star_args += \"$params.internal_custom_args \"\n\n                                                \n    output_prefix = reads.simpleName\n\n                             \n    avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    avail_mem += task.memory ? \" --limitBAMsortRAM ${task.memory.toBytes() - 100000000}\" : ''\n    \n    \"\"\"\n    STAR $star_args --runThreadN ${task.cpus} --outFileNamePrefix ${output_prefix}. $avail_mem\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    star_args = ''\n    star_args += \"--genomeDir $star_index \"\n    star_args += \"--readFilesIn $reads \"\n\n                                                            \n    star_args += \"$params.internal_custom_args \"\n\n                                                \n    output_prefix = reads.simpleName\n\n                             \n    avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    avail_mem += task.memory ? \" --limitBAMsortRAM ${task.memory.toBytes() - 100000000}\" : ''\n    \n    \"\"\"\n    STAR $star_args --runThreadN ${task.cpus} --outFileNamePrefix ${output_prefix}. $avail_mem\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "star_index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "tag \"${sample_id}\"",
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "umi_tools": {
        "name_process": "umi_tools",
        "string_process": "\nprocess umi_tools {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(bai), path(bam)\n       \n    output:\n      tuple val(sample_id), path(bam), emit: dedupBam\n\n    script:\n    \"\"\"\n    fileName=`basename $bam`\n    sampleName=\"\\${fileName%.Aligned.sortedByCoord.out.bam}\"\n    umi_tools dedup --umi-separator=\":\" -I $bam -S \\${sampleName}.dedup.bam --output-stats=\\${sampleName}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    fileName=`basename $bam`\n    sampleName=\"\\${fileName%.Aligned.sortedByCoord.out.bam}\"\n    umi_tools dedup --umi-separator=\":\" -I $bam -S \\${sampleName}.dedup.bam --output-stats=\\${sampleName}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "bai",
            "bam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "paraclu": {
        "name_process": "paraclu",
        "string_process": "\nprocess paraclu {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(crosslinks)\n\n    output:\n      tuple val(sample_id), path(\"*_peaks.bed.gz\"), emit: peaks\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n\n    import pandas as pd\n    from subprocess import call\n    import sys\n    import os\n\n    file_in = \"${crosslinks}\"\n    print(file_in)\n    #file_in_name = file_in.name\n    #print(file_in_name)\n\n    if file_in.endswith('.gz'):\n      file_out = file_in.replace('.bed', '_peaks.bed')\n    else:\n      file_out = file_in.replace('.bed', '_peaks.bed.gz')\n    \n    df_in = pd.read_csv(file_in,\n                        names = [\"chrom\", \"start\", \"end\", \"name\", \"score\", \"strand\"],\n                        header=None, sep='\\t')\n\n    df_out = df_in[['chrom', 'strand', 'start', 'score']]\n\n    df_out.sort_values(['chrom', 'strand', 'start'], ascending=[True, True, True], inplace=True)\n\n    paraclu_input = file_in + '.paraclu_input'\n    paraclu_output = file_in + '.paraclu_output'\n\n    df_out.to_csv(paraclu_input, sep='\\t', header=None, index=None)\n\n    call(f'paraclu ${params.internal_min_value} \"{paraclu_input}\" | paraclu-cut.sh -l ${params.internal_max_cluster_length} -d ${params.internal_min_density_increase} > \"{paraclu_output}\"', shell=True)\n    df_in = pd.read_csv(paraclu_output,\n                        names = [\"sequence_name\", \"strand\",\"start\", \"end\", \"number_of_positions\",\n                                \"sum_of_data_values\", \"min_density\", \"max_density\"],\n                        header=None, sep='\\t')\n    df_in['fourth_column'] = '.'\n    df_out = df_in[['sequence_name', 'start', 'end', 'fourth_column', 'sum_of_data_values', 'strand']]\n    df_out.sort_values(['sequence_name','start', 'end', 'strand'],\n                      ascending=[True, True, True, True], inplace=True)\n    df_out.to_csv(file_out, sep='\\t', header=None, index=None)\n    call(f'rm \"{paraclu_input}\"', shell=True)\n    call(f'rm  \"{paraclu_output}\"', shell=True)\n\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n\n    import pandas as pd\n    from subprocess import call\n    import sys\n    import os\n\n    file_in = \"${crosslinks}\"\n    print(file_in)\n    #file_in_name = file_in.name\n    #print(file_in_name)\n\n    if file_in.endswith('.gz'):\n      file_out = file_in.replace('.bed', '_peaks.bed')\n    else:\n      file_out = file_in.replace('.bed', '_peaks.bed.gz')\n    \n    df_in = pd.read_csv(file_in,\n                        names = [\"chrom\", \"start\", \"end\", \"name\", \"score\", \"strand\"],\n                        header=None, sep='\\t')\n\n    df_out = df_in[['chrom', 'strand', 'start', 'score']]\n\n    df_out.sort_values(['chrom', 'strand', 'start'], ascending=[True, True, True], inplace=True)\n\n    paraclu_input = file_in + '.paraclu_input'\n    paraclu_output = file_in + '.paraclu_output'\n\n    df_out.to_csv(paraclu_input, sep='\\t', header=None, index=None)\n\n    call(f'paraclu ${params.internal_min_value} \"{paraclu_input}\" | paraclu-cut.sh -l ${params.internal_max_cluster_length} -d ${params.internal_min_density_increase} > \"{paraclu_output}\"', shell=True)\n    df_in = pd.read_csv(paraclu_output,\n                        names = [\"sequence_name\", \"strand\",\"start\", \"end\", \"number_of_positions\",\n                                \"sum_of_data_values\", \"min_density\", \"max_density\"],\n                        header=None, sep='\\t')\n    df_in['fourth_column'] = '.'\n    df_out = df_in[['sequence_name', 'start', 'end', 'fourth_column', 'sum_of_data_values', 'strand']]\n    df_out.sort_values(['sequence_name','start', 'end', 'strand'],\n                      ascending=[True, True, True, True], inplace=True)\n    df_out.to_csv(file_out, sep='\\t', header=None, index=None)\n    call(f'rm \"{paraclu_input}\"', shell=True)\n    call(f'rm  \"{paraclu_output}\"', shell=True)\n\n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "crosslinks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie_rrna": {
        "name_process": "bowtie_rrna",
        "string_process": "\nprocess bowtie_rrna {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n        tuple val(sample_id), path(reads), path(bowtie_index)\n\n    output:\n        tuple val(sample_id), path(\"${sample_id}.sorted.bam\"), emit: rrnaBam\n        tuple val(sample_id), path(\"${sample_id}.unaligned.fq\"), emit: unmappedFq\n        path \"${sample_id}.bowtie.log\", emit: report\n\n    shell:\n                                                                                             \n    \"\"\"\n    gunzip -c $reads | \\\n    bowtie -v 2 -m 1 --best --strata --threads ${task.cpus} -q --sam --norc --un ${sample_id}.unaligned.fq ${bowtie_index}/small_rna_bowtie - 2> ${sample_id}.bowtie.log | \\\n    samtools view -hu -F 4 - | \\\n    sambamba sort -t ${task.cpus} -o ${sample_id}.sorted.bam /dev/stdin\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    gunzip -c $reads | \\\n    bowtie -v 2 -m 1 --best --strata --threads ${task.cpus} -q --sam --norc --un ${sample_id}.unaligned.fq ${bowtie_index}/small_rna_bowtie - 2> ${sample_id}.bowtie.log | \\\n    samtools view -hu -F 4 - | \\\n    sambamba sort -t ${task.cpus} -o ${sample_id}.sorted.bam /dev/stdin\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Bowtie",
            "SAMtools",
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/bowtie",
            "https://bio.tools/samtools",
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "bowtie_index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "cutadapt": {
        "name_process": "cutadapt",
        "string_process": "\nprocess cutadapt {\n    tag \"${sample_id}\"\n\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n        tuple val(sample_id), path(reads)\n\n    output:\n        tuple val(sample_id), path(\"${sample_id}.trimmed.fq.gz\"), emit: trimmedReads\n        path \"*.txt\", emit: report\n\n    shell:\n    \n                                 \n    if (params.internal_custom_args == null){\n        cutadapt_args = ''\n    }else {\n        cutadapt_args = \"$params.internal_custom_args \"\n    }\n    \n\n                                \n    if (params.internal_quiet){\n        cutadapt_args += \"--quiet \"\n    }\n    if (0 < params.internal_gc_content << 100){\n        cutadapt_args += \"--gc-content=$params.internal_gc_content \"\n    }\n    if (params.internal_info_file != ''){\n        cutadapt_args += \"--info-file $params.internal_info_file \"\n    }\n    if (params.internal_min_report){\n        cutadapt_args += \"--report=minimal \"\n    }\n\n                                     \n    if (params.internal_min_quality > 0){\n        cutadapt_args += \"-q $params.internal_min_quality \"\n    }\n    if (params.internal_no_indels){\n        cutadapt_args += \"--no-indels \"\n    }\n    if (params.internal_max_error_rate > 0){\n        cutadapt_args += \"-e $params.internal_max_error_rate \"\n    }\n    if (params.internal_min_overlap > 0){\n        cutadapt_args += \"-0 ${params.internal_min_overlap} \"\n    }\n    if (params.internal_cut != 0){\n        cutadapt_args += \"-u $params.internal_cut \"\n    }\n\n                                                       \n    if (params.internal_multiple_adapters == false){\n                                        \n        if (params.internal_3_trim){\n            cutadapt_args += \"-a $params.internal_adapter_sequence \"\n        }\n        if (params.internal_5_trim){\n            cutadapt_args += \"-g $params.internal_adapter_sequence \"\n        }\n        if (params.internal_3_or_5_trim){\n            cutadapt_args += \"-b $params.internal_adapter_sequence \"\n        }\n        if (params.internal_non_intern_3_trim){\n        X = \"X\"\n            cutadapt_args += \"-a $params.internal_adapter_sequence$X \"\n        }\n        if (params.internal_non_intern_5_trim){\n            cutadapt_args += \"-g X$params.internal_adapter_sequence \"\n        }\n        if (params.internal_anchor_3_trim){\n            cutadapt_args += \"-a $params.internal_adapter_sequence\\$ \"\n        }\n        if (params.internal_anchor_5_trim){\n            cutadapt_args += \"-g ^$params.internal_adapter_sequence \"\n        }\n    }else {\n        if (params.internal_3_trim_multiple){\n            cutadapt_args += \"-a file:$params.internal_multi_adapt_fasta \"\n        }\n        if (params.internal_5_trim_multiple){\n            cutadapt_args += \"-g file:$params.internal_multi_adapt_fasta \"\n        }\n        if (params.internal_3_or_5_trim_multiple){\n            cutadapt_args += \"-b file:$params.internal_multi_adapt_fasta \"\n        }\n    } \n\n                      \n    if (params.internal_min_length > 0){\n        cutadapt_args += \"-m $params.internal_min_length \"\n    }\n    if (params.internal_max_length != 0){\n        cutadapt_args += \"-M $params.internal_max_length \"\n    }\n    if (params.internal_discard_trimmed){\n        cutadapt_args += \"--discard-trimmed \"\n    }\n    if (params.internal_discard_untrimmed){\n        cutadapt_args += \"--discard-untrimmed \"\n    }\n    if (params.internal_too_short_output != ''){\n        cutadapt_args += \"--too-short-output $params.internal_too_short_output \"\n    }\n    if (params.internal_too_long_output != ''){\n        cutadapt_args += \"--too-long-output $params.internal_too_long_output \"\n    }\n    if (params.internal_untrimmed_output != ''){\n        cutadapt_args += \"--untrimmed-output $params.internal_untrimmed_output \"\n    }\n    if (params.internal_max_n_bases != 0){\n        cutadapt_args += \"--max-n $params.internal_max_n_bases \"\n    }\n    if (params.internal_max_expected_errors != 0){\n        cutadapt_args += \"--max-expected-errors $params.internal_max_expected_errors \"\n    }\n    if (params.internal_discard_casava){\n        cutadapt_args += \"--discard-casava $params.internal_discard_casava \"\n    }\n\n                        \n    cutadapt_args += \"-o ${sample_id}.trimmed.fq.gz \"\n\n                                                                                 \n    if (params.internal_paired_end_mode){\n        internal_default_paired_end_args += \"-p ${sample_id}.trimmed.fq.gz \"\n    }\n\n    \"\"\"\n    cutadapt $cutadapt_args $reads > ${sample_id}_${params.internal_process_name}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 134,
        "string_script": "    if (params.internal_custom_args == null){\n        cutadapt_args = ''\n    }else {\n        cutadapt_args = \"$params.internal_custom_args \"\n    }\n    \n\n                                \n    if (params.internal_quiet){\n        cutadapt_args += \"--quiet \"\n    }\n    if (0 < params.internal_gc_content << 100){\n        cutadapt_args += \"--gc-content=$params.internal_gc_content \"\n    }\n    if (params.internal_info_file != ''){\n        cutadapt_args += \"--info-file $params.internal_info_file \"\n    }\n    if (params.internal_min_report){\n        cutadapt_args += \"--report=minimal \"\n    }\n\n                                     \n    if (params.internal_min_quality > 0){\n        cutadapt_args += \"-q $params.internal_min_quality \"\n    }\n    if (params.internal_no_indels){\n        cutadapt_args += \"--no-indels \"\n    }\n    if (params.internal_max_error_rate > 0){\n        cutadapt_args += \"-e $params.internal_max_error_rate \"\n    }\n    if (params.internal_min_overlap > 0){\n        cutadapt_args += \"-0 ${params.internal_min_overlap} \"\n    }\n    if (params.internal_cut != 0){\n        cutadapt_args += \"-u $params.internal_cut \"\n    }\n\n                                                       \n    if (params.internal_multiple_adapters == false){\n                                        \n        if (params.internal_3_trim){\n            cutadapt_args += \"-a $params.internal_adapter_sequence \"\n        }\n        if (params.internal_5_trim){\n            cutadapt_args += \"-g $params.internal_adapter_sequence \"\n        }\n        if (params.internal_3_or_5_trim){\n            cutadapt_args += \"-b $params.internal_adapter_sequence \"\n        }\n        if (params.internal_non_intern_3_trim){\n        X = \"X\"\n            cutadapt_args += \"-a $params.internal_adapter_sequence$X \"\n        }\n        if (params.internal_non_intern_5_trim){\n            cutadapt_args += \"-g X$params.internal_adapter_sequence \"\n        }\n        if (params.internal_anchor_3_trim){\n            cutadapt_args += \"-a $params.internal_adapter_sequence\\$ \"\n        }\n        if (params.internal_anchor_5_trim){\n            cutadapt_args += \"-g ^$params.internal_adapter_sequence \"\n        }\n    }else {\n        if (params.internal_3_trim_multiple){\n            cutadapt_args += \"-a file:$params.internal_multi_adapt_fasta \"\n        }\n        if (params.internal_5_trim_multiple){\n            cutadapt_args += \"-g file:$params.internal_multi_adapt_fasta \"\n        }\n        if (params.internal_3_or_5_trim_multiple){\n            cutadapt_args += \"-b file:$params.internal_multi_adapt_fasta \"\n        }\n    } \n\n                      \n    if (params.internal_min_length > 0){\n        cutadapt_args += \"-m $params.internal_min_length \"\n    }\n    if (params.internal_max_length != 0){\n        cutadapt_args += \"-M $params.internal_max_length \"\n    }\n    if (params.internal_discard_trimmed){\n        cutadapt_args += \"--discard-trimmed \"\n    }\n    if (params.internal_discard_untrimmed){\n        cutadapt_args += \"--discard-untrimmed \"\n    }\n    if (params.internal_too_short_output != ''){\n        cutadapt_args += \"--too-short-output $params.internal_too_short_output \"\n    }\n    if (params.internal_too_long_output != ''){\n        cutadapt_args += \"--too-long-output $params.internal_too_long_output \"\n    }\n    if (params.internal_untrimmed_output != ''){\n        cutadapt_args += \"--untrimmed-output $params.internal_untrimmed_output \"\n    }\n    if (params.internal_max_n_bases != 0){\n        cutadapt_args += \"--max-n $params.internal_max_n_bases \"\n    }\n    if (params.internal_max_expected_errors != 0){\n        cutadapt_args += \"--max-expected-errors $params.internal_max_expected_errors \"\n    }\n    if (params.internal_discard_casava){\n        cutadapt_args += \"--discard-casava $params.internal_discard_casava \"\n    }\n\n                        \n    cutadapt_args += \"-o ${sample_id}.trimmed.fq.gz \"\n\n                                                                                 \n    if (params.internal_paired_end_mode){\n        internal_default_paired_end_args += \"-p ${sample_id}.trimmed.fq.gz \"\n    }\n\n    \"\"\"\n    cutadapt $cutadapt_args $reads > ${sample_id}_${params.internal_process_name}.txt\n    \"\"\"",
        "nb_lignes_script": 117,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "tag \"${sample_id}\"",
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "icount": {
        "name_process": "icount",
        "string_process": "\nprocess icount {\n                           \n    tag \"${sample_id}\"\n\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(bed), path(seg)\n\n    output:\n      tuple val(sample_id), path(\"${bed.simpleName}.xl.peaks.bed.gz\"), emit: peaks\n      tuple val(sample_id), path(\"${bed.simpleName}.scores.tsv\"), emit: peak_scores\n      tuple val(sample_id), path(\"${bed.simpleName}.xl.clusters.bed.gz\"), emit: clusters\n\n    shell:\n    \"\"\"\n    iCount peaks $seg $bed ${bed.simpleName}.xl.peaks.bed.gz \\\n        --scores ${bed.simpleName}.scores.tsv \\\n        --half_window ${params.internal_half_window} \\\n        --fdr ${params.internal_fdr}\n\n    zcat ${bed.simpleName}.xl.peaks.bed.gz | \\\n    bedtools merge -i stdin -s -d ${params.internal_half_window} -c 4,5,6 -o distinct,sum,distinct | \\\n    gzip > ${bed.simpleName}.xl.clusters.bed.gz\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    iCount peaks $seg $bed ${bed.simpleName}.xl.peaks.bed.gz \\\n        --scores ${bed.simpleName}.scores.tsv \\\n        --half_window ${params.internal_half_window} \\\n        --fdr ${params.internal_fdr}\n\n    zcat ${bed.simpleName}.xl.peaks.bed.gz | \\\n    bedtools merge -i stdin -s -d ${params.internal_half_window} -c 4,5,6 -o distinct,sum,distinct | \\\n    gzip > ${bed.simpleName}.xl.clusters.bed.gz\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "TRUmiCount",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/trumicount",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "TRUmiCount",
                "uri": "https://bio.tools/trumicount",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Biomarkers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Diagnostic markers"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Sequencing error detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Short-read error correction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3195",
                                    "term": "Short read error correction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Correctly counting absolute numbers of molecules using unique molecular identifiers.",
                "homepage": "https://cibiv.github.io/trumicount/"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "sample_id",
            "bed",
            "seg"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "tag \"${sample_id}\"",
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "rename_files": {
        "name_process": "rename_files",
        "string_process": "\nprocess rename_files {\n    tag \"${sample_id}\"\n\n    input:\n      tuple val(sample_id), path(input_file)\n\n    output:\n      tuple val(sample_id), path(\"*${params.internal_ext}\"), emit: renamedFiles\n\n    shell:\n    filename = \"${params.internal_prefix}${input_file.simpleName}${params.internal_ext}\"\n    if(params.overwrite_sampleid) {\n      filename = \"${params.internal_prefix}${sample_id}${params.internal_ext}\"\n    }\n\n    \"\"\"\n    mv $input_file $filename\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    filename = \"${params.internal_prefix}${input_file.simpleName}${params.internal_ext}\"\n    if(params.overwrite_sampleid) {\n      filename = \"${params.internal_prefix}${sample_id}${params.internal_ext}\"\n    }\n\n    \"\"\"\n    mv $input_file $filename\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "input_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "samtools": {
        "name_process": "samtools",
        "string_process": "\nprocess samtools {\n    tag \"${sample_id}\"\n\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(bam)\n\n    output:\n      tuple val(sample_id), path(\"*.bam.bai\"), emit: baiFiles\n \n    shell:\n    \n                             \n    samtools_args = ''\n    samtools_args += \"$params.internal_custom_args \"\n    \n    \"\"\"\n    samtools index $samtools_args -@ ${task.cpus} $bam\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    samtools_args = ''\n    samtools_args += \"$params.internal_custom_args \"\n    \n    \"\"\"\n    samtools index $samtools_args -@ ${task.cpus} $bam\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "tag \"${sample_id}\"",
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "getcrosslinks": {
        "name_process": "getcrosslinks",
        "string_process": "\nprocess getcrosslinks {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(bam), path (fai)\n\n    output:\n      tuple val(sample_id), path (\"${bam.simpleName}.xl.bed.gz\"), emit: crosslinkBed\n\n    script:\n    \"\"\"\n    bedtools bamtobed -i $bam > dedupe.bed\n    bedtools shift -m 1 -p -1 -i dedupe.bed -g $fai > shifted.bed\n    bedtools genomecov -dz -strand + -5 -i shifted.bed -g $fai | awk '{OFS=\"\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"+\"}' > pos.bed\n    bedtools genomecov -dz -strand - -5 -i shifted.bed -g $fai | awk '{OFS=\"\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"-\"}' > neg.bed\n    cat pos.bed neg.bed | sort -k1,1 -k2,2n | pigz > ${bam.simpleName}.xl.bed.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bedtools bamtobed -i $bam > dedupe.bed\n    bedtools shift -m 1 -p -1 -i dedupe.bed -g $fai > shifted.bed\n    bedtools genomecov -dz -strand + -5 -i shifted.bed -g $fai | awk '{OFS=\"\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"+\"}' > pos.bed\n    bedtools genomecov -dz -strand - -5 -i shifted.bed -g $fai | awk '{OFS=\"\\t\"}{print \\$1, \\$2, \\$2+1, \".\", \\$3, \"-\"}' > neg.bed\n    cat pos.bed neg.bed | sort -k1,1 -k2,2n | pigz > ${bam.simpleName}.xl.bed.gz\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "fai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n    \n    input:\n      tuple path(reports), path(config_path)\n\n    output:\n      path \"multiqc_report.html\", emit: report\n      path \"multiqc_data/multiqc.log\", emit: log\n        \n    shell:\n\n    args = '-v -x work'\n\n    if(\"$config_path\" != '') {\n        args += \" -c $config_path\"\n    }\n\n    \"\"\"\n    multiqc $args .\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    args = '-v -x work'\n\n    if(\"$config_path\" != '') {\n        args += \" -c $config_path\"\n    }\n\n    \"\"\"\n    multiqc $args .\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "PopTargs",
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs",
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "reports",
            "config_path"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "bedtools_intersect": {
        "name_process": "bedtools_intersect",
        "string_process": "\nprocess bedtools_intersect {\n\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input: \n        tuple val(sample_id), path(reads), path(regions_file)\n\n    output: \n        tuple val(sample_id), path(\"${sample_id}.annotated.bed\"), emit: annotatedBed\n\n    shell:\n    \"\"\"\n    bedtools intersect -a ${regions_file} -b $reads -wa -wb -s > ${sample_id}.annotated.bed\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    bedtools intersect -a ${regions_file} -b $reads -wa -wb -s > ${sample_id}.annotated.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "regions_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "getcrosslinkcoverage": {
        "name_process": "getcrosslinkcoverage",
        "string_process": "\nprocess getcrosslinkcoverage {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(bed)\n\n    output:\n      tuple val(sample_id), path(\"${bed.simpleName}.bedgraph.gz\"), emit: bedGraph\n      tuple val(sample_id), path(\"${bed.simpleName}.norm.bedgraph.gz\"), emit: normBedGraph\n\n    script:\n    \"\"\"\n    # Raw bedgraphs\n    gunzip -c $bed | awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | pigz > ${bed.simpleName}.bedgraph.gz\n    \n    # Normalised bedgraphs\n    TOTAL=`gunzip -c $bed | awk 'BEGIN {total=0} {total=total+\\$5} END {print total}'`\n    echo \\$TOTAL\n    gunzip -c $bed | awk -v total=\\$TOTAL '{printf \"%s\\\\t%i\\\\t%i\\\\t%s\\\\t%f\\\\t%s\\\\n\", \\$1, \\$2, \\$3, \\$4, 1000000*\\$5/total, \\$6}' | \\\n    awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n    sort -k1,1 -k2,2n | pigz > ${bed.simpleName}.norm.bedgraph.gz\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    # Raw bedgraphs\n    gunzip -c $bed | awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | pigz > ${bed.simpleName}.bedgraph.gz\n    \n    # Normalised bedgraphs\n    TOTAL=`gunzip -c $bed | awk 'BEGIN {total=0} {total=total+\\$5} END {print total}'`\n    echo \\$TOTAL\n    gunzip -c $bed | awk -v total=\\$TOTAL '{printf \"%s\\\\t%i\\\\t%i\\\\t%s\\\\t%f\\\\t%s\\\\n\", \\$1, \\$2, \\$3, \\$4, 1000000*\\$5/total, \\$6}' | \\\n    awk '{OFS = \"\\t\"}{if (\\$6 == \"+\") {print \\$1, \\$2, \\$3, \\$5} else {print \\$1, \\$2, \\$3, -\\$5}}' | \\\n    sort -k1,1 -k2,2n | pigz > ${bed.simpleName}.norm.bedgraph.gz\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "peka": {
        "name_process": "peka",
        "string_process": "\nprocess peka {\n    publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n        mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(peaks), path(xls), path(genome), path(genome_index), path(regions)\n\n    output:\n      tuple val(sample_id), path(\"results/*.{pdf,tsv}\"), emit: results\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n    import importlib.util\n    spec = importlib.util.spec_from_file_location(\"peka\", \"/home/src/kmers.py\")\n    pe = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(pe)\n\n    pe.run(\"$peaks\",\n     \"$xls\",\n     \"$genome\",\n     \"$genome_index\", \n     \"$regions\",\n     $params.internal_window,\n     $params.internal_window_distal,\n     $params.internal_kmer_length,\n     $params.internal_top_n,\n     $params.internal_percentile,\n     $params.internal_min_relativ_occurence,\n     $params.internal_clusters,\n     $params.internal_smoothing,\n     $params.internal_all_outputs,\n     $params.internal_regions_selection,\n     $params.internal_subsample)\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n    import importlib.util\n    spec = importlib.util.spec_from_file_location(\"peka\", \"/home/src/kmers.py\")\n    pe = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(pe)\n\n    pe.run(\"$peaks\",\n     \"$xls\",\n     \"$genome\",\n     \"$genome_index\", \n     \"$regions\",\n     $params.internal_window,\n     $params.internal_window_distal,\n     $params.internal_kmer_length,\n     $params.internal_top_n,\n     $params.internal_percentile,\n     $params.internal_min_relativ_occurence,\n     $params.internal_clusters,\n     $params.internal_smoothing,\n     $params.internal_all_outputs,\n     $params.internal_regions_selection,\n     $params.internal_subsample)\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "peaks",
            "xls",
            "genome",
            "genome_index",
            "regions"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n  publishDir \"${params.internal_outdir}/${params.internal_process_name}\",\n    mode: \"copy\", overwrite: true\n\n    input:\n      tuple val(sample_id), path(reads)\n\n    output:\n      tuple val(sample_id), path (\"*.{zip,html}\"), emit: fastqcOutput\n      path \"*.{zip,html}\", emit: report\n\n    shell:\n    reportname = \"${params.internal_process_name}\"\n    if(params.internal_process_name != \"fastqc\") {\n      reportname = \"${params.internal_process_name}_fastqc\"\n    }\n\n    \"\"\"\n    fastqc --threads ${task.cpus} $reads\n    mv ${reads.simpleName}*.html ${sample_id}_${reportname}.html\n    mv ${reads.simpleName}*.zip ${sample_id}_${reportname}.zip\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    reportname = \"${params.internal_process_name}\"\n    if(params.internal_process_name != \"fastqc\") {\n      reportname = \"${params.internal_process_name}_fastqc\"\n    }\n\n    \"\"\"\n    fastqc --threads ${task.cpus} $reads\n    mv ${reads.simpleName}*.html ${sample_id}_${reportname}.html\n    mv ${reads.simpleName}*.zip ${sample_id}_${reportname}.zip\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "luslab__nf-clip",
        "directive": [
            "publishDir \"${params.internal_outdir}/${params.internal_process_name}\" , mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
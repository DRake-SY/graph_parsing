{
    "snippy_core": {
        "name_process": "snippy_core",
        "string_process": "process snippy_core {\n    publishDir \"${params.outdir}\", mode: 'copy', pattern: \"*.aln\"\n\n    input:\n    tuple path(snippy_dirs), path(ref), path(mask)\n\n    output:\n    path('core.aln'), emit: core_alignment\n    path('core.full.aln'), emit: full_alignment\n    path('clean.full.aln'), emit: clean_full_alignment\n\n    script:\n    \"\"\"\n    snippy-core \\\n      --ref ${ref} \\\n      --mask ${mask} \\\n      $snippy_dirs\n    snippy-clean_full_aln core.full.aln > clean.full.aln\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    snippy-core \\\n      --ref ${ref} \\\n      --mask ${mask} \\\n      $snippy_dirs\n    snippy-clean_full_aln core.full.aln > clean.full.aln\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snippy_dirs",
            "ref",
            "mask"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__snippy-phylogenomics-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"*.aln\""
        ],
        "when": "",
        "stub": ""
    },
    "snippy": {
        "name_process": "snippy",
        "string_process": "process snippy {\n    tag { sample_id }\n    cpus 8\n    input:\n    tuple val(grouping_key), file(fastq), path(ref)\n\n    output:\n    path(\"${sample_id}\", type: 'dir')\n    \n    script:\n    if (grouping_key =~ '_S[0-9]+_') {\n      sample_id = grouping_key.split(\"_S[0-9]+_\")[0]\n    } else {\n      sample_id = grouping_key.split(\"_\")[0]\n    }\n    read_1 = fastq[0]\n    read_2 = fastq[1]\n    \"\"\"\n    snippy \\\n      --cpus 8 \\\n      --report \\\n      --ref \"${ref}\" \\\n      --R1 \"${read_1}\" \\\n      --R2 \"${read_2}\" \\\n      --outdir '${sample_id}'\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    if (grouping_key =~ '_S[0-9]+_') {\n      sample_id = grouping_key.split(\"_S[0-9]+_\")[0]\n    } else {\n      sample_id = grouping_key.split(\"_\")[0]\n    }\n    read_1 = fastq[0]\n    read_2 = fastq[1]\n    \"\"\"\n    snippy \\\n      --cpus 8 \\\n      --report \\\n      --ref \"${ref}\" \\\n      --R1 \"${read_1}\" \\\n      --R2 \"${read_2}\" \\\n      --outdir '${sample_id}'\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "grouping_key",
            "fastq",
            "ref"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__snippy-phylogenomics-nf",
        "directive": [
            "tag { sample_id }",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "snp_dists": {
        "name_process": "snp_dists",
        "string_process": "process snp_dists {\n\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"${alignment.baseName}.distances.tsv\"\n\n  input:\n  path(alignment)\n\n  output:\n  path(\"${alignment.baseName}.distances.tsv\")\n\n  script:\n  \"\"\"\n  snp-dists \\\n    '${alignment}' \\\n    > ${alignment.baseName}.distances.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  snp-dists \\\n    '${alignment}' \\\n    > ${alignment.baseName}.distances.tsv\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__snippy-phylogenomics-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"${alignment.baseName}.distances.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "iqtree": {
        "name_process": "iqtree",
        "string_process": "process iqtree {\n\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"*.treefile\"\n    \n  input:\n  path(alignment)\n\n  output:\n  path('*.treefile')\n\n  script:\n  \"\"\"\n  iqtree \\\n    -nt ${task.cpus} \\\n    -fconst \\$(snp-sites -C ${alignment}) \\\n    -s ${alignment} \\\n    -st DNA \\\n    -m GTR+G\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  iqtree \\\n    -nt ${task.cpus} \\\n    -fconst \\$(snp-sites -C ${alignment}) \\\n    -s ${alignment} \\\n    -st DNA \\\n    -m GTR+G\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__snippy-phylogenomics-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"*.treefile\""
        ],
        "when": "",
        "stub": ""
    },
    "snp_sites": {
        "name_process": "snp_sites",
        "string_process": "process snp_sites {\n\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"clean.core.aln\"\n\n  input:\n  path(alignment)\n\n  output:\n  path('clean.core.aln')\n\n  script:\n  \"\"\"\n  snp-sites \\\n    -c '${alignment}' \\\n    > clean.core.aln\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  snp-sites \\\n    -c '${alignment}' \\\n    > clean.core.aln\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__snippy-phylogenomics-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"clean.core.aln\""
        ],
        "when": "",
        "stub": ""
    },
    "gubbins": {
        "name_process": "gubbins",
        "string_process": "process gubbins {\n\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"gubbins.*\"\n\n  input:\n  path(alignment)\n\n  output:\n  path('gubbins.filtered_polymorphic_sites.fasta'), emit: filtered_alignment\n\n  script:\n  \"\"\"\n  run_gubbins.py \\\n    --threads ${task.cpus} \\\n    -p gubbins \\\n    ${alignment}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  run_gubbins.py \\\n    --threads ${task.cpus} \\\n    -p gubbins \\\n    ${alignment}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__snippy-phylogenomics-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"gubbins.*\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "GATK_SELECTVARIANTS": {
        "name_process": "GATK_SELECTVARIANTS",
        "string_process": "\nprocess GATK_SELECTVARIANTS {\n\n  conda conda_path\n\n  input:\n    val(samplename_in_vcf)\n\n    val(cohort_prefix)\n    path(cohort_vcf)\n    path(cohort_vcf_index)\n\n    path(gatk_path)\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n  output:\n    tuple val(samplename_in_vcf),\n      path(\"${samplename_in_vcf}.vcf\")\n\n  script:\n  \"\"\"\n    set -euo pipefail\n\n    ${gatk_path} --java-options \"${params.gatk_java_opts}\" \\\n      SelectVariants \\\n      -R ${ref_fasta} \\\n      -V ${cohort_vcf} \\\n      -sn ${samplename_in_vcf} \\\n      -O ${samplename_in_vcf}.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n    touch \"${sample_name_in_vcf}.vcf\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "  \"\"\"\n    set -euo pipefail\n\n    ${gatk_path} --java-options \"${params.gatk_java_opts}\" \\\n      SelectVariants \\\n      -R ${ref_fasta} \\\n      -V ${cohort_vcf} \\\n      -sn ${samplename_in_vcf} \\\n      -O ${samplename_in_vcf}.vcf\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename_in_vcf",
            "cohort_prefix",
            "cohort_vcf",
            "cohort_vcf_index",
            "gatk_path",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 8,
        "outputs": [
            "samplename_in_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "oqe__single-exome-sample-variant-priorization",
        "directive": [
            "conda conda_path"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n    touch \"${sample_name_in_vcf}.vcf\"\n  \"\"\""
    },
    "VT_NORMALIZE": {
        "name_process": "VT_NORMALIZE",
        "string_process": "\nprocess VT_NORMALIZE {\n\n  conda conda_path\n\n  input:\n    tuple val(samplename_in_vcf),\n      path(input_vcf)\n\n    path(vt_path)\n    path(vt_genome)\n\n  output: \n    tuple val(samplename_in_vcf),\n      path(\"${samplename_in_vcf}.vt_normalized.vcf\")\n\n  script:\n  \"\"\"\n    set -euo pipefail\n\n    ${vt_path} normalize \\\n    ${input_vcf} \\\n    -r ${vt_genome} \\\n    -o ${samplename_in_vcf}.vt_normalized.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n    touch \"${samplename_in_vcf}.vt_normalized.vcf\"\n  \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "  \"\"\"\n    set -euo pipefail\n\n    ${vt_path} normalize \\\n    ${input_vcf} \\\n    -r ${vt_genome} \\\n    -o ${samplename_in_vcf}.vt_normalized.vcf\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename_in_vcf",
            "input_vcf",
            "vt_path",
            "vt_genome"
        ],
        "nb_inputs": 4,
        "outputs": [
            "samplename_in_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "oqe__single-exome-sample-variant-priorization",
        "directive": [
            "conda conda_path"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n    touch \"${samplename_in_vcf}.vt_normalized.vcf\"\n  \"\"\""
    },
    "VT_DECOMPOSE": {
        "name_process": "VT_DECOMPOSE",
        "string_process": "\nprocess VT_DECOMPOSE {\n\n  conda conda_path\n\n  input:\n    tuple val(samplename_in_vcf),\n      path(input_vcf)\n\n    path(vt_path)\n    path(vt_genome)\n\n  output: \n    tuple val(samplename_in_vcf),\n      path(\"${samplename_in_vcf}.vt_decomposed.vcf\")\n\n  script:\n  \"\"\"\n    set -euo pipefail\n\n    ${vt_path} decompose \\\n    -s \\\n    ${input_vcf} \\\n    -o ${samplename_in_vcf}.vt_decomposed.vcf\n  \"\"\"\n                         \n\n  stub:\n  \"\"\"\n    touch \"${samplename_in_vcf}.vt_decomposed.vcf\"\n  \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "  \"\"\"\n    set -euo pipefail\n\n    ${vt_path} decompose \\\n    -s \\\n    ${input_vcf} \\\n    -o ${samplename_in_vcf}.vt_decomposed.vcf\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename_in_vcf",
            "input_vcf",
            "vt_path",
            "vt_genome"
        ],
        "nb_inputs": 4,
        "outputs": [
            "samplename_in_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "oqe__single-exome-sample-variant-priorization",
        "directive": [
            "conda conda_path"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n    touch \"${samplename_in_vcf}.vt_decomposed.vcf\"\n  \"\"\""
    },
    "VCF_COMPRESS_INDEX": {
        "name_process": "VCF_COMPRESS_INDEX",
        "string_process": "\nprocess VCF_COMPRESS_INDEX {\n\n  conda conda_path\n  publishDir \"$sample_output_dir\", mode: 'copy', overwrite: true\n\n  input:\n    tuple val(samplename_in_vcf),\n      val(sample_output_dir),\n      path(input_vcf)\n\n    path(bgzip_path)\n    path(tabix_path)\n\n  output:\n    tuple val(samplename_in_vcf),\n      path(\"${samplename_in_vcf}.vcf.gz\"),\n      path(\"${samplename_in_vcf}.vcf.gz.tbi\")\n\n  script:\n  \"\"\"\n    set -euo pipefail \n\n    ${bgzip_path} -c ${input_vcf} > ${samplename_in_vcf}.vcf.gz && \\\n    ${tabix_path} -p vcf ${samplename_in_vcf}.vcf.gz\n  \"\"\"\n\n  stub:\n  \"\"\"\n    touch \"${samplename_in_vcf}.gz\"\n    touch \"${samplename_in_vcf}.gz.tbi\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "  \"\"\"\n    set -euo pipefail \n\n    ${bgzip_path} -c ${input_vcf} > ${samplename_in_vcf}.vcf.gz && \\\n    ${tabix_path} -p vcf ${samplename_in_vcf}.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename_in_vcf",
            "sample_output_dir",
            "input_vcf",
            "bgzip_path",
            "tabix_path"
        ],
        "nb_inputs": 5,
        "outputs": [
            "samplename_in_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "oqe__single-exome-sample-variant-priorization",
        "directive": [
            "conda conda_path",
            "publishDir \"$sample_output_dir\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n    touch \"${samplename_in_vcf}.gz\"\n    touch \"${samplename_in_vcf}.gz.tbi\"\n  \"\"\""
    },
    "EXOMISER": {
        "name_process": "EXOMISER",
        "string_process": "\nprocess EXOMISER {\n\n  conda conda_path\n  publishDir \"$sample_output_dir\", mode: 'copy', overwrite: true\n\n  input: \n    tuple val(samplename_in_vcf),\n      val(sample_output_dir),\n      path(input_vcf),\n      val(hpo_ids)\n    \n    path(exomiser_path)\n    path(exomiser_config)\n    val(exomiser_output_prefix)\n    path(exomiser_yaml_template)\n\n  output:\n    path(\"${samplename_in_vcf}.exomiser.yaml\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}.html\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}.json\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_AD.genes.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_AD.variants.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_AD.vcf\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_AR.genes.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_AR.variants.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_AR.vcf\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_XR.genes.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_XR.variants.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_XR.vcf\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_MT.genes.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_MT.variants.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_MT.vcf\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_XD.genes.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_XD.variants.tsv\")\n    path(\"${samplename_in_vcf}.${exomiser_output_prefix}_XD.vcf\")\n\n  script:\n\n  hpo_ids = hpo_ids.trim()\n\n  \"\"\"\n  set -euo pipefail\n\n  python - <<END\n  import yaml\n  import os\n  import ast\n\n  # Exomiser YAML\n  with open(\"${exomiser_yaml_template}\") as f:\n    list_doc = yaml.safe_load(f)\n\n  hpos = \"${hpo_ids}\"\n  hpos = ast.literal_eval(hpos)\n\n  list_doc[\"analysis\"][\"vcf\"] = \"${input_vcf}\"\n  list_doc[\"analysis\"][\"hpoIds\"] = hpos\n  list_doc[\"analysis\"][\"proband\"] = \"${samplename_in_vcf}\"\n  list_doc[\"outputOptions\"][\"outputPrefix\"] = \"${samplename_in_vcf}.${exomiser_output_prefix}\"\n\n  with open(\"${samplename_in_vcf}.exomiser.yaml\", \"w\") as f:\n    yaml.dump(list_doc, f)\n  END\n\n  ${params.java_path} ${params.exomiser_java_opts} \\\n  -jar ${exomiser_path} \\\n  --analysis \"${samplename_in_vcf}.exomiser.yaml\" \\\n  --spring.config.location=${exomiser_config}\n  \"\"\"\n\n  stub:\n  \"\"\"\n    touch \"${samplename_in_vcf}.exomiser.yaml\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}.html\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}.json\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AD.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AD.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AD.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AR.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AR.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AR.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XR.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XR.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XR.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_MT.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_MT.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_MT.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XD.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XD.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XD.vcf\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 92,
        "string_script": "  hpo_ids = hpo_ids.trim()\n\n  \"\"\"\n  set -euo pipefail\n\n  python - <<END\n  import yaml\n  import os\n  import ast\n\n  # Exomiser YAML\n  with open(\"${exomiser_yaml_template}\") as f:\n    list_doc = yaml.safe_load(f)\n\n  hpos = \"${hpo_ids}\"\n  hpos = ast.literal_eval(hpos)\n\n  list_doc[\"analysis\"][\"vcf\"] = \"${input_vcf}\"\n  list_doc[\"analysis\"][\"hpoIds\"] = hpos\n  list_doc[\"analysis\"][\"proband\"] = \"${samplename_in_vcf}\"\n  list_doc[\"outputOptions\"][\"outputPrefix\"] = \"${samplename_in_vcf}.${exomiser_output_prefix}\"\n\n  with open(\"${samplename_in_vcf}.exomiser.yaml\", \"w\") as f:\n    yaml.dump(list_doc, f)\n  END\n\n  ${params.java_path} ${params.exomiser_java_opts} \\\n  -jar ${exomiser_path} \\\n  --analysis \"${samplename_in_vcf}.exomiser.yaml\" \\\n  --spring.config.location=${exomiser_config}\n  \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "tximport",
            "ENdb"
        ],
        "tools_url": [
            "https://bio.tools/tximport",
            "https://bio.tools/ENdb"
        ],
        "tools_dico": [
            {
                "name": "tximport",
                "uri": "https://bio.tools/tximport",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Bioconductor package that imports transcript-level abundance, estimated counts and transcript lengths, and summarizes into matrices for use with downstream gene-level analysis packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/tximport.html"
            },
            {
                "name": "ENdb",
                "uri": "https://bio.tools/ENdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0440",
                                    "term": "Promoter prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A manually curated database of experimentally supported enhancers for human and mouse. Enhancers are a class of cis-regulatory elements that can increase gene transcription by forming loops in intergenic regions, introns and exons",
                "homepage": "http://www.licpathway.net/ENdb"
            }
        ],
        "inputs": [
            "samplename_in_vcf",
            "sample_output_dir",
            "hpo_ids",
            "input_vcf",
            "exomiser_path",
            "exomiser_config",
            "exomiser_output_prefix",
            "exomiser_yaml_template"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "oqe__single-exome-sample-variant-priorization",
        "directive": [
            "conda conda_path",
            "publishDir \"$sample_output_dir\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n    touch \"${samplename_in_vcf}.exomiser.yaml\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}.html\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}.json\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AD.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AD.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AD.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AR.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AR.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_AR.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XR.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XR.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XR.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_MT.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_MT.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_MT.vcf\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XD.genes.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XD.variants.tsv\"\n    touch \"${samplename_in_vcf}.${exomiser_output_prefix}_XD.vcf\"\n  \"\"\""
    },
    "LIRICAL": {
        "name_process": "LIRICAL",
        "string_process": "\nprocess LIRICAL {\n  \n  conda conda_path\n  publishDir \"$sample_output_dir\", mode: 'copy', overwrite: true\n\n  input: \n    tuple val(samplename_in_vcf),\n      val(sample_output_dir),\n      path(input_vcf),\n      val(hpo_ids)\n\n    val(lirical_output_prefix)\n    path(lirical_yaml_template)\n    path(lirical_path)\n\n  output:\n    path(\"${samplename_in_vcf}.lirical.yaml\")\n    path(\"${samplename_in_vcf}.${lirical_output_prefix}.html\")\n    path(\"lirical.log\")\n\n  script:\n                     \n  hpo_ids = hpo_ids.trim()\n  \n  \"\"\"\n  set -euo pipefail\n\n  python - <<END\n\n  import yaml\n  import ast\n  import sys\n\n  # LIRICAL YAML\n  with open(\"${lirical_yaml_template}\") as f:\n    list_doc = yaml.safe_load(f)\n\n  hpos = \"${hpo_ids}\"\n\n  hpos = ast.literal_eval(hpos)\n\n  list_doc[\"analysis\"][\"vcf\"] = \"${input_vcf}\"\n  list_doc[\"hpoIds\"] = hpos\n  list_doc[\"prefix\"] = \"${samplename_in_vcf}.${lirical_output_prefix}\"\n  \n  with open(\"${samplename_in_vcf}.lirical.yaml\", \"w\") as f:\n    yaml.dump(list_doc, f)\n  END\n\n  #!/bin/bash\n\n  ${params.java_path} ${params.lirical_java_opts} \\\n  -jar ${lirical_path} \\\n  yaml -y \"${samplename_in_vcf}.lirical.yaml\"\n\n  \"\"\"\n\n  stub:\n  \"\"\"\n    touch \"${samplename_in_vcf}.lirical.yaml\"\n    touch \"${samplename_in_vcf}.${lirical_output_prefix}\"\n    touch \"lirical.log\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 64,
        "string_script": "  hpo_ids = hpo_ids.trim()\n  \n  \"\"\"\n  set -euo pipefail\n\n  python - <<END\n\n  import yaml\n  import ast\n  import sys\n\n  # LIRICAL YAML\n  with open(\"${lirical_yaml_template}\") as f:\n    list_doc = yaml.safe_load(f)\n\n  hpos = \"${hpo_ids}\"\n\n  hpos = ast.literal_eval(hpos)\n\n  list_doc[\"analysis\"][\"vcf\"] = \"${input_vcf}\"\n  list_doc[\"hpoIds\"] = hpos\n  list_doc[\"prefix\"] = \"${samplename_in_vcf}.${lirical_output_prefix}\"\n  \n  with open(\"${samplename_in_vcf}.lirical.yaml\", \"w\") as f:\n    yaml.dump(list_doc, f)\n  END\n\n  #!/bin/bash\n\n  ${params.java_path} ${params.lirical_java_opts} \\\n  -jar ${lirical_path} \\\n  yaml -y \"${samplename_in_vcf}.lirical.yaml\"\n\n  \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "tximport",
            "ENdb"
        ],
        "tools_url": [
            "https://bio.tools/tximport",
            "https://bio.tools/ENdb"
        ],
        "tools_dico": [
            {
                "name": "tximport",
                "uri": "https://bio.tools/tximport",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Bioconductor package that imports transcript-level abundance, estimated counts and transcript lengths, and summarizes into matrices for use with downstream gene-level analysis packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/tximport.html"
            },
            {
                "name": "ENdb",
                "uri": "https://bio.tools/ENdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0440",
                                    "term": "Promoter prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A manually curated database of experimentally supported enhancers for human and mouse. Enhancers are a class of cis-regulatory elements that can increase gene transcription by forming loops in intergenic regions, introns and exons",
                "homepage": "http://www.licpathway.net/ENdb"
            }
        ],
        "inputs": [
            "samplename_in_vcf",
            "sample_output_dir",
            "hpo_ids",
            "input_vcf",
            "lirical_output_prefix",
            "lirical_yaml_template",
            "lirical_path"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "oqe__single-exome-sample-variant-priorization",
        "directive": [
            "conda conda_path",
            "publishDir \"$sample_output_dir\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n    touch \"${samplename_in_vcf}.lirical.yaml\"\n    touch \"${samplename_in_vcf}.${lirical_output_prefix}\"\n    touch \"lirical.log\"\n  \"\"\""
    }
}
{
    "checkfiles_fastq": {
        "name_process": "checkfiles_fastq",
        "string_process": "\nprocess checkfiles_fastq {\n\n  tag  \"${projectid}__${sid}\"\n  cpus params.cpu_min\n  memory params.mem_min\n\n  input:\n  set sid, read1, read2, species from fastq_ch\n\n  output:\n  val \"x\" into checkfiles_fastq_complete_ch\n  set sid, read1, read2, species into move_fastqc_ch\n\n  script:\n  if( params.paired_global )\n    \"\"\"\n    file1=\\$(find ${fastq_input_dir} -type f -name ${read1})\n    file2=\\$(find ${fastq_input_dir} -type f -name ${read2})\n    if [[ -z \\${file1} ]]; then\n      echo \"Warning: Cannot locate fastq_1 file supplied dir: ${fastq_input_dir}/${read1}\"\n      exit 2\n    fi\n    if [[ -z \\${file2} ]]; then\n    echo \"Warning: Cannot locate fastq_1 file supplied dir: ${fastq_input_dir}/${read2}\"\n      exit 2\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    file1=\\$(find ${fastq_input_dir} -type f -name ${read1})\n    if [[ -z \\${file1} ]]; then\n      echo \"Warning: Cannot locate fastq_1 file supplied dir: ${fastq_input_dir}/${read1}\"\n      exit 2\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "  if( params.paired_global )\n    \"\"\"\n    file1=\\$(find ${fastq_input_dir} -type f -name ${read1})\n    file2=\\$(find ${fastq_input_dir} -type f -name ${read2})\n    if [[ -z \\${file1} ]]; then\n      echo \"Warning: Cannot locate fastq_1 file supplied dir: ${fastq_input_dir}/${read1}\"\n      exit 2\n    fi\n    if [[ -z \\${file2} ]]; then\n    echo \"Warning: Cannot locate fastq_1 file supplied dir: ${fastq_input_dir}/${read2}\"\n      exit 2\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    file1=\\$(find ${fastq_input_dir} -type f -name ${read1})\n    if [[ -z \\${file1} ]]; then\n      echo \"Warning: Cannot locate fastq_1 file supplied dir: ${fastq_input_dir}/${read1}\"\n      exit 2\n    fi\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "checkfiles_fastq_complete_ch",
            "move_fastqc_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag \"${projectid}__${sid}\"",
            "cpus params.cpu_min",
            "memory params.mem_min"
        ],
        "when": "",
        "stub": ""
    },
    "move_fastq": {
        "name_process": "move_fastq",
        "string_process": "\nprocess move_fastq {\n\n  tag  { params.run_move_fastq  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_move_fastq  ? params.cpu_min : params.cpu_min  }\n  memory { params.run_move_fastq  ?  params.mem_min : params.mem_min  }\n\n  input:\n  val x from checkfiles_fastq_complete_ch.collect()\n  set sid, read1, read2, species from move_fastqc_ch                     \n\n  output:\n  val \"x\" into move_fastq_complete_ch\n  set sid, read1, read2, species into fastqc_ch\n\n  script:\n  if( params.paired_global && params.run_move_fastq)\n    \"\"\"\n    mkdir -p ${fastq_dir}\n    file1=\\$(find ${fastq_dir} -type f -name ${read1})\n    file2=\\$(find ${fastq_dir} -type f -name ${read2})\n    if [[ -z \\${file1} ]]; then\n      mv ${fastq_input_dir}/${read1} ${fastq_dir}\n    fi\n    if [[ -z \\${file2} ]]; then\n      mv ${fastq_input_dir}/${read2} ${fastq_dir}\n    fi\n    \"\"\"\n  else if( !params.paired_global && params.run_move_fastq)\n    \"\"\"\n    mkdir -p ${fastq_dir}\n    file1=\\$(find ${fastq_dir} -type f -name ${read1})\n    if [[ -z \\${file1} ]]; then\n      mv ${fastq_input_dir}/${read1} ${fastq_dir}\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "  if( params.paired_global && params.run_move_fastq)\n    \"\"\"\n    mkdir -p ${fastq_dir}\n    file1=\\$(find ${fastq_dir} -type f -name ${read1})\n    file2=\\$(find ${fastq_dir} -type f -name ${read2})\n    if [[ -z \\${file1} ]]; then\n      mv ${fastq_input_dir}/${read1} ${fastq_dir}\n    fi\n    if [[ -z \\${file2} ]]; then\n      mv ${fastq_input_dir}/${read2} ${fastq_dir}\n    fi\n    \"\"\"\n  else if( !params.paired_global && params.run_move_fastq)\n    \"\"\"\n    mkdir -p ${fastq_dir}\n    file1=\\$(find ${fastq_dir} -type f -name ${read1})\n    if [[ -z \\${file1} ]]; then\n      mv ${fastq_input_dir}/${read1} ${fastq_dir}\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "checkfiles_fastq_complete_ch",
            "move_fastqc_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "move_fastq_complete_ch",
            "fastqc_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_move_fastq ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_move_fastq ? params.cpu_min : params.cpu_min }",
            "memory { params.run_move_fastq ? params.mem_min : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n  tag  { params.run_fastqc  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_fastqc  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_fastqc  ? params.mem_standard : params.mem_min  }\n\n  input:\n  val x from move_fastq_complete_ch.collect()\n  set sid, read1, read2, species from fastqc_ch                        \n\n  output:\n  val \"x\" into fastqc_complete_ch\n                                      \n                                      \n                                      \n                                     \n  set sid, read1, read2, species into star_ch\n  set sid, read1, read2, species into salmon_ch\n  set sid, read1, read2, species into rsem_ch\n  set sid, read1, read2, species into fastqscreen_ch\n\n  script:\n  if ( params.paired_global && params.run_fastqc)\n    \"\"\"\n    mkdir -p ${fastqcdir}\n    echo \"running fastqc in paired reads mode\"\n    fastqc ${fastq_dir}/${read1} ${fastq_dir}/${read2}  --outdir ${fastqcdir}\n    \"\"\"\n  else if ( !params.paired_global && params.run_fastqc)\n    \"\"\"\n    mkdir -p ${fastqcdir}\n    echo \"running fastqc in non paired reads mode \"\n    fastqc ${fastq_dir}/${read1}  --outdir ${fastqcdir}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_fastqc skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "  if ( params.paired_global && params.run_fastqc)\n    \"\"\"\n    mkdir -p ${fastqcdir}\n    echo \"running fastqc in paired reads mode\"\n    fastqc ${fastq_dir}/${read1} ${fastq_dir}/${read2}  --outdir ${fastqcdir}\n    \"\"\"\n  else if ( !params.paired_global && params.run_fastqc)\n    \"\"\"\n    mkdir -p ${fastqcdir}\n    echo \"running fastqc in non paired reads mode \"\n    fastqc ${fastq_dir}/${read1}  --outdir ${fastqcdir}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_fastqc skipped\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "move_fastq_complete_ch",
            "fastqc_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fastqc_complete_ch",
            "star_ch",
            "salmon_ch",
            "rsem_ch",
            "fastqscreen_ch"
        ],
        "nb_outputs": 5,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_fastqc ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_fastqc ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_fastqc ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "fastqscreen": {
        "name_process": "fastqscreen",
        "string_process": "\nprocess fastqscreen {\n\n    tag  { params.run_fastqscreen  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n    cpus { params.run_fastqscreen  ? params.cpu_standard : params.cpu_min  }\n    memory { params.run_fastqscreen  ?  params.mem_standard : params.mem_min  }\n\n\n    input:\n    val x from fastqc_complete_ch.collect()\n    set sid, read1, read2, species from fastqscreen_ch   \n\n    output:\n    val \"x\" into fastqscreen_complete_ch\n\n    script:\n    if ( params.paired_global ){\n        fqsfiles = \"${fastq_dir}/${read1} ${fastq_dir}/${read2}\" }\n    else{\n        fqsfiles = \"${fastq_dir}/${read1}\" }\n\n    if ( params.run_fastqscreen)\n      \"\"\"\n      mkdir -p ${fastqscreendir}\n      fastq_screen \\\\\n          --conf ${params.fastqscreen_config} \\\\\n          --subset 500000 \\\\\n          --outdir ${fastqscreendir} \\\\\n          ${fqsfiles}\n      \"\"\"\n    else\n      \"\"\"\n      echo \"run_fastqscreen skipped\"\n      \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    if ( params.paired_global ){\n        fqsfiles = \"${fastq_dir}/${read1} ${fastq_dir}/${read2}\" }\n    else{\n        fqsfiles = \"${fastq_dir}/${read1}\" }\n\n    if ( params.run_fastqscreen)\n      \"\"\"\n      mkdir -p ${fastqscreendir}\n      fastq_screen \\\\\n          --conf ${params.fastqscreen_config} \\\\\n          --subset 500000 \\\\\n          --outdir ${fastqscreendir} \\\\\n          ${fqsfiles}\n      \"\"\"\n    else\n      \"\"\"\n      echo \"run_fastqscreen skipped\"\n      \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastqc_complete_ch",
            "fastqscreen_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fastqscreen_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_fastqscreen ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_fastqscreen ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_fastqscreen ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "star": {
        "name_process": "star",
        "string_process": "\nprocess star  {\n  tag  { params.run_star  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_star  ? params.cpu_high : params.cpu_min  }\n  memory { params.run_star  ?  params.mem_high : params.mem_min  }\n\n  input:\n                                              \n  val x from fastqscreen_complete_ch.collect()\n  set sid, read1, read2, species from star_ch                         \n\n  output:\n  val \"x\" into star_complete_ch_1\n                                   \n\n  script:\n  if ( species == \"Homo sapiens\" ){\n    genome=params.star_genome_hs }\n  else if ( species == \"Mus musculus\" ){\n    genome=params.star_genome_mm }\n  else if ( species == \"Rattus norvegicus\" ){\n      genome=params.star_genome_rn }\n  else{\n    genome = \"\"\n    println( \"Warning: Species not recognized.\" )}\n\n  if ( params.paired_global ){\n      starfiles = \"${fastq_dir}/${read1} ${fastq_dir}/${read2}\" }\n  else{\n      starfiles = \"${fastq_dir}/${read1}\" }\n\n\n  if ( params.run_star )\n    \"\"\"\n    mkdir -p ${stardir}\n    if [ ! -f ${stardir}/${sid}_Log.final.out ]; then\n      STAR --genomeDir ${genome} \\\\\n        --readFilesIn ${starfiles} \\\\\n        --runThreadN ${task.cpus}  \\\\\n        --readFilesCommand zcat \\\\\n        --outSAMtype BAM SortedByCoordinate \\\\\n        --limitBAMsortRAM 10000000000 \\\\\n        --outFileNamePrefix ${stardir}/${sid}_\n    else\n      echo \"star results already present\"\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping star\"\n    \"\"\"\n\n}",
        "nb_lignes_process": 51,
        "string_script": "  if ( species == \"Homo sapiens\" ){\n    genome=params.star_genome_hs }\n  else if ( species == \"Mus musculus\" ){\n    genome=params.star_genome_mm }\n  else if ( species == \"Rattus norvegicus\" ){\n      genome=params.star_genome_rn }\n  else{\n    genome = \"\"\n    println( \"Warning: Species not recognized.\" )}\n\n  if ( params.paired_global ){\n      starfiles = \"${fastq_dir}/${read1} ${fastq_dir}/${read2}\" }\n  else{\n      starfiles = \"${fastq_dir}/${read1}\" }\n\n\n  if ( params.run_star )\n    \"\"\"\n    mkdir -p ${stardir}\n    if [ ! -f ${stardir}/${sid}_Log.final.out ]; then\n      STAR --genomeDir ${genome} \\\\\n        --readFilesIn ${starfiles} \\\\\n        --runThreadN ${task.cpus}  \\\\\n        --readFilesCommand zcat \\\\\n        --outSAMtype BAM SortedByCoordinate \\\\\n        --limitBAMsortRAM 10000000000 \\\\\n        --outFileNamePrefix ${stardir}/${sid}_\n    else\n      echo \"star results already present\"\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping star\"\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "Mgenome",
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/mgenome",
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            },
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fastqscreen_complete_ch",
            "star_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_complete_ch_1"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_star ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_star ? params.cpu_high : params.cpu_min }",
            "memory { params.run_star ? params.mem_high : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "checkfiles_bam": {
        "name_process": "checkfiles_bam",
        "string_process": "\nprocess checkfiles_bam {\n  tag  { params.run_checkfiles_bam  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus params.cpu_min\n  memory params.mem_min\n\n  input:\n  val x from star_complete_ch_1.collect()                                        \n  set sid, bam, strand, species, RIN, concentration from bam_checkbam_ch\n\n  output:\n  val \"x\" into checkfiles_bam_complete_ch\n  set sid, bam, strand, species, RIN, concentration into bam_indexbam_ch\n\n  script:\n  if( params.run_checkfiles_bam )\n    \"\"\"\n    if [[ ! -f ${stardir}/${bam} ]]; then\n      echo \"Warning: Cannot locate bam file ${stardir}/${bam}\"\n      exit 2\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"file check overridden\"\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  if( params.run_checkfiles_bam )\n    \"\"\"\n    if [[ ! -f ${stardir}/${bam} ]]; then\n      echo \"Warning: Cannot locate bam file ${stardir}/${bam}\"\n      exit 2\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"file check overridden\"\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "star_complete_ch_1",
            "bam_checkbam_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "checkfiles_bam_complete_ch",
            "bam_indexbam_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_checkfiles_bam ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus params.cpu_min",
            "memory params.mem_min"
        ],
        "when": "",
        "stub": ""
    },
    "index_bam": {
        "name_process": "index_bam",
        "string_process": "\nprocess index_bam {\n  tag  { params.run_index_bam  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_index_bam  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_index_bam  ?  params.mem_standard : params.mem_min  }\n\n  input:\n  val x from checkfiles_bam_complete_ch.collect()\n  set sid, bam, strand, species, RIN, concentration from bam_indexbam_ch\n\n  output:\n  val \"x\" into indexbam_complete_ch\n  set sid, bam, strand, species, RIN, concentration into bam_markdups_ch\n\n  script:\n  if ( params.run_index_bam )\n    \"\"\"\n    cd ${stardir}\n    echo \"${stardir}/${bam}\"\n    samtools index -bc ${stardir}/${bam}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipped indexing\"\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  if ( params.run_index_bam )\n    \"\"\"\n    cd ${stardir}\n    echo \"${stardir}/${bam}\"\n    samtools index -bc ${stardir}/${bam}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipped indexing\"\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "checkfiles_bam_complete_ch",
            "bam_indexbam_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "indexbam_complete_ch",
            "bam_markdups_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_index_bam ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_index_bam ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_index_bam ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "markdups": {
        "name_process": "markdups",
        "string_process": "\nprocess markdups {\n  tag  { params.run_markdups  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_markdups  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_markdups  ?  params.mem_standard : params.mem_min  }\n\n  input:\n  val x from indexbam_complete_ch.collect()\n  set sid, bam, strand, species, RIN, concentration from bam_markdups_ch\n\n  output:\n  val \"x\" into markdups_complete_ch_1\n                                       \n  set sid, bam, strand, species, RIN, concentration into bam_filter_multimap_ch\n\n  script:\n  if ( params.run_markdups )\n    \"\"\"\n    echo \"bam: ${bam}\"\n    mkdir -p ${markdupstempdir}\n    mkdir -p ${markdupsqcdir}\n\n    echo \"markdupstempdir: ${markdupstempdir}/${bam}\"\n    # java -jar picard MarkDuplicates \\\\\n    picard MarkDuplicates \\\\\n        INPUT=${stardir}/${bam} \\\\\n        OUTPUT=${markdupstempdir}/${bam} \\\\\n        METRICS_FILE=${markdupsqcdir}/${sid}_bam.MarkDuplicates.metrics.txt \\\\\n        TAGGING_POLICY=All \\\\\n        REMOVE_DUPLICATES=false \\\\\n        ASSUME_SORTED=true \\\\\n        MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=2000 \\\\\n        QUIET=true \\\\\n        VERBOSITY=WARNING\n    mv -f ${markdupstempdir}/${bam} ${stardir}/${bam}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run markdups skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "  if ( params.run_markdups )\n    \"\"\"\n    echo \"bam: ${bam}\"\n    mkdir -p ${markdupstempdir}\n    mkdir -p ${markdupsqcdir}\n\n    echo \"markdupstempdir: ${markdupstempdir}/${bam}\"\n    # java -jar picard MarkDuplicates \\\\\n    picard MarkDuplicates \\\\\n        INPUT=${stardir}/${bam} \\\\\n        OUTPUT=${markdupstempdir}/${bam} \\\\\n        METRICS_FILE=${markdupsqcdir}/${sid}_bam.MarkDuplicates.metrics.txt \\\\\n        TAGGING_POLICY=All \\\\\n        REMOVE_DUPLICATES=false \\\\\n        ASSUME_SORTED=true \\\\\n        MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=2000 \\\\\n        QUIET=true \\\\\n        VERBOSITY=WARNING\n    mv -f ${markdupstempdir}/${bam} ${stardir}/${bam}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run markdups skipped\"\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "indexbam_complete_ch",
            "bam_markdups_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "markdups_complete_ch_1",
            "bam_filter_multimap_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_markdups ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_markdups ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_markdups ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "salmon": {
        "name_process": "salmon",
        "string_process": "\nprocess salmon  {\n  tag  { params.run_salmon  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_salmon  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_salmon  ?  params.mem_standard : params.mem_min  }\n\n  input:\n  val x from markdups_complete_ch_1.collect()\n                                             \n  set sid, read1, read2, species from salmon_ch                         \n\n  output:\n  val \"x\" into salmon_complete_ch\n\n  script:\n  if ( species == \"Homo sapiens\" ){\n    transcripts=params.salmon_transcripts_hs }\n  else if ( species == \"Mus musculus\" ){\n    transcripts=params.salmon_transcripts_mm  }\n  else if ( species == \"Rattus norvegicus\" ){\n    transcripts=params.salmon_transcripts_rn  }\n  else{\n    genome = \"\"\n    println( \"Warning: Species not recognized.\" )}\n\n  if ( params.paired_global && params.run_salmon )\n    \"\"\"\n    salmon quant -l A \\\\\n      -i  ${transcripts} \\\\\n      -1  ${fastq_dir}/${read1} \\\\\n      -2  ${fastq_dir}/${read2} \\\\\n      -p  6 --validateMappings \\\\\n      -o  ${salmondir}/${sid}_0.salmon.salmon \\\\\n      --no-version-check\n    \"\"\"\n  else if ( !params.paired_global && params.run_salmon )\n    \"\"\"\n    salmon quant -l A \\\\\n      -i  ${transcripts} \\\\\n      -1  ${fastq_dir}/${read1} \\\\\n      -p  6 --validateMappings \\\\\n      -o  ${salmondir}/${sid}_0.salmon.salmon \\\\\n      --no-version-check\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping salmon\"\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "  if ( species == \"Homo sapiens\" ){\n    transcripts=params.salmon_transcripts_hs }\n  else if ( species == \"Mus musculus\" ){\n    transcripts=params.salmon_transcripts_mm  }\n  else if ( species == \"Rattus norvegicus\" ){\n    transcripts=params.salmon_transcripts_rn  }\n  else{\n    genome = \"\"\n    println( \"Warning: Species not recognized.\" )}\n\n  if ( params.paired_global && params.run_salmon )\n    \"\"\"\n    salmon quant -l A \\\\\n      -i  ${transcripts} \\\\\n      -1  ${fastq_dir}/${read1} \\\\\n      -2  ${fastq_dir}/${read2} \\\\\n      -p  6 --validateMappings \\\\\n      -o  ${salmondir}/${sid}_0.salmon.salmon \\\\\n      --no-version-check\n    \"\"\"\n  else if ( !params.paired_global && params.run_salmon )\n    \"\"\"\n    salmon quant -l A \\\\\n      -i  ${transcripts} \\\\\n      -1  ${fastq_dir}/${read1} \\\\\n      -p  6 --validateMappings \\\\\n      -o  ${salmondir}/${sid}_0.salmon.salmon \\\\\n      --no-version-check\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping salmon\"\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "Mgenome",
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/mgenome",
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            },
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "markdups_complete_ch_1",
            "salmon_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "salmon_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_salmon ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_salmon ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_salmon ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "rsem": {
        "name_process": "rsem",
        "string_process": "\nprocess rsem {\n  tag  { params.run_rsem  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_rsem  ? params.cpu_high : params.cpu_min  }\n  memory { params.run_rsem  ?  params.mem_high : params.mem_min  }\n\n  input:\n                                              \n  val x from salmon_complete_ch.collect()\n  set sid, read1, read2, species from rsem_ch                         \n\n  output:\n  val \"x\" into rsem_complete_ch_1\n                                   \n\n  script:\n                                          \n  if ( species == \"Homo sapiens\" ){\n    genome=params.rsem_bowtie2_genome_hs }\n  else if ( species == \"Mus musculus\" ){\n    genome=params.star_genome_mm }\n  else if ( species == \"Rattus norvegicus\" ){\n      genome=params.star_genome_rn }\n  else{\n    genome = \"\"\n    println( \"Warning: Species not recognized.\" )\n  }\n\n               \n  if ( params.paired_global ){\n    rsemfiles = \"${fastq_dir}/${read1} ${fastq_dir}/${read2}\"\n    paired='--paired-end'}\n  else{\n    rsemfiles = \"${fastq_dir}/${read1}\"\n    paired=''}\n\n                                                                   \n  if( params.strandness_global == \"forward\" )\n    strand_global = 'forward'\n  else if ( params.strandness_global == \"reverse\" )\n    strand_global = 'reverse'\n  else\n    strand_global = 'none'\n\n  if ( params.run_rsem && params.pipelineProfile == \"uroscan\" )\n    \"\"\"\n    mkdir -p ${rsemdir}\n\n    ## Add check if files exists - then do not initiate rsem\n    ## this due to multiple crashes and very long time of execution\n\n    if [ ! -f ${rsemdir}/${sid}.rsem.genes.results ]; then\n      rsem-calculate-expression \\\\\n          --num-threads ${task.cpus} \\\\\n          --paired-end \\\\\n          --bowtie2 \\\\\n          --bowtie2-path /opt/software/rsem-bowtie2-env/bin \\\\\n          --estimate-rspd \\\\\n          --append-names \\\\\n          --no-bam-output \\\\\n          ${rsemfiles} \\\\\n          ${genome} \\\\\n          ${rsemdir}/${sid}.rsem\n    else\n      echo \"rsem output already found\"\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"rsem not run\"\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "  if ( species == \"Homo sapiens\" ){\n    genome=params.rsem_bowtie2_genome_hs }\n  else if ( species == \"Mus musculus\" ){\n    genome=params.star_genome_mm }\n  else if ( species == \"Rattus norvegicus\" ){\n      genome=params.star_genome_rn }\n  else{\n    genome = \"\"\n    println( \"Warning: Species not recognized.\" )\n  }\n\n               \n  if ( params.paired_global ){\n    rsemfiles = \"${fastq_dir}/${read1} ${fastq_dir}/${read2}\"\n    paired='--paired-end'}\n  else{\n    rsemfiles = \"${fastq_dir}/${read1}\"\n    paired=''}\n\n                                                                   \n  if( params.strandness_global == \"forward\" )\n    strand_global = 'forward'\n  else if ( params.strandness_global == \"reverse\" )\n    strand_global = 'reverse'\n  else\n    strand_global = 'none'\n\n  if ( params.run_rsem && params.pipelineProfile == \"uroscan\" )\n    \"\"\"\n    mkdir -p ${rsemdir}\n\n    ## Add check if files exists - then do not initiate rsem\n    ## this due to multiple crashes and very long time of execution\n\n    if [ ! -f ${rsemdir}/${sid}.rsem.genes.results ]; then\n      rsem-calculate-expression \\\\\n          --num-threads ${task.cpus} \\\\\n          --paired-end \\\\\n          --bowtie2 \\\\\n          --bowtie2-path /opt/software/rsem-bowtie2-env/bin \\\\\n          --estimate-rspd \\\\\n          --append-names \\\\\n          --no-bam-output \\\\\n          ${rsemfiles} \\\\\n          ${genome} \\\\\n          ${rsemdir}/${sid}.rsem\n    else\n      echo \"rsem output already found\"\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"rsem not run\"\n    \"\"\"",
        "nb_lignes_script": 53,
        "language_script": "bash",
        "tools": [
            "Mgenome"
        ],
        "tools_url": [
            "https://bio.tools/mgenome"
        ],
        "tools_dico": [
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            }
        ],
        "inputs": [
            "salmon_complete_ch",
            "rsem_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rsem_complete_ch_1"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_rsem ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_rsem ? params.cpu_high : params.cpu_min }",
            "memory { params.run_rsem ? params.mem_high : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "bladderreport": {
        "name_process": "bladderreport",
        "string_process": "\nprocess bladderreport {\n  tag  { params.run_bladderreport  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_bladderreport  ? params.cpu_mid : params.cpu_min  }\n  memory { params.run_bladderreport  ?  params.mem_mid : params.mem_min  }\n\n  input:\n  val x from rsem_complete_ch_1.collect()\n                                            \n  set sid, bam, strand, species, RIN, concentration from bam_bladderreport_ch\n\n  output:\n  val \"x\" into bladderreport_complete_ch\n\n  script:\n  bladderreport_scriptsdir = project_dir+'/bin/bladderreport'\n  bladderreport_scriptname = params.bladderreport_scriptname\n\n  if ( params.run_bladderreport )\n    \"\"\"\n    mkdir -p ${bladderreportdir}/tmp_${sid}\n    cp -r ${bladderreport_scriptsdir} ${bladderreportdir}/tmp_${sid}/\n    cd ${bladderreportdir}/tmp_${sid}/bladderreport\n\n    ## Run Rscript to generate markdown pdf report\n    Rscript -e \"library('rmarkdown'); \\\\\n      rmarkdown::render( \\\\\n        '${bladderreportdir}/tmp_${sid}/bladderreport/${bladderreport_scriptname}',  \\\\\n          params = list(   \\\\\n            sampleid='${sid}', \\\\\n            rsem_in='${rsemdir}/${sid}.rsem.genes.results', \\\\\n            star_qc='${stardir}/${sid}_Log.final.out', \\\\\n            RIN='${RIN}', \\\\\n            koncentration='${concentration}'),  \\\\\n          output_file='${bladderreportdir}/${sid}.STAR.bladderreport_anonymous.html')\"\n\n    ## Run Chromium to generate html from pdf\n    cd ${bladderreportdir}\n    chromium --headless --disable-gpu --no-sandbox --print-to-pdf=${sid}.STAR.bladderreport.pdf ${bladderreportdir}/${sid}.STAR.bladderreport_anonymous.html\n    mv -f ${bladderreportdir}/tmp_${sid}/bladderreport/${sid}.LundClassifier.rds ${bladderreportdir}/${sid}.LundClassifier.rds\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_bladderreport skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "  bladderreport_scriptsdir = project_dir+'/bin/bladderreport'\n  bladderreport_scriptname = params.bladderreport_scriptname\n\n  if ( params.run_bladderreport )\n    \"\"\"\n    mkdir -p ${bladderreportdir}/tmp_${sid}\n    cp -r ${bladderreport_scriptsdir} ${bladderreportdir}/tmp_${sid}/\n    cd ${bladderreportdir}/tmp_${sid}/bladderreport\n\n    ## Run Rscript to generate markdown pdf report\n    Rscript -e \"library('rmarkdown'); \\\\\n      rmarkdown::render( \\\\\n        '${bladderreportdir}/tmp_${sid}/bladderreport/${bladderreport_scriptname}',  \\\\\n          params = list(   \\\\\n            sampleid='${sid}', \\\\\n            rsem_in='${rsemdir}/${sid}.rsem.genes.results', \\\\\n            star_qc='${stardir}/${sid}_Log.final.out', \\\\\n            RIN='${RIN}', \\\\\n            koncentration='${concentration}'),  \\\\\n          output_file='${bladderreportdir}/${sid}.STAR.bladderreport_anonymous.html')\"\n\n    ## Run Chromium to generate html from pdf\n    cd ${bladderreportdir}\n    chromium --headless --disable-gpu --no-sandbox --print-to-pdf=${sid}.STAR.bladderreport.pdf ${bladderreportdir}/${sid}.STAR.bladderreport_anonymous.html\n    mv -f ${bladderreportdir}/tmp_${sid}/bladderreport/${sid}.LundClassifier.rds ${bladderreportdir}/${sid}.LundClassifier.rds\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_bladderreport skipped\"\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "PDEparams"
        ],
        "tools_url": [
            "https://bio.tools/PDEparams"
        ],
        "tools_dico": [
            {
                "name": "PDEparams",
                "uri": "https://bio.tools/PDEparams",
                "topic": [
                    [],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parameter fitting toolbox for partial differential equations in Python.",
                "homepage": "http://github.com/systemsmedicine/PDE_params"
            }
        ],
        "inputs": [
            "rsem_complete_ch_1",
            "bam_bladderreport_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bladderreport_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_bladderreport ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_bladderreport ? params.cpu_mid : params.cpu_min }",
            "memory { params.run_bladderreport ? params.mem_mid : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "filter_multimap": {
        "name_process": "filter_multimap",
        "string_process": "\nprocess filter_multimap {\n  tag  { params.run_featurecounts  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_featurecounts  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_featurecounts  ?  params.mem_standard : params.mem_min  }\n\n  input:\n  val x from bladderreport_complete_ch.collect()\n  set sid, bam, strand, species, RIN, concentration from bam_filter_multimap_ch\n\n  output:\n  val \"x\" into filter_multimap_complete_ch\n\n  script:\n  if ( params.run_featurecounts )\n    \"\"\"\n    echo \"bam: ${bam}\"\n    mkdir -p ${stardir_filtered}\n    cd ${stardir_filtered}\n    samtools view -b -F 0x104 ${stardir}/${bam} >  ${stardir_filtered}/${bam}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run filter_multimap skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  if ( params.run_featurecounts )\n    \"\"\"\n    echo \"bam: ${bam}\"\n    mkdir -p ${stardir_filtered}\n    cd ${stardir_filtered}\n    samtools view -b -F 0x104 ${stardir}/${bam} >  ${stardir_filtered}/${bam}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run filter_multimap skipped\"\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bladderreport_complete_ch",
            "bam_filter_multimap_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "filter_multimap_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_featurecounts ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_featurecounts ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_featurecounts ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "featurecounts": {
        "name_process": "featurecounts",
        "string_process": "\nprocess featurecounts {\n  tag  { params.run_featurecounts  ? \"$projectid\" : \"blank_run\"  }\n  cpus { params.run_featurecounts  ? params.cpu_max : params.cpu_min  }\n  memory { params.run_featurecounts  ?  params.mem_max : params.mem_min  }\n\n\tinput:\n  val x from filter_multimap_complete_ch.collect()\n\tval bams from bam_featurecounts_ch.collect()\n\n  output:\n\tval \"x\" into featurecounts_complete_ch\n\n  script:\n  fcounts_feature   =  'exon'\n\n  if( params.strandness_global == \"forward\" ) {\n    strand_global_numeric = 1 }\n  else if ( params.strandness_global == \"reverse\" ) {\n    strand_global_numeric = 2 }\n  else {\n    strand_global_numeric = 0 }\n\n                               \n  if ( params.species_global == \"Homo sapiens\" ) {\n    gtf = params.gtf_hs }\n  else if  ( params.species_global == \"Mus musculus\" ) {\n    gtf = params.gtf_mm }\n  else if  ( params.species_global == \"Rattus norvegicus\" ) {\n    gtf = params.gtf_rn }\n  else {\n    gtf=\"\" }\n\n  if( params.run_featurecounts && params.paired_global )\n    \"\"\"\n    mkdir -p ${featurecountsdir}\n    cd ${stardir_filtered}\n    bamstring=\\$(echo ${bams} | sed 's/,/ /g' | sed 's/\\\\[//g' | sed 's/\\\\]//g' )\n    echo \\${bamstring}\n    echo \"gtf: ${gtf}\"\n    featureCounts -T ${task.cpus} \\\\\n      -t ${fcounts_feature} \\\\\n      --extraAttributes gene_name,gene_type \\\\\n      -a ${gtf} -g gene_id  \\\\\n      -o ${featurecountsdir}/${projectid}_geneid.featureCounts.txt \\\\\n      -p \\\\\n      -s ${strand_global_numeric} \\${bamstring}\n    \"\"\"\n  else if( params.run_featurecounts && !params.paired_global )\n    \"\"\"\n    mkdir -p ${featurecountsdir}\n    cd ${stardir_filtered}\n    bamstring=\\$(echo $bams | sed 's/,/ /g' | sed 's/\\\\[//g' | sed 's/\\\\]//g' )\n    echo \\${bamstring}\n    echo \"gtf: ${gtf}\"\n    featureCounts -T ${task.cpus} \\\\\n      -t ${fcounts_feature} \\\\\n      --extraAttributes gene_name,gene_type \\\\\n      -a ${gtf} -g gene_id  \\\\\n      -o ${featurecountsdir}/${projectid}_geneid.featureCounts.txt \\\\\n      -s ${strand_global_numeric} \\${bamstring}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"featurecounts skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "  fcounts_feature   =  'exon'\n\n  if( params.strandness_global == \"forward\" ) {\n    strand_global_numeric = 1 }\n  else if ( params.strandness_global == \"reverse\" ) {\n    strand_global_numeric = 2 }\n  else {\n    strand_global_numeric = 0 }\n\n                               \n  if ( params.species_global == \"Homo sapiens\" ) {\n    gtf = params.gtf_hs }\n  else if  ( params.species_global == \"Mus musculus\" ) {\n    gtf = params.gtf_mm }\n  else if  ( params.species_global == \"Rattus norvegicus\" ) {\n    gtf = params.gtf_rn }\n  else {\n    gtf=\"\" }\n\n  if( params.run_featurecounts && params.paired_global )\n    \"\"\"\n    mkdir -p ${featurecountsdir}\n    cd ${stardir_filtered}\n    bamstring=\\$(echo ${bams} | sed 's/,/ /g' | sed 's/\\\\[//g' | sed 's/\\\\]//g' )\n    echo \\${bamstring}\n    echo \"gtf: ${gtf}\"\n    featureCounts -T ${task.cpus} \\\\\n      -t ${fcounts_feature} \\\\\n      --extraAttributes gene_name,gene_type \\\\\n      -a ${gtf} -g gene_id  \\\\\n      -o ${featurecountsdir}/${projectid}_geneid.featureCounts.txt \\\\\n      -p \\\\\n      -s ${strand_global_numeric} \\${bamstring}\n    \"\"\"\n  else if( params.run_featurecounts && !params.paired_global )\n    \"\"\"\n    mkdir -p ${featurecountsdir}\n    cd ${stardir_filtered}\n    bamstring=\\$(echo $bams | sed 's/,/ /g' | sed 's/\\\\[//g' | sed 's/\\\\]//g' )\n    echo \\${bamstring}\n    echo \"gtf: ${gtf}\"\n    featureCounts -T ${task.cpus} \\\\\n      -t ${fcounts_feature} \\\\\n      --extraAttributes gene_name,gene_type \\\\\n      -a ${gtf} -g gene_id  \\\\\n      -o ${featurecountsdir}/${projectid}_geneid.featureCounts.txt \\\\\n      -s ${strand_global_numeric} \\${bamstring}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"featurecounts skipped\"\n    \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [
            "GTfold",
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/gtfold",
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "GTfold",
                "uri": "https://bio.tools/gtfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0271",
                                    "term": "Structure prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "GTfold is a fast, scalable multicore code for predicting RNA secondary structure that is one to two orders of magnitude faster than the de facto standard programs and achieves comparable accuracy of prediction.",
                "homepage": "http://gtfold.sourceforge.net/"
            },
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "filter_multimap_complete_ch",
            "bam_featurecounts_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "featurecounts_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_featurecounts ? \"$projectid\" : \"blank_run\" }",
            "cpus { params.run_featurecounts ? params.cpu_max : params.cpu_min }",
            "memory { params.run_featurecounts ? params.mem_max : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "rnaseqmetrics": {
        "name_process": "rnaseqmetrics",
        "string_process": "\nprocess rnaseqmetrics {\n  tag  { params.run_rnaseqmetrics  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_rnaseqmetrics  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_rnaseqmetrics  ?  params.mem_standard : params.mem_min  }\n\n  input:\n  val x from featurecounts_complete_ch.collect()\n  set sid, bam, strand, species, RIN, concentration from bam_rnaseqmetrics_ch\n\n  output:\n  val \"x\" into rnaseqmetrics_complete_ch\n\n  script:\n  if ( strand == \"forward\" ) {\n    strand_input=\"FIRST_READ_TRANSCRIPTION_STRAND\" }\n  else if ( params.strandness_global == \"reverse\" ) {\n    strand_input=\"SECOND_READ_TRANSCRIPTION_STRAND\" }\n  else {\n    strand_input=\"NONE\" }\n\n  if ( species == \"Homo sapiens\" ){\n    refflat = params.picard_refflat_hs\n    rrna = params.picard_rrna_hs}\n  else if ( species == \"Mus musculus\" ){\n    refflat = params.picard_refflat_mm\n    rrna = params.picard_rrna_mm }\n  else if ( species == \"Rattus norvegicus\" ){\n      refflat = params.picard_refflat_rn\n      rrna = params.picard_rrna_rn }\n  else{\n    refflat = \"\"\n    rrna = \"\"\n  }\n\n  if ( params.run_rnaseqmetrics && params.pipelineProfile == \"uroscan\")\n    \"\"\"\n    echo \"strand: ${strand_input}\"\n    echo \"refflat file: ${refflat}\"\n    mkdir -p ${rnaseqmetricsdir}\n\n    picard CollectRnaSeqMetrics \\\\\n        INPUT=${stardir}/${bam} \\\\\n        OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\\\\n        REF_FLAT=${refflat} \\\\\n        STRAND=${strand_input}\n    \"\"\"\n  else if ( params.run_rnaseqmetrics && species == \"Rattus norvegicus\")\n    \"\"\"\n    echo \"strand: ${strand_input}\"\n    echo \"refflat file: ${refflat}\"\n    mkdir -p ${rnaseqmetricsdir}\n\n    picard CollectRnaSeqMetrics \\\\\n        INPUT=${stardir}/${bam} \\\\\n        OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\\\\n        REF_FLAT=${refflat} \\\\\n        STRAND=${strand_input}\n    \"\"\"\n  else if ( params.run_rnaseqmetrics && (params.pipelineProfile == \"rnaseq_mrna\" || params.pipelineProfile == \"rnaseq_total\"))\n    \"\"\"\n    echo \"strand: ${strand_input}\"\n    echo \"rrna file: ${rrna}\"\n    echo \"refflat file: ${refflat}\"\n    mkdir -p ${rnaseqmetricsdir}\n\n    # note that rrna ribosomal intervals file seem not to work in present state.\n    picard CollectRnaSeqMetrics \\\\\n      INPUT=${stardir}/${bam} \\\\\n      OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\\\\n      REF_FLAT=${refflat} \\\\\n      STRAND=${strand_input}\n      ## RIBOSOMAL_INTERVALS=${rrna}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"picard rnaseqmetrics skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 77,
        "string_script": "  if ( strand == \"forward\" ) {\n    strand_input=\"FIRST_READ_TRANSCRIPTION_STRAND\" }\n  else if ( params.strandness_global == \"reverse\" ) {\n    strand_input=\"SECOND_READ_TRANSCRIPTION_STRAND\" }\n  else {\n    strand_input=\"NONE\" }\n\n  if ( species == \"Homo sapiens\" ){\n    refflat = params.picard_refflat_hs\n    rrna = params.picard_rrna_hs}\n  else if ( species == \"Mus musculus\" ){\n    refflat = params.picard_refflat_mm\n    rrna = params.picard_rrna_mm }\n  else if ( species == \"Rattus norvegicus\" ){\n      refflat = params.picard_refflat_rn\n      rrna = params.picard_rrna_rn }\n  else{\n    refflat = \"\"\n    rrna = \"\"\n  }\n\n  if ( params.run_rnaseqmetrics && params.pipelineProfile == \"uroscan\")\n    \"\"\"\n    echo \"strand: ${strand_input}\"\n    echo \"refflat file: ${refflat}\"\n    mkdir -p ${rnaseqmetricsdir}\n\n    picard CollectRnaSeqMetrics \\\\\n        INPUT=${stardir}/${bam} \\\\\n        OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\\\\n        REF_FLAT=${refflat} \\\\\n        STRAND=${strand_input}\n    \"\"\"\n  else if ( params.run_rnaseqmetrics && species == \"Rattus norvegicus\")\n    \"\"\"\n    echo \"strand: ${strand_input}\"\n    echo \"refflat file: ${refflat}\"\n    mkdir -p ${rnaseqmetricsdir}\n\n    picard CollectRnaSeqMetrics \\\\\n        INPUT=${stardir}/${bam} \\\\\n        OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\\\\n        REF_FLAT=${refflat} \\\\\n        STRAND=${strand_input}\n    \"\"\"\n  else if ( params.run_rnaseqmetrics && (params.pipelineProfile == \"rnaseq_mrna\" || params.pipelineProfile == \"rnaseq_total\"))\n    \"\"\"\n    echo \"strand: ${strand_input}\"\n    echo \"rrna file: ${rrna}\"\n    echo \"refflat file: ${refflat}\"\n    mkdir -p ${rnaseqmetricsdir}\n\n    # note that rrna ribosomal intervals file seem not to work in present state.\n    picard CollectRnaSeqMetrics \\\\\n      INPUT=${stardir}/${bam} \\\\\n      OUTPUT=${rnaseqmetricsdir}/${sid}_bam.collectRNAseq.metrics.txt \\\\\n      REF_FLAT=${refflat} \\\\\n      STRAND=${strand_input}\n      ## RIBOSOMAL_INTERVALS=${rrna}\n    \"\"\"\n  else\n    \"\"\"\n    echo \"picard rnaseqmetrics skipped\"\n    \"\"\"",
        "nb_lignes_script": 63,
        "language_script": "bash",
        "tools": [
            "corRna",
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/corrna",
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "corRna",
                "uri": "https://bio.tools/corrna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2441",
                                    "term": "RNA structure prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0483",
                                    "term": "RNA inverse folding"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0483",
                                    "term": "Nucleic acid folding family identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0483",
                                    "term": "Structured RNA prediction and optimisation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "corRna is a web server for predicting the multiple point deleterious mutations in structural RNAs. Users can apply search heuristics to improve the quality of the predictions.",
                "homepage": "http://corrna.cs.mcgill.ca"
            },
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "featurecounts_complete_ch",
            "bam_rnaseqmetrics_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rnaseqmetrics_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_rnaseqmetrics ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_rnaseqmetrics ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_rnaseqmetrics ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "qualimap": {
        "name_process": "qualimap",
        "string_process": "\nprocess qualimap {\n  tag  { params.run_qualimap  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_qualimap  ? params.cpu_high : params.cpu_min  }\n  memory { params.run_qualimap  ?  params.mem_high : params.mem_min  }\n\n  input:\n  val x from rnaseqmetrics_complete_ch.collect()\n  set sid, bam, strand, species, RIN, concentration from bam_qualimap_ch\n\n  output:\n  val \"x\" into qualimap_complete_ch\n\n  script:\n  if ( species == \"Homo sapiens\" ){\n    gtf = params.gtf_hs}\n  else if  ( species == \"Mus musculus\" ){\n    gtf = params.gtf_mm}\n  else if  ( species == \"Rattus norvegicus\" ){\n    gtf = params.gtf_rn}\n  else{\n    gtf=\"\"}\n\n  if ( params.run_qualimap )\n    \"\"\"\n    mkdir -p ${qualimapdir}\n    qualimap --java-mem-size=90G rnaseq -bam ${stardir}/${bam} -gtf ${gtf} -pe -outdir ${qualimapdir}/${sid}.STAR.qualimap.folder\n    \"\"\"\n  else\n    \"\"\"\n    echo \"qualimap skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "  if ( species == \"Homo sapiens\" ){\n    gtf = params.gtf_hs}\n  else if  ( species == \"Mus musculus\" ){\n    gtf = params.gtf_mm}\n  else if  ( species == \"Rattus norvegicus\" ){\n    gtf = params.gtf_rn}\n  else{\n    gtf=\"\"}\n\n  if ( params.run_qualimap )\n    \"\"\"\n    mkdir -p ${qualimapdir}\n    qualimap --java-mem-size=90G rnaseq -bam ${stardir}/${bam} -gtf ${gtf} -pe -outdir ${qualimapdir}/${sid}.STAR.qualimap.folder\n    \"\"\"\n  else\n    \"\"\"\n    echo \"qualimap skipped\"\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "GTfold",
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/gtfold",
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "GTfold",
                "uri": "https://bio.tools/gtfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0271",
                                    "term": "Structure prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "GTfold is a fast, scalable multicore code for predicting RNA secondary structure that is one to two orders of magnitude faster than the de facto standard programs and achieves comparable accuracy of prediction.",
                "homepage": "http://gtfold.sourceforge.net/"
            },
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "rnaseqmetrics_complete_ch",
            "bam_qualimap_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qualimap_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_qualimap ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_qualimap ? params.cpu_high : params.cpu_min }",
            "memory { params.run_qualimap ? params.mem_high : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "rseqc": {
        "name_process": "rseqc",
        "string_process": "\nprocess rseqc {\n  tag  { params.run_rseqc  ? \"${projectid}__${sid}\" : \"blank_run\"  }\n  cpus { params.run_rseqc  ? params.cpu_high : params.cpu_min  }\n  memory { params.run_rseqc  ?  params.mem_high : params.mem_min  }\n\n  input:\n  val x from qualimap_complete_ch.collect()\n  set sid, bam, strand, species, RIN, concentration from bam_rseqc_ch\n\n  output:\n  val \"x\" into rseqc_complete_ch\n\n  script:\n                               \n  if ( species == \"Homo sapiens\" ){\n    rcqc_bed = params.rcqc_bed\n    rcqc_housekeeping = params.rcqc_housekeeping\n  }\n  else if  ( species == \"Mus musculus\" ){\n    rcqc_bed = params.rcqc_bed_mm\n    rcqc_housekeeping = params.rcqc_housekeeping_mm\n  }\n  else{\n    rcqc_bed=\"\"}\n\n  if ( params.run_rseqc && ( species == \"Mus musculus\" || species == \"Homo sapiens\") )\n    \"\"\"\n    mkdir -p ${rseqcdir}\n\n    geneBody_coverage.py \\\\\n      -i ${stardir}/${bam} \\\\\n      -r ${rcqc_housekeeping}\\\\\n      -o ${rseqcdir}/${sid}.genebodycov\n\n    inner_distance.py \\\\\n      -i ${stardir}/${bam} \\\\\n      -r ${rcqc_bed} \\\\\n      -o ${rseqcdir}/${sid}.innerdistance\n\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipped rseeqc\"\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "  if ( species == \"Homo sapiens\" ){\n    rcqc_bed = params.rcqc_bed\n    rcqc_housekeeping = params.rcqc_housekeeping\n  }\n  else if  ( species == \"Mus musculus\" ){\n    rcqc_bed = params.rcqc_bed_mm\n    rcqc_housekeeping = params.rcqc_housekeeping_mm\n  }\n  else{\n    rcqc_bed=\"\"}\n\n  if ( params.run_rseqc && ( species == \"Mus musculus\" || species == \"Homo sapiens\") )\n    \"\"\"\n    mkdir -p ${rseqcdir}\n\n    geneBody_coverage.py \\\\\n      -i ${stardir}/${bam} \\\\\n      -r ${rcqc_housekeeping}\\\\\n      -o ${rseqcdir}/${sid}.genebodycov\n\n    inner_distance.py \\\\\n      -i ${stardir}/${bam} \\\\\n      -r ${rcqc_bed} \\\\\n      -o ${rseqcdir}/${sid}.innerdistance\n\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipped rseeqc\"\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "JSpecies"
        ],
        "tools_url": [
            "https://bio.tools/jspecies"
        ],
        "tools_dico": [
            {
                "name": "JSpecies",
                "uri": "https://bio.tools/jspecies",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolutionary biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0797",
                            "term": "Comparative genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolution"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An easy to use, biologist-centric software designed to measure the probability if two genomes belonging to the same species or not.",
                "homepage": "http://www.imedea.uib-csic.es/jspecies/index.html"
            }
        ],
        "inputs": [
            "qualimap_complete_ch",
            "bam_rseqc_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rseqc_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_rseqc ? \"${projectid}__${sid}\" : \"blank_run\" }",
            "cpus { params.run_rseqc ? params.cpu_high : params.cpu_min }",
            "memory { params.run_rseqc ? params.mem_high : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n  tag  { params.run_multiqc  ? \"${projectid}\" : \"blank_run\"  }\n  cpus { params.run_multiqc  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_multiqc  ?  params.mem_standard : params.mem_min  }\n\n  input:\n                                                   \n                                              \n  val x from rseqc_complete_ch.collect()\n                                                \n                                           \n                                           \n\n  output:\n  val \"x\" into multiqc_complete_ch\n\n  script:\n  mqcreport = multiqcdir + '/' + projectid + '_multiqc_report'\n\n  if ( params.run_multiqc )\n    \"\"\"\n    ## use -f flag to overwrite if multiqc is already present from failed run.\n    cd ${delivery_dir}\n    multiqc -n ${mqcreport} \\\\\n      --interactive \\\\\n      -f \\\\\n      -o ${multiqcdir} .\n\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_multiqc skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  mqcreport = multiqcdir + '/' + projectid + '_multiqc_report'\n\n  if ( params.run_multiqc )\n    \"\"\"\n    ## use -f flag to overwrite if multiqc is already present from failed run.\n    cd ${delivery_dir}\n    multiqc -n ${mqcreport} \\\\\n      --interactive \\\\\n      -f \\\\\n      -o ${multiqcdir} .\n\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_multiqc skipped\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "rseqc_complete_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "multiqc_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_multiqc ? \"${projectid}\" : \"blank_run\" }",
            "cpus { params.run_multiqc ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_multiqc ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "md5sum": {
        "name_process": "md5sum",
        "string_process": "\nprocess md5sum {\n  tag  { params.run_md5sum  ? \"${projectid}\" : \"blank_run\"  }\n  cpus { params.run_md5sum  ? params.cpu_high : params.cpu_min  }\n  memory { params.run_md5sum  ?  params.mem_high : params.mem_min  }\n\n  input:\n  val x from multiqc_complete_ch.collect()\n\n  output:\n  val \"x\" into md5sum_complete_ch\n\n  script:\n  if ( params.run_md5sum )\n    \"\"\"\n    if [[ -d \"${fastq_dir}\" ]]; then\n      cd ${fastq_dir}\n      find . -type f -exec md5sum {} \\\\; > md5sum_fastq.txt ; echo\n    fi\n    if [[ -d \"${stardir}\" ]]; then\n      cd ${stardir}\n      find . -type f -exec md5sum {} \\\\; > md5sum_star.txt ; echo\n    fi\n    if [[ -d \"${featurecountsdir}\" ]]; then\n      cd ${featurecountsdir}\n      find . -type f -exec md5sum {} \\\\; > md5sum_featurecounts.txt ; echo\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping run_md5sum_delivery\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "  if ( params.run_md5sum )\n    \"\"\"\n    if [[ -d \"${fastq_dir}\" ]]; then\n      cd ${fastq_dir}\n      find . -type f -exec md5sum {} \\\\; > md5sum_fastq.txt ; echo\n    fi\n    if [[ -d \"${stardir}\" ]]; then\n      cd ${stardir}\n      find . -type f -exec md5sum {} \\\\; > md5sum_star.txt ; echo\n    fi\n    if [[ -d \"${featurecountsdir}\" ]]; then\n      cd ${featurecountsdir}\n      find . -type f -exec md5sum {} \\\\; > md5sum_featurecounts.txt ; echo\n    fi\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping run_md5sum_delivery\"\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "multiqc_complete_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "md5sum_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_md5sum ? \"${projectid}\" : \"blank_run\" }",
            "cpus { params.run_md5sum ? params.cpu_high : params.cpu_min }",
            "memory { params.run_md5sum ? params.mem_high : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "stage_delivery": {
        "name_process": "stage_delivery",
        "string_process": "\nprocess stage_delivery {\n  tag  { params.run_stage_delivery  ? \"${projectid}\" : \"blank_run\"  }\n  cpus { params.run_stage_delivery  ? params.cpu_standard : params.cpu_min  }\n  memory { params.run_stage_delivery  ?  params.mem_standard : params.mem_min  }\n\n  input:\n  val x from md5sum_complete_ch.collect()\n                                                  \n\n  output:\n  val \"x\" into stage_delivery_complete_ch\n\n  script:\n  if ( params.run_stage_delivery )\n    \"\"\"\n    ## additional cleanups (star and bladderreport)\n    ## -------------------------------------------\n    if [ -d ${bladderreportdir} ]; then\n      cd ${bladderreportdir}\n      find . -type d -name \"tmp_*\" -exec rm -r {} +\n    fi\n\n    if [ -d ${stardir} ]; then\n      cd ${stardir}\n      find . -type d -name \"*__STARtmp\" -exec rm -r {} +\n    fi\n\n    if [ -d ${markdupstempdir} ]; then\n      rm -rf ${markdupstempdir}\n    fi\n\n    if [[ -d ${stardir_filtered} ]]; then\n      rm -rf ${stardir_filtered}\n    fi\n\n    ##  copy sample sheet to delivery\n    ## ------------------------------\n    mkdir -p ${samplesheetsdir}\n    cd ${project_dir}\n    cp ${samplesheet} ${samplesheetsdir}/\n    cp ${sheet_nf} ${samplesheetsdir}/\n\n\n    ##  scripts & configs  (executables bins etc, version specific) and configs (project specific)\n    ## --------------------------------------------------------------\n\n    mkdir -p ${deliveryscripts}\n    cp ${project_dir}/rnaseq-driver.bash ${deliveryscripts}/\n    cp ${project_dir}/rnaseq-main.nf ${deliveryscripts}/\n    cp -r ${project_dir}/bin ${deliveryscripts}/\n    cp ${project_dir}/nextflow.config* ${deliveryscripts}/\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_setup_deliverytemp skipped\"\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "  if ( params.run_stage_delivery )\n    \"\"\"\n    ## additional cleanups (star and bladderreport)\n    ## -------------------------------------------\n    if [ -d ${bladderreportdir} ]; then\n      cd ${bladderreportdir}\n      find . -type d -name \"tmp_*\" -exec rm -r {} +\n    fi\n\n    if [ -d ${stardir} ]; then\n      cd ${stardir}\n      find . -type d -name \"*__STARtmp\" -exec rm -r {} +\n    fi\n\n    if [ -d ${markdupstempdir} ]; then\n      rm -rf ${markdupstempdir}\n    fi\n\n    if [[ -d ${stardir_filtered} ]]; then\n      rm -rf ${stardir_filtered}\n    fi\n\n    ##  copy sample sheet to delivery\n    ## ------------------------------\n    mkdir -p ${samplesheetsdir}\n    cd ${project_dir}\n    cp ${samplesheet} ${samplesheetsdir}/\n    cp ${sheet_nf} ${samplesheetsdir}/\n\n\n    ##  scripts & configs  (executables bins etc, version specific) and configs (project specific)\n    ## --------------------------------------------------------------\n\n    mkdir -p ${deliveryscripts}\n    cp ${project_dir}/rnaseq-driver.bash ${deliveryscripts}/\n    cp ${project_dir}/rnaseq-main.nf ${deliveryscripts}/\n    cp -r ${project_dir}/bin ${deliveryscripts}/\n    cp ${project_dir}/nextflow.config* ${deliveryscripts}/\n    \"\"\"\n  else\n    \"\"\"\n    echo \"run_setup_deliverytemp skipped\"\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "md5sum_complete_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stage_delivery_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_stage_delivery ? \"${projectid}\" : \"blank_run\" }",
            "cpus { params.run_stage_delivery ? params.cpu_standard : params.cpu_min }",
            "memory { params.run_stage_delivery ? params.mem_standard : params.mem_min }"
        ],
        "when": "",
        "stub": ""
    },
    "finalize_pipeline": {
        "name_process": "finalize_pipeline",
        "string_process": "\nprocess finalize_pipeline {\n\n  tag  { params.run_finalize_pipeline  ? \"${projectid}\" : \"blank_run\"  }\n  memory params.mem_min\n  cpus params.cpu_min\n\n  input:\n  val x from  stage_delivery_complete_ch.collect()\n\n  output:\n  val \"x\" into finalize_pipeline_complete_ch\n\n  script:\n  if (params.run_finalize_pipeline)\n    \"\"\"\n    ## Copy QC files to ctg-qc\n    cp -r ${multiqcdir} ${ctg_qc_dir}\n    cp -r ${fastqcdir} ${ctg_qc_dir}\n    cd ${project_dir}\n    cp ${samplesheet} ${ctg_qc_dir}\n\n    ## Write cronlog\n    touch ${runfolder_path}/ctg.rnaseq.${projectid}.done\n    cronlog_all=\"/projects/fs1/shared/ctg-cron/ctg-cron.log\"\n    echo \"\\$(date): ${runfolder}: DONE: rnaseq (${projectid})\" >> \\${cronlog_all}\n    cronlog=\"/projects/fs1/shared/ctg-cron/ctg-pipe-cron/logs/rnaseq/rnaseq.${runfolder}.${samplesheet}.log\"\n    echo \"\\$(date): ${runfolder}: DONE: rnaseq (${projectid})\" >> \\${cronlog}\n\n    ## Chmod all dirs\n    find ${delivery_dir} -user $USER -exec chmod g+rw {} +\n    find ${project_dir} -user $USER -exec chmod g+rw {} +\n    find ${ctg_qc_dir} -user $USER -exec chmod g+rw {} +\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping run_finalize_pipeline\"\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "  if (params.run_finalize_pipeline)\n    \"\"\"\n    ## Copy QC files to ctg-qc\n    cp -r ${multiqcdir} ${ctg_qc_dir}\n    cp -r ${fastqcdir} ${ctg_qc_dir}\n    cd ${project_dir}\n    cp ${samplesheet} ${ctg_qc_dir}\n\n    ## Write cronlog\n    touch ${runfolder_path}/ctg.rnaseq.${projectid}.done\n    cronlog_all=\"/projects/fs1/shared/ctg-cron/ctg-cron.log\"\n    echo \"\\$(date): ${runfolder}: DONE: rnaseq (${projectid})\" >> \\${cronlog_all}\n    cronlog=\"/projects/fs1/shared/ctg-cron/ctg-pipe-cron/logs/rnaseq/rnaseq.${runfolder}.${samplesheet}.log\"\n    echo \"\\$(date): ${runfolder}: DONE: rnaseq (${projectid})\" >> \\${cronlog}\n\n    ## Chmod all dirs\n    find ${delivery_dir} -user $USER -exec chmod g+rw {} +\n    find ${project_dir} -user $USER -exec chmod g+rw {} +\n    find ${ctg_qc_dir} -user $USER -exec chmod g+rw {} +\n    \"\"\"\n  else\n    \"\"\"\n    echo \"skipping run_finalize_pipeline\"\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "stage_delivery_complete_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "finalize_pipeline_complete_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "cirrina__ctg-rnaseq",
        "directive": [
            "tag { params.run_finalize_pipeline ? \"${projectid}\" : \"blank_run\" }",
            "memory params.mem_min",
            "cpus params.cpu_min"
        ],
        "when": "",
        "stub": ""
    }
}
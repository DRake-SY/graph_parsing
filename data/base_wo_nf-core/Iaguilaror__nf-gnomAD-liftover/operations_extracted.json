{
    "OPERATION_1": {
        "string": "Channel\n  .fromPath(\"${params.vcf_dir}/*vcf*\")\n\t.map{ file -> tuple(get_sample_prefix(file), file) }\n\t.groupTuple()\n\t          \n  .set{ vcf_inputs}",
        "origin": [
            [
                "\"${params.vcf_dir}/*vcf*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "vcf_inputs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n  .fromPath(\"${params.vcf_dir}/*vcf.bgz\")\n\t          \n  .set{ also_vcf_inputs }",
        "origin": [
            [
                "\"${params.vcf_dir}/*vcf.bgz\"",
                "A"
            ]
        ],
        "gives": [
            [
                "also_vcf_inputs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n\t.fromPath( [\"${params.genome_fasta}*\" , \"${params.chainfile}\"], checkIfExists: true)\n  .toList()\n\t.set{ liftover_references }",
        "origin": [
            [
                "[\"${params.genome_fasta}*\" , \"${params.chainfile}\"], checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "liftover_references",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n\t.fromPath(\"${module_mk_pre0_split_vcf}/*\")\n\t.toList()\n\t.set{ mkfiles_pre0 }",
        "origin": [
            [
                "\"${module_mk_pre0_split_vcf}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pre0",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n\t.fromPath(\"${module_mk_pre1_filtering_PASS}/*\")\n\t.toList()\n\t.set{ mkfiles_pre1 }",
        "origin": [
            [
                "\"${module_mk_pre1_filtering_PASS}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pre1",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n\t.fromPath(\"${module_mk_001_liftover}/*\")\n\t.toList()\n\t.set{ mkfiles_001 }",
        "origin": [
            [
                "\"${module_mk_001_liftover}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_001",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n\t.fromPath(\"${module_mk_002_edit_vcf}/*\")\n\t.toList()\n\t.set{ mkfiles_002 }",
        "origin": [
            [
                "\"${module_mk_002_edit_vcf}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_002",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n\t.fromPath(\"${module_mk_003_concatenate_vcf}/*\")\n\t.toList()\n\t.set{ mkfiles_003 }",
        "origin": [
            [
                "\"${module_mk_003_concatenate_vcf}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_003",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n\t.fromPath(\"${module_mk_004_sort_and_compress}/*\")\n\t.toList()\n\t.set{ mkfiles_004 }",
        "origin": [
            [
                "\"${module_mk_004_sort_and_compress}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_004",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n\t.fromPath(\"${module_mk_pos1_count_lifted_variants}/*\")\n\t.toList()\n\t.set{ mkfiles_pos1 }",
        "origin": [
            [
                "\"${module_mk_pos1_count_lifted_variants}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pos1",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "nfsummary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "nfsummary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "pipelinesummary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "pipelinesummary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "results_pre0_split_vcf\n\t.toList()\n\t.flatten()\n\t          \n\t.set{ delayed_results_pre0_split_vcf }",
        "origin": [
            [
                "results_pre0_split_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "delayed_results_pre0_split_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "results_pre1_filtering_PASS\n\t.toList()\n\t.flatten()\n\t          \n\t.set{ delayed_results_pre1_filtering_PASS }",
        "origin": [
            [
                "results_pre1_filtering_PASS",
                "P"
            ]
        ],
        "gives": [
            [
                "delayed_results_pre1_filtering_PASS",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "results_001_liftover_mapped\n\t.toList()\n\t.flatten()\n\t          \n\t.set{ delayed_results_001_liftover_mapped }",
        "origin": [
            [
                "results_001_liftover_mapped",
                "P"
            ]
        ],
        "gives": [
            [
                "delayed_results_001_liftover_mapped",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "results_002_edit_vcf\n\t.toList()\n\t.flatten()\n\t          \n\t.set{ delayed_results_002_edit_vcf }",
        "origin": [
            [
                "results_002_edit_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "delayed_results_002_edit_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "delayed_results_002_edit_vcf\n                                      \n\t.map{ file -> tuple(get_sample_prefix(file), file) }\n\t.groupTuple()\n\t          \n\t.set{ multiplechunks_from_results_002_edit_vcf }",
        "origin": [
            [
                "delayed_results_002_edit_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "multiplechunks_from_results_002_edit_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "results_003_concatenate_vcf\n\t.toList()\n\t.flatten()\n\t          \n\t.set{ delayed_results_003_concatenate_vcf }",
        "origin": [
            [
                "results_003_concatenate_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "delayed_results_003_concatenate_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "also_vcf_inputs\n\t.mix(also_results_003_concatenate_vcf)\n\t.map{ file -> tuple(get_sample_prefix(file), file) }\n\t.groupTuple()\n\t.set{ inputs_for_pos1 }",
        "origin": [
            [
                "also_vcf_inputs",
                "P"
            ],
            [
                "also_results_003_concatenate_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "inputs_for_pos1",
                "P"
            ]
        ]
    }
}
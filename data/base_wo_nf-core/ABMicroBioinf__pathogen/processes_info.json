{
    "SAMTOOLS_VIEW": {
        "name_process": "SAMTOOLS_VIEW",
        "string_process": "\nprocess SAMTOOLS_VIEW {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools view $options.args $bam > ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools view $options.args $bam > ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FLYE": {
        "name_process": "FLYE",
        "string_process": "\nprocess FLYE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    conda (params.enable_conda ? 'bioconda::flye=v2.9' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/flye%3A2.9--py39h39abbe0_0\"\n    } else {\n        container \"quay.io/biocontainers/flye%3A2.9--py39h39abbe0_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*_contigs.fasta') , emit: assembly\n    tuple val(meta), path('*contig_info.txt') , emit: info\n    tuple val(meta), path('*_graph.gfa') ,    emit: graph\n    path  'versions.yml',             emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    flye $options.args -t ${task.cpus}  --nano-raw $reads -o assembly &> flye_${prefix}.log\n    mv assembly/assembly.fasta ${prefix}_contigs.fasta\n    mv assembly/assembly_info.txt ${prefix}_contig_info.txt\n    mv assembly/assembly_graph.gfa ${prefix}_graph.gfa\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(flye --version)\n    END_VERSIONS\n\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 42,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    flye $options.args -t ${task.cpus}  --nano-raw $reads -o assembly &> flye_${prefix}.log\n    mv assembly/assembly.fasta ${prefix}_contigs.fasta\n    mv assembly/assembly_info.txt ${prefix}_contig_info.txt\n    mv assembly/assembly_graph.gfa ${prefix}_graph.gfa\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(flye --version)\n    END_VERSIONS\n\n    \n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::flye=v2.9' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/flye%3A2.9--py39h39abbe0_0\" } else { container \"quay.io/biocontainers/flye%3A2.9--py39h39abbe0_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RACON": {
        "name_process": "RACON",
        "string_process": "\nprocess RACON {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'racon=1.4.20-1' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/racon:1.4.20--h9a82719_1\"\n    } else {\n        container \"quay.io/biocontainers/racon:1.4.20--h9a82719_1\"\n    }\n\n    input:\n                                                                                     \n    tuple val(meta), path(longreads)\n    tuple val(meta), path(paf)\n    tuple val(meta), path(assembly)\n\n\n    output:\n    tuple val(meta), path('*_racon.fasta') , emit: assembly\n    path  'versions.yml'                     , emit: versions\n\n    script:\n    def round = params.racon_round ? params.racon_round : \"\"\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    racon -t ${task.cpus} ${longreads} ${paf} ${assembly} > ${prefix}_${round}_racon.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(racon --version 2>&1)\n    END_VERSIONS\n    \n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def round = params.racon_round ? params.racon_round : \"\"\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    racon -t ${task.cpus} ${longreads} ${paf} ${assembly} > ${prefix}_${round}_racon.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(racon --version 2>&1)\n    END_VERSIONS\n    \n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "meta",
            "longreads",
            "meta",
            "paf",
            "meta",
            "assembly"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'racon=1.4.20-1' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/racon:1.4.20--h9a82719_1\" } else { container \"quay.io/biocontainers/racon:1.4.20--h9a82719_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SEQ_STATS": {
        "name_process": "SEQ_STATS",
        "string_process": "\nprocess SEQ_STATS{\n\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    input:\n    tuple val(meta), path(fqchk_out)\n\n    output:\n    tuple val(meta), path('*_seqstats.txt'), emit: stats\n\n    script:\n        def software = getSoftwareName(task.process)\n        def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n        def seqtype = meta.single_end ? \"single\" : \"paired\"\n        if( options.args == \"long\"){\n            seqtype = \"single\"\n        }\n\n        \"\"\"\n        parse_seqtk_fqchk.pl  -t  ${seqtype} -i ${fqchk_out} -s ${meta.id} > ${prefix}_seqstats.txt\n        \"\"\"\n   \n}",
        "nb_lignes_process": 27,
        "string_script": "        def software = getSoftwareName(task.process)\n        def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n        def seqtype = meta.single_end ? \"single\" : \"paired\"\n        if( options.args == \"long\"){\n            seqtype = \"single\"\n        }\n\n        \"\"\"\n        parse_seqtk_fqchk.pl  -t  ${seqtype} -i ${fqchk_out} -s ${meta.id} > ${prefix}_seqstats.txt\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fqchk_out"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "GFF2FEATURES": {
        "name_process": "GFF2FEATURES",
        "string_process": "\nprocess GFF2FEATURES{\n\n    tag \"$meta.id\"\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    input:\n    tuple val(meta), path(gff)\n\n    output:\n    tuple val(meta), path('*.tsv'), emit: feature_count\n\n    script:\n        def software = getSoftwareName(task.process)\n        def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n        \"\"\"\n        extract_info_from_gff.pl  -g ${gff} -n ${meta.id} > ${prefix}.feature_count.tsv\n        \"\"\"\n   \n}",
        "nb_lignes_process": 21,
        "string_script": "        def software = getSoftwareName(task.process)\n        def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n        \"\"\"\n        extract_info_from_gff.pl  -g ${gff} -n ${meta.id} > ${prefix}.feature_count.tsv\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "ASSEMBLY_STATS": {
        "name_process": "ASSEMBLY_STATS",
        "string_process": "\nprocess ASSEMBLY_STATS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    \n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'assembly-stats=1.0.1' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/assembly-stats%3A1.0.1--h7d875b9_4\"\n    } else {\n        container \"quay.io/biocontainers/assembly-stats:1.0.1--h7d875b9_4\"\n    }\n\n    input:\n    tuple val(meta), path(assembly)\n\n    output:\n    tuple val(meta), file(\"*.tsv\"), emit: stats\n    path (\"versions.yml\"), emit: versions\n                         \n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                               \n    def input = assembly.join('')\n    \n    \"\"\"\n    assembly-stats -t $input > ${prefix}_assembly_stats.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(assembly-stats -v 2>&1 | sed -e 's/^Version: //;')\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                               \n    def input = assembly.join('')\n    \n    \"\"\"\n    assembly-stats -t $input > ${prefix}_assembly_stats.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(assembly-stats -v 2>&1 | sed -e 's/^Version: //;')\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'assembly-stats=1.0.1' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/assembly-stats%3A1.0.1--h7d875b9_4\" } else { container \"quay.io/biocontainers/assembly-stats:1.0.1--h7d875b9_4\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIMAP2_ALIGN_LONG": {
        "name_process": "MINIMAP2_ALIGN_LONG",
        "string_process": "\nprocess MINIMAP2_ALIGN_LONG {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n\n    conda (params.enable_conda ? 'bioconda::minimap2=2.22' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\"\n    } else {\n        container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    tuple val(meta), path(reference)\n\n    output:\n    tuple val(meta), path(\"*.paf\"), emit: paf\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $reads \\\\\n        > ${prefix}.paf\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $reads \\\\\n        > ${prefix}.paf\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "meta",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::minimap2=2.22' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\" } else { container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NANOPLOT": {
        "name_process": "NANOPLOT",
        "string_process": "\nprocess NANOPLOT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::nanoplot=1.38.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/nanoplot:1.38.0--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0\"\n    }\n\n    input:\n    tuple val(meta), path(ontfile)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.png\") , emit: png\n    tuple val(meta), path(\"*.txt\") , emit: txt\n    tuple val(meta), path(\"*.log\") , emit: log\n    path  \"versions.yml\"           , emit: versions\n\n    script:\n    \n    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\") || \"$ontfile\".endsWith(\".fastq\")) ? \"--fastq ${ontfile}\" :\n        (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n\n    \"\"\"\n    NanoPlot -t $task.cpus $input_file\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\") || \"$ontfile\".endsWith(\".fastq\")) ? \"--fastq ${ontfile}\" :\n        (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n\n    \"\"\"\n    NanoPlot -t $task.cpus $input_file\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "ontfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::nanoplot=1.38.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/nanoplot:1.38.0--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIMAP2_ALIGN_SHORT": {
        "name_process": "MINIMAP2_ALIGN_SHORT",
        "string_process": "\nprocess MINIMAP2_ALIGN_SHORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::minimap2=2.22' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\"\n    } else {\n        container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    tuple val(meta), path(reference)\n    output:\n    tuple val(meta), path(\"*.sam\"), emit: sam\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $input_reads \\\\\n        > ${prefix}.sam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $input_reads \\\\\n        > ${prefix}.sam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "meta",
            "reference"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::minimap2=2.22' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\" } else { container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SPADES": {
        "name_process": "SPADES",
        "string_process": "\nprocess SPADES {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0\"\n    } else {\n        container \"quay.io/biocontainers/spades:3.15.3--h95f258a_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  hmm\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa')    , optional:true, emit: scaffolds\n    tuple val(meta), path('*.contigs.fa')      , optional:true, emit: contigs\n    tuple val(meta), path('*.transcripts.fa')  , optional:true, emit: transcripts\n    tuple val(meta), path('*.gene_clusters.fa'), optional:true, emit: gene_clusters\n    tuple val(meta), path('*.assembly.gfa')    , optional:true, emit: gfa\n    tuple val(meta), path('*.log')             , emit: log\n    path  \"versions.yml\"                       , emit: versions\n\n    script:\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    def custom_hmms = params.spades_hmm ? \"--custom-hmms $hmm\" : \"\"\n    \"\"\"\n    spades.py \\\\\n        $options.args \\\\\n        --threads $task.cpus \\\\\n        $custom_hmms \\\\\n        $input_reads \\\\\n        -o ./\n    mv spades.log ${prefix}.spades.log\n\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n    fi\n    if [ -f transcripts.fasta ]; then\n        mv transcripts.fasta ${prefix}.transcripts.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n    fi\n\n    if [ -f gene_clusters.fasta ]; then\n        mv gene_clusters.fasta ${prefix}.gene_clusters.fa\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(spades.py --version 2>&1 | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 62,
        "string_script": "    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    def custom_hmms = params.spades_hmm ? \"--custom-hmms $hmm\" : \"\"\n    \"\"\"\n    spades.py \\\\\n        $options.args \\\\\n        --threads $task.cpus \\\\\n        $custom_hmms \\\\\n        $input_reads \\\\\n        -o ./\n    mv spades.log ${prefix}.spades.log\n\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n    fi\n    if [ -f transcripts.fasta ]; then\n        mv transcripts.fasta ${prefix}.transcripts.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n    fi\n\n    if [ -f gene_clusters.fasta ]; then\n        mv gene_clusters.fasta ${prefix}.gene_clusters.fa\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(spades.py --version 2>&1 | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "hmm"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0\" } else { container \"quay.io/biocontainers/spades:3.15.3--h95f258a_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CSVTK_CONCAT": {
        "name_process": "CSVTK_CONCAT",
        "string_process": "\nprocess CSVTK_CONCAT {\n\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::csvtk=v0.23.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/csvtk%3A0.23.0--h9ee0642_0\"\n    } else {\n        container \"quay.io/biocontainers/csvtk:0.23.0--h9ee0642_0\"\n    }\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    \n    input:\n    tuple val(output_name), val(input)\n\n    output:\n    path(\"*.tsv\"), emit: collated\n    path  'versions.yml',             emit: versions\n\n    script:\n    def input_files = input.join(' ')\n    def header = params.header ? params.header : \"\"\n\n    \"\"\"\n    csvtk concat $header -t -T $input_files > ${output_name}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(csvtk version)\n    END_VERSIONS\n\n    \"\"\"\n        \n}",
        "nb_lignes_process": 37,
        "string_script": "    def input_files = input.join(' ')\n    def header = params.header ? params.header : \"\"\n\n    \"\"\"\n    csvtk concat $header -t -T $input_files > ${output_name}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(csvtk version)\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_name",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::csvtk=v0.23.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/csvtk%3A0.23.0--h9ee0642_0\" } else { container \"quay.io/biocontainers/csvtk:0.23.0--h9ee0642_0\" }",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "AMRFINDERPLUS": {
        "name_process": "AMRFINDERPLUS",
        "string_process": "\nprocess AMRFINDERPLUS {\n\n tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    cache 'lenient'\n    conda (params.enable_conda ? 'bioconda::ncbi-amrfinderplus=3.10.18' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus%3A3.10.18--h17dc2d4_0'\n    } else {\n        container 'quay.io/biocontainers/ncbi-amrfinderplus:3.10.18--h17dc2d4_0'\n    }\n\n  input:\n  tuple val(meta), path(fasta)\n  path(db)\n\n  output:\n                                                          \n  tuple val(meta), path(\"*_amrfinderplus.tsv\"), emit: tsv\n  tuple val(meta), path(\"*_amrfinderplus.ffn\"), emit: ffn\n  path (\"versions.yml\"), emit: versions\n\n                                                                                                                           \n  script:\n  def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n  \"\"\"\n    amrfinder ${options.args} --nucleotide $fasta -o ${prefix}_amrfinderplus.tsv --name ${prefix} --threads $task.cpus --nucleotide_output ${prefix}_amrfinderplus.ffn --database $db\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(amrfinder --version 2>&1)\n    END_VERSIONS\n\n  \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "  def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n  \"\"\"\n    amrfinder ${options.args} --nucleotide $fasta -o ${prefix}_amrfinderplus.tsv --name ${prefix} --threads $task.cpus --nucleotide_output ${prefix}_amrfinderplus.ffn --database $db\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(amrfinder --version 2>&1)\n    END_VERSIONS\n\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "cache 'lenient'",
            "conda (params.enable_conda ? 'bioconda::ncbi-amrfinderplus=3.10.18' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus%3A3.10.18--h17dc2d4_0' } else { container 'quay.io/biocontainers/ncbi-amrfinderplus:3.10.18--h17dc2d4_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "PILON": {
        "name_process": "PILON",
        "string_process": "\nprocess PILON {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'pilon=1.24' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/pilon%3A1.24--hdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/pilon%3A1.24--hdfd78af_0\"\n    }\n\n    input:\n    tuple val(meta), path(sorted_bam)\n    tuple val(meta), path(sorted_bamb_idex)\n    tuple val(meta), path(assembly)\n\n    output:\n    tuple val(meta), path(\"*_pilon.fasta\") , emit: assembly\n    path  'versions.yml'                     , emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def maxmem = \"-Xmx${task.memory.toGiga()}g\"\n    def round = params.pilon_round ? params.pilon_round : \"\"\n\n    \"\"\"\n    pilon $options.args --genome ${assembly} --frags ${sorted_bam} --output round${round}_pilon \n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(pilon --version 2>&1 | sed 's/^Pilon version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def maxmem = \"-Xmx${task.memory.toGiga()}g\"\n    def round = params.pilon_round ? params.pilon_round : \"\"\n\n    \"\"\"\n    pilon $options.args --genome ${assembly} --frags ${sorted_bam} --output round${round}_pilon \n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(pilon --version 2>&1 | sed 's/^Pilon version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "pilon"
        ],
        "tools_url": [
            "https://bio.tools/pilon"
        ],
        "tools_dico": [
            {
                "name": "pilon",
                "uri": "https://bio.tools/pilon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Read alignment analysis to diagnose, report, and automatically improve de novo genome assemblies.",
                "homepage": "http://www.broadinstitute.org/software/pilon/"
            }
        ],
        "inputs": [
            "meta",
            "sorted_bam",
            "meta",
            "sorted_bamb_idex",
            "meta",
            "assembly"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'pilon=1.24' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/pilon%3A1.24--hdfd78af_0\" } else { container \"quay.io/biocontainers/pilon%3A1.24--hdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BAKTA": {
        "name_process": "BAKTA",
        "string_process": "\nprocess BAKTA {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    cache 'lenient'\n    conda (params.enable_conda ? 'bioconda::bakta=1.2.2' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/bakta%3A1.2.2--pyhdfd78af_0'\n    } else {\n        container 'quay.io/biocontainers/bakta:1.2.2--pyhdfd78af_0'\n    }\n\n    scratch true\n    \n    input:\n    tuple val(meta), path(contigs)\n    path db\n\n    output:\n    tuple val(meta), path('*.gff3'), emit: gff\n    tuple val(meta), path('*.json'), emit: json\n    tuple val(meta), path('*.tsv'), emit: tsv\n    tuple val(meta), path('*.gbff'), emit: gbff\n    tuple val(meta), path('*.embl'), emit: embl\n    tuple val(meta), path('*.ffn'), emit: ffn\n    tuple val(meta), path(\"${meta.id}.faa\"), emit: faa\n    path (\"versions.yml\"), emit: versions\n    \n    \n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    \n    bakta $options.args --db ${db} --output ./ --prefix ${prefix} --locus-tag ${prefix} --threads $task.cpus $contigs\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bakta --version 2>& 1 | sed 's/^bakta //;')\n    END_VERSIONS\n    \n    \n    \"\"\"\n    \n}",
        "nb_lignes_process": 48,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    \n    bakta $options.args --db ${db} --output ./ --prefix ${prefix} --locus-tag ${prefix} --threads $task.cpus $contigs\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bakta --version 2>& 1 | sed 's/^bakta //;')\n    END_VERSIONS\n    \n    \n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "contigs",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "cache 'lenient'",
            "conda (params.enable_conda ? 'bioconda::bakta=1.2.2' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/bakta%3A1.2.2--pyhdfd78af_0' } else { container 'quay.io/biocontainers/bakta:1.2.2--pyhdfd78af_0' }",
            "scratch true"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_FAIDX": {
        "name_process": "SAMTOOLS_FAIDX",
        "string_process": "\nprocess SAMTOOLS_FAIDX {\n    tag \"$fasta\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    path fasta\n\n    output:\n    path \"*.fai\"       , emit: fai\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    samtools faidx $fasta\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    samtools faidx $fasta\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SAMPLEIDS": {
        "name_process": "GET_SAMPLEIDS",
        "string_process": "\nprocess GET_SAMPLEIDS{\n     publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n   \n    input:\n    val ids\n\n    output:\n    path(\"sids.txt\"), emit: sample_ids\n\n    script:\n    def input = ids.join(\"\\n\")\n    \"\"\"\n    echo \"${input}\" > sids.txt\n\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    def input = ids.join(\"\\n\")\n    \"\"\"\n    echo \"${input}\" > sids.txt\n\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ids"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "\nprocess SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "\nprocess KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    } else {\n        container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n\n    output:\n    tuple val(meta), path('*classified*')  , emit: classified\n    tuple val(meta), path('*unclassified*'), emit: unclassified\n    tuple val(meta), path('*report.txt')   , emit: txt\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' } else { container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' }"
        ],
        "when": "",
        "stub": ""
    },
    "MLST": {
        "name_process": "MLST",
        "string_process": "\nprocess MLST {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::mlst=2.19.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mlst:2.19.0--hdfd78af_1\"\n    } else {\n        container \"quay.io/biocontainers/mlst:2.19.0--hdfd78af_1\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mlst $options.args --label ${prefix} --threads $task.cpus $fasta > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( echo \\$(mlst --version 2>&1) | sed 's/mlst //' )\n    END_VERSIONS\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mlst $options.args --label ${prefix} --threads $task.cpus $fasta > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( echo \\$(mlst --version 2>&1) | sed 's/mlst //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MLST"
        ],
        "tools_url": [
            "https://bio.tools/mlst"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::mlst=2.19.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mlst:2.19.0--hdfd78af_1\" } else { container \"quay.io/biocontainers/mlst:2.19.0--hdfd78af_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SRAX": {
        "name_process": "SRAX",
        "string_process": "\nprocess SRAX {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                              \n    conda (params.enable_conda ? \"bioconda::srax=1.5\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/srax%3A1.5--pl5262ha8f3691_1\"\n    } else {\n        container \"quay.io/biocontainers/srax:1.5--pl5262ha8f3691_1\"\n    }\n    input:\n        path fasta\n    output:\n        path('*.html'), emit: html\n        path ('Plots'), emit: plots\n        \n        path '*blastx_output.tsv', emit: blastx \n        path '*detected_ARGs.tsv', emit: report\n        path '*gene_coordinates.tsv', emit: gene_coordinates   \n        path '*putative_paralogs.tsv', emit: paralogs \n        path (\"versions.yml\"), emit: version\n\n    script:\n                                                                                 \n    \"\"\"\n    mkdir srax_in\n    cp ${fasta.join(' ')} srax_in\n    sraX $options.args -i srax_in -o srax_out\n\n    cp -r srax_out/Results/Summary_files/* .\n    cp -r  srax_out/Results/Plots .\n    cp -r  srax_out/Results/sraX_analysis.html .\n\n    \n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(sraX --version | sed '/^[[:space:]]*\\$/d; /sraX -.*\\$/d; /Copyright.*\\$/d; s/.*version: sraXv//')\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    \"\"\"\n    mkdir srax_in\n    cp ${fasta.join(' ')} srax_in\n    sraX $options.args -i srax_in -o srax_out\n\n    cp -r srax_out/Results/Summary_files/* .\n    cp -r  srax_out/Results/Plots .\n    cp -r  srax_out/Results/sraX_analysis.html .\n\n    \n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(sraX --version | sed '/^[[:space:]]*\\$/d; /sraX -.*\\$/d; /Copyright.*\\$/d; s/.*version: sraXv//')\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::srax=1.5\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/srax%3A1.5--pl5262ha8f3691_1\" } else { container \"quay.io/biocontainers/srax:1.5--pl5262ha8f3691_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ABRICATE": {
        "name_process": "ABRICATE",
        "string_process": "\nprocess ABRICATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::abricate=0.8.13\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1\"\n    } else {\n        container \"quay.io/biocontainers/abricate:1.0.1--ha8f3691_1\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path('*_abricate.tsv'), emit: report\n    path (\"versions.yml\"), emit: versions\n\n    script:\n    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                         \n    \"\"\"\n    abricate $options.args ${fasta} --threads $task.cpus  > ${prefix}_abricate.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(abricate --version 2>& 1 | sed 's/^abricate //;')\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                         \n    \"\"\"\n    abricate $options.args ${fasta} --threads $task.cpus  > ${prefix}_abricate.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(abricate --version 2>& 1 | sed 's/^abricate //;')\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::abricate=0.8.13\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1\" } else { container \"quay.io/biocontainers/abricate:1.0.1--ha8f3691_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ABRICATE_SUMMARIZE": {
        "name_process": "ABRICATE_SUMMARIZE",
        "string_process": "\nprocess ABRICATE_SUMMARIZE {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    conda (params.enable_conda ? \"bioconda::abricate=0.8.13\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1\"\n    } else {\n        container \"quay.io/biocontainers/abricate:1.0.1--ha8f3691_1\"\n    }\n\n    input:\n    path(reports)\n\n    output:\n    path('*.tsv'), emit: summary\n    path (\"versions.yml\"), emit: versions\n    \n    script:\n    def input = reports.join(' ')\n    \"\"\"\n    #abricate --summary *.tsv > all_abricate_summary.tsv\n    abricate $options.args --summary ${input} > vf.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(abricate --version 2>& 1 | sed 's/^abricate //;')\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def input = reports.join(' ')\n    \"\"\"\n    #abricate --summary *.tsv > all_abricate_summary.tsv\n    abricate $options.args --summary ${input} > vf.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(abricate --version 2>& 1 | sed 's/^abricate //;')\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::abricate=0.8.13\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1\" } else { container \"quay.io/biocontainers/abricate:1.0.1--ha8f3691_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SEQTK_FQCHK": {
        "name_process": "SEQTK_FQCHK",
        "string_process": "\nprocess SEQTK_FQCHK{\n\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3\"\n    } else {\n        container \"quay.io/biocontainers/seqtk:1.3--h5bf99c6_3\"\n    }\n\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*_seqtk.txt'), emit: stats\n    path (\"versions.yml\"), emit: versions\n\n\n    script:\n    \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    def input      = meta.single_end ? \"${reads[0]}\" : \"${reads[0]} ${reads[1]}\"\n    \n    if( options.args == \"long\"){\n            input = reads[0]\n        }\n    \n    if(reads[0] =~ /\\.gz$/)\n      \"\"\"\n        zcat ${input} | seqtk fqchk -q0  - > ${prefix}_seqtk.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$(seqtk 2>&1 | grep Version | sed 's/^Version: //')\n        END_VERSIONS\n        \"\"\"\n\n    else \n\n    \"\"\"\n        cat ${input} | seqtk fqchk -q0  - > ${prefix}_seqtk.txt\n        \n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$(seqtk 2>&1 | grep Version | sed 's/^Version: //')\n        END_VERSIONS\n    \"\"\"\n    \n}",
        "nb_lignes_process": 56,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    def input      = meta.single_end ? \"${reads[0]}\" : \"${reads[0]} ${reads[1]}\"\n    \n    if( options.args == \"long\"){\n            input = reads[0]\n        }\n    \n    if(reads[0] =~ /\\.gz$/)\n      \"\"\"\n        zcat ${input} | seqtk fqchk -q0  - > ${prefix}_seqtk.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$(seqtk 2>&1 | grep Version | sed 's/^Version: //')\n        END_VERSIONS\n        \"\"\"\n\n    else \n\n    \"\"\"\n        cat ${input} | seqtk fqchk -q0  - > ${prefix}_seqtk.txt\n        \n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$(seqtk 2>&1 | grep Version | sed 's/^Version: //')\n        END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3\" } else { container \"quay.io/biocontainers/seqtk:1.3--h5bf99c6_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BBMAP_BBDUK": {
        "name_process": "BBMAP_BBDUK",
        "string_process": "\nprocess BBMAP_BBDUK {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.93\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bbmap%3A38.93--he522d1c_0\"\n    } else {\n        container \"quay.io/biocontainers/bbmap:bbmap:38.93--he522d1c_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path contaminants\n\n    output:\n    tuple val(meta), path('*.qc.*fastq.gz'), emit: reads\n    tuple val(meta), path('*.log')     , emit: log\n    path (\"versions.yml\"), emit: versions\n\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n\n    def raw      = meta.single_end ? \"in=${reads[0]}\" : \"in1=${reads[0]} in2=${reads[1]}\"\n                 \n    def adapter_trimmed_out  = meta.single_end ? \"out=${prefix}_trimAdapter.fastq.gz\" : \"out1=${prefix}_trimAdapter_R1.fastq.gz out2=${prefix}_trimAdapter_R2.fastq.gz\"\n    \n           \n    def q_filter_in  = meta.single_end ? \"in=${prefix}_trimAdapter.fastq.gz\" : \"in1=${prefix}_trimAdapter_R1.fastq.gz in2=${prefix}_trimAdapter_R2.fastq.gz\"\n    def q_filter_out  = meta.single_end ? \"out=${prefix}_qfilter.fastq.gz\" : \"out1=${prefix}_qfilter_R1.fastq.gz out2=${prefix}_qfilter_R2.fastq.gz\"\n           \n    def a_filter_in  = meta.single_end ? \"in=${prefix}_qfilter.fastq.gz\" : \"in1=${prefix}_qfilter_R1.fastq.gz in2=${prefix}_qfilter_R2.fastq.gz\"\n    def out =  meta.single_end ? \"out=${prefix}.qc.fastq.gz\" : \"out1=${prefix}.qc.R1.fastq.gz out2=${prefix}.qc.R2.fastq.gz\"\n\n    def maxmem = \"-Xmx${task.memory.toGiga()}g\"\n                                                                            \n    \"\"\"\n    #Step 1: remove sequencing adapter\n    #: 1)trims the last base off of 151bp reads; that base is very low quality. \n    #   Specifically, ftm=5 will trim reads so that their length is equal to zero modulo 5, \n    #and ignore reads that are already 100bp or 150bp, etc\n    #2): trim off the partial adapter, artifacts, phix\n    # with two step together, they do ftm=5 first and then adapter trimming\n\n    bbduk.sh $maxmem $raw $adapter_trimmed_out $options.args threads=${task.cpus} >& ${prefix}.bbduk.step1.log\n\n    #Step 2: quality filtering: \n    #This step removes reads and regions with low quality \n    #or match the sequencing artifacts database \n\n    bbduk.sh $maxmem $q_filter_in  $q_filter_out $options.args2 stats=${prefix}_stats.txt threads=${task.cpus} >& ${prefix}.bbduk.step2.log\n\n    #Step 3: Artifact Filtering\n    #This step removes reads in the short sequencing artifacts \n    #database from the fastq from STEP 2\n    bbduk.sh $maxmem  $a_filter_in  $out  $options.args3 threads=${task.cpus} >& ${prefix}.bbduk.step3.log\n    \n     cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bbversion.sh)\n    END_VERSIONS\n\n    \"\"\"\n    \n}",
        "nb_lignes_process": 70,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n\n    def raw      = meta.single_end ? \"in=${reads[0]}\" : \"in1=${reads[0]} in2=${reads[1]}\"\n                 \n    def adapter_trimmed_out  = meta.single_end ? \"out=${prefix}_trimAdapter.fastq.gz\" : \"out1=${prefix}_trimAdapter_R1.fastq.gz out2=${prefix}_trimAdapter_R2.fastq.gz\"\n    \n           \n    def q_filter_in  = meta.single_end ? \"in=${prefix}_trimAdapter.fastq.gz\" : \"in1=${prefix}_trimAdapter_R1.fastq.gz in2=${prefix}_trimAdapter_R2.fastq.gz\"\n    def q_filter_out  = meta.single_end ? \"out=${prefix}_qfilter.fastq.gz\" : \"out1=${prefix}_qfilter_R1.fastq.gz out2=${prefix}_qfilter_R2.fastq.gz\"\n           \n    def a_filter_in  = meta.single_end ? \"in=${prefix}_qfilter.fastq.gz\" : \"in1=${prefix}_qfilter_R1.fastq.gz in2=${prefix}_qfilter_R2.fastq.gz\"\n    def out =  meta.single_end ? \"out=${prefix}.qc.fastq.gz\" : \"out1=${prefix}.qc.R1.fastq.gz out2=${prefix}.qc.R2.fastq.gz\"\n\n    def maxmem = \"-Xmx${task.memory.toGiga()}g\"\n                                                                            \n    \"\"\"\n    #Step 1: remove sequencing adapter\n    #: 1)trims the last base off of 151bp reads; that base is very low quality. \n    #   Specifically, ftm=5 will trim reads so that their length is equal to zero modulo 5, \n    #and ignore reads that are already 100bp or 150bp, etc\n    #2): trim off the partial adapter, artifacts, phix\n    # with two step together, they do ftm=5 first and then adapter trimming\n\n    bbduk.sh $maxmem $raw $adapter_trimmed_out $options.args threads=${task.cpus} >& ${prefix}.bbduk.step1.log\n\n    #Step 2: quality filtering: \n    #This step removes reads and regions with low quality \n    #or match the sequencing artifacts database \n\n    bbduk.sh $maxmem $q_filter_in  $q_filter_out $options.args2 stats=${prefix}_stats.txt threads=${task.cpus} >& ${prefix}.bbduk.step2.log\n\n    #Step 3: Artifact Filtering\n    #This step removes reads in the short sequencing artifacts \n    #database from the fastq from STEP 2\n    bbduk.sh $maxmem  $a_filter_in  $out  $options.args3 threads=${task.cpus} >& ${prefix}.bbduk.step3.log\n    \n     cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bbversion.sh)\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [
            "RatHat"
        ],
        "tools_url": [
            "https://bio.tools/RatHat"
        ],
        "tools_dico": [
            {
                "name": "RatHat",
                "uri": "https://bio.tools/RatHat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3304",
                            "term": "Neurobiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A self-targeting printable brain implant system.\n\nAbstract There has not been a major change in how neuroscientists approach stereotaxic methods in decades. Here we present a new stereotaxic method that improves on traditional approaches by reducing costs, training, surgical time, and aiding repeatability. The RatHat brain implantation system is a 3D printable stereotaxic device for rats that is fabricated prior to surgery and fits to the shape of the skull. RatHat builds are directly implanted into the brain without the need for head-leveling or coordinate-mapping during surgery. The RatHat system can be used in conjunction with the traditional u-frame stereotaxic device, but does not require the use of a micromanipulator for successful implantations. Each RatHat system contains several primary components including the implant for mounting intracranial components, the surgical stencil for targeting drill sites, and the protective cap for impacts and debris.\n\n||| HOMEPAGE MISSING!",
                "homepage": "https://doi.org/10.1101/868422"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "contaminants"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.93\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bbmap%3A38.93--he522d1c_0\" } else { container \"quay.io/biocontainers/bbmap:bbmap:38.93--he522d1c_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:                                                                      \n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n    script:                                                                      \n    \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$samplesheet\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UNICYCLER": {
        "name_process": "UNICYCLER",
        "string_process": "\nprocess UNICYCLER {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3\"\n    } else {\n        container \"quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa'), emit: scaffolds\n    tuple val(meta), path('*.assembly.gfa'), emit: gfa\n    tuple val(meta), path('*.log')         , emit: log\n    path  \"versions.yml\"                   , emit: versions\n\n    script:\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $options.args \\\\\n        $input_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $options.args \\\\\n        $input_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3\" } else { container \"quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "POLCA": {
        "name_process": "POLCA",
        "string_process": "\nprocess POLCA {\n\n\ttag \"$meta.id\"\n    label 'process_medium'\n    \n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'masurca=3.4.2' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/masurca%3A3.4.2--pl5262h86ccdc5_1\"\n        \n        \n    } else {\n        container \"quay.io/biocontainers/masurca%3A3.4.2--pl5262h86ccdc5_1\"\n       \n    }\n\n    input:\n    tuple val(meta), path(reads)\n    tuple val(meta), path(assembly)\n\n    output:\n    tuple val(meta), file(\"*_polca.fasta\"), emit: assembly\n    tuple val(meta), file(\"*.report\"), emit: report\n    path (\"versions.yml\"), emit: versions\n\n\twhen:\n\t                       \n\tscript:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\t\"\"\"\n\tpolca.sh -a ${assembly} -r '${reads[0]} ${reads[1]}' -t $task.cpus \n    mv ${assembly}.report ${prefix}_polca.report\n    mv ${assembly}.PolcaCorrected.fa ${prefix}_polca.fasta\n\t\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(masurca --version 2>&1 | sed 's/^version //;')\n    END_VERSIONS\n    \n    \n\t\"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\t\"\"\"\n\tpolca.sh -a ${assembly} -r '${reads[0]} ${reads[1]}' -t $task.cpus \n    mv ${assembly}.report ${prefix}_polca.report\n    mv ${assembly}.PolcaCorrected.fa ${prefix}_polca.fasta\n\t\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(masurca --version 2>&1 | sed 's/^version //;')\n    END_VERSIONS\n    \n    \n\t\"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "meta",
            "assembly"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'masurca=3.4.2' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/masurca%3A3.4.2--pl5262h86ccdc5_1\" } else { container \"quay.io/biocontainers/masurca%3A3.4.2--pl5262h86ccdc5_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    script:\n                                                                          \n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 47,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bai\"), optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\"), optional:true, emit: csi\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    \"\"\"\n    samtools index $options.args $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    samtools index $options.args $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PROKKA": {
        "name_process": "PROKKA",
        "string_process": "\nprocess PROKKA {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0\"\n    } else {\n        container \"quay.io/biocontainers/prokka:1.14.6--pl526_0\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n    path proteins\n    path prodigal_tf\n\n    output:\n    tuple val(meta), path(\"*.gff\"), emit: gff\n    tuple val(meta), path(\"*.gbk\"), emit: gbk\n    tuple val(meta), path(\"*.fna\"), emit: fna\n    tuple val(meta), path(\"*.faa\"), emit: faa\n    tuple val(meta), path(\"*.ffn\"), emit: ffn\n    tuple val(meta), path(\"*.sqn\"), emit: sqn\n    tuple val(meta), path(\"*.fsa\"), emit: fsa\n    tuple val(meta), path(\"*.tbl\"), emit: tbl\n    tuple val(meta), path(\"*.err\"), emit: err\n    tuple val(meta), path(\"*.log\"), emit: log\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    script:\n    prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $options.args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n    mv ${prefix}/* .\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $options.args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n    mv ${prefix}/* .\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "proteins",
            "prodigal_tf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0\" } else { container \"quay.io/biocontainers/prokka:1.14.6--pl526_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MEDAKA": {
        "name_process": "MEDAKA",
        "string_process": "\nprocess MEDAKA {\n    tag \"$meta.id\"\n    label 'process_medium'\n    \n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'medaka=1.4.3-0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/medaka:1.4.3--py38h130def0_0\"\n    } else {\n        container \"quay.io/biocontainers/medaka:1.4.3--py38h130def0_0\"\n    }\n\n    input:\n    tuple val(meta), path(longreads)\n    tuple val(meta), path(assembly)\n\n    output:\n    tuple val(meta), file(\"*_medaka.fasta\"), emit: assembly\n    path (\"versions.yml\"), emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    medaka_consensus -i $longreads -d $assembly  -t $task.cpus $options.args\n    mv medaka/consensus.fasta ${prefix}_medaka.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(medaka --version 2>&1 | sed -e 's/^medaka -v//;' | sed '/^[[:space:]]*\\$/d')\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    medaka_consensus -i $longreads -d $assembly  -t $task.cpus $options.args\n    mv medaka/consensus.fasta ${prefix}_medaka.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(medaka --version 2>&1 | sed -e 's/^medaka -v//;' | sed '/^[[:space:]]*\\$/d')\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "longreads",
            "meta",
            "assembly"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'medaka=1.4.3-0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/medaka:1.4.3--py38h130def0_0\" } else { container \"quay.io/biocontainers/medaka:1.4.3--py38h130def0_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SPADESHYBRID": {
        "name_process": "SPADESHYBRID",
        "string_process": "\nprocess SPADESHYBRID {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0\"\n    } else {\n        container \"quay.io/biocontainers/spades:3.15.3--h95f258a_0\"\n    }\n\n    input:\n    tuple val(meta), path(long_reads)\n    tuple val(meta), path(short_reads)\n\n   output:\n    tuple val(meta), path('*scaffolds.fasta'), emit: assembly\n    tuple val(meta), path('*contigs.fasta'), emit: contigs\n    tuple val(meta), path('*.gfa'),  emit: gfa\n    tuple val(meta), path('*.log'), emit: log\n                                          \n    path  \"versions.yml\"                       , emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $short_reads --nanopore ${long_reads}\" : \"-1 ${short_reads[0]} -2 ${short_reads[1]} --nanopore ${long_reads}\"\n\n    \n    maxmem = task.memory.toGiga()\n                                                                                             \n        \"\"\"\n        spades.py $options.args --threads $task.cpus --memory $maxmem $input_reads -o spades \n\n        mv spades/scaffolds.fasta ${prefix}_scaffolds.fasta\n        mv spades/contigs.fasta ${prefix}_contigs.fasta\n        mv spades/assembly_graph_with_scaffolds.gfa ${prefix}_graph.gfa\n        mv spades/spades.log ${prefix}.log\n\n       cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$(spades.py --version 2>&1 | sed 's/SPAdes genome assembler //' )\n        END_VERSIONS\n\n        \"\"\"\n           \n                                                                                                                                                                            \n}",
        "nb_lignes_process": 50,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $short_reads --nanopore ${long_reads}\" : \"-1 ${short_reads[0]} -2 ${short_reads[1]} --nanopore ${long_reads}\"\n\n    \n    maxmem = task.memory.toGiga()\n                                                                                             \n        \"\"\"\n        spades.py $options.args --threads $task.cpus --memory $maxmem $input_reads -o spades \n\n        mv spades/scaffolds.fasta ${prefix}_scaffolds.fasta\n        mv spades/contigs.fasta ${prefix}_contigs.fasta\n        mv spades/assembly_graph_with_scaffolds.gfa ${prefix}_graph.gfa\n        mv spades/spades.log ${prefix}.log\n\n       cat <<-END_VERSIONS > versions.yml\n        ${getProcessName(task.process)}:\n            ${getSoftwareName(task.process)}: \\$(spades.py --version 2>&1 | sed 's/SPAdes genome assembler //' )\n        END_VERSIONS\n\n        \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "long_reads",
            "meta",
            "short_reads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0\" } else { container \"quay.io/biocontainers/spades:3.15.3--h95f258a_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "\nprocess CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0\"\n    }\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    \n    script:\n    println(versions)\n\n    \"\"\"\n    #!/usr/bin/env python\n\n    import yaml\n    import platform\n    from textwrap import dedent\n\n    def _make_versions_html(versions):\n        html = [\n            dedent(\n                '''\\\\\n                <style>\n                #nf-core-versions tbody:nth-child(even) {\n                    background-color: #f2f2f2;\n                }\n                </style>\n                <table class=\"table\" style=\"width:100%\" id=\"nf-core-versions\">\n                    <thead>\n                        <tr>\n                            <th> Process Name </th>\n                            <th> Software </th>\n                            <th> Version  </th>\n                        </tr>\n                    </thead>\n                '''\n            )\n        ]\n        for process, tmp_versions in sorted(versions.items()):\n            html.append(\"<tbody>\")\n            for i, (tool, version) in enumerate(sorted(tmp_versions.items())):\n                html.append(\n                    dedent(\n                        f'''\\\\\n                        <tr>\n                            <td><samp>{process if (i == 0) else ''}</samp></td>\n                            <td><samp>{tool}</samp></td>\n                            <td><samp>{version}</samp></td>\n                        </tr>\n                        '''\n                    )\n                )\n            html.append(\"</tbody>\")\n        html.append(\"</table>\")\n        return \"\\\\n\".join(html)\n\n    module_versions = {}\n    module_versions[\"${getProcessName(task.process)}\"] = {\n        'python': platform.python_version(),\n        'yaml': yaml.__version__\n    }\n\n    with open(\"$versions\") as f:\n        print(\"*********************\")\n        print(f.name)\n        workflow_versions = yaml.load(f, Loader=yaml.BaseLoader) | module_versions\n\n    workflow_versions[\"Workflow\"] = {\n        \"Nextflow\": \"$workflow.nextflow.version\",\n        \"$workflow.manifest.name\": \"$workflow.manifest.version\"\n    }\n\n    versions_mqc = {\n        'id': 'software_versions',\n        'section_name': '${workflow.manifest.name} Software Versions',\n        'section_href': 'https://github.com/${workflow.manifest.name}',\n        'plot_type': 'html',\n        'description': 'are collected at run time from the software output.',\n        'data': _make_versions_html(workflow_versions)\n    }\n\n    with open(\"software_versions.yml\", 'w') as f:\n        yaml.dump(workflow_versions, f, default_flow_style=False)\n    with open(\"software_versions_mqc.yml\", 'w') as f:\n        yaml.dump(versions_mqc, f, default_flow_style=False)\n\n    with open('versions.yml', 'w') as f:\n        yaml.dump(module_versions, f, default_flow_style=False)\n    \"\"\"\n}",
        "nb_lignes_process": 104,
        "string_script": "    println(versions)\n\n    \"\"\"\n    #!/usr/bin/env python\n\n    import yaml\n    import platform\n    from textwrap import dedent\n\n    def _make_versions_html(versions):\n        html = [\n            dedent(\n                '''\\\\\n                <style>\n                #nf-core-versions tbody:nth-child(even) {\n                    background-color: #f2f2f2;\n                }\n                </style>\n                <table class=\"table\" style=\"width:100%\" id=\"nf-core-versions\">\n                    <thead>\n                        <tr>\n                            <th> Process Name </th>\n                            <th> Software </th>\n                            <th> Version  </th>\n                        </tr>\n                    </thead>\n                '''\n            )\n        ]\n        for process, tmp_versions in sorted(versions.items()):\n            html.append(\"<tbody>\")\n            for i, (tool, version) in enumerate(sorted(tmp_versions.items())):\n                html.append(\n                    dedent(\n                        f'''\\\\\n                        <tr>\n                            <td><samp>{process if (i == 0) else ''}</samp></td>\n                            <td><samp>{tool}</samp></td>\n                            <td><samp>{version}</samp></td>\n                        </tr>\n                        '''\n                    )\n                )\n            html.append(\"</tbody>\")\n        html.append(\"</table>\")\n        return \"\\\\n\".join(html)\n\n    module_versions = {}\n    module_versions[\"${getProcessName(task.process)}\"] = {\n        'python': platform.python_version(),\n        'yaml': yaml.__version__\n    }\n\n    with open(\"$versions\") as f:\n        print(\"*********************\")\n        print(f.name)\n        workflow_versions = yaml.load(f, Loader=yaml.BaseLoader) | module_versions\n\n    workflow_versions[\"Workflow\"] = {\n        \"Nextflow\": \"$workflow.nextflow.version\",\n        \"$workflow.manifest.name\": \"$workflow.manifest.version\"\n    }\n\n    versions_mqc = {\n        'id': 'software_versions',\n        'section_name': '${workflow.manifest.name} Software Versions',\n        'section_href': 'https://github.com/${workflow.manifest.name}',\n        'plot_type': 'html',\n        'description': 'are collected at run time from the software output.',\n        'data': _make_versions_html(workflow_versions)\n    }\n\n    with open(\"software_versions.yml\", 'w') as f:\n        yaml.dump(workflow_versions, f, default_flow_style=False)\n    with open(\"software_versions_mqc.yml\", 'w') as f:\n        yaml.dump(versions_mqc, f, default_flow_style=False)\n\n    with open('versions.yml', 'w') as f:\n        yaml.dump(module_versions, f, default_flow_style=False)\n    \"\"\"",
        "nb_lignes_script": 79,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FILTLONG": {
        "name_process": "FILTLONG",
        "string_process": "\nprocess FILTLONG {\n    tag \"$meta.id\"\n    label 'process_medium'\n     publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::filtlong=0.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/filtlong:0.2.1--h9a82719_0' :'quay.io/biocontainers/filtlong:0.2.1--h9a82719_0' }\"\n\n    input:\n    tuple val(meta),path(longreads)\n\n    output:\n    tuple val(meta), path(\"*_filtlong.fastq.gz\"), emit: reads\n    path \"versions.yml\"                                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n   \n    \"\"\"\n    filtlong \\\\\n        $options.args \\\\\n        $longreads \\\\\n        | gzip -n > ${prefix}_filtlong.fastq.gz\n        \n    cat <<-END_VERSIONS > versions.yml\n\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( filtlong --version | sed -e \"s/Filtlong v//g\" )\n\n    END_VERSIONS\n    \n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n   \n    \"\"\"\n    filtlong \\\\\n        $options.args \\\\\n        $longreads \\\\\n        | gzip -n > ${prefix}_filtlong.fastq.gz\n        \n    cat <<-END_VERSIONS > versions.yml\n\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( filtlong --version | sed -e \"s/Filtlong v//g\" )\n\n    END_VERSIONS\n    \n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "meta",
            "longreads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::filtlong=0.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/filtlong:0.2.1--h9a82719_0' :'quay.io/biocontainers/filtlong:0.2.1--h9a82719_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MOBSUITE": {
        "name_process": "MOBSUITE",
        "string_process": "\nprocess MOBSUITE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    cache 'lenient'\n    conda (params.enable_conda ? 'bioconda::mob_suite=3.0.3' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mob_suite%3A3.0.3--pyhdfd78af_0'\n    } else {\n        container 'quay.io/biocontainers/mob_suite%3A3.0.3--pyhdfd78af_0'\n    }\n\n    input:\n    tuple val(meta), path(asm)\n\n    output:\n    tuple val(meta), path('*report.txt'), emit: contig_report\n    tuple val(meta), path('*mobtyper_results.txt'), emit: mobs\n    tuple val(meta), path('*plasmid.txt'), emit: plasmid\n    tuple val(meta), path('*.fasta'), emit: fasta\n    \n    path (\"versions.yml\"), emit: versions\n    \n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    maxmem = task.memory.toGiga()\n\n    \"\"\"\n    mob_recon -i $asm -s ${prefix} -n $task.cpus -o mob\n\n    if [ ! -f mob/mobtyper_results.txt ];then\n        touch mob/mobtyper_results.txt\n    fi\n    \n    mv mob/contig_report.txt ${prefix}.contig_report.txt\n    mv mob/mobtyper_results.txt ${prefix}.mobtyper_results.txt\n    mv mob/chromosome.fasta ${prefix}.chromosome.fasta\n    wrangle_mobsuite.py ${prefix}.mobtyper_results.txt ${prefix}\n    mv plasmid.txt ${prefix}.plasmid.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(mob_recon -V | sed 's/^mob_recon //;')\n    END_VERSIONS\n\n    \n    \"\"\"\n    \n}",
        "nb_lignes_process": 52,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    maxmem = task.memory.toGiga()\n\n    \"\"\"\n    mob_recon -i $asm -s ${prefix} -n $task.cpus -o mob\n\n    if [ ! -f mob/mobtyper_results.txt ];then\n        touch mob/mobtyper_results.txt\n    fi\n    \n    mv mob/contig_report.txt ${prefix}.contig_report.txt\n    mv mob/mobtyper_results.txt ${prefix}.mobtyper_results.txt\n    mv mob/chromosome.fasta ${prefix}.chromosome.fasta\n    wrangle_mobsuite.py ${prefix}.mobtyper_results.txt ${prefix}\n    mv plasmid.txt ${prefix}.plasmid.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(mob_recon -V | sed 's/^mob_recon //;')\n    END_VERSIONS\n\n    \n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "asm"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "cache 'lenient'",
            "conda (params.enable_conda ? 'bioconda::mob_suite=3.0.3' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mob_suite%3A3.0.3--pyhdfd78af_0' } else { container 'quay.io/biocontainers/mob_suite%3A3.0.3--pyhdfd78af_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "SKESA": {
        "name_process": "SKESA",
        "string_process": "\nprocess SKESA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    conda (params.enable_conda ? 'bioconda::skesa=v2.4.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/skesa%3A2.4.0--he1c1bb9_0\"\n    } else {\n        container \"quay.io/biocontainers/skesa%3A2.4.0--he1c1bb9_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*_contigs.fasta'), emit: contigs\n    path (\"versions.yml\"), emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $reads\" : \"${reads[0]},${reads[1]}\"\n    maxmem = task.memory.toGiga()\n\n    \"\"\"\n    \n    skesa --reads $input_reads --cores $task.cpus --memory $maxmem --contigs_out assembly.fasta\n    mv assembly.fasta ${prefix}_contigs.fasta\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(skesa -v 2>&1 | sed -e 's/^skesa -v//;;s/^SKESA //;' | sed '/^[[:space:]]*\\$/d')\n    END_VERSIONS\n    \n    \n    \"\"\"\n    \n}",
        "nb_lignes_process": 41,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $reads\" : \"${reads[0]},${reads[1]}\"\n    maxmem = task.memory.toGiga()\n\n    \"\"\"\n    \n    skesa --reads $input_reads --cores $task.cpus --memory $maxmem --contigs_out assembly.fasta\n    mv assembly.fasta ${prefix}_contigs.fasta\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(skesa -v 2>&1 | sed -e 's/^skesa -v//;;s/^SKESA //;' | sed '/^[[:space:]]*\\$/d')\n    END_VERSIONS\n    \n    \n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::skesa=v2.4.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/skesa%3A2.4.0--he1c1bb9_0\" } else { container \"quay.io/biocontainers/skesa%3A2.4.0--he1c1bb9_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RGI": {
        "name_process": "RGI",
        "string_process": "\nprocess RGI {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"python=3.6 bioconda::rgi=5.1.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rgi%3A5.1.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/rgi:5.1.1--py_0\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n    path card_db\n\n    output:\n    tuple val(meta), path('*_rgi.json'), emit: json\n    tuple val(meta), path('*_rgi.txt'), emit: txt\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    # Place card_rgi source in a read/write location for container\n    #mkdir card_temp && cp -r /opt/conda/lib/python3.6/site-packages/app/ card_temp\n    mkdir card_temp && cp -r /usr/local/lib/python3.6/site-packages/app/ card_temp\n    export PYTHONPATH=\"\\$(pwd)/card_temp/:\\$PATH\"\n\n    rgi load --card_json ${card_db} --local\n    rgi main -i $fasta -o ${prefix}_rgi -n $task.cpus $options.args\n    \n    #clean up work dir, if it exists\n    [[ -d card_temp ]] && rm -r card_temp\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(rgi main --version | sed 's/rgi //g')\n    END_VERSIONS \n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    # Place card_rgi source in a read/write location for container\n    #mkdir card_temp && cp -r /opt/conda/lib/python3.6/site-packages/app/ card_temp\n    mkdir card_temp && cp -r /usr/local/lib/python3.6/site-packages/app/ card_temp\n    export PYTHONPATH=\"\\$(pwd)/card_temp/:\\$PATH\"\n\n    rgi load --card_json ${card_db} --local\n    rgi main -i $fasta -o ${prefix}_rgi -n $task.cpus $options.args\n    \n    #clean up work dir, if it exists\n    [[ -d card_temp ]] && rm -r card_temp\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(rgi main --version | sed 's/rgi //g')\n    END_VERSIONS \n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Rgin"
        ],
        "tools_url": [
            "https://bio.tools/rgin"
        ],
        "tools_dico": [
            {
                "name": "Rgin",
                "uri": "https://bio.tools/rgin",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ implementation of SConES.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rgin.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "card_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"python=3.6 bioconda::rgi=5.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rgi%3A5.1.1--py_0\" } else { container \"quay.io/biocontainers/rgi:5.1.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RGI_HEATMAP": {
        "name_process": "RGI_HEATMAP",
        "string_process": "\nprocess RGI_HEATMAP {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? \"python=3.6 bioconda::rgi=5.1.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/rgi%3A5.1.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/rgi:5.1.1--py_0\"\n    }\n\n    input:\n               \n    path('?.json')\n\n    output:\n    path('*.png'), emit: heatmap\n    path('rgi_heatmap.eps'), emit: eps\n    path('rgi_heatmap.csv'),   emit: csv\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    \"\"\"\n    mkdir dir\n    cp ${json.join(' ')} dir\n    rgi heatmap -i dir -o rgi_heatmap\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(rgi main --version | sed 's/rgi //g')\n    END_VERSIONS \n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    mkdir dir\n    cp ${json.join(' ')} dir\n    rgi heatmap -i dir -o rgi_heatmap\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(rgi main --version | sed 's/rgi //g')\n    END_VERSIONS \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Rgin"
        ],
        "tools_url": [
            "https://bio.tools/rgin"
        ],
        "tools_dico": [
            {
                "name": "Rgin",
                "uri": "https://bio.tools/rgin",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ implementation of SConES.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rgin.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"python=3.6 bioconda::rgi=5.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/rgi%3A5.1.1--py_0\" } else { container \"quay.io/biocontainers/rgi:5.1.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PORECHOP": {
        "name_process": "PORECHOP",
        "string_process": "\nprocess PORECHOP {\n    tag \"$meta.id\"\n\n    label 'process_medium'\n    \n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::porechop=0.2.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/porechop%3A0.2.4--py39h7cff6ad_2\"\n    } else {\n        container \"quay.io/biocontainers/porechop:0.2.4--py39h7cff6ad_2\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_porechop.fastq\")  , emit: reads\n    path 'versions.yml', emit: versions\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    porechop $options.args -i ${reads} -t ${task.cpus} -o ${prefix}_porechop.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(porechop --version 2>&1)\n    END_VERSIONS\n\n\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    porechop $options.args -i ${reads} -t ${task.cpus} -o ${prefix}_porechop.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(porechop --version 2>&1)\n    END_VERSIONS\n\n\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::porechop=0.2.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/porechop%3A0.2.4--py39h7cff6ad_2\" } else { container \"quay.io/biocontainers/porechop:0.2.4--py39h7cff6ad_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.11' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0\"\n    }\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    script:\n    \"\"\"\n    multiqc -f $options.args .\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    multiqc -f $options.args .\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.11' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIASM": {
        "name_process": "MINIASM",
        "string_process": "\nprocess MINIASM {\n    tag \"$meta.id\"\n    label 'process_medium'\n    \n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n    \n    conda (params.enable_conda ? 'bioconda::miniasm=0.3_r179' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/miniasm:0.3_r179--h5bf99c6_2\"\n    } else {\n        container \"quay.io/biocontainers/miniasm:0.3_r179--h5bf99c6_2\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    tuple val(meta), path(paf)\n\n    output:\n    tuple val(meta), path(\"*_miniasm.fasta\") , emit: assembly\n    tuple val(meta), path('*_miniasm.gfa') ,    emit: graph\n    path  'versions.yml'                     , emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    \n    miniasm -f ${reads} ${paf} -p ug $options.args > ${prefix}_miniasm.gfa\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' \"${prefix}_miniasm.gfa\" | fold > ${prefix}_miniasm.fasta\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(miniasm -V 2>&1)\n    END_VERSIONS\n\n    \n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    \n    miniasm -f ${reads} ${paf} -p ug $options.args > ${prefix}_miniasm.gfa\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' \"${prefix}_miniasm.gfa\" | fold > ${prefix}_miniasm.fasta\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(miniasm -V 2>&1)\n    END_VERSIONS\n\n    \n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "TFold"
        ],
        "tools_url": [
            "https://bio.tools/tfold"
        ],
        "tools_dico": [
            {
                "name": "TFold",
                "uri": "https://bio.tools/tfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An algorithm for predicting non-coding RNA secondary structures.",
                "homepage": "https://evryrna.ibisc.univ-evry.fr/evryrna/tfold"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "meta",
            "paf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::miniasm=0.3_r179' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/miniasm:0.3_r179--h5bf99c6_2\" } else { container \"quay.io/biocontainers/miniasm:0.3_r179--h5bf99c6_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NEXTPOLISH": {
        "name_process": "NEXTPOLISH",
        "string_process": "\nprocess NEXTPOLISH {\n\n\ttag \"$meta.id\"\n    label 'process_medium'\n    \n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    \n    input:\n    tuple val(meta), path(sorted_bam)\n    tuple val(meta), path(sorted_bamb_idex)\n    tuple val(meta), path(contigs)\n\n\toutput:\n    tuple val(meta), file(\"*_nextpolish.fasta\"), emit: assembly\n    path (\"versions.yml\"), emit: versions\n\n\t        \n\t                        \n\tscript:\n\tdef software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def algorithm = params.algorithm ? params.algorithm : \"1\"\n\n\t\"\"\"\n    python ${params.nextpolish_path}/lib/nextpolish1.py $options.args -g ${contigs} -t ${algorithm} -p ${task.cpus} -s ${sorted_bam} >{$prefix}_t${algorithm}_nextpolish.fasta\n       \n\tcat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n    \t${getSoftwareName(task.process)}: \\$(${params.nextpolish_path}/nextPolish -v 2>&1 | sed -e 's/^nextPolish //;' | sed '/^[[:space:]]*\\$/d')\n    END_VERSIONS\n\n\t\"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "\tdef software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def algorithm = params.algorithm ? params.algorithm : \"1\"\n\n\t\"\"\"\n    python ${params.nextpolish_path}/lib/nextpolish1.py $options.args -g ${contigs} -t ${algorithm} -p ${task.cpus} -s ${sorted_bam} >{$prefix}_t${algorithm}_nextpolish.fasta\n       \n\tcat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n    \t${getSoftwareName(task.process)}: \\$(${params.nextpolish_path}/nextPolish -v 2>&1 | sed -e 's/^nextPolish //;' | sed '/^[[:space:]]*\\$/d')\n    END_VERSIONS\n\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "sorted_bam",
            "meta",
            "sorted_bamb_idex",
            "meta",
            "contigs"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "BRACKEN": {
        "name_process": "BRACKEN",
        "string_process": "\nprocess BRACKEN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::bracken=2.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bracken%3A2.6.1--py39h7cff6ad_2\"\n    } else {\n        container \"quay.io/biocontainers/bracken:2.6.1--py39h7cff6ad_2\"\n    }\n\n    input:\n    tuple val(meta), path(kraken2_report)\n    path kraken2_db\n\n    output:\n    tuple val(meta), path('*_bracken.output.txt'), emit: output\n    tuple val(meta), path('*_bracken.outreport.txt'), emit: outreport\n    path (\"versions.yml\"), emit: versions\n\n    script:\n    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n   \n    \"\"\"\n    bracken \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -d $kraken2_db \\\\\n        -i ${kraken2_report} \\\\\n        -o ${prefix}_bracken.output.txt \\\\\n        -w ${prefix}_bracken.outreport.txt \n   \n    printf \"BRACKEN:\\n  bracken: 2.6.1\\n\" > versions.yml\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n   \n    \"\"\"\n    bracken \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -d $kraken2_db \\\\\n        -i ${kraken2_report} \\\\\n        -o ${prefix}_bracken.output.txt \\\\\n        -w ${prefix}_bracken.outreport.txt \n   \n    printf \"BRACKEN:\\n  bracken: 2.6.1\\n\" > versions.yml\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "meta",
            "kraken2_report",
            "kraken2_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::bracken=2.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bracken%3A2.6.1--py39h7cff6ad_2\" } else { container \"quay.io/biocontainers/bracken:2.6.1--py39h7cff6ad_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UNICYCLERHYBRID": {
        "name_process": "UNICYCLERHYBRID",
        "string_process": "\nprocess UNICYCLERHYBRID {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3\"\n    } else {\n        container \"quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3\"\n    }\n\n    input:\n    tuple val(meta), path(long_reads)\n    tuple val(meta), path(short_reads)\n\n    output:\n    tuple val(meta), path('*_contigs.fasta'), emit: scaffolds\n    tuple val(meta), path('*_graph.gfa'), emit: gfa\n    tuple val(meta), path('*.log')         , emit: log\n    path  \"versions.yml\"                   , emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $short_reads -l $long_reads\" : \"-1 ${short_reads[0]} -2 ${short_reads[1]} -l $long_reads\"\n    \"\"\"\n\n    unicycler --threads $task.cpus  $options.args  $input_reads  --out ./\n    mv assembly.fasta ${prefix}_contigs.fasta\n    mv assembly.gfa ${prefix}_graph.gfa\n    mv unicycler.log ${prefix}_unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(unicycler --version 2>&1 | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n\n    \n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"-s $short_reads -l $long_reads\" : \"-1 ${short_reads[0]} -2 ${short_reads[1]} -l $long_reads\"\n    \"\"\"\n\n    unicycler --threads $task.cpus  $options.args  $input_reads  --out ./\n    mv assembly.fasta ${prefix}_contigs.fasta\n    mv assembly.gfa ${prefix}_graph.gfa\n    mv unicycler.log ${prefix}_unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(unicycler --version 2>&1 | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n\n    \n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "meta",
            "long_reads",
            "meta",
            "short_reads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3\" } else { container \"quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIMAP2_ALIGN": {
        "name_process": "MINIMAP2_ALIGN",
        "string_process": "\nprocess MINIMAP2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::minimap2=2.21' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\"\n    } else {\n        container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path reference\n\n    output:\n    tuple val(meta), path(\"*.paf\"), emit: paf\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $input_reads \\\\\n        > ${prefix}.paf\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input_reads = meta.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $input_reads \\\\\n        > ${prefix}.paf\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::minimap2=2.21' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\" } else { container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HAMRONIZE_ABRICATE": {
        "name_process": "HAMRONIZE_ABRICATE",
        "string_process": "\nprocess HAMRONIZE_ABRICATE {\n    tag \"$meta.id\"\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    \n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\"\n    } else {\n        container \"quay.io/biocontainers/hamronization:1.0.3--py_0\"\n    }\n\n    input:\n    tuple val(meta), path(report)\n\n    output:\n    tuple val(meta), path('*.tsv'), emit: hamronized\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    hamronize abricate ${report} --reference_database_version db_v_1 --analysis_software_version tool_v_1 --output ${prefix}_abricate_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    hamronize abricate ${report} --reference_database_version db_v_1 --analysis_software_version tool_v_1 --output ${prefix}_abricate_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "report"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\" } else { container \"quay.io/biocontainers/hamronization:1.0.3--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HAMRONIZE_AMRFINDERPLUS": {
        "name_process": "HAMRONIZE_AMRFINDERPLUS",
        "string_process": "\nprocess HAMRONIZE_AMRFINDERPLUS {\n    tag \"$meta.id\"\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    \n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\"\n    } else {\n        container \"quay.io/biocontainers/hamronization:1.0.3--py_0\"\n    }\n\n    input:\n    tuple val(meta), path(report)\n\n    output:\n    tuple val(meta), path('*.tsv'), emit: hamronized\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    hamronize \\\\\n        amrfinderplus \\\\\n        ${report} \\\\\n        --reference_database_version db_v_1 \\\\\n        --analysis_software_version tool_v_1 \\\\\n        --input_file_name aafasta \\\\\n        --output ${prefix}_amrfinderplus_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    hamronize \\\\\n        amrfinderplus \\\\\n        ${report} \\\\\n        --reference_database_version db_v_1 \\\\\n        --analysis_software_version tool_v_1 \\\\\n        --input_file_name aafasta \\\\\n        --output ${prefix}_amrfinderplus_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "report"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\" } else { container \"quay.io/biocontainers/hamronization:1.0.3--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HAMRONIZE_SRAX": {
        "name_process": "HAMRONIZE_SRAX",
        "string_process": "\nprocess HAMRONIZE_SRAX {\n                    \n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:\"\") }\n\n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\"\n    } else {\n        container \"quay.io/biocontainers/hamronization:1.0.3--py_0\"\n    }\n    \n\n    input:\n    path(report)\n\n    output:\n    path('*.tsv'), emit: hamronized\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n                                                                                 \n    \"\"\"\n    hamronize srax ${report} --input_file_name mysrax --reference_database_version db_v_1 --reference_database_id db_id_1 --analysis_software_version tool_v_1 --output srax_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    hamronize srax ${report} --input_file_name mysrax --reference_database_version db_v_1 --reference_database_id db_id_1 --analysis_software_version tool_v_1 --output srax_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "report"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:\"\") }",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\" } else { container \"quay.io/biocontainers/hamronization:1.0.3--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HAMRONIZE_RGI": {
        "name_process": "HAMRONIZE_RGI",
        "string_process": "\nprocess HAMRONIZE_RGI {\n    tag \"$meta.id\"\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\"\n    } else {\n        container \"quay.io/biocontainers/hamronization:1.0.3--py_0\"\n    }\n    \n\n    input:\n    tuple val(meta), path(report)\n\n    output:\n    tuple val(meta), path('*.tsv'), emit: hamronized\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    hamronize rgi ${report} --input_file_name ${prefix} --reference_database_version db_v_1 --analysis_software_version tool_v_1 --output ${prefix}_rgi_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def prefix  = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    hamronize rgi ${report} --input_file_name ${prefix} --reference_database_version db_v_1 --analysis_software_version tool_v_1 --output ${prefix}_rgi_hamronized.tsv\n    \n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "report"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\" } else { container \"quay.io/biocontainers/hamronization:1.0.3--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HAMRONIZE_SUMMARIZE": {
        "name_process": "HAMRONIZE_SUMMARIZE",
        "string_process": "\nprocess HAMRONIZE_SUMMARIZE {\n    publishDir \"${params.outdir}\", mode: params.publish_dir_mode\n\n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\"\n    } else {\n        container \"quay.io/biocontainers/hamronization:1.0.3--py_0\"\n    }\n    \n\n    input:\n    path('?.tsv')\n\n    output:\n    path('amr_hamronized_summary.tsv'), emit: summary_tsv\n    path('amr_hamronized_summary.html'), emit: summary_html\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    \"\"\"\n    hamronize summarize --output amr_hamronized_summary.tsv --summary_type tsv *.tsv\n    hamronize summarize --output amr_hamronized_summary.html --summary_type interactive *.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    hamronize summarize --output amr_hamronized_summary.tsv --summary_type tsv *.tsv\n    hamronize summarize --output amr_hamronized_summary.html --summary_type interactive *.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(hamronize -v | sed 's/hamronize //g' )\n    END_VERSIONS\n\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ABMicroBioinf__pathogen",
        "directive": [
            "publishDir \"${params.outdir}\", mode: params.publish_dir_mode",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hamronization%3A1.0.3--py_0\" } else { container \"quay.io/biocontainers/hamronization:1.0.3--py_0\" }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "goodProcess": {
        "name_process": "goodProcess",
        "string_process": "\nprocess goodProcess {\n\n  input:\n  val x from mainInputChannel\n\n  output:\n  file(\"*.txt\") into fileChannel\n  val x into numericChannel\n\n  script:\n  \"\"\"\n  echo $x > file_${x}.txt\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  echo $x > file_${x}.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mainInputChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fileChannel",
            "numericChannel"
        ],
        "nb_outputs": 2,
        "name_workflow": "lifebit-ai__fail-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "terminalProcess": {
        "name_process": "terminalProcess",
        "string_process": "\nprocess terminalProcess {\n\n  input:\n  file(numeric_file) from channelToTerminalProcess\n\n  script:\n  \"\"\"\n  # Simulate the time the processes takes to finish\n  timeToWait=\\$(shuf -i ${params.terminalProcessTimeRange} -n 1)\n  sleep \\$timeToWait\n  if [ \"${params.abortTerminalProcess}\" = true ]; then\n    exit 1\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  # Simulate the time the processes takes to finish\n  timeToWait=\\$(shuf -i ${params.terminalProcessTimeRange} -n 1)\n  sleep \\$timeToWait\n  if [ \"${params.abortTerminalProcess}\" = true ]; then\n    exit 1\n  fi\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "channelToTerminalProcess"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__fail-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "intermitentFailProcess": {
        "name_process": "intermitentFailProcess",
        "string_process": "\nprocess intermitentFailProcess {\n\n  label \"intermitentProcess\"\n\n  input:\n  val x from numericChannel\n\n  output:\n  file(\"*.fas\") into fastaChannel\n\n  script:\n  \"\"\"\n  # Simulate the time the processes takes to finish\n  timeToWait=\\$(shuf -i ${params.intermitentProcessTimeRange} -n 1)\n  sleep \\$timeToWait\n  echo 'some text for the .command.log file'\n  # Test if number if even. If true, fail with an exit code \n  # equal to the number\n  if [ \\$((${x}%2)) -eq 0 ] && [ \"${params.alwaysPassIntermitentProcess}\" = false ]; then\n    exit $x\n  fi\n  echo $x > file_${x}.fas\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  # Simulate the time the processes takes to finish\n  timeToWait=\\$(shuf -i ${params.intermitentProcessTimeRange} -n 1)\n  sleep \\$timeToWait\n  echo 'some text for the .command.log file'\n  # Test if number if even. If true, fail with an exit code \n  # equal to the number\n  if [ \\$((${x}%2)) -eq 0 ] && [ \"${params.alwaysPassIntermitentProcess}\" = false ]; then\n    exit $x\n  fi\n  echo $x > file_${x}.fas\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "numericChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastaChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__fail-nf",
        "directive": [
            "label \"intermitentProcess\""
        ],
        "when": "",
        "stub": ""
    },
    "criticalProcess": {
        "name_process": "criticalProcess",
        "string_process": "\nprocess criticalProcess {\n  input:\n  file fasta from fastaChannel\n\n  output:\n  file fasta into newFastaChannel\n\n  script:\n  \"\"\"\n  echo 'some text for the .command.log file'\n  if [ \"${params.abortCriticalProcess}\" = true ]; then\n    exit 666\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  echo 'some text for the .command.log file'\n  if [ \"${params.abortCriticalProcess}\" = true ]; then\n    exit 666\n  fi\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastaChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "newFastaChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__fail-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "missingOutputFileProcess": {
        "name_process": "missingOutputFileProcess",
        "string_process": "\nprocess missingOutputFileProcess {\n\n  input:\n  file fasta from newFastaChannel\n\n  output:\n  file(\"*.mod\") into voidChannel\n\n  script:\n  \"\"\"\n  # Simulate the time the processes takes to finish\n  timeToWait=\\$(shuf -i ${params.missingOutputProcessTimeRange} -n 1)\n  sleep \\$timeToWait\n  echo 'some text for the .command.log file'\n  if [ \"${params.forceMissingOutputFail}\" = false ]; then\n    touch file_\\$timeToWait.mod\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  # Simulate the time the processes takes to finish\n  timeToWait=\\$(shuf -i ${params.missingOutputProcessTimeRange} -n 1)\n  sleep \\$timeToWait\n  echo 'some text for the .command.log file'\n  if [ \"${params.forceMissingOutputFail}\" = false ]; then\n    touch file_\\$timeToWait.mod\n  fi\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newFastaChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "voidChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__fail-nf",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
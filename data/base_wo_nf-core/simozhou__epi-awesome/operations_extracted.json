{
    "OPERATION_1": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n   .fromFilePairs( params.readsPath, size: params.singleEnd ? 1 : 2 )\n   .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.readsPath}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n   .into { read_files_fastqc; read_files_trimming }",
        "origin": [
            [
                "params.readsPath, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .from(macsconfig.readLines())\n    .map { line ->\n        list = line.split(',')\n        chip_sample_id = list[0]\n        ctrl_sample_id = list[1]\n        analysis_id = list[2]\n        [ chip_sample_id, ctrl_sample_id, analysis_id ]\n    }\n.set{ macs_para }",
        "origin": [],
        "gives": [
            [
                "macs_para",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
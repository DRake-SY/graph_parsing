{
    "cutadapt": {
        "name_process": "cutadapt",
        "string_process": "\nprocess cutadapt {\n\n\t               \n\ttag { name }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_CUTADAPT\n\n\t      \n\tcpus 1\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir cutadapt_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tval sample from samples\n\t\n\toutput:\n\t\tset val(name), file('*.cutadapt.fastq.gz') into trimmed_fastq\n\t\tset val(name), file('*.log') into cutadapt_log\n\n\t                                                                            \n\tshell:\n\n\t\tif (SINGLE_END) {\n\n\t\t\t                    \n\t\t\tname = sample[\"sample\"]\n\t\t\tfastq = sample[\"file\"]\n\n\t\t\t\"\"\"\n\t\t\tcutadapt \\\n\t\t\t\t-a AGATCGGAAGAGC \\\n\t\t\t\t-o ${name}.cutadapt.fastq.gz \\\n\t\t\t\t-e 0.1 \\\n\t\t\t\t-q 10 \\\n\t\t\t\t-m 25 \\\n\t\t\t\t-O 1 \\\n\t\t\t\t${fastq} > ${name}.log\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t                    \n\t\t\tname = sample[\"sample\"]\n\t\t\tname_1 = sample[\"sample\"] + \"_1\"\n\t\t\tname_2 = sample[\"sample\"] + \"_2\"\n\t\t\tfastq_1 = sample[\"file1\"]\n\t\t\tfastq_2 = sample[\"file2\"]\n\n\t\t\t\"\"\"\n\t\t\tcutadapt \\\n\t\t\t\t-a AGATCGGAAGAGC -A AGATCGGAAGAGC \\\n\t\t\t\t-o ${name_1}.cutadapt.fastq.gz \\\n\t\t\t\t-p ${name_2}.cutadapt.fastq.gz \\\n\t\t\t\t-e 0.1 \\\n\t\t\t\t-q 10 \\\n\t\t\t\t-m 25 \\\n\t\t\t\t-O 1 \\\n\t\t\t\t${fastq_1} ${fastq_2} > ${name}.log\n\t\t\t\"\"\"\n\t\t}\n}",
        "nb_lignes_process": 69,
        "string_script": "\t\tif (SINGLE_END) {\n\n\t\t\t                    \n\t\t\tname = sample[\"sample\"]\n\t\t\tfastq = sample[\"file\"]\n\n\t\t\t\"\"\"\n\t\t\tcutadapt \\\n\t\t\t\t-a AGATCGGAAGAGC \\\n\t\t\t\t-o ${name}.cutadapt.fastq.gz \\\n\t\t\t\t-e 0.1 \\\n\t\t\t\t-q 10 \\\n\t\t\t\t-m 25 \\\n\t\t\t\t-O 1 \\\n\t\t\t\t${fastq} > ${name}.log\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t                    \n\t\t\tname = sample[\"sample\"]\n\t\t\tname_1 = sample[\"sample\"] + \"_1\"\n\t\t\tname_2 = sample[\"sample\"] + \"_2\"\n\t\t\tfastq_1 = sample[\"file1\"]\n\t\t\tfastq_2 = sample[\"file2\"]\n\n\t\t\t\"\"\"\n\t\t\tcutadapt \\\n\t\t\t\t-a AGATCGGAAGAGC -A AGATCGGAAGAGC \\\n\t\t\t\t-o ${name_1}.cutadapt.fastq.gz \\\n\t\t\t\t-p ${name_2}.cutadapt.fastq.gz \\\n\t\t\t\t-e 0.1 \\\n\t\t\t\t-q 10 \\\n\t\t\t\t-m 25 \\\n\t\t\t\t-O 1 \\\n\t\t\t\t${fastq_1} ${fastq_2} > ${name}.log\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "goname",
            "FastQC",
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/fastqc",
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "samples"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_fastq",
            "cutadapt_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { name }",
            "beforeScript \"module purge\"",
            "module MODULE_CUTADAPT",
            "cpus 1",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir cutadapt_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "fastq_screen": {
        "name_process": "fastq_screen",
        "string_process": "\nprocess fastq_screen {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_FSCREEN\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir fscreen_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(fastq) from trimmed_fastq_screen\n\n\toutput:\n\t\tset val(sample), file(\"*.html\") into fastq_screen_html\n\t\tset val(sample), file(\"*.txt\") into fastq_screen_txt\n\t\n\tshell:\n\t\t\"\"\"\n\t\tfastq_screen \\\n\t\t\t--force \\\n\t\t\t--outdir ./ \\\n\t\t\t--subset 200000 \\\n\t\t\t--conf ${FSCREEN_CONF_FILEPATH} \\\n\t\t\t--threads ${task.cpus} \\\n\t\t\t--aligner bowtie2 \\\n\t\t\t${fastq}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "\t\t\"\"\"\n\t\tfastq_screen \\\n\t\t\t--force \\\n\t\t\t--outdir ./ \\\n\t\t\t--subset 200000 \\\n\t\t\t--conf ${FSCREEN_CONF_FILEPATH} \\\n\t\t\t--threads ${task.cpus} \\\n\t\t\t--aligner bowtie2 \\\n\t\t\t${fastq}\n\t\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_fastq_screen"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastq_screen_html",
            "fastq_screen_txt"
        ],
        "nb_outputs": 2,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_FSCREEN",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir fscreen_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "rsem_star": {
        "name_process": "rsem_star",
        "string_process": "\nprocess rsem_star {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEM\n\tmodule MODULE_STAR\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir star_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(fastq) from trimmed_fastq_star\n\n\toutput:\n\t\tset val(sample), file(\"*.STAR.genome.bam\") into bam_star\n\t\tset val(sample), file(\"*.transcript.bam\") into transcript_bam_star\n\t\tset val(sample), file(\"*.results\") into star_results\n\t\tset val(sample), file(\"*.stat\") into star_stat\n\n\t                                                                            \n\t\t\t\t                                                 \n\t\t\t\t             \n\t\t\t\t                     \n\tshell:\n\n\t\tif (SINGLE_END) {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--estimate-rspd \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-output-genome-bam \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t${fastq} \\\n\t\t\t\t${RSEM_STAR_INDICE_DIRPATH}/${RSEM_STAR_INDICE_NAME} \\\n\t\t\t\t${sample}\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--estimate-rspd \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-output-genome-bam \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t--paired-end ${fastq[0]} ${fastq[1]} \\\n\t\t\t\t${RSEM_STAR_INDICE_DIRPATH}/${RSEM_STAR_INDICE_NAME} \\\n\t\t\t\t${sample}\n\t\t\t\"\"\"\n\t\t}\n}",
        "nb_lignes_process": 71,
        "string_script": "\t\tif (SINGLE_END) {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--estimate-rspd \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-output-genome-bam \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t${fastq} \\\n\t\t\t\t${RSEM_STAR_INDICE_DIRPATH}/${RSEM_STAR_INDICE_NAME} \\\n\t\t\t\t${sample}\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--estimate-rspd \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-output-genome-bam \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t--paired-end ${fastq[0]} ${fastq[1]} \\\n\t\t\t\t${RSEM_STAR_INDICE_DIRPATH}/${RSEM_STAR_INDICE_NAME} \\\n\t\t\t\t${sample}\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_fastq_star"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_star",
            "transcript_bam_star",
            "star_results",
            "star_stat"
        ],
        "nb_outputs": 4,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEM",
            "module MODULE_STAR",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir star_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "dgea": {
        "name_process": "dgea",
        "string_process": "\nprocess dgea {\n\n\t               \n\ttag { script }\n\n\t                                               \n\terrorStrategy 'ignore'\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_R\n\n\t      \n\tcpus 1\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir analysis_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tfile script from r_script\n\t\tfile design from design_file\n\t\tfile results from star_results_dgea.map{x->x[1]}.collect()\n\n\toutput:\n\t\tfile \"*\" into dgea\n\t\n\tshell:\n\t\t\"\"\"\n\t\tRscript ${script} \\\n\t\t\t-r . \\\n\t\t\t-d \"${design}\" \\\n\t\t\t-b \"${BINOMIAL}\" \\\n\t\t\t-a \"${ANNOT_FILEPATH}\" \\\n\t\t\t-t 0.05 \\\n\t\t\t-o .\n\t\t\"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "\t\t\"\"\"\n\t\tRscript ${script} \\\n\t\t\t-r . \\\n\t\t\t-d \"${design}\" \\\n\t\t\t-b \"${BINOMIAL}\" \\\n\t\t\t-a \"${ANNOT_FILEPATH}\" \\\n\t\t\t-t 0.05 \\\n\t\t\t-o .\n\t\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "r_script",
            "design_file",
            "star_results_dgea"
        ],
        "nb_inputs": 3,
        "outputs": [
            "dgea"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { script }",
            "errorStrategy 'ignore'",
            "beforeScript \"module purge\"",
            "module MODULE_R",
            "cpus 1",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir analysis_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "rsem_star_mbscreen": {
        "name_process": "rsem_star_mbscreen",
        "string_process": "\nprocess rsem_star_mbscreen {\n\n\t           \n                                                                             \n                                       \n    \n\terrorStrategy 'ignore'\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEM\n\tmodule MODULE_STAR\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir star_mbscreen_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(fastq) from trimmed_fastq_star_mbscreen\n\n\toutput:\n\t\tset val(sample), file(\"*.STAR.genome.bam\") into bam_star_mbscreen\n\t\tset val(sample),\n\t\t\tfile(\"*.transcript.bam\") into transcript_bam_star_mbscreen\n\t\tset val(sample), file(\"*.results\") into results_star_mbscreen\n\t\tset val(sample), file(\"*.stat\") into stat_star_mbscreen\n\n\t                                                                            \n\tshell:\n\n\t\tif (SINGLE_END) {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t--no-bam-output \\\n\t\t\t\t${fastq} \\\n\t\t\t\t${star_mbscreen_indice_path} \\\n\t\t\t\t${sample}.mbscreen\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t--no-bam-output \\\n\t\t\t\t--paired-end ${fastq[0]} ${fastq[1]} \\\n\t\t\t\t${star_mbscreen_indice_path} \\\n\t\t\t\t${sample}.mbscreen\n\t\t\t\"\"\"\n\t\t}\n}",
        "nb_lignes_process": 73,
        "string_script": "\t\tif (SINGLE_END) {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t--no-bam-output \\\n\t\t\t\t${fastq} \\\n\t\t\t\t${star_mbscreen_indice_path} \\\n\t\t\t\t${sample}.mbscreen\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t\"\"\"\n\t\t\trsem-calculate-expression \\\n\t\t\t\t--temporary-folder \"tmp\" \\\n\t\t\t\t--star \\\n\t\t\t\t--num-threads ${task.cpus} \\\n\t\t\t\t--strandedness ${STRANDEDNESS} \\\n\t\t\t\t--seed 1 \\\n\t\t\t\t--star-gzipped-read-file \\\n\t\t\t\t--no-bam-output \\\n\t\t\t\t--paired-end ${fastq[0]} ${fastq[1]} \\\n\t\t\t\t${star_mbscreen_indice_path} \\\n\t\t\t\t${sample}.mbscreen\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_fastq_star_mbscreen"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_star_mbscreen",
            "transcript_bam_star_mbscreen",
            "results_star_mbscreen",
            "stat_star_mbscreen"
        ],
        "nb_outputs": 4,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "errorStrategy 'ignore'",
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEM",
            "module MODULE_STAR",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir star_mbscreen_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "sort_index_star": {
        "name_process": "sort_index_star",
        "string_process": "\nprocess sort_index_star {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_SAMTOOLS\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir star_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from bam_star_sort\n\n\toutput:\n\t\tset val(sample), file(\"*.bam\"), file(\"*.bai\") into bam_star_sorted\n\n\tshell:\n\t\tfilename = sample + \".sorted.bam\"\n\t\t\"\"\"\n\t\tsamtools sort \\\n\t\t\t--threads ${task.cpus} \\\n\t\t\t-o ${filename} \\\n\t\t\t${bam}\n\t\tsamtools index ${filename}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "\t\tfilename = sample + \".sorted.bam\"\n\t\t\"\"\"\n\t\tsamtools sort \\\n\t\t\t--threads ${task.cpus} \\\n\t\t\t-o ${filename} \\\n\t\t\t${bam}\n\t\tsamtools index ${filename}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_star_sort"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_star_sorted"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_SAMTOOLS",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir star_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "picard_group": {
        "name_process": "picard_group",
        "string_process": "\nprocess picard_group {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_PICARD\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir picard_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam), file(bai) from bam_star_sorted_picard\n\n\toutput:\n\t\tset val(sample), file(\"*.bam\") into picard_rg\n\n\tshell:\n\n\t\ttmp_dirname = \"tmp\"\n\t\tfilename = sample + \".rg.bam\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar AddOrReplaceReadGroups \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${filename} \\\n\t\t\tRGID=${sample} \\\n\t\t\tRGLB=${sample} \\\n\t\t\tRGPU=${sample} \\\n\t\t\tRGSM=${sample} \\\n\t\t\tRGCN=TheFrancisCrickInsitute \\\n\t\t\tRGPL=Illumina\n\t\t\"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "\t\ttmp_dirname = \"tmp\"\n\t\tfilename = sample + \".rg.bam\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar AddOrReplaceReadGroups \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${filename} \\\n\t\t\tRGID=${sample} \\\n\t\t\tRGLB=${sample} \\\n\t\t\tRGPU=${sample} \\\n\t\t\tRGSM=${sample} \\\n\t\t\tRGCN=TheFrancisCrickInsitute \\\n\t\t\tRGPL=Illumina\n\t\t\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_star_sorted_picard"
        ],
        "nb_inputs": 1,
        "outputs": [
            "picard_rg"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_PICARD",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir picard_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "picard_duplicates": {
        "name_process": "picard_duplicates",
        "string_process": "\nprocess picard_duplicates {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_PICARD\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir picard_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_rg_duplicate\n\n\toutput:\n\t\tset val(sample), file(\"*.bam\") into picard_dupmarked\n\t\tset val(sample), file(\"*.marked_duplicates\") into picard_duplicate\n\n\tshell:\n\n\t\ttmp_dirname = \"tmp\"\n\t\tfilename = sample + \".dupmarked.bam\"\n\n\t\t                   \n\t\tmetrics_filename = sample + \".marked_duplicates\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar MarkDuplicates \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${filename} \\\n\t\t\tMETRICS_FILE=${metrics_filename} \\\n\t\t\tASSUME_SORTED=true \\\n\t\t\tREMOVE_DUPLICATES=false \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "\t\ttmp_dirname = \"tmp\"\n\t\tfilename = sample + \".dupmarked.bam\"\n\n\t\t                   \n\t\tmetrics_filename = sample + \".marked_duplicates\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar MarkDuplicates \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${filename} \\\n\t\t\tMETRICS_FILE=${metrics_filename} \\\n\t\t\tASSUME_SORTED=true \\\n\t\t\tREMOVE_DUPLICATES=false \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_rg_duplicate"
        ],
        "nb_inputs": 1,
        "outputs": [
            "picard_dupmarked",
            "picard_duplicate"
        ],
        "nb_outputs": 2,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_PICARD",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir picard_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "index_picard": {
        "name_process": "index_picard",
        "string_process": "\nprocess index_picard {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_SAMTOOLS\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir picard_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_indexing\n\n\toutput:\n\t\tset val(sample), file(bam), file(\"*.bai\") into bai_picard\n\n\tshell:\n\t\t\"\"\"\n\t\tsamtools index ${bam}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\t\t\"\"\"\n\t\tsamtools index ${bam}\n\t\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "picard_dupmarked_indexing"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bai_picard"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_SAMTOOLS",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir picard_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "picard_complexity": {
        "name_process": "picard_complexity",
        "string_process": "\nprocess picard_complexity {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_PICARD\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir picard_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_complexity\n\n\toutput:\n\t\tset val(sample), file(\"*.complexity\") into picard_complexity\n\n\tshell:\n\n\t\t                                             \n\t\ttmp_dirname = \"tmp\"\n\t\tmetrics_filename = sample + \".complexity\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar EstimateLibraryComplexity \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${metrics_filename} \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "\t\ttmp_dirname = \"tmp\"\n\t\tmetrics_filename = sample + \".complexity\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar EstimateLibraryComplexity \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${metrics_filename} \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_complexity"
        ],
        "nb_inputs": 1,
        "outputs": [
            "picard_complexity"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_PICARD",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir picard_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "picard_rnaseqmetrics": {
        "name_process": "picard_rnaseqmetrics",
        "string_process": "\nprocess picard_rnaseqmetrics {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_PICARD\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir picard_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_rnaseqmetrics\n\n\toutput:\n\t\tset val(sample), file(\"*.rnaseqmetrics\") into picard_rnaseqmetrics\n\n\tshell:\n\n\t\t                                             \n\t\ttmp_dirname = \"tmp\"\n\t\tmetrics_filename = sample + \".rnaseqmetrics\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar CollectRnaSeqMetrics \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${metrics_filename} \\\n\t\t\tREF_FLAT=${ANNOT_REFFLAT_FILEPATH} \\\n\t\t\tSTRAND_SPECIFICITY=NONE \\\n\t\t\tRIBOSOMAL_INTERVALS=${ANNOT_RRNA_INTERVAL_FILEPATH} \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "\t\ttmp_dirname = \"tmp\"\n\t\tmetrics_filename = sample + \".rnaseqmetrics\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar CollectRnaSeqMetrics \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${metrics_filename} \\\n\t\t\tREF_FLAT=${ANNOT_REFFLAT_FILEPATH} \\\n\t\t\tSTRAND_SPECIFICITY=NONE \\\n\t\t\tRIBOSOMAL_INTERVALS=${ANNOT_RRNA_INTERVAL_FILEPATH} \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_rnaseqmetrics"
        ],
        "nb_inputs": 1,
        "outputs": [
            "picard_rnaseqmetrics"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_PICARD",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir picard_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "picard_multimetrics": {
        "name_process": "picard_multimetrics",
        "string_process": "\nprocess picard_multimetrics {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_PICARD\n\tmodule MODULE_R\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir picard_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_multimetrics\n\n\toutput:\n\t\tset val(sample), file(\"*.pdf\") into picard_multimetrics_pdf\n\t\tset val(sample), file(\"*_metrics\") into picard_multimetrics_metrics\n\n\tshell:\n\n\t\t                                             \n\t\ttmp_dirname = \"tmp\"\n\t\tmetrics_filename = sample + \".multimetrics\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar CollectMultipleMetrics \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${metrics_filename} \\\n\t\t\tPROGRAM=CollectAlignmentSummaryMetrics \\\n\t\t\tR=${SEQ_FILEPATH} \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "\t\ttmp_dirname = \"tmp\"\n\t\tmetrics_filename = sample + \".multimetrics\"\n\n\t\t\"\"\"\n\t\tjava -Xmx10g -Djava.io.tmpdir=${tmp_dirname} \\\n\t\t\t-jar \\$EBROOTPICARD/picard.jar CollectMultipleMetrics \\\n\t\t\tVALIDATION_STRINGENCY=SILENT \\\n\t\t\tINPUT=${bam} \\\n\t\t\tOUTPUT=${metrics_filename} \\\n\t\t\tPROGRAM=CollectAlignmentSummaryMetrics \\\n\t\t\tR=${SEQ_FILEPATH} \\\n\t\t\tTMP_DIR=${tmp_dirname}\n\t\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_multimetrics"
        ],
        "nb_inputs": 1,
        "outputs": [
            "picard_multimetrics_pdf",
            "picard_multimetrics_metrics"
        ],
        "nb_outputs": 2,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_PICARD",
            "module MODULE_R",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir picard_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "infer_experiment": {
        "name_process": "infer_experiment",
        "string_process": "\nprocess infer_experiment {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_infer_experiment\n\t\n\toutput:\n\t\tset val(sample), file(\"*.infer_experiment*\") into infer_experiment\n\t\n\tshell:\n\n\t\tmetrics_filename = sample + \".infer_experiment\"\n\n\t\t\"\"\"\n\t\tinfer_experiment.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t> ${metrics_filename}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "\t\tmetrics_filename = sample + \".infer_experiment\"\n\n\t\t\"\"\"\n\t\tinfer_experiment.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t> ${metrics_filename}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_infer_experiment"
        ],
        "nb_inputs": 1,
        "outputs": [
            "infer_experiment"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "junction_annotation": {
        "name_process": "junction_annotation",
        "string_process": "\nprocess junction_annotation {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_junction_annotation\n\n\toutput:\n\t\tset val(sample), file(\"*.junction_annotation*\") into junction_annotation\n\t\n\tshell:\n\n\t\tmetrics_filename = sample + \".junction_annotation\"\n\n\t\t\"\"\"\n\t\tjunction_annotation.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t-o ${metrics_filename}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "\t\tmetrics_filename = sample + \".junction_annotation\"\n\n\t\t\"\"\"\n\t\tjunction_annotation.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t-o ${metrics_filename}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_junction_annotation"
        ],
        "nb_inputs": 1,
        "outputs": [
            "junction_annotation"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "junction_saturation": {
        "name_process": "junction_saturation",
        "string_process": "\nprocess junction_saturation {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_junction_saturation\n\n\toutput:\n\t\tset val(sample), file(\"*.junction_saturation*\") into junction_saturation\n\n\tshell:\n\n\t\tmetrics_filename = sample + \".junction_saturation\"\n\n\t\t\"\"\"\n\t\tjunction_saturation.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t-o ${metrics_filename}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "\t\tmetrics_filename = sample + \".junction_saturation\"\n\n\t\t\"\"\"\n\t\tjunction_saturation.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t-o ${metrics_filename}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_junction_saturation"
        ],
        "nb_inputs": 1,
        "outputs": [
            "junction_saturation"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "mismatch_profile": {
        "name_process": "mismatch_profile",
        "string_process": "\nprocess mismatch_profile {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_mismatch_profile\n\n\toutput:\n\t\tset val(sample), file(\"*.mismatch_profile*\") into mismatch_profile\n\n\tshell:\n\n\t\tmetrics_filename = sample + \".mismatch_profile\"\n\n\t\t\"\"\"\n\t\tmismatch_profile.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-l ${ROUGH_READ_LENGTH} \\\n\t\t\t-o ${metrics_filename}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "\t\tmetrics_filename = sample + \".mismatch_profile\"\n\n\t\t\"\"\"\n\t\tmismatch_profile.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-l ${ROUGH_READ_LENGTH} \\\n\t\t\t-o ${metrics_filename}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_mismatch_profile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mismatch_profile"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "read_distribution": {
        "name_process": "read_distribution",
        "string_process": "\nprocess read_distribution {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam) from picard_dupmarked_read_distribution\n\n\toutput:\n\t\tset val(sample), file(\"*.read_distribution*\") into read_distribution\n\t\n\tshell:\n\n\t\tmetrics_filename = sample + \".read_distribution\"\n\n\t\t\"\"\"\n\t\tread_distribution.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t> ${metrics_filename}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "\t\tmetrics_filename = sample + \".read_distribution\"\n\n\t\t\"\"\"\n\t\tread_distribution.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH} \\\n\t\t\t> ${metrics_filename}\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "picard_dupmarked_read_distribution"
        ],
        "nb_inputs": 1,
        "outputs": [
            "read_distribution"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "transcript_integrity_number": {
        "name_process": "transcript_integrity_number",
        "string_process": "\nprocess transcript_integrity_number {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RSEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam),\n\t\t\tfile(bai) from bai_picard_transcript_integrity_number\n\n\toutput:\n\t\tset val(sample), file(\"*.{xls,txt}\") into transcript_integrity_number\n\n\tshell:\n\t\t\"\"\"\n\t\ttin.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH}\n\t\t\"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\t\t\"\"\"\n\t\ttin.py \\\n\t\t\t-i ${bam} \\\n\t\t\t-r ${ANNOT_BED_FILEPATH}\n\t\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bai_picard_transcript_integrity_number"
        ],
        "nb_inputs": 1,
        "outputs": [
            "transcript_integrity_number"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RSEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "rnaseqc": {
        "name_process": "rnaseqc",
        "string_process": "\nprocess rnaseqc {\n\n\t               \n\ttag { sample }\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t          \n\tmodule MODULE_RNASEQC\n\n\t      \n\tcpus 32\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir rnaseqc_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tset val(sample), file(bam), file(bai) from bai_picard_rnaseqc\n\n\toutput:\n\t\tset val(sample), file(\"*rnaseqc*\") into rnaseqc\n\n\tshell:\n\n\t\tif (SINGLE_END) {\n\n\t\t\tmetrics_filename = sample + \".rnaseqc\"\n\n\t\t\t\"\"\"\n\t\t\tjava -Xmx10g -jar \\$EBROOTRNAMINSEQC/RNA-SeQC_v[0-9].[0-9].[0-9].jar \\\n\t\t\t\t-d 1000000 \\\n\t\t\t\t-rRNA ${ANNOT_RRNA_FILEPATH} \\\n\t\t\t\t-r ${SEQ_FILEPATH} \\\n\t\t\t\t-t ${ANNOT_RNASEQC_FILEPATH} \\\n\t\t\t\t-o ${metrics_filename} \\\n\t\t\t\t-singleEnd \\\n\t\t\t\t-s \"${sample}|${bam}|${sample}\"\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\tmetrics_filename = sample + \".rnaseqc\"\n\n\t\t\t\"\"\"\n\t\t\tjava -Xmx10g -jar \\$EBROOTRNAMINSEQC/RNA-SeQC_v[0-9].[0-9].[0-9].jar \\\n\t\t\t\t-d 1000000 \\\n\t\t\t\t-rRNA ${ANNOT_RRNA_FILEPATH} \\\n\t\t\t\t-r ${SEQ_FILEPATH} \\\n\t\t\t\t-t ${ANNOT_RNASEQC_FILEPATH} \\\n\t\t\t\t-o ${metrics_filename} \\\n\t\t\t\t-s \"${sample}|${bam}|${sample}\"\n\t\t\t\"\"\"\n\t\t}\n\n}",
        "nb_lignes_process": 59,
        "string_script": "\t\tif (SINGLE_END) {\n\n\t\t\tmetrics_filename = sample + \".rnaseqc\"\n\n\t\t\t\"\"\"\n\t\t\tjava -Xmx10g -jar \\$EBROOTRNAMINSEQC/RNA-SeQC_v[0-9].[0-9].[0-9].jar \\\n\t\t\t\t-d 1000000 \\\n\t\t\t\t-rRNA ${ANNOT_RRNA_FILEPATH} \\\n\t\t\t\t-r ${SEQ_FILEPATH} \\\n\t\t\t\t-t ${ANNOT_RNASEQC_FILEPATH} \\\n\t\t\t\t-o ${metrics_filename} \\\n\t\t\t\t-singleEnd \\\n\t\t\t\t-s \"${sample}|${bam}|${sample}\"\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\tmetrics_filename = sample + \".rnaseqc\"\n\n\t\t\t\"\"\"\n\t\t\tjava -Xmx10g -jar \\$EBROOTRNAMINSEQC/RNA-SeQC_v[0-9].[0-9].[0-9].jar \\\n\t\t\t\t-d 1000000 \\\n\t\t\t\t-rRNA ${ANNOT_RRNA_FILEPATH} \\\n\t\t\t\t-r ${SEQ_FILEPATH} \\\n\t\t\t\t-t ${ANNOT_RNASEQC_FILEPATH} \\\n\t\t\t\t-o ${metrics_filename} \\\n\t\t\t\t-s \"${sample}|${bam}|${sample}\"\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bai_picard_rnaseqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rnaseqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "tag { sample }",
            "beforeScript \"module purge\"",
            "module MODULE_RNASEQC",
            "cpus 32",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir rnaseqc_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n\techo true\n\n\t                               \n\tbeforeScript \"module purge\"\n\n\t         \n\tmodule MODULE_MULTIQC\n\n\t      \n\tcpus 1\n\texecutor \"slurm\"\n\tmemory \"6000\"\n\n\t                   \n\tpublishDir log_dir.toString(),\n\t\tmode: PUBLISHDIR_MODE,\n\t\toverwrite: PUBLISHDIR_OVERWRITE\n\n\tinput:\n\t\tfile(\"cutadapt/*\") from cutadapt_log.map{x->x[1]}.collect()\n\n\t\tfile(\"*.html\") from fastq_screen_html.map{x->x[1]}.collect()\n\t\tfile(\"*.txt\") from fastq_screen_txt.map{x->x[1]}.collect()\n\n\t\tfile(\"star/*\") from bam_star_multiqc.map{x->x[1]}.collect()\n\t\tfile(\"star/*\") from transcript_bam_star.map{x->x[1]}.collect()\n\t\tfile(\"star/*\") from star_results_multiqc.map{x->x[1]}.collect()\n\t\tfile(\"star/*\") from star_stat.map{x->x[1]}.collect()\n\n\t\t       \"mbscreen/*\"                                               \n\t\t       \"mbscreen/*\"                                    \n\t\t                         \n\t\t       \"mbscreen/*\"                                                   \n\t\t       \"mbscreen/*\"                                                \n\n\t\tfile(\"sort_index_star/*\") from bam_star_sorted_multiqc.\n\t\t\tmap{x->x[1]}.collect()\n\n\t\tfile(\"picard/*\") from picard_rg_multiqc.map{x->x[1]}.collect()\n\t\tfile(\"picard/*\") from picard_duplicate.map{x->x[1]}.collect()\n\t\tfile(\"picard/*\") from bai_picard_multiqc.map{x->x[1]}.collect()\n\t\tfile(\"picard/*\") from picard_complexity.map{x->x[1]}.collect()\n\t\tfile(\"picard/*\") from picard_rnaseqmetrics.map{x->x[1]}.collect()\n\t\tfile(\"picard/*\") from picard_multimetrics_pdf.map{x->x[1]}.collect()\n\t\tfile(\"picard/*\") from picard_multimetrics_metrics.map{x->x[1]}.collect()\n\t\t\n\t\tfile(\"rseqc/*\") from infer_experiment.map{x->x[1]}.collect()\n\t\tfile(\"rseqc/*\") from junction_annotation.map{x->x[1]}.collect()\n\t\tfile(\"rseqc/*\") from junction_saturation.map{x->x[1]}.collect()\n\t\tfile(\"rseqc/*\") from mismatch_profile.map{x->x[1]}.collect()\n\t\tfile(\"rseqc/*\") from read_distribution.map{x->x[1]}.collect()\n\t\tfile(\"rseqc/*\") from transcript_integrity_number.map{x->x[1]}.collect()\n\n\t\tfile(\"rnaseqc/*\") from rnaseqc.map{x->x[1]}.collect()\n\n\toutput:\n\t\tfile \"multiqc_data\" into multiqc_data\n\t\tfile \"multiqc_report.html\" into multiqc_report\n\n\tshell:\n\t\t\n\t\tif (MULTIQC_CONFIG_FILEPATH) {\n\n\t\t\t\"\"\"\n\t\t\tmultiqc -f --config ${MULTIQC_CONFIG_FILEPATH} ./\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t\"\"\"\n\t\t\tmultiqc -f ./\n\t\t\t\"\"\"\n\t\t}\n}",
        "nb_lignes_process": 75,
        "string_script": "\t\tif (MULTIQC_CONFIG_FILEPATH) {\n\n\t\t\t\"\"\"\n\t\t\tmultiqc -f --config ${MULTIQC_CONFIG_FILEPATH} ./\n\t\t\t\"\"\"\n\n\t\t} else {\n\n\t\t\t\"\"\"\n\t\t\tmultiqc -f ./\n\t\t\t\"\"\"\n\t\t}",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "cutadapt_log",
            "fastq_screen_html",
            "fastq_screen_txt",
            "bam_star_multiqc",
            "transcript_bam_star",
            "star_results_multiqc",
            "star_stat",
            "bam_star_sorted_multiqc",
            "picard_rg_multiqc",
            "picard_duplicate",
            "bai_picard_multiqc",
            "picard_complexity",
            "picard_rnaseqmetrics",
            "picard_multimetrics_pdf",
            "picard_multimetrics_metrics",
            "infer_experiment",
            "junction_annotation",
            "junction_saturation",
            "mismatch_profile",
            "read_distribution",
            "transcript_integrity_number",
            "rnaseqc"
        ],
        "nb_inputs": 22,
        "outputs": [
            "multiqc_data",
            "multiqc_report"
        ],
        "nb_outputs": 2,
        "name_workflow": "crickbabs__rnaSeq_byBABS",
        "directive": [
            "echo true",
            "beforeScript \"module purge\"",
            "module MODULE_MULTIQC",
            "cpus 1",
            "executor \"slurm\"",
            "memory \"6000\"",
            "publishDir log_dir.toString() , mode: PUBLISHDIR_MODE , overwrite: PUBLISHDIR_OVERWRITE"
        ],
        "when": "",
        "stub": ""
    }
}
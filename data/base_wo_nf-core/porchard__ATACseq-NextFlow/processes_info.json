{
    "trim": {
        "name_process": "trim",
        "string_process": "\nprocess trim {\n\n    publishDir \"${params.results}/trim\", mode: 'rellink'\n    container 'library://porchard/default/cta:20220113'\n    errorStrategy 'retry'\n    maxRetries 1\n    time '24h'\n    maxForks 10\n\n    input:\n    tuple val(library), val(readgroup), path(fastq_1), path(fastq_2)\n\n    output:\n    tuple val(library), val(readgroup), path(\"${library}-${readgroup}.1.trimmed.fastq.gz\"), path(\"${library}-${readgroup}.2.trimmed.fastq.gz\")\n\n    \"\"\"\n    ${IONICE} cta $fastq_1 $fastq_2 ${library}-${readgroup}.1.trimmed.fastq.gz ${library}-${readgroup}.2.trimmed.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    ${IONICE} cta $fastq_1 $fastq_2 ${library}-${readgroup}.1.trimmed.fastq.gz ${library}-${readgroup}.2.trimmed.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library",
            "readgroup",
            "fastq_1",
            "fastq_2"
        ],
        "nb_inputs": 4,
        "outputs": [
            "readgroup"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/trim\", mode: 'rellink'",
            "container 'library://porchard/default/cta:20220113'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "time '24h'",
            "maxForks 10"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n\n    publishDir \"${params.results}/fastqc\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    errorStrategy 'retry'\n    maxRetries 1\n    maxForks 10\n\n    input:\n    path(fastq)\n\n    output:\n    path(fastqc_out)\n\n    script:\n    fastqc_out = fastq.getName().replaceAll('.fastq.gz', '_fastqc.zip')\n\n    \"\"\"\n    fastqc $fastq -o .\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    fastqc_out = fastq.getName().replaceAll('.fastq.gz', '_fastqc.zip')\n\n    \"\"\"\n    fastqc $fastq -o .\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/fastqc\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "maxForks 10"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n    publishDir \"${params.results}/multiqc/${before_or_after_trim}\", mode: 'rellink', overwrite: true\n    container 'library://porchard/default/general:20220107'\n    time '24h'\n\n    input:\n    tuple val(before_or_after_trim), path(x)\n\n    output:\n    path('multiqc_data')\n    path('multiqc_report.html')\n\n    \"\"\"\n    multiqc .\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    multiqc .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "before_or_after_trim",
            "x"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/multiqc/${before_or_after_trim}\", mode: 'rellink', overwrite: true",
            "container 'library://porchard/default/general:20220107'",
            "time '24h'"
        ],
        "when": "",
        "stub": ""
    },
    "bwa": {
        "name_process": "bwa",
        "string_process": "\nprocess bwa {\n\n    publishDir \"${params.results}/bwa\", mode: 'rellink'\n    container 'library://porchard/default/bwa:0.7.15'\n    memory '50 GB'\n    cpus 12\n    errorStrategy 'retry'\n    maxRetries 1\n    time '48h'\n\n    input:\n    tuple val(library), val(readgroup), path(fastq_1), path(fastq_2)\n\n    output:\n    tuple val(library), path(\"${library}-${readgroup}.bam\")\n\n    \"\"\"\n    bwa mem -I 200,200,5000 -M -t 12 ${get_bwa_index(get_genome(library))} ${fastq_1} ${fastq_2} | samtools sort -m 1g -@ 11 -O bam -T sort_tmp -o ${library}-${readgroup}.bam -\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    bwa mem -I 200,200,5000 -M -t 12 ${get_bwa_index(get_genome(library))} ${fastq_1} ${fastq_2} | samtools sort -m 1g -@ 11 -O bam -T sort_tmp -o ${library}-${readgroup}.bam -\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "library",
            "readgroup",
            "fastq_1",
            "fastq_2"
        ],
        "nb_inputs": 4,
        "outputs": [
            "library"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/bwa\", mode: 'rellink'",
            "container 'library://porchard/default/bwa:0.7.15'",
            "memory '50 GB'",
            "cpus 12",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "time '48h'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_mapped": {
        "name_process": "merge_mapped",
        "string_process": "\nprocess merge_mapped {\n\n    publishDir \"${params.results}/merge\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    errorStrategy 'retry'\n    maxRetries 1\n    time '5h'\n    maxForks 10\n\n    input:\n    tuple val(library), path(bams)\n\n    output:\n    tuple val(library), path(\"${library}.bam\")\n\n    \"\"\"\n    ${IONICE} samtools merge ${library}.bam ${bams.join(' ')}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    ${IONICE} samtools merge ${library}.bam ${bams.join(' ')}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library",
            "bams"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/merge\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "time '5h'",
            "maxForks 10"
        ],
        "when": "",
        "stub": ""
    },
    "mark_duplicates": {
        "name_process": "mark_duplicates",
        "string_process": "\nprocess mark_duplicates {\n\n    publishDir \"${params.results}/mark_duplicates\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    errorStrategy 'retry'\n    maxRetries 1\n    time '5h'\n    maxForks 15\n\n    input:\n    tuple val(library), path(bam)\n\n    output:\n    tuple val(library), path(\"${library}.md.bam\"), path(\"${library}.md.bam.bai\")\n\n    \"\"\"\n    java -Xmx4g -Xms4g -jar \\$PICARD_JAR MarkDuplicates I=$bam O=${library}.md.bam ASSUME_SORTED=true METRICS_FILE=${library}.metrics VALIDATION_STRINGENCY=LENIENT\n    samtools index ${library}.md.bam\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    java -Xmx4g -Xms4g -jar \\$PICARD_JAR MarkDuplicates I=$bam O=${library}.md.bam ASSUME_SORTED=true METRICS_FILE=${library}.metrics VALIDATION_STRINGENCY=LENIENT\n    samtools index ${library}.md.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "library",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/mark_duplicates\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "time '5h'",
            "maxForks 15"
        ],
        "when": "",
        "stub": ""
    },
    "prune": {
        "name_process": "prune",
        "string_process": "\nprocess prune {\n\n    publishDir \"${params.results}/prune\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    memory '3 GB'\n    time '5h'\n    errorStrategy 'retry'\n    maxRetries 3\n    maxForks 10\n\n    input:\n    tuple val(library), path(bam), path(bam_index)\n\n    output:\n    tuple val(library), path(\"${library}.pruned.bam\")\n\n    \"\"\"\n    ${IONICE} samtools view -h -b -f 3 -F 4 -F 8 -F 256 -F 1024 -F 2048 -q 30 $bam ${AUTOSOMAL_REFERENCES[get_genome(library)].join(' ')} > ${library}.pruned.bam \n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    ${IONICE} samtools view -h -b -f 3 -F 4 -F 8 -F 256 -F 1024 -F 2048 -q 30 $bam ${AUTOSOMAL_REFERENCES[get_genome(library)].join(' ')} > ${library}.pruned.bam \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library",
            "bam",
            "bam_index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "library"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/prune\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "memory '3 GB'",
            "time '5h'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "maxForks 10"
        ],
        "when": "",
        "stub": ""
    },
    "bamtobed": {
        "name_process": "bamtobed",
        "string_process": "\nprocess bamtobed {\n\n    container 'library://porchard/default/general:20220107'\n    time '4h'\n    maxForks 10\n\n    input:\n    tuple val(library), path(bam)\n\n    output:\n    tuple val(library), path(\"${library}.bed\")\n\n    \"\"\"\n    bedtools bamtobed -i $bam > ${library}.bed\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    bedtools bamtobed -i $bam > ${library}.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "library",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "container 'library://porchard/default/general:20220107'",
            "time '4h'",
            "maxForks 10"
        ],
        "when": "",
        "stub": ""
    },
    "macs2": {
        "name_process": "macs2",
        "string_process": "\nprocess macs2 {\n\n    publishDir \"${params.results}/macs2\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    time '5h'\n\n    input:\n    tuple val(library), path(bed)\n\n    output:\n    tuple val(library), path(\"${library}_peaks.broadPeak\"), emit: peaks\n    tuple val(library), path(\"${library}_treat_pileup.bdg\"), emit: bedgraph\n\n    \"\"\"\n    macs2 callpeak -t $bed --outdir . --SPMR -f BED -n $library -g ${get_macs2_genome_size(get_genome(library))} --nomodel --shift -100 --seed 762873 --extsize 200 -B --broad --keep-dup all\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    macs2 callpeak -t $bed --outdir . --SPMR -f BED -n $library -g ${get_macs2_genome_size(get_genome(library))} --nomodel --shift -100 --seed 762873 --extsize 200 -B --broad --keep-dup all\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/macs2\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "time '5h'"
        ],
        "when": "",
        "stub": ""
    },
    "blacklist_filter_peaks": {
        "name_process": "blacklist_filter_peaks",
        "string_process": "\nprocess blacklist_filter_peaks {\n\n    publishDir \"${params.results}/macs2\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    time '1h'\n\n    input:\n    tuple val(library), path(peaks)\n\n    output:\n    path(\"${library}_peaks.broadPeak.noblacklist\")\n\n    when:\n    has_blacklist(get_genome(library))\n\n    \"\"\"\n    bedtools intersect -a $peaks -b ${get_blacklists(get_genome(library)).join(' ')} -v > ${library}_peaks.broadPeak.noblacklist\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    bedtools intersect -a $peaks -b ${get_blacklists(get_genome(library)).join(' ')} -v > ${library}_peaks.broadPeak.noblacklist\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "library",
            "peaks"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/macs2\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "time '1h'"
        ],
        "when": "has_blacklist(get_genome(library))",
        "stub": ""
    },
    "bigwig": {
        "name_process": "bigwig",
        "string_process": "\nprocess bigwig {\n\n    publishDir \"${params.results}/bigwig\", mode: 'rellink'\n    container 'library://porchard/default/general:20220107'\n    time '5h'\n\n    input:\n    tuple val(library), path(bedgraph)\n\n    output:\n    tuple val(genome), path(\"${library}.bw\")\n\n    script:\n    genome = get_genome(library)\n\n    \"\"\"\n    LC_COLLATE=C sort -k1,1 -k2n,2 $bedgraph > sorted.bedgraph\n    bedClip sorted.bedgraph ${get_chrom_sizes(genome)} clipped.bedgraph\n    bedGraphToBigWig clipped.bedgraph ${get_chrom_sizes(genome)} ${library}.bw\n    rm sorted.bedgraph clipped.bedgraph\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "    genome = get_genome(library)\n\n    \"\"\"\n    LC_COLLATE=C sort -k1,1 -k2n,2 $bedgraph > sorted.bedgraph\n    bedClip sorted.bedgraph ${get_chrom_sizes(genome)} clipped.bedgraph\n    bedGraphToBigWig clipped.bedgraph ${get_chrom_sizes(genome)} ${library}.bw\n    rm sorted.bedgraph clipped.bedgraph\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Mgenome",
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/mgenome",
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            },
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "library",
            "bedgraph"
        ],
        "nb_inputs": 2,
        "outputs": [
            "genome"
        ],
        "nb_outputs": 1,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/bigwig\", mode: 'rellink'",
            "container 'library://porchard/default/general:20220107'",
            "time '5h'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_signal_at_tss": {
        "name_process": "plot_signal_at_tss",
        "string_process": "\nprocess plot_signal_at_tss {\n\n    publishDir \"${params.results}/bigwig/plot\", mode: 'rellink', overwrite: true\n    container 'library://porchard/default/general:20220107'\n    errorStrategy 'retry'\n    maxRetries 1\n    memory { 10.GB * task.attempt }\n    tag \"${genome}\"\n\n    input:\n    tuple val(genome), path(bw)\n\n    output:\n    path(\"*.png\") optional true\n\n    \"\"\"\n    plot-signal-at-tss.py --genes ${params.plot_signal_at_genes.join(' ')} --tss-file ${get_tss(genome)} --bigwigs ${bw.join(' ')} --prefix ${genome}.\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    plot-signal-at-tss.py --genes ${params.plot_signal_at_genes.join(' ')} --tss-file ${get_tss(genome)} --bigwigs ${bw.join(' ')} --prefix ${genome}.\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome",
            "bw"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/bigwig/plot\", mode: 'rellink', overwrite: true",
            "container 'library://porchard/default/general:20220107'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "memory { 10.GB * task.attempt }",
            "tag \"${genome}\""
        ],
        "when": "",
        "stub": ""
    },
    "ataqv": {
        "name_process": "ataqv",
        "string_process": "\nprocess ataqv {\n\n    publishDir \"${params.results}/ataqv\", mode: 'rellink'\n    container 'library://porchard/default/ataqv:1.3.0'\n    errorStrategy 'retry'\n    maxRetries 1\n    memory '5 GB'\n    time '3h'\n\n    input:\n    tuple val(library), path(bam), path(bam_index), path(peaks)\n\n    output:\n    tuple val(genome), path(\"${library}.ataqv.json.gz\"), emit: for_viewer\n    path(\"${library}.ataqv.out\")\n\n    script:\n    genome = get_genome(library)\n\n    \"\"\"\n    ${IONICE} ataqv --peak-file $peaks --name ${library} --metrics-file ${library}.ataqv.json.gz --tss-file ${get_tss(genome)} ${make_excluded_regions_arg(genome)} --ignore-read-groups ${get_organism(genome)} $bam > ${library}.ataqv.out\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    genome = get_genome(library)\n\n    \"\"\"\n    ${IONICE} ataqv --peak-file $peaks --name ${library} --metrics-file ${library}.ataqv.json.gz --tss-file ${get_tss(genome)} ${make_excluded_regions_arg(genome)} --ignore-read-groups ${get_organism(genome)} $bam > ${library}.ataqv.out\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Mgenome"
        ],
        "tools_url": [
            "https://bio.tools/mgenome"
        ],
        "tools_dico": [
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            }
        ],
        "inputs": [
            "library",
            "bam",
            "bam_index",
            "peaks"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/ataqv\", mode: 'rellink'",
            "container 'library://porchard/default/ataqv:1.3.0'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "memory '5 GB'",
            "time '3h'"
        ],
        "when": "",
        "stub": ""
    },
    "ataqv_viewer": {
        "name_process": "ataqv_viewer",
        "string_process": "\nprocess ataqv_viewer {\n\n    publishDir \"${params.results}/ataqv-viewer\", mode: 'rellink'\n    container 'library://porchard/default/ataqv:1.3.0'\n    errorStrategy 'retry'\n    maxRetries 1\n    memory { 10.GB * task.attempt }\n    time '1h'\n    tag \"${genome}\"\n\n    input:\n    tuple val(genome), path(json)\n\n    output:\n    path(\"ataqv-viewer-${genome}\")\n\n    \"\"\"\n    mkarv ataqv-viewer-${genome} ${json.join(' ')}\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    mkarv ataqv-viewer-${genome} ${json.join(' ')}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome",
            "json"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "porchard__ATACseq-NextFlow",
        "directive": [
            "publishDir \"${params.results}/ataqv-viewer\", mode: 'rellink'",
            "container 'library://porchard/default/ataqv:1.3.0'",
            "errorStrategy 'retry'",
            "maxRetries 1",
            "memory { 10.GB * task.attempt }",
            "time '1h'",
            "tag \"${genome}\""
        ],
        "when": "",
        "stub": ""
    }
}
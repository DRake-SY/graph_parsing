{
    "OPERATION_1": {
        "string": "ch_input = Channel\n\t        .fromFilePairs(params.input, checkIfExists: true)\n\t\t.ifEmpty{ exit 1, \"[error]: Cannot find input files at: ${params.input}\" }\n\t\t.into{ fastqc_reads; BBDUK_reads; raw_reads }",
        "origin": [
            [
                "params.input, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_input",
                "P"
            ],
            [
                "fastqc_reads",
                "P"
            ],
            [
                "BBDUK_reads",
                "P"
            ],
            [
                "raw_reads",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "input_bams_ch = Channel\n\t\t     .fromPath(params.bams)\n\t\t     .map { file -> tuple(file.baseName, file) }\n\t\t     .set{ qc_bams } ",
        "origin": [
            [
                "params.bams",
                "A"
            ]
        ],
        "gives": [
            [
                "input_bams_ch",
                "P"
            ],
            [
                "qc_bams",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_fasta = Channel.value(file(params.fasta))",
        "origin": [],
        "gives": [
            [
                "ch_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_index = Channel.value(file(params.index))",
        "origin": [],
        "gives": [
            [
                "ch_index",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "rseqc_bams = qc_bams.into{ hisat_bams1; hisat_bams2; hisat_bams3 }",
        "origin": [
            [
                "qc_bams",
                "P"
            ]
        ],
        "gives": [
            [
                "rseqc_bams",
                "P"
            ],
            [
                "hisat_bams1",
                "P"
            ],
            [
                "hisat_bams2",
                "P"
            ],
            [
                "hisat_bams3",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "rseqc_bams = bam_sorted2.into{ hisat_bams1; hisat_bams2; hisat_bams3 }",
        "origin": [
            [
                "bam_sorted2",
                "P"
            ]
        ],
        "gives": [
            [
                "rseqc_bams",
                "P"
            ],
            [
                "hisat_bams1",
                "P"
            ],
            [
                "hisat_bams2",
                "P"
            ],
            [
                "hisat_bams3",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_fasta  = fasta_downloaded",
        "origin": [
            [
                "fasta_downloaded",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_index  = index_created",
        "origin": [
            [
                "index_created",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_index",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "aligner_reads = trimmed_reads_ch_2",
        "origin": [
            [
                "trimmed_reads_ch_2",
                "P"
            ]
        ],
        "gives": [
            [
                "aligner_reads",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "aligner_reads = raw_reads",
        "origin": [
            [
                "raw_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "aligner_reads",
                "P"
            ]
        ]
    }
}
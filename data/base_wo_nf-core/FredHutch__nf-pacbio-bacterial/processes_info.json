{
    "demultiplex": {
        "name_process": "demultiplex",
        "string_process": "\nprocess demultiplex {\n    container \"${container__lima}\"\n    label \"mem_medium\"\n    publishDir \"${params.output_folder}/demux_reads/\", mode: \"copy\", overwrite: true, pattern: \"${genome_name}.demux.*.fq.gz\"\n    publishDir \"${params.output_folder}/demux_report/\", mode: \"copy\", overwrite: true, pattern: \"${genome_name}.demux.lima.*\"\n\n    input:\n    tuple val(genome_name), file(input_fastq)\n    file barcodes_fasta\n\n    output:\n    path \"${genome_name}.demux.*.fq.gz\", emit: reads\n    path \"${genome_name}.demux.lima.*\", emit: reports\n\n\"\"\"\nset -Eeuo pipefail\n\nlima \\\n    \"${input_fastq}\" \\\n    \"${barcodes_fasta}\" \\\n    \"${genome_name}.demux.fq.gz\" \\\n    ${params.demux_flags}\n\n\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\nset -Eeuo pipefail\n\nlima \\\n    \"${input_fastq}\" \\\n    \"${barcodes_fasta}\" \\\n    \"${genome_name}.demux.fq.gz\" \\\n    ${params.demux_flags}\n\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "blima"
        ],
        "tools_url": [
            "https://bio.tools/blima"
        ],
        "tools_dico": [
            {
                "name": "blima",
                "uri": "https://bio.tools/blima",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Includes several algorithms for the preprocessing of Illumina microarray data. It focuses to the bead level analysis and provides novel approach to the quantile normalization of the vectors of unequal lengths. It provides variety of the methods for background correction including background subtraction, RMA like convolution and background outlier removal. It also implements variance stabilizing transformation on the bead level, methods for data summarization and t-test performance.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/blima.html"
            }
        ],
        "inputs": [
            "genome_name",
            "input_fastq",
            "barcodes_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__lima}\"",
            "label \"mem_medium\"",
            "publishDir \"${params.output_folder}/demux_reads/\", mode: \"copy\", overwrite: true, pattern: \"${genome_name}.demux.*.fq.gz\"",
            "publishDir \"${params.output_folder}/demux_report/\", mode: \"copy\", overwrite: true, pattern: \"${genome_name}.demux.lima.*\""
        ],
        "when": "",
        "stub": ""
    },
    "unicycler": {
        "name_process": "unicycler",
        "string_process": "\nprocess unicycler {\n    container \"${container__unicycler}\"\n    label \"mem_veryhigh\"\n    publishDir \"${params.output_folder}/${genome_name}/${params.mode}/\", mode: \"copy\", overwrite: true\n\n    input:\n    tuple val(genome_name), file(long_reads)\n\n    output:\n    tuple val(genome_name), file(\"${genome_name}/${genome_name}.fasta.gz\"), file(\"${genome_name}/${genome_name}.log\")\n    path \"${genome_name}/${genome_name}.gfa\"\n\n\"\"\"\nset -Eeuo pipefail\n\nmkdir ${genome_name}\n\nunicycler \\\n    -l ${long_reads} \\\n    -o ${genome_name} \\\n    --keep 0 \\\n    --mode ${params.mode} \\\n    -t ${task.cpus}\n\nmv ${genome_name}/assembly.gfa ${genome_name}/${genome_name}.gfa\nmv ${genome_name}/assembly.fasta ${genome_name}/${genome_name}.fasta\nmv ${genome_name}/unicycler.log ${genome_name}/${genome_name}.log\ngzip ${genome_name}/${genome_name}.fasta\n\"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\nset -Eeuo pipefail\n\nmkdir ${genome_name}\n\nunicycler \\\n    -l ${long_reads} \\\n    -o ${genome_name} \\\n    --keep 0 \\\n    --mode ${params.mode} \\\n    -t ${task.cpus}\n\nmv ${genome_name}/assembly.gfa ${genome_name}/${genome_name}.gfa\nmv ${genome_name}/assembly.fasta ${genome_name}/${genome_name}.fasta\nmv ${genome_name}/unicycler.log ${genome_name}/${genome_name}.log\ngzip ${genome_name}/${genome_name}.fasta\n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "genome_name",
            "long_reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "genome_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__unicycler}\"",
            "label \"mem_veryhigh\"",
            "publishDir \"${params.output_folder}/${genome_name}/${params.mode}/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "summarizeAssemblies": {
        "name_process": "summarizeAssemblies",
        "string_process": "\nprocess summarizeAssemblies {\n    container \"${container__pandas}\"\n    label \"io_limited\"\n    publishDir \"${params.output_folder}/${genome_name}/${params.mode}/\", mode: \"copy\", overwrite: true\n\n    input:\n    tuple val(genome_name), file(contigs_fasta_gz), file(assembly_log)\n\n    output:\n    path \"${genome_name}.${params.mode}.json\"\n\n\"\"\"#!/bin/bash\n\nset -e\n\nsummarizeAssemblies.py \\\n    \"${genome_name}\" \\\n    \"${params.mode}\" \\\n    \"${contigs_fasta_gz}\" \\\n    \"${assembly_log}\"\n\"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"#!/bin/bash\n\nset -e\n\nsummarizeAssemblies.py \\\n    \"${genome_name}\" \\\n    \"${params.mode}\" \\\n    \"${contigs_fasta_gz}\" \\\n    \"${assembly_log}\"\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_name",
            "contigs_fasta_gz",
            "assembly_log"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__pandas}\"",
            "label \"io_limited\"",
            "publishDir \"${params.output_folder}/${genome_name}/${params.mode}/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "combineSummaries": {
        "name_process": "combineSummaries",
        "string_process": "\nprocess combineSummaries {\n    container \"${container__pandas}\"\n    label \"io_limited\"\n    publishDir \"${params.output_folder}/\", mode: \"copy\", overwrite: true\n\n    input:\n    file \"*\"\n\n    output:\n    path \"assembly_summary.${params.mode}.csv\"\n    path \"assembly_summary.${params.mode}_mqc.json\", emit: multiqc\n\n\"\"\"#!/usr/bin/env python3\n\nimport json\nimport os\nimport pandas as pd\n\n# Make a DataFrame\ndf = pd.DataFrame(\n    [\n        # Containing data read from the file in JSON format\n        json.load(open(fp, 'r'))\n        # Reading over each file in the folder\n        for fp in os.listdir(\".\")\n        # If the file ends with the expected suffix\n        if fp.endswith(\".${params.mode}.json\")\n    ]\n)\n\n# Write it out to a file\ndf.to_csv(\"assembly_summary.${params.mode}.csv\", index=None)\n\n# Format a file which can be parsed by MultiQC\nmultiqc_data = dict(\n    id=\"custom_assembly_${params.mode}_summary\",\n    section_name=\"Assembly Summary (${params.mode})\",\n    description=\"Summary of contigs assembled per-sample from ${params.mode}-mode assemblies\",\n    plot_type=\"table\",\n    data=df.set_index(\n        \"genome_name\"\n    ).drop(\n        columns=[\n            \"mode\",\n            \"circular_contig_lengths\",\n            \"linear_contig_lengths\",\n        ]\n    ).to_dict(\n        orient=\"index\"\n    )\n)\n\n# Write out the MultiQC to a file\nwith open(\"assembly_summary.${params.mode}_mqc.json\", \"w\") as handle:\n    json.dump(multiqc_data, handle, indent=4)\n\n\"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "\"\"\"#!/usr/bin/env python3\n\nimport json\nimport os\nimport pandas as pd\n\n# Make a DataFrame\ndf = pd.DataFrame(\n    [\n        # Containing data read from the file in JSON format\n        json.load(open(fp, 'r'))\n        # Reading over each file in the folder\n        for fp in os.listdir(\".\")\n        # If the file ends with the expected suffix\n        if fp.endswith(\".${params.mode}.json\")\n    ]\n)\n\n# Write it out to a file\ndf.to_csv(\"assembly_summary.${params.mode}.csv\", index=None)\n\n# Format a file which can be parsed by MultiQC\nmultiqc_data = dict(\n    id=\"custom_assembly_${params.mode}_summary\",\n    section_name=\"Assembly Summary (${params.mode})\",\n    description=\"Summary of contigs assembled per-sample from ${params.mode}-mode assemblies\",\n    plot_type=\"table\",\n    data=df.set_index(\n        \"genome_name\"\n    ).drop(\n        columns=[\n            \"mode\",\n            \"circular_contig_lengths\",\n            \"linear_contig_lengths\",\n        ]\n    ).to_dict(\n        orient=\"index\"\n    )\n)\n\n# Write out the MultiQC to a file\nwith open(\"assembly_summary.${params.mode}_mqc.json\", \"w\") as handle:\n    json.dump(multiqc_data, handle, indent=4)\n\n\"\"\"",
        "nb_lignes_script": 44,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__pandas}\"",
            "label \"io_limited\"",
            "publishDir \"${params.output_folder}/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "fastQC": {
        "name_process": "fastQC",
        "string_process": "\nprocess fastQC {\n\n                            \n  container \"${container__fastqc}\"\n  label \"io_limited\"\n\n  publishDir \"${params.output_folder}/${name}/${params.mode}/\", mode: \"copy\", overwrite: true\n  \n  input:\n    tuple val(name), file(reads)\n\n  output:\n  path \"${name}/*\"\n  path \"${name}/*_fastqc.zip\", emit: zip\n\n\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\nmkdir ${name}\n\nfastqc -t ${task.cpus} -o ${name} ${reads}\n\nls -lahtr\n\n\"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\nmkdir ${name}\n\nfastqc -t ${task.cpus} -o ${name} ${reads}\n\nls -lahtr\n\n\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__fastqc}\"",
            "label \"io_limited\"",
            "publishDir \"${params.output_folder}/${name}/${params.mode}/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "multiQC": {
        "name_process": "multiQC",
        "string_process": "\nprocess multiQC {\n\n  container \"${container__multiqc}\"\n\n  publishDir \"${params.output_folder}/\", mode: 'copy', overwrite: true\n  \n  input:\n    file \"fastqc/*\"\n    file \"prokka/*\"\n    file \"busco/*\"\n    file \"assemblies/*\"\n\n  output:\n    file \"multiqc_report.html\"\n\n\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\n# Set up the configuration for MultiQC\necho \"config.prokka_fn_snames: True\" > multiqc_config.yaml\n\nmultiqc .\n\nls -lahtr\n\"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\n# Set up the configuration for MultiQC\necho \"config.prokka_fn_snames: True\" > multiqc_config.yaml\n\nmultiqc .\n\nls -lahtr\n\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__multiqc}\"",
            "publishDir \"${params.output_folder}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "checkM": {
        "name_process": "checkM",
        "string_process": "\nprocess checkM {\n\n  container \"${container__checkm}\"\n  label \"mem_medium\"\n\n  publishDir \"${params.output_folder}/${name}/${params.mode}/checkm/\", mode: \"copy\", overwrite: true \n  \n  input:\n    tuple val(name), file(fasta_gz), file(assembly_log)\n\n  output:\n    file \"*\"\n\n\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\nmkdir input\nmkdir output\ngunzip -c ${fasta_gz} > input/${name}.fa\nrm ${fasta_gz}\n\ncheckm lineage_wf -t ${task.cpus} -x fa input/ output/\n\nmv output/* ./\nrmdir output\nrm -r input\n\n\"\"\"\n\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\nmkdir input\nmkdir output\ngunzip -c ${fasta_gz} > input/${name}.fa\nrm ${fasta_gz}\n\ncheckm lineage_wf -t ${task.cpus} -x fa input/ output/\n\nmv output/* ./\nrmdir output\nrm -r input\n\n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "fasta_gz",
            "assembly_log"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__checkm}\"",
            "label \"mem_medium\"",
            "publishDir \"${params.output_folder}/${name}/${params.mode}/checkm/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n\n  container \"${container__busco}\"\n  label \"mem_medium\"\n\n  publishDir \"${params.output_folder}/${genome_name}/busco/\", mode: \"copy\", overwrite: true \n  \n  input:\n    tuple val(genome_name), file(faa_gz)\n\n  output:\n    path \"*/short_summary.specific.*.txt\", emit: txt\n    path \"*/logs/busco.log\", emit: log\n\n\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\n# Get the base file name\nBASE_NAME=\"${faa_gz.name.replaceAll(/.faa.gz/, \"\")}\"\n\n# Decompress the input\ngunzip -c \"${faa_gz}\" > \\$BASE_NAME.faa\n\n# Run BUSCO\nbusco \\\n    -m protein \\\n    -i  \"\\$BASE_NAME.faa\" \\\n    -o \"\\$BASE_NAME\" \\\n    --auto-lineage-prok\n\n# Remove the temporary decompressed copy of the input files\nrm \\$BASE_NAME.faa\n\n# Remove the downloaded lineages\nrm -rf busco_downloads\n\n\"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -Eeuo pipefail\n\n# Get the base file name\nBASE_NAME=\"${faa_gz.name.replaceAll(/.faa.gz/, \"\")}\"\n\n# Decompress the input\ngunzip -c \"${faa_gz}\" > \\$BASE_NAME.faa\n\n# Run BUSCO\nbusco \\\n    -m protein \\\n    -i  \"\\$BASE_NAME.faa\" \\\n    -o \"\\$BASE_NAME\" \\\n    --auto-lineage-prok\n\n# Remove the temporary decompressed copy of the input files\nrm \\$BASE_NAME.faa\n\n# Remove the downloaded lineages\nrm -rf busco_downloads\n\n\"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "genome_name",
            "faa_gz"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__busco}\"",
            "label \"mem_medium\"",
            "publishDir \"${params.output_folder}/${genome_name}/busco/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "prokka": {
        "name_process": "prokka",
        "string_process": "\nprocess prokka {\n    container \"${container__prokka}\"\n    label \"mem_medium\"\n    publishDir \"${params.output_folder}/${genome_name}/${params.mode}/\", mode: \"copy\", overwrite: true\n\n    input:\n    tuple val(genome_name), file(contigs_fasta_gz), file(assembly_log)\n    \n    output:\n    tuple val(genome_name), path(\"prokka/${genome_name}.${params.mode}.faa.gz\"), emit: faa\n    path \"prokka/${genome_name}.${params.mode}.gbk.gz\"\n    path \"prokka/${genome_name}.${params.mode}.gff.gz\"\n    path \"prokka/${genome_name}.${params.mode}.tsv.gz\"\n    path \"prokka/${genome_name}.${params.mode}.txt\", emit: txt\n    \n    \"\"\"#!/bin/bash\n\nset -Eeuo pipefail\n\n# Decompress the assembly\ngunzip -c ${contigs_fasta_gz} > ${contigs_fasta_gz.simpleName}.fasta\n\nprokka \\\n    --outdir prokka/ \\\n    --prefix ${genome_name}.${params.mode} \\\n    --cpus ${task.cpus} \\\n    --compliant \\\n    ${contigs_fasta_gz.simpleName}.fasta\n\n\ngzip prokka/${genome_name}.${params.mode}.faa\ngzip prokka/${genome_name}.${params.mode}.gbk\ngzip prokka/${genome_name}.${params.mode}.gff\ngzip prokka/${genome_name}.${params.mode}.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"#!/bin/bash\n\nset -Eeuo pipefail\n\n# Decompress the assembly\ngunzip -c ${contigs_fasta_gz} > ${contigs_fasta_gz.simpleName}.fasta\n\nprokka \\\n    --outdir prokka/ \\\n    --prefix ${genome_name}.${params.mode} \\\n    --cpus ${task.cpus} \\\n    --compliant \\\n    ${contigs_fasta_gz.simpleName}.fasta\n\n\ngzip prokka/${genome_name}.${params.mode}.faa\ngzip prokka/${genome_name}.${params.mode}.gbk\ngzip prokka/${genome_name}.${params.mode}.gff\ngzip prokka/${genome_name}.${params.mode}.tsv\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "genome_name",
            "contigs_fasta_gz",
            "assembly_log"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-pacbio-bacterial",
        "directive": [
            "container \"${container__prokka}\"",
            "label \"mem_medium\"",
            "publishDir \"${params.output_folder}/${genome_name}/${params.mode}/\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
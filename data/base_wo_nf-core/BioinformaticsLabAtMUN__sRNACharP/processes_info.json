{
    "getFASTAsRNAs": {
        "name_process": "getFASTAsRNAs",
        "string_process": "\nprocess getFASTAsRNAs{\n   input:\n      file genomeFile\n      file bedFile\n\n   output:\n      file \"${params.org}_sRNAs.fasta\" into sRNAsFASTA\n      file \"sequences.txt\" into sequences\n\n   script:\n   \"\"\"\n   fastaFromBed -fi $genomeFile -bed $bedFile -fo ${params.org}_sRNAs.fasta -s -$name\n   fastaFromBed -fi $genomeFile -bed $bedFile -fo sequences.txt -s -$name -tab\n   \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "   \"\"\"\n   fastaFromBed -fi $genomeFile -bed $bedFile -fo ${params.org}_sRNAs.fasta -s -$name\n   fastaFromBed -fi $genomeFile -bed $bedFile -fo sequences.txt -s -$name -tab\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "fastafrombed"
        ],
        "tools_url": [
            "https://bio.tools/fastafrombed"
        ],
        "tools_dico": [
            {
                "name": "fastafrombed",
                "uri": "https://bio.tools/fastafrombed",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Create fasta files with DNA sequences given a BED file.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "genomeFile",
            "bedFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sRNAsFASTA",
            "sequences"
        ],
        "nb_outputs": 2,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "reorderAndSortPromoterPredictions": {
        "name_process": "reorderAndSortPromoterPredictions",
        "string_process": "\nprocess reorderAndSortPromoterPredictions{\n   input:\n\tfile promoterFile\n   output:\n\tfile \"${params.org}_sortedPromoterPredictions.bed\" into sortedPromoterPredictions \n   script:\n\t\"\"\"\n\tawk -v OFS=\"\\t\" 'NR>1{print \\$1,\\$2,\\$3,\\$6,\\$4,\\$5}' ${promoterFile} > ${params.org}_promoterPredictions.bed\n\tsortBed -i ${params.org}_promoterPredictions.bed > ${params.org}_sortedPromoterPredictions.bed\n\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tawk -v OFS=\"\\t\" 'NR>1{print \\$1,\\$2,\\$3,\\$6,\\$4,\\$5}' ${promoterFile} > ${params.org}_promoterPredictions.bed\n\tsortBed -i ${params.org}_promoterPredictions.bed > ${params.org}_sortedPromoterPredictions.bed\n\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "promoterFile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sortedPromoterPredictions"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "getFreeEnergySS": {
        "name_process": "getFreeEnergySS",
        "string_process": "\nprocess getFreeEnergySS{\n   input:\n      file  \"${params.org}_sRNAs.fasta\" from sRNAsFASTA\n\n   output:\n      file \"${params.org}_sRNAs_freeEnergy.txt\" into freeEnergy4sRNA\n\n   script:\n   \"\"\"\n    centroid_fold -e \"CONTRAfold\" -g 4 \"${params.org}_sRNAs.fasta\" > ${params.org}_CentroidFold_out.txt\n    grep \"e=\" ${params.org}_CentroidFold_out.txt | perl -p -e 's/.*e=//' | perl -p -e 's/\\\\)\\$//' > freeEnergy.txt\n    grep \">\" ${params.org}_CentroidFold_out.txt > sequencesNames.txt\n    paste sequencesNames.txt freeEnergy.txt > ${params.org}_sRNAs_freeEnergy.txt\n    perl -pi -e 's/>//' ${params.org}_sRNAs_freeEnergy.txt\n   \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "   \"\"\"\n    centroid_fold -e \"CONTRAfold\" -g 4 \"${params.org}_sRNAs.fasta\" > ${params.org}_CentroidFold_out.txt\n    grep \"e=\" ${params.org}_CentroidFold_out.txt | perl -p -e 's/.*e=//' | perl -p -e 's/\\\\)\\$//' > freeEnergy.txt\n    grep \">\" ${params.org}_CentroidFold_out.txt > sequencesNames.txt\n    paste sequencesNames.txt freeEnergy.txt > ${params.org}_sRNAs_freeEnergy.txt\n    perl -pi -e 's/>//' ${params.org}_sRNAs_freeEnergy.txt\n   \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sRNAsFASTA"
        ],
        "nb_inputs": 1,
        "outputs": [
            "freeEnergy4sRNA"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "createCRDFile": {
        "name_process": "createCRDFile",
        "string_process": "\nprocess createCRDFile{\n \tinput:\n\t\tfile annotationFile\n\t\t\n   output:\n   \tfile \"transtermAnnotation.crd\" into CRDFile\n   \n   script:\t\n   \"\"\"\n   #transterm start coordinates are 1-based\n   awk -F '\\\\t' '\\$6 == \"+\" {print \\$4,\\$2+1,\\$3,\\$1} \\$6 == \"-\" {print \\$4,\\$3,\\$2+1,\\$1}' $annotationFile > transtermAnnotation.crd\n   \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "   \"\"\"\n   #transterm start coordinates are 1-based\n   awk -F '\\\\t' '\\$6 == \"+\" {print \\$4,\\$2+1,\\$3,\\$1} \\$6 == \"-\" {print \\$4,\\$3,\\$2+1,\\$1}' $annotationFile > transtermAnnotation.crd\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotationFile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "CRDFile"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "runTransterm": {
        "name_process": "runTransterm",
        "string_process": "\nprocess runTransterm{\n \tinput:\n \t  file genomeFile\n \t  file \"transtermAnnotation.crd\" from CRDFile\n \n   output:\n     file \"transtermRes.txt\" into predictedTerminators\n\n   script:\n   if (runTransterm) {\n    \"\"\"\n      transterm -p $exptermFile $genomeFile transtermAnnotation.crd > transtermRes.txt\n    \"\"\"\n   } else {\n   \"\"\"\n      ln -s \"${params.dir}/${params.transtermFile}\" transtermRes.txt\n   \"\"\"\n   }\n}",
        "nb_lignes_process": 18,
        "string_script": "   if (runTransterm) {\n    \"\"\"\n      transterm -p $exptermFile $genomeFile transtermAnnotation.crd > transtermRes.txt\n    \"\"\"\n   } else {\n   \"\"\"\n      ln -s \"${params.dir}/${params.transtermFile}\" transtermRes.txt\n   \"\"\"\n   }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFile",
            "CRDFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "predictedTerminators"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "parseTranstermResults": {
        "name_process": "parseTranstermResults",
        "string_process": "\nprocess parseTranstermResults{\n  input:\n     file \"transtermRes.txt\" from predictedTerminators\n     \n  output:\n     file \"transtermRes.gtf\" into transtermGTF\n\n   script:\n    lengthFile = file(\"${params.org}GenomeLength.txt\")\n\t(id) = (lengthFile.text=~ /^(\\S+)/)[0]\n   \"\"\"  \n     grep TERM transtermRes.txt | perl -p -e 's/ +/\\\\t/g' | perl -p -e 's/\\\\|.*\\$//' | perl -p -e 's/TERM\\\\t/TERM/' \\\n     | cut -f2,3,5- \\\n     | awk -F \"\\\\t\" '\\$3 > \\$2 {print \"${id}\", \"TransTermHP\", \\$1, \\$2, \\$3, \\$6, \\$4, \".\"} \\$2 > \\$3 {print \"${id}\", \"TransTermHP\", \\$1, \\$3, \\$2, \\$6, \\$4, \".\" }'  \\\n     | perl -p -e 's/ +/\\\\t/g' |  sortBed > transtermRes.gtf\n   \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    lengthFile = file(\"${params.org}GenomeLength.txt\")\n\t(id) = (lengthFile.text=~ /^(\\S+)/)[0]\n   \"\"\"  \n     grep TERM transtermRes.txt | perl -p -e 's/ +/\\\\t/g' | perl -p -e 's/\\\\|.*\\$//' | perl -p -e 's/TERM\\\\t/TERM/' \\\n     | cut -f2,3,5- \\\n     | awk -F \"\\\\t\" '\\$3 > \\$2 {print \"${id}\", \"TransTermHP\", \\$1, \\$2, \\$3, \\$6, \\$4, \".\"} \\$2 > \\$3 {print \"${id}\", \"TransTermHP\", \\$1, \\$3, \\$2, \\$6, \\$4, \".\" }'  \\\n     | perl -p -e 's/ +/\\\\t/g' |  sortBed > transtermRes.gtf\n   \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "predictedTerminators"
        ],
        "nb_inputs": 1,
        "outputs": [
            "transtermGTF"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "getDistances": {
        "name_process": "getDistances",
        "string_process": "\nprocess getDistances{\n  input:\n     file bedFile\n     file annotationFile\n     file predTerms from sRNAsTerminators\n     file sortedPromoterFile from sortedPromoterPredictions\n\n  output:\n          file \"sRNAsSorted.bed\" into sortedBed\n  \t  file \"ClosestDownstreamTranscript.txt\" into downORFs\n  \t  file \"ClosestUpstreamTranscript.txt\" into upORFs\n  \t  file \"ClosestDownstreamTerm.txt\" into downTerminator\n          file \"ClosestPromoterDistance.txt\" into closestPromoterDistances \n  script: \n   \"\"\"\n      sortBed -i $bedFile > sRNAsSorted.bed\n      bedtools closest -a sRNAsSorted.bed -b ${annotationFile} -D \"ref\" -iu -k 2 > ClosestDownstreamTranscript.txt\n      bedtools closest -a sRNAsSorted.bed -b ${annotationFile} -D \"ref\" -id -k 2 > ClosestUpstreamTranscript.txt\n      bedtools closest -a sRNAsSorted.bed -b ${predTerms}  -D \"a\" -iu  > ClosestDownstreamTerm.txt\n      cut -f 1-6 sRNAsSorted.bed > firstSixColumnsFromsRNA.bed\n      bedtools closest -D a -s -id -a firstSixColumnsFromsRNA.bed -b ${sortedPromoterFile} > ClosestPromoterDistance.txt\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "   \"\"\"\n      sortBed -i $bedFile > sRNAsSorted.bed\n      bedtools closest -a sRNAsSorted.bed -b ${annotationFile} -D \"ref\" -iu -k 2 > ClosestDownstreamTranscript.txt\n      bedtools closest -a sRNAsSorted.bed -b ${annotationFile} -D \"ref\" -id -k 2 > ClosestUpstreamTranscript.txt\n      bedtools closest -a sRNAsSorted.bed -b ${predTerms}  -D \"a\" -iu  > ClosestDownstreamTerm.txt\n      cut -f 1-6 sRNAsSorted.bed > firstSixColumnsFromsRNA.bed\n      bedtools closest -D a -s -id -a firstSixColumnsFromsRNA.bed -b ${sortedPromoterFile} > ClosestPromoterDistance.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bedFile",
            "annotationFile",
            "sRNAsTerminators",
            "sortedPromoterPredictions"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sortedBed",
            "downORFs",
            "upORFs",
            "downTerminator",
            "closestPromoterDistances"
        ],
        "nb_outputs": 5,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "createAttributeTable": {
        "name_process": "createAttributeTable",
        "string_process": "\nprocess createAttributeTable{\n  input:\n         file energySS from sRNAsEnergy\n         file sRNAs from sortedBed\n  \t file dORFs from downORFs\n  \t file uORFs from upORFs\n  \t file terminators from downTerminator\n         file promoters from promoterDistances\n\n  output:\n  \t file \"FeatureTable.tsv\" into attributesTable \n\n  script:\n    \"\"\"\n#!/usr/bin/env Rscript\n    \nselectClosestORF <- function(m, up = TRUE){\n\t# There is only one close ORF\n\tif (nrow(m) < 2) {\n        \tif (m[,\"Distance\"] == -1 && m[,7] == \".\") { ## there is no close Feature Replicon == . and BedTools has returned -1 as distance, then make distance 1000\n            \t\ttmp <-m\n            \t\ttmp[,\"Distance\"] <- 1000\n            \t\treturn(tmp)\n        \t} else {\n            \t\treturn(m)\n        \t}\n\t}\n\t#order by distance\n\to <- order(abs(m[,\"Distance\"]), decreasing = FALSE) \n\tm <- m[o,]\n\t    # To be an overlap upstream the start of the sRNA has to be within the ORF start and end\n\tif ( (( up && m[1,\"ORFStart\"] <= m[1,\"Start\"] && m[1,\"ORFEnd\"] >= m[1,\"Start\"] ) || \n\t\t# To be an overlap downstream the end of the sRNA has to be within the ORF start and end\n\t      (!up && m[1,\"ORFStart\"] <= m[1,\"End\"] && m[1,\"ORFEnd\"] >= m[1,\"End\"] ) || \n\t      # There is an overlap with a smaller ORF totally enclosed by the sRNA\n\t      ( m[1,\"ORFStart\"] >= m[1,\"Start\"]  && m[1,\"ORFEnd\"] <= m[1,\"End\"] ))  ){\n\t\t\t#there is an overlap with first ORF\n\t\t\tm[1,] #Return first ORF\n\t} else if (abs(m[1,\"Distance\"]) > 0) { \n\t\t#there is not overlap and the distance returned by bedtools is greater than zero, then\n\t\t#return the closest ORF\n\t\t\tm[1,]\n\t} else {\n\t\t#there is not overlap in the right end but bedtools is returning an overlap, then return the second\n\t\t#closest ORF\n\t\t\tm[2,]\n\t}\n}\n\n#sRNAs\nsRNAs <- read.table( \"$sRNAs\", header = FALSE, sep = \"\\\\t\", stringsAsFactors = FALSE)\n#the first 6 columns are required\nnCols <- ncol(sRNAs)\nif (nCols < 6 || nCols > 7){\nstop(\"sRNAs BED file must contain 6 or 7 columns: Replicon,Start, End, ID, Score, Strand, Type. The last column Type is optional.\")\n}\n\n#Take only the first columns\nsRNAs<- sRNAs[,1:6]\ncolnames(sRNAs) <- c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\")\nrow.names(sRNAs ) <- sRNAs[,\"ID\"]\n\n\n#SS\nsRNA_E <- read.table( \"$energySS\", header = FALSE, sep = \"\\\\t\", stringsAsFactors = FALSE)\ncolnames(sRNA_E) <- c(\"ID\", \"Energy\")\nrow.names(sRNA_E ) <- gsub(\"::.*\\$\", \"\", sRNA_E[,\"ID\"], perl = TRUE)\n\n#Distance to Promoters\npromotersRaw <- read.table(\"$promoters\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\ncolnames(promotersRaw) <- c(\"Sequence\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\", \"PromoterSequence\",  \"ORFStart\", \"ORFEnd\", \"PromoterID\", \"PromoterScore\", \"PromoterStrand\", \"Distance\")\nclosestPromoterDistance <- by(promotersRaw, promotersRaw[,\"ID\"], selectClosestORF, TRUE, simplify = FALSE)\nclosestPromoterDistance <- do.call(\"rbind\", closestPromoterDistance)\nrow.names(closestPromoterDistance) <- closestPromoterDistance[,\"ID\"]\nclosestPromoterDistance[[\"Distance\"]] <- ifelse((abs(closestPromoterDistance[[\"Distance\"]])>=1000 | closestPromoterDistance[[\"Distance\"]] == -1),-1000, closestPromoterDistance[[\"Distance\"]])\n\n#Distance to ORFs\nupstreamRaw <- read.table(\"$uORFs\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\ndownstreamRaw <- read.table(\"$dORFs\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\n\n#A BED file has to be used to provide the genome annotation. Otherwise the number of column number is not correct!\nif (nCols == 7 && ncol(upstreamRaw) == 15){ #obtained when using a bed file with the genome annotation\ndownstreamRaw <- downstreamRaw[,-7]\nupstreamRaw <- upstreamRaw[,-7]\ncolnames(downstreamRaw) <- colnames(upstreamRaw) <- c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\", \"RepliconORF\",  \"ORFStart\", \"ORFEnd\", \"ORFDescription\", \"ORFScore\", \"ORFStrand\", \"ORFType\", \"Distance\")\n} else if ( nCols == 6 && ncol(upstreamRaw) == 14 ) {\ncolnames(downstreamRaw) <- colnames(upstreamRaw) <- c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\", \"RepliconORF\",  \"ORFStart\", \"ORFEnd\", \"ORFDescription\", \"ORFScore\", \"ORFStrand\", \"ORFType\", \"Distance\")\n} else{ # unexpected number of columns\nstop(\"Unexpected number of columns in neighbor ORF files\")\n}\n\nupstreamC <- by(upstreamRaw, upstreamRaw[,\"ID\"], selectClosestORF, TRUE, simplify = FALSE)\nupstreamC <- do.call(\"rbind\", upstreamC)\nrow.names(upstreamC) <- upstreamC[,\"ID\"]\n\ndownstreamC <- by(downstreamRaw, downstreamRaw[,\"ID\"], selectClosestORF, FALSE, simplify = FALSE)\ndownstreamC <- do.call(\"rbind\", downstreamC)\nrow.names(downstreamC) <- downstreamC[,\"ID\"]\n\n#Terminator\nsRNA_closestTerm <- read.table(\"$terminators\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\n\nif (nCols == 7 ){\nsRNA_closestTerm <- sRNA_closestTerm[,-7]\n}\n\nif (ncol(sRNA_closestTerm) != 15) {\nstop(\"Unexpected number of columns in closest Term file\")\n}\n\ncolnames(sRNA_closestTerm) <-  c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\",\"RepliconTerm\", \"TermSource\",\"TermID\", \"ORFStart\", \"ORFEnd\", \"TermScore\", \"TermStrand\", \"TermExtra\", \"Distance\")\n\nsRNA_closestTerm <- by(sRNA_closestTerm, sRNA_closestTerm[,\"ID\"], selectClosestORF, FALSE, simplify = FALSE)\nsRNA_closestTerm <- do.call(\"rbind\", sRNA_closestTerm)\n\n#Cap distance to terminator to 1000. Erik experiments show that having very large distances to terminator decrease the performance of the classifiers\nsRNA_closestTerm[[\"Distance\"]] <- ifelse(sRNA_closestTerm[[\"Distance\"]]>1000, 1000, sRNA_closestTerm[[\"Distance\"]])\n\n#Create dataset\nData <- cbind(sRNAs[,\"Strand\"], sRNA_E[row.names(sRNAs), \"Energy\"], closestPromoterDistance[row.names(sRNAs),\"Distance\"],sRNA_closestTerm[row.names(sRNAs),\"Distance\"], \nupstreamC[row.names(sRNAs), c(\"Distance\", \"ORFStrand\")], downstreamC[row.names(sRNAs), c(\"Distance\", \"ORFStrand\")])\n\ncolnames(Data) <- c(\"Strand\", \"SS\", \"PromoterDistance\",\"DistTerm\", \"Distance\", \"ORFStrand\",\"DownDistance\",  \"DownORFStrand\")\n\nData[[\"sameStrand\"]] <- ifelse(Data[[\"Strand\"]] == Data[[\"ORFStrand\"]], 1, 0)\nData[[\"sameDownStrand\"]] <- ifelse(Data[[\"Strand\"]] == Data[[\"DownORFStrand\"]], 1, 0)\nData[[\"DistTerm\"]] <- ifelse(is.na(Data[[\"DistTerm\"]]), 1000, Data[[\"DistTerm\"]])\n\nDataF <- Data[,c(\"SS\", \"PromoterDistance\",\"DistTerm\", \"Distance\", \"sameStrand\", \"DownDistance\", \"sameDownStrand\")]\nwrite.table(DataF, file = \"FeatureTable.tsv\", sep = \"\\\\t\", row.names = TRUE, col.names = TRUE)\n\n    \"\"\"\n}",
        "nb_lignes_process": 132,
        "string_script": "    \"\"\"\n#!/usr/bin/env Rscript\n    \nselectClosestORF <- function(m, up = TRUE){\n\t# There is only one close ORF\n\tif (nrow(m) < 2) {\n        \tif (m[,\"Distance\"] == -1 && m[,7] == \".\") { ## there is no close Feature Replicon == . and BedTools has returned -1 as distance, then make distance 1000\n            \t\ttmp <-m\n            \t\ttmp[,\"Distance\"] <- 1000\n            \t\treturn(tmp)\n        \t} else {\n            \t\treturn(m)\n        \t}\n\t}\n\t#order by distance\n\to <- order(abs(m[,\"Distance\"]), decreasing = FALSE) \n\tm <- m[o,]\n\t    # To be an overlap upstream the start of the sRNA has to be within the ORF start and end\n\tif ( (( up && m[1,\"ORFStart\"] <= m[1,\"Start\"] && m[1,\"ORFEnd\"] >= m[1,\"Start\"] ) || \n\t\t# To be an overlap downstream the end of the sRNA has to be within the ORF start and end\n\t      (!up && m[1,\"ORFStart\"] <= m[1,\"End\"] && m[1,\"ORFEnd\"] >= m[1,\"End\"] ) || \n\t      # There is an overlap with a smaller ORF totally enclosed by the sRNA\n\t      ( m[1,\"ORFStart\"] >= m[1,\"Start\"]  && m[1,\"ORFEnd\"] <= m[1,\"End\"] ))  ){\n\t\t\t#there is an overlap with first ORF\n\t\t\tm[1,] #Return first ORF\n\t} else if (abs(m[1,\"Distance\"]) > 0) { \n\t\t#there is not overlap and the distance returned by bedtools is greater than zero, then\n\t\t#return the closest ORF\n\t\t\tm[1,]\n\t} else {\n\t\t#there is not overlap in the right end but bedtools is returning an overlap, then return the second\n\t\t#closest ORF\n\t\t\tm[2,]\n\t}\n}\n\n#sRNAs\nsRNAs <- read.table( \"$sRNAs\", header = FALSE, sep = \"\\\\t\", stringsAsFactors = FALSE)\n#the first 6 columns are required\nnCols <- ncol(sRNAs)\nif (nCols < 6 || nCols > 7){\nstop(\"sRNAs BED file must contain 6 or 7 columns: Replicon,Start, End, ID, Score, Strand, Type. The last column Type is optional.\")\n}\n\n#Take only the first columns\nsRNAs<- sRNAs[,1:6]\ncolnames(sRNAs) <- c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\")\nrow.names(sRNAs ) <- sRNAs[,\"ID\"]\n\n\n#SS\nsRNA_E <- read.table( \"$energySS\", header = FALSE, sep = \"\\\\t\", stringsAsFactors = FALSE)\ncolnames(sRNA_E) <- c(\"ID\", \"Energy\")\nrow.names(sRNA_E ) <- gsub(\"::.*\\$\", \"\", sRNA_E[,\"ID\"], perl = TRUE)\n\n#Distance to Promoters\npromotersRaw <- read.table(\"$promoters\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\ncolnames(promotersRaw) <- c(\"Sequence\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\", \"PromoterSequence\",  \"ORFStart\", \"ORFEnd\", \"PromoterID\", \"PromoterScore\", \"PromoterStrand\", \"Distance\")\nclosestPromoterDistance <- by(promotersRaw, promotersRaw[,\"ID\"], selectClosestORF, TRUE, simplify = FALSE)\nclosestPromoterDistance <- do.call(\"rbind\", closestPromoterDistance)\nrow.names(closestPromoterDistance) <- closestPromoterDistance[,\"ID\"]\nclosestPromoterDistance[[\"Distance\"]] <- ifelse((abs(closestPromoterDistance[[\"Distance\"]])>=1000 | closestPromoterDistance[[\"Distance\"]] == -1),-1000, closestPromoterDistance[[\"Distance\"]])\n\n#Distance to ORFs\nupstreamRaw <- read.table(\"$uORFs\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\ndownstreamRaw <- read.table(\"$dORFs\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\n\n#A BED file has to be used to provide the genome annotation. Otherwise the number of column number is not correct!\nif (nCols == 7 && ncol(upstreamRaw) == 15){ #obtained when using a bed file with the genome annotation\ndownstreamRaw <- downstreamRaw[,-7]\nupstreamRaw <- upstreamRaw[,-7]\ncolnames(downstreamRaw) <- colnames(upstreamRaw) <- c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\", \"RepliconORF\",  \"ORFStart\", \"ORFEnd\", \"ORFDescription\", \"ORFScore\", \"ORFStrand\", \"ORFType\", \"Distance\")\n} else if ( nCols == 6 && ncol(upstreamRaw) == 14 ) {\ncolnames(downstreamRaw) <- colnames(upstreamRaw) <- c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\", \"RepliconORF\",  \"ORFStart\", \"ORFEnd\", \"ORFDescription\", \"ORFScore\", \"ORFStrand\", \"ORFType\", \"Distance\")\n} else{ # unexpected number of columns\nstop(\"Unexpected number of columns in neighbor ORF files\")\n}\n\nupstreamC <- by(upstreamRaw, upstreamRaw[,\"ID\"], selectClosestORF, TRUE, simplify = FALSE)\nupstreamC <- do.call(\"rbind\", upstreamC)\nrow.names(upstreamC) <- upstreamC[,\"ID\"]\n\ndownstreamC <- by(downstreamRaw, downstreamRaw[,\"ID\"], selectClosestORF, FALSE, simplify = FALSE)\ndownstreamC <- do.call(\"rbind\", downstreamC)\nrow.names(downstreamC) <- downstreamC[,\"ID\"]\n\n#Terminator\nsRNA_closestTerm <- read.table(\"$terminators\", sep = \"\\\\t\", header = FALSE, stringsAsFactors = FALSE)\n\nif (nCols == 7 ){\nsRNA_closestTerm <- sRNA_closestTerm[,-7]\n}\n\nif (ncol(sRNA_closestTerm) != 15) {\nstop(\"Unexpected number of columns in closest Term file\")\n}\n\ncolnames(sRNA_closestTerm) <-  c(\"Replicon\",\"Start\", \"End\", \"ID\", \"Score\", \"Strand\",\"RepliconTerm\", \"TermSource\",\"TermID\", \"ORFStart\", \"ORFEnd\", \"TermScore\", \"TermStrand\", \"TermExtra\", \"Distance\")\n\nsRNA_closestTerm <- by(sRNA_closestTerm, sRNA_closestTerm[,\"ID\"], selectClosestORF, FALSE, simplify = FALSE)\nsRNA_closestTerm <- do.call(\"rbind\", sRNA_closestTerm)\n\n#Cap distance to terminator to 1000. Erik experiments show that having very large distances to terminator decrease the performance of the classifiers\nsRNA_closestTerm[[\"Distance\"]] <- ifelse(sRNA_closestTerm[[\"Distance\"]]>1000, 1000, sRNA_closestTerm[[\"Distance\"]])\n\n#Create dataset\nData <- cbind(sRNAs[,\"Strand\"], sRNA_E[row.names(sRNAs), \"Energy\"], closestPromoterDistance[row.names(sRNAs),\"Distance\"],sRNA_closestTerm[row.names(sRNAs),\"Distance\"], \nupstreamC[row.names(sRNAs), c(\"Distance\", \"ORFStrand\")], downstreamC[row.names(sRNAs), c(\"Distance\", \"ORFStrand\")])\n\ncolnames(Data) <- c(\"Strand\", \"SS\", \"PromoterDistance\",\"DistTerm\", \"Distance\", \"ORFStrand\",\"DownDistance\",  \"DownORFStrand\")\n\nData[[\"sameStrand\"]] <- ifelse(Data[[\"Strand\"]] == Data[[\"ORFStrand\"]], 1, 0)\nData[[\"sameDownStrand\"]] <- ifelse(Data[[\"Strand\"]] == Data[[\"DownORFStrand\"]], 1, 0)\nData[[\"DistTerm\"]] <- ifelse(is.na(Data[[\"DistTerm\"]]), 1000, Data[[\"DistTerm\"]])\n\nDataF <- Data[,c(\"SS\", \"PromoterDistance\",\"DistTerm\", \"Distance\", \"sameStrand\", \"DownDistance\", \"sameDownStrand\")]\nwrite.table(DataF, file = \"FeatureTable.tsv\", sep = \"\\\\t\", row.names = TRUE, col.names = TRUE)\n\n    \"\"\"",
        "nb_lignes_script": 118,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sRNAsEnergy",
            "sortedBed",
            "downORFs",
            "upORFs",
            "downTerminator",
            "promoterDistances"
        ],
        "nb_inputs": 6,
        "outputs": [
            "attributesTable"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "createTetranucleotideRC_features": {
        "name_process": "createTetranucleotideRC_features",
        "string_process": "\nprocess createTetranucleotideRC_features{\n  input:\n    file  \"sequences.txt\" from sequences\n    file \"FeatureTable.tsv\" from attributesTable \n\n  output:\n  file 'featureTableNew.tsv' into featureTableNew\n    \n  '''\n  #!/usr/bin/env python3\n  import os\n  import itertools\n  import pandas as pd\n  from skbio import Sequence\n  from skbio import DNA\n\n  featureTable = pd.read_csv('Featuretable.tsv', \"\\t\")\n  Sequences = pd.read_csv('sequences.txt', header=None, sep=\"\\t\")\n  Sequences.iloc[:,0] = Sequences.iloc[:,0].str.split(\"(\",expand=True).iloc[:,0]\n\n  # Number of sequences\n  rowsCount = Sequences.shape[0]\n\n  # Number of Nucleotide\n  NucleotideNum = 4\n\n  # Appending NucleotidesColumn(new features) and initialize with zeros\n  iter = itertools.product('ACGT', repeat=NucleotideNum)\n  iterJoin = []\n\n  for i in iter:\n    colLable = \"\".join(i)\n    iterJoin.append(colLable)\n    colValues_zeros = [0]*rowsCount\n    featureTable[colLable] = colValues_zeros\n\n\n  # Filling NucleotidesColumn with their frequency for each sequence\n  for idIndex in range(rowsCount):\n    id = Sequences.iloc[idIndex,0]\n    seq = Sequences.iloc[idIndex,1]\n    s = Sequence(seq)\n    freqs = s.kmer_frequencies(NucleotideNum, relative=True, overlap=True)\n    for nucleotide in freqs:\n      if nucleotide in iterJoin :\n        featureTable.loc[id , nucleotide] = freqs[nucleotide]\n\n\n  ###### Creating Reverse Complement Features ######\n\n  # Extracting Tetranucleotides' name\n  featuresName = [ x for x in featureTable.keys()[7:]]\n\n  # Calculating new features based on tetraNucleotides & their reverse complement\n  while len(featuresName)>0 : \n    tetraNucleotideName = featuresName[0]\n\n    seq = DNA(tetraNucleotideName)\n    tetraNucleotide_ReverseComp = str(seq.reverse_complement())\n\n    if(tetraNucleotide_ReverseComp == tetraNucleotideName):\n        featureTable[f'{tetraNucleotideName}/{tetraNucleotide_ReverseComp}'] = featureTable[tetraNucleotideName]\n    else:\n        featureTable[f'{tetraNucleotideName}/{tetraNucleotide_ReverseComp}'] = featureTable[tetraNucleotideName] + featureTable[tetraNucleotide_ReverseComp]\n        featureTable.drop(tetraNucleotide_ReverseComp, axis=1, inplace=True)\n        featuresName.remove(tetraNucleotide_ReverseComp)\n\n    featureTable.drop(tetraNucleotideName, axis=1, inplace=True)\n    featuresName.remove(tetraNucleotideName)   \n\n  featureTable.to_csv(\"featureTableNew.tsv\", sep=\"\\t\")\n  '''\n}",
        "nb_lignes_process": 72,
        "string_script": "'''\n  #!/usr/bin/env python3\n  import os\n  import itertools\n  import pandas as pd\n  from skbio import Sequence\n  from skbio import DNA\n\n  featureTable = pd.read_csv('Featuretable.tsv', \"\\t\")\n  Sequences = pd.read_csv('sequences.txt', header=None, sep=\"\\t\")\n  Sequences.iloc[:,0] = Sequences.iloc[:,0].str.split(\"(\",expand=True).iloc[:,0]\n\n  # Number of sequences\n  rowsCount = Sequences.shape[0]\n\n  # Number of Nucleotide\n  NucleotideNum = 4\n\n  # Appending NucleotidesColumn(new features) and initialize with zeros\n  iter = itertools.product('ACGT', repeat=NucleotideNum)\n  iterJoin = []\n\n  for i in iter:\n    colLable = \"\".join(i)\n    iterJoin.append(colLable)\n    colValues_zeros = [0]*rowsCount\n    featureTable[colLable] = colValues_zeros\n\n\n  # Filling NucleotidesColumn with their frequency for each sequence\n  for idIndex in range(rowsCount):\n    id = Sequences.iloc[idIndex,0]\n    seq = Sequences.iloc[idIndex,1]\n    s = Sequence(seq)\n    freqs = s.kmer_frequencies(NucleotideNum, relative=True, overlap=True)\n    for nucleotide in freqs:\n      if nucleotide in iterJoin :\n        featureTable.loc[id , nucleotide] = freqs[nucleotide]\n\n\n  ###### Creating Reverse Complement Features ######\n\n  # Extracting Tetranucleotides' name\n  featuresName = [ x for x in featureTable.keys()[7:]]\n\n  # Calculating new features based on tetraNucleotides & their reverse complement\n  while len(featuresName)>0 : \n    tetraNucleotideName = featuresName[0]\n\n    seq = DNA(tetraNucleotideName)\n    tetraNucleotide_ReverseComp = str(seq.reverse_complement())\n\n    if(tetraNucleotide_ReverseComp == tetraNucleotideName):\n        featureTable[f'{tetraNucleotideName}/{tetraNucleotide_ReverseComp}'] = featureTable[tetraNucleotideName]\n    else:\n        featureTable[f'{tetraNucleotideName}/{tetraNucleotide_ReverseComp}'] = featureTable[tetraNucleotideName] + featureTable[tetraNucleotide_ReverseComp]\n        featureTable.drop(tetraNucleotide_ReverseComp, axis=1, inplace=True)\n        featuresName.remove(tetraNucleotide_ReverseComp)\n\n    featureTable.drop(tetraNucleotideName, axis=1, inplace=True)\n    featuresName.remove(tetraNucleotideName)   \n\n  featureTable.to_csv(\"featureTableNew.tsv\", sep=\"\\t\")\n  '''",
        "nb_lignes_script": 63,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "attributesTable"
        ],
        "nb_inputs": 2,
        "outputs": [
            "featureTableNew"
        ],
        "nb_outputs": 1,
        "name_workflow": "BioinformaticsLabAtMUN__sRNACharP",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
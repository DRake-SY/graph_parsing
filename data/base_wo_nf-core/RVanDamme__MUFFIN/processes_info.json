{
    "fasta_check": {
        "name_process": "fasta_check",
        "string_process": "process fasta_check { \n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n      input:\n       tuple val(sample), val(bin_id), path(file)\n      output:\n       tuple val(name), val(bin_id), path(\"${bin_id}.fa\")\n      shell:\n        \"\"\"\n       case \"${file}\" in\n            *.gz)\n                zcat !{file} > ${bin_id}.fa\n                ;;\n            *.fasta)\n                \n                cp !{file} ${bin_id}.fa\n                ;;\n            *.fa)\n                cp !{file} ${bin_id}.fa\n                ;;\n            *)\n                echo \"file format not supported...what the phage...(.fa .fasta .fna .gz is supported)\"\n                exit 1\n        esac\n        \"\"\"\n    }",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n       case \"${file}\" in\n            *.gz)\n                zcat !{file} > ${bin_id}.fa\n                ;;\n            *.fasta)\n                \n                cp !{file} ${bin_id}.fa\n                ;;\n            *.fa)\n                cp !{file} ${bin_id}.fa\n                ;;\n            *)\n                echo \"file format not supported...what the phage...(.fa .fasta .fna .gz is supported)\"\n                exit 1\n        esac\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "CASE"
        ],
        "tools_url": [
            "https://bio.tools/CASE"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            }
        ],
        "inputs": [
            "sample",
            "bin_id"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bin_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "split_ont": {
        "name_process": "split_ont",
        "string_process": "process split_ont {\n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n        tuple val(name), path(ont)\n    output:\n    val(name), path(\"part0.fastq\")    emit:   ont_1\n    val(name), path(\"part1.fastq\")    emit:   ont_2\n    val(name), path(\"part2.fastq\")    emit:   ont_3\n    val(name), path(\"part3.fastq\")    emit:   ont_4\n    script:\n    \"\"\"\n    total_line=$(wc -l ${ont} | cut -d ' ' -f 1)\n    line_per_file=$((\\$total_line/4))\n    split -d -a 1 -l \\$line_per_file ${ont} part\n    for part in part*; do mv \\$part \\$part\".fastq\"; done\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    total_line=$(wc -l ${ont} | cut -d ' ' -f 1)\n    line_per_file=$((\\$total_line/4))\n    split -d -a 1 -l \\$line_per_file ${ont} part\n    for part in part*; do mv \\$part \\$part\".fastq\"; done\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "ont"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "unicycler": {
        "name_process": "unicycler",
        "string_process": "process unicycler {\n    maxForks 1\n    label 'unicycler'\n    publishDir \"${params.output}/${name}/assemble/reassembly/unicycler_bins/\", mode: 'copy', pattern: \"*.fa\"\n    publishDir \"${params.output}/${name}/assemble/reassembly/unicycler_bins/\", mode: 'copy', pattern: \"*.gfa\"\n    errorStrategy { task.exitStatus in 1..1 ? 'retry' : 'finish'}\n    maxRetries 4\n    input:\n    tuple val(name), val(bin_name), path(illumina), path(ont)    \n    output:\n    tuple val(name), path(\"*.fa\") optional true\n    path(\"*.gfa\") optional true\n    shell:\n    if (task.attempt == 1)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else if (task.attempt == 2)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp --max_kmer_frac 0.85\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else if (task.attempt == 3)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp --max_kmer_frac 0.70\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else if (task.attempt == 4)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp --max_kmer_frac 0.50\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else\n    error \"Unicycler was unable to process your data please restart MUFFIN without Unicycler activated\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    if (task.attempt == 1)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else if (task.attempt == 2)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp --max_kmer_frac 0.85\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else if (task.attempt == 3)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp --max_kmer_frac 0.70\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else if (task.attempt == 4)\n    \"\"\"\n    mkdir spades_tmp\n    unicycler -1 ${illumina[0]} -2 ${illumina[1]} -l ${ont} -o output -t ${task.cpus} --keep 0 --no_pilon --spades_tmp_dir spades_tmp --max_kmer_frac 0.50\n    mv output/assembly.fasta ${bin_name}\".fa\"\n    mv output/assembly.gfa ${bin_name}\".gfa\"\n    \"\"\"\n    else\n    error \"Unicycler was unable to process your data please restart MUFFIN without Unicycler activated\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "name",
            "bin_name",
            "illumina",
            "ont"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'unicycler'",
            "publishDir \"${params.output}/${name}/assemble/reassembly/unicycler_bins/\", mode: 'copy', pattern: \"*.fa\"",
            "publishDir \"${params.output}/${name}/assemble/reassembly/unicycler_bins/\", mode: 'copy', pattern: \"*.gfa\"",
            "errorStrategy { task.exitStatus in 1..1 ? 'retry' : 'finish'}",
            "maxRetries 4"
        ],
        "when": "",
        "stub": ""
    },
    "maxbin2": {
        "name_process": "maxbin2",
        "string_process": "process maxbin2 {\n    maxForks 1\n    label 'maxbin2'\n    publishDir \"${params.output}/${name}/assemble/binning/maxbin2/\", mode: 'copy', pattern: \"maxbin_bin\" \n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(assembly), path(ont), path(illumina)\n    output:\n    tuple val(name), path(\"maxbin_bin\")\n    shell:\n    \"\"\"\n    which run_MaxBin.pl > path.txt\n    path=\\$(cat path.txt )\n    path_strip1=\\$(dirname \\$path)\n    path_strip2=\\$(dirname \\$path_strip1)\n    export PERL5LIB=\\$path_strip2/lib/perl5/site_perl/5.22.0/\n    run_MaxBin.pl -contig ${assembly}  -reads ${illumina[0]} -reads2 ${illumina[1]} -reads3 ${ont}  -out maxbin2 -thread ${task.cpus}\n    mkdir maxbin_bin\n    mv maxbin2.*.fasta maxbin_bin/\n    \"\"\"\n        \n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    which run_MaxBin.pl > path.txt\n    path=\\$(cat path.txt )\n    path_strip1=\\$(dirname \\$path)\n    path_strip2=\\$(dirname \\$path_strip1)\n    export PERL5LIB=\\$path_strip2/lib/perl5/site_perl/5.22.0/\n    run_MaxBin.pl -contig ${assembly}  -reads ${illumina[0]} -reads2 ${illumina[1]} -reads3 ${ont}  -out maxbin2 -thread ${task.cpus}\n    mkdir maxbin_bin\n    mv maxbin2.*.fasta maxbin_bin/\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "whichdb"
        ],
        "tools_url": [
            "https://bio.tools/whichdb"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont",
            "illumina"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'maxbin2'",
            "publishDir \"${params.output}/${name}/assemble/binning/maxbin2/\", mode: 'copy', pattern: \"maxbin_bin\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_checkm_parser": {
        "name_process": "sourmash_checkm_parser",
        "string_process": "process sourmash_checkm_parser {\n                      \n    label 'ubuntu'\n    publishDir \"${params.output}/${name}/classify/\", mode: 'copy', pattern: \"classify_step_summary.csv\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(checkm)\n    path(sourmash)\n    output:\n    path(\"classify_step_summary.csv\")\n    shell:\n    \"\"\"\n    grep -v \"] INFO: \" !{checkm} | grep -v \"\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\" | grep -v \"Bin Id\" | sed -e 's/^[ \\\\t]*//'|sed 's/[ \\\\t]*\\$//' |sed -r 's/ +/,/g'|sed '/^\\$/d' >checkm.csv\n    for file in \\$(ls bin*.txt); do tail -n 1 \\$file | sed -e 's/.fa//' >>sourmash.csv; done\n    checkm_sourmash_parser.py -c checkm.csv -s sourmash.csv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    grep -v \"] INFO: \" !{checkm} | grep -v \"\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\" | grep -v \"Bin Id\" | sed -e 's/^[ \\\\t]*//'|sed 's/[ \\\\t]*\\$//' |sed -r 's/ +/,/g'|sed '/^\\$/d' >checkm.csv\n    for file in \\$(ls bin*.txt); do tail -n 1 \\$file | sed -e 's/.fa//' >>sourmash.csv; done\n    checkm_sourmash_parser.py -c checkm.csv -s sourmash.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "checkm",
            "sourmash"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "publishDir \"${params.output}/${name}/classify/\", mode: 'copy', pattern: \"classify_step_summary.csv\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "discard_short": {
        "name_process": "discard_short",
        "string_process": "process discard_short {\n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name) , path(part)\n    output:\n    tuple val(name), path(\"filtered_${part}\")\n    shell:\n    \"\"\"\n        cat !{part} | paste - - - - | awk -F\"\\\\t\" 'length(\\$2)  >= ${params.short_qc}' | sed 's/\\\\t/\\\\n/g' > \"filtered_${part}\"\n\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n        cat !{part} | paste - - - - | awk -F\"\\\\t\" 'length(\\$2)  >= ${params.short_qc}' | sed 's/\\\\t/\\\\n/g' > \"filtered_${part}\"\n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "part"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "filtlong": {
        "name_process": "filtlong",
        "string_process": "\nprocess filtlong {\n    label 'filtlong'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name) , path(filtered)\n    output:\n    tuple val(name) , path(\"clean_${filtered}\")\n    script:\n    \"\"\"\n    filtlong --min_length ${params.short_qc} --keep_percent 90 --target_bases 500000000 ${filtered} > clean_${filtered}\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    filtlong --min_length ${params.short_qc} --keep_percent 90 --target_bases 500000000 ${filtered} > clean_${filtered}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "name",
            "filtered"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'filtlong'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    publishDir \"${params.output}/${name}/assemble/quality_control/nanopore/\", mode: 'copy', pattern: \"*_all.fastq\" \n    input:\n    tuple val(name) , path(filtered)\n    output:\n    tuple val(name), path(\"${name}_all.fastq\")\n    script:\n    \"\"\"\n    cat *.fastq > ${name}_all.fastq\n    \"\"\"\n\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    cat *.fastq > ${name}_all.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "filtered"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "publishDir \"${params.output}/${name}/assemble/quality_control/nanopore/\", mode: 'copy', pattern: \"*_all.fastq\""
        ],
        "when": "",
        "stub": ""
    },
    "parser_bin_RNA": {
        "name_process": "parser_bin_RNA",
        "string_process": "process parser_bin_RNA {\n    label 'ubuntu'\n    publishDir \"${params.output}/${name}/annotate/\", mode: 'copy', pattern: \"parser_result/*\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n        tuple val(name), path(rna_annot), path(quant)\n        tuple val(name), path(bins_annot)\n    output:\n        path(\"parser_result/*\") \n    script:\n        \"\"\"\n        pankegg_bin_RNA.py -b ${bins_annot} -r ${rna_annot} -l ${quant} -o parser_result \n        \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        pankegg_bin_RNA.py -b ${bins_annot} -r ${rna_annot} -l ${quant} -o parser_result \n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "rna_annot",
            "quant",
            "name",
            "bins_annot"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "publishDir \"${params.output}/${name}/annotate/\", mode: 'copy', pattern: \"parser_result/*\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "parser_bin": {
        "name_process": "parser_bin",
        "string_process": "\nprocess parser_bin {\n    label 'ubuntu'\n    publishDir \"${params.output}/${name}/annotate/\", mode: 'copy', pattern: \"parser_result/*\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n        tuple val(name), path(bins_annot)\n    output:\n        path(\"parser_result/*\") \n    script:\n        \"\"\"\n        pankegg_bin.py -b ${bins_annot} -o parser_result \n        \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        pankegg_bin.py -b ${bins_annot} -o parser_result \n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bins_annot"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "publishDir \"${params.output}/${name}/annotate/\", mode: 'copy', pattern: \"parser_result/*\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "eggnog_bin": {
        "name_process": "eggnog_bin",
        "string_process": "process eggnog_bin { \n  label 'eggnog' \n  publishDir \"${params.output}/${name}/annotate/bin_annotation/\", mode: 'copy', pattern: \"*.tsv\"\n  errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n  maxRetries = 5\n  input:\n    tuple val(name), path(bin), path(db)\n  output:\n    tuple val(name), path(\"*.annotations.tsv\")\n    path(\"*.seed_orthologs.tsv\")\n  shell:\n    \"\"\"\n    bin_id=\\$(basename !{bin} | sed -r \"s/\\\\.\\\\w+//2\")\n    emapper.py --data_dir ${db} -d bact -o \\$bin_id  -m diamond -i ${bin} --cpu ${task.cpus} --go_evidence non-electronic  --target_orthologs all --translate\n    tac \\$bin_id.emapper.annotations | sed \"1,3d\" | tac |sed \"1,3d\" > \\$bin_id.annotations.tsv\n    cp \\$bin_id.emapper.seed_orthologs \\$bin_id.seed_orthologs.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    bin_id=\\$(basename !{bin} | sed -r \"s/\\\\.\\\\w+//2\")\n    emapper.py --data_dir ${db} -d bact -o \\$bin_id  -m diamond -i ${bin} --cpu ${task.cpus} --go_evidence non-electronic  --target_orthologs all --translate\n    tac \\$bin_id.emapper.annotations | sed \"1,3d\" | tac |sed \"1,3d\" > \\$bin_id.annotations.tsv\n    cp \\$bin_id.emapper.seed_orthologs \\$bin_id.seed_orthologs.tsv\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "ATAC"
        ],
        "tools_url": [
            "https://bio.tools/atac"
        ],
        "tools_dico": [
            {
                "name": "ATAC",
                "uri": "https://bio.tools/atac",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2520",
                                    "term": "DNA mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational process for comparative mapping between two genome assemblies, or between two different genomes.",
                "homepage": "http://kmer.sourceforge.net/wiki/index.php/Main_Page"
            }
        ],
        "inputs": [
            "name",
            "bin",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'eggnog'",
            "publishDir \"${params.output}/${name}/annotate/bin_annotation/\", mode: 'copy', pattern: \"*.tsv\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "eggnog_rna": {
        "name_process": "eggnog_rna",
        "string_process": "\nprocess eggnog_rna { \n  label 'eggnog' \n  publishDir \"${params.output}/${name}/annotate/rna_annotation/\", mode: 'copy', pattern: \"*.tsv\"\n  errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n  maxRetries = 5\n  input:\n    tuple val(name), path(transcript), path(quant), path(db)\n  output:\n    tuple val(name), path(\"*.annotations.tsv\"), path(quant)\n    path(\"*.seed_orthologs.tsv\")\n  shell:\n    \"\"\"\n    emapper.py --data_dir ${db} -d bact -o ${name}_transcript  -m diamond -i ${transcript} --cpu ${task.cpus} --go_evidence non-electronic  --target_orthologs all --translate\n    tac ${name}_transcript.emapper.annotations | sed \"1,3d\" | tac |sed \"1,3d\" > ${name}_transcript.annotations.tsv\n    cp ${name}_transcript.emapper.seed_orthologs ${name}_transcript.seed_orthologs.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    emapper.py --data_dir ${db} -d bact -o ${name}_transcript  -m diamond -i ${transcript} --cpu ${task.cpus} --go_evidence non-electronic  --target_orthologs all --translate\n    tac ${name}_transcript.emapper.annotations | sed \"1,3d\" | tac |sed \"1,3d\" > ${name}_transcript.annotations.tsv\n    cp ${name}_transcript.emapper.seed_orthologs ${name}_transcript.seed_orthologs.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "ATAC"
        ],
        "tools_url": [
            "https://bio.tools/atac"
        ],
        "tools_dico": [
            {
                "name": "ATAC",
                "uri": "https://bio.tools/atac",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2520",
                                    "term": "DNA mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational process for comparative mapping between two genome assemblies, or between two different genomes.",
                "homepage": "http://kmer.sourceforge.net/wiki/index.php/Main_Page"
            }
        ],
        "inputs": [
            "name",
            "transcript",
            "quant",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'eggnog'",
            "publishDir \"${params.output}/${name}/annotate/rna_annotation/\", mode: 'copy', pattern: \"*.tsv\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "checkm": {
        "name_process": "checkm",
        "string_process": "process checkm {\n    maxForks 1\n    label 'checkm'\n    publishDir \"${params.output}/${name}/classify/checkm/\", mode: 'copy', pattern: \"summary.txt\"\n    publishDir \"${params.output}/${name}/classify/checkm/\", mode: 'copy', pattern: \"taxonomy.txt\"\n    publishDir \"${params.output}/${name}/classify/checkm/\", mode: 'copy', pattern: \"*_checkm\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(bins_assemblies)\n    output:\n    tuple val(name), path(\"summary.txt\")\n    tuple path(\"${name}_checkm\"), path(\"taxonomy.txt\")\n    \n    script:\n    \"\"\"\n    mkdir temporary\n    mkdir ${name}_bin\n    mv *.fa ${name}_bin/\n    checkm lineage_wf --tmpdir temporary --pplacer_threads 4 -t ${task.cpus} --reduced_tree -x fa ${name}_bin ${name}_checkm > summary.txt\n    checkm tree_qa ${name}_checkm > taxonomy.txt\n     \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    mkdir temporary\n    mkdir ${name}_bin\n    mv *.fa ${name}_bin/\n    checkm lineage_wf --tmpdir temporary --pplacer_threads 4 -t ${task.cpus} --reduced_tree -x fa ${name}_bin ${name}_checkm > summary.txt\n    checkm tree_qa ${name}_checkm > taxonomy.txt\n     \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bins_assemblies"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'checkm'",
            "publishDir \"${params.output}/${name}/classify/checkm/\", mode: 'copy', pattern: \"summary.txt\"",
            "publishDir \"${params.output}/${name}/classify/checkm/\", mode: 'copy', pattern: \"taxonomy.txt\"",
            "publishDir \"${params.output}/${name}/classify/checkm/\", mode: 'copy', pattern: \"*_checkm\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_genome_size": {
        "name_process": "sourmash_genome_size",
        "string_process": "process sourmash_genome_size {                                   \n    label 'sourmash' \n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(ont)\n    path(json)\n    output:\n    tuple val(name), path(ont), path('genome_size.txt')\n    shell:\n    \"\"\"\n    echo \"100M\" >genome_size.txt\n    \"\"\"\n  \n                                                                                \n                                                                                              \n                                                                                   \n                                                         \n                                                   \n                                          \n                                                    \n        \n\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    echo \"100M\" >genome_size.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "ont",
            "json"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'sourmash'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_bins": {
        "name_process": "sourmash_bins",
        "string_process": "\nprocess sourmash_bins {\n    label 'sourmash' \n    publishDir \"${params.output}/${name}/classify/sourmash/\", mode: 'copy', pattern: \"*.txt\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(bins)\n    path(json)\n    output:\n    path('*.txt')\n    shell:\n    \"\"\"\n    bin_id=\\$(basename ${bins} | sed -r \"s/\\\\.\\\\w+//2\")\n    sourmash compute -p ${task.cpus} --scaled 10000 -k 31 ${bins} -o ${bins}.sig\n    sourmash lca classify --query ${bins}.sig --db ${json} > \\$bin_id.txt   \n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    bin_id=\\$(basename ${bins} | sed -r \"s/\\\\.\\\\w+//2\")\n    sourmash compute -p ${task.cpus} --scaled 10000 -k 31 ${bins} -o ${bins}.sig\n    sourmash lca classify --query ${bins}.sig --db ${json} > \\$bin_id.txt   \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "name",
            "bins",
            "json"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'sourmash'",
            "publishDir \"${params.output}/${name}/classify/sourmash/\", mode: 'copy', pattern: \"*.txt\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "checkm_download_db": {
        "name_process": "checkm_download_db",
        "string_process": "process checkm_download_db {\n        \n  if (workflow.profile.contains('gcloud')) {publishDir 'gs://gcloud_storage/databases-nextflow/checkm', mode: 'copy', pattern: \"checkm_data_2015_01_16.tar.gz\"}\n  else { storeDir 'nextflow-autodownload-databases/checkm' }\n  label 'ubuntu' \n  errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n  maxRetries = 5\n  output:\n    path(\"checkm_data_2015_01_16.tar.gz\")\n  script:\n  \"\"\"\n  wget --no-check-certificate https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  wget --no-check-certificate https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "flye": {
        "name_process": "flye",
        "string_process": "process flye {\n    label 'flye'\n    publishDir \"${params.output}/${name}/assemble/assembly/flye_unpolished\", mode: 'copy', pattern: \"assembly.fasta\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(ont)\n    output:\n    tuple val(name), path(\"assembly.fasta\")\n    shell:\n    \"\"\"\n    flye --nano-raw ${ont} -o flye_output -t ${task.cpus} --plasmids --meta\n    mv flye_output/assembly.fasta assembly.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    flye --nano-raw ${ont} -o flye_output -t ${task.cpus} --plasmids --meta\n    mv flye_output/assembly.fasta assembly.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "name",
            "ont"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'flye'",
            "publishDir \"${params.output}/${name}/assemble/assembly/flye_unpolished\", mode: 'copy', pattern: \"assembly.fasta\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "cat_all_bins": {
        "name_process": "cat_all_bins",
        "string_process": "process cat_all_bins {\n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(bins)\n    output:\n    tuple val(name) , path(\"all_bins.fa\") \n    script:\n    \"\"\"\n    cat ${bins}/bin.*.fa > all_bins.fa\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    cat ${bins}/bin.*.fa > all_bins.fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bins"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "checkm_setup_db": {
        "name_process": "checkm_setup_db",
        "string_process": "process checkm_setup_db {\n    label 'checkm'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    val(db)\n    val(untar)\n    output:\n    path(\"path_db.txt\")\n    shell:\n        \"\"\"\n        if [ !{untar} == true ] ;\n        then\n            checkm data setRoot !{db} ;\n            echo '${db}' > path_db.txt;\n        fi\n\n        if [ !{untar} == false ] ;\n        then\n                    path_db=\\$(dirname !{db});\n                    mkdir -p \\$path_db/db/;\n                    tar -xvf ${db} -C \\$path_db/db/;\n                    checkm data setRoot \\$path_db/db/ ;\n                    echo \\$path_db/db > path_db.txt;\n        fi\n        \"\"\"\n    }",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n        if [ !{untar} == true ] ;\n        then\n            checkm data setRoot !{db} ;\n            echo '${db}' > path_db.txt;\n        fi\n\n        if [ !{untar} == false ] ;\n        then\n                    path_db=\\$(dirname !{db});\n                    mkdir -p \\$path_db/db/;\n                    tar -xvf ${db} -C \\$path_db/db/;\n                    checkm data setRoot \\$path_db/db/ ;\n                    echo \\$path_db/db > path_db.txt;\n        fi\n        \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "db",
            "untar"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'checkm'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "contig_list": {
        "name_process": "contig_list",
        "string_process": "process contig_list {\n    label 'ubuntu'\n        errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(bins)\n    output:\n    tuple val(name), path(\"*.contigs.list\")\n    shell:\\\n    \"\"\"\n    for bin in ${bins}/bin.*.fa\n        do\n        bin_name=\\$(basename \\$bin )\n        cat \\$bin | grep -o -E \"^>\\\\w+\\\\.\\\\w+\" |sed 's/>//g'| tr -d \"@\" > \\$bin_name.contigs.list ;\n        done ;\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    for bin in ${bins}/bin.*.fa\n        do\n        bin_name=\\$(basename \\$bin )\n        cat \\$bin | grep -o -E \"^>\\\\w+\\\\.\\\\w+\" |sed 's/>//g'| tr -d \"@\" > \\$bin_name.contigs.list ;\n        done ;\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bins"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "reads_retrieval": {
        "name_process": "reads_retrieval",
        "string_process": "process reads_retrieval {\n    label 'seqtk'\n    publishDir \"${params.output}/${name}/assembled/reassembly/mapped_reads/\", mode: 'copy', pattern: \"*.fastq\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(contig_list), path(ill_bam), path(ont_bam), path(ill_reads), path(ont_reads)\n    output:\n    tuple val(name), val(file(file(file(contig_list).baseName).baseName).baseName), path(\"*_illumina_R{1,2}.fastq\"), path(\"*_ont.fastq\")\n    shell:\n                                                                                      \n    \"\"\"\n    bin=\\$(basename -s .fa.contigs.list ${contig_list})\n    list=\\$(cat ${contig_list} | tr \"\\\\n\" \" \" ) \n\n    \n    ## illumina mapped reads retrieval\n    samtools index -@ ${task.cpus} ${ill_bam}\n    samtools view -bh ${ill_bam} \\$list > illumina_contigs.bam  \n    samtools view -F4 illumina_contigs.bam > illumina_mapped_contigs.sam\n    cut -f1 illumina_mapped_contigs.sam | sort | uniq > \\$bin\"_illumina_mapped.list\"\n    seqtk subseq ${ill_reads[0]} \\$bin\"_illumina_mapped.list\" > \\$bin\"_illumina_R1.fastq\"\n    seqtk subseq ${ill_reads[1]} \\$bin\"_illumina_mapped.list\" > \\$bin\"_illumina_R2.fastq\"\n\n    ## ONT mapped reads retrieval\n    samtools index -@ ${task.cpus} ${ont_bam}\n    samtools view -bh ${ont_bam} \\$list > ont_contigs.bam  \n    samtools view -F4 ont_contigs.bam > ont_mapped_contigs.sam\n    cut -f1 ont_mapped_contigs.sam | sort | uniq > \\$bin\"_ont_mapped.list\"\n    seqtk subseq ${ont_reads} \\$bin\"_ont_mapped.list\" > \\$bin\"_ont.fastq\"\n\n    rm illumina_contigs.bam\n    rm illumina_mapped_contigs.sam\n    rm ont_contigs.bam\n    rm ont_mapped_contigs.sam\n    rm *.bam.bai\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    bin=\\$(basename -s .fa.contigs.list ${contig_list})\n    list=\\$(cat ${contig_list} | tr \"\\\\n\" \" \" ) \n\n    \n    ## illumina mapped reads retrieval\n    samtools index -@ ${task.cpus} ${ill_bam}\n    samtools view -bh ${ill_bam} \\$list > illumina_contigs.bam  \n    samtools view -F4 illumina_contigs.bam > illumina_mapped_contigs.sam\n    cut -f1 illumina_mapped_contigs.sam | sort | uniq > \\$bin\"_illumina_mapped.list\"\n    seqtk subseq ${ill_reads[0]} \\$bin\"_illumina_mapped.list\" > \\$bin\"_illumina_R1.fastq\"\n    seqtk subseq ${ill_reads[1]} \\$bin\"_illumina_mapped.list\" > \\$bin\"_illumina_R2.fastq\"\n\n    ## ONT mapped reads retrieval\n    samtools index -@ ${task.cpus} ${ont_bam}\n    samtools view -bh ${ont_bam} \\$list > ont_contigs.bam  \n    samtools view -F4 ont_contigs.bam > ont_mapped_contigs.sam\n    cut -f1 ont_mapped_contigs.sam | sort | uniq > \\$bin\"_ont_mapped.list\"\n    seqtk subseq ${ont_reads} \\$bin\"_ont_mapped.list\" > \\$bin\"_ont.fastq\"\n\n    rm illumina_contigs.bam\n    rm illumina_mapped_contigs.sam\n    rm ont_contigs.bam\n    rm ont_mapped_contigs.sam\n    rm *.bam.bai\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "name",
            "contig_list",
            "ill_bam",
            "ont_bam",
            "ill_reads",
            "ont_reads"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'seqtk'",
            "publishDir \"${params.output}/${name}/assembled/reassembly/mapped_reads/\", mode: 'copy', pattern: \"*.fastq\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "unmapped_retrieve": {
        "name_process": "unmapped_retrieve",
        "string_process": "\nprocess unmapped_retrieve {\n    label 'seqtk'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    publishDir \"${params.output}/${name}/assembled/reassembly/unmapped_reads/\", mode: 'copy', pattern: \"*unmapped_*.fastq\"\n    input:\n    tuple val(name), path(ill_bam), path(ont_bam), path(ill_reads), path(ont_reads)\n    output:\n    path(\"unmapped_*.fastq\") optionnal true\n    shell:\n    \"\"\"\n    ## illumina unmapped reads retrieval\n    samtools view -f4 ${ill_bam} > illumina_unmapped_contigs.sam\n    cut -f1 illumina_unmapped_contigs.sam | sort | uniq > illumina_unmapped.list\n    seqtk subseq ${ill_reads[0]} illumina_unmapped.list > unmapped_ILL_R1.fastq\n    seqtk subseq ${ill_reads[1]} illumina_unmapped.list > unmapped_ILL_R2.fastq\n\n    ## ONT unmapped reads retrieval\n    samtools view -f4 ${ont_bam} > ont_unmapped_contigs.sam\n    cut -f1 ont_unmapped_contigs.sam | sort | uniq > ont_unmapped.list\n    seqtk subseq ${ont_reads} ont_unmapped.list > unmapped_ONT.fastq\n\n    rm illumina_unmapped_contigs.sam\n    rm illumina_unmapped.list\n    rm ont_unmapped_contigs.sam\n    rm ont_unmapped.list\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    ## illumina unmapped reads retrieval\n    samtools view -f4 ${ill_bam} > illumina_unmapped_contigs.sam\n    cut -f1 illumina_unmapped_contigs.sam | sort | uniq > illumina_unmapped.list\n    seqtk subseq ${ill_reads[0]} illumina_unmapped.list > unmapped_ILL_R1.fastq\n    seqtk subseq ${ill_reads[1]} illumina_unmapped.list > unmapped_ILL_R2.fastq\n\n    ## ONT unmapped reads retrieval\n    samtools view -f4 ${ont_bam} > ont_unmapped_contigs.sam\n    cut -f1 ont_unmapped_contigs.sam | sort | uniq > ont_unmapped.list\n    seqtk subseq ${ont_reads} ont_unmapped.list > unmapped_ONT.fastq\n\n    rm illumina_unmapped_contigs.sam\n    rm illumina_unmapped.list\n    rm ont_unmapped_contigs.sam\n    rm ont_unmapped.list\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "name",
            "ill_bam",
            "ont_bam",
            "ill_reads",
            "ont_reads"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'seqtk'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "publishDir \"${params.output}/${name}/assembled/reassembly/unmapped_reads/\", mode: 'copy', pattern: \"*unmapped_*.fastq\""
        ],
        "when": "",
        "stub": ""
    },
    "de_novo_transcript_and_quant": {
        "name_process": "de_novo_transcript_and_quant",
        "string_process": "process de_novo_transcript_and_quant {\n    maxForks 1\n    label 'trinity'\n    publishDir \"${params.output}/${name}/annotate/de_novo_transcript/\", mode: 'copy', pattern: \"*_transcript.fasta\"\n    publishDir \"${params.output}/${name}/annotate/quant_of_transcript/\", mode: 'copy', pattern: \"*_transcript_quant.sf\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(rna)\n    output:\n    tuple val(name), path(\"*_transcript.fasta\"), path(\"*_transcript_quant.sf\")\n    shell:\n    \"\"\"\n    mem=\\$(echo \"!{task.memory}\" | sed 's/ GB/g/g' | sed 's/g/G/g')\n    echo \\$mem\n    Trinity --seqType fq --max_memory \\$mem --CPU !{task.cpus} --left !{rna[0]} --right !{rna[1]}\n    cp trinity_out_dir/Trinity.fasta !{name}_transcript.fasta\n    align_and_estimate_abundance.pl --transcripts !{name}_transcript.fasta --est_method salmon --left !{rna[0]} --right !{rna[1]} --seqType fq --output_dir quant_salmon --thread_count !{task.cpus}  --prep_reference\n    cp quant_salmon/quant.sf !{name}_transcript_quant.sf\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mem=\\$(echo \"!{task.memory}\" | sed 's/ GB/g/g' | sed 's/g/G/g')\n    echo \\$mem\n    Trinity --seqType fq --max_memory \\$mem --CPU !{task.cpus} --left !{rna[0]} --right !{rna[1]}\n    cp trinity_out_dir/Trinity.fasta !{name}_transcript.fasta\n    align_and_estimate_abundance.pl --transcripts !{name}_transcript.fasta --est_method salmon --left !{rna[0]} --right !{rna[1]} --seqType fq --output_dir quant_salmon --thread_count !{task.cpus}  --prep_reference\n    cp quant_salmon/quant.sf !{name}_transcript_quant.sf\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Trinity"
        ],
        "tools_url": [
            "https://bio.tools/trinity"
        ],
        "tools_dico": [
            {
                "name": "Trinity",
                "uri": "https://bio.tools/trinity",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Trinity is a transcriptome assembler which relies on three different tools, inchworm an assembler, chrysalis which pools contigs and butterfly which amongst others compacts a graph resulting from butterfly with reads.",
                "homepage": "https://github.com/trinityrnaseq/trinityrnaseq/wiki"
            }
        ],
        "inputs": [
            "name",
            "rna"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'trinity'",
            "publishDir \"${params.output}/${name}/annotate/de_novo_transcript/\", mode: 'copy', pattern: \"*_transcript.fasta\"",
            "publishDir \"${params.output}/${name}/annotate/quant_of_transcript/\", mode: 'copy', pattern: \"*_transcript_quant.sf\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_download_db": {
        "name_process": "sourmash_download_db",
        "string_process": "process sourmash_download_db {\n  if (workflow.profile.contains('gcloud')) {publishDir 'gs://gcloud_storage/databases-nextflow/sourmash', mode: 'copy', pattern: \"genbank-k31.lca.json.gz\" }\n  else { storeDir 'nextflow-autodownload-databases/sourmash' }  \n                                                 \n  errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n  maxRetries = 5\n  label 'ubuntu' \n  output:\n  path(\"genbank-k31.lca.json.gz\")\n  script:\n  \"\"\"\n  #wget https://ndownloader.figshare.com/files/18809423?private_link=ed98a281ef089c033352 -O gtdb.lca.json\n  wget --no-check-certificate https://osf.io/4f8n3/download -O genbank-k31.lca.json.gz \n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  #wget https://ndownloader.figshare.com/files/18809423?private_link=ed98a281ef089c033352 -O gtdb.lca.json\n  wget --no-check-certificate https://osf.io/4f8n3/download -O genbank-k31.lca.json.gz \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "label 'ubuntu'"
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "process fastp {\n    label 'fastp'\n    publishDir \"${params.output}/${name}/assemble/quality_control/illumina/\", mode: 'copy', pattern: \"*_R*_clean.fastq\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(illumina)\n    output:\n    tuple val(name), path(\"*_R?_clean.fastq\")\n    script:\n    \"\"\"\n    fastp -i ${illumina[0]} -I ${illumina[1]} -o ${name}_R1_clean.fastq -O ${name}_R2_clean.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    fastp -i ${illumina[0]} -I ${illumina[1]} -o ${name}_R1_clean.fastq -O ${name}_R2_clean.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "name",
            "illumina"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'fastp'",
            "publishDir \"${params.output}/${name}/assemble/quality_control/illumina/\", mode: 'copy', pattern: \"*_R*_clean.fastq\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "fastp_rna": {
        "name_process": "fastp_rna",
        "string_process": "\nprocess fastp_rna {\n    label 'fastp'\n    publishDir \"${params.output}/${name}/annotate/rna_quality_control/\", mode: 'copy', pattern: \"*_R*_clean.fastq\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(illumina)\n    output:\n    tuple val(name), path(\"*_R?_clean.fastq\")\n    script:\n    \"\"\"\n    fastp -i ${illumina[0]} -I ${illumina[1]} -o ${name}_R1_clean.fastq -O ${name}_R2_clean.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    fastp -i ${illumina[0]} -I ${illumina[1]} -o ${name}_R1_clean.fastq -O ${name}_R2_clean.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "name",
            "illumina"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'fastp'",
            "publishDir \"${params.output}/${name}/annotate/rna_quality_control/\", mode: 'copy', pattern: \"*_R*_clean.fastq\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "refine2": {
        "name_process": "refine2",
        "string_process": "process refine2 {\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5   \n                                                                             \n                                                                                             \n                             \n    label 'metawrap'\n    publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"metawrap_bins/*\" \n    publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"${name}_binning_stats.txt\" \n    input:\n    tuple val(name), path(bins1), path(bins2)\n    path(path)\n    output:\n    tuple val(name), path(\"metawrap_bins/*.fa\")\n    path(\"${name}_binning_stats.txt\")\n    shell:\n    \"\"\"\n    mem=\\$(echo ${task.memory} | sed 's/g//g')\n    path_db=\\$(cat ${path})\n    echo \\$path_db\n    checkm data setRoot \\$path_db\n    echo \"checkm done\"\n    metawrap bin_refinement -o refined_bins -A ${bins1} -B ${bins2} -o refined_bins -t ${task.cpus} -m \\$mem \n    mkdir metawrap_bins/\n    mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n    mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    mem=\\$(echo ${task.memory} | sed 's/g//g')\n    path_db=\\$(cat ${path})\n    echo \\$path_db\n    checkm data setRoot \\$path_db\n    echo \"checkm done\"\n    metawrap bin_refinement -o refined_bins -A ${bins1} -B ${bins2} -o refined_bins -t ${task.cpus} -m \\$mem \n    mkdir metawrap_bins/\n    mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n    mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bins1",
            "bins2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "label 'metawrap'",
            "publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"metawrap_bins/*\"",
            "publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"${name}_binning_stats.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "refine3": {
        "name_process": "refine3",
        "string_process": "\nprocess refine3 {\n                                                                             \n                                                                                             \n                             \n    label 'metawrap'\n    publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"metawrap_bins/*\" \n    publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"${name}_binning_stats.txt\" \n    errorStrategy { task.exitStatus in 1..1 ? 'retry' : 'finish'}\n    maxRetries 1\n    input:\n        tuple val(name), path(bins1), path(bins2), path(bins3)\n        path(path)\n    output:\n    tuple val(name), path(\"metawrap_bins/*.fa\")\n    path(\"${name}_binning_stats.txt\")\n    shell:\n    if (workflow.profile.contains('conda')){\n        if (task.attempt == 1)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        which checkm > checkm.txt\n        path=\\$(cat checkm.txt )\n        path_strip1=\\$(dirname \\$path)\n        path_strip2=\\$(dirname \\$path_strip1)\n        sed -i 's#/srv/whitlam/bio/db/checkm_data/1.0.0#'\"\\$path_db\"'#' \\$path_strip2/lib/python2.7/site-packages/checkm/DATA_CONFIG\n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins3} -C ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else if (task.attempt == 2)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        which checkm > checkm.txt\n        path=\\$(cat checkm.txt )\n        path_strip1=\\$(dirname \\$path)\n        path_strip2=\\$(dirname \\$path_strip1)\n        sed -i 's#/srv/whitlam/bio/db/checkm_data/1.0.0#'\"\\$path_db\"'#' \\$path_strip2/lib/python2.7/site-packages/checkm/DATA_CONFIG\n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else \n        error \"please pick the bins you want and submit them in the classification step then select the bins for the annotation step\"\n        }\n    else if (workflow.profile.contains(' local_engine')){\n        if (task.attempt == 1)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        checkm data setRoot \\$path_db\n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins3} -C ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else if (task.attempt == 2)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        echo -e \"cat << EOF\\\\n\\$path\\\\nEOF\\\\n\" | checkm data setRoot \n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else \n        error \"please pick the bins you want and submit them in the classification step then select the bins for the annotation step\"\n        }\n    else {\n        if (task.attempt == 1)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins3} -C ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else if (task.attempt == 2)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else \n        error \"please pick the bins you want and submit them in the classification step then select the bins for the annotation step\"\n        }\n}",
        "nb_lignes_process": 100,
        "string_script": "    if (workflow.profile.contains('conda')){\n        if (task.attempt == 1)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        which checkm > checkm.txt\n        path=\\$(cat checkm.txt )\n        path_strip1=\\$(dirname \\$path)\n        path_strip2=\\$(dirname \\$path_strip1)\n        sed -i 's#/srv/whitlam/bio/db/checkm_data/1.0.0#'\"\\$path_db\"'#' \\$path_strip2/lib/python2.7/site-packages/checkm/DATA_CONFIG\n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins3} -C ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else if (task.attempt == 2)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        which checkm > checkm.txt\n        path=\\$(cat checkm.txt )\n        path_strip1=\\$(dirname \\$path)\n        path_strip2=\\$(dirname \\$path_strip1)\n        sed -i 's#/srv/whitlam/bio/db/checkm_data/1.0.0#'\"\\$path_db\"'#' \\$path_strip2/lib/python2.7/site-packages/checkm/DATA_CONFIG\n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else \n        error \"please pick the bins you want and submit them in the classification step then select the bins for the annotation step\"\n        }\n    else if (workflow.profile.contains(' local_engine')){\n        if (task.attempt == 1)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        checkm data setRoot \\$path_db\n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins3} -C ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else if (task.attempt == 2)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        path_db=\\$(cat ${path})\n        echo \\$path_db\n        echo -e \"cat << EOF\\\\n\\$path\\\\nEOF\\\\n\" | checkm data setRoot \n        echo \"checkm done\"\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else \n        error \"please pick the bins you want and submit them in the classification step then select the bins for the annotation step\"\n        }\n    else {\n        if (task.attempt == 1)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins3} -C ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else if (task.attempt == 2)\n        \"\"\"\n        mem=\\$(echo ${task.memory} | sed 's/g//g')\n        metawrap bin_refinement -o refined_bins -A ${bins2} -B ${bins1} -t ${task.cpus} -m \\$mem \n        mkdir metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins/*.fa metawrap_bins/\n        mv refined_bins/metawrap_70_10_bins.stats ${name}_binning_stats.txt\n        \"\"\"\n        else \n        error \"please pick the bins you want and submit them in the classification step then select the bins for the annotation step\"\n        }",
        "nb_lignes_script": 83,
        "language_script": "bash",
        "tools": [
            "whichdb"
        ],
        "tools_url": [
            "https://bio.tools/whichdb"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            }
        ],
        "inputs": [
            "name",
            "bins1",
            "bins2",
            "bins3"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'metawrap'",
            "publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"metawrap_bins/*\"",
            "publishDir \"${params.output}/${name}/assemble/binning/metawrap_refined_bins/\", mode: 'copy', pattern: \"${name}_binning_stats.txt\"",
            "errorStrategy { task.exitStatus in 1..1 ? 'retry' : 'finish'}",
            "maxRetries 1"
        ],
        "when": "",
        "stub": ""
    },
    "norefine": {
        "name_process": "norefine",
        "string_process": "\nprocess norefine {     \n    label 'ubuntu'\n    input:\n    tuple val(name), path(bins)\n    output:\n    tuple val(name), path(\"norefine/*\")\n    shell:\\\n    \"\"\"\n    mkdir norefine\n    cp ${bins}/* norefine/\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    mkdir norefine\n    cp ${bins}/* norefine/\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "bins"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'"
        ],
        "when": "",
        "stub": ""
    },
    "bwa": {
        "name_process": "bwa",
        "string_process": "process bwa {\n    label 'bwa'\n                                                                                         \n                                                                                                              \n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(assembly), path(illumina)\n    output:\n    tuple val(name) , path(\"illumina_sorted.bam\")\n    script:\n    \"\"\"\n    bwa index -p illumina -a bwtsw ${assembly}\n    bwa mem illumina ${illumina[0]} ${illumina[1]} -t ${task.cpus} > illumina.sam\n    samtools view -bS illumina.sam > illumina.bam\n    samtools sort -@ ${task.cpus} -o illumina_sorted.bam illumina.bam\n    rm illumina.*\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bwa index -p illumina -a bwtsw ${assembly}\n    bwa mem illumina ${illumina[0]} ${illumina[1]} -t ${task.cpus} > illumina.sam\n    samtools view -bS illumina.sam > illumina.bam\n    samtools sort -@ ${task.cpus} -o illumina_sorted.bam illumina.bam\n    rm illumina.*\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "illumina"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'bwa'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "extra_bwa": {
        "name_process": "extra_bwa",
        "string_process": "\nprocess extra_bwa {\n    label 'bwa'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n                                                                                         \n                                                                                                              \n    input:\n    tuple val(name), path(assembly), path(illumina)\n    output:\n    tuple val(name) , path(\"*_sorted.bam\")\n    script:\n    \"\"\"\n    bwa index -p illumina -a bwtsw ${assembly}\n    bwa mem illumina ${illumina} -t ${task.cpus} > illumina.sam\n    samtools view -bS illumina.sam > illumina.bam\n    samtools sort -@ ${task.cpus} -o ${illumina[0]}_sorted.bam illumina.bam\n    rm illumina.*\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bwa index -p illumina -a bwtsw ${assembly}\n    bwa mem illumina ${illumina} -t ${task.cpus} > illumina.sam\n    samtools view -bS illumina.sam > illumina.bam\n    samtools sort -@ ${task.cpus} -o ${illumina[0]}_sorted.bam illumina.bam\n    rm illumina.*\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "illumina"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'bwa'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "bwa_bin": {
        "name_process": "bwa_bin",
        "string_process": "\nprocess bwa_bin {\n    label 'bwa'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n                                                                                         \n                                                                                                              \n    input:\n    tuple val(name), path(assembly), path(illumina)\n    output:\n    tuple val(name) , path(\"illumina_sorted.bam\")\n    script:\n    \"\"\"\n    bwa index -p illumina -a bwtsw ${assembly}\n    bwa mem illumina ${illumina[0]} ${illumina[1]} -t ${task.cpus} > illumina.sam\n    samtools view -bS illumina.sam > illumina.bam\n    samtools sort -@ ${task.cpus} -o illumina_sorted.bam illumina.bam\n    rm illumina.*\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bwa index -p illumina -a bwtsw ${assembly}\n    bwa mem illumina ${illumina[0]} ${illumina[1]} -t ${task.cpus} > illumina.sam\n    samtools view -bS illumina.sam > illumina.bam\n    samtools sort -@ ${task.cpus} -o illumina_sorted.bam illumina.bam\n    rm illumina.*\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "illumina"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'bwa'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "eggnog_download_db": {
        "name_process": "eggnog_download_db",
        "string_process": "process eggnog_download_db {\n        \n  if (workflow.profile.contains('conda')) { storeDir 'nextflow-autodownload-databases/eggnog' }\n  else if (workflow.profile.contains('gcloud')) {publishDir 'gs://gcloud_storage/databases-nextflow/eggnog', mode: 'copy', pattern: \"eggnog-db\"}\n  else { publishDir 'nextflow-autodownload-databases/eggnog', mode: 'copy', pattern: \"eggnog-db\" }\n  label 'eggnog' \n  errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n  maxRetries = 5\n  output:\n    path(\"eggnog-db\")\n  script:\n  \"\"\"\n  mkdir eggnog-db\n  download_eggnog_data.py --data_dir eggnog-db -y\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  mkdir eggnog-db\n  download_eggnog_data.py --data_dir eggnog-db -y\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'eggnog'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "racon": {
        "name_process": "racon",
        "string_process": "process racon {\n    label 'racon'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n        tuple val(name), path(read), path(assembly), path(mapping) \n    output:\n        tuple val(name), path(read), path(\"${name}_consensus.fasta\") \n    shell:\n        \"\"\"\n        racon -t ${task.cpus} ${read} ${mapping} ${assembly} > ${name}_consensus.fasta\n        \"\"\"\n    }",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n        racon -t ${task.cpus} ${read} ${mapping} ${assembly} > ${name}_consensus.fasta\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "name",
            "read",
            "assembly",
            "mapping"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'racon'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "medaka": {
        "name_process": "medaka",
        "string_process": "\nprocess medaka {\n    label 'medaka'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n        tuple val(name), path(read), path(consensus) \n    output:\n        tuple val(name), path(\"${name}_polished.fasta\") \n    script:\n        \"\"\"\n        medaka_consensus -i ${read} -d ${consensus} -o polished -t ${task.cpus} -m ${params.model}\n        mv polished/consensus.fasta ${name}_polished.fasta\n        \"\"\"\n  }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        medaka_consensus -i ${read} -d ${consensus} -o polished -t ${task.cpus} -m ${params.model}\n        mv polished/consensus.fasta ${name}_polished.fasta\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "read",
            "consensus"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'medaka'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "pilon": {
        "name_process": "pilon",
        "string_process": "\nprocess pilon {\n    label 'pilon'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    publishDir \"${params.output}/${name}/assemble/assembly/pilon_polished/\", mode: 'copy', pattern: \"polished_assembly.fasta\" \n    input:\n        tuple val(name), path(assembly), path(ill_read)\n        val(iteration)\n    output:\n        tuple val(name) , path(\"polished_assembly.fasta\")\n    shell:\n    \"\"\"\n    mem=\\$(echo ${task.memory} | sed 's/ GB//g'| sed 's/g//g')\n    partial_mem=\\$((\\$mem*40/100))\n    assemb=\"${assembly}\"\n    for ite in {1..${iteration}}\n    do\n        bwa index \\$assemb\n        bwa mem \\$assemb ${ill_read[0]} ${ill_read[1]} | samtools view -bS - | samtools sort -@ ${task.cpus} - > \\$ite.bam\n        samtools index -@ ${task.cpus} \\$ite.bam\n        pilon -Xmx\\$partial_mem\"g\" --threads ${task.cpus} --genome \\$assemb --bam \\$ite.bam --output \\$ite\"_polished_assembly\"\n        assemb=\\$ite\"_polished_assembly.fasta\"\n    done\n    mv ${iteration}\"_polished_assembly.fasta\" polished_assembly.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    mem=\\$(echo ${task.memory} | sed 's/ GB//g'| sed 's/g//g')\n    partial_mem=\\$((\\$mem*40/100))\n    assemb=\"${assembly}\"\n    for ite in {1..${iteration}}\n    do\n        bwa index \\$assemb\n        bwa mem \\$assemb ${ill_read[0]} ${ill_read[1]} | samtools view -bS - | samtools sort -@ ${task.cpus} - > \\$ite.bam\n        samtools index -@ ${task.cpus} \\$ite.bam\n        pilon -Xmx\\$partial_mem\"g\" --threads ${task.cpus} --genome \\$assemb --bam \\$ite.bam --output \\$ite\"_polished_assembly\"\n        assemb=\\$ite\"_polished_assembly.fasta\"\n    done\n    mv ${iteration}\"_polished_assembly.fasta\" polished_assembly.fasta\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools",
            "pilon"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools",
            "https://bio.tools/pilon"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pilon",
                "uri": "https://bio.tools/pilon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Read alignment analysis to diagnose, report, and automatically improve de novo genome assemblies.",
                "homepage": "http://www.broadinstitute.org/software/pilon/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ill_read",
            "iteration"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'pilon'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "publishDir \"${params.output}/${name}/assemble/assembly/pilon_polished/\", mode: 'copy', pattern: \"polished_assembly.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "test": {
        "name_process": "test",
        "string_process": "process test {\n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    output:\n    tuple val(\"subset\"), path(\"ill/*\")\n    tuple val(\"subset\"), path(\"ont/subset.fastq\")\n    tuple val(\"subset\"), path(\"rna/*\")\n    shell:\n    \"\"\"\n    wget --no-check-certificate https://osf.io/9xmh4/download -O subset_data.tar.gz\n    tar -xzvf subset_data.tar.gz\n    mkdir ill\n    mv ./subset/subset_ill/* ill/\n    mkdir ont/\n    mv ./subset/subset_ont/* ont/\n    mkdir rna/\n    mv ./subset/subset_rna/* rna/\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    wget --no-check-certificate https://osf.io/9xmh4/download -O subset_data.tar.gz\n    tar -xzvf subset_data.tar.gz\n    mkdir ill\n    mv ./subset/subset_ill/* ill/\n    mkdir ont/\n    mv ./subset/subset_ont/* ont/\n    mkdir rna/\n    mv ./subset/subset_rna/* rna/\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": "process spades {\n    label 'spades'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    publishDir \"${params.output}/${name}/assemble/assembly/spades/\", mode: 'copy', pattern: \"assembly.fasta\" \n    input:\n    tuple val(name), path(illumina), path(ont)\n    output:\n    tuple val(name), path(\"assembly.fasta\")\n    \n    script:\n    \"\"\"\n    mem=\\$(echo ${task.memory} |sed 's/ GB//g' | sed 's/g//g')\n    cpus=\\$(echo ${task.cpus})\n    echo \\$cpus \\$mem\n    spades.py -1 ${illumina[0]} -2 ${illumina[1]}  --meta --nanopore ${ont} -o spades_output -t \\$cpus -m \\$mem\n    mv spades_output/contigs.fasta  assembly.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    mem=\\$(echo ${task.memory} |sed 's/ GB//g' | sed 's/g//g')\n    cpus=\\$(echo ${task.cpus})\n    echo \\$cpus \\$mem\n    spades.py -1 ${illumina[0]} -2 ${illumina[1]}  --meta --nanopore ${ont} -o spades_output -t \\$cpus -m \\$mem\n    mv spades_output/contigs.fasta  assembly.fasta\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "illumina",
            "ont"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'spades'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "publishDir \"${params.output}/${name}/assemble/assembly/spades/\", mode: 'copy', pattern: \"assembly.fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "minimap2": {
        "name_process": "minimap2",
        "string_process": "process minimap2 {\n    label 'minimap2'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n                                                                                  \n                                                                                                              \n    input:\n    tuple val(name), path(assembly), path(ont)\n    output:\n    tuple val(name) , path(\"ont_sorted.bam\")\n    script:\n    \"\"\"\n    minimap2 -ax map-ont ${assembly} ${ont} > ont.sam\n    samtools view -bS ont.sam > ont.bam\n    samtools sort -@ ${task.cpus} -o ont_sorted.bam ont.bam\n    rm ont.*\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    minimap2 -ax map-ont ${assembly} ${ont} > ont.sam\n    samtools view -bS ont.sam > ont.bam\n    samtools sort -@ ${task.cpus} -o ont_sorted.bam ont.bam\n    rm ont.*\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'minimap2'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "minimap_polish": {
        "name_process": "minimap_polish",
        "string_process": "\nprocess minimap_polish {\n    label 'minimap2'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n                                                                                  \n                                                                                                              \n    input:\n    tuple val(name), path(assembly), path(ont)\n    output:\n    tuple val(name) , path(\"ont.paf\")\n    script:\n    \"\"\"\n    minimap2 -x map-ont ${assembly} ${ont} > ont.paf\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    minimap2 -x map-ont ${assembly} ${ont} > ont.paf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'minimap2'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "extra_minimap2": {
        "name_process": "extra_minimap2",
        "string_process": "\nprocess extra_minimap2 {\n    label 'minimap2'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n                                                                                  \n                                                                                                              \n    input:\n    tuple val(name), path(assembly), path(ont)\n    output:\n    tuple val(name) , path(\"*_sorted.bam\")\n    script:\n    \"\"\"\n    minimap2 -ax map-ont ${assembly} ${ont} > ont.sam\n    samtools view -bS ont.sam > ont.bam\n    samtools sort -@ ${task.cpus} -o ${ont}_sorted.bam ont.bam\n    rm ont.*\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    minimap2 -ax map-ont ${assembly} ${ont} > ont.sam\n    samtools view -bS ont.sam > ont.bam\n    samtools sort -@ ${task.cpus} -o ${ont}_sorted.bam ont.bam\n    rm ont.*\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'minimap2'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "minimap2_bin": {
        "name_process": "minimap2_bin",
        "string_process": "\nprocess minimap2_bin {\n    label 'minimap2'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n                                                                                  \n                                                                                                              \n    input:\n    tuple val(name), path(assembly), path(ont)\n    output:\n    tuple val(name) , path(\"ont_sorted.bam\")\n    script:\n    \"\"\"\n    minimap2 -ax map-ont ${assembly} ${ont} > ont.sam\n    samtools view -bS ont.sam > ont.bam\n    samtools sort -o ont_sorted.bam ont.bam\n    rm ont.*\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    minimap2 -ax map-ont ${assembly} ${ont} > ont.sam\n    samtools view -bS ont.sam > ont.bam\n    samtools sort -o ont_sorted.bam ont.bam\n    rm ont.*\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'minimap2'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "readme_output": {
        "name_process": "readme_output",
        "string_process": "process readme_output {\n    label 'ubuntu'\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    publishDir \"${params.output}/\", mode: 'copy', pattern: \"README_output.txt\"\n    input:\n    output:\n        path(\"README_output.txt\") \n    script:\n        \"\"\"\n        wget --no-check-certificate https://osf.io/a6hru/download -O README_output.txt\n        \"\"\"\n\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        wget --no-check-certificate https://osf.io/a6hru/download -O README_output.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "label 'ubuntu'",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "publishDir \"${params.output}/\", mode: 'copy', pattern: \"README_output.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "concoct": {
        "name_process": "concoct",
        "string_process": "process concoct {\n    maxForks 1\n    label 'concoct'\n    publishDir \"${params.output}/${name}/assemble/binning/concoct_bins/\", mode: 'copy', pattern: \"fasta_bins\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(assembly), path(ont_bam), path(illumina_bam)\n    output:\n    tuple val(name), path(\"fasta_bins\")\n    script:\n    \"\"\"\n    mkdir concoct_out\n    cut_up_fasta.py ${assembly} -c 10000 -o 0 --merge_last -b contigs_10K.bed > contigs_10K.fa\n    samtools index -@ ${task.cpus} ${ont_bam}\n    samtools index -@ ${task.cpus} ${illumina_bam}\n    concoct_coverage_table.py contigs_10K.bed *.bam > coverage_table.tsv\n    concoct --composition_file contigs_10K.fa --coverage_file coverage_table.tsv -b concoct_out --thread ${task.cpus}\n    merge_cutup_clustering.py concoct_out/clustering_gt1000.csv > concoct_out/clustering_merged.csv\n    mkdir fasta_bins\n    extract_fasta_bins.py ${assembly} concoct_out/clustering_merged.csv --output_path fasta_bins\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    mkdir concoct_out\n    cut_up_fasta.py ${assembly} -c 10000 -o 0 --merge_last -b contigs_10K.bed > contigs_10K.fa\n    samtools index -@ ${task.cpus} ${ont_bam}\n    samtools index -@ ${task.cpus} ${illumina_bam}\n    concoct_coverage_table.py contigs_10K.bed *.bam > coverage_table.tsv\n    concoct --composition_file contigs_10K.fa --coverage_file coverage_table.tsv -b concoct_out --thread ${task.cpus}\n    merge_cutup_clustering.py concoct_out/clustering_gt1000.csv > concoct_out/clustering_merged.csv\n    mkdir fasta_bins\n    extract_fasta_bins.py ${assembly} concoct_out/clustering_merged.csv --output_path fasta_bins\n\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont_bam",
            "illumina_bam"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'concoct'",
            "publishDir \"${params.output}/${name}/assemble/binning/concoct_bins/\", mode: 'copy', pattern: \"fasta_bins\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "concoct_extra": {
        "name_process": "concoct_extra",
        "string_process": "\nprocess concoct_extra {\n    maxForks 1\n    label 'concoct'\n    publishDir \"${params.output}/${name}/assemble/binning/concoct/\", mode: 'copy', pattern: \"fasta_bins\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(assembly), path(ont_bam), path(illumina_bam)\n    path(extra_bam)\n    output:\n    tuple val(name), path(\"fasta_bins\")\n    script:\n    \"\"\"\n    mkdir concoct_out\n    cut_up_fasta.py ${assembly} -c 10000 -o 0 --merge_last -b contigs_10K.bed > contigs_10K.fa\n    samtools index -@ ${task.cpus} ${ont_bam}\n    samtools index -@ ${task.cpus} ${illumina_bam}\n    ls ${extra_bam} | xargs -n1 -P5 samtools index  -@ ${task.cpus}\n    concoct_coverage_table.py contigs_10K.bed *.bam > coverage_table.tsv\n    concoct --composition_file contigs_10K.fa --coverage_file coverage_table.tsv -b concoct_out --thread ${task.cpus}\n    merge_cutup_clustering.py concoct_out/clustering_gt1000.csv > concoct_out/clustering_merged.csv\n    mkdir fasta_bins\n    extract_fasta_bins.py ${assembly} concoct_out/clustering_merged.csv --output_path fasta_bins\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    mkdir concoct_out\n    cut_up_fasta.py ${assembly} -c 10000 -o 0 --merge_last -b contigs_10K.bed > contigs_10K.fa\n    samtools index -@ ${task.cpus} ${ont_bam}\n    samtools index -@ ${task.cpus} ${illumina_bam}\n    ls ${extra_bam} | xargs -n1 -P5 samtools index  -@ ${task.cpus}\n    concoct_coverage_table.py contigs_10K.bed *.bam > coverage_table.tsv\n    concoct --composition_file contigs_10K.fa --coverage_file coverage_table.tsv -b concoct_out --thread ${task.cpus}\n    merge_cutup_clustering.py concoct_out/clustering_gt1000.csv > concoct_out/clustering_merged.csv\n    mkdir fasta_bins\n    extract_fasta_bins.py ${assembly} concoct_out/clustering_merged.csv --output_path fasta_bins\n\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "assembly",
            "ont_bam",
            "illumina_bam",
            "extra_bam"
        ],
        "nb_inputs": 5,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'concoct'",
            "publishDir \"${params.output}/${name}/assemble/binning/concoct/\", mode: 'copy', pattern: \"fasta_bins\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "metabat2": {
        "name_process": "metabat2",
        "string_process": "process metabat2 {\n    maxForks 1\n    label 'metabat2'\n    publishDir \"${params.output}/${name}/assemble/binning/metabat2/\", mode: 'copy', pattern: \"bins_dir\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(assembly), path(ont_bam), path(illumina_bam)\n    output:\n    tuple val(name), path(\"bins_dir\")\n    script:\n    \"\"\"\n    jgi_summarize_bam_contig_depths --outputDepth depth.txt *.bam\n    metabat2 -i ${assembly} -a depth.txt -o bins_dir/metabat_bins -t ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    jgi_summarize_bam_contig_depths --outputDepth depth.txt *.bam\n    metabat2 -i ${assembly} -a depth.txt -o bins_dir/metabat_bins -t ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "assembly",
            "ont_bam",
            "illumina_bam"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'metabat2'",
            "publishDir \"${params.output}/${name}/assemble/binning/metabat2/\", mode: 'copy', pattern: \"bins_dir\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    },
    "metabat2_extra": {
        "name_process": "metabat2_extra",
        "string_process": "\nprocess metabat2_extra {\n    maxForks 1\n    label 'metabat2'\n    publishDir \"${params.output}/${name}/assemble/binning/metabat2/\", mode: 'copy', pattern: \"bins_dir\" \n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    input:\n    tuple val(name), path(assembly), path(ont_bam), path(illumina_bam)\n    path(extra_bam)\n    output:\n    tuple val(name), path(\"bins_dir\")\n    script:\n    \"\"\"\n    jgi_summarize_bam_contig_depths --outputDepth depth.txt *.bam\n    metabat2 -i ${assembly} -a depth.txt -o bins_dir/metabat_bin -t ${task.cpus}\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    jgi_summarize_bam_contig_depths --outputDepth depth.txt *.bam\n    metabat2 -i ${assembly} -a depth.txt -o bins_dir/metabat_bin -t ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "assembly",
            "ont_bam",
            "illumina_bam",
            "extra_bam"
        ],
        "nb_inputs": 5,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "RVanDamme__MUFFIN",
        "directive": [
            "maxForks 1",
            "label 'metabat2'",
            "publishDir \"${params.output}/${name}/assemble/binning/metabat2/\", mode: 'copy', pattern: \"bins_dir\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5"
        ],
        "when": "",
        "stub": ""
    }
}
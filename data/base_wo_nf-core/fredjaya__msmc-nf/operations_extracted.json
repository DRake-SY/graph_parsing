{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.samples)\n    .splitText()\n    .map { it -> it.trim() }\n    .set { samples_ch }",
        "origin": [
            [
                "params.samples",
                "A"
            ]
        ],
        "gives": [
            [
                "samples_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(params.scaffolds)\n    .splitText()\n    .map { it -> it.trim() } \n    .into { scaffolds_bamcaller_ch\n            scaffolds_multihet_ch\n            }",
        "origin": [
            [
                "params.scaffolds",
                "A"
            ]
        ],
        "gives": []
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromFilePairs(params.bam)\n    .set { bamfiles_ch }",
        "origin": [
            [
                "params.bam",
                "A"
            ]
        ],
        "gives": [
            [
                "bamfiles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(params.mask_genome)\n    .map { file ->\n        def scaffold = (file.toString() =~ /(NC|NW)_\\d+\\.1/)[0][0]\n        return tuple(scaffold, file) }\n    .combine(samples_ch)\n    .map { it -> [ it[2], it[0], it[1] ] }\n    .set { mask_genome_ch }",
        "origin": [
            [
                "samples_ch",
                "P"
            ],
            [
                "params.mask_genome",
                "A"
            ]
        ],
        "gives": [
            [
                "mask_genome_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "mask_indiv\n    .join(vcf_bamcalled, by: [0,1])\n    .join(mask_genome_ch, by: [0,1])\n    .map { it -> [ it[0], it[1], it[2], it[4], it[3] ] }\n    .set { multihet_in }",
        "origin": [
            [
                "mask_indiv",
                "P"
            ]
        ],
        "gives": [
            [
                "multihet_in",
                "P"
            ]
        ]
    }
}
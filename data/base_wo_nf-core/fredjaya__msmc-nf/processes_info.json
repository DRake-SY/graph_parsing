{
    "bamcaller": {
        "name_process": "bamcaller",
        "string_process": "\nprocess bamcaller {\n    \n             \n              \n             \n\n    conda 'bioconda::bcftools=1.8 python=3.7'\n\n    publishDir \"${params.out}\",\n        saveAs: { filename ->\n                    if (filename.endsWith(\".bed.gz\")) \"mask_indiv/${filename}\"\n                    else if (filename.endsWith(\".vcf.gz\")) \"vcf/${filename}\"\n                }\n\n    input:\n        tuple val(sampleId), path(bamfiles) from bamfiles_ch\n        path ref from params.ref\n        each scaffold from scaffolds_bamcaller_ch\n        val out from params.in\n        val path from params.path\n    \n    output:\n        tuple val(sampleId), val(scaffold),\n            path(\"${sampleId}_${scaffold}.indMask.bed.gz\") into mask_indiv\n        tuple val(sampleId), val(scaffold),\n            path(\"${sampleId}_${scaffold}.bamCalled.vcf.gz\") into vcf_bamcalled\n    \n    script:\n    def bam = bamfiles.findAll{ it.toString() =~ /.bam/ }.join('')\n    \"\"\"\n    bcftools mpileup -Ou -r ${scaffold} --threads 8 -f ${ref} ${bam} | \\\n    bcftools call -c --threads 8 -V indels | \\\n    ${path}/msmc-tools/bamCaller.py \\\n        `cat ${out}/coverage/${sampleId}_${scaffold}.cov` \\\n        ${sampleId}_${scaffold}.indMask.bed.gz | \\\n        gzip -c > ${sampleId}_${scaffold}.bamCalled.vcf.gz\n    \"\"\"\n\n}",
        "nb_lignes_process": 38,
        "string_script": "    def bam = bamfiles.findAll{ it.toString() =~ /.bam/ }.join('')\n    \"\"\"\n    bcftools mpileup -Ou -r ${scaffold} --threads 8 -f ${ref} ${bam} | \\\n    bcftools call -c --threads 8 -V indels | \\\n    ${path}/msmc-tools/bamCaller.py \\\n        `cat ${out}/coverage/${sampleId}_${scaffold}.cov` \\\n        ${sampleId}_${scaffold}.indMask.bed.gz | \\\n        gzip -c > ${sampleId}_${scaffold}.bamCalled.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamfiles_ch",
            "params",
            "scaffolds_bamcaller_ch",
            "params",
            "params"
        ],
        "nb_inputs": 5,
        "outputs": [
            "mask_indiv",
            "vcf_bamcalled"
        ],
        "nb_outputs": 2,
        "name_workflow": "fredjaya__msmc-nf",
        "directive": [
            "conda 'bioconda::bcftools=1.8 python=3.7'",
            "publishDir \"${params.out}\" , saveAs: { filename -> if (filename.endsWith(\".bed.gz\")) \"mask_indiv/${filename}\" else if (filename.endsWith(\".vcf.gz\")) \"vcf/${filename}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "multihet_single": {
        "name_process": "multihet_single",
        "string_process": "\nprocess multihet_single {\n    \n            \n                \n               \n    conda 'python=3.7'\n   \n    publishDir \"${params.out}/msmc_input\"\n \n    input:\n        val path from params.path\n        tuple val(sampleId), val(scaffold),\n            path(\"${sampleId}_${scaffold}.indMask.bed.gz\"),\n            path(\"${scaffold}.genMask.bed.gz\"),\n            path(\"${sampleId}_${scaffold}.bamCalled.vcf.gz\") from multihet_in\n\n    output:\n        tuple val(sampleId), val(scaffold),\n            path(\"${sampleId}_${scaffold}.msmcInput.txt\") into msmc_in\n \n    script:\n    \"\"\"\n    ${path}/msmc-tools/generate_multihetsep.py \\\n        --mask ${sampleId}_${scaffold}.indMask.bed.gz \\\n        --mask ${scaffold}.genMask.bed.gz \\\n        ${sampleId}_${scaffold}.bamCalled.vcf.gz \\\n        > ${sampleId}_${scaffold}.msmcInput.txt \\\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    ${path}/msmc-tools/generate_multihetsep.py \\\n        --mask ${sampleId}_${scaffold}.indMask.bed.gz \\\n        --mask ${scaffold}.genMask.bed.gz \\\n        ${sampleId}_${scaffold}.bamCalled.vcf.gz \\\n        > ${sampleId}_${scaffold}.msmcInput.txt \\\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params",
            "multihet_in"
        ],
        "nb_inputs": 2,
        "outputs": [
            "msmc_in"
        ],
        "nb_outputs": 1,
        "name_workflow": "fredjaya__msmc-nf",
        "directive": [
            "conda 'python=3.7'",
            "publishDir \"${params.out}/msmc_input\""
        ],
        "when": "",
        "stub": ""
    },
    "msmc": {
        "name_process": "msmc",
        "string_process": "\nprocess msmc {\n\n    publishDir \"${params.out}/msmc_output\"\n\n    input:\n        val path from params.path\n        tuple val(sampleId), val(scaffold),\n            path(\"${sampleId}_*.msmcInput.txt\") from msmc_in.groupTuple(by: 0) \n        \n    output:\n        path(\"${sampleId}.final.txt\")\n        path(\"${sampleId}.loop.txt\")\n        path(\"${sampleId}.log\")\n \n    script:\n    \"\"\"\n    ${path}/msmc2-2.1.2-bin/build/release/msmc2 \\\n        -o ${sampleId} \\\n        ${sampleId}_*.msmcInput.txt\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    ${path}/msmc2-2.1.2-bin/build/release/msmc2 \\\n        -o ${sampleId} \\\n        ${sampleId}_*.msmcInput.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params",
            "msmc_in"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "fredjaya__msmc-nf",
        "directive": [
            "publishDir \"${params.out}/msmc_output\""
        ],
        "when": "",
        "stub": ""
    }
}
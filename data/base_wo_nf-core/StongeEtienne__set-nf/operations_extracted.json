{
    "OPERATION_1": {
        "string": "map_for_rois_seed = Channel\n        .fromFilePairs(\"${tractoflow}/**/DTI_Metrics/*fa.nii.gz\",\n                       size: 1, maxDepth:3, flat: true) {it.parent.parent.name}\n        .ifEmpty { exit 1, \"Cannot find ${tractoflow}/**/DTI_Metrics/*fa.nii.gz\"}",
        "origin": [],
        "gives": [
            [
                "map_for_rois_seed",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ants_transfo_to_convert = Channel\n        .fromFilePairs(\"${tractoflow}/**/Register_T1/*{output0GenericAffine.mat,output1InverseWarp.nii.gz}\",\n                       size: 2, maxDepth:3, flat: true) {it.parent.parent.name}\n        .ifEmpty { exit 1, \"Cannot find ${tractoflow}/**/Register_T1/*{output0GenericAffine.mat,output1InverseWarp.nii.gz}\" }",
        "origin": [],
        "gives": [
            [
                "ants_transfo_to_convert",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fodf_and_map_for_pft = Channel\n        .fromFilePairs(\"${tractoflow}/**/{FODF_Metrics/*fodf.nii.gz,PFT_Maps/*map_exclude.nii.gz,PFT_Maps/*map_include.nii.gz}\",\n                       size: 3, maxDepth:3, flat: true) {it.parent.parent.name}\n        .ifEmpty { exit 1, \"Cannot find ${tractoflow}/**/{FODF_Metrics/*fodf.nii.gz,PFT_Maps/*map_exclude.nii.gz,PFT_Maps/*map_include.nii.gz}\" }",
        "origin": [],
        "gives": [
            [
                "fodf_and_map_for_pft",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ants_transfo_to_convert = Channel\n            .fromFilePairs(\"${antswarp}/**/Register_T1/*{output0GenericAffine.mat,output1InverseWarp.nii.gz}\",\n                           size: 2, maxDepth:3, flat: true) {it.parent.parent.name}\n            .ifEmpty { exit 1, \"Cannot find ${antswarp}/**/Register_T1/*{output0GenericAffine.mat,output1InverseWarp.nii.gz}\" }",
        "origin": [],
        "gives": [
            [
                "ants_transfo_to_convert",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "map_for_rois_seed = Channel\n                .fromFilePairs(\"${rois_seed}/**/*fa.nii.gz\",\n                               size: 1, maxDepth:3, flat: true) {it.parent.parent.name}\n                .ifEmpty { exit 1, \"Cannot find ${rois_seed}/**/*fa.nii.gz\" }",
        "origin": [],
        "gives": [
            [
                "map_for_rois_seed",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "map_for_rois_seed = Channel\n                .fromFilePairs(\"${rois_seed}/**/*fa.nii.gz\",\n                               size: 1, maxDepth:3, flat: true) {it.parent.parent.name}\n                .ifEmpty { exit 1, \"Cannot find ${rois_seed}/**/*fa.nii.gz\" }",
        "origin": [],
        "gives": [
            [
                "map_for_rois_seed",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "fodf_for_pft = Channel\n            .fromFilePairs(\"${fodf}/**/*/*fodf.nii.gz\",\n                           size: 1, maxDepth:3, flat: true) {it.parent.parent.name}\n            .ifEmpty { exit 1, \"Cannot find ${fodf}/**/*/*fodf.nii.gz\" }",
        "origin": [],
        "gives": [
            [
                "fodf_for_pft",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "maps_for_pft = Channel\n            .fromFilePairs(\"${pft_maps}/**/*/*{map_exclude.nii.gz,map_include.nii.gz}\",\n                           size: 2, maxDepth:3, flat: true) {it.parent.parent.name}\n            .ifEmpty { exit 1, \"Cannot find ${pft_maps}/**/*/*{map_exclude.nii.gz,map_include.nii.gz}\" }",
        "origin": [],
        "gives": [
            [
                "maps_for_pft",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "in_surfaces = Channel\n                .fromFilePairs(\"${surfaces}/**/*{lh*aparc.annot,lh*pial.vtk,lh*white.vtk,rh*aparc.annot,rh*pial.vtk,rh*white.vtk,wmparc*}\",\n                               size: 7, maxDepth:3, flat: true) {it.parent.name}\n                .ifEmpty { exit 1, \"Cannot find freesurfer data:  ${surfaces}/**/*{lh*aparc.annot,lh*pial.vtk,lh*white.vtk,rh*aparc.annot,rh*pial.vtk,rh*white.vtk,wmparc*}\" }",
        "origin": [],
        "gives": [
            [
                "in_surfaces",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "in_surfaces = Channel\n                .fromFilePairs(\"${surfaces}/**/*{lh*a2009s.annot,lh*pial.vtk,lh*white.vtk,rh*a2009s.annot,rh*pial.vtk,rh*white.vtk,wmparc*}\",\n                               size: 7, maxDepth:3, flat: true) {it.parent.name}\n                .ifEmpty { exit 1, \"Cannot find freesurfer data: ${surfaces}/**/*{lh*a2009s.annot,lh*pial.vtk,lh*white.vtk,rh*a2009s.annot,rh*pial.vtk,rh*white.vtk,wmparc*}\" }",
        "origin": [],
        "gives": [
            [
                "in_surfaces",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "in_surfaces_label = Channel\n                .fromFilePairs(\"${surfaces}/**/{label/lh.aparc.annot,label/rh.aparc.annot}\",\n                               size: 2, maxDepth:3, flat: true) {it.parent.parent.name}\n                .ifEmpty { exit 1, \"Cannot find freesurfer data: ${surfaces}/**/{label/lh.aparc.annot,label/rh.aparc.annot}\" }",
        "origin": [],
        "gives": [
            [
                "in_surfaces_label",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "in_surfaces_label = Channel\n                .fromFilePairs(\"${surfaces}/**/{label/lh.aparc.a2009s.annot,label/rh.aparc.a2009s.annot}\",\n                               size: 2, maxDepth:3, flat: true) {it.parent.parent.name}\n                .ifEmpty { exit 1, \"Cannot find freesurfer data ${surfaces}/**/{label/lh.aparc.a2009s.annot,label/rh.aparc.a2009s.annot}\" }",
        "origin": [],
        "gives": [
            [
                "in_surfaces_label",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "in_surfaces_wmparc = Channel\n            .fromFilePairs(\"${surfaces}/**/mri/wmparc*\",\n                           size: 1, maxDepth:3, flat: true) {it.parent.parent.name}\n            .ifEmpty { exit 1, \"Cannot find freesurfer data ${surfaces}/**/mri/wmparc*\" }",
        "origin": [],
        "gives": [
            [
                "in_surfaces_wmparc",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "in_surfaces_mesh = Channel\n            .fromFilePairs(\"${surfaces}/**/{surf/lh.pial,surf/lh.white,surf/rh.pial,surf/rh.white}\",\n                           size: 4, maxDepth:3, flat: true) {it.parent.parent.name}\n            .ifEmpty { exit 1, \"Cannot find freesurfer data ${surfaces}/**/{surf/lh.pial,surf/lh.white,surf/rh.pial,surf/rh.white}\" }",
        "origin": [],
        "gives": [
            [
                "in_surfaces_mesh",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "in_civet_surf = Channel\n            .fromFilePairs(\"${surfaces}/**/{surfaces/*gray_surface_left_81920.obj,surfaces/*gray_surface_right_81920.obj,surfaces/*white_surface_left_81920.obj,surfaces/*white_surface_right_81920.obj}\",\n                           size: 4, maxDepth:4, flat: true) {it.parent.parent.name}\n            .ifEmpty { exit 1, \"Cannot find civet data: ${surfaces}/**/{surfaces/*gray_surface_left_81920.obj,surfaces/*gray_surface_right_81920.obj,surfaces/*white_surface_left_81920.obj,surfaces/*white_surface_right_81920.obj}\" }",
        "origin": [],
        "gives": [
            [
                "in_civet_surf",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "in_civet_transfo = Channel\n            .fromFilePairs(\"${surfaces}/**/transforms/linear/*t1_tal.xfm\",\n                            size: 1, maxDepth:5, flat: true) {it.parent.parent.parent.name}\n             .ifEmpty { exit 1, \"Cannot find civet data: ${surfaces}/**/transforms/linear/*t1_tal.xfm\" }",
        "origin": [],
        "gives": [
            [
                "in_civet_transfo",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "in_civet_animal = Channel\n            .fromFilePairs(\"${surfaces}/**/segment/*animal_labels.mnc\",\n                            size: 1, maxDepth:5, flat: true) {it.parent.parent.name}\n             .ifEmpty { exit 1, \"Cannot find civet data: ${surfaces}/**/segment/*animal_labels.mnc\" }",
        "origin": [],
        "gives": [
            [
                "in_civet_animal",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "feedback_ch = Channel.create()",
        "origin": [],
        "gives": [
            [
                "feedback_ch",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "intersections_for_concatenate = Channel.create()",
        "origin": [],
        "gives": [
            [
                "intersections_for_concatenate",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "streamlines_for_concatenate = Channel.create()",
        "origin": [],
        "gives": [
            [
                "streamlines_for_concatenate",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "fodf_for_pft\n        .join(maps_for_pft)\n        .set{fodf_and_map_for_pft}",
        "origin": [
            [
                "fodf_for_pft",
                "P"
            ],
            [
                "maps_for_pft",
                "P"
            ]
        ],
        "gives": [
            [
                "fodf_and_map_for_pft",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "annots_for_surfaces_masks, annots_for_surfaces_labels, label_vol_to_convert, surfaces_for_surfaces_masks, surfaces_for_surfaces_labels, surfaces_for_lps = in_surfaces\n          .map{sid, lh_annot, lh_pial, lh_white, rh_annot, rh_pial, rh_white, wmparc ->\n              [tuple(sid, lh_annot, rh_annot),\n              tuple(sid, lh_annot, rh_annot),\n              tuple(sid, wmparc),\n              tuple(sid, lh_white, rh_white),\n              tuple(sid, lh_white, rh_white),\n              tuple(sid, lh_pial, rh_pial, lh_white, rh_white)]}\n          .separate(6)",
        "origin": [
            [
                "in_surfaces",
                "P"
            ]
        ],
        "gives": [
            [
                "annots_for_surfaces_masks",
                "P"
            ],
            [
                "annots_for_surfaces_labels",
                "P"
            ],
            [
                "label_vol_to_convert",
                "P"
            ],
            [
                "surfaces_for_surfaces_masks",
                "P"
            ],
            [
                "surfaces_for_surfaces_labels",
                "P"
            ],
            [
                "surfaces_for_lps",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "in_surfaces_label\n            .join(in_surfaces_wmparc)\n            .join(in_surfaces_mesh)\n            .set{in_surfaces}",
        "origin": [
            [
                "in_surfaces_label",
                "P"
            ],
            [
                "in_surfaces_wmparc",
                "P"
            ],
            [
                "in_surfaces_mesh",
                "P"
            ]
        ],
        "gives": [
            [
                "in_surfaces",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "annots_for_surfaces_masks, annots_for_surfaces_labels, label_vol_to_convert, freesurfer_surfaces_to_convert = in_surfaces\n          .map{sid, lh_annot, rh_annot, wmparc, lh_pial, lh_white, rh_pial, rh_white ->\n              [tuple(sid, lh_annot, rh_annot),\n              tuple(sid, lh_annot, rh_annot),\n              tuple(sid, wmparc),\n              tuple(sid, lh_pial, rh_pial, lh_white, rh_white)]}\n          .separate(4)",
        "origin": [
            [
                "in_surfaces",
                "P"
            ]
        ],
        "gives": [
            [
                "annots_for_surfaces_masks",
                "P"
            ],
            [
                "annots_for_surfaces_labels",
                "P"
            ],
            [
                "label_vol_to_convert",
                "P"
            ],
            [
                "freesurfer_surfaces_to_convert",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "in_civet_surf\n        .join(in_civet_transfo)\n        .join(in_civet_animal)\n        .combine(in_civet_template)\n        .set{in_civet}",
        "origin": [
            [
                "in_civet_surf",
                "P"
            ],
            [
                "in_civet_transfo",
                "P"
            ],
            [
                "in_civet_animal",
                "P"
            ],
            [
                "in_civet_template",
                "P"
            ]
        ],
        "gives": [
            [
                "in_civet",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "annots_for_surfaces_masks, annots_for_surfaces_labels, xfm_transfo_to_convert, animal_to_convert, civet_surfaces_to_convert = in_civet\n      .map{sid, lh_pial, rh_pial, lh_white, rh_white, xfm_transfo, animal_labels, lh_annot, rh_annot  ->\n          [tuple(sid, lh_annot, rh_annot),\n          tuple(sid, lh_annot, rh_annot),\n          tuple(sid, xfm_transfo),\n          tuple(sid, animal_labels, xfm_transfo),\n          tuple(sid, lh_pial, rh_pial, lh_white, rh_white, xfm_transfo)]}\n      .separate(5)",
        "origin": [
            [
                "in_civet",
                "P"
            ]
        ],
        "gives": [
            [
                "annots_for_surfaces_masks",
                "P"
            ],
            [
                "annots_for_surfaces_labels",
                "P"
            ],
            [
                "xfm_transfo_to_convert",
                "P"
            ],
            [
                "animal_to_convert",
                "P"
            ],
            [
                "civet_surfaces_to_convert",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "annots_for_surfaces_masks\n    .join(surfaces_for_surfaces_masks)\n    .set{data_for_surfaces_masks}",
        "origin": [
            [
                "annots_for_surfaces_masks",
                "P"
            ],
            [
                "surfaces_for_surfaces_masks",
                "P"
            ]
        ],
        "gives": [
            [
                "data_for_surfaces_masks",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "surfaces_for_surfaces_labels\n    .join(annots_for_surfaces_labels)\n    .set{data_for_surfaces_labels}",
        "origin": [
            [
                "surfaces_for_surfaces_labels",
                "P"
            ],
            [
                "annots_for_surfaces_labels",
                "P"
            ]
        ],
        "gives": [
            [
                "data_for_surfaces_labels",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "map_for_rois_seed\n    .join(rois_for_masks)\n    .set{map_and_rois_for_masks}",
        "origin": [
            [
                "map_for_rois_seed",
                "P"
            ],
            [
                "rois_for_masks",
                "P"
            ]
        ],
        "gives": [
            [
                "map_and_rois_for_masks",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "surfaces_to_concatenate\n    .join(rois_to_concatenate)\n    .set{surfaces_and_rois_to_concatenate}",
        "origin": [
            [
                "surfaces_to_concatenate",
                "P"
            ],
            [
                "rois_to_concatenate",
                "P"
            ]
        ],
        "gives": [
            [
                "surfaces_and_rois_to_concatenate",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "masks_for_concatenate\n    .join(rois_mask_for_concatenate)\n    .set{all_masks_for_concatenate}",
        "origin": [
            [
                "masks_for_concatenate",
                "P"
            ],
            [
                "rois_mask_for_concatenate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_masks_for_concatenate",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "labels_for_cocatenate\n    .join(rois_labels_for_concatenate)\n    .set{all_labels_for_concatenate}",
        "origin": [
            [
                "labels_for_cocatenate",
                "P"
            ],
            [
                "rois_labels_for_concatenate",
                "P"
            ]
        ],
        "gives": [
            [
                "all_labels_for_concatenate",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "surfaces_to_warp\n        .into{surfaces_for_seed;surfaces_for_smooth;surfaces_for_density}",
        "origin": [
            [
                "surfaces_to_warp",
                "P"
            ]
        ],
        "gives": [
            [
                "surfaces_for_seed",
                "P"
            ],
            [
                "surfaces_for_smooth",
                "P"
            ],
            [
                "surfaces_for_density",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "ants_transfo_for_surfaces\n        .join(surfaces_to_warp)\n        .set{surfaces_with_transform}",
        "origin": [
            [
                "ants_transfo_for_surfaces",
                "P"
            ],
            [
                "surfaces_to_warp",
                "P"
            ]
        ],
        "gives": [
            [
                "surfaces_with_transform",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "surfaces_for_smooth\n    .join(flow_mask_for_set_nf)\n    .set{data_for_surface_smooth}",
        "origin": [
            [
                "surfaces_for_smooth",
                "P"
            ],
            [
                "flow_mask_for_set_nf",
                "P"
            ]
        ],
        "gives": [
            [
                "data_for_surface_smooth",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "surfaces_for_seed\n    .join(seed_mask_for_set_nf)\n    .set{data_rand_for_surface_seed}",
        "origin": [
            [
                "surfaces_for_seed",
                "P"
            ],
            [
                "seed_mask_for_set_nf",
                "P"
            ]
        ],
        "gives": [
            [
                "data_rand_for_surface_seed",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "surfaces_seeding_map_for_set\n    .combine(random_generator_list)\n    .combine([0])\n    .set{setup_loop_ch}",
        "origin": [
            [
                "surfaces_seeding_map_for_set",
                "P"
            ],
            [
                "random_generator_list",
                "P"
            ]
        ],
        "gives": [
            [
                "setup_loop_ch",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "set_input_ch = setup_loop_ch.mix(feedback_ch).take(total_tracking)",
        "origin": [
            [
                "setup_loop_ch",
                "P"
            ],
            [
                "feedback_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "set_input_ch",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "set_input_ch\n    .combine(surface_flow_surfaces_for_pft, by : 0)\n    .combine(fodf_and_map_for_pft, by : 0)\n    .combine(intersections_mask_for_set_nf, by : 0)\n    .combine(surface_type_for_set_nf, by : 0)\n    .combine(surface_flow_lines_for_combine, by : 0)\n    .set{data_for_set}",
        "origin": [
            [
                "set_input_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "data_for_set",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "intersections_for_concatenate\n    .groupTuple(size: nb_tracking_per_sub)\n    .set{intersections_grouped_for_concatenate}",
        "origin": [
            [
                "intersections_for_concatenate",
                "P"
            ]
        ],
        "gives": [
            [
                "intersections_grouped_for_concatenate",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "surfaces_for_connectivity\n    .join(labels_for_set_nf)\n    .set{surf_and_labels_for_connectivity}",
        "origin": [
            [
                "surfaces_for_connectivity",
                "P"
            ],
            [
                "labels_for_set_nf",
                "P"
            ]
        ],
        "gives": [
            [
                "surf_and_labels_for_connectivity",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "intersections_for_connectivity\n    .combine(surf_and_labels_for_connectivity, by : 0)\n    .set{data_for_connectivity}",
        "origin": [
            [
                "intersections_for_connectivity",
                "P"
            ]
        ],
        "gives": [
            [
                "data_for_connectivity",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "intersections_for_density\n    .combine(surfaces_for_density, by : 0)\n    .set{data_for_density}",
        "origin": [
            [
                "intersections_for_density",
                "P"
            ]
        ],
        "gives": [
            [
                "data_for_density",
                "P"
            ]
        ]
    }
}
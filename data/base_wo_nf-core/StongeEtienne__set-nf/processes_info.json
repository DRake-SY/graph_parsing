{
    "README": {
        "name_process": "README",
        "string_process": "\nprocess README {\n    cpus 1\n    tag = {\"global\"}\n    publishDir = {\"${params.output_dir}/${task.process}\"}\n\n    output:\n    file \"readme.txt\"\n\n    script:\n    String list_options = new String();\n    for (String item : params) {\n        list_options += item + \"\\n\"\n    }\n    \"\"\"\n    echo \"TractoFlow pipeline\\n\" >> readme.txt\n    echo \"Start time: ${workflow.start}\\n\" >> readme.txt\n    echo \"[Command-line]\\n${workflow.commandLine}\\n\" >> readme.txt\n    echo \"[Git Info]\\n\" >> readme.txt\n    echo \"${workflow.repository} - ${workflow.revision} [${workflow.commitId}]\\n\" >> readme.txt\n    echo \"[Options]\\n\" >> readme.txt\n    echo \"${list_options}\" >> readme.txt\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    String list_options = new String();\n    for (String item : params) {\n        list_options += item + \"\\n\"\n    }\n    \"\"\"\n    echo \"TractoFlow pipeline\\n\" >> readme.txt\n    echo \"Start time: ${workflow.start}\\n\" >> readme.txt\n    echo \"[Command-line]\\n${workflow.commandLine}\\n\" >> readme.txt\n    echo \"[Git Info]\\n\" >> readme.txt\n    echo \"${workflow.repository} - ${workflow.revision} [${workflow.commitId}]\\n\" >> readme.txt\n    echo \"[Options]\\n\" >> readme.txt\n    echo \"${list_options}\" >> readme.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1",
            "tag = {\"global\"}",
            "publishDir = {\"${params.output_dir}/${task.process}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "A__Convert_Freesurfer_Surface": {
        "name_process": "A__Convert_Freesurfer_Surface",
        "string_process": " process A__Convert_Freesurfer_Surface {\n            cpus 1\n\n            input:\n            set sid, file(lh_pial),  file(rh_pial),  file(lh_white),  file(rh_white)\\\n              from freesurfer_surfaces_to_convert\n\n            output:\n            set sid, \"${sid}__lh_white.vtk\", \"${sid}__rh_white.vtk\"\\\n              into surfaces_for_surfaces_masks, surfaces_for_surfaces_labels\n            set sid, \"${sid}__lh_pial.vtk\", \"${sid}__rh_pial.vtk\",\\\n              \"${sid}__lh_white.vtk\", \"${sid}__rh_white.vtk\"\\\n              into surfaces_for_lps\n\n            script:\n            \"\"\"\n            mris_convert --to-scanner ${lh_pial} lh.pial.vtk\n            mris_convert --to-scanner ${rh_pial} rh.pial.vtk\n            mris_convert --to-scanner ${lh_white} lh.white.vtk\n            mris_convert --to-scanner ${rh_white} rh.white.vtk\n            mv lh.pial.vtk ${sid}__lh_pial.vtk\n            mv rh.pial.vtk ${sid}__rh_pial.vtk\n            mv lh.white.vtk ${sid}__lh_white.vtk\n            mv rh.white.vtk ${sid}__rh_white.vtk\n            \"\"\"\n        }",
        "nb_lignes_process": 24,
        "string_script": "            \"\"\"\n            mris_convert --to-scanner ${lh_pial} lh.pial.vtk\n            mris_convert --to-scanner ${rh_pial} rh.pial.vtk\n            mris_convert --to-scanner ${lh_white} lh.white.vtk\n            mris_convert --to-scanner ${rh_white} rh.white.vtk\n            mv lh.pial.vtk ${sid}__lh_pial.vtk\n            mv rh.pial.vtk ${sid}__rh_pial.vtk\n            mv lh.white.vtk ${sid}__lh_white.vtk\n            mv rh.white.vtk ${sid}__rh_white.vtk\n            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "freesurfer_surfaces_to_convert"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surfaces_for_surfaces_masks",
            "surfaces_for_surfaces_labels",
            "surfaces_for_lps"
        ],
        "nb_outputs": 3,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "A__Civet_Template": {
        "name_process": "A__Civet_Template",
        "string_process": " process A__Civet_Template {\n        cpus 1\n        tag = {\"global\"}\n        publishDir = {\"${params.output_dir}/${task.process}\"}\n\n        output:\n        set \"template_left.txt\", \"template_right.txt\"\\\n            into in_civet_template\n\n        script:\n        \"\"\"\n        cp ${file(params.civet_template)}/*left.txt template_left.txt\n        cp ${file(params.civet_template)}/*right.txt template_right.txt\n        \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        cp ${file(params.civet_template)}/*left.txt template_left.txt\n        cp ${file(params.civet_template)}/*right.txt template_right.txt\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "in_civet_template"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1",
            "tag = {\"global\"}",
            "publishDir = {\"${params.output_dir}/${task.process}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "A__Convert_CIVET_Surface": {
        "name_process": "A__Convert_CIVET_Surface",
        "string_process": " process A__Convert_CIVET_Surface {\n        cpus 1\n\n        input:\n        set sid, file(lh_pial), file(rh_pial), file(lh_white), file(rh_white), file(xfm_transfo)\\\n            from civet_surfaces_to_convert\n\n        output:\n        set sid, \"${sid}__lh_white.vtk\", \"${sid}__rh_white.vtk\"\\\n            into surfaces_for_surfaces_masks, surfaces_for_surfaces_labels\n        set sid, \"${sid}__lh_pial.vtk\", \"${sid}__rh_pial.vtk\",\\\n            \"${sid}__lh_white.vtk\", \"${sid}__rh_white.vtk\"\\\n            into surfaces_for_lps\n\n        script:\n        \"\"\"\n        xfminvert ${xfm_transfo}  ${sid}__t1_tal_inv.xfm\n        sed '''/Linear_Transform =/,/;/!d ; /Linear/d ; s/^ //; s/;/\\\\n0 0 0 1/g'''\\\n            ${xfm_transfo} > ${sid}__to_t1_transfo.txt\n        sed '''/Linear_Transform =/,/;/!d ; /Linear/d ; s/^ //; s/;/\\\\n0 0 0 1/g'''\\\n            ${sid}__t1_tal_inv.xfm > ${sid}__to_t1_inv_transfo.txt\n\n        transform_objects ${lh_pial} ${sid}__t1_tal_inv.xfm lh_pial_t1.mni.obj\n        transform_objects ${rh_pial} ${sid}__t1_tal_inv.xfm rh_pial_t1.mni.obj\n        transform_objects ${lh_white} ${sid}__t1_tal_inv.xfm lh_white_t1.mni.obj\n        transform_objects ${rh_white} ${sid}__t1_tal_inv.xfm rh_white_t1.mni.obj\n\n        scil_convert_surface.py lh_pial_t1.mni.obj ${sid}__lh_pial.vtk\n        scil_convert_surface.py rh_pial_t1.mni.obj ${sid}__rh_pial.vtk\n        scil_convert_surface.py lh_white_t1.mni.obj ${sid}__lh_white.vtk\n        scil_convert_surface.py rh_white_t1.mni.obj ${sid}__rh_white.vtk\n        \"\"\"\n    }",
        "nb_lignes_process": 31,
        "string_script": "        \"\"\"\n        xfminvert ${xfm_transfo}  ${sid}__t1_tal_inv.xfm\n        sed '''/Linear_Transform =/,/;/!d ; /Linear/d ; s/^ //; s/;/\\\\n0 0 0 1/g'''\\\n            ${xfm_transfo} > ${sid}__to_t1_transfo.txt\n        sed '''/Linear_Transform =/,/;/!d ; /Linear/d ; s/^ //; s/;/\\\\n0 0 0 1/g'''\\\n            ${sid}__t1_tal_inv.xfm > ${sid}__to_t1_inv_transfo.txt\n\n        transform_objects ${lh_pial} ${sid}__t1_tal_inv.xfm lh_pial_t1.mni.obj\n        transform_objects ${rh_pial} ${sid}__t1_tal_inv.xfm rh_pial_t1.mni.obj\n        transform_objects ${lh_white} ${sid}__t1_tal_inv.xfm lh_white_t1.mni.obj\n        transform_objects ${rh_white} ${sid}__t1_tal_inv.xfm rh_white_t1.mni.obj\n\n        scil_convert_surface.py lh_pial_t1.mni.obj ${sid}__lh_pial.vtk\n        scil_convert_surface.py rh_pial_t1.mni.obj ${sid}__rh_pial.vtk\n        scil_convert_surface.py lh_white_t1.mni.obj ${sid}__lh_white.vtk\n        scil_convert_surface.py rh_white_t1.mni.obj ${sid}__rh_white.vtk\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "civet_surfaces_to_convert"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surfaces_for_surfaces_masks",
            "surfaces_for_surfaces_labels",
            "surfaces_for_lps"
        ],
        "nb_outputs": 3,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "A__Convert_Animal": {
        "name_process": "A__Convert_Animal",
        "string_process": " process A__Convert_Animal {\n        cpus 1\n\n        input:\n        set sid, file(animal_labels), file(xfm_transfo)\\\n            from animal_to_convert\n\n        output:\n        set sid, \"${sid}__animal_labels_native.nii\"\\\n            into label_vol_to_convert\n\n        script:\n        \"\"\"\n        mincresample -nearest_neighbour -tfm_input_sampling\\\n            -invert_transformation -transformation ${xfm_transfo}\\\n            ${animal_labels} ${sid}__animal_labels_native.mnc\n\n        mnc2nii ${sid}__animal_labels_native.mnc ${sid}__animal_labels_native.nii\n        \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        mincresample -nearest_neighbour -tfm_input_sampling\\\n            -invert_transformation -transformation ${xfm_transfo}\\\n            ${animal_labels} ${sid}__animal_labels_native.mnc\n\n        mnc2nii ${sid}__animal_labels_native.mnc ${sid}__animal_labels_native.nii\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "animal_to_convert"
        ],
        "nb_inputs": 1,
        "outputs": [
            "label_vol_to_convert"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "A__Convert_Label_Volume": {
        "name_process": "A__Convert_Label_Volume",
        "string_process": "\nprocess A__Convert_Label_Volume {\n    cpus 1\n\n    input:\n    set sid, file(label_vol)\\\n        from label_vol_to_convert\n\n    output:\n    set sid, \"${sid}__labels.nii.gz\"\\\n        into label_vol_for_rois\n\n    script:\n    \"\"\"\n    mri_convert ${label_vol} ${sid}__labels.nii.gz\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mri_convert ${label_vol} ${sid}__labels.nii.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "label_vol_to_convert"
        ],
        "nb_inputs": 1,
        "outputs": [
            "label_vol_for_rois"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "A__Surface_to_LPS": {
        "name_process": "A__Surface_to_LPS",
        "string_process": "\nprocess A__Surface_to_LPS{\n    cpus 1\n\n    input:\n    set sid, file(lh_pial), file(rh_pial), file(lh_white), file(rh_white)\\\n        from surfaces_for_lps\n\n    output:\n    set sid, \"${sid}__lh_pial_lps.vtk\", \"${sid}__rh_pial_lps.vtk\",\\\n        \"${sid}__lh_white_lps.vtk\", \"${sid}__rh_white_lps.vtk\"\\\n        into surfaces_to_concatenate\n\n    script:\n    \"\"\"\n    scil_flip_surface.py ${lh_pial} ${sid}__lh_pial_lps.vtk ${params.flip_to_lps}\n    scil_flip_surface.py ${rh_pial} ${sid}__rh_pial_lps.vtk ${params.flip_to_lps}\n    scil_flip_surface.py ${lh_white} ${sid}__lh_white_lps.vtk ${params.flip_to_lps}\n    scil_flip_surface.py ${rh_white} ${sid}__rh_white_lps.vtk ${params.flip_to_lps}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    scil_flip_surface.py ${lh_pial} ${sid}__lh_pial_lps.vtk ${params.flip_to_lps}\n    scil_flip_surface.py ${rh_pial} ${sid}__rh_pial_lps.vtk ${params.flip_to_lps}\n    scil_flip_surface.py ${lh_white} ${sid}__lh_white_lps.vtk ${params.flip_to_lps}\n    scil_flip_surface.py ${rh_white} ${sid}__rh_white_lps.vtk ${params.flip_to_lps}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "surfaces_for_lps"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surfaces_to_concatenate"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "B__Surface_Mask": {
        "name_process": "B__Surface_Mask",
        "string_process": "\nprocess B__Surface_Mask {\n    cpus 1\n\n    input:\n    set sid, file(lh_annot), file(rh_annot), file(lh_surf), file(rh_surf)\\\n        from data_for_surfaces_masks\n\n    output:\n    set sid,  \"${sid}__lh_flow_mask.npy\", \"${sid}__rh_flow_mask.npy\",\\\n        \"${sid}__lh_seed_mask.npy\", \"${sid}__rh_seed_mask.npy\",\\\n        \"${sid}__lh_intersections_mask.npy\", \"${sid}__rh_intersections_mask.npy\",\\\n        \"${sid}__lh_zero_mask.npy\", \"${sid}__rh_zero_mask.npy\"\\\n        into masks_for_concatenate\n\n    script:\n    label_tag=\"--annot\"\n    if (params.is_civet) {\n        label_tag=\"--vts_label\"\n    }\n    \"\"\"\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot}\\\n        -i ${params.flow_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__lh_flow_mask.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot}\\\n        -i ${params.flow_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__rh_flow_mask.npy\n\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot}\\\n        -i ${params.seed_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__lh_seed_mask.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot}\\\n        -i ${params.seed_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__rh_seed_mask.npy\n\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot}\\\n        -i ${params.intersections_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__lh_intersections_mask.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot}\\\n        -i ${params.intersections_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__rh_intersections_mask.npy\n\n    scil_surface.py ${lh_surf} --vts_val 0.0 --save_vts_mask ${sid}__lh_zero_mask.npy\n    scil_surface.py ${rh_surf} --vts_val 0.0 --save_vts_mask ${sid}__rh_zero_mask.npy\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    label_tag=\"--annot\"\n    if (params.is_civet) {\n        label_tag=\"--vts_label\"\n    }\n    \"\"\"\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot}\\\n        -i ${params.flow_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__lh_flow_mask.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot}\\\n        -i ${params.flow_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__rh_flow_mask.npy\n\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot}\\\n        -i ${params.seed_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__lh_seed_mask.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot}\\\n        -i ${params.seed_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__rh_seed_mask.npy\n\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot}\\\n        -i ${params.intersections_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__lh_intersections_mask.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot}\\\n        -i ${params.intersections_masked_indices} --inverse_mask\\\n        --save_vts_mask ${sid}__rh_intersections_mask.npy\n\n    scil_surface.py ${lh_surf} --vts_val 0.0 --save_vts_mask ${sid}__lh_zero_mask.npy\n    scil_surface.py ${rh_surf} --vts_val 0.0 --save_vts_mask ${sid}__rh_zero_mask.npy\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_for_surfaces_masks"
        ],
        "nb_inputs": 1,
        "outputs": [
            "masks_for_concatenate"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "B__Surface_Label": {
        "name_process": "B__Surface_Label",
        "string_process": "\nprocess B__Surface_Label {\n    cpus 1\n\n    input:\n    set sid, file(lh_surf), file(rh_surf), file(lh_annot), file(rh_annot)\\\n        from data_for_surfaces_labels\n\n    output:\n    set sid, \"${sid}__lh_labels.npy\", \"${sid}__rh_labels.npy\", \"${sid}__lh_zero_mask.npy\", \"${sid}__rh_zero_mask.npy\"\\\n        into labels_for_cocatenate\n\n    script:\n    label_tag=\" --annot \"\n    if (params.is_civet) {\n        label_tag=\" --vts_label \"\n    }\n    \"\"\"\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot} --save_vts_label ${sid}__lh_labels.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot} --save_vts_label ${sid}__rh_labels.npy\n    scil_surface.py ${lh_surf} --vts_val 0.0 --save_vts_mask ${sid}__lh_zero_mask.npy\n    scil_surface.py ${rh_surf} --vts_val 0.0 --save_vts_mask ${sid}__rh_zero_mask.npy\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    label_tag=\" --annot \"\n    if (params.is_civet) {\n        label_tag=\" --vts_label \"\n    }\n    \"\"\"\n    scil_surface.py ${lh_surf} ${label_tag} ${lh_annot} --save_vts_label ${sid}__lh_labels.npy\n    scil_surface.py ${rh_surf} ${label_tag} ${rh_annot} --save_vts_label ${sid}__rh_labels.npy\n    scil_surface.py ${lh_surf} --vts_val 0.0 --save_vts_mask ${sid}__lh_zero_mask.npy\n    scil_surface.py ${rh_surf} --vts_val 0.0 --save_vts_mask ${sid}__rh_zero_mask.npy\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_for_surfaces_labels"
        ],
        "nb_inputs": 1,
        "outputs": [
            "labels_for_cocatenate"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "B__Generate_ROI": {
        "name_process": "B__Generate_ROI",
        "string_process": "\nprocess B__Generate_ROI {\n    cpus 1\n\n    input:\n    set sid, file(vol)\\\n        from label_vol_for_rois\n\n    output:\n    set sid, \"${sid}__roi*.vtk\"\\\n        into rois_to_concatenate, rois_for_masks\n\n    script:\n    command_lines=\"\"\n    params.rois_indices.eachWithIndex{ roiString, index ->\n        command_lines +=\\\n            \"\"\"\n            scil_surface_from_volume.py $vol\\\n                ${sid}__roi${index.toString().padLeft(4, \"0\")}.vtk\\\n                --index ${roiString}\\\n                --closing ${params.rois_closing}\\\n                --opening ${params.rois_opening}\\\n                --smooth ${params.rois_smoothing}\\\n                --vox2vtk ${params.rois_params}\n            \"\"\"\n    }\n    \"\"\"\n    $command_lines\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    command_lines=\"\"\n    params.rois_indices.eachWithIndex{ roiString, index ->\n        command_lines +=\\\n            \"\"\"\n            scil_surface_from_volume.py $vol\\\n                ${sid}__roi${index.toString().padLeft(4, \"0\")}.vtk\\\n                --index ${roiString}\\\n                --closing ${params.rois_closing}\\\n                --opening ${params.rois_opening}\\\n                --smooth ${params.rois_smoothing}\\\n                --vox2vtk ${params.rois_params}\n            \"\"\"\n    }\n    \"\"\"\n    $command_lines\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "label_vol_for_rois"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rois_to_concatenate",
            "rois_for_masks"
        ],
        "nb_outputs": 2,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "B__ROI_Mask": {
        "name_process": "B__ROI_Mask",
        "string_process": "\nprocess B__ROI_Mask {\n    cpus 1\n\n    input:\n    set sid, file(map), file(rois)\\\n        from map_and_rois_for_masks\n\n    output:\n    set sid, \"${sid}__roi*_flow_mask.npy\", \"${sid}__roi*_seed_mask.npy\", \"${sid}__roi*_intersections_mask.npy\"\\\n        into rois_mask_for_concatenate\n\n    set sid, \"${sid}__roi*_intersections_mask.npy\"\\\n        into rois_labels_for_concatenate\n\n    when:\n    params.rois_seeding\n\n    script:\n    command_lines=\"\"\n    rois.each{\n        if (params.rois_seeding)\n        {\n            command_lines += \\\n                \"\"\"\n                scil_surface.py ${it} --vts_val 0.0 --save_vts_mask ${it.getSimpleName()}_flow_mask.npy \\n\n                scil_surface.py ${it} --vts_val 1.0 --save_vts_mask ${it.getSimpleName()}_intersections_mask.npy \\n\n                scil_surface_map_from_volume.py ${it} ${map} ${it.getSimpleName()}_seed_mask.npy ${params.rois_seed_params} \\n\n                \"\"\"\n        }\n        else{\n            command_lines += \\\n                \"\"\"\n                scil_surface.py ${it} --vts_val 0.0 --save_vts_mask ${it.getSimpleName()}_seed_mask.npy \\n\n                scil_surface.py ${it} --vts_val 0.0 --save_vts_mask ${it.getSimpleName()}_flow_mask.npy \\n\n                scil_surface.py ${it} --vts_val 1.0 --save_vts_mask ${it.getSimpleName()}_intersections_mask.npy \\n\n                \"\"\"\n        }\n    }\n    \"\"\"\n    ${command_lines}\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    command_lines=\"\"\n    rois.each{\n        if (params.rois_seeding)\n        {\n            command_lines += \\\n                \"\"\"\n                scil_surface.py ${it} --vts_val 0.0 --save_vts_mask ${it.getSimpleName()}_flow_mask.npy \\n\n                scil_surface.py ${it} --vts_val 1.0 --save_vts_mask ${it.getSimpleName()}_intersections_mask.npy \\n\n                scil_surface_map_from_volume.py ${it} ${map} ${it.getSimpleName()}_seed_mask.npy ${params.rois_seed_params} \\n\n                \"\"\"\n        }\n        else{\n            command_lines += \\\n                \"\"\"\n                scil_surface.py ${it} --vts_val 0.0 --save_vts_mask ${it.getSimpleName()}_seed_mask.npy \\n\n                scil_surface.py ${it} --vts_val 0.0 --save_vts_mask ${it.getSimpleName()}_flow_mask.npy \\n\n                scil_surface.py ${it} --vts_val 1.0 --save_vts_mask ${it.getSimpleName()}_intersections_mask.npy \\n\n                \"\"\"\n        }\n    }\n    \"\"\"\n    ${command_lines}\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "map_and_rois_for_masks"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rois_mask_for_concatenate",
            "rois_labels_for_concatenate"
        ],
        "nb_outputs": 2,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "params.rois_seeding",
        "stub": ""
    },
    "B__Concatenate_Surface": {
        "name_process": "B__Concatenate_Surface",
        "string_process": "\nprocess B__Concatenate_Surface {\n    cpus 1\n\n    input:\n    set sid, file(lh_pial), file(rh_pial), file(lh_white), file(rh_white), file(rois)\\\n        from surfaces_and_rois_to_concatenate\n\n    output:\n    set sid, \"${sid}__surfaces.vtk\"\\\n        into surfaces_to_warp\n    set sid, \"${sid}__surfaces_type.npy\"\\\n        into surface_type_for_set_nf\n\n    file(\"${sid}__surfaces_id.npy\")\n\n    script:\n    rois_list=\"\"\n    rois.each{\n        rois_list +=\"${it} \"\n    }\n    \"\"\"\n    scil_concatenate_surfaces.py ${lh_white} ${rh_white}\\\n        --outer_surfaces ${lh_pial} ${rh_pial}\\\n        --inner_surfaces ${rois_list}\\\n        --out_surface_id ${sid}__surfaces_id.npy\\\n        --out_surface_type_map ${sid}__surfaces_type.npy\\\n        --out_concatenated_surface ${sid}__surfaces.vtk\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    rois_list=\"\"\n    rois.each{\n        rois_list +=\"${it} \"\n    }\n    \"\"\"\n    scil_concatenate_surfaces.py ${lh_white} ${rh_white}\\\n        --outer_surfaces ${lh_pial} ${rh_pial}\\\n        --inner_surfaces ${rois_list}\\\n        --out_surface_id ${sid}__surfaces_id.npy\\\n        --out_surface_type_map ${sid}__surfaces_type.npy\\\n        --out_concatenated_surface ${sid}__surfaces.vtk\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "surfaces_and_rois_to_concatenate"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surfaces_to_warp",
            "surface_type_for_set_nf"
        ],
        "nb_outputs": 2,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "B__Concatenate_Mask": {
        "name_process": "B__Concatenate_Mask",
        "string_process": "\nprocess B__Concatenate_Mask {\n    cpus 1\n\n    input:\n    set sid, file(lh_flow_mask), file(rh_flow_mask), file(lh_seed_mask), file(rh_seed_mask),\\\n        file(lh_intersections_mask), file(rh_intersections_mask), file(lh_zero_mask), file(rh_zero_mask),\\\n        file(rois_flow_m), file(rois_seed_m), file(rois_intersections_m)\\\n            from all_masks_for_concatenate\n\n    output:\n    set sid, \"${sid}__flow_mask.npy\"\\\n        into flow_mask_for_set_nf\n    set sid, \"${sid}__seed_mask.npy\"\\\n        into seed_mask_for_set_nf\n    set sid, \"${sid}__intersections_mask.npy\"\\\n        into intersections_mask_for_set_nf\n\n    script:\n    rois_flow_masks=\"\"\n    rois_seed_masks=\"\"\n    rois_intersections_masks=\"\"\n\n    rois_flow_m.each{rois_flow_masks +=\"${it} \"}\n    rois_seed_m.each{rois_seed_masks +=\"${it} \"}\n    rois_intersections_m.each{rois_intersections_masks +=\"${it} \"}\n\n    \"\"\"\n    scil_concatenate_surfaces_map.py ${lh_flow_mask} ${rh_flow_mask}\\\n        --outer_surfaces_map ${lh_zero_mask} ${rh_zero_mask}\\\n        --inner_surfaces_map ${rois_flow_m}\\\n        --out_map ${sid}__flow_mask.npy\n    scil_concatenate_surfaces_map.py ${lh_seed_mask} ${rh_seed_mask}\\\n        --outer_surfaces_map ${lh_zero_mask} ${rh_zero_mask}\\\n        --inner_surfaces_map ${rois_seed_m}\\\n        --out_map ${sid}__seed_mask.npy\n    scil_concatenate_surfaces_map.py ${lh_intersections_mask} ${rh_intersections_mask}\\\n        --outer_surfaces_map ${lh_intersections_mask} ${rh_intersections_mask}\\\n        --inner_surfaces_map ${rois_intersections_m}\\\n        --out_map ${sid}__intersections_mask.npy\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    rois_flow_masks=\"\"\n    rois_seed_masks=\"\"\n    rois_intersections_masks=\"\"\n\n    rois_flow_m.each{rois_flow_masks +=\"${it} \"}\n    rois_seed_m.each{rois_seed_masks +=\"${it} \"}\n    rois_intersections_m.each{rois_intersections_masks +=\"${it} \"}\n\n    \"\"\"\n    scil_concatenate_surfaces_map.py ${lh_flow_mask} ${rh_flow_mask}\\\n        --outer_surfaces_map ${lh_zero_mask} ${rh_zero_mask}\\\n        --inner_surfaces_map ${rois_flow_m}\\\n        --out_map ${sid}__flow_mask.npy\n    scil_concatenate_surfaces_map.py ${lh_seed_mask} ${rh_seed_mask}\\\n        --outer_surfaces_map ${lh_zero_mask} ${rh_zero_mask}\\\n        --inner_surfaces_map ${rois_seed_m}\\\n        --out_map ${sid}__seed_mask.npy\n    scil_concatenate_surfaces_map.py ${lh_intersections_mask} ${rh_intersections_mask}\\\n        --outer_surfaces_map ${lh_intersections_mask} ${rh_intersections_mask}\\\n        --inner_surfaces_map ${rois_intersections_m}\\\n        --out_map ${sid}__intersections_mask.npy\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lh_flow_mask",
            "rh_flow_mask",
            "lh_seed_mask",
            "rh_seed_mask",
            "sid",
            "lh_intersections_mask",
            "rh_intersections_mask",
            "lh_zero_mask",
            "rh_zero_mask",
            "all_masks_for_concatenate"
        ],
        "nb_inputs": 10,
        "outputs": [
            "flow_mask_for_set_nf",
            "seed_mask_for_set_nf",
            "intersections_mask_for_set_nf"
        ],
        "nb_outputs": 3,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "B__Concatenate_Label": {
        "name_process": "B__Concatenate_Label",
        "string_process": "\nprocess B__Concatenate_Label {\n    cpus 1\n\n    input:\n    set sid, file(lh_labels), file(rh_labels), file(lh_zero), file(rh_zero), file(rois_labels)\\\n        from all_labels_for_concatenate\n\n    output:\n    set sid, \"${sid}__unique_id.npy\"\\\n        into labels_for_set_nf\n\n    file(\"${sid}__unique_id.txt\")\n\n    script:\n    rois_labels_s=\"\"\n    rois_labels.each{rois_labels_s +=\"${it} \"}\n    unused_labels_tag=\"\"\n    if (params.unused_connectivity_labels && params.unused_connectivity_labels?.trim()) {\n        unused_labels_tag=\" --indices_to_remove ${params.unused_connectivity_labels}\"\n    }\n    \"\"\"\n    scil_concatenate_surfaces_map.py ${lh_labels} ${rh_labels} \\\n        --outer_surfaces_map ${lh_zero} ${rh_zero}\\\n        --inner_surfaces_map ${rois_labels_s}\\\n        --out_map ${sid}__unique_id.npy\\\n        --unique_id\\\n        --out_id_map ${sid}__unique_id.txt\\\n        ${unused_labels_tag}\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    rois_labels_s=\"\"\n    rois_labels.each{rois_labels_s +=\"${it} \"}\n    unused_labels_tag=\"\"\n    if (params.unused_connectivity_labels && params.unused_connectivity_labels?.trim()) {\n        unused_labels_tag=\" --indices_to_remove ${params.unused_connectivity_labels}\"\n    }\n    \"\"\"\n    scil_concatenate_surfaces_map.py ${lh_labels} ${rh_labels} \\\n        --outer_surfaces_map ${lh_zero} ${rh_zero}\\\n        --inner_surfaces_map ${rois_labels_s}\\\n        --out_map ${sid}__unique_id.npy\\\n        --unique_id\\\n        --out_id_map ${sid}__unique_id.txt\\\n        ${unused_labels_tag}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_labels_for_concatenate"
        ],
        "nb_inputs": 1,
        "outputs": [
            "labels_for_set_nf"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "A__Convert_ANTs_Transformation": {
        "name_process": "A__Convert_ANTs_Transformation",
        "string_process": " process A__Convert_ANTs_Transformation {\n        cpus 1\n\n        input:\n        set sid, file(affine_transfo), file(warp_transfo)\\\n            from ants_transfo_to_convert\n\n        output:\n        set sid, \"${sid}__vtk_transfo.txt\", file(warp_transfo)\\\n            into ants_transfo_for_surfaces\n\n        script:\n        \"\"\"\n        ConvertTransformFile 3 ${affine_transfo}\\\n            ${sid}__vtk_transfo.txt --hm\n        \"\"\"\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        ConvertTransformFile 3 ${affine_transfo}\\\n            ${sid}__vtk_transfo.txt --hm\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ants_transfo_to_convert"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ants_transfo_for_surfaces"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "C__Register_Surface": {
        "name_process": "C__Register_Surface",
        "string_process": " process C__Register_Surface {\n        cpus 1\n\n        input:\n        set sid, file(affine_transfo), file(warp_transfo), file(surfaces)\\\n            from surfaces_with_transform\n\n        output:\n        set sid, \"${sid}__surfaces_b0.vtk\"\\\n            into surfaces_for_seed, surfaces_for_smooth, surfaces_for_density\n\n        script:\n        \"\"\"\n        scil_transform_surface.py ${surfaces} ${affine_transfo}\\\n            ${sid}__surfaces_b0.vtk\\\n            --ants_warp ${warp_transfo}\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        scil_transform_surface.py ${surfaces} ${affine_transfo}\\\n            ${sid}__surfaces_b0.vtk\\\n            --ants_warp ${warp_transfo}\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "surfaces_with_transform"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surfaces_for_seed",
            "surfaces_for_smooth",
            "surfaces_for_density"
        ],
        "nb_outputs": 3,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "D__Surface_Flow": {
        "name_process": "D__Surface_Flow",
        "string_process": "\nprocess D__Surface_Flow {\n    cpus 1\n\n    input:\n    set sid, file(surf), file(mask)\\\n        from data_for_surface_smooth\n\n    output:\n    set sid, \"${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.vtk\"\\\n        into surface_flow_surfaces_for_pft, surfaces_for_connectivity\n    set sid, \"${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.hdf5\"\\\n        into surface_flow_lines_for_combine\n\n    file(\"${sid}__smoothed.vtk\")\n\n    script:\n    if ((params.surf_flow_nb_step as Integer) > 1 )\n        \"\"\"\n        scil_smooth_surface.py ${surf} ${sid}__smoothed.vtk\\\n            --vts_mask ${mask}\\\n            --nb_steps ${params.surf_smooth_nb_step}\\\n            --step_size ${params.surf_smooth_step_size}\\\n\n        scil_surface_flow.py ${sid}__smoothed.vtk\\\n            ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.vtk\\\n            --vts_mask ${mask}\\\n            --nb_step ${params.surf_flow_nb_step}\\\n            --step_size ${params.surf_flow_step_size}\\\n            --subsample_flow ${params.subsample_flow}\\\n            --gaussian_threshold ${params.gaussian_threshold}\\\n            --angle_threshold ${params.angle_threshold}\\\n            --out_flow ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.hdf5\n        \"\"\"\n    else\n        \"\"\"\n        scil_smooth_surface.py ${surf} ${sid}__smoothed.vtk\\\n            --vts_mask ${mask}\\\n            --nb_steps ${params.surf_smooth_nb_step}\\\n            --step_size ${params.surf_smooth_step_size}\\\n\n        cp ${sid}__smoothed.vtk ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.vtk\n        touch ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.hdf5\n        \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    if ((params.surf_flow_nb_step as Integer) > 1 )\n        \"\"\"\n        scil_smooth_surface.py ${surf} ${sid}__smoothed.vtk\\\n            --vts_mask ${mask}\\\n            --nb_steps ${params.surf_smooth_nb_step}\\\n            --step_size ${params.surf_smooth_step_size}\\\n\n        scil_surface_flow.py ${sid}__smoothed.vtk\\\n            ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.vtk\\\n            --vts_mask ${mask}\\\n            --nb_step ${params.surf_flow_nb_step}\\\n            --step_size ${params.surf_flow_step_size}\\\n            --subsample_flow ${params.subsample_flow}\\\n            --gaussian_threshold ${params.gaussian_threshold}\\\n            --angle_threshold ${params.angle_threshold}\\\n            --out_flow ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.hdf5\n        \"\"\"\n    else\n        \"\"\"\n        scil_smooth_surface.py ${surf} ${sid}__smoothed.vtk\\\n            --vts_mask ${mask}\\\n            --nb_steps ${params.surf_smooth_nb_step}\\\n            --step_size ${params.surf_smooth_step_size}\\\n\n        cp ${sid}__smoothed.vtk ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.vtk\n        touch ${sid}__flow_${params.surf_flow_nb_step}_${params.surf_flow_step_size}.hdf5\n        \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_for_surface_smooth"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surface_flow_surfaces_for_pft",
            "surfaces_for_connectivity",
            "surface_flow_lines_for_combine"
        ],
        "nb_outputs": 3,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "E__Surface_Seeding_Map": {
        "name_process": "E__Surface_Seeding_Map",
        "string_process": "\nprocess E__Surface_Seeding_Map {\n    cpus 1\n\n    input:\n    set sid, file(surf), file(mask)\\\n        from data_rand_for_surface_seed\n\n    output:\n    set sid, \"${sid}__seeding_map_0.npy\", \"${sid}__zeros_tri_map.npy\"\\\n        into surfaces_seeding_map_for_set\n\n    script:\n    area_seeding_tag=\"\"\n    if (params.seeds_weighted_per_area) {\n        area_seeding_tag=\" --triangle_area_weighting \"\n    }\n    \"\"\"\n    scil_surface_seed_map.py ${surf}\\\n        ${sid}__seeding_map_0.npy\\\n        --vts_mask ${mask}\\\n        ${area_seeding_tag}\n\n    scil_surface_seed_map.py ${surf} ${sid}__zeros_tri_map.npy\\\n        --zeros_map\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    area_seeding_tag=\"\"\n    if (params.seeds_weighted_per_area) {\n        area_seeding_tag=\" --triangle_area_weighting \"\n    }\n    \"\"\"\n    scil_surface_seed_map.py ${surf}\\\n        ${sid}__seeding_map_0.npy\\\n        --vts_mask ${mask}\\\n        ${area_seeding_tag}\n\n    scil_surface_seed_map.py ${surf} ${sid}__zeros_tri_map.npy\\\n        --zeros_map\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_rand_for_surface_seed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "surfaces_seeding_map_for_set"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "F__Surface_Enhanced_Tractography": {
        "name_process": "F__Surface_Enhanced_Tractography",
        "string_process": "\nprocess F__Surface_Enhanced_Tractography {\n    cpus 1\n\n    input:\n    set sid, file(seed_map), file(sum_density), random_id, loop_id,\\\n        file(surf), file(fodf), file(map_exclude), file(map_include),\\\n        file(s_mask), file(s_type), file(flow)\\\n            from data_for_set\n\n    output:\n    set sid, \"${sid}__intersections_${rand_loop_id}_filtered.npz\"\\\n        into intersections_for_concatenate\n    set sid, \"${sid}__set_${rand_loop_id}_filtered.fib\"\\\n        into streamlines_for_concatenate\n    set sid, file(seed_map), \"${sid}__sum_density_${rand_loop_id}.npy\", random_id, next_id\\\n        into feedback_ch\n\n    file \"${sid}__seeding_map_${rand_loop_id}.npy\"\n    file \"${sid}__seeds_${rand_loop_id}.npz\"\n    file \"${sid}__set_density_${rand_loop_id}.npy\"\n\n    when:\n    loop_id < params.nb_dynamic_seeding_iter\n\n    script:\n    next_id = loop_id + 1\n    rand_loop_id = random_id.toString().padLeft(4, \"0\") + \"_i\" + loop_id.toString().padLeft(4, \"0\")\n\n    seed_direction_tag=\"\"\n    seed_direction_tag_inter=\"\"\n    if (params.use_seed_direction) {\n        seed_direction_tag=\"--set_dir\"\n        seed_direction_tag_inter=\"--surface_seeds ${sid}__seeds_${rand_loop_id}.npz\"\n    }\n\n    first_cut_tag=\"\"\n    if (params.use_only_first_cut) {\n        first_cut_tag=\"--only_first_cut\"\n    }\n\n    flow_line=\"cp ${sid}__cut_${rand_loop_id}.fib ${sid}__set_${rand_loop_id}.fib\"\n    if ((params.surf_flow_nb_step as Integer) > 1 ) {\n        flow_line=\"\"\" scil_surface_combine_flow.py ${surf} ${flow}\\\n                    ${sid}__intersections_${rand_loop_id}.npz\\\n                    ${sid}__cut_${rand_loop_id}.fib\\\n                    ${sid}__set_${rand_loop_id}.fib\\\n                    --compression_rate ${params.compression_rate} \"\"\"\n    }\n\n    \"\"\"\n    scil_surface_seed_map.py ${surf}\\\n        ${sid}__seeding_map_${rand_loop_id}.npy\\\n        --triangle_weight ${seed_map}\\\n        --previous_density ${sum_density}\n\n    scil_surface_seeds_from_map.py ${surf} ${sid}__seeding_map_${rand_loop_id}.npy\\\n        ${params.nb_seeds_per_random_nb}\\\n        ${sid}__seeds_${rand_loop_id}.npz\\\n        --random_number_generator ${random_id}\n\n    scil_surface_pft_dipy.py ${fodf} ${map_include} ${map_exclude} ${surf}\\\n        ${sid}__seeds_${rand_loop_id}.npz\\\n        ${sid}__set_${rand_loop_id}.trk\\\n        --algo ${params.tractography_algo}\\\n        --step ${params.tractography_step}\\\n        --theta ${params.tractography_theta}\\\n        --sfthres ${params.tractography_sfthres}\\\n        --max_length ${params.maximum_length}\\\n        --random_seed ${loop_id}\\\n        --compress ${params.compression_rate}\\\n        --particles ${params.pft_particles}\\\n        --back ${params.pft_back}\\\n        --forward ${params.pft_front}\\\n        ${seed_direction_tag}\n\n    scil_convert_tractogram.py ${sid}__set_${rand_loop_id}.trk \\\n        ${sid}__set_${rand_loop_id}.fib\n\n    scil_surface_tractogram_intersections.py ${surf}\\\n        ${sid}__set_${rand_loop_id}.fib\\\n        ${s_type} ${s_mask} ${seed_direction_tag_inter} ${first_cut_tag}\\\n        --output_intersections ${sid}__intersections_${rand_loop_id}.npz\\\n        --output_tractogram ${sid}__cut_${rand_loop_id}.fib\\\n\n    $flow_line\n\n    scil_surface_filtering.py ${surf}\\\n        ${sid}__intersections_${rand_loop_id}.npz\\\n        ${sid}__set_${rand_loop_id}.fib\\\n        ${sid}__set_${rand_loop_id}_filtered.fib\\\n        --out_intersections ${sid}__intersections_${rand_loop_id}_filtered.npz\\\n        --min_length ${params.minimum_length}\\\n        --max_length ${params.maximum_length}\n\n    scil_surface_intersections_density.py ${surf} ${sid}__intersections_${rand_loop_id}_filtered.npz\\\n        ${sid}__set_density_${rand_loop_id}.npy\n\n    scil_surface_seed_map.py ${surf} ${sid}__sum_density_${rand_loop_id}.npy\\\n        --sum_maps ${sum_density} ${sid}__set_density_${rand_loop_id}.npy\n    \"\"\"\n}",
        "nb_lignes_process": 100,
        "string_script": "    next_id = loop_id + 1\n    rand_loop_id = random_id.toString().padLeft(4, \"0\") + \"_i\" + loop_id.toString().padLeft(4, \"0\")\n\n    seed_direction_tag=\"\"\n    seed_direction_tag_inter=\"\"\n    if (params.use_seed_direction) {\n        seed_direction_tag=\"--set_dir\"\n        seed_direction_tag_inter=\"--surface_seeds ${sid}__seeds_${rand_loop_id}.npz\"\n    }\n\n    first_cut_tag=\"\"\n    if (params.use_only_first_cut) {\n        first_cut_tag=\"--only_first_cut\"\n    }\n\n    flow_line=\"cp ${sid}__cut_${rand_loop_id}.fib ${sid}__set_${rand_loop_id}.fib\"\n    if ((params.surf_flow_nb_step as Integer) > 1 ) {\n        flow_line=\"\"\" scil_surface_combine_flow.py ${surf} ${flow}\\\n                    ${sid}__intersections_${rand_loop_id}.npz\\\n                    ${sid}__cut_${rand_loop_id}.fib\\\n                    ${sid}__set_${rand_loop_id}.fib\\\n                    --compression_rate ${params.compression_rate} \"\"\"\n    }\n\n    \"\"\"\n    scil_surface_seed_map.py ${surf}\\\n        ${sid}__seeding_map_${rand_loop_id}.npy\\\n        --triangle_weight ${seed_map}\\\n        --previous_density ${sum_density}\n\n    scil_surface_seeds_from_map.py ${surf} ${sid}__seeding_map_${rand_loop_id}.npy\\\n        ${params.nb_seeds_per_random_nb}\\\n        ${sid}__seeds_${rand_loop_id}.npz\\\n        --random_number_generator ${random_id}\n\n    scil_surface_pft_dipy.py ${fodf} ${map_include} ${map_exclude} ${surf}\\\n        ${sid}__seeds_${rand_loop_id}.npz\\\n        ${sid}__set_${rand_loop_id}.trk\\\n        --algo ${params.tractography_algo}\\\n        --step ${params.tractography_step}\\\n        --theta ${params.tractography_theta}\\\n        --sfthres ${params.tractography_sfthres}\\\n        --max_length ${params.maximum_length}\\\n        --random_seed ${loop_id}\\\n        --compress ${params.compression_rate}\\\n        --particles ${params.pft_particles}\\\n        --back ${params.pft_back}\\\n        --forward ${params.pft_front}\\\n        ${seed_direction_tag}\n\n    scil_convert_tractogram.py ${sid}__set_${rand_loop_id}.trk \\\n        ${sid}__set_${rand_loop_id}.fib\n\n    scil_surface_tractogram_intersections.py ${surf}\\\n        ${sid}__set_${rand_loop_id}.fib\\\n        ${s_type} ${s_mask} ${seed_direction_tag_inter} ${first_cut_tag}\\\n        --output_intersections ${sid}__intersections_${rand_loop_id}.npz\\\n        --output_tractogram ${sid}__cut_${rand_loop_id}.fib\\\n\n    $flow_line\n\n    scil_surface_filtering.py ${surf}\\\n        ${sid}__intersections_${rand_loop_id}.npz\\\n        ${sid}__set_${rand_loop_id}.fib\\\n        ${sid}__set_${rand_loop_id}_filtered.fib\\\n        --out_intersections ${sid}__intersections_${rand_loop_id}_filtered.npz\\\n        --min_length ${params.minimum_length}\\\n        --max_length ${params.maximum_length}\n\n    scil_surface_intersections_density.py ${surf} ${sid}__intersections_${rand_loop_id}_filtered.npz\\\n        ${sid}__set_density_${rand_loop_id}.npy\n\n    scil_surface_seed_map.py ${surf} ${sid}__sum_density_${rand_loop_id}.npy\\\n        --sum_maps ${sum_density} ${sid}__set_density_${rand_loop_id}.npy\n    \"\"\"",
        "nb_lignes_script": 74,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seed_map",
            "sum_density",
            "sid",
            "surf",
            "fodf",
            "map_exclude",
            "map_include",
            "data_for_set"
        ],
        "nb_inputs": 8,
        "outputs": [
            "intersections_for_concatenate",
            "streamlines_for_concatenate",
            "feedback_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "loop_id < params.nb_dynamic_seeding_iter",
        "stub": ""
    },
    "G__Concatenate_Intersection": {
        "name_process": "G__Concatenate_Intersection",
        "string_process": "\nprocess G__Concatenate_Intersection {\n    cpus 1\n\n    input:\n    set sid, file(intersections)\\\n        from intersections_grouped_for_concatenate\n\n    output:\n    set sid, \"${sid}__set_c_filtered.npz\"\\\n        into intersections_for_connectivity, intersections_for_density\n\n    script:\n    command_lines=\"\"\n    intersections.each{\n        command_lines +=\" ${it} \"\n    }\n    \"\"\"\n    scil_concatenate_surfaces_intersections.py ${command_lines}\\\n        --output_intersections ${sid}__set_c_filtered.npz\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    command_lines=\"\"\n    intersections.each{\n        command_lines +=\" ${it} \"\n    }\n    \"\"\"\n    scil_concatenate_surfaces_intersections.py ${command_lines}\\\n        --output_intersections ${sid}__set_c_filtered.npz\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "intersections_grouped_for_concatenate"
        ],
        "nb_inputs": 1,
        "outputs": [
            "intersections_for_connectivity",
            "intersections_for_density"
        ],
        "nb_outputs": 2,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "H__Compute_Connectivity_Matrix": {
        "name_process": "H__Compute_Connectivity_Matrix",
        "string_process": "\nprocess H__Compute_Connectivity_Matrix {\n    cpus 1\n\n    input:\n    set sid, file(intersections), file(surf), file(labels)\\\n        from data_for_connectivity\n\n    output:\n    set sid, \"${sid}__set_connectivity.npy\"\\\n        into matrices_for_stats\n\n    script:\n    \"\"\"\n    scil_surface_intersections_to_connectivity.py ${surf} ${intersections} ${labels}\\\n        ${sid}__set_connectivity.npy\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_surface_intersections_to_connectivity.py ${surf} ${intersections} ${labels}\\\n        ${sid}__set_connectivity.npy\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_for_connectivity"
        ],
        "nb_inputs": 1,
        "outputs": [
            "matrices_for_stats"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "H__Compute_Surface_Density": {
        "name_process": "H__Compute_Surface_Density",
        "string_process": "\nprocess H__Compute_Surface_Density {\n    cpus 1\n\n    input:\n    set sid, file(intersections), file(surf)\\\n        from data_for_density\n\n    output:\n    set sid, \"${sid}__set_density.npy\"\\\n        into density_for_stats\n\n    script:\n    \"\"\"\n    scil_surface_intersections_density.py ${surf} ${intersections}\\\n    ${sid}__set_density.npy --normalize_l1_to 1\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_surface_intersections_density.py ${surf} ${intersections}\\\n    ${sid}__set_density.npy --normalize_l1_to 1\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_for_density"
        ],
        "nb_inputs": 1,
        "outputs": [
            "density_for_stats"
        ],
        "nb_outputs": 1,
        "name_workflow": "StongeEtienne__set-nf",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    }
}
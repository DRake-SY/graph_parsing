{
    "BuildCache_snpEff": {
        "name_process": "BuildCache_snpEff",
        "string_process": "\nprocess BuildCache_snpEff {\n  tag {snpeffDb}\n\n  publishDir params.snpEff_cache, mode: params.publishDirMode\n\n  input:\n    val snpeffDb from Channel.value(params.genomes[params.genome].snpeffDb)\n\n  output:\n    file(\"*\")\n\n  when: params.snpEff_cache && params.download_cache && !params.offline\n\n  script:\n  \"\"\"\n  snpEff download -v ${snpeffDb} -dataDir \\${PWD}\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  snpEff download -v ${snpeffDb} -dataDir \\${PWD}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "snpEff"
        ],
        "tools_url": [
            "https://bio.tools/snpeff"
        ],
        "tools_dico": [
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {snpeffDb}",
            "publishDir params.snpEff_cache, mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "BuildCache_VEP": {
        "name_process": "BuildCache_VEP",
        "string_process": "\nprocess BuildCache_VEP {\n  tag {\"${species}_${cache_version}_${genome}\"}\n\n  publishDir \"${params.vep_cache}/${species}\", mode: params.publishDirMode\n\n  input:\n    val cache_version from Channel.value(params.genomes[params.genome].vepCacheVersion)\n\n  output:\n    file(\"*\")\n\n  when: params.vep_cache && params.download_cache && !params.offline\n\n  script:\n  genome = params.genome\n  species = genome =~ \"GRCh3*\" ? \"homo_sapiens\" : genome =~ \"GRCm3*\" ? \"mus_musculus\" : \"\"\n  \"\"\"\n  vep_install \\\n    -a cf \\\n    -c . \\\n    -s ${species} \\\n    -v ${cache_version} \\\n    -y ${genome} \\\n    --CACHE_VERSION ${cache_version} \\\n    --CONVERT \\\n    --NO_HTSLIB --NO_TEST --NO_BIOPERL --NO_UPDATE\n\n  mv ${species}/* .\n  rm -rf ${species}\n  \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "  genome = params.genome\n  species = genome =~ \"GRCh3*\" ? \"homo_sapiens\" : genome =~ \"GRCm3*\" ? \"mus_musculus\" : \"\"\n  \"\"\"\n  vep_install \\\n    -a cf \\\n    -c . \\\n    -s ${species} \\\n    -v ${cache_version} \\\n    -y ${genome} \\\n    --CACHE_VERSION ${cache_version} \\\n    --CONVERT \\\n    --NO_HTSLIB --NO_TEST --NO_BIOPERL --NO_UPDATE\n\n  mv ${species}/* .\n  rm -rf ${species}\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Mgenome",
            "JSpecies"
        ],
        "tools_url": [
            "https://bio.tools/mgenome",
            "https://bio.tools/jspecies"
        ],
        "tools_dico": [
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            },
            {
                "name": "JSpecies",
                "uri": "https://bio.tools/jspecies",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolutionary biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0797",
                            "term": "Comparative genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolution"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An easy to use, biologist-centric software designed to measure the probability if two genomes belonging to the same species or not.",
                "homepage": "http://www.imedea.uib-csic.es/jspecies/index.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {\"${species}_${cache_version}_${genome}\"}",
            "publishDir \"${params.vep_cache}/${species}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "DownloadCADD": {
        "name_process": "DownloadCADD",
        "string_process": "\nprocess DownloadCADD {\n  tag {caddFile}\n\n  publishDir \"${params.cadd_cache}/${params.genome}\", mode: params.publishDirMode\n\n  input:\n    val(caddFile) from caddFileToDownload\n\n  output:\n    set file(\"*.tsv.gz\"), file(\"*.tsv.gz.tbi\")\n\n  when: params.cadd_cache && params.download_cache && !params.offline\n\n  script:\n  \"\"\"\n  wget --quiet ${caddFile}\n  wget --quiet ${caddFile}.tbi\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  wget --quiet ${caddFile}\n  wget --quiet ${caddFile}.tbi\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "caddFileToDownload"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {caddFile}",
            "publishDir \"${params.cadd_cache}/${params.genome}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "GetSoftwareVersions": {
        "name_process": "GetSoftwareVersions",
        "string_process": "\nprocess GetSoftwareVersions {\n    publishDir path:\"${params.outdir}/pipeline_info\", mode: params.publishDirMode\n\n    output:\n        file 'software_versions_mqc.yaml' into yamlSoftwareVersion\n\n    when: !('versions' in skipQC)\n\n    script:\n    \"\"\"\n    alleleCounter --version &> v_allelecount.txt  || true\n    bcftools version > v_bcftools.txt 2>&1 || true\n    bwa &> v_bwa.txt 2>&1 || true\n    configManta.py --version > v_manta.txt 2>&1 || true\n    configureStrelkaGermlineWorkflow.py --version > v_strelka.txt 2>&1 || true\n    echo \"${workflow.manifest.version}\" &> v_pipeline.txt 2>&1 || true\n    echo \"${workflow.nextflow.version}\" &> v_nextflow.txt 2>&1 || true\n    echo \"SNPEFF version\"\\$(snpEff -h 2>&1) > v_snpeff.txt\n    fastqc --version > v_fastqc.txt 2>&1 || true\n    freebayes --version > v_freebayes.txt 2>&1 || true\n    gatk ApplyBQSR --help 2>&1 | grep Version: > v_gatk.txt 2>&1 || true\n    multiqc --version &> v_multiqc.txt 2>&1 || true\n    qualimap --version &> v_qualimap.txt 2>&1 || true\n    R --version &> v_r.txt  || true\n    R -e \"library(ASCAT); help(package='ASCAT')\" &> v_ascat.txt\n    samtools --version &> v_samtools.txt 2>&1 || true\n    tiddit &> v_tiddit.txt 2>&1 || true\n    vcftools --version &> v_vcftools.txt 2>&1 || true\n    vep --help &> v_vep.txt 2>&1 || true\n\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    alleleCounter --version &> v_allelecount.txt  || true\n    bcftools version > v_bcftools.txt 2>&1 || true\n    bwa &> v_bwa.txt 2>&1 || true\n    configManta.py --version > v_manta.txt 2>&1 || true\n    configureStrelkaGermlineWorkflow.py --version > v_strelka.txt 2>&1 || true\n    echo \"${workflow.manifest.version}\" &> v_pipeline.txt 2>&1 || true\n    echo \"${workflow.nextflow.version}\" &> v_nextflow.txt 2>&1 || true\n    echo \"SNPEFF version\"\\$(snpEff -h 2>&1) > v_snpeff.txt\n    fastqc --version > v_fastqc.txt 2>&1 || true\n    freebayes --version > v_freebayes.txt 2>&1 || true\n    gatk ApplyBQSR --help 2>&1 | grep Version: > v_gatk.txt 2>&1 || true\n    multiqc --version &> v_multiqc.txt 2>&1 || true\n    qualimap --version &> v_qualimap.txt 2>&1 || true\n    R --version &> v_r.txt  || true\n    R -e \"library(ASCAT); help(package='ASCAT')\" &> v_ascat.txt\n    samtools --version &> v_samtools.txt 2>&1 || true\n    tiddit &> v_tiddit.txt 2>&1 || true\n    vcftools --version &> v_vcftools.txt 2>&1 || true\n    vep --help &> v_vep.txt 2>&1 || true\n\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "BWA",
            "FastQC",
            "FreeBayes",
            "GATK",
            "MultiQC",
            "QualiMap",
            "SAMtools",
            "TIDDIT",
            "VCFtools",
            "fivepseq"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/bwa",
            "https://bio.tools/fastqc",
            "https://bio.tools/freebayes",
            "https://bio.tools/gatk",
            "https://bio.tools/multiqc",
            "https://bio.tools/qualimap",
            "https://bio.tools/samtools",
            "https://bio.tools/tiddit",
            "https://bio.tools/vcftools",
            "https://bio.tools/fivepseq"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "FreeBayes",
                "uri": "https://bio.tools/freebayes",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bayesian genetic variant detector designed to find small polymorphisms, specifically SNPs, indels, multi-nucleotide polymorphisms, and complex events (composite insertion and substitution events) smaller than the length of a short-read sequencing alignment.",
                "homepage": "https://github.com/ekg/freebayes"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            },
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "TIDDIT",
                "uri": "https://bio.tools/tiddit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Efficient and comprehensive structural variant caller for massive parallel sequencing data. Identify chromosomal rearrangements using Mate Pair or Paired End sequencing data. It allows identification of intra and inter-chromosomal translocations, deletions, tandem-duplications and inversions, using supplementary alignments as well as discordant pairs.",
                "homepage": "https://github.com/J35P312/TIDDIT"
            },
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            },
            {
                "name": "fivepseq",
                "uri": "https://bio.tools/fivepseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3563",
                                    "term": "RNA-seq read count analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fivepseq is a software package for analysis of 5prime endpoints distribution in RNA sequencing datasets. This is particularly useful for techniques that capture 5prime  monophosphorylated RNAs, such as 5PSeq, PARE-seq or GMUC. It may also be useful for ribosome profiling datasets and alike.",
                "homepage": "http://pelechanolab.com/software/fivepseq"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "yamlSoftwareVersion"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "publishDir path:\"${params.outdir}/pipeline_info\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "BuildBWAindexes": {
        "name_process": "BuildBWAindexes",
        "string_process": "\nprocess BuildBWAindexes {\n    tag {fasta}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/BWAIndex/${it}\" : null }\n\n    input:\n        file(fasta) from ch_fasta\n\n    output:\n        file(\"${fasta}.*\") into bwaIndexes\n\n    when: !(params.bwaIndex) && params.fasta && 'mapping' in step\n\n    script:\n    \"\"\"\n    bwa index ${fasta}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bwa index ${fasta}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bwaIndexes"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {fasta}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/BWAIndex/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildDict": {
        "name_process": "BuildDict",
        "string_process": "\nprocess BuildDict {\n    label 'cpus_1'\n    tag {fasta}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n    input:\n        file(fasta) from ch_fasta\n\n    output:\n        file(\"${fasta.baseName}.dict\") into dictBuilt\n\n    when: !(params.dict) && params.fasta && !('annotate' in step)\n\n    script:\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        CreateSequenceDictionary \\\n        --REFERENCE ${fasta} \\\n        --OUTPUT ${fasta.baseName}.dict\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        CreateSequenceDictionary \\\n        --REFERENCE ${fasta} \\\n        --OUTPUT ${fasta.baseName}.dict\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dictBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {fasta}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildFastaFai": {
        "name_process": "BuildFastaFai",
        "string_process": "\nprocess BuildFastaFai {\n    tag {fasta}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n    input:\n        file(fasta) from ch_fasta\n\n    output:\n        file(\"${fasta}.fai\") into fastaFaiBuilt\n\n    when: !(params.fastaFai) && params.fasta && !('annotate' in step)\n\n    script:\n    \"\"\"\n    samtools faidx ${fasta}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    samtools faidx ${fasta}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastaFaiBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {fasta}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildDbsnpIndex": {
        "name_process": "BuildDbsnpIndex",
        "string_process": "\nprocess BuildDbsnpIndex {\n    tag {dbsnp}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n    input:\n        file(dbsnp) from ch_dbsnp\n\n    output:\n        file(\"${dbsnp}.tbi\") into dbsnpIndexBuilt\n\n    when: !(params.dbsnpIndex) && params.dbsnp && ('mapping' in step || 'controlfreec' in tools || 'haplotypecaller' in tools || 'mutect2' in tools)\n\n    script:\n    \"\"\"\n    tabix -p vcf ${dbsnp}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    tabix -p vcf ${dbsnp}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_dbsnp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dbsnpIndexBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {dbsnp}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildGermlineResourceIndex": {
        "name_process": "BuildGermlineResourceIndex",
        "string_process": "\nprocess BuildGermlineResourceIndex {\n    tag {germlineResource}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n    input:\n        file(germlineResource) from ch_germlineResource\n\n    output:\n        file(\"${germlineResource}.tbi\") into germlineResourceIndexBuilt\n\n    when: !(params.germlineResourceIndex) && params.germlineResource && 'mutect2' in tools\n\n    script:\n    \"\"\"\n    tabix -p vcf ${germlineResource}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    tabix -p vcf ${germlineResource}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_germlineResource"
        ],
        "nb_inputs": 1,
        "outputs": [
            "germlineResourceIndexBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {germlineResource}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildKnownIndelsIndex": {
        "name_process": "BuildKnownIndelsIndex",
        "string_process": "\nprocess BuildKnownIndelsIndex {\n    tag {knownIndels}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n    input:\n        each file(knownIndels) from ch_knownIndels\n\n    output:\n        file(\"${knownIndels}.tbi\") into knownIndelsIndexBuilt\n\n    when: !(params.knownIndelsIndex) && params.knownIndels && 'mapping' in step\n\n    script:\n    \"\"\"\n    tabix -p vcf ${knownIndels}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    tabix -p vcf ${knownIndels}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_knownIndels"
        ],
        "nb_inputs": 1,
        "outputs": [
            "knownIndelsIndexBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {knownIndels}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildPonIndex": {
        "name_process": "BuildPonIndex",
        "string_process": "\nprocess BuildPonIndex {\n    tag {pon}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n    input:\n        file(pon) from ch_pon\n\n    output:\n        file(\"${pon}.tbi\") into ponIndexBuilt\n\n    when: !(params.pon_index) && params.pon && ('tnscope' in tools || 'mutect2' in tools)\n\n    script:\n    \"\"\"\n    tabix -p vcf ${pon}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    tabix -p vcf ${pon}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_pon"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ponIndexBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {pon}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "BuildIntervals": {
        "name_process": "BuildIntervals",
        "string_process": "\nprocess BuildIntervals {\n  tag {fastaFai}\n\n  publishDir params.outdir, mode: params.publishDirMode,\n    saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }\n\n  input:\n    file(fastaFai) from ch_fastaFai\n\n  output:\n    file(\"${fastaFai.baseName}.bed\") into intervalBuilt\n\n  when: !(params.intervals) && !('annotate' in step) && !(params.no_intervals)\n\n  script:\n  \"\"\"\n  awk -v FS='\\t' -v OFS='\\t' '{ print \\$1, \\\"0\\\", \\$2 }' ${fastaFai} > ${fastaFai.baseName}.bed\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  awk -v FS='\\t' -v OFS='\\t' '{ print \\$1, \\\"0\\\", \\$2 }' ${fastaFai} > ${fastaFai.baseName}.bed\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fastaFai"
        ],
        "nb_inputs": 1,
        "outputs": [
            "intervalBuilt"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {fastaFai}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: {params.saveGenomeIndex ? \"reference_genome/${it}\" : null }"
        ],
        "when": "",
        "stub": ""
    },
    "CreateIntervalBeds": {
        "name_process": "CreateIntervalBeds",
        "string_process": "\nprocess CreateIntervalBeds {\n    tag {intervals.fileName}\n\n    input:\n        file(intervals) from ch_intervals\n\n    output:\n        file '*.bed' into bedIntervals mode flatten\n\n    when: (!params.no_intervals) && step != 'annotate'\n\n    script:\n                                                                             \n                                                                                  \n    if (hasExtension(intervals, \"bed\"))\n        \"\"\"\n        awk -vFS=\"\\t\" '{\n          t = \\$5  # runtime estimate\n          if (t == \"\") {\n            # no runtime estimate in this row, assume default value\n            t = (\\$3 - \\$2) / ${params.nucleotidesPerSecond}\n          }\n          if (name == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n            # start a new chunk\n            name = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n            chunk = 0\n            longest = 0\n          }\n          if (t > longest)\n            longest = t\n          chunk += t\n          print \\$0 > name\n        }' ${intervals}\n        \"\"\"\n    else if (hasExtension(intervals, \"interval_list\"))\n        \"\"\"\n        grep -v '^@' ${intervals} | awk -vFS=\"\\t\" '{\n          name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n          printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }'\n        \"\"\"\n    else\n        \"\"\"\n        awk -vFS=\"[:-]\" '{\n          name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n          printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }' ${intervals}\n        \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    if (hasExtension(intervals, \"bed\"))\n        \"\"\"\n        awk -vFS=\"\\t\" '{\n          t = \\$5  # runtime estimate\n          if (t == \"\") {\n            # no runtime estimate in this row, assume default value\n            t = (\\$3 - \\$2) / ${params.nucleotidesPerSecond}\n          }\n          if (name == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n            # start a new chunk\n            name = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n            chunk = 0\n            longest = 0\n          }\n          if (t > longest)\n            longest = t\n          chunk += t\n          print \\$0 > name\n        }' ${intervals}\n        \"\"\"\n    else if (hasExtension(intervals, \"interval_list\"))\n        \"\"\"\n        grep -v '^@' ${intervals} | awk -vFS=\"\\t\" '{\n          name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n          printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }'\n        \"\"\"\n    else\n        \"\"\"\n        awk -vFS=\"[:-]\" '{\n          name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n          printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }' ${intervals}\n        \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "goname"
        ],
        "tools_url": [
            "https://bio.tools/goname"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            }
        ],
        "inputs": [
            "ch_intervals"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bedIntervals"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {intervals.fileName}"
        ],
        "when": "",
        "stub": ""
    },
    "FastQCFQ": {
        "name_process": "FastQCFQ",
        "string_process": "\nprocess FastQCFQ {\n    label 'FastQC'\n    label 'cpus_2'\n\n    tag {idPatient + \"-\" + idRun}\n\n    publishDir \"${params.outdir}/Reports/${idSample}/FastQC/${idSample}_${idRun}\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, idRun, file(\"${idSample}_${idRun}_R1.fastq.gz\"), file(\"${idSample}_${idRun}_R2.fastq.gz\") from inputPairReadsFastQC\n\n    output:\n        file(\"*.{html,zip}\") into fastQCFQReport\n\n    when: !('fastqc' in skipQC)\n    \n    script:\n    \"\"\"\n    fastqc -t 2 -q ${idSample}_${idRun}_R1.fastq.gz ${idSample}_${idRun}_R2.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    fastqc -t 2 -q ${idSample}_${idRun}_R1.fastq.gz ${idSample}_${idRun}_R2.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "inputPairReadsFastQC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastQCFQReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'FastQC'",
            "label 'cpus_2'",
            "tag {idPatient + \"-\" + idRun}",
            "publishDir \"${params.outdir}/Reports/${idSample}/FastQC/${idSample}_${idRun}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "FastQCBAM": {
        "name_process": "FastQCBAM",
        "string_process": "\nprocess FastQCBAM {\n    label 'FastQC'\n    label 'cpus_2'\n\n    tag {idPatient + \"-\" + idRun}\n\n    publishDir \"${params.outdir}/Reports/${idSample}/FastQC/${idSample}_${idRun}\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, idRun, file(\"${idSample}_${idRun}.bam\") from inputBamFastQC\n\n    output:\n        file(\"*.{html,zip}\") into fastQCBAMReport\n\n    when: !('fastqc' in skipQC)\n\n    script:\n    \"\"\"\n    fastqc -t 2 -q ${idSample}_${idRun}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    fastqc -t 2 -q ${idSample}_${idRun}.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "inputBamFastQC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastQCBAMReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'FastQC'",
            "label 'cpus_2'",
            "tag {idPatient + \"-\" + idRun}",
            "publishDir \"${params.outdir}/Reports/${idSample}/FastQC/${idSample}_${idRun}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "MapReads": {
        "name_process": "MapReads",
        "string_process": "\nprocess MapReads {\n    label 'cpus_max'\n    label 'memory_max'\n    echo true\n\n    tag {idPatient + \"-\" + idRun}\n\n    input:\n        set idPatient, idSample, idRun, file(inputFile1), file(inputFile2) from inputPairReads\n        file(bwaIndex) from ch_bwaIndex\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSample, idRun, file(\"${idSample}_${idRun}.bam\") into bamMapped\n        set idPatient, val(\"${idSample}_${idRun}\"), file(\"${idSample}_${idRun}.bam\") into bamMappedBamQC\n\n    script:\n                                                                                   \n                                                           \n                                                                                \n                                                                                          \n                                                                                                                                                                               \n    CN = params.sequencing_center ? \"CN:${params.sequencing_center}\\\\t\" : \"\"\n    readGroup = \"@RG\\\\tID:${idRun}\\\\t${CN}PU:${idRun}\\\\tSM:${idSample}\\\\tLB:${idSample}\\\\tPL:illumina\"\n                                                \n    status = statusMap[idPatient, idSample]\n    extra = status == 1 ? \"-B 3\" : \"\"\n    convertToFastq = hasExtension(inputFile1, \"bam\") ? \"gatk --java-options -Xmx${task.memory.toGiga()}g SamToFastq --INPUT=${inputFile1} --FASTQ=/dev/stdout --INTERLEAVE=true --NON_PF=true | \\\\\" : \"\"\n    input = hasExtension(inputFile1, \"bam\") ? \"-p /dev/stdin - 2> >(tee ${inputFile1}.bwa.stderr.log >&2)\" : \"${inputFile1} ${inputFile2}\"\n                                                                                              \n                                                                         \n    bwa_cpus  = !params.bwa_cpus_fraction ? task.cpus : Math.floor ( params.bwa_cpus_fraction * task.cpus) as Integer\n    sort_cpus = !params.bwa_cpus_fraction ? task.cpus : task.cpus - bwa_cpus\n    \"\"\"\n    echo 'bwa_cpus:'  ${bwa_cpus}\n    echo 'sort_cpus:' ${sort_cpus}\n\n        ${convertToFastq}\n        bwa mem -k 23 -K 100000000 -R \\\"${readGroup}\\\" ${extra} -t ${bwa_cpus} -M ${fasta} \\\n        ${input} | \\\n        samtools sort --threads ${sort_cpus}  - > ${idSample}_${idRun}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    CN = params.sequencing_center ? \"CN:${params.sequencing_center}\\\\t\" : \"\"\n    readGroup = \"@RG\\\\tID:${idRun}\\\\t${CN}PU:${idRun}\\\\tSM:${idSample}\\\\tLB:${idSample}\\\\tPL:illumina\"\n                                                \n    status = statusMap[idPatient, idSample]\n    extra = status == 1 ? \"-B 3\" : \"\"\n    convertToFastq = hasExtension(inputFile1, \"bam\") ? \"gatk --java-options -Xmx${task.memory.toGiga()}g SamToFastq --INPUT=${inputFile1} --FASTQ=/dev/stdout --INTERLEAVE=true --NON_PF=true | \\\\\" : \"\"\n    input = hasExtension(inputFile1, \"bam\") ? \"-p /dev/stdin - 2> >(tee ${inputFile1}.bwa.stderr.log >&2)\" : \"${inputFile1} ${inputFile2}\"\n                                                                                              \n                                                                         \n    bwa_cpus  = !params.bwa_cpus_fraction ? task.cpus : Math.floor ( params.bwa_cpus_fraction * task.cpus) as Integer\n    sort_cpus = !params.bwa_cpus_fraction ? task.cpus : task.cpus - bwa_cpus\n    \"\"\"\n    echo 'bwa_cpus:'  ${bwa_cpus}\n    echo 'sort_cpus:' ${sort_cpus}\n\n        ${convertToFastq}\n        bwa mem -k 23 -K 100000000 -R \\\"${readGroup}\\\" ${extra} -t ${bwa_cpus} -M ${fasta} \\\n        ${input} | \\\n        samtools sort --threads ${sort_cpus}  - > ${idSample}_${idRun}.bam\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "CNN",
            "EXTRACT",
            "wossinput",
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/CNN",
            "https://bio.tools/extract",
            "https://bio.tools/wossinput",
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "CNN",
                "uri": "https://bio.tools/CNN",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3318",
                            "term": "Physics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convolutional neural network for efficient estimation of regional brain strains.\n\nThree pretrained CNN neural network models are provided based on all of the brain response samples available in the published study (N=3069). They correspond to the peak maximum principal strain (MPS) of the whole brain (WB), MPS of the corpus callosum (CC), and fiber strain (FS) of the CC, all assessed at the 95th percentile levels",
                "homepage": "https://github.com/Jilab-biomechanics/CNN-brain-strains"
            },
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            },
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "inputPairReads",
            "ch_bwaIndex",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 4,
        "outputs": [
            "bamMapped",
            "bamMappedBamQC"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "echo true",
            "tag {idPatient + \"-\" + idRun}"
        ],
        "when": "",
        "stub": ""
    },
    "SentieonMapReads": {
        "name_process": "SentieonMapReads",
        "string_process": "\nprocess SentieonMapReads {\n    label 'cpus_max'\n    label 'memory_max'\n    label 'sentieon'\n\n    tag {idPatient + \"-\" + idRun}\n\n    input:\n        set idPatient, idSample, idRun, file(inputFile1), file(inputFile2) from inputPairReadsSentieon\n        file(bwaIndex) from ch_bwaIndex\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSample, idRun, file(\"${idSample}_${idRun}.bam\") into bamMappedSentieon\n        set idPatient, idSample, file(\"${idSample}_${idRun}.bam\") into bamMappedSentieonBamQC\n\n    when: params.sentieon\n\n    script:\n                                                                                   \n                                                           \n                                                                                \n                                                                                          \n                                                                                                                                                                               \n    CN = params.sequencing_center ? \"CN:${params.sequencing_center}\\\\t\" : \"\"\n    readGroup = \"@RG\\\\tID:${idRun}\\\\t${CN}PU:${idRun}\\\\tSM:${idSample}\\\\tLB:${idSample}\\\\tPL:illumina\"\n                                                \n    status = statusMap[idPatient, idSample]\n    extra = status == 1 ? \"-B 3\" : \"\"\n    \"\"\"\n    sentieon bwa mem -K 100000000 -R \\\"${readGroup}\\\" ${extra} -t ${task.cpus} -M ${fasta} \\\n    ${inputFile1} ${inputFile2} | \\\n    sentieon util sort -r ${fasta} -o ${idSample}_${idRun}.bam -t ${task.cpus} --sam2bam -i - \n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    CN = params.sequencing_center ? \"CN:${params.sequencing_center}\\\\t\" : \"\"\n    readGroup = \"@RG\\\\tID:${idRun}\\\\t${CN}PU:${idRun}\\\\tSM:${idSample}\\\\tLB:${idSample}\\\\tPL:illumina\"\n                                                \n    status = statusMap[idPatient, idSample]\n    extra = status == 1 ? \"-B 3\" : \"\"\n    \"\"\"\n    sentieon bwa mem -K 100000000 -R \\\"${readGroup}\\\" ${extra} -t ${task.cpus} -M ${fasta} \\\n    ${inputFile1} ${inputFile2} | \\\n    sentieon util sort -r ${fasta} -o ${idSample}_${idRun}.bam -t ${task.cpus} --sam2bam -i - \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "CNN",
            "EXTRACT"
        ],
        "tools_url": [
            "https://bio.tools/CNN",
            "https://bio.tools/extract"
        ],
        "tools_dico": [
            {
                "name": "CNN",
                "uri": "https://bio.tools/CNN",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3318",
                            "term": "Physics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convolutional neural network for efficient estimation of regional brain strains.\n\nThree pretrained CNN neural network models are provided based on all of the brain response samples available in the published study (N=3069). They correspond to the peak maximum principal strain (MPS) of the whole brain (WB), MPS of the corpus callosum (CC), and fiber strain (FS) of the CC, all assessed at the 95th percentile levels",
                "homepage": "https://github.com/Jilab-biomechanics/CNN-brain-strains"
            },
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            }
        ],
        "inputs": [
            "inputPairReadsSentieon",
            "ch_bwaIndex",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 4,
        "outputs": [
            "bamMappedSentieon",
            "bamMappedSentieonBamQC"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "label 'sentieon'",
            "tag {idPatient + \"-\" + idRun}"
        ],
        "when": "",
        "stub": ""
    },
    "MergeBamMapped": {
        "name_process": "MergeBamMapped",
        "string_process": "\nprocess MergeBamMapped {\n    label 'cpus_4'\n\n    tag {idPatient + \"-\" + idSample}\n\n    input:\n        set idPatient, idSample, idRun, file(bam) from multipleBam\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.bam\") into mergedBam\n\n    script:\n    \"\"\"\n    samtools merge --threads ${task.cpus} ${idSample}.bam ${bam}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    samtools merge --threads ${task.cpus} ${idSample}.bam ${bam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "multipleBam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mergedBam"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_4'",
            "tag {idPatient + \"-\" + idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "IndexBamMergedForSentieon": {
        "name_process": "IndexBamMergedForSentieon",
        "string_process": "\nprocess IndexBamMergedForSentieon {\n    label 'cpus_4'\n\n    tag {idPatient + \"-\" + idSample}\n\n    input:\n        set idPatient, idSample, file(bam) from mergedBamForSentieon\n\n    output:\n        set idPatient, idSample, file(bam), file(\"${idSample}.bam.bai\") into bamForSentieonDedup\n\n    script:\n    \"\"\"\n    samtools index ${bam}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    samtools index ${bam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mergedBamForSentieon"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamForSentieonDedup"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_4'",
            "tag {idPatient + \"-\" + idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "IndexBamFile": {
        "name_process": "IndexBamFile",
        "string_process": "\nprocess IndexBamFile {\n    label 'cpus_4'\n\n    tag {idPatient + \"-\" + idSample}\n\n    input:\n        set idPatient, idSample, file(bam) from mergedBamToIndex\n\n    output:\n        set idPatient, idSample, file(bam), file(\"*.bai\") into indexedBam\n\n    when: !params.knownIndels\n\n    script:\n    \"\"\"\n    samtools index ${bam}\n    mv ${bam}.bai ${bam.baseName}.bai\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    samtools index ${bam}\n    mv ${bam}.bai ${bam.baseName}.bai\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mergedBamToIndex"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indexedBam"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_4'",
            "tag {idPatient + \"-\" + idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "MarkDuplicates": {
        "name_process": "MarkDuplicates",
        "string_process": "\nprocess MarkDuplicates {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idPatient + \"-\" + idSample}\n\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {\n            if (it == \"${idSample}.bam.metrics\" && 'markduplicates' in skipQC) null\n            else if (it == \"${idSample}.bam.metrics\") \"Reports/${idSample}/MarkDuplicates/${it}\"\n            else \"Preprocessing/${idSample}/DuplicateMarked/${it}\"\n        }\n\n    input:\n        set idPatient, idSample, file(\"${idSample}.bam\") from mergedBam\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.md.bam\"), file(\"${idSample}.md.bai\") into duplicateMarkedBams\n        file (\"${idSample}.bam.metrics\") into markDuplicatesReport\n\n    when: params.knownIndels\n\n    script:\n    markdup_java_options = task.memory.toGiga() > 8 ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n    \"\"\"\n    gatk --java-options ${markdup_java_options} \\\n        MarkDuplicates \\\n        --MAX_RECORDS_IN_RAM 50000 \\\n        --INPUT ${idSample}.bam \\\n        --METRICS_FILE ${idSample}.bam.metrics \\\n        --TMP_DIR . \\\n        --ASSUME_SORT_ORDER coordinate \\\n        --CREATE_INDEX true \\\n        --OUTPUT ${idSample}.md.bam\n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    markdup_java_options = task.memory.toGiga() > 8 ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n    \"\"\"\n    gatk --java-options ${markdup_java_options} \\\n        MarkDuplicates \\\n        --MAX_RECORDS_IN_RAM 50000 \\\n        --INPUT ${idSample}.bam \\\n        --METRICS_FILE ${idSample}.bam.metrics \\\n        --TMP_DIR . \\\n        --ASSUME_SORT_ORDER coordinate \\\n        --CREATE_INDEX true \\\n        --OUTPUT ${idSample}.md.bam\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "GATK",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/gatk",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "mergedBam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "duplicateMarkedBams",
            "markDuplicatesReport"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: { if (it == \"${idSample}.bam.metrics\" && 'markduplicates' in skipQC) null else if (it == \"${idSample}.bam.metrics\") \"Reports/${idSample}/MarkDuplicates/${it}\" else \"Preprocessing/${idSample}/DuplicateMarked/${it}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SentieonDedup": {
        "name_process": "SentieonDedup",
        "string_process": "\nprocess SentieonDedup {\n    label 'cpus_max'\n    label 'memory_max'\n    label 'sentieon'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {\n            if (it == \"${idSample}_*.txt\" && 'sentieon' in skipQC) null\n            else if (it == \"${idSample}_*.txt\") \"Reports/${idSample}/Sentieon/${it}\"\n            else null\n        }\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamForSentieonDedup\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.deduped.bam\"), file(\"${idSample}.deduped.bam.bai\") into bamDedupedSentieon\n        file(\"${idSample}_*.txt\") into bamDedupedSentieonQC\n\n    when: params.sentieon\n\n    script:\n    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -i ${bam} \\\n        -r ${fasta} \\\n        --algo GCBias --summary ${idSample}_gc_summary.txt ${idSample}_gc_metric.txt \\\n        --algo MeanQualityByCycle ${idSample}_mq_metric.txt \\\n        --algo QualDistribution ${idSample}_qd_metric.txt \\\n        --algo InsertSizeMetricAlgo ${idSample}_is_metric.txt  \\\n        --algo AlignmentStat ${idSample}_aln_metric.txt\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -i ${bam} \\\n        --algo LocusCollector \\\n        --fun score_info ${idSample}_score.gz\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -i ${bam} \\\n        --algo Dedup \\\n        --rmdup \\\n        --score_info ${idSample}_score.gz  \\\n        --metrics ${idSample}_dedup_metric.txt ${idSample}.deduped.bam\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -i ${bam} \\\n        -r ${fasta} \\\n        --algo GCBias --summary ${idSample}_gc_summary.txt ${idSample}_gc_metric.txt \\\n        --algo MeanQualityByCycle ${idSample}_mq_metric.txt \\\n        --algo QualDistribution ${idSample}_qd_metric.txt \\\n        --algo InsertSizeMetricAlgo ${idSample}_is_metric.txt  \\\n        --algo AlignmentStat ${idSample}_aln_metric.txt\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -i ${bam} \\\n        --algo LocusCollector \\\n        --fun score_info ${idSample}_score.gz\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -i ${bam} \\\n        --algo Dedup \\\n        --rmdup \\\n        --score_info ${idSample}_score.gz  \\\n        --metrics ${idSample}_dedup_metric.txt ${idSample}.deduped.bam\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamForSentieonDedup",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "bamDedupedSentieon",
            "bamDedupedSentieonQC"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "label 'sentieon'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: { if (it == \"${idSample}_*.txt\" && 'sentieon' in skipQC) null else if (it == \"${idSample}_*.txt\") \"Reports/${idSample}/Sentieon/${it}\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "BaseRecalibrator": {
        "name_process": "BaseRecalibrator",
        "string_process": "\nprocess BaseRecalibrator {\n    label 'cpus_1'\n\n    tag {idPatient + \"-\" + idSample + \"-\" + intervalBed.baseName}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai), file(intervalBed) from bamBaseRecalibrator\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(fasta) from ch_fasta\n        file(dict) from ch_dict\n        file(fastaFai) from ch_fastaFai\n        file(knownIndels) from ch_knownIndels\n        file(knownIndelsIndex) from ch_knownIndelsIndex\n\n    output:\n        set idPatient, idSample, file(\"${prefix}${idSample}.recal.table\") into tableGatherBQSRReports\n        set idPatient, idSample into recalTableTSVnoInt\n\n    when: params.knownIndels\n\n    script:\n    dbsnpOptions = params.dbsnp ? \"--known-sites ${dbsnp}\" : \"\"\n    knownOptions = params.knownIndels ? knownIndels.collect{\"--known-sites ${it}\"}.join(' ') : \"\"\n    prefix = params.no_intervals ? \"\" : \"${intervalBed.baseName}_\"\n    intervalsOptions = params.no_intervals ? \"\" : \"-L ${intervalBed}\"\n                                         \n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        BaseRecalibrator \\\n        -I ${bam} \\\n        -O ${prefix}${idSample}.recal.table \\\n        --tmp-dir /tmp \\\n        -R ${fasta} \\\n        ${intervalsOptions} \\\n        ${dbsnpOptions} \\\n        ${knownOptions} \\\n        --verbosity INFO\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    dbsnpOptions = params.dbsnp ? \"--known-sites ${dbsnp}\" : \"\"\n    knownOptions = params.knownIndels ? knownIndels.collect{\"--known-sites ${it}\"}.join(' ') : \"\"\n    prefix = params.no_intervals ? \"\" : \"${intervalBed.baseName}_\"\n    intervalsOptions = params.no_intervals ? \"\" : \"-L ${intervalBed}\"\n                                         \n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        BaseRecalibrator \\\n        -I ${bam} \\\n        -O ${prefix}${idSample}.recal.table \\\n        --tmp-dir /tmp \\\n        -R ${fasta} \\\n        ${intervalsOptions} \\\n        ${dbsnpOptions} \\\n        ${knownOptions} \\\n        --verbosity INFO\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bamBaseRecalibrator",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_fasta",
            "ch_dict",
            "ch_fastaFai",
            "ch_knownIndels",
            "ch_knownIndelsIndex"
        ],
        "nb_inputs": 8,
        "outputs": [
            "tableGatherBQSRReports",
            "recalTableTSVnoInt"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idPatient + \"-\" + idSample + \"-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "GatherBQSRReports": {
        "name_process": "GatherBQSRReports",
        "string_process": "\nprocess GatherBQSRReports {\n\n    label 'cpus_1'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir \"${params.outdir}/Preprocessing/${idSample}/DuplicateMarked\", mode: params.publishDirMode, overwrite: false\n\n    input:\n        set idPatient, idSample, file(recal) from tableGatherBQSRReports\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.recal.table\") into recalTable\n        set idPatient, idSample into recalTableTSV\n\n    when: !(params.no_intervals)\n\n    script:\n    input = recal.collect{\"-I ${it}\"}.join(' ')\n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        GatherBQSRReports \\\n        ${input} \\\n        -O ${idSample}.recal.table \\\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    input = recal.collect{\"-I ${it}\"}.join(' ')\n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        GatherBQSRReports \\\n        ${input} \\\n        -O ${idSample}.recal.table \\\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "tableGatherBQSRReports"
        ],
        "nb_inputs": 1,
        "outputs": [
            "recalTable",
            "recalTableTSV"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outdir}/Preprocessing/${idSample}/DuplicateMarked\", mode: params.publishDirMode, overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "ApplyBQSR": {
        "name_process": "ApplyBQSR",
        "string_process": "\nprocess ApplyBQSR {\n\n    label 'cpus_1'\n\n    tag {idPatient + \"-\" + idSample + \"-\" + intervalBed.baseName}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai), file(recalibrationReport), file(intervalBed) from bamApplyBQSR\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSample, file(\"${prefix}${idSample}.recal.bam\") into bamMergeBamRecal\n\n    script:\n    prefix = params.no_intervals ? \"\" : \"${intervalBed.baseName}_\"\n    intervalsOptions = params.no_intervals ? \"\" : \"-L ${intervalBed}\"\n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        ApplyBQSR \\\n        -R ${fasta} \\\n        --input ${bam} \\\n        --output ${prefix}${idSample}.recal.bam \\\n        ${intervalsOptions} \\\n        --bqsr-recal-file ${recalibrationReport}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    prefix = params.no_intervals ? \"\" : \"${intervalBed.baseName}_\"\n    intervalsOptions = params.no_intervals ? \"\" : \"-L ${intervalBed}\"\n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        ApplyBQSR \\\n        -R ${fasta} \\\n        --input ${bam} \\\n        --output ${prefix}${idSample}.recal.bam \\\n        ${intervalsOptions} \\\n        --bqsr-recal-file ${recalibrationReport}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bamApplyBQSR",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 4,
        "outputs": [
            "bamMergeBamRecal"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idPatient + \"-\" + idSample + \"-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "SentieonBQSR": {
        "name_process": "SentieonBQSR",
        "string_process": "\nprocess SentieonBQSR {\n    label 'cpus_max'\n    label 'memory_max'\n    label 'sentieon'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {\n            if (it == \"${idSample}_recal_result.csv\" && 'sentieon' in skipQC) \"Reports/${idSample}/Sentieon/${it}\"\n            else \"Preprocessing/${idSample}/RecalSentieon/${it}\"\n        }\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamDedupedSentieon\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(fasta) from ch_fasta\n        file(dict) from ch_dict\n        file(fastaFai) from ch_fastaFai\n        file(knownIndels) from ch_knownIndels\n        file(knownIndelsIndex) from ch_knownIndelsIndex\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.recal.bam\"), file(\"${idSample}.recal.bam.bai\") into bamRecalSentieon \n        set idPatient, idSample into bamRecalSentieonTSV\n        file(\"${idSample}_recal_result.csv\") into bamRecalSentieonQC\n\n    when: params.sentieon\n\n    script:\n    known = knownIndels.collect{\"--known-sites ${it}\"}.join(' ')\n    \"\"\"\n    sentieon driver  \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${idSample}.deduped.bam \\\n        --algo QualCal \\\n        -k ${dbsnp} \\\n        ${idSample}.recal.table\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${idSample}.deduped.bam \\\n        -q ${idSample}.recal.table \\\n        --algo QualCal \\\n        -k ${dbsnp} \\\n        ${idSample}.table.post \\\n        --algo ReadWriter ${idSample}.recal.bam\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        --algo QualCal \\\n        --plot \\\n        --before ${idSample}.recal.table \\\n        --after ${idSample}.table.post \\\n        ${idSample}_recal_result.csv\n    \"\"\"\n}",
        "nb_lignes_process": 59,
        "string_script": "    known = knownIndels.collect{\"--known-sites ${it}\"}.join(' ')\n    \"\"\"\n    sentieon driver  \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${idSample}.deduped.bam \\\n        --algo QualCal \\\n        -k ${dbsnp} \\\n        ${idSample}.recal.table\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${idSample}.deduped.bam \\\n        -q ${idSample}.recal.table \\\n        --algo QualCal \\\n        -k ${dbsnp} \\\n        ${idSample}.table.post \\\n        --algo ReadWriter ${idSample}.recal.bam\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        --algo QualCal \\\n        --plot \\\n        --before ${idSample}.recal.table \\\n        --after ${idSample}.table.post \\\n        ${idSample}_recal_result.csv\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamDedupedSentieon",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_fasta",
            "ch_dict",
            "ch_fastaFai",
            "ch_knownIndels",
            "ch_knownIndelsIndex"
        ],
        "nb_inputs": 8,
        "outputs": [
            "bamRecalSentieon",
            "bamRecalSentieonTSV",
            "bamRecalSentieonQC"
        ],
        "nb_outputs": 3,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "label 'sentieon'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: { if (it == \"${idSample}_recal_result.csv\" && 'sentieon' in skipQC) \"Reports/${idSample}/Sentieon/${it}\" else \"Preprocessing/${idSample}/RecalSentieon/${it}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MergeBamRecal": {
        "name_process": "MergeBamRecal",
        "string_process": "\nprocess MergeBamRecal {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir \"${params.outdir}/Preprocessing/${idSample}/Recalibrated\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, file(bam) from bamMergeBamRecal\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.recal.bam\"), file(\"${idSample}.recal.bam.bai\") into bamRecal\n        set idPatient, idSample, file(\"${idSample}.recal.bam\") into bamRecalQC\n        set idPatient, idSample into bamRecalTSV\n        file(\"${idSample}.recal.bam\") into (bamGenomeChronicler, bamGenomeChroniclerToPrint)\n\n    when: !(params.no_intervals)\n\n    script:\n    \"\"\"\n    samtools merge --threads ${task.cpus} ${idSample}.recal.bam ${bam}\n    samtools index ${idSample}.recal.bam\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    samtools merge --threads ${task.cpus} ${idSample}.recal.bam ${bam}\n    samtools index ${idSample}.recal.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamMergeBamRecal"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamRecal",
            "bamRecalQC",
            "bamRecalTSV",
            ""
        ],
        "nb_outputs": 4,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outdir}/Preprocessing/${idSample}/Recalibrated\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "IndexBamRecal": {
        "name_process": "IndexBamRecal",
        "string_process": "\nprocess IndexBamRecal {\n    label 'cpus_4'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir \"${params.outdir}/Preprocessing/${idSample}/Recalibrated\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, file(\"${idSample}.recal.bam\") from bamMergeBamRecalNoInt\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.recal.bam\"), file(\"${idSample}.recal.bam.bai\") into bamRecalNoInt\n        set idPatient, idSample, file(\"${idSample}.recal.bam\") into bamRecalQCnoInt\n        set idPatient, idSample into bamRecalTSVnoInt\n\n    when: params.no_intervals\n\n    script:\n    \"\"\"\n    samtools index ${idSample}.recal.bam\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    samtools index ${idSample}.recal.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamMergeBamRecalNoInt"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamRecalNoInt",
            "bamRecalQCnoInt",
            "bamRecalTSVnoInt"
        ],
        "nb_outputs": 3,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_4'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outdir}/Preprocessing/${idSample}/Recalibrated\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "SamtoolsStats": {
        "name_process": "SamtoolsStats",
        "string_process": "\nprocess SamtoolsStats {\n    label 'cpus_1'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir \"${params.outdir}/Reports/${idSample}/SamToolsStats\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, file(bam) from bamRecalSamToolsStats\n\n    output:\n        file (\"${bam}.samtools.stats.out\") into samtoolsStatsReport\n\n    when: !('samtools' in skipQC)\n\n    script:\n    \"\"\"\n    samtools stats ${bam} > ${bam}.samtools.stats.out\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    samtools stats ${bam} > ${bam}.samtools.stats.out\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamRecalSamToolsStats"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samtoolsStatsReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outdir}/Reports/${idSample}/SamToolsStats\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "BamQC": {
        "name_process": "BamQC",
        "string_process": "\nprocess BamQC {\n    label 'cpus_4'\n\n    tag {idPatient + \"-\" + idSample}\n\n    publishDir \"${params.outdir}/Reports/${idSample}/bamQC\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, file(bam) from bamBamQC\n        file(targetBED) from ch_targetBED\n\n    output:\n        file(\"${bam.baseName}\") into bamQCReport\n\n    when: !('bamqc' in skipQC)\n\n    script:\n    use_bed = params.targetBED ? \"-gff ${targetBED}\" : ''\n    \"\"\"\n    qualimap --java-mem-size=${task.memory.toGiga()}G \\\n        bamqc \\\n        -bam ${bam} \\\n        --paint-chromosome-limits \\\n        --genome-gc-distr HUMAN \\\n        $use_bed \\\n        -nt ${task.cpus} \\\n        -skip-duplicated \\\n        --skip-dup-mode 0 \\\n        -outdir ${bam.baseName} \\\n        -outformat HTML\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    use_bed = params.targetBED ? \"-gff ${targetBED}\" : ''\n    \"\"\"\n    qualimap --java-mem-size=${task.memory.toGiga()}G \\\n        bamqc \\\n        -bam ${bam} \\\n        --paint-chromosome-limits \\\n        --genome-gc-distr HUMAN \\\n        $use_bed \\\n        -nt ${task.cpus} \\\n        -skip-duplicated \\\n        --skip-dup-mode 0 \\\n        -outdir ${bam.baseName} \\\n        -outformat HTML\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "bamBamQC",
            "ch_targetBED"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bamQCReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_4'",
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outdir}/Reports/${idSample}/bamQC\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "HaplotypeCaller": {
        "name_process": "HaplotypeCaller",
        "string_process": "\nprocess HaplotypeCaller {\n\n    tag {idSample + \"-\" + intervalBed.baseName}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai), file(intervalBed) from bamHaplotypeCaller\n        each file(dbsnp) from ch_dbsnp\n        each file(dbsnpIndex) from ch_dbsnpIndex\n        each file(dict) from ch_dict\n        each file(fasta) from ch_fasta\n        each file(fastaFai) from ch_fastaFai\n\n    output:\n                                 \n        set val(\"HaplotypeCaller${gvcf_tag}\"), idPatient, idSample, file(outputVcf), file(\"${outputVcf}.idx\") into vcfHaplotypeCallerVEP\n        set val(\"HaplotypeCaller${gvcf_tag}\"), idPatient, idSample, file(outputVcf) into gvcfHaplotypeCaller\n        set idPatient, idSample, file(intervalBed), file(outputVcf) into gvcfGenotypeGVCFs\n\n    when: 'haplotypecaller' in tools\n\n    script:\n    name = \"${intervalBed.baseName}_${idSample}\"\n    output_suffix = params.noGVCF ? '.vcf' : '.g.vcf'\n    outputVcf = name + output_suffix\n    gvcf_arg = params.noGVCF ? '' : '-ERC GVCF'\n    gvcf_tag = params.noGVCF ? '' : 'GVCF'\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g -Xms6000m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10\" \\\n        HaplotypeCaller \\\n        -R ${fasta} \\\n        -I ${bam} \\\n        -L ${intervalBed} \\\n        -D ${dbsnp} \\\n        -O ${outputVcf} \\\n        ${gvcf_arg}\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    name = \"${intervalBed.baseName}_${idSample}\"\n    output_suffix = params.noGVCF ? '.vcf' : '.g.vcf'\n    outputVcf = name + output_suffix\n    gvcf_arg = params.noGVCF ? '' : '-ERC GVCF'\n    gvcf_tag = params.noGVCF ? '' : 'GVCF'\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g -Xms6000m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10\" \\\n        HaplotypeCaller \\\n        -R ${fasta} \\\n        -I ${bam} \\\n        -L ${intervalBed} \\\n        -D ${dbsnp} \\\n        -O ${outputVcf} \\\n        ${gvcf_arg}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "goname",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bamHaplotypeCaller",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 6,
        "outputs": [
            "vcfHaplotypeCallerVEP",
            "gvcfHaplotypeCaller",
            "gvcfGenotypeGVCFs"
        ],
        "nb_outputs": 3,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSample + \"-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "GenotypeGVCFs": {
        "name_process": "GenotypeGVCFs",
        "string_process": "\nprocess GenotypeGVCFs {\n    tag {idSample + \"-\" + intervalBed.baseName}\n\n    input:\n        set idPatient, idSample, file(intervalBed), file(gvcf) from gvcfGenotypeGVCFs\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n    set val(\"HaplotypeCaller\"), idPatient, idSample, file(\"${intervalBed.baseName}_${idSample}.vcf\") into vcfGenotypeGVCFs\n\n    when: !(params.noGVCF) && ('haplotypecaller' in tools)\n\n    script:\n                                                                                   \n    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        IndexFeatureFile -F ${gvcf}\n\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        GenotypeGVCFs \\\n        -R ${fasta} \\\n        -L ${intervalBed} \\\n        -D ${dbsnp} \\\n        -V ${gvcf} \\\n        -O ${intervalBed.baseName}_${idSample}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        IndexFeatureFile -F ${gvcf}\n\n    gatk --java-options -Xmx${task.memory.toGiga()}g \\\n        GenotypeGVCFs \\\n        -R ${fasta} \\\n        -L ${intervalBed} \\\n        -D ${dbsnp} \\\n        -V ${gvcf} \\\n        -O ${intervalBed.baseName}_${idSample}.vcf\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "gvcfGenotypeGVCFs",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 6,
        "outputs": [
            "vcfGenotypeGVCFs"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSample + \"-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "SentieonDNAseq": {
        "name_process": "SentieonDNAseq",
        "string_process": "\nprocess SentieonDNAseq {\n    label 'cpus_max'\n    label 'memory_max'\n    label 'sentieon'\n\n    tag {idSample}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamSentieonDNAseq\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n    set val(\"SentieonDNAseq\"), idPatient, idSample, file(\"DNAseq_${idSample}.vcf\") into sentieonDNAseqVCF\n\n    when: 'dnaseq' in tools && params.sentieon\n\n    script:\n    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${bam} \\\n        --algo Genotyper \\\n        -d ${dbsnp} \\\n        DNAseq_${idSample}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${bam} \\\n        --algo Genotyper \\\n        -d ${dbsnp} \\\n        DNAseq_${idSample}.vcf\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamSentieonDNAseq",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sentieonDNAseqVCF"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "label 'sentieon'",
            "tag {idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "SentieonDNAscope": {
        "name_process": "SentieonDNAscope",
        "string_process": "\nprocess SentieonDNAscope {\n    label 'cpus_max'\n    label 'memory_max'\n    label 'sentieon'\n\n    tag {idSample}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamSentieonDNAscope\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n    set val(\"SentieonDNAscope\"), idPatient, idSample, file(\"DNAscope_${idSample}.vcf\") into sentieonDNAscopeVCF\n    set val(\"SentieonDNAscope\"), idPatient, idSample, file(\"DNAscope_SV_${idSample}.vcf\") into sentieonDNAscopeSVVCF\n\n    when: 'dnascope' in tools && params.sentieon\n\n    script:\n    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${bam} \\\n        --algo DNAscope \\\n        -d ${dbsnp} \\\n        DNAscope_${idSample}.vcf\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta}\\\n        -i ${bam} \\\n        --algo DNAscope \\\n        --var_type bnd \\\n        -d ${dbsnp} \\\n        DNAscope_${idSample}.temp.vcf\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta}\\\n        --algo SVSolver \\\n        -v DNAscope_${idSample}.temp.vcf \\\n        DNAscope_SV_${idSample}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${bam} \\\n        --algo DNAscope \\\n        -d ${dbsnp} \\\n        DNAscope_${idSample}.vcf\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta}\\\n        -i ${bam} \\\n        --algo DNAscope \\\n        --var_type bnd \\\n        -d ${dbsnp} \\\n        DNAscope_${idSample}.temp.vcf\n\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta}\\\n        --algo SVSolver \\\n        -v DNAscope_${idSample}.temp.vcf \\\n        DNAscope_SV_${idSample}.vcf\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamSentieonDNAscope",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sentieonDNAscopeVCF",
            "sentieonDNAscopeSVVCF"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "label 'sentieon'",
            "tag {idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "StrelkaSingle": {
        "name_process": "StrelkaSingle",
        "string_process": "\nprocess StrelkaSingle {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idSample}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSample}/Strelka\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamStrelkaSingle\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(targetBED) from ch_targetBED\n\n    output:\n        set val(\"Strelka\"), idPatient, idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vcfStrelkaSingle\n\n    when: 'strelka' in tools\n\n    script:\n    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaGermlineWorkflow.py \\\n        --bam ${bam} \\\n        --referenceFasta ${fasta} \\\n        ${options} \\\n        --runDir Strelka\n\n    python Strelka/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Strelka/results/variants/genome.*.vcf.gz \\\n        Strelka_${idSample}_genome.vcf.gz\n    mv Strelka/results/variants/genome.*.vcf.gz.tbi \\\n        Strelka_${idSample}_genome.vcf.gz.tbi\n    mv Strelka/results/variants/variants.vcf.gz \\\n        Strelka_${idSample}_variants.vcf.gz\n    mv Strelka/results/variants/variants.vcf.gz.tbi \\\n        Strelka_${idSample}_variants.vcf.gz.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaGermlineWorkflow.py \\\n        --bam ${bam} \\\n        --referenceFasta ${fasta} \\\n        ${options} \\\n        --runDir Strelka\n\n    python Strelka/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Strelka/results/variants/genome.*.vcf.gz \\\n        Strelka_${idSample}_genome.vcf.gz\n    mv Strelka/results/variants/genome.*.vcf.gz.tbi \\\n        Strelka_${idSample}_genome.vcf.gz.tbi\n    mv Strelka/results/variants/variants.vcf.gz \\\n        Strelka_${idSample}_variants.vcf.gz\n    mv Strelka/results/variants/variants.vcf.gz.tbi \\\n        Strelka_${idSample}_variants.vcf.gz.tbi\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamStrelkaSingle",
            "ch_fasta",
            "ch_fastaFai",
            "ch_targetBED"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcfStrelkaSingle"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idSample}",
            "publishDir \"${params.outdir}/VariantCalling/${idSample}/Strelka\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "MantaSingle": {
        "name_process": "MantaSingle",
        "string_process": "\nprocess MantaSingle {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idSample}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSample}/Manta\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamMantaSingle\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(targetBED) from ch_targetBED\n\n    output:\n        set val(\"Manta\"), idPatient, idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vcfMantaSingle\n\n    when: 'manta' in tools\n\n    script:\n    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    status = statusMap[idPatient, idSample]\n    inputbam = status == 0 ? \"--bam\" : \"--tumorBam\"\n    vcftype = status == 0 ? \"diploid\" : \"tumor\"\n    \"\"\"\n    ${beforeScript}\n    configManta.py \\\n        ${inputbam} ${bam} \\\n        --reference ${fasta} \\\n        ${options} \\\n        --runDir Manta\n\n    python Manta/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz \\\n        Manta_${idSample}.candidateSmallIndels.vcf.gz\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        Manta_${idSample}.candidateSmallIndels.vcf.gz.tbi\n    mv Manta/results/variants/candidateSV.vcf.gz \\\n        Manta_${idSample}.candidateSV.vcf.gz\n    mv Manta/results/variants/candidateSV.vcf.gz.tbi \\\n        Manta_${idSample}.candidateSV.vcf.gz.tbi\n    mv Manta/results/variants/${vcftype}SV.vcf.gz \\\n        Manta_${idSample}.${vcftype}SV.vcf.gz\n    mv Manta/results/variants/${vcftype}SV.vcf.gz.tbi \\\n        Manta_${idSample}.${vcftype}SV.vcf.gz.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    status = statusMap[idPatient, idSample]\n    inputbam = status == 0 ? \"--bam\" : \"--tumorBam\"\n    vcftype = status == 0 ? \"diploid\" : \"tumor\"\n    \"\"\"\n    ${beforeScript}\n    configManta.py \\\n        ${inputbam} ${bam} \\\n        --reference ${fasta} \\\n        ${options} \\\n        --runDir Manta\n\n    python Manta/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz \\\n        Manta_${idSample}.candidateSmallIndels.vcf.gz\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        Manta_${idSample}.candidateSmallIndels.vcf.gz.tbi\n    mv Manta/results/variants/candidateSV.vcf.gz \\\n        Manta_${idSample}.candidateSV.vcf.gz\n    mv Manta/results/variants/candidateSV.vcf.gz.tbi \\\n        Manta_${idSample}.candidateSV.vcf.gz.tbi\n    mv Manta/results/variants/${vcftype}SV.vcf.gz \\\n        Manta_${idSample}.${vcftype}SV.vcf.gz\n    mv Manta/results/variants/${vcftype}SV.vcf.gz.tbi \\\n        Manta_${idSample}.${vcftype}SV.vcf.gz.tbi\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamMantaSingle",
            "ch_fasta",
            "ch_fastaFai",
            "ch_targetBED"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcfMantaSingle"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idSample}",
            "publishDir \"${params.outdir}/VariantCalling/${idSample}/Manta\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "TIDDIT": {
        "name_process": "TIDDIT",
        "string_process": "\nprocess TIDDIT {\n    tag {idSample}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSample}/TIDDIT\", mode: params.publishDirMode\n\n    publishDir params.outdir, mode: params.publishDirMode,\n        saveAs: {\n            if (it == \"TIDDIT_${idSample}.vcf\") \"VariantCalling/${idSample}/TIDDIT/${it}\"\n            else \"Reports/${idSample}/TIDDIT/${it}\"\n        }\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamTIDDIT\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set val(\"TIDDIT\"), idPatient, idSample, file(\"*.vcf.gz\"), file(\"*.tbi\") into vcfTIDDIT\n        set file(\"TIDDIT_${idSample}.old.vcf\"), file(\"TIDDIT_${idSample}.ploidy.tab\"), file(\"TIDDIT_${idSample}.signals.tab\"), file(\"TIDDIT_${idSample}.wig\"), file(\"TIDDIT_${idSample}.gc.wig\") into tidditOut\n\n    when: 'tiddit' in tools\n\n    script:\n    \"\"\"\n    tiddit --sv -o TIDDIT_${idSample} --bam ${bam} --ref ${fasta}\n\n    mv TIDDIT_${idSample}.vcf TIDDIT_${idSample}.old.vcf\n\n    grep -E \"#|PASS\" TIDDIT_${idSample}.old.vcf > TIDDIT_${idSample}.vcf\n\n    bgzip --threads ${task.cpus} -c TIDDIT_${idSample}.vcf > TIDDIT_${idSample}.vcf.gz\n\n    tabix TIDDIT_${idSample}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    tiddit --sv -o TIDDIT_${idSample} --bam ${bam} --ref ${fasta}\n\n    mv TIDDIT_${idSample}.vcf TIDDIT_${idSample}.old.vcf\n\n    grep -E \"#|PASS\" TIDDIT_${idSample}.old.vcf > TIDDIT_${idSample}.vcf\n\n    bgzip --threads ${task.cpus} -c TIDDIT_${idSample}.vcf > TIDDIT_${idSample}.vcf.gz\n\n    tabix TIDDIT_${idSample}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "TIDDIT",
            "PASS"
        ],
        "tools_url": [
            "https://bio.tools/tiddit",
            "https://bio.tools/pass"
        ],
        "tools_dico": [
            {
                "name": "TIDDIT",
                "uri": "https://bio.tools/tiddit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Efficient and comprehensive structural variant caller for massive parallel sequencing data. Identify chromosomal rearrangements using Mate Pair or Paired End sequencing data. It allows identification of intra and inter-chromosomal translocations, deletions, tandem-duplications and inversions, using supplementary alignments as well as discordant pairs.",
                "homepage": "https://github.com/J35P312/TIDDIT"
            },
            {
                "name": "PASS",
                "uri": "https://bio.tools/pass",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PASS: a program to align short sequences",
                "homepage": "http://pass.cribi.unipd.it/cgi-bin/pass.pl"
            }
        ],
        "inputs": [
            "bamTIDDIT",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcfTIDDIT",
            "tidditOut"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSample}",
            "publishDir \"${params.outdir}/VariantCalling/${idSample}/TIDDIT\", mode: params.publishDirMode",
            "publishDir params.outdir, mode: params.publishDirMode , saveAs: { if (it == \"TIDDIT_${idSample}.vcf\") \"VariantCalling/${idSample}/TIDDIT/${it}\" else \"Reports/${idSample}/TIDDIT/${it}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FreeBayes": {
        "name_process": "FreeBayes",
        "string_process": "\nprocess FreeBayes {\n\n    label 'cpus_1'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal + \"-\" + intervalBed.baseName}\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor), file(intervalBed) from pairBamFreeBayes\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set val(\"FreeBayes\"), idPatient, val(\"${idSampleTumor}_vs_${idSampleNormal}\"), file(\"${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf\") into vcfFreeBayes\n\n    when: 'freebayes' in tools\n\n    script:\n    \"\"\"\n    freebayes \\\n        -f ${fasta} \\\n        --pooled-continuous \\\n        --pooled-discrete \\\n        --genotype-qualities \\\n        --report-genotype-likelihood-max \\\n        --allele-balance-priors-off \\\n        --min-alternate-fraction 0.03 \\\n        --min-repeat-entropy 1 \\\n        --min-alternate-count 2 \\\n        -t ${intervalBed} \\\n        ${bamTumor} \\\n        ${bamNormal} > ${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    freebayes \\\n        -f ${fasta} \\\n        --pooled-continuous \\\n        --pooled-discrete \\\n        --genotype-qualities \\\n        --report-genotype-likelihood-max \\\n        --allele-balance-priors-off \\\n        --min-alternate-fraction 0.03 \\\n        --min-repeat-entropy 1 \\\n        --min-alternate-count 2 \\\n        -t ${intervalBed} \\\n        ${bamTumor} \\\n        ${bamNormal} > ${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "FreeBayes"
        ],
        "tools_url": [
            "https://bio.tools/freebayes"
        ],
        "tools_dico": [
            {
                "name": "FreeBayes",
                "uri": "https://bio.tools/freebayes",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bayesian genetic variant detector designed to find small polymorphisms, specifically SNPs, indels, multi-nucleotide polymorphisms, and complex events (composite insertion and substitution events) smaller than the length of a short-read sequencing alignment.",
                "homepage": "https://github.com/ekg/freebayes"
            }
        ],
        "inputs": [
            "pairBamFreeBayes",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcfFreeBayes"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal + \"-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "Mutect2": {
        "name_process": "Mutect2",
        "string_process": "\nprocess Mutect2 {\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal + \"-\" + intervalBed.baseName}\n\n    label 'cpus_1'\n\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor), file(intervalBed) from pairBamMutect2\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(germlineResource) from ch_germlineResource\n        file(germlineResourceIndex) from ch_germlineResourceIndex\n        file(intervals) from ch_intervals\n        file(pon) from ch_pon\n        file(ponIndex) from ch_ponIndex\n\n    output:\n        set val(\"Mutect2\"), \n            idPatient,\n            val(\"${idSampleTumor}_vs_${idSampleNormal}\"),\n            file(\"${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf\") into mutect2Output\n        set idPatient,\n            idSampleTumor,\n            idSampleNormal,\n            file(\"${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf.stats\") optional true into mutect2Stats\n\n    when: 'mutect2' in tools\n\n    script:\n                                                                \n                                                                                                                    \n    PON = params.pon ? \"--panel-of-normals ${pon}\" : \"\"\n    \"\"\"\n    # Get raw calls\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n      Mutect2 \\\n      -R ${fasta}\\\n      -I ${bamTumor}  -tumor ${idSampleTumor} \\\n      -I ${bamNormal} -normal ${idSampleNormal} \\\n      -L ${intervalBed} \\\n      --germline-resource ${germlineResource} \\\n      ${PON} \\\n      -O ${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    PON = params.pon ? \"--panel-of-normals ${pon}\" : \"\"\n    \"\"\"\n    # Get raw calls\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n      Mutect2 \\\n      -R ${fasta}\\\n      -I ${bamTumor}  -tumor ${idSampleTumor} \\\n      -I ${bamNormal} -normal ${idSampleNormal} \\\n      -L ${intervalBed} \\\n      --germline-resource ${germlineResource} \\\n      ${PON} \\\n      -O ${intervalBed.baseName}_${idSampleTumor}_vs_${idSampleNormal}.vcf\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "pong",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/pong",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "pong",
                "uri": "https://bio.tools/pong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3083",
                                    "term": "Pathway or network visualisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Freely available software package for post-processing output from clustering inference using population genetic data",
                "homepage": "http://brown.edu/Research/Ramachandran_Lab/projects/"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "pairBamMutect2",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai",
            "ch_germlineResource",
            "ch_germlineResourceIndex",
            "ch_intervals",
            "ch_pon",
            "ch_ponIndex"
        ],
        "nb_inputs": 9,
        "outputs": [
            "mutect2Output",
            "mutect2Stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal + \"-\" + intervalBed.baseName}",
            "label 'cpus_1'"
        ],
        "when": "",
        "stub": ""
    },
    "MergeMutect2Stats": {
        "name_process": "MergeMutect2Stats",
        "string_process": "\nprocess MergeMutect2Stats {\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Mutect2\", mode: params.publishDirMode\n\n    input:\n        set caller, idPatient, idSampleTumor_vs_idSampleNormal, file(vcfFiles) from mutect2OutForStats                                  \n        set idPatient, idSampleTumor, idSampleNormal, file(statsFiles) from mutect2Stats                                        \n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(germlineResource) from ch_germlineResource\n        file(germlineResourceIndex) from ch_germlineResourceIndex\n        file(intervals) from ch_intervals\n\n    output:\n        file(\"${idSampleTumor_vs_idSampleNormal}.vcf.gz.stats\") into mergedStatsFile\n\n    when: 'mutect2' in tools\n\n    script:     \n      stats = statsFiles.collect{ \"-stats ${it} \" }.join(' ')\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        MergeMutectStats \\\n        ${stats} \\\n        -O ${idSampleTumor}_vs_${idSampleNormal}.vcf.gz.stats\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "      stats = statsFiles.collect{ \"-stats ${it} \" }.join(' ')\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        MergeMutectStats \\\n        ${stats} \\\n        -O ${idSampleTumor}_vs_${idSampleNormal}.vcf.gz.stats\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "GOstats",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gostats",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GOstats",
                "uri": "https://bio.tools/gostats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0582",
                                "term": "Ontology"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            },
                            {
                                "uri": "http://edamontology.org/data_1772",
                                "term": "Score"
                            }
                        ]
                    }
                ],
                "description": "A set of tools for interacting with GO and microarray data. A variety of basic manipulation tools for graphs, hypothesis testing and other simple calculations.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/GOstats.html"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "mutect2OutForStats",
            "mutect2Stats",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai",
            "ch_germlineResource",
            "ch_germlineResourceIndex",
            "ch_intervals"
        ],
        "nb_inputs": 8,
        "outputs": [
            "mergedStatsFile"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Mutect2\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "ConcatVCF": {
        "name_process": "ConcatVCF",
        "string_process": "\nprocess ConcatVCF {\n    label 'max_cpus'\n    label 'max_memory'\n\n    tag {variantCaller + \"-\" + idSample}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSample}/${\"$variantCaller\"}\", mode: params.publishDirMode\n\n    input:\n        set variantCaller, idPatient, idSample, file(vcFiles) from vcfConcatenateVCFs\n        file(fastaFai) from ch_fastaFai\n        file(targetBED) from ch_targetBED\n\n    output:\n                                                                                  \n        set variantCaller, idPatient, idSample, file(\"*_*.vcf.gz\"), file(\"*_*.vcf.gz.tbi\") into vcfConcatenated\n\n    when: ('haplotypecaller' in tools || 'mutect2' in tools || 'freebayes' in tools)\n\n    script:\n    if (variantCaller == 'HaplotypeCallerGVCF') \n      outputFile = \"HaplotypeCaller_${idSample}.g.vcf\"\n    else if (variantCaller == \"Mutect2\") \n      outputFile = \"unfiltered_${variantCaller}_${idSample}.vcf\"\n    else \n      outputFile = \"${variantCaller}_${idSample}.vcf\"\n    options = params.targetBED ? \"-t ${targetBED}\" : \"\"\n    \"\"\"\n    concatenateVCFs.sh -i ${fastaFai} -c ${task.cpus} -o ${outputFile} ${options}\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    if (variantCaller == 'HaplotypeCallerGVCF') \n      outputFile = \"HaplotypeCaller_${idSample}.g.vcf\"\n    else if (variantCaller == \"Mutect2\") \n      outputFile = \"unfiltered_${variantCaller}_${idSample}.vcf\"\n    else \n      outputFile = \"${variantCaller}_${idSample}.vcf\"\n    options = params.targetBED ? \"-t ${targetBED}\" : \"\"\n    \"\"\"\n    concatenateVCFs.sh -i ${fastaFai} -c ${task.cpus} -o ${outputFile} ${options}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfConcatenateVCFs",
            "ch_fastaFai",
            "ch_targetBED"
        ],
        "nb_inputs": 3,
        "outputs": [
            "vcfConcatenated"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'max_cpus'",
            "label 'max_memory'",
            "tag {variantCaller + \"-\" + idSample}",
            "publishDir \"${params.outdir}/VariantCalling/${idSample}/${\"$variantCaller\"}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "PileupSummariesForMutect2": {
        "name_process": "PileupSummariesForMutect2",
        "string_process": "\nprocess PileupSummariesForMutect2 {\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal + \"_\" + intervalBed.baseName }\n\n    label 'cpus_1'\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor), file(intervalBed) from pairBamPileupSummaries \n        set idPatient, idSampleNormal, idSampleTumor, file(statsFile) from intervalStatsFiles\n        file(germlineResource) from ch_germlineResource\n        file(germlineResourceIndex) from ch_germlineResourceIndex\n\n    output:\n        set idPatient,\n            idSampleTumor,\n            file(\"${intervalBed.baseName}_${idSampleTumor}_pileupsummaries.table\") into pileupSummaries\n\n    when: 'mutect2' in tools && params.pon\n\n    script:\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        GetPileupSummaries \\\n        -I ${bamTumor} \\\n        -V ${germlineResource} \\\n        -L ${intervalBed} \\\n        -O ${intervalBed.baseName}_${idSampleTumor}_pileupsummaries.table\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        GetPileupSummaries \\\n        -I ${bamTumor} \\\n        -V ${germlineResource} \\\n        -L ${intervalBed} \\\n        -O ${intervalBed.baseName}_${idSampleTumor}_pileupsummaries.table\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "pairBamPileupSummaries",
            "intervalStatsFiles",
            "ch_germlineResource",
            "ch_germlineResourceIndex"
        ],
        "nb_inputs": 4,
        "outputs": [
            "pileupSummaries"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal + \"_\" + intervalBed.baseName }",
            "label 'cpus_1'"
        ],
        "when": "",
        "stub": ""
    },
    "MergePileupSummaries": {
        "name_process": "MergePileupSummaries",
        "string_process": "\nprocess MergePileupSummaries {\n\n    label 'cpus_1'\n\n    tag {idPatient + \"_\" + idSampleTumor}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}/Mutect2\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleTumor, file(pileupSums) from pileupSummaries\n        file(dict) from ch_dict\n\n    output:\n        file(\"${idSampleTumor}_pileupsummaries.table.tsv\") into mergedPileupFile\n\n    when: 'mutect2' in tools\n    script:\n        allPileups = pileupSums.collect{ \"-I ${it} \" }.join(' ')\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        GatherPileupSummaries \\\n        --sequence-dictionary ${dict} \\\n        ${allPileups} \\\n        -O ${idSampleTumor}_pileupsummaries.table.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "        allPileups = pileupSums.collect{ \"-I ${it} \" }.join(' ')\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        GatherPileupSummaries \\\n        --sequence-dictionary ${dict} \\\n        ${allPileups} \\\n        -O ${idSampleTumor}_pileupsummaries.table.tsv\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "pileupSummaries",
            "ch_dict"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mergedPileupFile"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idPatient + \"_\" + idSampleTumor}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}/Mutect2\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "CalculateContamination": {
        "name_process": "CalculateContamination",
        "string_process": "\nprocess CalculateContamination {\n\n    label 'cpus_1'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}/Mutect2\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor) from pairBamCalculateContamination \n        file(\"${idSampleTumor}_pileupsummaries.table\") from mergedPileupFile\n  \n    output:\n        file(\"${idSampleTumor}_contamination.table\") into contaminationTable\n\n    when: 'mutect2' in tools && params.pon\n\n    script:     \n    \"\"\"\n    # calculate contamination\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        CalculateContamination \\\n        -I ${idSampleTumor}_pileupsummaries.table \\\n        -O ${idSampleTumor}_contamination.table\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    # calculate contamination\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        CalculateContamination \\\n        -I ${idSampleTumor}_pileupsummaries.table \\\n        -O ${idSampleTumor}_contamination.table\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "pairBamCalculateContamination",
            "mergedPileupFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "contaminationTable"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}/Mutect2\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "FilterMutect2Calls": {
        "name_process": "FilterMutect2Calls",
        "string_process": "\nprocess FilterMutect2Calls {\n\n    label 'cpus_1'\n\n    tag {idSampleTN}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTN}/${\"$variantCaller\"}\", mode: params.publishDirMode\n\n    input:\n        set variantCaller, idPatient, idSampleTN, file(unfiltered), file(unfilteredIndex) from vcfConcatenatedForFilter\n        file(\"${idSampleTN}.vcf.gz.stats\") from mergedStatsFile\n        file(\"${idSampleTN}_contamination.table\") from contaminationTable\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(germlineResource) from ch_germlineResource\n        file(germlineResourceIndex) from ch_germlineResourceIndex\n        file(intervals) from ch_intervals\n        \n    output:\n        set val(\"Mutect2\"), idPatient, idSampleTN,\n            file(\"filtered_${variantCaller}_${idSampleTN}.vcf.gz\"),\n            file(\"filtered_${variantCaller}_${idSampleTN}.vcf.gz.tbi\"),\n            file(\"filtered_${variantCaller}_${idSampleTN}.vcf.gz.filteringStats.tsv\") into filteredMutect2Output\n\n    when: 'mutect2' in tools && params.pon\n\n    script:\n    \"\"\"\n    # do the actual filtering\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        FilterMutectCalls \\\n        -V ${unfiltered} \\\n        --contamination-table ${idSampleTN}_contamination.table \\\n        --stats ${idSampleTN}.vcf.gz.stats \\\n        -R ${fasta} \\\n        -O filtered_${variantCaller}_${idSampleTN}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n    # do the actual filtering\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        FilterMutectCalls \\\n        -V ${unfiltered} \\\n        --contamination-table ${idSampleTN}_contamination.table \\\n        --stats ${idSampleTN}.vcf.gz.stats \\\n        -R ${fasta} \\\n        -O filtered_${variantCaller}_${idSampleTN}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "vcfConcatenatedForFilter",
            "mergedStatsFile",
            "contaminationTable",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai",
            "ch_germlineResource",
            "ch_germlineResourceIndex",
            "ch_intervals"
        ],
        "nb_inputs": 9,
        "outputs": [
            "filteredMutect2Output"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {idSampleTN}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTN}/${\"$variantCaller\"}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "SentieonTNscope": {
        "name_process": "SentieonTNscope",
        "string_process": "\nprocess SentieonTNscope {\n    label 'cpus_max'\n    label 'memory_max'\n    label 'sentieon'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor) from pairBamTNscope\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(pon) from ch_pon\n        file(ponIndex) from ch_ponIndex\n\n    output:\n        set val(\"SentieonTNscope\"), idPatient, val(\"${idSampleTumor}_vs_${idSampleNormal}\"), file(\"*.vcf\") into vcfTNscope\n\n    when: 'tnscope' in tools && params.sentieon\n\n    script:\n    PON = params.pon ? \"--pon ${pon}\" : \"\"\n    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${bamTumor} \\\n        -i ${bamNormal} \\\n        --algo TNscope \\\n        --tumor_sample ${idSampleTumor} \\\n        --normal_sample ${idSampleNormal} \\\n        --dbsnp ${dbsnp} \\\n        ${PON} \\\n        TNscope_${idSampleTumor}_vs_${idSampleNormal}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    PON = params.pon ? \"--pon ${pon}\" : \"\"\n    \"\"\"\n    sentieon driver \\\n        -t ${task.cpus} \\\n        -r ${fasta} \\\n        -i ${bamTumor} \\\n        -i ${bamNormal} \\\n        --algo TNscope \\\n        --tumor_sample ${idSampleTumor} \\\n        --normal_sample ${idSampleNormal} \\\n        --dbsnp ${dbsnp} \\\n        ${PON} \\\n        TNscope_${idSampleTumor}_vs_${idSampleNormal}.vcf\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "pong"
        ],
        "tools_url": [
            "https://bio.tools/pong"
        ],
        "tools_dico": [
            {
                "name": "pong",
                "uri": "https://bio.tools/pong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3083",
                                    "term": "Pathway or network visualisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Freely available software package for post-processing output from clustering inference using population genetic data",
                "homepage": "http://brown.edu/Research/Ramachandran_Lab/projects/"
            }
        ],
        "inputs": [
            "pairBamTNscope",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_pon",
            "ch_ponIndex"
        ],
        "nb_inputs": 8,
        "outputs": [
            "vcfTNscope"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "label 'sentieon'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}"
        ],
        "when": "",
        "stub": ""
    },
    "CompressSentieonVCF": {
        "name_process": "CompressSentieonVCF",
        "string_process": "\nprocess CompressSentieonVCF {\n    tag {\"${idSample} - ${vcf}\"}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSample}/${variantCaller}\", mode: params.publishDirMode\n\n    input:\n        set variantCaller, idPatient, idSample, file(vcf) from sentieonVCF\n\n    output:\n        set variantCaller, idPatient, idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vcfSentieon\n\n    when: params.sentieon\n\n    script:\n    \"\"\"\n    bgzip < ${vcf} > ${vcf}.gz\n    tabix ${vcf}.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bgzip < ${vcf} > ${vcf}.gz\n    tabix ${vcf}.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sentieonVCF"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcfSentieon"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {\"${idSample} - ${vcf}\"}",
            "publishDir \"${params.outdir}/VariantCalling/${idSample}/${variantCaller}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "Strelka": {
        "name_process": "Strelka",
        "string_process": "\nprocess Strelka {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Strelka\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor) from pairBamStrelka\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(targetBED) from ch_targetBED\n\n    output:\n        set val(\"Strelka\"), idPatient, val(\"${idSampleTumor}_vs_${idSampleNormal}\"), file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vcfStrelka\n\n    when: 'strelka' in tools\n\n    script:\n    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaSomaticWorkflow.py \\\n        --tumor ${bamTumor} \\\n        --normal ${bamNormal} \\\n        --referenceFasta ${fasta} \\\n        ${options} \\\n        --runDir Strelka\n\n    python Strelka/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Strelka/results/variants/somatic.indels.vcf.gz \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz\n    mv Strelka/results/variants/somatic.indels.vcf.gz.tbi \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz.tbi\n    mv Strelka/results/variants/somatic.snvs.vcf.gz \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz\n    mv Strelka/results/variants/somatic.snvs.vcf.gz.tbi \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaSomaticWorkflow.py \\\n        --tumor ${bamTumor} \\\n        --normal ${bamNormal} \\\n        --referenceFasta ${fasta} \\\n        ${options} \\\n        --runDir Strelka\n\n    python Strelka/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Strelka/results/variants/somatic.indels.vcf.gz \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz\n    mv Strelka/results/variants/somatic.indels.vcf.gz.tbi \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz.tbi\n    mv Strelka/results/variants/somatic.snvs.vcf.gz \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz\n    mv Strelka/results/variants/somatic.snvs.vcf.gz.tbi \\\n        Strelka_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz.tbi\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairBamStrelka",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai",
            "ch_targetBED"
        ],
        "nb_inputs": 5,
        "outputs": [
            "vcfStrelka"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Strelka\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "Manta": {
        "name_process": "Manta",
        "string_process": "\nprocess Manta {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Manta\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor) from pairBamManta\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(targetBED) from ch_targetBED\n\n    output:\n        set val(\"Manta\"), idPatient, val(\"${idSampleTumor}_vs_${idSampleNormal}\"), file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vcfManta\n        set idPatient, idSampleNormal, idSampleTumor, file(\"*.candidateSmallIndels.vcf.gz\"), file(\"*.candidateSmallIndels.vcf.gz.tbi\") into mantaToStrelka\n\n    when: 'manta' in tools\n\n    script:\n    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configManta.py \\\n        --normalBam ${bamNormal} \\\n        --tumorBam ${bamTumor} \\\n        --reference ${fasta} \\\n        ${options} \\\n        --runDir Manta\n\n    python Manta/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSmallIndels.vcf.gz\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSmallIndels.vcf.gz.tbi\n    mv Manta/results/variants/candidateSV.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSV.vcf.gz\n    mv Manta/results/variants/candidateSV.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSV.vcf.gz.tbi\n    mv Manta/results/variants/diploidSV.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.diploidSV.vcf.gz\n    mv Manta/results/variants/diploidSV.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.diploidSV.vcf.gz.tbi\n    mv Manta/results/variants/somaticSV.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.somaticSV.vcf.gz\n    mv Manta/results/variants/somaticSV.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.somaticSV.vcf.gz.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configManta.py \\\n        --normalBam ${bamNormal} \\\n        --tumorBam ${bamTumor} \\\n        --reference ${fasta} \\\n        ${options} \\\n        --runDir Manta\n\n    python Manta/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSmallIndels.vcf.gz\n    mv Manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSmallIndels.vcf.gz.tbi\n    mv Manta/results/variants/candidateSV.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSV.vcf.gz\n    mv Manta/results/variants/candidateSV.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.candidateSV.vcf.gz.tbi\n    mv Manta/results/variants/diploidSV.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.diploidSV.vcf.gz\n    mv Manta/results/variants/diploidSV.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.diploidSV.vcf.gz.tbi\n    mv Manta/results/variants/somaticSV.vcf.gz \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.somaticSV.vcf.gz\n    mv Manta/results/variants/somaticSV.vcf.gz.tbi \\\n        Manta_${idSampleTumor}_vs_${idSampleNormal}.somaticSV.vcf.gz.tbi\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairBamManta",
            "ch_fasta",
            "ch_fastaFai",
            "ch_targetBED"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcfManta",
            "mantaToStrelka"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Manta\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "StrelkaBP": {
        "name_process": "StrelkaBP",
        "string_process": "\nprocess StrelkaBP {\n    label 'cpus_max'\n    label 'memory_max'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Strelka\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumor, file(bamTumor), file(baiTumor), file(mantaCSI), file(mantaCSIi) from pairBamStrelkaBP\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n        file(targetBED) from ch_targetBED\n\n    output:\n        set val(\"Strelka\"), idPatient, val(\"${idSampleTumor}_vs_${idSampleNormal}\"), file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vcfStrelkaBP\n\n    when: 'strelka' in tools && 'manta' in tools && !params.noStrelkaBP\n\n    script:\n    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaSomaticWorkflow.py \\\n        --tumor ${bamTumor} \\\n        --normal ${bamNormal} \\\n        --referenceFasta ${fasta} \\\n        --indelCandidates ${mantaCSI} \\\n        ${options} \\\n        --runDir Strelka\n\n    python Strelka/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Strelka/results/variants/somatic.indels.vcf.gz \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz\n    mv Strelka/results/variants/somatic.indels.vcf.gz.tbi \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz.tbi\n    mv Strelka/results/variants/somatic.snvs.vcf.gz \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz\n    mv Strelka/results/variants/somatic.snvs.vcf.gz.tbi \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    beforeScript = params.targetBED ? \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n    options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaSomaticWorkflow.py \\\n        --tumor ${bamTumor} \\\n        --normal ${bamNormal} \\\n        --referenceFasta ${fasta} \\\n        --indelCandidates ${mantaCSI} \\\n        ${options} \\\n        --runDir Strelka\n\n    python Strelka/runWorkflow.py -m local -j ${task.cpus}\n\n    mv Strelka/results/variants/somatic.indels.vcf.gz \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz\n    mv Strelka/results/variants/somatic.indels.vcf.gz.tbi \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_indels.vcf.gz.tbi\n    mv Strelka/results/variants/somatic.snvs.vcf.gz \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz\n    mv Strelka/results/variants/somatic.snvs.vcf.gz.tbi \\\n        StrelkaBP_${idSampleTumor}_vs_${idSampleNormal}_somatic_snvs.vcf.gz.tbi\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairBamStrelkaBP",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai",
            "ch_targetBED"
        ],
        "nb_inputs": 5,
        "outputs": [
            "vcfStrelkaBP"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_max'",
            "label 'memory_max'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/Strelka\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "AlleleCounter": {
        "name_process": "AlleleCounter",
        "string_process": "\nprocess AlleleCounter {\n    label 'cpus_2'\n\n    tag {idSample}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai) from bamAscat\n        file(acLoci) from ch_acLoci\n        file(dict) from ch_dict\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.alleleCount\") into alleleCounterOut\n\n    when: 'ascat' in tools\n\n    script:\n    \"\"\"\n    alleleCounter \\\n        -l ${acLoci} \\\n        -r ${fasta} \\\n        -b ${bam} \\\n        -o ${idSample}.alleleCount;\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    alleleCounter \\\n        -l ${acLoci} \\\n        -r ${fasta} \\\n        -b ${bam} \\\n        -o ${idSample}.alleleCount;\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamAscat",
            "ch_acLoci",
            "ch_dict",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "alleleCounterOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "tag {idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "ConvertAlleleCounts": {
        "name_process": "ConvertAlleleCounts",
        "string_process": "\nprocess ConvertAlleleCounts {\n    label 'cpus_2'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/ASCAT\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, idSampleTumor, file(alleleCountNormal), file(alleleCountTumor) from alleleCounterOut\n\n    output:\n        set idPatient, idSampleNormal, idSampleTumor, file(\"${idSampleNormal}.BAF\"), file(\"${idSampleNormal}.LogR\"), file(\"${idSampleTumor}.BAF\"), file(\"${idSampleTumor}.LogR\") into convertAlleleCountsOut\n\n    when: 'ascat' in tools\n\n    script:\n    gender = genderMap[idPatient]\n    \"\"\"\n    Rscript ${workflow.projectDir}/bin/convertAlleleCounts.r ${idSampleTumor} ${alleleCountTumor} ${idSampleNormal} ${alleleCountNormal} ${gender}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    gender = genderMap[idPatient]\n    \"\"\"\n    Rscript ${workflow.projectDir}/bin/convertAlleleCounts.r ${idSampleTumor} ${alleleCountTumor} ${idSampleNormal} ${alleleCountNormal} ${gender}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "WormGender"
        ],
        "tools_url": [
            "https://bio.tools/wormgender"
        ],
        "tools_dico": [
            {
                "name": "WormGender",
                "uri": "https://bio.tools/wormgender",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Zoology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Metazoa"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animals"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source software which designed for accurate quantification of sex ratio in Caenorhabditis elegans.  The software functions include, i) automatic recognition and counting of adult hermaphrodites and males, ii) a manual inspection feature that enables manual correction of errors, and iii) flexibility to use new training images to optimize the software for different imaging conditions.",
                "homepage": "http://www.quantworm.org/"
            }
        ],
        "inputs": [
            "alleleCounterOut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "convertAlleleCountsOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/ASCAT\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "Ascat": {
        "name_process": "Ascat",
        "string_process": "\nprocess Ascat {\n    label 'cpus_2'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/ASCAT\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, idSampleTumor, file(bafNormal), file(logrNormal), file(bafTumor), file(logrTumor) from convertAlleleCountsOut\n        file(acLociGC) from ch_acLociGC\n\n    output:\n        set val(\"ASCAT\"), idPatient, idSampleNormal, idSampleTumor, file(\"${idSampleTumor}.*.{png,txt}\") into ascatOut\n\n    when: 'ascat' in tools\n\n    script:\n    \"\"\"\n    # get rid of \"chr\" string if there is any\n    for f in *BAF *LogR; do sed 's/chr//g' \\$f > tmpFile; mv tmpFile \\$f;done\n    Rscript ${workflow.projectDir}/bin/run_ascat.r ${bafTumor} ${logrTumor} ${bafNormal} ${logrNormal} ${idSampleTumor} ${baseDir} ${acLociGC}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    # get rid of \"chr\" string if there is any\n    for f in *BAF *LogR; do sed 's/chr//g' \\$f > tmpFile; mv tmpFile \\$f;done\n    Rscript ${workflow.projectDir}/bin/run_ascat.r ${bafTumor} ${logrTumor} ${bafNormal} ${logrNormal} ${idSampleTumor} ${baseDir} ${acLociGC}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "convertAlleleCountsOut",
            "ch_acLociGC"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ascatOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/ASCAT\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "Mpileup": {
        "name_process": "Mpileup",
        "string_process": "\nprocess Mpileup {\n    label 'cpus_2'\n\n    tag {idSample + \"-\" + intervalBed.baseName}\n\n    input:\n        set idPatient, idSample, file(bam), file(bai), file(intervalBed) from bamMpileup\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSample, file(\"${prefix}${idSample}.pileup.gz\") into mpileupMerge\n\n    when: 'controlfreec' in tools || 'mpileup' in tools\n\n    script:\n    prefix = params.no_intervals ? \"\" : \"${intervalBed.baseName}_\"\n    intervalsOptions = params.no_intervals ? \"\" : \"-l ${intervalBed}\"\n    \"\"\"\n    samtools mpileup \\\n        -f ${fasta} ${bam} \\\n        ${intervalsOptions} \\\n    | bgzip --threads ${task.cpus} -c > ${prefix}${idSample}.pileup.gz\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    prefix = params.no_intervals ? \"\" : \"${intervalBed.baseName}_\"\n    intervalsOptions = params.no_intervals ? \"\" : \"-l ${intervalBed}\"\n    \"\"\"\n    samtools mpileup \\\n        -f ${fasta} ${bam} \\\n        ${intervalsOptions} \\\n    | bgzip --threads ${task.cpus} -c > ${prefix}${idSample}.pileup.gz\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamMpileup",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "mpileupMerge"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "tag {idSample + \"-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "MergeMpileup": {
        "name_process": "MergeMpileup",
        "string_process": "\nprocess MergeMpileup {\n    tag {idSample}\n\n    publishDir params.outdir, mode: params.publishDirMode, saveAs: { it == \"${idSample}.pileup.gz\" ? \"VariantCalling/${idSample}/mpileup/${it}\" : '' }\n\n    input:\n        set idPatient, idSample, file(mpileup) from mpileupMerge\n\n    output:\n        set idPatient, idSample, file(\"${idSample}.pileup.gz\") into mpileupOut\n\n    when: !(params.no_intervals) && 'controlfreec' in tools || 'mpileup' in tools\n\n    script:\n    \"\"\"\n    for i in `ls -1v *.pileup.gz`;\n        do zcat \\$i >> ${idSample}.pileup\n    done\n\n    bgzip --threads ${task.cpus} -c ${idSample}.pileup > ${idSample}.pileup.gz\n\n    rm ${idSample}.pileup\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    for i in `ls -1v *.pileup.gz`;\n        do zcat \\$i >> ${idSample}.pileup\n    done\n\n    bgzip --threads ${task.cpus} -c ${idSample}.pileup > ${idSample}.pileup.gz\n\n    rm ${idSample}.pileup\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mpileupMerge"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mpileupOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "tag {idSample}",
            "publishDir params.outdir, mode: params.publishDirMode, saveAs: { it == \"${idSample}.pileup.gz\" ? \"VariantCalling/${idSample}/mpileup/${it}\" : '' }"
        ],
        "when": "",
        "stub": ""
    },
    "ControlFREEC": {
        "name_process": "ControlFREEC",
        "string_process": "\nprocess ControlFREEC {\n    label 'cpus_2'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/controlFREEC\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, idSampleTumor, file(mpileupNormal), file(mpileupTumor) from mpileupOut\n        file(chrDir) from ch_chrDir\n        file(chrLength) from ch_chrLength\n        file(dbsnp) from ch_dbsnp\n        file(dbsnpIndex) from ch_dbsnpIndex\n        file(fasta) from ch_fasta\n        file(fastaFai) from ch_fastaFai\n\n    output:\n        set idPatient, idSampleNormal, idSampleTumor, file(\"${idSampleTumor}.pileup.gz_CNVs\"), file(\"${idSampleTumor}.pileup.gz_ratio.txt\"), file(\"${idSampleTumor}.pileup.gz_normal_CNVs\"), file(\"${idSampleTumor}.pileup.gz_normal_ratio.txt\"), file(\"${idSampleTumor}.pileup.gz_BAF.txt\"), file(\"${idSampleNormal}.pileup.gz_BAF.txt\") into controlFreecViz\n        set file(\"*.pileup.gz*\"), file(\"${idSampleTumor}_vs_${idSampleNormal}.config.txt\") into controlFreecOut\n\n    when: 'controlfreec' in tools\n\n    script:\n    config = \"${idSampleTumor}_vs_${idSampleNormal}.config.txt\"\n    gender = genderMap[idPatient]\n    \"\"\"\n    touch ${config}\n    echo \"[general]\" >> ${config}\n    echo \"BedGraphOutput = TRUE\" >> ${config}\n    echo \"chrFiles = \\${PWD}/${chrDir.fileName}\" >> ${config}\n    echo \"chrLenFile = \\${PWD}/${chrLength.fileName}\" >> ${config}\n    echo \"coefficientOfVariation = 0.05\" >> ${config}\n    echo \"contaminationAdjustment = TRUE\" >> ${config}\n    echo \"forceGCcontentNormalization = 0\" >> ${config}\n    echo \"maxThreads = ${task.cpus}\" >> ${config}\n    echo \"minimalSubclonePresence = 20\" >> ${config}\n    echo \"ploidy = 2,3,4\" >> ${config}\n    echo \"sex = ${gender}\" >> ${config}\n    echo \"window = 50000\" >> ${config}\n    echo \"\" >> ${config}\n\n    echo \"[control]\" >> ${config}\n    echo \"inputFormat = pileup\" >> ${config}\n    echo \"mateFile = \\${PWD}/${mpileupNormal}\" >> ${config}\n    echo \"mateOrientation = FR\" >> ${config}\n    echo \"\" >> ${config}\n\n    echo \"[sample]\" >> ${config}\n    echo \"inputFormat = pileup\" >> ${config}\n    echo \"mateFile = \\${PWD}/${mpileupTumor}\" >> ${config}\n    echo \"mateOrientation = FR\" >> ${config}\n    echo \"\" >> ${config}\n\n    echo \"[BAF]\" >> ${config}\n    echo \"SNPfile = ${dbsnp.fileName}\" >> ${config}\n\n    freec -conf ${config}\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    config = \"${idSampleTumor}_vs_${idSampleNormal}.config.txt\"\n    gender = genderMap[idPatient]\n    \"\"\"\n    touch ${config}\n    echo \"[general]\" >> ${config}\n    echo \"BedGraphOutput = TRUE\" >> ${config}\n    echo \"chrFiles = \\${PWD}/${chrDir.fileName}\" >> ${config}\n    echo \"chrLenFile = \\${PWD}/${chrLength.fileName}\" >> ${config}\n    echo \"coefficientOfVariation = 0.05\" >> ${config}\n    echo \"contaminationAdjustment = TRUE\" >> ${config}\n    echo \"forceGCcontentNormalization = 0\" >> ${config}\n    echo \"maxThreads = ${task.cpus}\" >> ${config}\n    echo \"minimalSubclonePresence = 20\" >> ${config}\n    echo \"ploidy = 2,3,4\" >> ${config}\n    echo \"sex = ${gender}\" >> ${config}\n    echo \"window = 50000\" >> ${config}\n    echo \"\" >> ${config}\n\n    echo \"[control]\" >> ${config}\n    echo \"inputFormat = pileup\" >> ${config}\n    echo \"mateFile = \\${PWD}/${mpileupNormal}\" >> ${config}\n    echo \"mateOrientation = FR\" >> ${config}\n    echo \"\" >> ${config}\n\n    echo \"[sample]\" >> ${config}\n    echo \"inputFormat = pileup\" >> ${config}\n    echo \"mateFile = \\${PWD}/${mpileupTumor}\" >> ${config}\n    echo \"mateOrientation = FR\" >> ${config}\n    echo \"\" >> ${config}\n\n    echo \"[BAF]\" >> ${config}\n    echo \"SNPfile = ${dbsnp.fileName}\" >> ${config}\n\n    freec -conf ${config}\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "haploconfig",
            "WormGender",
            "FREEC"
        ],
        "tools_url": [
            "https://bio.tools/haploconfig",
            "https://bio.tools/wormgender",
            "https://bio.tools/freec"
        ],
        "tools_dico": [
            {
                "name": "haploconfig",
                "uri": "https://bio.tools/haploconfig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Program that can be used to implement tests of neutrality based on the frequency distribution of haplotypes in a sample of DNA sequences (the \u201chaplotype configuration\u201d) and the number of segregating sites. The neutrality tests can be performed conditional on the standard neutral coalescent model with or without recombination, exponential population growth, or island migration.",
                "homepage": "http://www.stanford.edu/group/rosenberglab/haploconfig.html"
            },
            {
                "name": "WormGender",
                "uri": "https://bio.tools/wormgender",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Zoology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Metazoa"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animals"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source software which designed for accurate quantification of sex ratio in Caenorhabditis elegans.  The software functions include, i) automatic recognition and counting of adult hermaphrodites and males, ii) a manual inspection feature that enables manual correction of errors, and iii) flexibility to use new training images to optimize the software for different imaging conditions.",
                "homepage": "http://www.quantworm.org/"
            },
            {
                "name": "FREEC",
                "uri": "https://bio.tools/freec",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3473",
                            "term": "Data mining"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3574",
                            "term": "Human genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Genome alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Genome alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Whole genome alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for control-free copy number alteration (CNA) and allelic imbalances (LOH) detection using deep-sequencing data, particularly useful for cancer studies.",
                "homepage": "http://boevalab.com/FREEC/"
            }
        ],
        "inputs": [
            "mpileupOut",
            "ch_chrDir",
            "ch_chrLength",
            "ch_dbsnp",
            "ch_dbsnpIndex",
            "ch_fasta",
            "ch_fastaFai"
        ],
        "nb_inputs": 7,
        "outputs": [
            "controlFreecViz",
            "controlFreecOut"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/controlFREEC\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "ControlFreecViz": {
        "name_process": "ControlFreecViz",
        "string_process": "\nprocess ControlFreecViz {\n    label 'cpus_2'\n\n    tag {idSampleTumor + \"_vs_\" + idSampleNormal}\n\n    publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/controlFREEC\", mode: params.publishDirMode\n\n    input:\n        set idPatient, idSampleNormal, idSampleTumor, file(cnvTumor), file(ratioTumor), file(cnvNormal), file(ratioNormal), file(bafTumor), file(bafNormal) from controlFreecViz\n\n    output:\n        set file(\"*.txt\"), file(\"*.png\"), file(\"*.bed\") into controlFreecVizOut\n\n    when: 'controlfreec' in tools\n\n    \"\"\"\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/assess_significance.R | R --slave --args ${cnvTumor} ${ratioTumor}\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/assess_significance.R | R --slave --args ${cnvNormal} ${ratioNormal}\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/makeGraph.R | R --slave --args 2 ${ratioTumor} ${bafTumor}\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/makeGraph.R | R --slave --args 2 ${ratioNormal} ${bafNormal}\n    perl /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/freec2bed.pl -f ${ratioTumor} > ${idSampleTumor}.bed\n    perl /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/freec2bed.pl -f ${ratioNormal} > ${idSampleNormal}.bed\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/assess_significance.R | R --slave --args ${cnvTumor} ${ratioTumor}\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/assess_significance.R | R --slave --args ${cnvNormal} ${ratioNormal}\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/makeGraph.R | R --slave --args 2 ${ratioTumor} ${bafTumor}\n    cat /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/makeGraph.R | R --slave --args 2 ${ratioNormal} ${bafNormal}\n    perl /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/freec2bed.pl -f ${ratioTumor} > ${idSampleTumor}.bed\n    perl /opt/conda/envs/nf-core-sarek-${workflow.manifest.version}/bin/freec2bed.pl -f ${ratioNormal} > ${idSampleNormal}.bed\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "controlFreecViz"
        ],
        "nb_inputs": 1,
        "outputs": [
            "controlFreecVizOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "tag {idSampleTumor + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outdir}/VariantCalling/${idSampleTumor}_vs_${idSampleNormal}/controlFREEC\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "BcftoolsStats": {
        "name_process": "BcftoolsStats",
        "string_process": "\nprocess BcftoolsStats {\n\n    label 'cpus_1'\n\n    tag {\"${variantCaller} - ${vcf}\"}\n\n    publishDir \"${params.outdir}/Reports/${idSample}/BCFToolsStats\", mode: params.publishDirMode\n\n    input:\n        set variantCaller, idSample, file(vcf) from vcfBCFtools\n\n    output:\n        file (\"*.bcf.tools.stats.out\") into bcftoolsReport\n\n    when: !('bcftools' in skipQC)\n\n    script:\n    \"\"\"\n    bcftools stats ${vcf} > ${reduceVCF(vcf.fileName)}.bcf.tools.stats.out\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    bcftools stats ${vcf} > ${reduceVCF(vcf.fileName)}.bcf.tools.stats.out\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcfBCFtools"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bcftoolsReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {\"${variantCaller} - ${vcf}\"}",
            "publishDir \"${params.outdir}/Reports/${idSample}/BCFToolsStats\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "Vcftools": {
        "name_process": "Vcftools",
        "string_process": "\nprocess Vcftools {\n\n    label 'cpus_1'\n\n    tag {\"${variantCaller} - ${vcf}\"}\n\n    publishDir \"${params.outdir}/Reports/${idSample}/VCFTools\", mode: params.publishDirMode\n\n    input:\n        set variantCaller, idSample, file(vcf) from vcfVCFtools\n\n    output:\n        file (\"${reduceVCF(vcf.fileName)}.*\") into vcftoolsReport\n\n    when: !('vcftools' in skipQC)\n\n    script:\n    \"\"\"\n    vcftools \\\n    --gzvcf ${vcf} \\\n    --TsTv-by-count \\\n    --out ${reduceVCF(vcf.fileName)}\n\n    vcftools \\\n    --gzvcf ${vcf} \\\n    --TsTv-by-qual \\\n    --out ${reduceVCF(vcf.fileName)}\n\n    vcftools \\\n    --gzvcf ${vcf} \\\n    --FILTER-summary \\\n    --out ${reduceVCF(vcf.fileName)}\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    vcftools \\\n    --gzvcf ${vcf} \\\n    --TsTv-by-count \\\n    --out ${reduceVCF(vcf.fileName)}\n\n    vcftools \\\n    --gzvcf ${vcf} \\\n    --TsTv-by-qual \\\n    --out ${reduceVCF(vcf.fileName)}\n\n    vcftools \\\n    --gzvcf ${vcf} \\\n    --FILTER-summary \\\n    --out ${reduceVCF(vcf.fileName)}\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "VCFtools"
        ],
        "tools_url": [
            "https://bio.tools/vcftools"
        ],
        "tools_dico": [
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            }
        ],
        "inputs": [
            "vcfVCFtools"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcftoolsReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_1'",
            "tag {\"${variantCaller} - ${vcf}\"}",
            "publishDir \"${params.outdir}/Reports/${idSample}/VCFTools\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "MultiQC": {
        "name_process": "MultiQC",
        "string_process": "\nprocess MultiQC {\n\n    label 'cpus_2'\n\n    publishDir \"${params.outdir}/MultiQC\", mode: params.publishDirMode\n\n    input:\n        file (multiqcConfig) from Channel.value(params.multiqc_config ? file(params.multiqc_config) : \"\")\n        file (versions) from yamlSoftwareVersion\n        file ('bamQC/*') from bamQCReport.collect().ifEmpty([])\n        file ('BCFToolsStats/*') from bcftoolsReport.collect().ifEmpty([])\n        file ('FastQC/*') from fastQCReport.collect().ifEmpty([])\n        file ('MarkDuplicates/*') from markDuplicatesReport.collect().ifEmpty([])\n        file ('SamToolsStats/*') from samtoolsStatsReport.collect().ifEmpty([])\n        file ('snpEff/*') from snpeffReport.collect().ifEmpty([])\n        file ('VCFTools/*') from vcftoolsReport.collect().ifEmpty([])\n\n    output:\n        set file(\"*multiqc_report.html\"), file(\"*multiqc_data\") into multiQCOut\n\n    when: !('multiqc' in skipQC)\n\n    script:\n    \"\"\"\n    multiqc -f -v .\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    multiqc -f -v .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "yamlSoftwareVersion",
            "bamQCReport",
            "bcftoolsReport",
            "fastQCReport",
            "markDuplicatesReport",
            "samtoolsStatsReport",
            "snpeffReport",
            "vcftoolsReport"
        ],
        "nb_inputs": 8,
        "outputs": [
            "multiQCOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__PGP-UK-sarek",
        "directive": [
            "label 'cpus_2'",
            "publishDir \"${params.outdir}/MultiQC\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "manta": {
        "name_process": "manta",
        "string_process": "\nprocess manta {\n    errorStrategy 'terminate'                                        \n\n    container = 'docker://brentp/rare-disease-sv:v0.1.2'\n    publishDir \"results-rare-disease/manta-sample-vcfs/\", mode: 'copy'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(val(sample_name), path(bam), path(index))\n        path(fasta)\n        path(fai)\n\n    output:\n        tuple(file(\"${sample_name}.diploidSV.vcf.gz\"), file(\"${sample_name}.diploidSV.vcf.gz.tbi\"), val(sample_name))\n\n    script:\n    \"\"\"\n# limit to larger chroms ( > 10MB)\nawk '\\$2 > 10000000 || \\$1 ~/(M|MT)\\$/ { print \\$1\"\\t0\\t\"\\$2 }' $fai | bgzip -c > cr.bed.gz\n\ntabix cr.bed.gz\nconfigManta.py --bam ${bam} --referenceFasta $fasta --runDir . --callRegions cr.bed.gz\npython2 ./runWorkflow.py -j ${task.cpus}\n\nconvertInversion.py \\$(which samtools) $fasta results/variants/diploidSV.vcf.gz \\\n    | bcftools view -O z -o ${sample_name}.diploidSV.vcf.gz\nbcftools index -f --tbi ${sample_name}.diploidSV.vcf.gz\n\nrm -rf results/\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n# limit to larger chroms ( > 10MB)\nawk '\\$2 > 10000000 || \\$1 ~/(M|MT)\\$/ { print \\$1\"\\t0\\t\"\\$2 }' $fai | bgzip -c > cr.bed.gz\n\ntabix cr.bed.gz\nconfigManta.py --bam ${bam} --referenceFasta $fasta --runDir . --callRegions cr.bed.gz\npython2 ./runWorkflow.py -j ${task.cpus}\n\nconvertInversion.py \\$(which samtools) $fasta results/variants/diploidSV.vcf.gz \\\n    | bcftools view -O z -o ${sample_name}.diploidSV.vcf.gz\nbcftools index -f --tbi ${sample_name}.diploidSV.vcf.gz\n\nrm -rf results/\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_name",
            "bam",
            "index",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "errorStrategy 'terminate'",
            "container = 'docker://brentp/rare-disease-sv:v0.1.2'",
            "publishDir \"results-rare-disease/manta-sample-vcfs/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "dysgu": {
        "name_process": "dysgu",
        "string_process": "\nprocess dysgu {\n    errorStrategy 'terminate'                                        \n\n    container = 'docker://brentp/rare-disease-sv:v0.1.2'\n    publishDir \"results-rare-disease/dysgu-sample-vcfs/\", mode: 'copy'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(val(sample_name), path(bam), path(index))\n        path(fasta)\n        path(fai)\n\n    output:\n        tuple(file(\"${output_file}\"), file(\"${output_file}.tbi\"), val(sample_name))\n\nscript:\n    output_file = \"${sample_name}.dysgu.vcf.gz\"\n    \"\"\"\ndp=\\$(tiwih meandepth $bam)\nM=\\$((dp * 5))\n\nawk '\\$2 > 10000000 || \\$1 ~/(M|MT)\\$/ { print \\$1\"\\t0\\t\"\\$2 }' $fai > cr.bed\n\ndysgu run --clean \\\n    --pl pe --mode pe \\\n    -o dysgu.${sample_name}.vcf \\\n    -p ${task.cpus} \\\n    --max-cov \\$M \\\n    --thresholds 0.25,0.25,0.25,0.25,0.25 \\\n    --search cr.bed \\\n    $fasta \\${TMPDIR}/dysgu.${sample_name} ${bam}\n\nbcftools view -O u -o ${sample_name}.R.bcf dysgu.${sample_name}.vcf\nbcftools sort --temp-dir \\$TMPDIR -m 2G -O z -o ${output_file} ${sample_name}.R.bcf\nbcftools index --tbi ${output_file}\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    output_file = \"${sample_name}.dysgu.vcf.gz\"\n    \"\"\"\ndp=\\$(tiwih meandepth $bam)\nM=\\$((dp * 5))\n\nawk '\\$2 > 10000000 || \\$1 ~/(M|MT)\\$/ { print \\$1\"\\t0\\t\"\\$2 }' $fai > cr.bed\n\ndysgu run --clean \\\n    --pl pe --mode pe \\\n    -o dysgu.${sample_name}.vcf \\\n    -p ${task.cpus} \\\n    --max-cov \\$M \\\n    --thresholds 0.25,0.25,0.25,0.25,0.25 \\\n    --search cr.bed \\\n    $fasta \\${TMPDIR}/dysgu.${sample_name} ${bam}\n\nbcftools view -O u -o ${sample_name}.R.bcf dysgu.${sample_name}.vcf\nbcftools sort --temp-dir \\$TMPDIR -m 2G -O z -o ${output_file} ${sample_name}.R.bcf\nbcftools index --tbi ${output_file}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_name",
            "bam",
            "index",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "errorStrategy 'terminate'",
            "container = 'docker://brentp/rare-disease-sv:v0.1.2'",
            "publishDir \"results-rare-disease/dysgu-sample-vcfs/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "concat_by_sample": {
        "name_process": "concat_by_sample",
        "string_process": "\nprocess concat_by_sample {\n    errorStrategy 'terminate'                                        \n\n    container = 'docker://brentp/rare-disease-sv:v0.1.2'\n    publishDir \"results-rare-disease/sv-sample-merged/\", mode: 'copy'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(path(vcfs), path(indexes), val(sample_name))\n    output: file(\"${output_file}\")\n\n    script:\n    output_file = \"${sample_name}.concat-svs.vcf\"\n    \"\"\"\n    bcftools concat -a -O v -o ${output_file} *.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    output_file = \"${sample_name}.concat-svs.vcf\"\n    \"\"\"\n    bcftools concat -a -O v -o ${output_file} *.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_name",
            "vcfs",
            "indexes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "errorStrategy 'terminate'",
            "container = 'docker://brentp/rare-disease-sv:v0.1.2'",
            "publishDir \"results-rare-disease/sv-sample-merged/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "jasmine": {
        "name_process": "jasmine",
        "string_process": "\nprocess jasmine {\n    container = 'docker://brentp/rare-disease-sv:v0.1.2'\n    publishDir \"results-rare-disease/jasmine-merged-sites/\", mode: 'copy'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        val(sample_vcfs)\n\tpath(fasta)\n        path(fai)\n    output: tuple(file(\"${output_file}\"), file(\"${output_file}.tbi\"))\n\n    script:\n    output_file = \"jasmine.merged.vcf.gz\"\n    file(\"$workDir/vcfs.list\").withWriter { fh ->\n            sample_vcfs.each { vcf ->\n                                                                                             \n                                                \n                fh.write(vcf.toString()); fh.write(\"\\n\")\n            }\n    }\n                                                      \n    if(sample_vcfs.size() > 1) {\n        \"\"\"\n        # jasmine can't do gzip.\n        jasmine -Xmx6g --threads ${task.cpus} --allow_intrasample --file_list=${workDir}/vcfs.list out_file=${output_file}\n        # NOTE: removing BNDs and setting min start to > 150 as paragraph fails if start < readlength\n        tiwih setsvalt --drop-bnds --inv-2-ins -o ${output_file}.tmp.vcf.gz $fasta $output_file\n        bcftools sort --temp-dir \\$TMPDIR -m 2G -O z -o ${output_file} ${output_file}.tmp.vcf.gz\n        bcftools index --tbi $output_file\n        \"\"\"\n    } else {\n        \"\"\"\n        tiwih setsvalt --drop-bnds -o ${output_file} $fasta ${sample_vcfs[0]}\n        tabix $output_file\n        \"\"\"\n    }\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    output_file = \"jasmine.merged.vcf.gz\"\n    file(\"$workDir/vcfs.list\").withWriter { fh ->\n            sample_vcfs.each { vcf ->\n                                                                                             \n                                                \n                fh.write(vcf.toString()); fh.write(\"\\n\")\n            }\n    }\n                                                      \n    if(sample_vcfs.size() > 1) {\n        \"\"\"\n        # jasmine can't do gzip.\n        jasmine -Xmx6g --threads ${task.cpus} --allow_intrasample --file_list=${workDir}/vcfs.list out_file=${output_file}\n        # NOTE: removing BNDs and setting min start to > 150 as paragraph fails if start < readlength\n        tiwih setsvalt --drop-bnds --inv-2-ins -o ${output_file}.tmp.vcf.gz $fasta $output_file\n        bcftools sort --temp-dir \\$TMPDIR -m 2G -O z -o ${output_file} ${output_file}.tmp.vcf.gz\n        bcftools index --tbi $output_file\n        \"\"\"\n    } else {\n        \"\"\"\n        tiwih setsvalt --drop-bnds -o ${output_file} $fasta ${sample_vcfs[0]}\n        tabix $output_file\n        \"\"\"\n    }",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Jasmine",
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/Jasmine",
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "Jasmine",
                "uri": "https://bio.tools/Jasmine",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3792",
                                    "term": "miRNA expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3792",
                                    "term": "miRNA expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a Java pipeline for isomiR characterization in miRNA-Seq Data.\n\nMOTIVATION:The existence of complex subpopulations of miRNA isoforms, or isomiRs, is well established. While many tools exist for investigating isomiR populations, they differ in how they characterize an isomiR, making it difficult to compare results across different tools. Thus, there is a need for a more comprehensive and systematic standard for defining isomiRs. Such a standard would allow investigation of isomiR population structure in progressively more refined sub-populations, permitting the identification of more subtle changes between conditions and leading to an improved understanding of the processes that generate these differences. RESULTS:We developed Jasmine, a software tool that incorporates a hierarchal framework for characterizing isomiR populations",
                "homepage": "https://bitbucket.org/bipous/jasmine/src/master/"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_vcfs",
            "fasta",
            "fai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease-sv:v0.1.2'",
            "publishDir \"results-rare-disease/jasmine-merged-sites/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "paragraph_duphold": {
        "name_process": "paragraph_duphold",
        "string_process": "\nprocess paragraph_duphold {\n  errorStrategy 'terminate'                                        \n  shell = ['/bin/bash', '-euo', 'pipefail']\n  container = 'docker://brentp/rare-disease-sv:v0.1.2'\n\n  publishDir \"results-rare-disease/paragraph-genotyped-sample-vcfs/\", mode: 'copy'\n\n  input:\n     tuple(path(site_vcf), path(site_vcf_index))\n     tuple(val(sample), path(bam), path(index))\n     path(fasta)\n     path(fai)\n\n  output: tuple(path(\"${output_file}\"), path(\"${output_file}.csi\"))\n\n  script:\n  output_file = \"${sample}.paragraph.vcf.gz\"\n\n  \"\"\"\ndp=\\$(tiwih meandepth $bam)\ntsample=\\$(tiwih samplename $bam)\necho \"id\\tpath\\tdepth\\tread length\" > sample.manifest\necho \"\\$tsample\\t$bam\\t\\$dp\\t150\" >> sample.manifest\nM=\\$((dp * 5))\ncat sample.manifest\n\n# this is the main paragraph entrypoint\nmultigrmpy.py -i $site_vcf \\\n    -m sample.manifest \\\n    -r $fasta \\\n    -o t \\\n    -t ${task.cpus} \\\n    -M \\$M\n\n\n# duphold adds depth annotations looking at coverage fold-change around Svs\nduphold -d -v t/genotypes.vcf.gz -b $bam -f $fasta -t 4 -o $output_file\nbcftools index --threads 3 $output_file\n  \"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "  output_file = \"${sample}.paragraph.vcf.gz\"\n\n  \"\"\"\ndp=\\$(tiwih meandepth $bam)\ntsample=\\$(tiwih samplename $bam)\necho \"id\\tpath\\tdepth\\tread length\" > sample.manifest\necho \"\\$tsample\\t$bam\\t\\$dp\\t150\" >> sample.manifest\nM=\\$((dp * 5))\ncat sample.manifest\n\n# this is the main paragraph entrypoint\nmultigrmpy.py -i $site_vcf \\\n    -m sample.manifest \\\n    -r $fasta \\\n    -o t \\\n    -t ${task.cpus} \\\n    -M \\$M\n\n\n# duphold adds depth annotations looking at coverage fold-change around Svs\nduphold -d -v t/genotypes.vcf.gz -b $bam -f $fasta -t 4 -o $output_file\nbcftools index --threads 3 $output_file\n  \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "site_vcf",
            "site_vcf_index",
            "sample",
            "bam",
            "index",
            "fasta",
            "fai"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "errorStrategy 'terminate' shell = ['/bin/bash', '-euo', 'pipefail']",
            "container = 'docker://brentp/rare-disease-sv:v0.1.2'",
            "publishDir \"results-rare-disease/paragraph-genotyped-sample-vcfs/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "square_svcsq": {
        "name_process": "square_svcsq",
        "string_process": "\nprocess square_svcsq {\n  errorStrategy 'terminate'                                        \n  shell = ['/bin/bash', '-euo', 'pipefail']\n  container = 'docker://brentp/rare-disease-sv:v0.1.2'\n  publishDir \"results-rare-disease/\", mode: 'copy'\n\n  input: val(sample_vcfs)\n         path(gff_path)\n         val(cohort_name)\n  output: tuple(file(\"${output_file}\"), file(\"${output_file}.csi\"))\n\n  script:\n  print(sample_vcfs)\n  file(\"$workDir/joint.vcfs.list\").withWriter { fh ->\n        sample_vcfs.each { vcf ->\n\t    fh.write(vcf[0].toString()); fh.write(\"\\n\")\n        }\n  }\n  output_file = \"${cohort_name}.svs.vcf.gz\"\n  \"\"\"\n  bcftools merge -m none --threads 3 -O u --file-list $workDir/joint.vcfs.list \\\n    | bcftools annotate --threads 3 -x \"INFO/GRMPY_ID\" -O v -o ${output_file}.tmp.vcf.gz\n  gzip -dc ${gff_path} > unc.gff\n  svpack consequence ${output_file}.tmp.vcf.gz unc.gff | bgzip -c > $output_file\n  bcftools index --threads 3 $output_file\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  print(sample_vcfs)\n  file(\"$workDir/joint.vcfs.list\").withWriter { fh ->\n        sample_vcfs.each { vcf ->\n\t    fh.write(vcf[0].toString()); fh.write(\"\\n\")\n        }\n  }\n  output_file = \"${cohort_name}.svs.vcf.gz\"\n  \"\"\"\n  bcftools merge -m none --threads 3 -O u --file-list $workDir/joint.vcfs.list \\\n    | bcftools annotate --threads 3 -x \"INFO/GRMPY_ID\" -O v -o ${output_file}.tmp.vcf.gz\n  gzip -dc ${gff_path} > unc.gff\n  svpack consequence ${output_file}.tmp.vcf.gz unc.gff | bgzip -c > $output_file\n  bcftools index --threads 3 $output_file\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "errorStrategy 'terminate' shell = ['/bin/bash', '-euo', 'pipefail']",
            "container = 'docker://brentp/rare-disease-sv:v0.1.2'",
            "publishDir \"results-rare-disease/\", mode: 'copy' input: val(sample_vcfs) path(gff_path) val(cohort_name) output: tuple(file(\"${output_file}\"), file(\"${output_file}.csi\"))"
        ],
        "when": "",
        "stub": ""
    },
    "split": {
        "name_process": "split",
        "string_process": "\nprocess split {\n    container = 'docker://brentp/rare-disease:v0.0.3'\n\n    input: tuple(path(gvcf), path(tbi))\n           path(fai)\n    output: file(\"*.split.gvcf.gz\")\n\n    script:\n    \"\"\"\n    # get large chroms and chrM in one file each\n    for chrom in \\$(awk '\\$2 > 40000000 || \\$1 ~/(M|MT)\\$/' $fai | cut -f 1); do\n        bcftools view $gvcf --threads 3 -O z -o \\$(basename $gvcf .gvcf.gz).\\${chrom}.split.gvcf.gz \\$chrom\n    done\n    # small HLA and gl chroms all to go single file\n    awk '!(\\$2 > 40000000 || \\$1 ~/(M|MT)\\$/) { print \\$1\"\\\\t0\\\\t\"\\$2+1 }' $fai > other_chroms\n    # if it's non-empty then create the extras / other split file\n    if [ -s other_chroms ]; then\n        bcftools view $gvcf --threads 3 -R other_chroms -O z -o \\$(basename $gvcf .gvcf.gz).OTHER.split.gvcf.gz\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    # get large chroms and chrM in one file each\n    for chrom in \\$(awk '\\$2 > 40000000 || \\$1 ~/(M|MT)\\$/' $fai | cut -f 1); do\n        bcftools view $gvcf --threads 3 -O z -o \\$(basename $gvcf .gvcf.gz).\\${chrom}.split.gvcf.gz \\$chrom\n    done\n    # small HLA and gl chroms all to go single file\n    awk '!(\\$2 > 40000000 || \\$1 ~/(M|MT)\\$/) { print \\$1\"\\\\t0\\\\t\"\\$2+1 }' $fai > other_chroms\n    # if it's non-empty then create the extras / other split file\n    if [ -s other_chroms ]; then\n        bcftools view $gvcf --threads 3 -R other_chroms -O z -o \\$(basename $gvcf .gvcf.gz).OTHER.split.gvcf.gz\n    fi\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.0.3' input: tuple(path(gvcf), path(tbi)) path(fai) output: file(\"*.split.gvcf.gz\")"
        ],
        "when": "",
        "stub": ""
    },
    "split_by_size": {
        "name_process": "split_by_size",
        "string_process": "\nprocess split_by_size {\n    container = 'docker://brentp/rare-disease:v0.2.1'\n\n    input: path(fai)\n           val(chunk_size)\n    output: stdout\n\n    script:\n    \"\"\"\ntiwih fairegions $fai --region_size $chunk_size\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\ntiwih fairegions $fai --region_size $chunk_size\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.1' input: path(fai) val(chunk_size) output: stdout"
        ],
        "when": "",
        "stub": ""
    },
    "forest_filter": {
        "name_process": "forest_filter",
        "string_process": "\nprocess forest_filter {\n    input: tuple(val(region), path(vcfs), path(crams), path(indexes))\n           path(ref)\n           path(fai)\n    output: path(\"${output_path}\")\n\n    script:\n       reg=region.replaceAll(\":\", \"_\")\n       output_path=\"octopus.filtered.${reg}.vcf.gz\"\n       file(\"$workDir/${reg}.crams.list\").withWriter { fh ->\n            crams.each { cram ->\n                fh.write(cram.toString()); fh.write(\"\\n\")\n            }\n        }\n       \"\"\"\noctopus -R $ref -i $workDir/${reg}.crams.list --filter-vcf ${vcfs[0]} \\\n    --forest-model /opt/germline.v0.7.4.forest.gz \\\n   -o ${output_path}\n      \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "       reg=region.replaceAll(\":\", \"_\")\n       output_path=\"octopus.filtered.${reg}.vcf.gz\"\n       file(\"$workDir/${reg}.crams.list\").withWriter { fh ->\n            crams.each { cram ->\n                fh.write(cram.toString()); fh.write(\"\\n\")\n            }\n        }\n       \"\"\"\noctopus -R $ref -i $workDir/${reg}.crams.list --filter-vcf ${vcfs[0]} \\\n    --forest-model /opt/germline.v0.7.4.forest.gz \\\n   -o ${output_path}\n      \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "OCTOPUS"
        ],
        "tools_url": [
            "https://bio.tools/octopus"
        ],
        "tools_dico": [
            {
                "name": "OCTOPUS",
                "uri": "https://bio.tools/octopus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0270",
                                    "term": "Transmembrane protein analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            }
                        ]
                    }
                ],
                "description": "Prediction of membrane protein topology and signal peptides.",
                "homepage": "http://octopus.cbr.su.se/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "octopus_trio": {
        "name_process": "octopus_trio",
        "string_process": "\nprocess octopus_trio {\n    input: each(region)\n           tuple(val(family_id), val(sample_id), val(dad_id), val(mom_id), path(kid_bam), path(dad_bam), path(mom_bam), path(kid_index), path(dad_index), path(mom_index))\n           path(ref)\n           path(fai)\n    output: tuple(val(\"${family_id}\"), val(\"${region}\"), path(\"${output_path}\"))\n    script:\n       output_path=\"${sample_id}.${region.replaceAll(':','_')}.trio.vcf.gz\"\n       \"\"\"\nhostname\nwhich octopus\noctopus -R $ref -I ${kid_bam} ${dad_bam} ${mom_bam} -M  ${mom_id} -F ${dad_id} \\\n    -p Y=2 chrY=2 chrM=1 MT=1 chrMT=1 --threads ${task.cpus} --one-based-indexing -T ${region} \\\n    -o ${output_path}\n#--bamout \"${sample_id}.realigned.bams/\" \\\n       \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "       output_path=\"${sample_id}.${region.replaceAll(':','_')}.trio.vcf.gz\"\n       \"\"\"\nhostname\nwhich octopus\noctopus -R $ref -I ${kid_bam} ${dad_bam} ${mom_bam} -M  ${mom_id} -F ${dad_id} \\\n    -p Y=2 chrY=2 chrM=1 MT=1 chrMT=1 --threads ${task.cpus} --one-based-indexing -T ${region} \\\n    -o ${output_path}\n#--bamout \"${sample_id}.realigned.bams/\" \\\n       \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "whichdb",
            "OCTOPUS"
        ],
        "tools_url": [
            "https://bio.tools/whichdb",
            "https://bio.tools/octopus"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            },
            {
                "name": "OCTOPUS",
                "uri": "https://bio.tools/octopus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0270",
                                    "term": "Transmembrane protein analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            }
                        ]
                    }
                ],
                "description": "Prediction of membrane protein topology and signal peptides.",
                "homepage": "http://octopus.cbr.su.se/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "octopus_fam_or_single": {
        "name_process": "octopus_fam_or_single",
        "string_process": "\nprocess octopus_fam_or_single {\n    input: each(region)\n           tuple(val(family_id), path(bams), path(indexes))\n           path(ref)\n           path(fai)\n    output: tuple(val(\"${family_id}\"), val(\"${region}\"), path(\"${output_path}\"))\n    script:\n       output_path=\"${family_id}.${region.replaceAll(':', '_')}.notrio.vcf.gz\"\n       bamout=\"${family_id}.realigned.bams.fam/\"\n       if (bams.size() == 1 ) {\n         bamout += \"octopus.${family_id}.bam\"\n       }\n       \"\"\"\nhostname\nwhich octopus\noctopus -R $ref -I $bams \\\n    -p MT=1, chrM=1 chrMT=1 Y=2 chrY=2 --threads ${task.cpus} --one-based-indexing -T ${region} \\\n    -o ${output_path}\n#--bamout ${bamout} \\\n       \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "       output_path=\"${family_id}.${region.replaceAll(':', '_')}.notrio.vcf.gz\"\n       bamout=\"${family_id}.realigned.bams.fam/\"\n       if (bams.size() == 1 ) {\n         bamout += \"octopus.${family_id}.bam\"\n       }\n       \"\"\"\nhostname\nwhich octopus\noctopus -R $ref -I $bams \\\n    -p MT=1, chrM=1 chrMT=1 Y=2 chrY=2 --threads ${task.cpus} --one-based-indexing -T ${region} \\\n    -o ${output_path}\n#--bamout ${bamout} \\\n       \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "whichdb",
            "OCTOPUS"
        ],
        "tools_url": [
            "https://bio.tools/whichdb",
            "https://bio.tools/octopus"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            },
            {
                "name": "OCTOPUS",
                "uri": "https://bio.tools/octopus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0270",
                                    "term": "Transmembrane protein analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            }
                        ]
                    }
                ],
                "description": "Prediction of membrane protein topology and signal peptides.",
                "homepage": "http://octopus.cbr.su.se/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "DeepVariant": {
        "name_process": "DeepVariant",
        "string_process": "\nprocess DeepVariant {\n    label \"DeepVariant\"\n    container = 'docker://gcr.io/deepvariant-docker/deepvariant:1.1.0'\n    publishDir \"${params.output_dir}/gvcfs/\", mode: 'copy'\n\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(val(sample_id), path(aln_file), path(aln_index))\n        path(fasta)\n        path(fai)\n\n    output:\n                                                                             \n      tuple(file(\"${sample_id}.gvcf.gz\"), file(\"${sample_id}.gvcf.gz.tbi\"))\n\n\n    script:\n    is_cram = aln_file.toString().endsWith(\".cram\")\n    \"\"\"\n# faster to convert cram to bam, but easier to use original DV image.\n#if [[ \"$is_cram\" == \"true\" ]]; then\n#    samtools view --write-index --threads ${task.cpus} -bT $fasta -o ${sample_id}.bam $aln_file\n#else\n#    ln -sf $aln_file ${sample_id}.bam\n#    ln -sf $aln_index ${sample_id}.bam.bai\n#fi\n#--reads=${sample_id}.bam \\\n\necho \"TMPDIR:\\$TMPDIR\"\n\n/opt/deepvariant/bin/run_deepvariant \\\n    --reads=${aln_file} \\\n    --intermediate_results_dir=\\$TMPDIR \\\n    --model_type=${params.model_type} \\\n    --output_gvcf=${sample_id}.gvcf.gz \\\n    --output_vcf=${sample_id}.vcf.gz \\\n    --num_shards=${task.cpus} \\\n    --ref=$fasta\n \n#rm -f ${sample_id}.bam\n#bcftools index --threads 6 ${sample_id}.gvcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    is_cram = aln_file.toString().endsWith(\".cram\")\n    \"\"\"\n# faster to convert cram to bam, but easier to use original DV image.\n#if [[ \"$is_cram\" == \"true\" ]]; then\n#    samtools view --write-index --threads ${task.cpus} -bT $fasta -o ${sample_id}.bam $aln_file\n#else\n#    ln -sf $aln_file ${sample_id}.bam\n#    ln -sf $aln_index ${sample_id}.bam.bai\n#fi\n#--reads=${sample_id}.bam \\\n\necho \"TMPDIR:\\$TMPDIR\"\n\n/opt/deepvariant/bin/run_deepvariant \\\n    --reads=${aln_file} \\\n    --intermediate_results_dir=\\$TMPDIR \\\n    --model_type=${params.model_type} \\\n    --output_gvcf=${sample_id}.gvcf.gz \\\n    --output_vcf=${sample_id}.vcf.gz \\\n    --num_shards=${task.cpus} \\\n    --ref=$fasta\n \n#rm -f ${sample_id}.bam\n#bcftools index --threads 6 ${sample_id}.gvcf.gz\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "aln_file",
            "aln_index",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "label \"DeepVariant\"",
            "container = 'docker://gcr.io/deepvariant-docker/deepvariant:1.1.0'",
            "publishDir \"${params.output_dir}/gvcfs/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "glnexus_anno_slivar": {
        "name_process": "glnexus_anno_slivar",
        "string_process": "\nprocess glnexus_anno_slivar {\n    container = 'docker://brentp/rare-disease:v0.2.2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    publishDir \"${params.output_dir}/joint-by-chrom/\", mode: 'copy'\n\n    input:\n        tuple(path(gvcfs), val(chrom))\n        path(fasta)\n        path(fai)\n        path(gff)\n        path(slivar_zip)\n        val(cohort_name)\n\n    output: tuple(path(output_file), path(output_csi))\n\n    script:\n        output_file = \"${cohort_name}.${chrom}.glnexus.anno.bcf\"\n        output_csi = \"${output_file}.csi\"\n        file(\"$workDir/file.list.${cohort_name}.${chrom}\").withWriter { fh ->\n            gvcfs.each { gvcf ->\n                fh.write(gvcf.toString()); fh.write(\"\\n\")\n            }\n        }\n        \"\"\"\n# GRCh38.99\n# GRCh37.75\n\nglnexus_cli \\\n    -t ${task.cpus} \\\n    --mem-gbytes 128 \\\n    --config DeepVariant${params.model_type} \\\n    --list $workDir/file.list.${cohort_name}.${chrom} \\\n| bcftools norm --threads 3 -m - -w 10000 -f $fasta -O u \\\n| bcftools csq --threads 3 -s - --ncsq 50 -g $gff -l -f $fasta - -o - -O v \\\n| snpEff eff -noStats -dataDir $projectDir GRCh38.99 \\\n| slivar expr -g $slivar_zip -o $output_file --vcf -\n\n\nbcftools index --threads 6 $output_file\n    \"\"\"\n\n}",
        "nb_lignes_process": 41,
        "string_script": "        output_file = \"${cohort_name}.${chrom}.glnexus.anno.bcf\"\n        output_csi = \"${output_file}.csi\"\n        file(\"$workDir/file.list.${cohort_name}.${chrom}\").withWriter { fh ->\n            gvcfs.each { gvcf ->\n                fh.write(gvcf.toString()); fh.write(\"\\n\")\n            }\n        }\n        \"\"\"\n# GRCh38.99\n# GRCh37.75\n\nglnexus_cli \\\n    -t ${task.cpus} \\\n    --mem-gbytes 128 \\\n    --config DeepVariant${params.model_type} \\\n    --list $workDir/file.list.${cohort_name}.${chrom} \\\n| bcftools norm --threads 3 -m - -w 10000 -f $fasta -O u \\\n| bcftools csq --threads 3 -s - --ncsq 50 -g $gff -l -f $fasta - -o - -O v \\\n| snpEff eff -noStats -dataDir $projectDir GRCh38.99 \\\n| slivar expr -g $slivar_zip -o $output_file --vcf -\n\n\nbcftools index --threads 6 $output_file\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "snpEff"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/snpeff"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            }
        ],
        "inputs": [
            "chrom",
            "gvcfs",
            "fasta",
            "fai",
            "gff",
            "slivar_zip",
            "cohort_name",
            "output_file",
            "output_csi"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.2' shell = ['/bin/bash', '-euo', 'pipefail']",
            "publishDir \"${params.output_dir}/joint-by-chrom/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "slivar_rare_disease": {
        "name_process": "slivar_rare_disease",
        "string_process": "\nprocess slivar_rare_disease {\n  container = 'docker://brentp/rare-disease:v0.2.2'\n  publishDir \"${params.output_dir}/joint-by-chrom-slivar/\", mode: 'copy'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n\n  input: tuple(path(bcf), path(csi))\n         path(ped)\n         path(gnomad_zip)\n\n  output: tuple(path(slivar_bcf), path(slivar_ch_bcf), path(slivar_bcf_csi), path(slivar_ch_bcf_csi), path(slivar_tsv), path(slivar_counts))\n\n  script:\n  slivar_bcf = bcf.getBaseName() + \".slivar.bcf\"\n  slivar_ch_bcf = bcf.getBaseName() + \".slivar.ch.bcf\"\n  slivar_bcf_csi = slivar_bcf + \".csi\"\n  slivar_ch_bcf_csi = slivar_ch_bcf + \".csi\"\n  slivar_tsv = bcf.getBaseName() + \".slivar.tsv\"\n  slivar_counts = bcf.getBaseName() + \".slivar.counts.txt\"\n\n  \"\"\"\n# NOTE: we do *NOT* limit to impactful so that must be reported and used by slivar tsv\n\nexport SLIVAR_SUMMARY_FILE=${slivar_counts}.main\nslivar expr --vcf $bcf \\\n    --ped $ped \\\n    -o $slivar_bcf \\\n    --pass-only \\\n    -g $gnomad_zip \\\n    --info 'INFO.gnomad_popmax_af < 0.01 && variant.FILTER == \"PASS\" && variant.ALT[0] != \"*\"' \\\n    --js /opt/slivar/slivar-functions.js \\\n    --family-expr 'denovo:fam.every(segregating_denovo) && INFO.gnomad_popmax_af < 0.001' \\\n    --family-expr 'recessive:fam.every(segregating_recessive)' \\\n    --family-expr 'x_denovo:(variant.CHROM == \"X\" || variant.CHROM == \"chrX\") && fam.every(segregating_denovo_x) && INFO.gnomad_popmax_af < 0.001' \\\n    --family-expr 'x_recessive:(variant.CHROM == \"X\" || variant.CHROM == \"chrX\") && fam.every(segregating_recessive_x)' \\\n    --family-expr 'dominant:INFO.gnomad_popmax_af < 0.005 && fam.every(segregating_dominant)' \\\n    --trio 'comphet_side:comphet_side(kid, mom, dad) && INFO.gnomad_nhomalt < 10'\n\nbcftools index --threads 3 $slivar_bcf &\n\nexport SLIVAR_SUMMARY_FILE=${slivar_counts}.ch\nslivar compound-hets -v $slivar_bcf \\\n    --sample-field comphet_side --sample-field denovo -p $ped \\\n  | bcftools view -O b -o $slivar_ch_bcf\n\nbcftools index --threads 3 $slivar_ch_bcf &\n\ntiwih combine_slivar_counts ${slivar_counts}.main ${slivar_counts}.ch > $slivar_counts\n\nslivar tsv \\\n  -s denovo \\\n  -s x_denovo \\\n  -s recessive \\\n  -s x_recessive \\\n  -s dominant \\\n  -i gnomad_popmax_af -i gnomad_popmax_af_filter -i gnomad_nhomalt \\\n  -i impactful -i genic \\\n  -c ANN \\\n  -g /opt/slivar/pli.lookup \\\n  -g /opt/slivar/clinvar_gene_desc.txt \\\n  -p $ped \\\n  $slivar_bcf > $slivar_tsv\n\nslivar tsv \\\n  -s slivar_comphet \\\n  -i gnomad_popmax_af -i gnomad_popmax_af_filter -i gnomad_nhomalt \\\n  -i impactful -i genic \\\n  -c ANN \\\n  -g /opt/slivar/pli.lookup \\\n  -g /opt/slivar/clinvar_gene_desc.txt \\\n  -p $ped \\\n  $slivar_ch_bcf \\\n  | { grep -v ^# || true; } >> $slivar_tsv # || true avoids error if there are no compound hets.\n\n\nwait\n  \"\"\"\n}",
        "nb_lignes_process": 76,
        "string_script": "  slivar_bcf = bcf.getBaseName() + \".slivar.bcf\"\n  slivar_ch_bcf = bcf.getBaseName() + \".slivar.ch.bcf\"\n  slivar_bcf_csi = slivar_bcf + \".csi\"\n  slivar_ch_bcf_csi = slivar_ch_bcf + \".csi\"\n  slivar_tsv = bcf.getBaseName() + \".slivar.tsv\"\n  slivar_counts = bcf.getBaseName() + \".slivar.counts.txt\"\n\n  \"\"\"\n# NOTE: we do *NOT* limit to impactful so that must be reported and used by slivar tsv\n\nexport SLIVAR_SUMMARY_FILE=${slivar_counts}.main\nslivar expr --vcf $bcf \\\n    --ped $ped \\\n    -o $slivar_bcf \\\n    --pass-only \\\n    -g $gnomad_zip \\\n    --info 'INFO.gnomad_popmax_af < 0.01 && variant.FILTER == \"PASS\" && variant.ALT[0] != \"*\"' \\\n    --js /opt/slivar/slivar-functions.js \\\n    --family-expr 'denovo:fam.every(segregating_denovo) && INFO.gnomad_popmax_af < 0.001' \\\n    --family-expr 'recessive:fam.every(segregating_recessive)' \\\n    --family-expr 'x_denovo:(variant.CHROM == \"X\" || variant.CHROM == \"chrX\") && fam.every(segregating_denovo_x) && INFO.gnomad_popmax_af < 0.001' \\\n    --family-expr 'x_recessive:(variant.CHROM == \"X\" || variant.CHROM == \"chrX\") && fam.every(segregating_recessive_x)' \\\n    --family-expr 'dominant:INFO.gnomad_popmax_af < 0.005 && fam.every(segregating_dominant)' \\\n    --trio 'comphet_side:comphet_side(kid, mom, dad) && INFO.gnomad_nhomalt < 10'\n\nbcftools index --threads 3 $slivar_bcf &\n\nexport SLIVAR_SUMMARY_FILE=${slivar_counts}.ch\nslivar compound-hets -v $slivar_bcf \\\n    --sample-field comphet_side --sample-field denovo -p $ped \\\n  | bcftools view -O b -o $slivar_ch_bcf\n\nbcftools index --threads 3 $slivar_ch_bcf &\n\ntiwih combine_slivar_counts ${slivar_counts}.main ${slivar_counts}.ch > $slivar_counts\n\nslivar tsv \\\n  -s denovo \\\n  -s x_denovo \\\n  -s recessive \\\n  -s x_recessive \\\n  -s dominant \\\n  -i gnomad_popmax_af -i gnomad_popmax_af_filter -i gnomad_nhomalt \\\n  -i impactful -i genic \\\n  -c ANN \\\n  -g /opt/slivar/pli.lookup \\\n  -g /opt/slivar/clinvar_gene_desc.txt \\\n  -p $ped \\\n  $slivar_bcf > $slivar_tsv\n\nslivar tsv \\\n  -s slivar_comphet \\\n  -i gnomad_popmax_af -i gnomad_popmax_af_filter -i gnomad_nhomalt \\\n  -i impactful -i genic \\\n  -c ANN \\\n  -g /opt/slivar/pli.lookup \\\n  -g /opt/slivar/clinvar_gene_desc.txt \\\n  -p $ped \\\n  $slivar_ch_bcf \\\n  | { grep -v ^# || true; } >> $slivar_tsv # || true avoids error if there are no compound hets.\n\n\nwait\n  \"\"\"",
        "nb_lignes_script": 63,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.2'",
            "publishDir \"${params.output_dir}/joint-by-chrom-slivar/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail'] input: tuple(path(bcf), path(csi)) path(ped) path(gnomad_zip) output: tuple(path(slivar_bcf), path(slivar_ch_bcf), path(slivar_bcf_csi), path(slivar_ch_bcf_csi), path(slivar_tsv), path(slivar_counts))"
        ],
        "when": "",
        "stub": ""
    },
    "slivar_merge_tsvs": {
        "name_process": "slivar_merge_tsvs",
        "string_process": "\nprocess slivar_merge_tsvs {\n                                                                              \n  container = 'docker://brentp/rare-disease:v0.2.2'\n  publishDir \"${params.output_dir}/\", mode: 'copy'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n\n  input: path(tsvs)\n         val(cohort_name)\n\n  output: tuple(path(\"${output_file}\"), path(\"${html_output}\"))\n\n  script:\n    output_file = \"${cohort_name}.slivar.candidates.tsv\"\n    html_output = \"${cohort_name}.jigv.html\"\n    \"\"\"\n# get header from first file and drop it from other files\n# and make sure slivar_comphet id is unique\n    awk 'NR == FNR || FNR > 1 { sub(/^slivar_comphet/, \"slivar_comphet_\"NR, \\$0); print; }' $tsvs > ${output_file}\n\n    tiwih slivar_jigv_tsv \\\n        --html-template /opt/rare-disease/tmpl.html \\\n        --prefix 'jigv_plots/\\${family_id}/\\${mode}/\\${family_id}.\\${mode}.\\${site}.js' \\\n        ${output_file} > ${html_output}\n\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    output_file = \"${cohort_name}.slivar.candidates.tsv\"\n    html_output = \"${cohort_name}.jigv.html\"\n    \"\"\"\n# get header from first file and drop it from other files\n# and make sure slivar_comphet id is unique\n    awk 'NR == FNR || FNR > 1 { sub(/^slivar_comphet/, \"slivar_comphet_\"NR, \\$0); print; }' $tsvs > ${output_file}\n\n    tiwih slivar_jigv_tsv \\\n        --html-template /opt/rare-disease/tmpl.html \\\n        --prefix 'jigv_plots/\\${family_id}/\\${mode}/\\${family_id}.\\${mode}.\\${site}.js' \\\n        ${output_file} > ${html_output}\n\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.2'",
            "publishDir \"${params.output_dir}/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail'] input: path(tsvs) val(cohort_name) output: tuple(path(\"${output_file}\"), path(\"${html_output}\"))"
        ],
        "when": "",
        "stub": ""
    },
    "slivar_sum_counts": {
        "name_process": "slivar_sum_counts",
        "string_process": "\nprocess slivar_sum_counts {\n  container = 'docker://brentp/rare-disease:v0.2.2'\n  publishDir \"${params.output_dir}/\", mode: 'copy'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n\n  input: path(counts)\n\n  output: path(\"${output_file}\")\n\n  script:\n    output_file = \"slivar.counts.txt\"\n    \"\"\"\n    tiwih sum_slivar_counts -z $counts > ${output_file}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    output_file = \"slivar.counts.txt\"\n    \"\"\"\n    tiwih sum_slivar_counts -z $counts > ${output_file}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.2'",
            "publishDir \"${params.output_dir}/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail'] input: path(counts) output: path(\"${output_file}\")"
        ],
        "when": "",
        "stub": ""
    },
    "slivar_split_by_fam": {
        "name_process": "slivar_split_by_fam",
        "string_process": "\nprocess slivar_split_by_fam {\n  container = 'docker://brentp/rare-disease:v0.2.2'\n  publishDir \"${params.output_dir}/slivar_split_by_fam_mode\", mode: 'copy'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n  input: \n    path(ped)\n    path(bcfs)\n\n  output: \n    path(\"*.fam.*.bcf{,.csi}\")\n\n  script:\n    \"\"\"\n# NOTE: if --template is changed, must change the mode= part of generate_jigv_pages\n\ntiwih slivar_split_fam --ped $ped \\\n  --fields denovo,recessive,x_denovo,x_recessive,dominant,slivar_comphet \\\n  --template 'slivar.rd-byfam.\\${field}.fam.\\${fam}.bcf' \\\n  $bcfs\n\nfor f in *.fam.*.bcf; do\n    # out of order because comphet + other vars.\n    bcftools sort -O b -o tmp.bcf \\$f\n    mv tmp.bcf \\$f\n    bcftools index \\$f\ndone\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n# NOTE: if --template is changed, must change the mode= part of generate_jigv_pages\n\ntiwih slivar_split_fam --ped $ped \\\n  --fields denovo,recessive,x_denovo,x_recessive,dominant,slivar_comphet \\\n  --template 'slivar.rd-byfam.\\${field}.fam.\\${fam}.bcf' \\\n  $bcfs\n\nfor f in *.fam.*.bcf; do\n    # out of order because comphet + other vars.\n    bcftools sort -O b -o tmp.bcf \\$f\n    mv tmp.bcf \\$f\n    bcftools index \\$f\ndone\n\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ped",
            "bcfs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.2'",
            "publishDir \"${params.output_dir}/slivar_split_by_fam_mode\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "generate_jigv_pages": {
        "name_process": "generate_jigv_pages",
        "string_process": "\nprocess generate_jigv_pages {\n  container = 'docker://brentp/rare-disease:v0.2.2'\n  publishDir \"${params.output_dir}/jigv_plots/\", mode: 'copy'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n  cache false\n\n\n  input:\n    tuple(val(family_id), path(vcfs), path(csis))\n    path(xams)\n    path(indexes)\n    path(ped)\n    path(fasta)\n    path(fai)\n\n  output:\n    path(\"${outdir}\")\n\n  script:\n  outdir = \"./$family_id\"\n    \"\"\"\n\nawk '\\$1 == \"$family_id\"' $ped > fam.ped\n\nfor vcf in ${vcfs}; do\n    mode=\\$(basename \\$vcf | cut -d. -f 3)\n\n    jigv \\\n      --prefix \"$outdir/\\${mode}/${family_id}.\\${mode}.\" \\\n      --ped fam.ped \\\n      --sites \\$vcf \\\n      --flank 100 \\\n      --fasta $fasta \\\n      $xams &\ndone\nwait\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 39,
        "string_script": "  outdir = \"./$family_id\"\n    \"\"\"\n\nawk '\\$1 == \"$family_id\"' $ped > fam.ped\n\nfor vcf in ${vcfs}; do\n    mode=\\$(basename \\$vcf | cut -d. -f 3)\n\n    jigv \\\n      --prefix \"$outdir/\\${mode}/${family_id}.\\${mode}.\" \\\n      --ped fam.ped \\\n      --sites \\$vcf \\\n      --flank 100 \\\n      --fasta $fasta \\\n      $xams &\ndone\nwait\n\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "family_id",
            "vcfs",
            "csis",
            "xams",
            "indexes",
            "ped",
            "fasta",
            "fai"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [
            "container = 'docker://brentp/rare-disease:v0.2.2'",
            "publishDir \"${params.output_dir}/jigv_plots/\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "octopus_population": {
        "name_process": "octopus_population",
        "string_process": "process octopus_population {\n    input: tuple(val(region), path(vcfs), path(crams), path(indexes))\n           path(ref)\n           path(fai)\n           val(index)                                                        \n                                 \n    output: tuple(val(\"${region}\"), path(\"${output_path}\"), path(crams), path(indexes))\n                                                                        \n    script:\n       reg=region.replaceAll(\":\", \"_\")\n       output_path=\"${reg}.${index}.population.vcf.gz\"\n       file(\"$workDir/${reg}.${index}.vcfs.list\").withWriter { fh ->\n            vcfs.each { vcf ->\n                fh.write(vcf.toString()); fh.write(\"\\n\")\n            }\n        }\n       file(\"$workDir/${reg}.${index}.crams.list\").withWriter { fh ->\n            crams.each { cram ->\n                fh.write(cram.toString()); fh.write(\"\\n\")\n            }\n        }\n       if(vcfs.size() > 1) {\n\n       \"\"\"\nwhich bcftools\nbcftools --version\noctopus --version\necho ${workflow.projectDir}\nwhile read path; do\n    bcftools index --threads 4 \\$path\ndone < $workDir/${reg}.${index}.vcfs.list\noctopus -R $ref \\\n    -p Y=2 chrY=2 chrM=1 chrMT=1 MT=1 --threads ${task.cpus} --one-based-indexing \\\n    -T ${region} \\\n    --disable-denovo-variant-discovery \\\n    -i $workDir/${reg}.${index}.crams.list \\\n    --source-candidates-file $workDir/${reg}.${index}.vcfs.list \\\n    -o ${output_path}\n       \"\"\"\n     } else {\n      \"\"\"\nln -s ${vcfs[0]} ${output_path}\n      \"\"\"\n     }\n}",
        "nb_lignes_process": 43,
        "string_script": "       reg=region.replaceAll(\":\", \"_\")\n       output_path=\"${reg}.${index}.population.vcf.gz\"\n       file(\"$workDir/${reg}.${index}.vcfs.list\").withWriter { fh ->\n            vcfs.each { vcf ->\n                fh.write(vcf.toString()); fh.write(\"\\n\")\n            }\n        }\n       file(\"$workDir/${reg}.${index}.crams.list\").withWriter { fh ->\n            crams.each { cram ->\n                fh.write(cram.toString()); fh.write(\"\\n\")\n            }\n        }\n       if(vcfs.size() > 1) {\n\n       \"\"\"\nwhich bcftools\nbcftools --version\noctopus --version\necho ${workflow.projectDir}\nwhile read path; do\n    bcftools index --threads 4 \\$path\ndone < $workDir/${reg}.${index}.vcfs.list\noctopus -R $ref \\\n    -p Y=2 chrY=2 chrM=1 chrMT=1 MT=1 --threads ${task.cpus} --one-based-indexing \\\n    -T ${region} \\\n    --disable-denovo-variant-discovery \\\n    -i $workDir/${reg}.${index}.crams.list \\\n    --source-candidates-file $workDir/${reg}.${index}.vcfs.list \\\n    -o ${output_path}\n       \"\"\"\n     } else {\n      \"\"\"\nln -s ${vcfs[0]} ${output_path}\n      \"\"\"\n     }",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "whichdb",
            "BCFtools",
            "OCTOPUS"
        ],
        "tools_url": [
            "https://bio.tools/whichdb",
            "https://bio.tools/bcftools",
            "https://bio.tools/octopus"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "OCTOPUS",
                "uri": "https://bio.tools/octopus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0270",
                                    "term": "Transmembrane protein analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            }
                        ]
                    }
                ],
                "description": "Prediction of membrane protein topology and signal peptides.",
                "homepage": "http://octopus.cbr.su.se/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "brentp__rare-disease-wf",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
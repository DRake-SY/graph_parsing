{
    "OPERATION_1": {
        "string": "rgids, r1_inputs, r2_inputs = Channel\n    .fromPath( params.csv )\n    .splitCsv( header:true )\n    .ifEmpty { exit 1, \"No readgroups found post-validation. Exiting.\" }\n    .separate(3) { row ->\nif (row.readgroup ) { \n        def rgid  = [row.sample, row.readgroup].join(params.rgid_sep)\n } else { \n        def rgid  = row.sample\n } \n\n                         \nif (params.paired_end ) { \n        def fq1  = file(row.fastq1)\n } else { \n        def fq1  = file(row.fastq)\n } \nif (params.paired_end ) { \n        def fq2  = file(row.fastq2)\n } else { \n        def fq2  = 'NO_FILE'\n } \n\n                                  \nif (params.paired_end ) { \n        def fq1_fn  = \"${rgid}.1.${get_fastq_extn(fq1)}\"\n } else { \n        def fq1_fn  = \"${rgid}.${get_fastq_extn(fq1)}\"\n } \nif (params.paired_end ) { \n        def fq2_fn  = \"${rgid}.2.${get_fastq_extn(fq2)}\"\n } else { \n        def fq2_fn  = 'NO_FILE'\n } \n\n        tuple(tuple(row.sample, rgid), tuple(fq1_fn, fq1), tuple(fq2_fn, fq2))\n    }",
        "origin": [
            [
                "params.csv",
                "A"
            ]
        ],
        "gives": [
            [
                "rgids",
                "P"
            ],
            [
                "r1_inputs",
                "P"
            ],
            [
                "r2_inputs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "gunzipped_fasta\n    .ifEmpty { fasta_file }\n    .set { ref_fasta }",
        "origin": [
            [
                "gunzipped_fasta",
                "P"
            ]
        ],
        "gives": [
            [
                "ref_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "gunzipped_gtf\n    .ifEmpty { gtf_file }\n    .set { ref_gtf }",
        "origin": [
            [
                "gunzipped_gtf",
                "P"
            ]
        ],
        "gives": [
            [
                "ref_gtf",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "rgids.into { samples; fastqc_raw_rgids; cutadapt_rgids }",
        "origin": [
            [
                "rgids",
                "P"
            ]
        ],
        "gives": [
            [
                "samples",
                "P"
            ],
            [
                "fastqc_raw_rgids",
                "P"
            ],
            [
                "cutadapt_rgids",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "r1_inputs.into { fastqc_raw_r1_inputs; cutadapt_r1_inputs }",
        "origin": [
            [
                "r1_inputs",
                "P"
            ]
        ],
        "gives": [
            [
                "fastqc_raw_r1_inputs",
                "P"
            ],
            [
                "cutadapt_r1_inputs",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "r2_inputs.into { fastqc_raw_r2_inputs; cutadapt_r2_inputs }",
        "origin": [
            [
                "r2_inputs",
                "P"
            ]
        ],
        "gives": [
            [
                "fastqc_raw_r2_inputs",
                "P"
            ],
            [
                "cutadapt_r2_inputs",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "samples\n    .groupTuple()\n    .map { sample, rgids ->\n        tuple( groupKey(sample, rgids.size()), rgids )\n    }\n    .transpose()\n    .map { sample, readgroup ->\n        tuple(readgroup, sample)\n    }\n    .join( trimmed_readgroups )\n    .groupTuple( by:1 )\n    .map { rgids, sample, fastqs ->\n        tuple(sample.toString(), rgids, fastqs.flatten())\n    }\n    .set { star_inputs }",
        "origin": [
            [
                "samples",
                "P"
            ],
            [
                "trimmed_readgroups",
                "P"
            ]
        ],
        "gives": [
            [
                "star_inputs",
                "P"
            ]
        ]
    }
}
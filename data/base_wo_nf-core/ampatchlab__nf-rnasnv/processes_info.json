{
    "gunzip_fasta": {
        "name_process": "gunzip_fasta",
        "string_process": "\nprocess gunzip_fasta {\n    storeDir params.refdir\n\n    input:\n    file fasta from fasta_file\n\n    output:\n    file \"${fasta.getBaseName()}\" into gunzipped_fasta\n\n    when:\n    fasta.getExtension() == \"gz\"\n\n    \"\"\"\n    gzip -dc \"${fasta}\" > \"${fasta.getBaseName()}\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    gzip -dc \"${fasta}\" > \"${fasta.getBaseName()}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gunzipped_fasta"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "storeDir params.refdir"
        ],
        "when": "fasta.getExtension() == \"gz\"",
        "stub": ""
    },
    "gunzip_gtf": {
        "name_process": "gunzip_gtf",
        "string_process": "\nprocess gunzip_gtf {\n    storeDir params.refdir\n\n    input:\n    file gtf from gtf_file\n\n    output:\n    file \"${gtf.getBaseName()}\" into gunzipped_gtf\n\n    when:\n    gtf.getExtension() == \"gz\"\n\n    \"\"\"\n    gzip -dc \"${gtf}\" > \"${gtf.getBaseName()}\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    gzip -dc \"${gtf}\" > \"${gtf.getBaseName()}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gunzipped_gtf"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "storeDir params.refdir"
        ],
        "when": "gtf.getExtension() == \"gz\"",
        "stub": ""
    },
    "star_index": {
        "name_process": "star_index",
        "string_process": "\nprocess star_index {\n    storeDir \"${params.refdir}/STAR\"\n\n    label 'star'\n\n    input:\n    file ref_fasta\n    file ref_gtf\n\n    output:\n    file \"${params.genome}\" into star_index\n\n    \"\"\"\n    mkdir \"${params.genome}\"\n    STAR \\\\\n        --runThreadN \"${task.cpus}\" \\\\\n        --runMode genomeGenerate \\\\\n        --genomeDir \"${params.genome}\" \\\\\n        --genomeFastaFiles \"${ref_fasta}\" \\\\\n        --genomeChrBinNbits \"${params.star_genome_chr_bin_n_bits}\" \\\\\n        --genomeSAindexNbases \"${params.star_genome_sa_index_n_bases}\" \\\\\n        --sjdbGTFfile \"${ref_gtf}\" \\\\\n        --sjdbOverhang \"${params.star_sjdb_overhang}\"\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    mkdir \"${params.genome}\"\n    STAR \\\\\n        --runThreadN \"${task.cpus}\" \\\\\n        --runMode genomeGenerate \\\\\n        --genomeDir \"${params.genome}\" \\\\\n        --genomeFastaFiles \"${ref_fasta}\" \\\\\n        --genomeChrBinNbits \"${params.star_genome_chr_bin_n_bits}\" \\\\\n        --genomeSAindexNbases \"${params.star_genome_sa_index_n_bases}\" \\\\\n        --sjdbGTFfile \"${ref_gtf}\" \\\\\n        --sjdbOverhang \"${params.star_sjdb_overhang}\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "ref_fasta",
            "ref_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "storeDir \"${params.refdir}/STAR\"",
            "label 'star'"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_faidx": {
        "name_process": "samtools_faidx",
        "string_process": "\nprocess samtools_faidx {\n    storeDir params.refdir\n\n    label 'samtools'\n\n    input:\n    file ref_fasta\n\n    output:\n    file \"${ref_fasta}.fai\" into ref_faidx\n\n    \"\"\"\n    samtools faidx \"${ref_fasta}\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    samtools faidx \"${ref_fasta}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ref_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ref_faidx"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "storeDir params.refdir",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "unpack_cache": {
        "name_process": "unpack_cache",
        "string_process": "\nprocess unpack_cache {\n    storeDir \"${params.refdir}/VEP\"\n\n    input:\n    file vep_indexed_cache_file\n\n    output:\n    file \"cache/*\" into indexed_vep_cache\n\n    \"\"\"\n    mkdir cache\n    tar -xf \"${vep_indexed_cache_file}\" -C cache\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    mkdir cache\n    tar -xf \"${vep_indexed_cache_file}\" -C cache\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vep_indexed_cache_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indexed_vep_cache"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "storeDir \"${params.refdir}/VEP\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_raw": {
        "name_process": "fastqc_raw",
        "string_process": "\nprocess fastqc_raw {\n    tag { rgid }\n\n    label 'fastqc'\n\n    publishDir \"${params.outdir}/FastQC/${rgid}/raw\", mode: 'copy'\n\n    input:\n    set sample, rgid from fastqc_raw_rgids\n    set fq1, file(\"${fq1}\") from fastqc_raw_r1_inputs\n    set fq2, file(\"${fq2}\") from fastqc_raw_r2_inputs\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_raw_results\n\n    script:\n    if (params.paired_end) {\n\n        \"\"\"\n        fastqc -q \"${fq1}\" \"${fq2}\"\n        \"\"\"\n\n    } else {\n\n        \"\"\"\n        fastqc -q \"${fq1}\"\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 28,
        "string_script": "    if (params.paired_end) {\n\n        \"\"\"\n        fastqc -q \"${fq1}\" \"${fq2}\"\n        \"\"\"\n\n    } else {\n\n        \"\"\"\n        fastqc -q \"${fq1}\"\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastqc_raw_rgids",
            "fastqc_raw_r1_inputs",
            "fastqc_raw_r2_inputs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "fastqc_raw_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { rgid }",
            "label 'fastqc'",
            "publishDir \"${params.outdir}/FastQC/${rgid}/raw\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "cutadapt": {
        "name_process": "cutadapt",
        "string_process": "\nprocess cutadapt {\n    tag { rgid }\n\n    label 'cutadapt'\n\n    publishDir \"${params.outdir}/Cutadapt/${rgid}\", mode: 'copy'\n\n    input:\n    set sample, rgid from cutadapt_rgids\n    set fq1, file(\"${rgid}/${fq1}\") from cutadapt_r1_inputs\n    set fq2, file(\"${rgid}/${fq2}\") from cutadapt_r2_inputs\n\n    output:\n    set rgid, file(\"*.fastq.gz\") into fastqc_trimmed_inputs, trimmed_readgroups\n    file \"*.log\" into cutadapt_logs\n\n    script:\n    def r1_adapter = params.r1_adapter != 'NO_R1_ADAPTER' ? \"-a ${params.r1_adapter}\" : \"\"\n    def r2_adapter = params.r2_adapter != 'NO_R2_ADAPTER' ? \"-A ${params.r2_adapter}\" : \"\"\n\n    if (params.paired_end) {\n\n        \"\"\"\n        cutadapt \\\\\n            \"${r1_adapter}\" \\\\\n            \"${r2_adapter}\" \\\\\n            -q \"${params.cutadapt_base_qual_cutoff}\" \\\\\n            -m \"${params.cutadapt_min_read_length}\" \\\\\n            --trim-n \\\\\n            -o \"${rgid}.1.fastq.gz\" \\\\\n            -p \"${rgid}.2.fastq.gz\" \\\\\n            \"${rgid}/${fq1}\" \\\\\n            \"${rgid}/${fq2}\" \\\\\n            > \"${rgid}.log\"\n        \"\"\"\n\n    } else {\n\n        \"\"\"\n        cutadapt \\\\\n            \"${r1_adapter}\" \\\\\n            -q \"${params.cutadapt_base_qual_cutoff}\" \\\\\n            -m \"${params.cutadapt_min_read_length}\" \\\\\n            --trim-n \\\\\n            -o \"${rgid}.fastq.gz\" \\\\\n            \"${rgid}/${fq1}\" \\\\\n            > \"${rgid}.log\"\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 49,
        "string_script": "    def r1_adapter = params.r1_adapter != 'NO_R1_ADAPTER' ? \"-a ${params.r1_adapter}\" : \"\"\n    def r2_adapter = params.r2_adapter != 'NO_R2_ADAPTER' ? \"-A ${params.r2_adapter}\" : \"\"\n\n    if (params.paired_end) {\n\n        \"\"\"\n        cutadapt \\\\\n            \"${r1_adapter}\" \\\\\n            \"${r2_adapter}\" \\\\\n            -q \"${params.cutadapt_base_qual_cutoff}\" \\\\\n            -m \"${params.cutadapt_min_read_length}\" \\\\\n            --trim-n \\\\\n            -o \"${rgid}.1.fastq.gz\" \\\\\n            -p \"${rgid}.2.fastq.gz\" \\\\\n            \"${rgid}/${fq1}\" \\\\\n            \"${rgid}/${fq2}\" \\\\\n            > \"${rgid}.log\"\n        \"\"\"\n\n    } else {\n\n        \"\"\"\n        cutadapt \\\\\n            \"${r1_adapter}\" \\\\\n            -q \"${params.cutadapt_base_qual_cutoff}\" \\\\\n            -m \"${params.cutadapt_min_read_length}\" \\\\\n            --trim-n \\\\\n            -o \"${rgid}.fastq.gz\" \\\\\n            \"${rgid}/${fq1}\" \\\\\n            > \"${rgid}.log\"\n        \"\"\"\n    }",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "cutadapt_rgids",
            "cutadapt_r1_inputs",
            "cutadapt_r2_inputs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "fastqc_trimmed_inputs",
            "trimmed_readgroups",
            "cutadapt_logs"
        ],
        "nb_outputs": 3,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { rgid }",
            "label 'cutadapt'",
            "publishDir \"${params.outdir}/Cutadapt/${rgid}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_trimmed": {
        "name_process": "fastqc_trimmed",
        "string_process": "\nprocess fastqc_trimmed {\n    tag { rgid }\n\n    label 'fastqc'\n\n    publishDir \"${params.outdir}/FastQC/${rgid}/trimmed\", mode: 'copy'\n\n    input:\n    set rgid, file(fastqs) from fastqc_trimmed_inputs\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_trimmed_results\n\n    script:\n    if (params.paired_end) {\n\n        \"\"\"\n        fastqc -q \"${rgid}.1.fastq.gz\" \"${rgid}.2.fastq.gz\"\n        \"\"\"\n\n    } else {\n\n        \"\"\"\n        fastqc -q \"${rgid}.fastq.gz\"\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 26,
        "string_script": "    if (params.paired_end) {\n\n        \"\"\"\n        fastqc -q \"${rgid}.1.fastq.gz\" \"${rgid}.2.fastq.gz\"\n        \"\"\"\n\n    } else {\n\n        \"\"\"\n        fastqc -q \"${rgid}.fastq.gz\"\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastqc_trimmed_inputs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_trimmed_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { rgid }",
            "label 'fastqc'",
            "publishDir \"${params.outdir}/FastQC/${rgid}/trimmed\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "star": {
        "name_process": "star",
        "string_process": "\nprocess star {\n    tag { sample }\n\n    label 'star'\n\n    publishDir \"${params.outdir}/STAR/${sample}\", mode: 'copy'\n\n    input:\n    set sample, rgids, file(fastqs) from star_inputs\n    file index from star_index.collect()\n\n    output:\n    set sample, file(\"*.Aligned.out.bam\") into star_alignments\n    set sample, file(\"*.Aligned.sortedByCoord.out.bam\") into star_csorted_bam_files, star_sorted_alignments\n    set sample, file(\"*.out.bg\") into star_signal_output\n    set sample, file(\"*.SJ.out.tab\") into star_splice_junctions\n    file \"*.out\" into star_logs\n\n    script:\n    def rgs = rgids.collect { /\"ID:${it}\" \"SM:${sample}\"/ }.join(\" , \")\n\n    if (params.paired_end) {\n\n        def fq1 = rgids.collect { \"${it}.1.fastq.gz\" }.join(',')\n        def fq2 = rgids.collect { \"${it}.2.fastq.gz\" }.join(',')\n\n        \"\"\"\n        STAR \\\\\n            --genomeDir \"${index}\" \\\\\n            --readFilesCommand zcat \\\\\n            --readFilesIn \"${fq1}\" \"${fq2}\" \\\\\n            --runThreadN ${task.cpus} \\\\\n            --twopassMode Basic \\\\\n            --outSAMattributes All \\\\\n            --outSAMattrRGline ${rgs} \\\\\n            --outSAMtype BAM Unsorted SortedByCoordinate \\\\\n            --outSAMunmapped Within KeepPairs \\\\\n            --outWigType bedGraph \\\\\n            --outFileNamePrefix \"${sample}.\" \\\\\n            --outFilterMultimapNmax 1\n        \"\"\"\n\n    } else {\n\n        def fq = rgids.collect { \"${it}.fastq.gz\" }.join(',')\n\n        \"\"\"\n        STAR \\\\\n            --genomeDir \"${index}\" \\\\\n            --readFilesCommand zcat \\\\\n            --readFilesIn \"${fq}\" \\\\\n            --runThreadN ${task.cpus} \\\\\n            --twopassMode Basic \\\\\n            --outSAMattributes All \\\\\n            --outSAMattrRGline ${rgs} \\\\\n            --outSAMtype BAM Unsorted SortedByCoordinate \\\\\n            --outSAMunmapped Within KeepPairs \\\\\n            --outWigType bedGraph \\\\\n            --outFileNamePrefix \"${sample}.\" \\\\\n            --outFilterMultimapNmax 1\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 62,
        "string_script": "    def rgs = rgids.collect { /\"ID:${it}\" \"SM:${sample}\"/ }.join(\" , \")\n\n    if (params.paired_end) {\n\n        def fq1 = rgids.collect { \"${it}.1.fastq.gz\" }.join(',')\n        def fq2 = rgids.collect { \"${it}.2.fastq.gz\" }.join(',')\n\n        \"\"\"\n        STAR \\\\\n            --genomeDir \"${index}\" \\\\\n            --readFilesCommand zcat \\\\\n            --readFilesIn \"${fq1}\" \"${fq2}\" \\\\\n            --runThreadN ${task.cpus} \\\\\n            --twopassMode Basic \\\\\n            --outSAMattributes All \\\\\n            --outSAMattrRGline ${rgs} \\\\\n            --outSAMtype BAM Unsorted SortedByCoordinate \\\\\n            --outSAMunmapped Within KeepPairs \\\\\n            --outWigType bedGraph \\\\\n            --outFileNamePrefix \"${sample}.\" \\\\\n            --outFilterMultimapNmax 1\n        \"\"\"\n\n    } else {\n\n        def fq = rgids.collect { \"${it}.fastq.gz\" }.join(',')\n\n        \"\"\"\n        STAR \\\\\n            --genomeDir \"${index}\" \\\\\n            --readFilesCommand zcat \\\\\n            --readFilesIn \"${fq}\" \\\\\n            --runThreadN ${task.cpus} \\\\\n            --twopassMode Basic \\\\\n            --outSAMattributes All \\\\\n            --outSAMattrRGline ${rgs} \\\\\n            --outSAMtype BAM Unsorted SortedByCoordinate \\\\\n            --outSAMunmapped Within KeepPairs \\\\\n            --outWigType bedGraph \\\\\n            --outFileNamePrefix \"${sample}.\" \\\\\n            --outFilterMultimapNmax 1\n        \"\"\"\n    }",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "star_inputs",
            "star_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_alignments",
            "star_csorted_bam_files",
            "star_sorted_alignments",
            "star_signal_output",
            "star_splice_junctions",
            "star_logs"
        ],
        "nb_outputs": 6,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'star'",
            "publishDir \"${params.outdir}/STAR/${sample}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_index": {
        "name_process": "samtools_index",
        "string_process": "\nprocess samtools_index {\n    tag { sample }\n\n    label 'samtools'\n\n    publishDir \"${params.outdir}/STAR/${sample}\", mode: 'copy'\n\n    input:\n    set sample, file(bam) from star_csorted_bam_files\n\n    output:\n    file \"*.bai\"\n\n    \"\"\"\n    samtools index \"${bam}\"\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    samtools index \"${bam}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "star_csorted_bam_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'samtools'",
            "publishDir \"${params.outdir}/STAR/${sample}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mark_duplicates": {
        "name_process": "mark_duplicates",
        "string_process": "\nprocess mark_duplicates {\n    tag { sample }\n\n    label 'picard'\n\n    publishDir \"${params.outdir}/MarkDuplicates/${sample}\", mode: 'copy', saveAs: { fn ->\n        fn.endsWith(\".bai\") ? \"${sample}.bam.bai\" : \"${fn}\"\n    }\n\n    input:\n    set sample, file(bam) from star_sorted_alignments\n\n    output:\n    set sample, file(\"*.bam\"), file(\"*.bai\") into duplicate_marked_alignments, mpileup_alignments\n    file \"*.metrics.txt\" into mark_duplicates_metrics\n\n    \"\"\"\n    picard \\\\\n        -Xmx${task.memory.toGiga()}g \\\\\n        -XX:+UseSerialGC \\\\\n    MarkDuplicates \\\\\n        INPUT=\"${bam}\" \\\\\n        OUTPUT=\"${sample}.bam\" \\\\\n        METRICS_FILE=\"${sample}.metrics.txt\" \\\\\n        ASSUME_SORT_ORDER=coordinate \\\\\n        CREATE_INDEX=true \\\\\n        VALIDATION_STRINGENCY=LENIENT\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    picard \\\\\n        -Xmx${task.memory.toGiga()}g \\\\\n        -XX:+UseSerialGC \\\\\n    MarkDuplicates \\\\\n        INPUT=\"${bam}\" \\\\\n        OUTPUT=\"${sample}.bam\" \\\\\n        METRICS_FILE=\"${sample}.metrics.txt\" \\\\\n        ASSUME_SORT_ORDER=coordinate \\\\\n        CREATE_INDEX=true \\\\\n        VALIDATION_STRINGENCY=LENIENT\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Picard",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "star_sorted_alignments"
        ],
        "nb_inputs": 1,
        "outputs": [
            "duplicate_marked_alignments",
            "mpileup_alignments",
            "mark_duplicates_metrics"
        ],
        "nb_outputs": 3,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'picard'",
            "publishDir \"${params.outdir}/MarkDuplicates/${sample}\", mode: 'copy', saveAs: { fn -> fn.endsWith(\".bai\") ? \"${sample}.bam.bai\" : \"${fn}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "strelka": {
        "name_process": "strelka",
        "string_process": "\nprocess strelka {\n    tag { sample }\n\n    label 'strelka'\n\n    publishDir \"${params.outdir}/Strelka/${sample}\", mode: 'copy'\n\n    input:\n    set sample, file(bam), file(\"${bam}.bai\") from duplicate_marked_alignments\n    file ref_fasta\n    file ref_faidx\n\n    output:\n    set sample, file(\"${sample}.vcf.gz{,.tbi}\") into strelka_variants\n\n    script:\n    def variants = \"StrelkaGermlineWorkflow/results/variants/variants.vcf.gz\"\n\n    \"\"\"\n    configureStrelkaGermlineWorkflow.py \\\\\n        --bam \"${bam}\" \\\\\n        --rna \\\\\n        --referenceFasta \"${ref_fasta}\"\n    ./StrelkaGermlineWorkflow/runWorkflow.py \\\\\n        -m local \\\\\n        -j ${task.cpus}\n    mv -v \"${variants}\" \"${sample}.vcf.gz\"\n    mv -v \"${variants}.tbi\" \"${sample}.vcf.gz.tbi\"\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def variants = \"StrelkaGermlineWorkflow/results/variants/variants.vcf.gz\"\n\n    \"\"\"\n    configureStrelkaGermlineWorkflow.py \\\\\n        --bam \"${bam}\" \\\\\n        --rna \\\\\n        --referenceFasta \"${ref_fasta}\"\n    ./StrelkaGermlineWorkflow/runWorkflow.py \\\\\n        -m local \\\\\n        -j ${task.cpus}\n    mv -v \"${variants}\" \"${sample}.vcf.gz\"\n    mv -v \"${variants}.tbi\" \"${sample}.vcf.gz.tbi\"\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "duplicate_marked_alignments",
            "ref_fasta",
            "ref_faidx"
        ],
        "nb_inputs": 3,
        "outputs": [
            "strelka_variants"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'strelka'",
            "publishDir \"${params.outdir}/Strelka/${sample}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "subset_pass_variants": {
        "name_process": "subset_pass_variants",
        "string_process": "\nprocess subset_pass_variants {\n    tag { sample }\n\n    label 'bcftools'\n\n    publishDir \"${params.outdir}/Strelka/${sample}\", mode: 'copy'\n\n    input:\n    set sample, file(indexed_vcf) from strelka_variants\n\n    output:\n    set sample, file(\"${sample}.pass.vcf.gz{,.tbi}\") into pass_variants\n\n    script:\n    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    bcftools view \\\\\n        --no-version \\\\\n        -Oz \\\\\n        -o \"${sample}.pass.vcf.gz\" \\\\\n        -f PASS \\\\\n        \"${vcf}\"\n    bcftools index \\\\\n        -t \\\\\n        \"${sample}.pass.vcf.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    bcftools view \\\\\n        --no-version \\\\\n        -Oz \\\\\n        -o \"${sample}.pass.vcf.gz\" \\\\\n        -f PASS \\\\\n        \"${vcf}\"\n    bcftools index \\\\\n        -t \\\\\n        \"${sample}.pass.vcf.gz\"\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "strelka_variants"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pass_variants"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'bcftools'",
            "publishDir \"${params.outdir}/Strelka/${sample}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "convert2bed": {
        "name_process": "convert2bed",
        "string_process": "\nprocess convert2bed {\n    tag { sample }\n\n    label 'bedops'\n\n    input:\n    set sample, file(indexed_vcf) from pass_variants\n\n    output:\n    set sample, file(\"${sample}.bed.gz\") into bed_regions\n\n    script:\n    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    zcat \"${vcf}\" |\n        convert2bed -i vcf -d - |\n        cut -f -3 |\n        gzip > \"${sample}.bed.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    zcat \"${vcf}\" |\n        convert2bed -i vcf -d - |\n        cut -f -3 |\n        gzip > \"${sample}.bed.gz\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pass_variants"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bed_regions"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'bedops'"
        ],
        "when": "",
        "stub": ""
    },
    "split_regions": {
        "name_process": "split_regions",
        "string_process": "\nprocess split_regions {\n    tag { sample }\n\n    label 'coreutils'\n\n    input:\n    set sample, file(bed) from bed_regions\n\n    output:\n    set sample, file(\"*.bed\") into regions_files\n\n    shell:\n    '''\n    zcat \"!{bed}\" | shuf | split \\\\\n        -a \"!{params.mpileup_suffix_length}\" \\\\\n        -d \\\\\n        -l \"!{params.mpileup_num_regions}\" \\\\\n        --filter='LC_ALL=C sort -k1,1V -k2,2n -k3,3n > ${FILE}.bed' \\\\\n        - \\\\\n        \"!{sample}.\"\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    zcat \"!{bed}\" | shuf | split \\\\\n        -a \"!{params.mpileup_suffix_length}\" \\\\\n        -d \\\\\n        -l \"!{params.mpileup_num_regions}\" \\\\\n        --filter='LC_ALL=C sort -k1,1V -k2,2n -k3,3n > ${FILE}.bed' \\\\\n        - \\\\\n        \"!{sample}.\"\n    '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed_regions"
        ],
        "nb_inputs": 1,
        "outputs": [
            "regions_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'coreutils'"
        ],
        "when": "",
        "stub": ""
    },
    "mpileup": {
        "name_process": "mpileup",
        "string_process": "\nprocess mpileup {\n    tag { jobname }\n\n    label 'bcftools'\n\n    input:\n    set sample, file(bed), file(bam), file(\"*\") from regions_files\n        .map { sample, regions -> tuple( groupKey(sample, [regions].flatten().size()), regions ) }\n        .transpose()\n        .combine(mpileup_alignments, by: 0)\n    file ref_fasta\n    file ref_faidx\n\n    output:\n    set sample, file(\"${jobname}.vcf.gz{,.tbi}\") into mpileup_region_variants\n\n    script:\n    jobname = bed.getBaseName()\n\n    def info_fields = ['AD', 'ADF', 'ADR'].collect { \"INFO/$it\" }\n    def format_fields = ['SP', 'DP', 'AD', 'ADF', 'ADR'].collect { \"FORMAT/$it\" }\n\n    def mpileup_exclude_filters = params.mpileup_exclude_filters\n        .collect { name, expr -> \"bcftools filter --no-version -Ou -m+ -s '${name}' -e '${expr}' - |\" }\n        .join(' ')\n    def mpileup_include_filters = params.mpileup_include_filters\n        .collect { name, expr -> \"bcftools filter --no-version -Ou -m+ -s '${name}' -i '${expr}' - |\" }\n        .join(' ')\n\n    \"\"\"\n    bcftools mpileup \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -d \"${params.mpileup_max_depth}\" \\\\\n        -f \"${ref_fasta}\" \\\\\n        -Q \"${params.mpileup_min_bq}\" \\\\\n        -R \"${bed}\" \\\\\n        -a \"${info_fields.join(',')},${format_fields.join(',')}\" \\\\\n        \"${bam}\" |\n    bcftools norm \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -f \"${ref_fasta}\" \\\\\n        -m +any \\\\\n        - |\n    bcftools call \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -m \\\\\n        -v \\\\\n        -f GQ,GP \\\\\n        - |\n    bcftools norm \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -f \"${ref_fasta}\" \\\\\n        -m -any \\\\\n        - |\n    ${mpileup_exclude_filters} \\\\\n    ${mpileup_include_filters} \\\\\n    bcftools view \\\\\n        --no-version \\\\\n        -Oz \\\\\n        -o \"${jobname}.vcf.gz\" \\\\\n        -\n    bcftools index \\\\\n        -t \\\\\n        \"${jobname}.vcf.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 69,
        "string_script": "    jobname = bed.getBaseName()\n\n    def info_fields = ['AD', 'ADF', 'ADR'].collect { \"INFO/$it\" }\n    def format_fields = ['SP', 'DP', 'AD', 'ADF', 'ADR'].collect { \"FORMAT/$it\" }\n\n    def mpileup_exclude_filters = params.mpileup_exclude_filters\n        .collect { name, expr -> \"bcftools filter --no-version -Ou -m+ -s '${name}' -e '${expr}' - |\" }\n        .join(' ')\n    def mpileup_include_filters = params.mpileup_include_filters\n        .collect { name, expr -> \"bcftools filter --no-version -Ou -m+ -s '${name}' -i '${expr}' - |\" }\n        .join(' ')\n\n    \"\"\"\n    bcftools mpileup \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -d \"${params.mpileup_max_depth}\" \\\\\n        -f \"${ref_fasta}\" \\\\\n        -Q \"${params.mpileup_min_bq}\" \\\\\n        -R \"${bed}\" \\\\\n        -a \"${info_fields.join(',')},${format_fields.join(',')}\" \\\\\n        \"${bam}\" |\n    bcftools norm \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -f \"${ref_fasta}\" \\\\\n        -m +any \\\\\n        - |\n    bcftools call \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -m \\\\\n        -v \\\\\n        -f GQ,GP \\\\\n        - |\n    bcftools norm \\\\\n        --no-version \\\\\n        -Ou \\\\\n        -f \"${ref_fasta}\" \\\\\n        -m -any \\\\\n        - |\n    ${mpileup_exclude_filters} \\\\\n    ${mpileup_include_filters} \\\\\n    bcftools view \\\\\n        --no-version \\\\\n        -Oz \\\\\n        -o \"${jobname}.vcf.gz\" \\\\\n        -\n    bcftools index \\\\\n        -t \\\\\n        \"${jobname}.vcf.gz\"\n    \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "regions_files",
            "ref_fasta",
            "ref_faidx"
        ],
        "nb_inputs": 3,
        "outputs": [
            "mpileup_region_variants"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { jobname }",
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "concat": {
        "name_process": "concat",
        "string_process": "\nprocess concat {\n    tag { sample }\n\n    label 'bcftools'\n\n    publishDir \"${params.outdir}/BCFtools/${sample}\", mode: 'copy', saveAs: { fn ->\n        fn.endsWith(\".stats.txt\") ? null : \"${fn}\"\n    }\n\n    input:\n    set sample, file(vcf_files), file(\"*\") from mpileup_region_variants\n        .groupTuple()\n        .map { sample, indexed_vcf_files ->\n\n            def vcf_files = indexed_vcf_files*.head()\n            def tbi_files = indexed_vcf_files*.tail().flatten()\n\n            tuple(sample.toString(), vcf_files, tbi_files)\n        }\n\n    output:\n    set sample, file(\"${sample}.vcf.gz{,.tbi}\") into soft_filtered_variants\n    file \"*.stats.txt\" into raw_variant_stats\n\n    script:\n    def quoted_vcf_files = vcf_files.collect { /\"${it}\"/ }.join(' ')\n\n    \"\"\"\n    bcftools concat \\\\\n        --no-version \\\\\n        -a \\\\\n        -D \\\\\n        -Oz \\\\\n        -o \"${sample}.vcf.gz\" \\\\\n        ${quoted_vcf_files}\n    bcftools index \\\\\n        -t \\\\\n        \"${sample}.vcf.gz\"\n    bcftools stats \\\\\n        \"${sample}.vcf.gz\" \\\\\n        > \"${sample}.stats.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def quoted_vcf_files = vcf_files.collect { /\"${it}\"/ }.join(' ')\n\n    \"\"\"\n    bcftools concat \\\\\n        --no-version \\\\\n        -a \\\\\n        -D \\\\\n        -Oz \\\\\n        -o \"${sample}.vcf.gz\" \\\\\n        ${quoted_vcf_files}\n    bcftools index \\\\\n        -t \\\\\n        \"${sample}.vcf.gz\"\n    bcftools stats \\\\\n        \"${sample}.vcf.gz\" \\\\\n        > \"${sample}.stats.txt\"\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mpileup_region_variants"
        ],
        "nb_inputs": 1,
        "outputs": [
            "soft_filtered_variants",
            "raw_variant_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'bcftools'",
            "publishDir \"${params.outdir}/BCFtools/${sample}\", mode: 'copy', saveAs: { fn -> fn.endsWith(\".stats.txt\") ? null : \"${fn}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "filter": {
        "name_process": "filter",
        "string_process": "\nprocess filter {\n    tag { sample }\n\n    label 'bcftools'\n\n    publishDir \"${params.outdir}/BCFtools/${sample}\", mode: 'copy', saveAs: { fn ->\n        fn.endsWith(\".filtered.stats.txt\") ? null : \"${fn}\"\n    }\n\n    input:\n    set sample, file(indexed_vcf) from soft_filtered_variants\n\n    output:\n    set sample, file(\"${sample}.filtered.vcf.gz{,.tbi}\") into filtered_variants\n    file \"*.filtered.stats.txt\" into filtered_variant_stats\n\n    script:\n    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    bcftools view \\\\\n        --no-version \\\\\n        -f PASS \\\\\n        -o \"${sample}.filtered.vcf.gz\" \\\\\n        -Oz \\\\\n        \"${vcf}\"\n    bcftools index \\\\\n        -t \\\\\n        \"${sample}.filtered.vcf.gz\"\n    bcftools stats \\\\\n        \"${sample}.filtered.vcf.gz\" \\\\\n        > \"${sample}.filtered.stats.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    bcftools view \\\\\n        --no-version \\\\\n        -f PASS \\\\\n        -o \"${sample}.filtered.vcf.gz\" \\\\\n        -Oz \\\\\n        \"${vcf}\"\n    bcftools index \\\\\n        -t \\\\\n        \"${sample}.filtered.vcf.gz\"\n    bcftools stats \\\\\n        \"${sample}.filtered.vcf.gz\" \\\\\n        > \"${sample}.filtered.stats.txt\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "soft_filtered_variants"
        ],
        "nb_inputs": 1,
        "outputs": [
            "filtered_variants",
            "filtered_variant_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'bcftools'",
            "publishDir \"${params.outdir}/BCFtools/${sample}\", mode: 'copy', saveAs: { fn -> fn.endsWith(\".filtered.stats.txt\") ? null : \"${fn}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "vep": {
        "name_process": "vep",
        "string_process": "\nprocess vep {\n    tag { sample }\n\n    label 'ensembl_vep'\n\n    publishDir \"${params.outdir}/VEP/${sample}\", mode: 'copy'\n\n    input:\n    set sample, file(indexed_vcf) from filtered_variants\n    file \"cache/*\" from indexed_vep_cache\n    file ref_fasta\n    file ref_faidx\n\n    output:\n    set sample, file(\"${sample}.filtered.vep.vcf.gz{,.tbi}\") into vep_results\n    file \"*.html\" into vep_stats\n\n    script:\n    def (vcf, tbi) = indexed_vcf\n    def vep_cache_type = params.vep_cache_type ? '--' + params.vep_cache_type : ''\n\n    \"\"\"\n    vep \\\\\n        --everything \\\\\n        --species \"${params.vep_species_name}\" \\\\\n        --assembly \"${params.vep_assembly_name}\" \\\\\n        --input_file \"${vcf}\" \\\\\n        --output_file \"${sample}.filtered.vep.vcf.gz\" \\\\\n        --stats_file \"${sample}.filtered.stats.html\" \\\\\n        --fork ${task.cpus - 1} \\\\\n        --dir cache \\\\\n        --offline \\\\\n        --fasta \"${ref_fasta}\" \\\\\n        ${vep_cache_type} \\\\\n        --vcf \\\\\n        --compress_output bgzip \\\\\n        --dont_skip \\\\\n        --allow_non_variant\n    tabix \"${sample}.filtered.vep.vcf.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def (vcf, tbi) = indexed_vcf\n    def vep_cache_type = params.vep_cache_type ? '--' + params.vep_cache_type : ''\n\n    \"\"\"\n    vep \\\\\n        --everything \\\\\n        --species \"${params.vep_species_name}\" \\\\\n        --assembly \"${params.vep_assembly_name}\" \\\\\n        --input_file \"${vcf}\" \\\\\n        --output_file \"${sample}.filtered.vep.vcf.gz\" \\\\\n        --stats_file \"${sample}.filtered.stats.html\" \\\\\n        --fork ${task.cpus - 1} \\\\\n        --dir cache \\\\\n        --offline \\\\\n        --fasta \"${ref_fasta}\" \\\\\n        ${vep_cache_type} \\\\\n        --vcf \\\\\n        --compress_output bgzip \\\\\n        --dont_skip \\\\\n        --allow_non_variant\n    tabix \"${sample}.filtered.vep.vcf.gz\"\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "fivepseq"
        ],
        "tools_url": [
            "https://bio.tools/fivepseq"
        ],
        "tools_dico": [
            {
                "name": "fivepseq",
                "uri": "https://bio.tools/fivepseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3563",
                                    "term": "RNA-seq read count analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fivepseq is a software package for analysis of 5prime endpoints distribution in RNA sequencing datasets. This is particularly useful for techniques that capture 5prime  monophosphorylated RNAs, such as 5PSeq, PARE-seq or GMUC. It may also be useful for ribosome profiling datasets and alike.",
                "homepage": "http://pelechanolab.com/software/fivepseq"
            }
        ],
        "inputs": [
            "filtered_variants",
            "indexed_vep_cache",
            "ref_fasta",
            "ref_faidx"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vep_results",
            "vep_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'ensembl_vep'",
            "publishDir \"${params.outdir}/VEP/${sample}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "vepvcf2csv": {
        "name_process": "vepvcf2csv",
        "string_process": "\nprocess vepvcf2csv {\n    tag { sample }\n\n    label 'ensembl_vep'\n\n    publishDir \"${params.outdir}/VEP/${sample}\", mode: 'copy'\n\n    input:\n    set sample, file(indexed_vcf) from vep_results\n\n    output:\n    set sample, file(\"${sample}.filtered.vep.csv.gz\")\n\n    script:\n    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    vepvcf2csv.pl \\\\\n        -i \"${vcf}\" \\\\\n        -o \"${sample}.filtered.vep.csv.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    def (vcf, tbi) = indexed_vcf\n\n    \"\"\"\n    vepvcf2csv.pl \\\\\n        -i \"${vcf}\" \\\\\n        -o \"${sample}.filtered.vep.csv.gz\"\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vep_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "tag { sample }",
            "label 'ensembl_vep'",
            "publishDir \"${params.outdir}/VEP/${sample}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n    label 'multiqc'\n\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n\n    input:\n    file config from multiqc_cfg\n    file 'fastqc-raw/*' from fastqc_raw_results.collect()\n    file 'cutadapt/*' from cutadapt_logs.collect()\n    file 'fastqc-trimmed/*' from fastqc_trimmed_results.collect()\n    file 'star/*' from star_logs.collect()\n    file 'picard/markduplicates/*' from mark_duplicates_metrics.collect()\n    file 'bcftools-raw/*' from raw_variant_stats.collect()\n    file 'bcftools-filtered/*' from filtered_variant_stats.collect()\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\"\n\n    \"\"\"\n    multiqc \\\\\n        --config \"${config}\" \\\\\n        -m fastqc \\\\\n        -m cutadapt \\\\\n        -m star \\\\\n        -m picard \\\\\n        -m bcftools \\\\\n        .\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\"\"\"\n    multiqc \\\\\n        --config \"${config}\" \\\\\n        -m fastqc \\\\\n        -m cutadapt \\\\\n        -m star \\\\\n        -m picard \\\\\n        -m bcftools \\\\\n        .\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_cfg",
            "fastqc_raw_results",
            "cutadapt_logs",
            "fastqc_trimmed_results",
            "star_logs",
            "mark_duplicates_metrics",
            "raw_variant_stats",
            "filtered_variant_stats"
        ],
        "nb_inputs": 8,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "ampatchlab__nf-rnasnv",
        "directive": [
            "label 'multiqc'",
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "flye_assembly": {
        "name_process": "flye_assembly",
        "string_process": "\nprocess flye_assembly {\n    tag \"${meta}\"\n\n    if (!workflow.profile=='google' && !workflow.profile=='slurm'){\n        maxForks 1\n    }\n\n    publishDir \"${params.outdir}/${meta}/flye/${replicate}\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n\n    container \"staphb/flye:2.8\"\n\n    input:\n        tuple val(meta), path(reads)\n        val(replicate)\n    \n    output:\n        tuple val(meta), path(\"${meta}_flye/*.fasta\"), emit: assembly\n        tuple val(meta), path(\"${meta}_flye/*.gfa\"), emit: gfa\n    \n    script:\n        \"\"\"\n        flye --nano-raw $reads --genome-size $params.assembly_genome_size --plasmids --o ${meta}_flye --threads $params.threads\n        \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "        \"\"\"\n        flye --nano-raw $reads --genome-size $params.assembly_genome_size --plasmids --o ${meta}_flye --threads $params.threads\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "replicate"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alemenze__ONT-multi-assembly",
        "directive": [
            "tag \"${meta}\" if (!workflow.profile=='google' && !workflow.profile=='slurm'){ maxForks 1 }",
            "publishDir \"${params.outdir}/${meta}/flye/${replicate}\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename }",
            "container \"staphb/flye:2.8\""
        ],
        "when": "",
        "stub": ""
    },
    "raven_assembly": {
        "name_process": "raven_assembly",
        "string_process": "\nprocess raven_assembly {\n    tag \"${meta}\"\n\n    if (!workflow.profile=='google' && !workflow.profile=='slurm'){\n        maxForks 1\n    }\n\n    publishDir \"${params.outdir}/${meta}/raven/${replicate}\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n\n    container \"quay.io/biocontainers/raven-assembler:1.3.0--h8b12597_0\"\n\n    input:\n        tuple val(meta), path(reads)\n        val(replicate)\n    \n    output:\n        tuple val(meta), path(\"*.fasta\"), emit: assembly\n\n    script:\n        \"\"\"\n        raven -t $params.threads $reads > raven.fasta\n        \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "        \"\"\"\n        raven -t $params.threads $reads > raven.fasta\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "replicate"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alemenze__ONT-multi-assembly",
        "directive": [
            "tag \"${meta}\" if (!workflow.profile=='google' && !workflow.profile=='slurm'){ maxForks 1 }",
            "publishDir \"${params.outdir}/${meta}/raven/${replicate}\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename }",
            "container \"quay.io/biocontainers/raven-assembler:1.3.0--h8b12597_0\""
        ],
        "when": "",
        "stub": ""
    },
    "canu_assembly": {
        "name_process": "canu_assembly",
        "string_process": "\nprocess canu_assembly {\n    tag \"${meta}\"\n\n    publishDir \"${params.outdir}/${meta}/canu/${replicate}\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n    if (!workflow.profile=='google' && !workflow.profile=='slurm'){\n        maxForks 1\n    }\n\n    container \"staphb/canu-racon\"\n\n    input:\n        tuple val(meta), path(reads)\n        val(replicate)\n    \n    output:\n        tuple val(meta), path(\"${meta}_canu/*.contigs.fasta\"), emit: assembly\n        tuple val(meta), path(\"${meta}_canu/*.gfa\"), emit: gfa\n\n    script:\n        \"\"\"\n        canu -p ${meta} -d ${meta}_canu genomeSize=${params.assembly_genome_size} useGrid=false -nanopore $reads\n        \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "        \"\"\"\n        canu -p ${meta} -d ${meta}_canu genomeSize=${params.assembly_genome_size} useGrid=false -nanopore $reads\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "replicate"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alemenze__ONT-multi-assembly",
        "directive": [
            "tag \"${meta}\"",
            "publishDir \"${params.outdir}/${meta}/canu/${replicate}\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename } if (!workflow.profile=='google' && !workflow.profile=='slurm'){ maxForks 1 }",
            "container \"staphb/canu-racon\""
        ],
        "when": "",
        "stub": ""
    },
    "miniasm_assembly": {
        "name_process": "miniasm_assembly",
        "string_process": "\nprocess miniasm_assembly {\n    tag \"${meta}\"\n\n    if (!workflow.profile=='google' && !workflow.profile=='slurm'){\n        maxForks 1\n    }\n\n    publishDir \"${params.outdir}/${meta}/miniasm/${replicate}\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n\n    container \"alemenze/ont_minis\"\n\n    input:\n        tuple val(meta), path(reads)\n        val(replicate)\n\n    output:\n        tuple val(meta), path('*.fasta'), emit: assembly\n        tuple val(meta), path('miniasm.assembly.gfa'), emit: gfa\n    \n    script:\n        \"\"\"\n        minimap2 -x ava-ont -t $params.threads $reads $reads > overlaps.paf\n        miniasm -f $reads overlaps.paf > unpolished.gfa\n        minipolish --threads $params.threads $reads unpolished.gfa > miniasm.assembly.gfa\n        awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' miniasm.assembly.gfa > miniasm.assembly.fasta\n        \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "        \"\"\"\n        minimap2 -x ava-ont -t $params.threads $reads $reads > overlaps.paf\n        miniasm -f $reads overlaps.paf > unpolished.gfa\n        minipolish --threads $params.threads $reads unpolished.gfa > miniasm.assembly.gfa\n        awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' miniasm.assembly.gfa > miniasm.assembly.fasta\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "replicate"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alemenze__ONT-multi-assembly",
        "directive": [
            "tag \"${meta}\" if (!workflow.profile=='google' && !workflow.profile=='slurm'){ maxForks 1 }",
            "publishDir \"${params.outdir}/${meta}/miniasm/${replicate}\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename }",
            "container \"alemenze/ont_minis\""
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast {\n    tag \"${meta}\"\n\n    publishDir \"${params.outdir}/${meta}/${type}/${replicate}/quast/\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n\n    container \"staphb/quast:5.0.2\"\n\n    input:\n        tuple val(meta), path(reads)\n        val(replicate)\n        val(type)\n    \n    output:\n        path(\"${meta}*\"), emit: qc\n\n    script:\n        \"\"\"\n        quast.py -o $meta -b --circos $reads\n        \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        quast.py -o $meta -b --circos $reads\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "replicate",
            "type"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alemenze__ONT-multi-assembly",
        "directive": [
            "tag \"${meta}\"",
            "publishDir \"${params.outdir}/${meta}/${type}/${replicate}/quast/\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename }",
            "container \"staphb/quast:5.0.2\""
        ],
        "when": "",
        "stub": ""
    },
    "random_subset": {
        "name_process": "random_subset",
        "string_process": "\nprocess random_subset {\n    tag \"${meta}\"\n\n    publishDir \"${params.outdir}/rasusa/${replicate}\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n\n    container 'mbhall88/rasusa:0.3.0'\n\n    input:\n        tuple val(meta), path(reads)\n        val(replicate)\n\n    output:\n        tuple val(meta), path(\"*.subsamp.fastq.gz\"), emit: fastq\n\n    script:\n\n        \"\"\"\n        rasusa --input $reads \\\\\n            --coverage $params.subset_cov --genome-size $params.genome_size \\\\\n            --output ${meta}.subsamp.fastq.gz\n        \"\"\"\n\n\n}",
        "nb_lignes_process": 26,
        "string_script": "        \"\"\"\n        rasusa --input $reads \\\\\n            --coverage $params.subset_cov --genome-size $params.genome_size \\\\\n            --output ${meta}.subsamp.fastq.gz\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "replicate"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "alemenze__ONT-multi-assembly",
        "directive": [
            "tag \"${meta}\"",
            "publishDir \"${params.outdir}/rasusa/${replicate}\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename }",
            "container 'mbhall88/rasusa:0.3.0'"
        ],
        "when": "",
        "stub": ""
    }
}
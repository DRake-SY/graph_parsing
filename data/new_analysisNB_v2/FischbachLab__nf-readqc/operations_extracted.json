{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(params.seedfile)\n        .ifEmpty { exit 1, \"Cannot find any seed file matching: ${params.seedfile}.\" }\n        .splitCsv(header:true)\n        .map{ row -> tuple(row.sampleName, file(row.Reads))}\n        .groupTuple(sort:true)\n        .set { reads_concat }",
        "origin": [
            [
                "params.seedfile",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_concat",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.reads)\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}.\" }\n        .map {it -> tuple(params.prefix, it)}\n        .groupTuple(sort:true)\n        .set { reads_concat }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_concat",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "dedup_log = Channel.from(file(\"$baseDir/assets/no_dedup.yaml\"))",
        "origin": [],
        "gives": [
            [
                "dedup_log",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath( \"${params.artefacts}\", checkIfExists: true ).set { artefacts }",
        "origin": [
            [
                "\"${params.artefacts}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "artefacts",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath( \"${params.phix174ill}\", checkIfExists: true ).set { phix174ill }",
        "origin": [
            [
                "\"${params.phix174ill}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "phix174ill",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath( \"${params.adapters}\", checkIfExists: true ).set { adapters }",
        "origin": [
            [
                "\"${params.adapters}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "adapters",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "foreign_genome_ch = Channel.value(1)",
        "origin": [
            [
                "1",
                "V"
            ]
        ],
        "gives": [
            [
                "foreign_genome_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "index_foreign_genome_log = Channel.from(file(\"$baseDir/assets/foreign_genome_indexing_mqc.yaml\"))",
        "origin": [],
        "gives": [
            [
                "index_foreign_genome_log",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "index_foreign_genome_log = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "index_foreign_genome_log",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ref_foreign_genome = Channel.from(file(params.foreign_genome_ref))",
        "origin": [],
        "gives": [
            [
                "ref_foreign_genome",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "concat_fq.into {read_files_fastqc; read_files_dedup; read_files_synthetic_contaminants}",
        "origin": [
            [
                "concat_fq",
                "P"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_dedup",
                "P"
            ],
            [
                "read_files_synthetic_contaminants",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "summary.collect { k,v -> \"${k.padRight(27)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "to_synthetic_contaminants = read_files_synthetic_contaminants",
        "origin": [
            [
                "read_files_synthetic_contaminants",
                "P"
            ]
        ],
        "gives": [
            [
                "to_synthetic_contaminants",
                "P"
            ]
        ]
    }
}
{
    "prep_fasta": {
        "name_process": "prep_fasta",
        "string_process": "\nprocess prep_fasta {\n\n    input:\n    val row from manifest_ch\n\n    output:\n    tuple row, file(\"${row.climb_fn.baseName}.ena-a.fasta.gz\") into chrlist_ch\n\n    \"\"\"\n    elan_rehead.py ${row.climb_fn} '${row.published_name}' | gzip > ${row.climb_fn.baseName}.ena-a.fasta.gz\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    elan_rehead.py ${row.climb_fn} '${row.published_name}' | gzip > ${row.climb_fn.baseName}.ena-a.fasta.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "manifest_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chrlist_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "SamStudio8__elan-ena-nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generate_chrlist": {
        "name_process": "generate_chrlist",
        "string_process": "\nprocess generate_chrlist {\n\n    input:\n    tuple row, file(ena_fasta) from chrlist_ch\n\n    output:\n    tuple row, file(ena_fasta), file(\"${row.climb_fn.baseName}.chr_list.txt.gz\") into genmanifest_ch\n\n    script:\n    \"\"\"\n    echo \"${row.published_name} 1 Monopartite\" | gzip > ${row.climb_fn.baseName}.chr_list.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    echo \"${row.published_name} 1 Monopartite\" | gzip > ${row.climb_fn.baseName}.chr_list.txt.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chrlist_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genmanifest_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "SamStudio8__elan-ena-nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generate_manifest": {
        "name_process": "generate_manifest",
        "string_process": "\nprocess generate_manifest {\n    input:\n    tuple row, file(ena_fasta), file(chr_list) from genmanifest_ch\n\n    output:\n    tuple row, file(ena_fasta), file(chr_list), file(\"${row.climb_fn.baseName}.manifest.txt\") into webin_validate_ch\n\n    script:\n    def engine = new groovy.text.SimpleTemplateEngine()\n    this_description = engine.createTemplate(description_s).make(['row':row]).toString()\n    \"\"\"\n    echo \"STUDY ${params.study}\nSAMPLE ${row.ena_sample_id}\nRUN_REF ${row.ena_run_id}\nASSEMBLYNAME ${row.assemblyname}\nDESCRIPTION \"\"\" << this_description << \"\"\"\nASSEMBLY_TYPE COVID-19 outbreak\nMOLECULETYPE genomic RNA\nCOVERAGE ${row.mean_cov}\nPROGRAM ${row.program}\nPLATFORM ${row.platform}\nCHROMOSOME_LIST ${chr_list}\nFASTA ${ena_fasta}\nAUTHORS ${row.authors}\nADDRESS ${row.address}\nSUBMISSION_TOOL ${workflow_repo}\nSUBMISSION_TOOL_VERSION ${workflow_v}@${workflow_cid}\" > ${row.climb_fn.baseName}.manifest.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def engine = new groovy.text.SimpleTemplateEngine()\n    this_description = engine.createTemplate(description_s).make(['row':row]).toString()\n    \"\"\"\n    echo \"STUDY ${params.study}\nSAMPLE ${row.ena_sample_id}\nRUN_REF ${row.ena_run_id}\nASSEMBLYNAME ${row.assemblyname}\nDESCRIPTION \"\"\" << this_description << \"\"\"\nASSEMBLY_TYPE COVID-19 outbreak\nMOLECULETYPE genomic RNA\nCOVERAGE ${row.mean_cov}\nPROGRAM ${row.program}\nPLATFORM ${row.platform}\nCHROMOSOME_LIST ${chr_list}\nFASTA ${ena_fasta}\nAUTHORS ${row.authors}\nADDRESS ${row.address}\nSUBMISSION_TOOL ${workflow_repo}\nSUBMISSION_TOOL_VERSION ${workflow_v}@${workflow_cid}\" > ${row.climb_fn.baseName}.manifest.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "SAMPLE",
            "coveragegff",
            "R2 platform",
            "FASTA"
        ],
        "tools_url": [
            "https://bio.tools/sample",
            "https://bio.tools/coveragegff",
            "https://bio.tools/r2_platform",
            "https://bio.tools/fasta"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            },
            {
                "name": "coveragegff",
                "uri": "https://bio.tools/coveragegff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Computes reads coverage form a \"nbElements\" tag and writes the calculated coverage in a gff3 out file.",
                "homepage": "https://urgi.versailles.inra.fr/Tools/REPET"
            },
            {
                "name": "R2 platform",
                "uri": "https://bio.tools/r2_platform",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The R2 platform is an online genomics analysis tool which can analyze a large collection of public data, but also allows shielded analysis of your own microarray dataset. freely accessible and intended to be used by biologists, even those with little or no bioinformatics training.",
                "homepage": "http://r2.amc.nl"
            },
            {
                "name": "FASTA",
                "uri": "https://bio.tools/fasta",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "The FASTA programs find regions of local or global similarity between protein or DNA sequences, either by searching protein or DNA databases, or by identifying local duplications within a sequence. Like BLAST, FASTA can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families.",
                "homepage": "http://fasta.bioch.virginia.edu/"
            }
        ],
        "inputs": [
            "genmanifest_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "webin_validate_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "SamStudio8__elan-ena-nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "webin_validate": {
        "name_process": "webin_validate",
        "string_process": "\nprocess webin_validate {\n    input:\n    tuple row, file(ena_fasta), file(chr_list), file(ena_manifest) from webin_validate_ch\n\n    errorStrategy 'ignore'                                          \n\n    output:\n    tuple row, file(ena_fasta), file(chr_list), file(ena_manifest) into webin_submit_ch\n\n    script:\n    \"\"\"\n    java -jar ${params.webin_jar} -context genome -userName \\$WEBIN_USER -password \\$WEBIN_PASS -manifest ${ena_manifest} -centerName '${row.center_name}' ${flag_ascp} -validate\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    java -jar ${params.webin_jar} -context genome -userName \\$WEBIN_USER -password \\$WEBIN_PASS -manifest ${ena_manifest} -centerName '${row.center_name}' ${flag_ascp} -validate\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "webin_validate_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "webin_submit_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "SamStudio8__elan-ena-nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "webin_submit": {
        "name_process": "webin_submit",
        "string_process": "\nprocess webin_submit {\n    errorStrategy 'ignore'                                          \n\n    input:\n    tuple row, file(ena_fasta), file(chr_list), file(ena_manifest) from webin_submit_ch\n\n    output:\n    tuple row, file(ena_fasta), file(chr_list), file(ena_manifest), file(\"genome/${row.assemblyname.replaceAll('#', '_')}/submit/receipt.xml\") into webin_parse_ch\n\n    script:\n    \"\"\"\n    java -jar ${params.webin_jar} -context genome -userName \\$WEBIN_USER -password \\$WEBIN_PASS -manifest ${ena_manifest} -centerName '${row.center_name}' ${flag_ascp} -submit ${flag_test}\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    java -jar ${params.webin_jar} -context genome -userName \\$WEBIN_USER -password \\$WEBIN_PASS -manifest ${ena_manifest} -centerName '${row.center_name}' ${flag_ascp} -submit ${flag_test}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "webin_submit_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "webin_parse_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "SamStudio8__elan-ena-nextflow",
        "directive": [
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "receipt_parser": {
        "name_process": "receipt_parser",
        "string_process": "\nprocess receipt_parser {\n    conda \"$baseDir/environments/receipt.yaml\"\n\n    input:\n    tuple row, file(ena_fasta), file(chr_list), file(ena_manifest), file(ena_receipt) from webin_parse_ch\n\n    output:\n    file(\"${row.climb_fn.baseName}.accession.txt\") into accession_report_ch\n\n    script:\n    \"\"\"\n    parse_receipt.py ${ena_manifest} ${ena_receipt} ${row.published_name} > ${row.climb_fn.baseName}.accession.txt\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    parse_receipt.py ${ena_manifest} ${ena_receipt} ${row.published_name} > ${row.climb_fn.baseName}.accession.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "webin_parse_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "accession_report_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "SamStudio8__elan-ena-nextflow",
        "directive": [
            "conda \"$baseDir/environments/receipt.yaml\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n     .fromFilePairs(params.datadir + '/**R{1,2}*.fastq.gz', flat: true)\n     .map { prefix, file1, file2 -> tuple(getLibraryId(prefix), file1, file2) }\n     .groupTuple() \n     .filter { it[0] =~ /^[0-9]/}\n     .into { fastq_ch; fastq_ch_sal; fastq_ch_star }",
        "origin": [
            [
                "params.datadir + '/**R{1,2}*.fastq.gz', flat: true",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_ch",
                "P"
            ],
            [
                "fastq_ch_sal",
                "P"
            ],
            [
                "fastq_ch_star",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n     .fromPath(params.covar)\n     .splitCsv(header:true)\n     .map {row -> tuple (row.id.split(\"_\")[5], row.sex, \"G${row.ngen}\")}\n     .set { metadata }",
        "origin": [
            [
                "params.covar",
                "A"
            ]
        ],
        "gives": [
            [
                "metadata",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n     .fromPath(params.covar)\n     .set { QTL_metadata }",
        "origin": [
            [
                "params.covar",
                "A"
            ]
        ],
        "gives": [
            [
                "QTL_metadata",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n     .fromPath(params.rdata)\n     .set { rdataCh }",
        "origin": [
            [
                "params.rdata",
                "A"
            ]
        ],
        "gives": [
            [
                "rdataCh",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n      .fromPath(params.genoprobs)\n      .set { genopCh }",
        "origin": [
            [
                "params.genoprobs",
                "A"
            ]
        ],
        "gives": [
            [
                "genopCh",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n  .fromPath(params.gbrs_data + \"/suppFiles/C57BL6J/C57BL6J.fa\")\n  .into{genome_fa; genome_fa2; star_genome; rsem_genome}",
        "origin": [
            [
                "params.gbrs_data + \"/suppFiles/C57BL6J/C57BL6J.fa\"",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_fa",
                "P"
            ],
            [
                "genome_fa2",
                "P"
            ],
            [
                "star_genome",
                "P"
            ],
            [
                "rsem_genome",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n  .fromPath(params.gbrs_data + \"/suppFiles/C57BL6J/C57BL6J.gtf\")\n  .into{genome_gtf; trans_gtf; star_gtf; rsem_gtf}",
        "origin": [
            [
                "params.gbrs_data + \"/suppFiles/C57BL6J/C57BL6J.gtf\"",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_gtf",
                "P"
            ],
            [
                "trans_gtf",
                "P"
            ],
            [
                "star_gtf",
                "P"
            ],
            [
                "rsem_gtf",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "metadata.join(aln_compressed).into {compm1; compm2}PROCESS DEF quantify",
        "origin": [
            [
                "metadata",
                "P"
            ],
            [
                "aln_compressed",
                "P"
            ]
        ],
        "gives": [
            [
                "compm1",
                "P"
            ],
            [
                "compm2",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "genes_tpm.join(salmon_out).join(rsem_genes_count).set{both_out}PROCESS DEF compare_tpm",
        "origin": [
            [
                "genes_tpm",
                "P"
            ],
            [
                "salmon_out",
                "P"
            ],
            [
                "rsem_genes_count",
                "P"
            ]
        ],
        "gives": [
            [
                "both_out",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "count_tbl.splitCsv(header:true, by:100)\n     .map {row -> row.gene}\n     .set { genes }",
        "origin": [
            [
                "count_tbl",
                "P"
            ]
        ],
        "gives": [
            [
                "genes",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "h2g_gene.collectFile().set { h2g_all }",
        "origin": [
            [
                "h2g_gene",
                "P"
            ]
        ],
        "gives": [
            [
                "h2g_all",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "gene_perm.collectFile().set { perm_all }PROCESS DEF collect_h2g",
        "origin": [
            [
                "gene_perm",
                "P"
            ]
        ],
        "gives": [
            [
                "perm_all",
                "P"
            ]
        ]
    }
}
{
    "SubsetPopVCF": {
        "name_process": "SubsetPopVCF",
        "string_process": "\nprocess SubsetPopVCF {\n\n    tag {\"${sample_list.simpleName}-${vcf.baseName}\"}\n                                                                                                            \n\n\n    input:\n    set file(sample_list), file(vcf), file(vcf_index) from ch_multiVCF\n    each file(fasta) from ch_fasta\n    each file(fai) from ch_fai\n    each file(dict) from ch_dict\n\n    output:\n    set val(\"${sample_list.simpleName}\"), file(\"${vcf.baseName}.${sample_list.simpleName}.vcf\") into (ch_pops_vcfs_to_bcftools, ch_pops_vcfs_to_bcftools_to_inspect)\n\n    script:\n    \"\"\"\n    gatk SelectVariants \\\n    -R ${fasta} \\\n    -V $vcf \\\n    -O ${vcf.baseName}.${sample_list.simpleName}.vcf \\\n    --sample-name ${sample_list}  \\\n    --restrict-alleles-to BIALLELIC \\\n    --select-type-to-include SNP \\\n    --verbosity ERROR 2> stderr.txt\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    gatk SelectVariants \\\n    -R ${fasta} \\\n    -V $vcf \\\n    -O ${vcf.baseName}.${sample_list.simpleName}.vcf \\\n    --sample-name ${sample_list}  \\\n    --restrict-alleles-to BIALLELIC \\\n    --select-type-to-include SNP \\\n    --verbosity ERROR 2> stderr.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "ch_multiVCF",
            "ch_fasta",
            "ch_fai",
            "ch_dict"
        ],
        "nb_inputs": 4,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag {\"${sample_list.simpleName}-${vcf.baseName}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "RecodeID": {
        "name_process": "RecodeID",
        "string_process": "\nprocess RecodeID {\n\n    tag {\"${pop_name}-${vcf.baseName}\"}\n\n\n    input:\n    set val(pop_name), file(vcf) from ch_pops_vcfs_to_bcftools\n\n    output:\n    set val(\"${pop_name}\"), file(\"${vcf.baseName}.${pop_name}.vcf.gz\") into (ch_pops_vcfs, ch_pops_vcfs_to_inspect)\n\n    script:\n    \"\"\"\n    # Recode ID to: chr:pos:ref:alt\n    bcftools annotate -x ID $vcf | bcftools annotate --set-id +'%CHROM:%POS:%REF:%FIRST_ALT' > ${vcf.baseName}.${pop_name}.vcf\n\n    bgzip -c ${vcf.baseName}.${pop_name}.vcf > ${vcf.baseName}.${pop_name}.vcf.gz\n   \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    # Recode ID to: chr:pos:ref:alt\n    bcftools annotate -x ID $vcf | bcftools annotate --set-id +'%CHROM:%POS:%REF:%FIRST_ALT' > ${vcf.baseName}.${pop_name}.vcf\n\n    bgzip -c ${vcf.baseName}.${pop_name}.vcf > ${vcf.baseName}.${pop_name}.vcf.gz\n   \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_pops_vcfs_to_bcftools"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag {\"${pop_name}-${vcf.baseName}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "GatherVCFs": {
        "name_process": "GatherVCFs",
        "string_process": "\nprocess GatherVCFs {\n\n    tag \"${pop_name}\"\n                                                                                                     \n\n\n    input:\n    set val(pop_name), file (vcf_bundle) from ch_grouped_pop_vcfs\n    each file(fasta) from ch_fasta_gather\n    each file(fai) from ch_fai_gather\n    each file(dict) from ch_dict_gather\n\n    output:\n    set val(\"${pop_name}\"), file(\"${pop_name}.vcf\") into (ch_plink_create_white_list, ch_plink_count_freqs_to_inspect)\n\n\n    script:\n    \"\"\"\n    ls *.vcf.gz | while read vcf; do tabix -fp vcf \\$vcf; done\n\n    ## make list of input variant files\n    for vcf in \\$(ls *vcf.gz); do\n    echo \\$vcf >> temp.vcf.list\n    done\n\n    ## Sorting else GATK complains (see error message below)\n    ## \"There was a problem with gathering the INPUT.java.lang.IllegalArgumentException:\n    ## First record in file chr2.vcf.gz is not after first record in previous file chr19.vcf.gz\"\n    cat temp.vcf.list | sort -V > ${pop_name}.vcf.list\n\n    gatk GatherVcfs \\\n    --INPUT  ${pop_name}.vcf.list \\\n    --OUTPUT ${pop_name}.vcf.gz\n\n    gunzip ${pop_name}.vcf.gz\n    \"\"\"\n    }",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    ls *.vcf.gz | while read vcf; do tabix -fp vcf \\$vcf; done\n\n    ## make list of input variant files\n    for vcf in \\$(ls *vcf.gz); do\n    echo \\$vcf >> temp.vcf.list\n    done\n\n    ## Sorting else GATK complains (see error message below)\n    ## \"There was a problem with gathering the INPUT.java.lang.IllegalArgumentException:\n    ## First record in file chr2.vcf.gz is not after first record in previous file chr19.vcf.gz\"\n    cat temp.vcf.list | sort -V > ${pop_name}.vcf.list\n\n    gatk GatherVcfs \\\n    --INPUT  ${pop_name}.vcf.list \\\n    --OUTPUT ${pop_name}.vcf.gz\n\n    gunzip ${pop_name}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "ch_grouped_pop_vcfs",
            "ch_fasta_gather",
            "ch_fai_gather",
            "ch_dict_gather"
        ],
        "nb_inputs": 4,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag \"${pop_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "CreateSNPWhiteList": {
        "name_process": "CreateSNPWhiteList",
        "string_process": "\nprocess CreateSNPWhiteList {\n\n    tag \"${pop_name}\"\n                                                                                  \n\n\n    input:\n    set val(pop_name), file(all_chr_vcf) from ch_plink_create_white_list\n\n    output:\n    set val(\"${pop_name}\"), file(\"${all_chr_vcf.simpleName}.SNPwhite.list\"), file(\"${all_chr_vcf.simpleName}.vcf\") into  ch_whitelist_for_keepIDs\n\n    script:\n    \"\"\"\n    plink \\\n    --noweb \\\n    --vcf $all_chr_vcf \\\n    --no-sex \\\n    --maf 0.1 \\\n    --geno 0.5 \\\n    --recode \\\n    --allow-extra-chr \\\n    --r2 \\\n    --ld-window-kb 1 \\\n    --ld-window 1000 \\\n    --ld-window-r2 0 \\\n    --out ${all_chr_vcf.simpleName}\n\n    awk '{ print \\$2 }' \"${all_chr_vcf.simpleName}.map\"  > \"${all_chr_vcf.simpleName}.SNPwhite.list\"\n    \"\"\"\n    }",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    plink \\\n    --noweb \\\n    --vcf $all_chr_vcf \\\n    --no-sex \\\n    --maf 0.1 \\\n    --geno 0.5 \\\n    --recode \\\n    --allow-extra-chr \\\n    --r2 \\\n    --ld-window-kb 1 \\\n    --ld-window 1000 \\\n    --ld-window-r2 0 \\\n    --out ${all_chr_vcf.simpleName}\n\n    awk '{ print \\$2 }' \"${all_chr_vcf.simpleName}.map\"  > \"${all_chr_vcf.simpleName}.SNPwhite.list\"\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "ch_plink_create_white_list"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_whitelist_for_keepIDs"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag \"${pop_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "KeepWhitelistedSNPs": {
        "name_process": "KeepWhitelistedSNPs",
        "string_process": "\nprocess KeepWhitelistedSNPs {\n\n    tag {\"${pop_name}-${vcf.baseName}\"}\n                                                                                              \n\n\n    input:\n    set val(pop_name), file(whitelist), file(vcf) from ch_whitelist_for_keepIDs\n    each file(fasta) from ch_fasta_for_filterSNPs\n    each file(fai) from ch_fai_for_filterSNPs\n    each file(dict) from ch_dict_for_filterSNPs\n\n\n    output:\n    set val(\"${vcf.simpleName}\"), file(\"${vcf.simpleName}.filtered.vcf\") into (ch_pruned_for_get_frq_counts, ch_pruned_for_get_frq_counts_to_inspect)\n\n    script:\n    \"\"\"\n    gatk IndexFeatureFile \\\n    -F $vcf && \\\n\n    gatk SelectVariants \\\n    -R hs37d5.fa \\\n    -V $vcf \\\n    -O ${vcf.simpleName}.filtered.vcf \\\n    --keep-ids $whitelist\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    gatk IndexFeatureFile \\\n    -F $vcf && \\\n\n    gatk SelectVariants \\\n    -R hs37d5.fa \\\n    -V $vcf \\\n    -O ${vcf.simpleName}.filtered.vcf \\\n    --keep-ids $whitelist\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "ch_whitelist_for_keepIDs",
            "ch_fasta_for_filterSNPs",
            "ch_fai_for_filterSNPs",
            "ch_dict_for_filterSNPs"
        ],
        "nb_inputs": 4,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag {\"${pop_name}-${vcf.baseName}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "GetFrqCounts": {
        "name_process": "GetFrqCounts",
        "string_process": "\nprocess GetFrqCounts {\n\n    tag \"${pop_name}\"\n                                                                            \n\n\n    input:\n    set val(pop_name), file(all_chr_vcf) from ch_pruned_for_get_frq_counts\n\n    output:\n    set val(\"${pop_name}\"), file(\"${pop_name}.frq.counts\") into  ch_plink_frq_counts_pop_tables\n    file(\"${pop_name}.frq.counts\") into ch_plink_frq_counts_for_panel\n\n    script:\n    \"\"\"\n    plink \\\n    --vcf $all_chr_vcf \\\n    --snps-only \\\n    --biallelic-only strict list \\\n    --geno 0.05 \\\n    --maf  0.05 \\\n    --freq counts \\\n    --out $pop_name > ${pop_name}_plink.stdout.log\n    \"\"\"\n    }",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    plink \\\n    --vcf $all_chr_vcf \\\n    --snps-only \\\n    --biallelic-only strict list \\\n    --geno 0.05 \\\n    --maf  0.05 \\\n    --freq counts \\\n    --out $pop_name > ${pop_name}_plink.stdout.log\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "ch_pruned_for_get_frq_counts"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_plink_frq_counts_pop_tables",
            "ch_plink_frq_counts_for_panel"
        ],
        "nb_outputs": 2,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag \"${pop_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "GetPanelBase": {
        "name_process": "GetPanelBase",
        "string_process": "\nprocess GetPanelBase {\n\n    tag \"panel template\"\n                                                                       \n\n\n    input:\n    file(frq_counts) from ch_panel_base\n\n    output:\n    file(\"template.panel.csv\") into ch_panel_base_dataframe\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(data.table)\n    data.table::setDTthreads(${task.cpus})\n\n    frq_file <- list.files(getwd(), full.names = TRUE, pattern = \".frq.counts\")\n    frq_counts           <- data.table::fread(frq_file)\n    colnames(frq_counts) <- c(\"chr\",\"rs\",\"a1\",\"a2\", \"c1\",\"c2\",\"gpos\" )\n    \n    # Extract pos from rs column\n    frq_counts\\$pos <- stringr::str_split_fixed(frq_counts[[\"rs\"]], \":\", n = Inf)[,2]\n    frq_counts <- frq_counts[,c(\"chr\", \"rs\", \"gpos\", \"pos\", \"a1\", \"a2\")]\n\n    # Write file in .panel.csv\n    data.table::fwrite(frq_counts, file = paste0(\"template.panel.csv\"), sep = \",\", col.names = TRUE)\n    \"\"\"\n    }",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(data.table)\n    data.table::setDTthreads(${task.cpus})\n\n    frq_file <- list.files(getwd(), full.names = TRUE, pattern = \".frq.counts\")\n    frq_counts           <- data.table::fread(frq_file)\n    colnames(frq_counts) <- c(\"chr\",\"rs\",\"a1\",\"a2\", \"c1\",\"c2\",\"gpos\" )\n    \n    # Extract pos from rs column\n    frq_counts\\$pos <- stringr::str_split_fixed(frq_counts[[\"rs\"]], \":\", n = Inf)[,2]\n    frq_counts <- frq_counts[,c(\"chr\", \"rs\", \"gpos\", \"pos\", \"a1\", \"a2\")]\n\n    # Write file in .panel.csv\n    data.table::fwrite(frq_counts, file = paste0(\"template.panel.csv\"), sep = \",\", col.names = TRUE)\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_panel_base"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_panel_base_dataframe"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag \"panel template\""
        ],
        "when": "",
        "stub": ""
    },
    "GetPopTables": {
        "name_process": "GetPopTables",
        "string_process": "\nprocess GetPopTables {\n\n    tag \"${pop_name}\"\n    publishDir \"${params.outdir}/PopTables/\", mode: 'copy'\n\n\n    input:\n    set val(pop_name), file(frq_counts) from ch_plink_frq_counts_pop_tables\n\n    output:\n    file(\"${pop_name}.pop.csv\") into ch_pop_dataframes_for_panel\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(data.table)\n    data.table::setDTthreads(${task.cpus})\n\n    frq_file <- list.files(getwd(), full.names = TRUE, pattern = \".frq.counts\")\n    frq_counts           <- data.table::fread(frq_file)\n    colnames(frq_counts) <- c(\"chr\",\"rs\",\"a1\",\"a2\", \"c1\",\"c2\",\"gpos\" )\n\n    # Extract pos from rs column\n    frq_counts\\$pos <- stringr::str_split_fixed(frq_counts[[\"rs\"]], \":\", n = Inf)[,2]\n    frq_counts\\$pop <- paste0(frq_counts\\$c1, \",\",  frq_counts\\$c2)\n    pop_table       <- frq_counts [, c(\"rs\", \"pop\")]\n    colnames(pop_table) <- c(\"rs\", \"${pop_name}\")\n\n    # Write file in .pop.csv\n    data.table::fwrite(pop_table, file = paste0(\"${pop_name}\", \".pop.csv\"), sep = \",\", col.names = TRUE)\n    \"\"\"\n    }",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(data.table)\n    data.table::setDTthreads(${task.cpus})\n\n    frq_file <- list.files(getwd(), full.names = TRUE, pattern = \".frq.counts\")\n    frq_counts           <- data.table::fread(frq_file)\n    colnames(frq_counts) <- c(\"chr\",\"rs\",\"a1\",\"a2\", \"c1\",\"c2\",\"gpos\" )\n\n    # Extract pos from rs column\n    frq_counts\\$pos <- stringr::str_split_fixed(frq_counts[[\"rs\"]], \":\", n = Inf)[,2]\n    frq_counts\\$pop <- paste0(frq_counts\\$c1, \",\",  frq_counts\\$c2)\n    pop_table       <- frq_counts [, c(\"rs\", \"pop\")]\n    colnames(pop_table) <- c(\"rs\", \"${pop_name}\")\n\n    # Write file in .pop.csv\n    data.table::fwrite(pop_table, file = paste0(\"${pop_name}\", \".pop.csv\"), sep = \",\", col.names = TRUE)\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_plink_frq_counts_pop_tables"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_pop_dataframes_for_panel"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag \"${pop_name}\"",
            "publishDir \"${params.outdir}/PopTables/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "JoinPanel": {
        "name_process": "JoinPanel",
        "string_process": "\nprocess JoinPanel {\n\n    tag \"Joining panel\"\n    publishDir \"${params.outdir}/RefPanel/\", mode: 'copy'\n\n\n    input:\n    file(panel_csv) from ch_panel_base_dataframe\n    file(pop_csv)   from ch_pop_dataframes_for_panel.collect()\n\n    output:\n    file(\"*\") into ch_freq_dataframes\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(data.table)\n    data.table::setDTthreads(${task.cpus})\n\n    panel_csv_path   <- list.files(getwd(), full.names = TRUE, pattern = \".panel.csv\")\n\n    # Collect all the .csv files that match the pattern \".pop.csv\" (engineered so in previous process mua ha)\n    all_pop_csv_paths <- list.files(getwd(), full.names = TRUE, pattern = \".pop.csv\")\n    all_csv_paths <- c(panel_csv_path, all_pop_csv_paths)\n\n    all_csv <- lapply(all_csv_paths, data.table::fread)\n\n    # (Redundant but I <3 this)\n    # Collect all the names of the .csv files that match the pattern \".pop.csv\"\n    names(all_csv) <- gsub(\".csv\",\"\", basename(all_csv_paths), fixed = TRUE)\n\n    # Now all the data.tables are in a lists already - how convenient! Just in time for plyr::join()\n    panel <- Reduce(function(dtf1, dtf2) plyr::join(dtf1, dtf2, by = \"rs\", type = \"inner\"), all_csv)\n\n    # Write file in ref.panel.txt\n    data.table::fwrite(panel, file = paste0(\"refpanel_\", length(all_pop_csv_paths), \"pops.txt\"), sep = \" \", col.names = TRUE)\n\n    \"\"\"\n    }",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(data.table)\n    data.table::setDTthreads(${task.cpus})\n\n    panel_csv_path   <- list.files(getwd(), full.names = TRUE, pattern = \".panel.csv\")\n\n    # Collect all the .csv files that match the pattern \".pop.csv\" (engineered so in previous process mua ha)\n    all_pop_csv_paths <- list.files(getwd(), full.names = TRUE, pattern = \".pop.csv\")\n    all_csv_paths <- c(panel_csv_path, all_pop_csv_paths)\n\n    all_csv <- lapply(all_csv_paths, data.table::fread)\n\n    # (Redundant but I <3 this)\n    # Collect all the names of the .csv files that match the pattern \".pop.csv\"\n    names(all_csv) <- gsub(\".csv\",\"\", basename(all_csv_paths), fixed = TRUE)\n\n    # Now all the data.tables are in a lists already - how convenient! Just in time for plyr::join()\n    panel <- Reduce(function(dtf1, dtf2) plyr::join(dtf1, dtf2, by = \"rs\", type = \"inner\"), all_csv)\n\n    # Write file in ref.panel.txt\n    data.table::fwrite(panel, file = paste0(\"refpanel_\", length(all_pop_csv_paths), \"pops.txt\"), sep = \" \", col.names = TRUE)\n\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_panel_base_dataframe",
            "ch_pop_dataframes_for_panel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_freq_dataframes"
        ],
        "nb_outputs": 1,
        "name_workflow": "cgpu__panelR",
        "directive": [
            "tag \"Joining panel\"",
            "publishDir \"${params.outdir}/RefPanel/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
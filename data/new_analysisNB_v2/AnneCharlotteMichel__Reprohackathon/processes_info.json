{
    "getFastq": {
        "name_process": "getFastq",
        "string_process": "\nprocess getFastq{\n    input :\n    val srr from SRAID\n \n    output :\n    tuple val(srr), file(\"*.sra\") into sra_files\n \n    script :\n    \"\"\"\n    wget -O ${srr}.sra https://sra-downloadb.be-md.ncbi.nlm.nih.gov/sos1/sra-pub-run-5/${srr}/${srr}.1\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    wget -O ${srr}.sra https://sra-downloadb.be-md.ncbi.nlm.nih.gov/sos1/sra-pub-run-5/${srr}/${srr}.1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SRAID"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sra_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "dumpFastq": {
        "name_process": "dumpFastq",
        "string_process": "\nprocess dumpFastq{\n    publishDir \"fastq/\"\n    input :\n    tuple val(srr), file(sra) from sra_files\n \n    output :\n    tuple val(srr), file(\"*_1.fastq.gz\"), file(\"*_2.fastq.gz\") into fastq_files\n \n    script :\n    \"\"\"\n    fastq-dump --gzip --split-files ${srr}.sra  \n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    fastq-dump --gzip --split-files ${srr}.sra  \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sra_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastq_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [
            "publishDir \"fastq/\""
        ],
        "when": "",
        "stub": ""
    },
    "getChr": {
        "name_process": "getChr",
        "string_process": "\nprocess getChr {\n    input :\n    val chr from liste_chromosomes\n \n    output :\n    file \"*.fa\" into genome_files\n \n    script :\n    \"\"\"\n    wget -O chr${chr}.fa.gz ftp://ftp.ensembl.org/pub/release-101/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.${chr}.fa.gz\n    gunzip chr${chr}.fa.gz\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    wget -O chr${chr}.fa.gz ftp://ftp.ensembl.org/pub/release-101/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.${chr}.fa.gz\n    gunzip chr${chr}.fa.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "liste_chromosomes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genome_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "concatChr": {
        "name_process": "concatChr",
        "string_process": "\nprocess concatChr {\n    input:\n    file gen from genome_files.collect()\n    \n    output:\n    file \"ref.fa\" into genome_concat\n    \n    script :\n    \"\"\"\n    cat *.fa > ref.fa\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    cat *.fa > ref.fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genome_concat"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "genomeIndex": {
        "name_process": "genomeIndex",
        "string_process": "\nprocess genomeIndex {\n    input :\n    file gen from genome_concat\n \n    output :\n    file \"ref\" into star_index\n \n    script :\n    \"\"\"\n    STAR --runThreadN ${task.cpus} \\\n    --runMode genomeGenerate \\\n    --genomeDir ref \\\n    --genomeFastaFiles ${gen}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    STAR --runThreadN ${task.cpus} \\\n    --runMode genomeGenerate \\\n    --genomeDir ref \\\n    --genomeFastaFiles ${gen}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "genome_concat"
        ],
        "nb_inputs": 1,
        "outputs": [
            "star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mapFastq": {
        "name_process": "mapFastq",
        "string_process": "\nprocess mapFastq {\n    publishDir \"bam/\"\n\n    input:\n    tuple val(srr), file(f1), file(f2) from fastq_files\n    path ref from star_index\n \n    output:\n    file \"${srr}.bam\" into mapped_fastq_files_1, mapped_fastq_files_2\n \n    script:\n    \"\"\"\n    STAR --outSAMstrandField intronMotif \\\n        --outFilterMismatchNmax 4 \\\n        --outFilterMultimapNmax 10 \\\n        --genomeDir ${ref} \\\n        --readFilesIn <(gunzip -c ${f1}) <(gunzip -c ${f2}) \\\n        --runThreadN ${task.cpus} \\\n        --outSAMunmapped None \\\n        --outSAMtype BAM SortedByCoordinate \\\n        --outStd BAM_SortedByCoordinate \\\n        --genomeLoad NoSharedMemory \\\n        --limitBAMsortRAM ${task.memory.toBytes()} \\\n\t >${srr}.bam    \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    STAR --outSAMstrandField intronMotif \\\n        --outFilterMismatchNmax 4 \\\n        --outFilterMultimapNmax 10 \\\n        --genomeDir ${ref} \\\n        --readFilesIn <(gunzip -c ${f1}) <(gunzip -c ${f2}) \\\n        --runThreadN ${task.cpus} \\\n        --outSAMunmapped None \\\n        --outSAMtype BAM SortedByCoordinate \\\n        --outStd BAM_SortedByCoordinate \\\n        --genomeLoad NoSharedMemory \\\n        --limitBAMsortRAM ${task.memory.toBytes()} \\\n\t >${srr}.bam    \n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fastq_files",
            "star_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mapped_fastq_files_1",
            "mapped_fastq_files_2"
        ],
        "nb_outputs": 2,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [
            "publishDir \"bam/\""
        ],
        "when": "",
        "stub": ""
    },
    "samFastq": {
        "name_process": "samFastq",
        "string_process": "\nprocess samFastq {\n    publishDir \"bai/\"\n\n    input:\n    file bam from mapped_fastq_files_1\n \n    output:\n    file \"*.bai\" into sam_fastq_files\n \n    script:\n    \"\"\"\n    samtools index *.bam\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    samtools index *.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mapped_fastq_files_1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sam_fastq_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [
            "publishDir \"bai/\""
        ],
        "when": "",
        "stub": ""
    },
    "getGenomic_features": {
        "name_process": "getGenomic_features",
        "string_process": "\nprocess getGenomic_features{\n    output:\n    file \"*.gtf\" into annotation \n    \n    script:\n    \"\"\"\n    wget ftp://ftp.ensembl.org/pub/release-101/gtf/homo_sapiens/Homo_sapiens.GRCh38.101.chr.gtf.gz\n    gzip -d  Homo_sapiens.GRCh38.101.chr.gtf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "    \"\"\"\n    wget ftp://ftp.ensembl.org/pub/release-101/gtf/homo_sapiens/Homo_sapiens.GRCh38.101.chr.gtf.gz\n    gzip -d  Homo_sapiens.GRCh38.101.chr.gtf.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "annotation"
        ],
        "nb_outputs": 1,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "getCount_feature": {
        "name_process": "getCount_feature",
        "string_process": "\nprocess getCount_feature{\n    publishDir \"feat_output/\"\n    input:\n    file gtf from annotation\n    file bam from mapped_fastq_files_2.collect()\n    file bai from sam_fastq_files.collect()\n    \n    output:\n    file \"output.counts\" into FileCount\n    file \"output.counts.summary\" into logsFileCount\n    \n    script:\n    \"\"\" \n     featureCounts -p -t gene -g gene_id -s 0 -a ${gtf} -o output.counts ${bam}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\" \n     featureCounts -p -t gene -g gene_id -s 0 -a ${gtf} -o output.counts ${bam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "annotation",
            "mapped_fastq_files_2",
            "sam_fastq_files"
        ],
        "nb_inputs": 3,
        "outputs": [
            "FileCount",
            "logsFileCount"
        ],
        "nb_outputs": 2,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [
            "publishDir \"feat_output/\""
        ],
        "when": "",
        "stub": ""
    },
    "deseq": {
        "name_process": "deseq",
        "string_process": "\nprocess deseq {\n        publishDir \"deseq_resultat/\", mode: 'copy', overwrite: true\n\n        input :\n        val srr from SRAID2\n        path counts from FileCount\n        path data from fichier_mutant\n\n        output :\n        file \"deseq_filt.csv\" into result_filt_deseq\n\tfile \"deseq_result.csv\" into result_deseq\n\tfile(\"padj_min.csv\") into gene_counts\n        \n\tscript :\n        \"\"\"\n        #!/usr/bin/env Rscript\n        library(\"DESeq2\")\n        cts = read.table(\"${counts}\", sep=\"\\t\", header=TRUE, row.names=\"Geneid\")\n        cts <- cts[,${srr}]\n        coldata = read.csv(\"${data}\", sep=\",\",header=TRUE, row.names=\"seq_name\")\n        dds <- DESeqDataSetFromMatrix(countData = cts,\n                              colData = coldata,\n                              design = ~ condition)\n        keep <- rowSums(counts(dds)) >= 10\n        dds <- dds[keep,]\n        dds <- DESeq(dds)\n\n        res <- results(dds)\n\n\tpadj_min <- plotCounts(dds, gene=which.min(res[,\"padj\"]), intgroup=\"condition\", returnData=TRUE)\n        write.csv(padj_min, file=\"padj_min.csv\")\n\n\tres<-as.data.frame(res)\n\tresOrdered <- res[order(res[,\"padj\"]),]\n\twrite.csv(resOrdered, file=\"deseq_result.csv\")\n\tres_filt <- subset(resOrdered, padj < 0.01)\n\twrite.csv(res_filt, file=\"deseq_filt.csv\")\n\t\n\n\n\n        \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "        \"\"\"\n        #!/usr/bin/env Rscript\n        library(\"DESeq2\")\n        cts = read.table(\"${counts}\", sep=\"\\t\", header=TRUE, row.names=\"Geneid\")\n        cts <- cts[,${srr}]\n        coldata = read.csv(\"${data}\", sep=\",\",header=TRUE, row.names=\"seq_name\")\n        dds <- DESeqDataSetFromMatrix(countData = cts,\n                              colData = coldata,\n                              design = ~ condition)\n        keep <- rowSums(counts(dds)) >= 10\n        dds <- dds[keep,]\n        dds <- DESeq(dds)\n\n        res <- results(dds)\n\n\tpadj_min <- plotCounts(dds, gene=which.min(res[,\"padj\"]), intgroup=\"condition\", returnData=TRUE)\n        write.csv(padj_min, file=\"padj_min.csv\")\n\n\tres<-as.data.frame(res)\n\tresOrdered <- res[order(res[,\"padj\"]),]\n\twrite.csv(resOrdered, file=\"deseq_result.csv\")\n\tres_filt <- subset(resOrdered, padj < 0.01)\n\twrite.csv(res_filt, file=\"deseq_filt.csv\")\n\t\n\n\n\n        \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SRAID2",
            "FileCount",
            "fichier_mutant"
        ],
        "nb_inputs": 3,
        "outputs": [
            "result_filt_deseq",
            "result_deseq",
            "gene_counts"
        ],
        "nb_outputs": 3,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [
            "publishDir \"deseq_resultat/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "plot": {
        "name_process": "plot",
        "string_process": "\nprocess plot {\n\tpublishDir \"plot/\", mode: 'copy', overwrite: true\t\n\tinput:\n\tpath x from result_deseq\n\tpath count from gene_counts\n\tpath result_filt from result_filt_deseq\n\n\toutput:\n\tfile \"plot.pdf\"\n\tfile \"count.pdf\"\n\n\tscript:\n\t\"\"\"\n        #!/usr/bin/env Rscript\n\tlibrary(\"ggplot2\")\n\tall_result=read.csv(\"${x}\", header=TRUE, sep=\",\")\n\t\n\tall_result[,\"diffexpressed\"] <- \"Non significatif\"\n\t# if log2Foldchange > 0.6 and padj < 0.05, on attribut la valeur \"UP\" \n\tall_result[,\"diffexpressed\"][all_result[,\"log2FoldChange\"] > 0.6 & all_result[,\"padj\"] < 0.05] <- \"Sup\u00e9rieur\"\n\t# if log2Foldchange < -0.6 and padj < 0.05, on attribut la valeur \"DOWN\"\n\tall_result[,\"diffexpressed\"][all_result[,\"log2FoldChange\"] < -0.6 & all_result[,\"padj\"] < 0.05] <- \"Inf\u00e9rieur\"\n\n\tp <- ggplot(all_result, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed)) + geom_point() + theme_minimal()\n\n\t# On ajoute des lignes pour rendre padj = 0,05 visible, ainsi que log2FoldChange=0,6/-0,6\n\tp2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col=\"red\") + geom_hline(yintercept=-log10(0.05), col=\"red\")\n\tggsave(\"plot.pdf\",p2, width=5, height=5)\n\n\n\tres_filt=read.csv(\"${result_filt}\", header=TRUE, sep=\",\", row.names=1)\n\tpadj=min(res_filt[,\"padj\"])\n\trow_padj_min <- res_filt[match(min(res_filt[,\"padj\"]),res_filt[,\"padj\"]),]\n\tname_padj_min <- rownames(row_padj_min)\n\ttitle <- paste(\"gene:\",name_padj_min,\"padj:\",padj,sep=\"\\n\") \n\n\tcount_df=read.csv(\"${count}\",header=TRUE,sep=\",\")\n\tcount <- ggplot(count_df, aes(x=condition, y=count)) + \n\t\t\tgeom_point(position=position_jitter(w=0.1,h=0)) + \n\t\t\tggtitle(title)\n\t\t\t\n\tggsave(\"count.pdf\",count, width=5, height=5)\n\t\n\n\"\"\"\n\n}",
        "nb_lignes_process": 46,
        "string_script": "\t\"\"\"\n        #!/usr/bin/env Rscript\n\tlibrary(\"ggplot2\")\n\tall_result=read.csv(\"${x}\", header=TRUE, sep=\",\")\n\t\n\tall_result[,\"diffexpressed\"] <- \"Non significatif\"\n\t# if log2Foldchange > 0.6 and padj < 0.05, on attribut la valeur \"UP\" \n\tall_result[,\"diffexpressed\"][all_result[,\"log2FoldChange\"] > 0.6 & all_result[,\"padj\"] < 0.05] <- \"Sup\u00e9rieur\"\n\t# if log2Foldchange < -0.6 and padj < 0.05, on attribut la valeur \"DOWN\"\n\tall_result[,\"diffexpressed\"][all_result[,\"log2FoldChange\"] < -0.6 & all_result[,\"padj\"] < 0.05] <- \"Inf\u00e9rieur\"\n\n\tp <- ggplot(all_result, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed)) + geom_point() + theme_minimal()\n\n\t# On ajoute des lignes pour rendre padj = 0,05 visible, ainsi que log2FoldChange=0,6/-0,6\n\tp2 <- p + geom_vline(xintercept=c(-0.6, 0.6), col=\"red\") + geom_hline(yintercept=-log10(0.05), col=\"red\")\n\tggsave(\"plot.pdf\",p2, width=5, height=5)\n\n\n\tres_filt=read.csv(\"${result_filt}\", header=TRUE, sep=\",\", row.names=1)\n\tpadj=min(res_filt[,\"padj\"])\n\trow_padj_min <- res_filt[match(min(res_filt[,\"padj\"]),res_filt[,\"padj\"]),]\n\tname_padj_min <- rownames(row_padj_min)\n\ttitle <- paste(\"gene:\",name_padj_min,\"padj:\",padj,sep=\"\\n\") \n\n\tcount_df=read.csv(\"${count}\",header=TRUE,sep=\",\")\n\tcount <- ggplot(count_df, aes(x=condition, y=count)) + \n\t\t\tgeom_point(position=position_jitter(w=0.1,h=0)) + \n\t\t\tggtitle(title)\n\t\t\t\n\tggsave(\"count.pdf\",count, width=5, height=5)\n\t\n\n\"\"\"",
        "nb_lignes_script": 32,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "result_deseq",
            "gene_counts",
            "result_filt_deseq"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AnneCharlotteMichel__Reprohackathon",
        "directive": [
            "publishDir \"plot/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode,\n        saveAs: { filename ->\n                      if (filename.indexOf(\".csv\") > 0) filename\n                      if (filename.indexOf(\".yaml\") > 0) filename\n                      else null\n                }\n\n    output:\n    file 'software_versions_mqc.yaml' into ch_software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    bam2fasta info &> v_bam2fasta.txt\n    fastp --version &> v_fastp.txt\n    samtools --version &> v_samtools.txt\n    ska version &> v_ska.txt\n    sortmerna --version &> v_sortmerna.txt\n    sourmash -v &> v_sourmash.txt\n    pip show orpheum &> v_orpheum.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    bam2fasta info &> v_bam2fasta.txt\n    fastp --version &> v_fastp.txt\n    samtools --version &> v_samtools.txt\n    ska version &> v_ska.txt\n    sortmerna --version &> v_sortmerna.txt\n    sourmash -v &> v_sourmash.txt\n    pip show orpheum &> v_orpheum.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "fastPHASE",
            "SAMtools",
            "SKAT",
            "SortMeRna",
            "sourmash",
            "PPIP"
        ],
        "tools_url": [
            "https://bio.tools/fastphase",
            "https://bio.tools/samtools",
            "https://bio.tools/skat",
            "https://bio.tools/sortmerna",
            "https://bio.tools/sourmash",
            "https://bio.tools/ppip"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SKAT",
                "uri": "https://bio.tools/skat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A SNP-set (e.g., a gene or a region) level test for association between a set of rare (or common) variants and dichotomous or quantitative phenotypes, SKAT aggregates individual score test statistics of SNPs in a SNP set and computes SNP-set level p-values, e.g. a gene or a region level p-value, while adjusting for covariates, such as principal components to account for population stratification. SKAT also allows for power/sample size calculations for designing for sequence association studies.",
                "homepage": "https://www.hsph.harvard.edu/skat/"
            },
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            },
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            },
            {
                "name": "PPIP",
                "uri": "https://bio.tools/ppip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3631",
                                    "term": "Peptide identification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3631",
                                    "term": "Peptide-spectrum-matching"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0943",
                                "term": "Mass spectrum"
                            },
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2974",
                                "term": "Protein sequence (raw)"
                            }
                        ]
                    }
                ],
                "description": "An automated software for identification of bioactive endogenous peptides",
                "homepage": "https://github.com/Shawn-Xu/PPIP"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename if (filename.indexOf(\".yaml\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "validate_sketch_value": {
        "name_process": "validate_sketch_value",
        "string_process": " process validate_sketch_value {\n      publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode,\n      saveAs: {filename ->\n          if (filename.indexOf(\".txt\") > 0) filename\n          else null\n      }\n      input:\n      val sketch_num_hashes\n      val sketch_num_hashes_log2\n      val sketch_scaled\n      val sketch_scaled_log2\n\n      output:\n      file sketch_value into ch_sketch_value_unparsed\n      file sketch_style into ch_sketch_style_unparsed\n\n      script:\n      sketch_style = \"sketch_style.txt\"\n      sketch_value = 'sketch_value.txt'\n      \"\"\"\n      validate_sketch_value.py \\\\\n        --sketch_num_hashes ${sketch_num_hashes} \\\\\n        --sketch_num_hashes_log2 ${sketch_num_hashes_log2} \\\\\n        --sketch_scaled ${sketch_scaled} \\\\\n        --sketch_scaled_log2 ${sketch_scaled_log2} \\\\\n        --output ${sketch_value} \\\\\n        --sketch_style ${sketch_style}\n      \"\"\"\n  }",
        "nb_lignes_process": 27,
        "string_script": "      sketch_style = \"sketch_style.txt\"\n      sketch_value = 'sketch_value.txt'\n      \"\"\"\n      validate_sketch_value.py \\\\\n        --sketch_num_hashes ${sketch_num_hashes} \\\\\n        --sketch_num_hashes_log2 ${sketch_num_hashes_log2} \\\\\n        --sketch_scaled ${sketch_scaled} \\\\\n        --sketch_scaled_log2 ${sketch_scaled_log2} \\\\\n        --output ${sketch_value} \\\\\n        --sketch_style ${sketch_style}\n      \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sketch_num_hashes",
            "sketch_num_hashes_log2",
            "sketch_scaled",
            "sketch_scaled_log2"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_sketch_value_unparsed",
            "ch_sketch_style_unparsed"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode , saveAs: {filename -> if (filename.indexOf(\".txt\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "make_protein_index": {
        "name_process": "make_protein_index",
        "string_process": " process make_protein_index {\n    tag \"${peptides}__${bloom_id}\"\n    label \"low_memory\"\n\n    publishDir \"${params.outdir}/protein_index\", mode: params.publish_dir_mode\n\n    input:\n    file(peptides) from ch_reference_proteome_fasta\n    translate_peptide_ksize\n    translate_peptide_molecule\n\n    output:\n    set val(bloom_id), val(translate_peptide_molecule), file(\"${peptides.simpleName}__${bloom_id}.bloomfilter\") into ch_orpheum_bloom_filter\n\n    script:\n    bloom_id = \"molecule-${translate_peptide_molecule}_ksize-${translate_peptide_ksize}\"\n    \"\"\"\n    orpheum index \\\\\n      --tablesize ${bloomfilter_tablesize} \\\\\n      --molecule ${translate_peptide_molecule} \\\\\n      --peptide-ksize ${translate_peptide_ksize} \\\\\n      --save-as ${peptides.simpleName}__${bloom_id}.bloomfilter \\\\\n      ${peptides}\n    \"\"\"\n  }",
        "nb_lignes_process": 23,
        "string_script": "    bloom_id = \"molecule-${translate_peptide_molecule}_ksize-${translate_peptide_ksize}\"\n    \"\"\"\n    orpheum index \\\\\n      --tablesize ${bloomfilter_tablesize} \\\\\n      --molecule ${translate_peptide_molecule} \\\\\n      --peptide-ksize ${translate_peptide_ksize} \\\\\n      --save-as ${peptides.simpleName}__${bloom_id}.bloomfilter \\\\\n      ${peptides}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_reference_proteome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_orpheum_bloom_filter"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${peptides}__${bloom_id}\"",
            "label \"low_memory\"",
            "publishDir \"${params.outdir}/protein_index\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "tenx_tgz_extract_bam": {
        "name_process": "tenx_tgz_extract_bam",
        "string_process": " process tenx_tgz_extract_bam {\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/10x-bams\", mode: params.publish_dir_mode\n\n    input:\n    file(tenx_tgz) from tenx_tgz_ch\n\n    output:\n    set val(sample_id), file(bam) into tenx_bam_for_unaligned_fastq_ch, tenx_bam_for_aligned_fastq_ch\n    file(bai)\n    set val(sample_id), file(barcodes) into tenx_bam_barcodes_ch\n\n    script:\n    sample_id = \"${tenx_tgz.simpleName}\"\n    bam = \"${sample_id}__possorted_genome_bam.bam\"\n    bai = \"${sample_id}__possorted_genome_bam.bam.bai\"\n    barcodes = \"${sample_id}__barcodes.tsv\"\n    \"\"\"\n    tar xzvf ${tenx_tgz} \\\\\n      ${sample_id}/outs/possorted_genome_bam.bam.bai \\\\\n      ${sample_id}/outs/possorted_genome_bam.bam \\\\\n      ${sample_id}/outs/filtered_gene_bc_matrices\n    # Rename the files so there aren't conflicting duplicate filenames for the future\n    mv ${sample_id}/outs/possorted_genome_bam.bam ${bam}\n    mv ${sample_id}/outs/possorted_genome_bam.bam.bai ${bai}\n    mv ${sample_id}/outs/filtered_gene_bc_matrices/*/barcodes.tsv ${barcodes}\n    \"\"\"\n  }",
        "nb_lignes_process": 26,
        "string_script": "    sample_id = \"${tenx_tgz.simpleName}\"\n    bam = \"${sample_id}__possorted_genome_bam.bam\"\n    bai = \"${sample_id}__possorted_genome_bam.bam.bai\"\n    barcodes = \"${sample_id}__barcodes.tsv\"\n    \"\"\"\n    tar xzvf ${tenx_tgz} \\\\\n      ${sample_id}/outs/possorted_genome_bam.bam.bai \\\\\n      ${sample_id}/outs/possorted_genome_bam.bam \\\\\n      ${sample_id}/outs/filtered_gene_bc_matrices\n    # Rename the files so there aren't conflicting duplicate filenames for the future\n    mv ${sample_id}/outs/possorted_genome_bam.bam ${bam}\n    mv ${sample_id}/outs/possorted_genome_bam.bam.bai ${bai}\n    mv ${sample_id}/outs/filtered_gene_bc_matrices/*/barcodes.tsv ${barcodes}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BaMM",
            "BAIT",
            "DNABarcodes"
        ],
        "tools_url": [
            "https://bio.tools/bamm",
            "https://bio.tools/bait",
            "https://bio.tools/dnabarcodes"
        ],
        "tools_dico": [
            {
                "name": "BaMM",
                "uri": "https://bio.tools/bamm",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence motif recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Motif scanning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence signature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence signature detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "de-novo motif discovery and regulatory sequence analysis.\nDiscovery of regulatory motifs with higher-order Bayesian Markov Models (BaMMs)",
                "homepage": "https://bammmotif.mpibpc.mpg.de"
            },
            {
                "name": "BAIT",
                "uri": "https://bio.tools/bait",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BAIT (Bioinformatic Analysis of Inherited Templates) is a software to create strand inheritance plots in data derived from the Strand-Seq sequencing protocol. The software is designed to be flexible with a range of species, and basic template folders can called to read in species-specific data.",
                "homepage": "http://sourceforge.net/projects/bait/"
            },
            {
                "name": "DNABarcodes",
                "uri": "https://bio.tools/dnabarcodes",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "DNA barcoding"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "Sample barcoding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "Community profiling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package offers a function to create DNA barcode sets capable of correcting insertion, deletion, and substitution errors. Existing barcodes can be analysed regarding their minimal, maximal and average distances between barcodes. Finally, reads that start with a (possibly mutated) barcode can be demultiplexed, i.e., assigned to their original reference barcode.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/DNABarcodes.html"
            }
        ],
        "inputs": [
            "tenx_tgz_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tenx_bam_for_unaligned_fastq_ch",
            "tenx_bam_for_aligned_fastq_ch",
            "bai",
            "tenx_bam_barcodes_ch"
        ],
        "nb_outputs": 4,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/10x-bams\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_fastq_aligned": {
        "name_process": "samtools_fastq_aligned",
        "string_process": " process samtools_fastq_aligned {\n    tag \"${channel_id}\"\n    publishDir \"${params.outdir}/10x-fastqs/per-channel/aligned\", mode: params.publish_dir_mode\n    label \"mid_cpu\"\n\n    input:\n    set val(channel_id), file(bam) from tenx_bam_for_unaligned_fastq_ch\n\n    output:\n    set val(channel_id), val(\"aligned\"), file(reads) into tenx_reads_aligned_counting_ch, tenx_reads_aligned_concatenation_ch\n\n    script:\n    reads = \"${channel_id}__aligned.fastq.gz\"\n    \"\"\"\n    samtools view -ub -F 4 ${bam} \\\\\n        | samtools fastq --threads ${task.cpus} -T ${tenx_tags} - \\\\\n        | gzip -c - \\\\\n          > ${reads}\n    \"\"\"\n  }",
        "nb_lignes_process": 18,
        "string_script": "    reads = \"${channel_id}__aligned.fastq.gz\"\n    \"\"\"\n    samtools view -ub -F 4 ${bam} \\\\\n        | samtools fastq --threads ${task.cpus} -T ${tenx_tags} - \\\\\n        | gzip -c - \\\\\n          > ${reads}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Readseq",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/readseq",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Readseq",
                "uri": "https://bio.tools/readseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ]
                    }
                ],
                "description": "Convert biosequences between a selection of common biological sequence formats.",
                "homepage": "http://www.ebi.ac.uk/Tools/sfc/readseq/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "tenx_bam_for_unaligned_fastq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tenx_reads_aligned_counting_ch",
            "tenx_reads_aligned_concatenation_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${channel_id}\"",
            "publishDir \"${params.outdir}/10x-fastqs/per-channel/aligned\", mode: params.publish_dir_mode",
            "label \"mid_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "samtools_fastq_unaligned": {
        "name_process": "samtools_fastq_unaligned",
        "string_process": " process samtools_fastq_unaligned {\n    tag \"${channel_id}\"\n    publishDir \"${params.outdir}/10x-fastqs/per-channel/unaligned\", mode: params.publish_dir_mode\n    label \"mid_cpu\"\n\n    input:\n    set val(channel_id), file(bam) from tenx_bam_for_aligned_fastq_ch\n\n    output:\n    set val(channel_id), val(\"unaligned\"), file(reads) into tenx_reads_unaligned_ch\n\n    script:\n    reads = \"${channel_id}__unaligned.fastq.gz\"\n    \"\"\"\n    samtools view -f4 ${bam} \\\\\n      | grep -E '${tenx_cell_barcode_pattern}' \\\\\n      | samtools fastq --threads ${task.cpus} -T ${tenx_tags} - \\\\\n      | gzip -c - \\\\\n        > ${reads} \\\\\n      || touch ${reads}\n    \"\"\"\n                                                                                    \n                                                                        \n  }",
        "nb_lignes_process": 22,
        "string_script": "    reads = \"${channel_id}__unaligned.fastq.gz\"\n    \"\"\"\n    samtools view -f4 ${bam} \\\\\n      | grep -E '${tenx_cell_barcode_pattern}' \\\\\n      | samtools fastq --threads ${task.cpus} -T ${tenx_tags} - \\\\\n      | gzip -c - \\\\\n        > ${reads} \\\\\n      || touch ${reads}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Readseq",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/readseq",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Readseq",
                "uri": "https://bio.tools/readseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ]
                    }
                ],
                "description": "Convert biosequences between a selection of common biological sequence formats.",
                "homepage": "http://www.ebi.ac.uk/Tools/sfc/readseq/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "tenx_bam_for_aligned_fastq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tenx_reads_unaligned_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${channel_id}\"",
            "publishDir \"${params.outdir}/10x-fastqs/per-channel/unaligned\", mode: params.publish_dir_mode",
            "label \"mid_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "count_umis_per_cell": {
        "name_process": "count_umis_per_cell",
        "string_process": " process count_umis_per_cell {\n      tag \"${is_aligned_channel_id}\"\n      label 'low_memory_long'\n\n      publishDir \"${params.outdir}/10x-fastqs/umis-per-cell/\", mode: params.publish_dir_mode\n\n      input:\n      set val(channel_id), val(is_aligned), file(reads) from tenx_reads_aligned_counting_ch\n\n      output:\n      file(umis_per_cell)\n      set val(channel_id), file(good_barcodes) into good_barcodes_unfiltered_ch\n\n      script:\n      is_aligned_channel_id = \"${channel_id}__${is_aligned}\"\n      umis_per_cell = \"${is_aligned_channel_id}__n_umi_per_cell.csv\"\n      good_barcodes = \"${is_aligned_channel_id}__barcodes.tsv\"\n\n      \"\"\"\n        bam2fasta count_umis_percell \\\\\n            --filename ${reads} \\\\\n            --min-umi-per-barcode ${tenx_min_umi_per_cell} \\\\\n            --cell-barcode-pattern '${tenx_cell_barcode_pattern}' \\\\\n            --molecular-barcode-pattern '${tenx_molecular_barcode_pattern}' \\\\\n            --write-barcode-meta-csv ${umis_per_cell} \\\\\n            --barcodes-significant-umis-file ${good_barcodes}\n      \"\"\"\n    }",
        "nb_lignes_process": 26,
        "string_script": "      is_aligned_channel_id = \"${channel_id}__${is_aligned}\"\n      umis_per_cell = \"${is_aligned_channel_id}__n_umi_per_cell.csv\"\n      good_barcodes = \"${is_aligned_channel_id}__barcodes.tsv\"\n\n      \"\"\"\n        bam2fasta count_umis_percell \\\\\n            --filename ${reads} \\\\\n            --min-umi-per-barcode ${tenx_min_umi_per_cell} \\\\\n            --cell-barcode-pattern '${tenx_cell_barcode_pattern}' \\\\\n            --molecular-barcode-pattern '${tenx_molecular_barcode_pattern}' \\\\\n            --write-barcode-meta-csv ${umis_per_cell} \\\\\n            --barcodes-significant-umis-file ${good_barcodes}\n      \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tenx_reads_aligned_counting_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "umis_per_cell",
            "good_barcodes_unfiltered_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${is_aligned_channel_id}\"",
            "label 'low_memory_long'",
            "publishDir \"${params.outdir}/10x-fastqs/umis-per-cell/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "extract_per_cell_fastqs": {
        "name_process": "extract_per_cell_fastqs",
        "string_process": " process extract_per_cell_fastqs {\n    tag \"${fastq_id}\"\n    label \"low_memory\"\n    errorStrategy { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'ignore' }\n    publishDir \"${params.outdir}/10x-fastqs/per-cell/${channel_id}/\", mode: 'copy', pattern: '*.fastq.gz', saveAs: { filename -> \"${filename.replace(\"|\", \"-\")}\"}\n\n    input:\n                     \n                                                                                \n    set val(channel_id), val(is_aligned), file(reads), val(cell_barcode) from tenx_reads_with_good_barcodes_ch\n\n    output:\n    set val(fastq_id), file(this_cell_fastq_gz) into per_cell_fastqs_ch_possibly_empty\n    set val(fastq_id), val(cell_id), val(is_aligned) into ch_fastq_id_to_cell_id_is_aligned\n\n    script:\n    this_cell_barcode = tenx_cell_barcode_pattern.replace('([ACGT]+)', cell_barcode)\n    fastq_id = \"${channel_id}__${is_aligned}__${cell_barcode}\"\n    cell_id = \"${channel_id}__${cell_barcode}\"\n    this_cell_fastq_gz = \"${fastq_id}.fastq.gz\"\n    \"\"\"\n    rg \\\\\n      --search-zip \\\\\n      --after-context 3 \\\\\n      --threads ${task.cpus} \\\\\n      '${this_cell_barcode}' \\\\\n      ${reads} \\\\\n      | gzip -c - \\\\\n      > ${this_cell_fastq_gz} || touch ${this_cell_fastq_gz}\n    \"\"\"\n  }",
        "nb_lignes_process": 29,
        "string_script": "    this_cell_barcode = tenx_cell_barcode_pattern.replace('([ACGT]+)', cell_barcode)\n    fastq_id = \"${channel_id}__${is_aligned}__${cell_barcode}\"\n    cell_id = \"${channel_id}__${cell_barcode}\"\n    this_cell_fastq_gz = \"${fastq_id}.fastq.gz\"\n    \"\"\"\n    rg \\\\\n      --search-zip \\\\\n      --after-context 3 \\\\\n      --threads ${task.cpus} \\\\\n      '${this_cell_barcode}' \\\\\n      ${reads} \\\\\n      | gzip -c - \\\\\n      > ${this_cell_fastq_gz} || touch ${this_cell_fastq_gz}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "org"
        ],
        "tools_url": [
            "https://bio.tools/org"
        ],
        "tools_dico": [
            {
                "name": "org",
                "uri": "https://bio.tools/org",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Expression correlation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Co-expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Genome-wide mutation profiling and related risk signature for prognosis of papillary renal cell carcinoma.\n\nBackground:The papillary renal cell carcinoma (pRCC) is a rare subtype of renal cell carcinoma with limited investigation. Our study aimed to explore a robust signature to predict the prognosis of pRCC from the perspective of mutation profiles. Methods:In this study, we downloaded the simple nucleotide variation data of 288 pRCC samples from The Cancer Genome Atlas (TCGA) database. \"GenVisR\" package was utilized to visualize gene mutation profiles in pRCC. The PPI network was conducted based on the STRING database and the modification was performed via Cytoscape software (Version 3.7.1). Top 50 mutant genes were selected and Cox regression method was conducted to identify the hub prognostic mutant signature in pRCC using \"survival\" package.\n\n||| HOMEPAGE BROKEN!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'pRCC', 'GenVisR' (bio.tools/genvisr)",
                "homepage": "http://org.Hs.eg.db"
            }
        ],
        "inputs": [
            "tenx_reads_with_good_barcodes_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "per_cell_fastqs_ch_possibly_empty",
            "ch_fastq_id_to_cell_id_is_aligned"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${fastq_id}\"",
            "label \"low_memory\"",
            "errorStrategy { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'ignore' }",
            "publishDir \"${params.outdir}/10x-fastqs/per-cell/${channel_id}/\", mode: 'copy', pattern: '*.fastq.gz', saveAs: { filename -> \"${filename.replace(\"|\", \"-\")}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": " process fastp {\n        label 'process_low'\n        tag \"$name\"\n        publishDir \"${params.outdir}/fastp\", mode: params.publish_dir_mode,\n          saveAs: {filename ->\n                      if (filename.indexOf(\".fastq.gz\") == -1) \"logs/$filename\"\n                      else if (reads[1] == null) \"single_end/$filename\"\n                      else if (reads[1] != null) \"paired_end/$filename\"\n                      else null\n                  }\n\n        input:\n        set val(name), file(reads) from ch_read_files_trimming_to_trim\n\n        output:\n        set val(name), file(\"*trimmed.fastq.gz\") into ch_reads_all_trimmed\n        file \"*fastp.json\" into ch_fastp_results\n        file \"*fastp.html\" into ch_fastp_html\n\n        script:\n                                          \n        if (reads[1] == null) {\n            \"\"\"\n            fastp \\\\\n                --in1 ${reads} \\\\\n                --out1 ${name}_R1_trimmed.fastq.gz \\\\\n                --json ${name}_fastp.json \\\\\n                --html ${name}_fastp.html\n            \"\"\"\n        } else if (reads[1] != null ){\n                                                      \n            \"\"\"\n            fastp \\\\\n                --in1 ${reads[0]} \\\\\n                --in2 ${reads[1]} \\\\\n                --out1 ${name}_R1_trimmed.fastq.gz \\\\\n                --out2 ${name}_R2_trimmed.fastq.gz \\\\\n                --json ${name}_fastp.json \\\\\n                --html ${name}_fastp.html\n            \"\"\"\n        } else {\n          \"\"\"\n          echo name ${name}\n          echo reads: ${reads}\n          echo \"Number of reads is not equal to 1 or 2 --> don't know how to trim non-paired-end and non-single-end reads\"\n          \"\"\"\n        }\n    }",
        "nb_lignes_process": 46,
        "string_script": "        if (reads[1] == null) {\n            \"\"\"\n            fastp \\\\\n                --in1 ${reads} \\\\\n                --out1 ${name}_R1_trimmed.fastq.gz \\\\\n                --json ${name}_fastp.json \\\\\n                --html ${name}_fastp.html\n            \"\"\"\n        } else if (reads[1] != null ){\n                                                      \n            \"\"\"\n            fastp \\\\\n                --in1 ${reads[0]} \\\\\n                --in2 ${reads[1]} \\\\\n                --out1 ${name}_R1_trimmed.fastq.gz \\\\\n                --out2 ${name}_R2_trimmed.fastq.gz \\\\\n                --json ${name}_fastp.json \\\\\n                --html ${name}_fastp.html\n            \"\"\"\n        } else {\n          \"\"\"\n          echo name ${name}\n          echo reads: ${reads}\n          echo \"Number of reads is not equal to 1 or 2 --> don't know how to trim non-paired-end and non-single-end reads\"\n          \"\"\"\n        }",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "ch_read_files_trimming_to_trim"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_reads_all_trimmed",
            "ch_fastp_results",
            "ch_fastp_html"
        ],
        "nb_outputs": 3,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "label 'process_low'",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/fastp\", mode: params.publish_dir_mode , saveAs: {filename -> if (filename.indexOf(\".fastq.gz\") == -1) \"logs/$filename\" else if (reads[1] == null) \"single_end/$filename\" else if (reads[1] != null) \"paired_end/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "subsample_input": {
        "name_process": "subsample_input",
        "string_process": " process subsample_input {\n    tag \"${id}_subsample\"\n    publishDir \"${params.outdir}/seqtk/\", mode: params.publish_dir_mode\n\n    input:\n    set val(id), file(reads) from subsample_ch_reads_for_ribosomal_removal\n\n    output:\n    set val(id), file(\"*_${params.subsample}.fastq.gz\") into ch_reads_for_ribosomal_removal\n\n    script:\n    read1 = reads[0]\n    read2 = reads[1]\n    read1_prefix = read1.simpleName\n    read2_prefix = read2.simpleName\n\n    \"\"\"\n    seqtk sample -s100 ${read1} ${params.subsample} > ${read1_prefix}_${params.subsample}.fastq.gz\n    seqtk sample -s100 ${read2} ${params.subsample} > ${read2_prefix}_${params.subsample}.fastq.gz\n    \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "    read1 = reads[0]\n    read2 = reads[1]\n    read1_prefix = read1.simpleName\n    read2_prefix = read2.simpleName\n\n    \"\"\"\n    seqtk sample -s100 ${read1} ${params.subsample} > ${read1_prefix}_${params.subsample}.fastq.gz\n    seqtk sample -s100 ${read2} ${params.subsample} > ${read2_prefix}_${params.subsample}.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "subsample_ch_reads_for_ribosomal_removal"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_reads_for_ribosomal_removal"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${id}_subsample\"",
            "publishDir \"${params.outdir}/seqtk/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "sortmerna_index": {
        "name_process": "sortmerna_index",
        "string_process": " process sortmerna_index {\n        label 'mid_memory_long'\n        label 'mid_cpu'\n        tag \"${fasta.baseName}\"\n\n        input:\n        file(fasta) from sortmerna_fasta\n\n        output:\n        val(\"${fasta.baseName}\") into sortmerna_db_name\n        file(\"$fasta\") into sortmerna_db_fasta\n        file(\"${fasta.baseName}*\") into sortmerna_db\n\n        script:\n        \"\"\"\n        indexdb_rna --ref $fasta,${fasta.baseName} -m 3072 -v\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        indexdb_rna --ref $fasta,${fasta.baseName} -m 3072 -v\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sortmerna_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sortmerna_db_name",
            "sortmerna_db_fasta",
            "sortmerna_db"
        ],
        "nb_outputs": 3,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "label 'mid_memory_long'",
            "label 'mid_cpu'",
            "tag \"${fasta.baseName}\""
        ],
        "when": "",
        "stub": ""
    },
    "sortmerna": {
        "name_process": "sortmerna",
        "string_process": " process sortmerna {\n        label 'mid_memory_long'\n        label 'mid_cpu'\n        tag \"$name\"\n        publishDir \"${params.outdir}/SortMeRNA\", mode: \"${params.publish_dir_mode}\",\n            saveAs: {filename ->\n                if (filename.indexOf(\"_rRNA_report.txt\") > 0) \"logs/$filename\"\n                else if (params.save_non_rrna_reads) \"reads/$filename\"\n                else null\n            }\n\n        input:\n        set val(name), file(reads) from ch_reads_for_ribosomal_removal\n        val(db_name) from sortmerna_db_name.collect()\n        file(db_fasta) from sortmerna_db_fasta.collect()\n        file(db) from sortmerna_db.collect()\n\n        output:\n        set val(name), file(\"*.fq.gz\") into ch_reads_to_translate\n        file \"*_rRNA_report.txt\" into sortmerna_logs\n\n\n        script:\n                                                                                        \n        def Refs = ''\n        for (i=0; i<db_fasta.size(); i++) { Refs+= \":${db_fasta[i]},${db_name[i]}\" }\n        Refs = Refs.substring(1)\n\n                                          \n        if (reads[1] == null) {\n            \"\"\"\n            gzip -d --force < ${reads} > all-reads.fastq\n            sortmerna --ref ${Refs} \\\n                --reads all-reads.fastq \\\n                --num_alignments 1 \\\n                -a ${task.cpus} \\\n                --fastx \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads \\\n                --log -v\n            gzip --force < non-rRNA-reads.fastq > ${name}.fq.gz\n            mv rRNA-reads.log ${name}_rRNA_report.txt\n            \"\"\"\n        } else {\n            \"\"\"\n            gzip -d --force < ${reads[0]} > reads-fw.fq\n            gzip -d --force < ${reads[1]} > reads-rv.fq\n            merge-paired-reads.sh reads-fw.fq reads-rv.fq all-reads.fastq\n            sortmerna --ref ${Refs} \\\n                --reads all-reads.fastq \\\n                --num_alignments 1 \\\n                -a ${task.cpus} \\\n                --fastx --paired_in \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads \\\n                --log -v\n            unmerge-paired-reads.sh non-rRNA-reads.fastq non-rRNA-reads-fw.fq non-rRNA-reads-rv.fq\n            gzip < non-rRNA-reads-fw.fq > ${name}-fw.fq.gz\n            gzip < non-rRNA-reads-rv.fq > ${name}-rv.fq.gz\n            mv rRNA-reads.log ${name}_rRNA_report.txt\n            \"\"\"\n        }\n    }",
        "nb_lignes_process": 61,
        "string_script": "        def Refs = ''\n        for (i=0; i<db_fasta.size(); i++) { Refs+= \":${db_fasta[i]},${db_name[i]}\" }\n        Refs = Refs.substring(1)\n\n                                          \n        if (reads[1] == null) {\n            \"\"\"\n            gzip -d --force < ${reads} > all-reads.fastq\n            sortmerna --ref ${Refs} \\\n                --reads all-reads.fastq \\\n                --num_alignments 1 \\\n                -a ${task.cpus} \\\n                --fastx \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads \\\n                --log -v\n            gzip --force < non-rRNA-reads.fastq > ${name}.fq.gz\n            mv rRNA-reads.log ${name}_rRNA_report.txt\n            \"\"\"\n        } else {\n            \"\"\"\n            gzip -d --force < ${reads[0]} > reads-fw.fq\n            gzip -d --force < ${reads[1]} > reads-rv.fq\n            merge-paired-reads.sh reads-fw.fq reads-rv.fq all-reads.fastq\n            sortmerna --ref ${Refs} \\\n                --reads all-reads.fastq \\\n                --num_alignments 1 \\\n                -a ${task.cpus} \\\n                --fastx --paired_in \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads \\\n                --log -v\n            unmerge-paired-reads.sh non-rRNA-reads.fastq non-rRNA-reads-fw.fq non-rRNA-reads-rv.fq\n            gzip < non-rRNA-reads-fw.fq > ${name}-fw.fq.gz\n            gzip < non-rRNA-reads-rv.fq > ${name}-rv.fq.gz\n            mv rRNA-reads.log ${name}_rRNA_report.txt\n            \"\"\"\n        }",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "iRefScape",
            "SortMeRna"
        ],
        "tools_url": [
            "https://bio.tools/irefscape",
            "https://bio.tools/sortmerna"
        ],
        "tools_dico": [
            {
                "name": "iRefScape",
                "uri": "https://bio.tools/irefscape",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3083",
                                    "term": "Pathway or network visualisation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0842",
                                "term": "Identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2600",
                                "term": "Pathway or network"
                            }
                        ]
                    }
                ],
                "description": "Plugin for Cytoscape that exposes iRefIndex data as a navigable graphical network.",
                "homepage": "http://irefindex.org/wiki/index.php?title=iRefScape"
            },
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            }
        ],
        "inputs": [
            "ch_reads_for_ribosomal_removal",
            "sortmerna_db_name",
            "sortmerna_db_fasta",
            "sortmerna_db"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_reads_to_translate",
            "sortmerna_logs"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "label 'mid_memory_long'",
            "label 'mid_cpu'",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/SortMeRNA\", mode: \"${params.publish_dir_mode}\" , saveAs: {filename -> if (filename.indexOf(\"_rRNA_report.txt\") > 0) \"logs/$filename\" else if (params.save_non_rrna_reads) \"reads/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "translate": {
        "name_process": "translate",
        "string_process": " process translate {\n      tag \"${sample_id}\"\n      label \"low_memory_long\"\n      publishDir \"${params.outdir}/translate/\", mode: params.publish_dir_mode,\n        saveAs: {\n          filename ->\n              if (save_translate_csv && filename.indexOf(\".csv\") > 0) \"$filename\"\n              else if (save_translate_json && filename.indexOf(\".json\") > 0) \"$filename\"\n              else if (filename.indexOf(\"_noncoding_reads_nucleotides\") > 0) \"noncoding_nucleotides/${filename}\"\n              else if (filename.indexOf(\"_coding_reads_nucleotides\") > 0) \"coding_nucleotides/${filename}\"\n              else if (filename.indexOf(\"_coding_reads_peptides\") > 0) \"coding_peptides/${filename}\"\n              else \"$filename\"\n          }\n\n      input:\n      set bloom_id, molecule, file(bloom_filter) from ch_orpheum_bloom_filter.collect()\n      set sample_id, file(reads) from ch_reads_to_translate\n\n      output:\n                                                                                                              \n      set val(sample_id), file(\"${sample_id}__noncoding_reads_nucleotides.fasta\") into ch_noncoding_nucleotides_potentially_empty\n      set val(sample_id), file(\"${sample_id}__coding_reads_peptides.fasta\") into ch_translated_protein_seqs\n      set val(sample_id), file(\"${sample_id}__coding_reads_nucleotides.fasta\") into ch_translatable_nucleotide_seqs\n      set val(sample_id), file(translate_csv) into ch_coding_scores_csv\n      set val(sample_id), file(translate_json) into ch_coding_scores_json\n\n      script:\n      translate_json = \"${sample_id}__coding_summary.json\"\n      translate_csv = \"${sample_id}__coding_scores.csv\"\n      csv_flag = save_translate_csv ? \"--csv ${translate_csv}\" : ''\n      json_flag = save_translate_json ? \"--json-summary ${translate_json}\" : ''\n\n      \"\"\"\n      orpheum translate \\\\\n        --molecule ${molecule} \\\\\n        --coding-nucleotide-fasta ${sample_id}__coding_reads_nucleotides.fasta \\\\\n        --noncoding-nucleotide-fasta ${sample_id}__noncoding_reads_nucleotides.fasta \\\\\n        ${csv_flag} \\\\\n        ${json_flag} \\\\\n        --jaccard-threshold ${translate_jaccard_threshold} \\\\\n        --peptide-ksize ${translate_peptide_ksize} \\\\\n        --peptides-are-bloom-filter \\\\\n        ${bloom_filter} \\\\\n        ${reads} > ${sample_id}__coding_reads_peptides.fasta\n      touch ${translate_csv}\n      touch ${translate_json}\n      \"\"\"\n    }",
        "nb_lignes_process": 46,
        "string_script": "      translate_json = \"${sample_id}__coding_summary.json\"\n      translate_csv = \"${sample_id}__coding_scores.csv\"\n      csv_flag = save_translate_csv ? \"--csv ${translate_csv}\" : ''\n      json_flag = save_translate_json ? \"--json-summary ${translate_json}\" : ''\n\n      \"\"\"\n      orpheum translate \\\\\n        --molecule ${molecule} \\\\\n        --coding-nucleotide-fasta ${sample_id}__coding_reads_nucleotides.fasta \\\\\n        --noncoding-nucleotide-fasta ${sample_id}__noncoding_reads_nucleotides.fasta \\\\\n        ${csv_flag} \\\\\n        ${json_flag} \\\\\n        --jaccard-threshold ${translate_jaccard_threshold} \\\\\n        --peptide-ksize ${translate_peptide_ksize} \\\\\n        --peptides-are-bloom-filter \\\\\n        ${bloom_filter} \\\\\n        ${reads} > ${sample_id}__coding_reads_peptides.fasta\n      touch ${translate_csv}\n      touch ${translate_json}\n      \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_orpheum_bloom_filter",
            "ch_reads_to_translate"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_noncoding_nucleotides_potentially_empty",
            "ch_translated_protein_seqs",
            "ch_translatable_nucleotide_seqs",
            "ch_coding_scores_csv",
            "ch_coding_scores_json"
        ],
        "nb_outputs": 5,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${sample_id}\"",
            "label \"low_memory_long\"",
            "publishDir \"${params.outdir}/translate/\", mode: params.publish_dir_mode , saveAs: { filename -> if (save_translate_csv && filename.indexOf(\".csv\") > 0) \"$filename\" else if (save_translate_json && filename.indexOf(\".json\") > 0) \"$filename\" else if (filename.indexOf(\"_noncoding_reads_nucleotides\") > 0) \"noncoding_nucleotides/${filename}\" else if (filename.indexOf(\"_coding_reads_nucleotides\") > 0) \"coding_nucleotides/${filename}\" else if (filename.indexOf(\"_coding_reads_peptides\") > 0) \"coding_peptides/${filename}\" else \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ska_compute_sketch": {
        "name_process": "ska_compute_sketch",
        "string_process": " process ska_compute_sketch {\n        tag \"${sketch_id}\"\n        publishDir \"${params.outdir}/ska/sketches/\", mode: params.publish_dir_mode\n        errorStrategy 'retry'\n        maxRetries 3\n\n\n      input:\n      each ksize from ksizes\n      set id, file(reads) from ch_reads_to_sketch\n\n      output:\n      set val(ksize), file(\"${sketch_id}.skf\") into ska_sketches\n\n      script:\n      sketch_id = \"${id}_ksize_${ksize}\"\n\n        \"\"\"\n        ska fastq \\\\\n          -k $ksize \\\\\n          -o ${sketch_id} \\\\\n          ${reads}\n        \"\"\"\n\n      }",
        "nb_lignes_process": 23,
        "string_script": "      sketch_id = \"${id}_ksize_${ksize}\"\n\n        \"\"\"\n        ska fastq \\\\\n          -k $ksize \\\\\n          -o ${sketch_id} \\\\\n          ${reads}\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SKAT"
        ],
        "tools_url": [
            "https://bio.tools/skat"
        ],
        "tools_dico": [
            {
                "name": "SKAT",
                "uri": "https://bio.tools/skat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A SNP-set (e.g., a gene or a region) level test for association between a set of rare (or common) variants and dichotomous or quantitative phenotypes, SKAT aggregates individual score test statistics of SNPs in a SNP set and computes SNP-set level p-values, e.g. a gene or a region level p-value, while adjusting for covariates, such as principal components to account for population stratification. SKAT also allows for power/sample size calculations for designing for sequence association studies.",
                "homepage": "https://www.hsph.harvard.edu/skat/"
            }
        ],
        "inputs": [
            "ksizes",
            "ch_reads_to_sketch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ska_sketches"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${sketch_id}\"",
            "publishDir \"${params.outdir}/ska/sketches/\", mode: params.publish_dir_mode",
            "errorStrategy 'retry'",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_compute_sketch_fastx_nucleotide": {
        "name_process": "sourmash_compute_sketch_fastx_nucleotide",
        "string_process": " process sourmash_compute_sketch_fastx_nucleotide {\n      tag \"${sig_id}\"\n      label \"low_memory\"\n      publishDir \"${params.outdir}/sketches_nucleotide/${sketch_id}\", mode: \"${params.publish_dir_mode}\",\n          saveAs: {filename ->\n              if (filename.indexOf(\".csv\") > 0) \"description/$filename\"\n              else if (filename.indexOf(\".sig\") > 0) \"sigs/$filename\"\n              else null\n          }\n\n      input:\n      val track_abundance\n      val sketch_value_parsed\n      val sketch_style_parsed\n      set val(sample_id), file(reads) from ch_reads_to_sketch\n\n      output:\n      file(csv) into ch_sourmash_sig_describe_nucleotides\n      set val(sample_id), val(sketch_id), val(\"dna\"), val(params.ksizes), file(sig) into sourmash_sketches_all_nucleotide\n\n      script:\n                                                                            \n                                                 \n      sketch_id = make_sketch_id(\n        \"dna\", \n        params.ksizes, \n        sketch_value_parsed[0], \n        track_abundance, \n        sketch_style_parsed[0]\n      )\n      sketch_value_flag = make_sketch_value_flag(sketch_style_parsed[0], sketch_value_parsed[0])\n      track_abundance_flag = track_abundance ? '--track-abundance' : ''\n      sig_id = \"${sample_id}__${sketch_id}\"\n      sig = \"${sig_id}.sig\"\n      csv = \"${sig_id}.csv\"\n      \"\"\"\n        sourmash compute \\\\\n          ${sketch_value_flag} \\\\\n          --ksizes ${params.ksizes} \\\\\n          --dna \\\\\n          $track_abundance_flag \\\\\n          --output ${sig} \\\\\n          --name '${sample_id}' \\\\\n          $reads\n        sourmash sig describe --csv ${csv} ${sig}\n      \"\"\"\n    }",
        "nb_lignes_process": 45,
        "string_script": "      sketch_id = make_sketch_id(\n        \"dna\", \n        params.ksizes, \n        sketch_value_parsed[0], \n        track_abundance, \n        sketch_style_parsed[0]\n      )\n      sketch_value_flag = make_sketch_value_flag(sketch_style_parsed[0], sketch_value_parsed[0])\n      track_abundance_flag = track_abundance ? '--track-abundance' : ''\n      sig_id = \"${sample_id}__${sketch_id}\"\n      sig = \"${sig_id}.sig\"\n      csv = \"${sig_id}.csv\"\n      \"\"\"\n        sourmash compute \\\\\n          ${sketch_value_flag} \\\\\n          --ksizes ${params.ksizes} \\\\\n          --dna \\\\\n          $track_abundance_flag \\\\\n          --output ${sig} \\\\\n          --name '${sample_id}' \\\\\n          $reads\n        sourmash sig describe --csv ${csv} ${sig}\n      \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "sigQC",
            "OCSVM",
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/sigQC",
            "https://bio.tools/OCSVM",
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "sigQC",
                "uri": "https://bio.tools/sigQC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Expression correlation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Co-expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "R package enabling a streamlined methodological and standardised approach for the quality control validation of gene signatures on independent data sets.",
                "homepage": "https://cran.r-project.org/package=sigQC"
            },
            {
                "name": "OCSVM",
                "uri": "https://bio.tools/OCSVM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel one-class classification approach to accurately predict disease-gene association in acute myeloid leukemia cancer.\n\nDisease causing gene identification is considered as an important step towards drug design and drug discovery. In disease gene identification and classification, the main aim is to identify disease genes while identifying non-disease genes are of less or no significant. Hence, this task can be defined as a one-class classification problem. Existing machine learning methods typically take into consideration known disease genes as positive training set and unknown genes as negative samples to build a binary-class classification model. Here we propose a new One-class Classification Support Vector Machines (OCSVM) method to precisely classify candidate disease genes.",
                "homepage": "https://github.com/imandehzangi/OCSVM"
            },
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "track_abundance",
            "sketch_value_parsed",
            "sketch_style_parsed",
            "ch_reads_to_sketch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_sourmash_sig_describe_nucleotides",
            "sourmash_sketches_all_nucleotide"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${sig_id}\"",
            "label \"low_memory\"",
            "publishDir \"${params.outdir}/sketches_nucleotide/${sketch_id}\", mode: \"${params.publish_dir_mode}\" , saveAs: {filename -> if (filename.indexOf(\".csv\") > 0) \"description/$filename\" else if (filename.indexOf(\".sig\") > 0) \"sigs/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_compute_sketch_fastx_peptide": {
        "name_process": "sourmash_compute_sketch_fastx_peptide",
        "string_process": " process sourmash_compute_sketch_fastx_peptide {\n    tag \"${sig_id}\"\n    label \"low_memory\"\n    publishDir \"${params.outdir}/sketches_peptide/${sketch_id}\", mode: \"${params.publish_dir_mode}\",\n        saveAs: {filename ->\n            if (filename.indexOf(\".csv\") > 0) \"description/$filename\"\n            else if (filename.indexOf(\".sig\") > 0) \"sigs/$filename\"\n            else null\n        }\n\n    input:\n    val track_abundance\n    val sketch_value_parsed\n    val sketch_style_parsed\n    set val(sample_id), file(reads) from ch_protein_seq_to_sketch\n\n    output:\n    file(csv) into ch_sourmash_sig_describe_peptides\n    set val(sample_id), val(sketch_id), val(peptide_molecules_comma_separated), val(params.ksizes), file(sig) into sourmash_sketches_all_peptide\n\n    script:\n    sketch_id = make_sketch_id(\n      peptide_molecules_comma_separated, \n      params.ksizes, \n      sketch_value_parsed[0], \n      track_abundance, \n      sketch_style_parsed[0]\n    )\n\n    sketch_value_flag = make_sketch_value_flag(sketch_style_parsed[0], sketch_value_parsed[0])\n    track_abundance_flag = track_abundance ? '--track-abundance' : ''\n    sig_id = \"${sample_id}__${sketch_id}\"\n    sig = \"${sig_id}.sig\"\n    csv = \"${sig_id}.csv\"\n    \"\"\"\n      sourmash compute \\\\\n        ${sketch_value_flag} \\\\\n        --ksizes ${params.ksizes} \\\\\n        --input-is-protein \\\\\n        ${peptide_molecule_flags} \\\\\n        --name '${sample_id}' \\\\\n        --no-dna \\\\\n        $track_abundance_flag \\\\\n        --output ${sig} \\\\\n        $reads\n      sourmash sig describe --csv ${csv} ${sig}\n    \"\"\"\n    }",
        "nb_lignes_process": 46,
        "string_script": "    sketch_id = make_sketch_id(\n      peptide_molecules_comma_separated, \n      params.ksizes, \n      sketch_value_parsed[0], \n      track_abundance, \n      sketch_style_parsed[0]\n    )\n\n    sketch_value_flag = make_sketch_value_flag(sketch_style_parsed[0], sketch_value_parsed[0])\n    track_abundance_flag = track_abundance ? '--track-abundance' : ''\n    sig_id = \"${sample_id}__${sketch_id}\"\n    sig = \"${sig_id}.sig\"\n    csv = \"${sig_id}.csv\"\n    \"\"\"\n      sourmash compute \\\\\n        ${sketch_value_flag} \\\\\n        --ksizes ${params.ksizes} \\\\\n        --input-is-protein \\\\\n        ${peptide_molecule_flags} \\\\\n        --name '${sample_id}' \\\\\n        --no-dna \\\\\n        $track_abundance_flag \\\\\n        --output ${sig} \\\\\n        $reads\n      sourmash sig describe --csv ${csv} ${sig}\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "sigQC",
            "OCSVM",
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/sigQC",
            "https://bio.tools/OCSVM",
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "sigQC",
                "uri": "https://bio.tools/sigQC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Expression correlation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3463",
                                    "term": "Co-expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "R package enabling a streamlined methodological and standardised approach for the quality control validation of gene signatures on independent data sets.",
                "homepage": "https://cran.r-project.org/package=sigQC"
            },
            {
                "name": "OCSVM",
                "uri": "https://bio.tools/OCSVM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel one-class classification approach to accurately predict disease-gene association in acute myeloid leukemia cancer.\n\nDisease causing gene identification is considered as an important step towards drug design and drug discovery. In disease gene identification and classification, the main aim is to identify disease genes while identifying non-disease genes are of less or no significant. Hence, this task can be defined as a one-class classification problem. Existing machine learning methods typically take into consideration known disease genes as positive training set and unknown genes as negative samples to build a binary-class classification model. Here we propose a new One-class Classification Support Vector Machines (OCSVM) method to precisely classify candidate disease genes.",
                "homepage": "https://github.com/imandehzangi/OCSVM"
            },
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "track_abundance",
            "sketch_value_parsed",
            "sketch_style_parsed",
            "ch_protein_seq_to_sketch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_sourmash_sig_describe_peptides",
            "sourmash_sketches_all_peptide"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${sig_id}\"",
            "label \"low_memory\"",
            "publishDir \"${params.outdir}/sketches_peptide/${sketch_id}\", mode: \"${params.publish_dir_mode}\" , saveAs: {filename -> if (filename.indexOf(\".csv\") > 0) \"description/$filename\" else if (filename.indexOf(\".sig\") > 0) \"sigs/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_sig_merge": {
        "name_process": "sourmash_sig_merge",
        "string_process": " process sourmash_sig_merge {\n    tag \"${sig_id}\"\n    label \"low_memory\"\n    publishDir \"${params.outdir}/sketches_merged/${sketch_id}\", mode: \"${params.publish_dir_mode}\",\n        saveAs: {filename ->\n            if (filename.indexOf(\".csv\") > 0) \"description/$filename\"\n            else if (filename.indexOf(\".sig\") > 0) \"sigs/$filename\"\n            else null\n        }\n\n    input:\n    set val(fasta_ids), val(cell_id), val(is_aligned), val(sketch_id), val(moltypes), val(ksizes), file(sigs) from ch_sourmash_sketches_to_merge\n\n    output:\n    file(csv) into ch_sourmash_sig_describe_merged\n    set val(cell_id), val(sketch_id), val(moltypes), val(ksizes), file(output_sig) into ch_sourmash_sketches_merged, ch_sourmash_sketches_merged_to_view, ch_sourmash_sketches_merged_for_moltypes_ksizes\n\n    script:\n                                                                                               \n    sig_id = \"${cell_id}---${sketch_id}\"\n    csv = \"${sig_id}.csv\"\n    output_sig = \"${sig_id}.sig\"\n    \"\"\"\n    merge_rename_sigs.py \\\\\n        --ksizes ${ksizes} \\\\\n        --moltypes ${moltypes} \\\\\n        --name '${cell_id}' \\\\\n        --outsig ${output_sig} \\\\\n        ${sigs}\n\n    # Add csv showing number of hashes at each ksize\n    sourmash sig describe --csv ${csv} ${output_sig}\n    \"\"\"\n\n  }",
        "nb_lignes_process": 33,
        "string_script": "    sig_id = \"${cell_id}---${sketch_id}\"\n    csv = \"${sig_id}.csv\"\n    output_sig = \"${sig_id}.sig\"\n    \"\"\"\n    merge_rename_sigs.py \\\\\n        --ksizes ${ksizes} \\\\\n        --moltypes ${moltypes} \\\\\n        --name '${cell_id}' \\\\\n        --outsig ${output_sig} \\\\\n        ${sigs}\n\n    # Add csv showing number of hashes at each ksize\n    sourmash sig describe --csv ${csv} ${output_sig}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "OCSVM",
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/OCSVM",
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "OCSVM",
                "uri": "https://bio.tools/OCSVM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel one-class classification approach to accurately predict disease-gene association in acute myeloid leukemia cancer.\n\nDisease causing gene identification is considered as an important step towards drug design and drug discovery. In disease gene identification and classification, the main aim is to identify disease genes while identifying non-disease genes are of less or no significant. Hence, this task can be defined as a one-class classification problem. Existing machine learning methods typically take into consideration known disease genes as positive training set and unknown genes as negative samples to build a binary-class classification model. Here we propose a new One-class Classification Support Vector Machines (OCSVM) method to precisely classify candidate disease genes.",
                "homepage": "https://github.com/imandehzangi/OCSVM"
            },
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "ch_sourmash_sketches_to_merge"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_sourmash_sig_describe_merged",
            "ch_sourmash_sketches_merged",
            "ch_sourmash_sketches_merged_to_view",
            "ch_sourmash_sketches_merged_for_moltypes_ksizes"
        ],
        "nb_outputs": 4,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${sig_id}\"",
            "label \"low_memory\"",
            "publishDir \"${params.outdir}/sketches_merged/${sketch_id}\", mode: \"${params.publish_dir_mode}\" , saveAs: {filename -> if (filename.indexOf(\".csv\") > 0) \"description/$filename\" else if (filename.indexOf(\".sig\") > 0) \"sigs/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "ska_compare_sketches": {
        "name_process": "ska_compare_sketches",
        "string_process": " process ska_compare_sketches {\n    tag \"${sketch_id}\"\n    publishDir \"${params.outdir}/compare_sketches\", mode: params.publish_dir_mode\n\n    input:\n    set val(ksize), file (sketches) from ska_sketches.groupTuple()\n\n    output:\n                                                                     \n    file \"ksize_${ksize}*\"\n\n    script:\n    \"\"\"\n    ska distance -o ksize_${ksize} -s 25 -i 0.95 ${sketches}\n    \"\"\"\n\n    }",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    ska distance -o ksize_${ksize} -s 25 -i 0.95 ${sketches}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SKAT"
        ],
        "tools_url": [
            "https://bio.tools/skat"
        ],
        "tools_dico": [
            {
                "name": "SKAT",
                "uri": "https://bio.tools/skat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A SNP-set (e.g., a gene or a region) level test for association between a set of rare (or common) variants and dichotomous or quantitative phenotypes, SKAT aggregates individual score test statistics of SNPs in a SNP set and computes SNP-set level p-values, e.g. a gene or a region level p-value, while adjusting for covariates, such as principal components to account for population stratification. SKAT also allows for power/sample size calculations for designing for sequence association studies.",
                "homepage": "https://www.hsph.harvard.edu/skat/"
            }
        ],
        "inputs": [
            "ska_sketches"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${sketch_id}\"",
            "publishDir \"${params.outdir}/compare_sketches\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "sourmash_compare_sketches": {
        "name_process": "sourmash_compare_sketches",
        "string_process": " process sourmash_compare_sketches {\n                                              \n    tag \"${compare_id}\"\n    publishDir \"${params.outdir}/compare_sketches\", mode: 'copy'\n\n    input:\n                                                                   \n    set val(molecule), file(\"*.sig\"), val(ksize) from ch_sourmash_sketches_to_compare\n\n    output:\n    file(csv)\n\n    script:\n    compare_id = \"${molecule}__k-${ksize}\"\n    processes = \"--processes ${task.cpus}\"\n    csv = \"similarities__${compare_id}.csv\"\n    \"\"\"\n    sourmash compare \\\\\n          --ksize ${ksize} \\\\\n          --${molecule} \\\\\n          --csv ${csv} \\\\\n          ${processes} \\\\\n          --traverse-directory .\n    # Use --traverse-directory instead of all the files explicitly to avoid\n    # \"too many arguments\" error for bash when there are lots of samples\n    \"\"\"\n\n  }",
        "nb_lignes_process": 26,
        "string_script": "    compare_id = \"${molecule}__k-${ksize}\"\n    processes = \"--processes ${task.cpus}\"\n    csv = \"similarities__${compare_id}.csv\"\n    \"\"\"\n    sourmash compare \\\\\n          --ksize ${ksize} \\\\\n          --${molecule} \\\\\n          --csv ${csv} \\\\\n          ${processes} \\\\\n          --traverse-directory .\n    # Use --traverse-directory instead of all the files explicitly to avoid\n    # \"too many arguments\" error for bash when there are lots of samples\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "OCSVM",
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/OCSVM",
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "OCSVM",
                "uri": "https://bio.tools/OCSVM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel one-class classification approach to accurately predict disease-gene association in acute myeloid leukemia cancer.\n\nDisease causing gene identification is considered as an important step towards drug design and drug discovery. In disease gene identification and classification, the main aim is to identify disease genes while identifying non-disease genes are of less or no significant. Hence, this task can be defined as a one-class classification problem. Existing machine learning methods typically take into consideration known disease genes as positive training set and unknown genes as negative samples to build a binary-class classification model. Here we propose a new One-class Classification Support Vector Machines (OCSVM) method to precisely classify candidate disease genes.",
                "homepage": "https://github.com/imandehzangi/OCSVM"
            },
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "ch_sourmash_sketches_to_compare"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "tag \"${compare_id}\"",
            "publishDir \"${params.outdir}/compare_sketches\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": " process multiqc {\n      publishDir \"${params.outdir}/MultiQC\", mode: \"${params.publish_dir_mode}\"\n      input:\n      file multiqc_config from ch_multiqc_config\n      file (\"sourmash_describe_sig_merge/\") from ch_sourmash_sig_describe_merged.collect().ifEmpty([])\n      file (\"sourmash_describe_peptides/\") from ch_sourmash_sig_describe_peptides.collect().ifEmpty([])\n      file (\"sourmash_describe_nucleotides/\") from ch_sourmash_sig_describe_nucleotides.collect().ifEmpty([])\n      file ('fastp/*') from ch_fastp_results.collect().ifEmpty([])\n      file ('sortmerna/*') from sortmerna_logs.collect().ifEmpty([])\n      file ('software_versions/*') from ch_software_versions_yaml.collect()\n      file workflow_summary from ch_workflow_summary.collectFile(name: \"workflow_summary_mqc.yaml\")\n\n      output:\n      file \"*multiqc_report.html\" into ch_multiqc_report\n      file \"*_data\"\n      file \"multiqc_plots\"\n\n      script:\n      rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n      rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n      custom_config_file = params.multiqc_config ? \"--config $multiqc_config\" : ''\n      \"\"\"\n      multiqc . -f $rtitle $rfilename $custom_config_file \\\\\n          -m custom_content \\\\\n          -m fastp \\\\\n          -m sortmerna\n      \"\"\"\n }",
        "nb_lignes_process": 26,
        "string_script": "      rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n      rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n      custom_config_file = params.multiqc_config ? \"--config $multiqc_config\" : ''\n      \"\"\"\n      multiqc . -f $rtitle $rfilename $custom_config_file \\\\\n          -m custom_content \\\\\n          -m fastp \\\\\n          -m sortmerna\n      \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "ch_sourmash_sig_describe_merged",
            "ch_sourmash_sig_describe_peptides",
            "ch_sourmash_sig_describe_nucleotides",
            "ch_fastp_results",
            "sortmerna_logs",
            "ch_software_versions_yaml",
            "ch_workflow_summary"
        ],
        "nb_inputs": 8,
        "outputs": [
            "ch_multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: \"${params.publish_dir_mode}\""
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode\n\n    input:\n    file output_docs from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__kmermaid",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "input_paths_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "input_paths_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "sra_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "sra_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "csv_pairs_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "csv_pairs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "csv_singles_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "csv_singles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "read_pairs_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "read_pairs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "read_singles_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "read_singles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "fastas_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "fastas_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "tenx_tgz_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "tenx_tgz_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "input_paths_ch = Channel\n        .from(params.input_paths)\n        .map { row -> if (row[1].size() == 2) [ row[0], [file(row[1][0]), file(row[1][1])]]\n              else [row[0], [file(row[1][0])]]}\n        .ifEmpty { exit 1, \"params.input_paths (${params.input_paths}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "input_paths_ch",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "sra_ch = Channel\n         .fromSRA( params.sra?.toString()?.tokenize(';') )\n         .ifEmpty { exit 1, \"params.sra ${params.sra} was not found - no input files supplied\" }",
        "origin": [
            [
                "params.sra?.toString(",
                "S"
            ]
        ],
        "gives": [
            [
                "sra_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "csv_pairs_ch = Channel\n      .fromPath(params.csv_pairs)\n      .splitCsv(header:true)\n      .map{ row -> tuple(row[0], tuple(file(row[1]), file(row[2])))}\n      .ifEmpty { exit 1, \"params.csv_pairs (${params.csv_pairs}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.csv_pairs",
                "A"
            ]
        ],
        "gives": [
            [
                "csv_pairs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "csv_singles_ch = Channel\n      .fromPath(params.csv_singles)\n      .splitCsv(header:true)\n      .map{ row -> tuple(row[0], tuple(file(row[1])))}\n      .ifEmpty { exit 1, \"params.csv_singles (${params.csv_singles}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.csv_singles",
                "A"
            ]
        ],
        "gives": [
            [
                "csv_singles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "read_pairs_ch = Channel\n       .fromFilePairs(params.read_pairs?.toString()?.tokenize(';'), size: 2)\n       .ifEmpty { exit 1, \"params.read_pairs (${params.read_pairs}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.read_pairs?.toString(",
                "A"
            ]
        ],
        "gives": [
            [
                "read_pairs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "read_singles_ch = Channel\n       .fromFilePairs(params.read_singles?.toString()?.tokenize(';'), size: 1)\n       .ifEmpty { exit 1, \"params.read_singles (${params.read_singles}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.read_singles?.toString(",
                "A"
            ]
        ],
        "gives": [
            [
                "read_singles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "fastas_ch = Channel\n       .fromPath(params.fastas?.toString()?.tokenize(';'))\n       .map{ f -> tuple(f.baseName, tuple(file(f))) }\n       .dump ( tag: 'fastas_ch' )\n       .ifEmpty { exit 1, \"params.fastas (${params.fastas}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.fastas?.toString(",
                "A"
            ]
        ],
        "gives": [
            [
                "fastas_ch",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "fastas_ch = Channel\n       .from(params.fasta_paths)\n       .map { row -> if (row[1].size() == 2) [ row[0], [file(row[1][0]), file(row[1][1])]]\n             else [row[0], [file(row[1][0])]]}\n       .dump ( tag: 'fastas_ch' )\n       .ifEmpty { exit 1, \"params.fasta_paths (${params.fastas}) was empty - no input files supplied\" }",
        "origin": [
            [
                "params.fasta_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "fastas_ch",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel.fromPath(params.bam, checkIfExists: true)\n        .map{ f -> tuple(f.baseName, tuple(file(f))) }\n       .ifEmpty { exit 1, \"Bam file not found: ${params.bam}\" }\n       .dump( tag: 'bam' )\n       .into{ tenx_bam_for_unaligned_fastq_ch; tenx_bam_for_aligned_fastq_ch}",
        "origin": [
            [
                "params.bam, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "tenx_bam_for_unaligned_fastq_ch",
                "P"
            ],
            [
                "tenx_bam_for_aligned_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel.fromPath(params.barcodes_file, checkIfExists: true)\n        .ifEmpty { exit 1, \"Barcodes file not found: ${params.barcodes_file}\" }\n        .set{barcodes_ch}",
        "origin": [
            [
                "params.barcodes_file, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel.from(false)\n        .set{barcodes_ch}",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel.fromPath(params.rename_10x_barcodes, checkIfExists: true)\n        .ifEmpty { exit 1, \"Barcodes file not found: ${params.rename_10x_barcodes}\" }\n        .set{rename_10x_barcodes_ch}",
        "origin": [
            [
                "params.rename_10x_barcodes, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "rename_10x_barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "Channel.from(false)\n        .set{rename_10x_barcodes_ch}",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "rename_10x_barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "Channel.fromPath(params.tenx_tgz, checkIfExists: true)\n       .dump(tag: 'tenx_tgz_before_mri_filter')\n       .filter{ ~/.+[^mri]\\.tgz/ }\n       .ifEmpty { exit 1, \"10X .tgz file not found: ${params.tenx_tgz}\" }\n       .dump(tag: 'tenx_tgz_after_mri_filter')\n       .set{ tenx_tgz_ch }",
        "origin": [
            [
                "params.tenx_tgz, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "tenx_tgz_ch",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "Channel.fromPath(params.protein_fastas?.toString()?.tokenize(';'))\n      .map{ f -> tuple(f.baseName, tuple(file(f))) }\n      .ifEmpty { exit 1, \"params.protein_fastas was empty - no input files supplied\" }\n      .set { ch_protein_fastas }",
        "origin": [
            [
                "params.protein_fastas?.toString(",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_protein_fastas",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "Channel\n    .from(params.protein_fasta_paths)\n    .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true)] ] }\n    .ifEmpty { exit 1, \"params.protein_fasta_paths was empty - no input files supplied\" }\n    .dump(tag: \"protein_fasta_paths\")\n    .set { ch_protein_fastas }",
        "origin": [
            [
                "params.protein_fasta_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_protein_fastas",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "ch_protein_fastas = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_protein_fastas",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "Channel.fromPath(params.reference_proteome_fasta, checkIfExists: true)\n     .ifEmpty { exit 1, \"Reference proteome file not found: ${params.reference_proteome_fasta}\" }\n     .set{ ch_reference_proteome_fasta }",
        "origin": [
            [
                "params.reference_proteome_fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_reference_proteome_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "ch_read_files_trimming_to_check_size = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_read_files_trimming_to_check_size",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "ch_read_files_trimming_to_check_size = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_read_files_trimming_to_check_size",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "Channel\n    .from( rRNA_database.readLines() )\n    .map { row -> file(row) }\n    .set { sortmerna_fasta }",
        "origin": [],
        "gives": [
            [
                "sortmerna_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "Channel.from(params.ksizes?.toString().tokenize(','))\n  .into { ch_ksizes_for_compare_peptide; ch_ksizes_for_compare_nucleotide }",
        "origin": [],
        "gives": [
            [
                "ch_ksizes_for_compare_peptide",
                "P"
            ],
            [
                "ch_ksizes_for_compare_nucleotide",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "Channel.from( molecules )\n  .set { ch_molecules }",
        "origin": [
            [
                "molecules",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_molecules",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "Channel.from( peptide_molecules )\n  .into { ch_peptide_molecules; ch_peptide_molecules_for_compare }",
        "origin": [
            [
                "peptide_molecules",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_peptide_molecules",
                "P"
            ],
            [
                "ch_peptide_molecules_for_compare",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-kmermaid-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/kmermaid Workflow Summary'\n    section_href: 'https://github.com/nf-core/kmermaid'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "ch_fastp_results = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_fastp_results",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "sortmerna_logs = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "sortmerna_logs",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "sourmash_sketches_nucleotide = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "sourmash_sketches_nucleotide",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "ch_sourmash_sig_describe_nucleotides = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_sourmash_sig_describe_nucleotides",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "sourmash_sketches_nucleotide = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "sourmash_sketches_nucleotide",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "ch_fastp_results = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_fastp_results",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "sortmerna_logs = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "sortmerna_logs",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "ch_sourmash_sig_describe_nucleotides = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_sourmash_sig_describe_nucleotides",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "ch_fastp_results = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_fastp_results",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "sortmerna_logs = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "sortmerna_logs",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "sortmerna_logs = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "sortmerna_logs",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "ch_fastp_results = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_fastp_results",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "sourmash_sketches_peptide = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "sourmash_sketches_peptide",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "ch_sourmash_sig_describe_peptides = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_sourmash_sig_describe_peptides",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "ch_sourmash_sig_describe_merged = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_sourmash_sig_describe_merged",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "Channel.from(\"dna\")  \n    .combine( ch_ksizes_for_compare_nucleotide )\n    .mix ( ch_sourmash_compare_params_peptide )\n    .set { ch_sourmash_compare_params_both }",
        "origin": [
            [
                "ch_ksizes_for_compare_nucleotide",
                "P"
            ],
            [
                "ch_sourmash_compare_params_peptide",
                "P"
            ],
            [
                "\"dna\"",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_sourmash_compare_params_both",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "sra_ch.concat(csv_pairs_ch, csv_singles_ch, read_pairs_ch,\n        read_singles_ch, fastas_ch, input_paths_ch)\n        .set{ subsample_reads_ch_unchecked }",
        "origin": [
            [
                "sra_ch",
                "P"
            ],
            [
                "csv_pairs_ch",
                "P"
            ],
            [
                "csv_singles_ch",
                "P"
            ],
            [
                "read_pairs_ch",
                "P"
            ],
            [
                "read_singles_ch",
                "P"
            ],
            [
                "fastas_ch",
                "P"
            ],
            [
                "input_paths_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "subsample_reads_ch_unchecked",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "sra_ch.concat(\n          csv_pairs_ch, csv_singles_ch, read_pairs_ch,\n          read_singles_ch, input_paths_ch)\n                                                                         \n        .set{ ch_read_files_trimming_unchecked }",
        "origin": [
            [
                "sra_ch",
                "P"
            ],
            [
                "csv_pairs_ch",
                "P"
            ],
            [
                "csv_singles_ch",
                "P"
            ],
            [
                "read_pairs_ch",
                "P"
            ],
            [
                "read_singles_ch",
                "P"
            ],
            [
                "input_paths_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming_unchecked",
                "P"
            ]
        ]
    },
    "OPERATION_54": {
        "string": "sra_ch.concat(\n          csv_pairs_ch, csv_singles_ch, read_pairs_ch,\n          read_singles_ch, fastas_ch, input_paths_ch)\n       .set{ reads_ch_unchecked }",
        "origin": [
            [
                "sra_ch",
                "P"
            ],
            [
                "csv_pairs_ch",
                "P"
            ],
            [
                "csv_singles_ch",
                "P"
            ],
            [
                "read_pairs_ch",
                "P"
            ],
            [
                "read_singles_ch",
                "P"
            ],
            [
                "fastas_ch",
                "P"
            ],
            [
                "input_paths_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "reads_ch_unchecked",
                "P"
            ]
        ]
    },
    "OPERATION_55": {
        "string": "sra_ch.concat(\n            csv_pairs_ch, csv_singles_ch, read_pairs_ch,\n            read_singles_ch, input_paths_ch)\n          .dump ( tag: 'ch_read_files_trimming_unchecked__with_fastas' )\n          .into { ch_read_files_trimming_to_trim; ch_read_files_trimming_to_check_size }",
        "origin": [
            [
                "sra_ch",
                "P"
            ],
            [
                "csv_pairs_ch",
                "P"
            ],
            [
                "csv_singles_ch",
                "P"
            ],
            [
                "read_pairs_ch",
                "P"
            ],
            [
                "read_singles_ch",
                "P"
            ],
            [
                "input_paths_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming_to_trim",
                "P"
            ],
            [
                "ch_read_files_trimming_to_check_size",
                "P"
            ]
        ]
    },
    "OPERATION_56": {
        "string": "sra_ch.concat(\n            csv_pairs_ch, csv_singles_ch, read_pairs_ch,\n            read_singles_ch, input_paths_ch)\n          .dump ( tag: 'ch_read_files_trimming_unchecked__no_fastas' )\n          .set{ ch_read_files_trimming_unchecked }",
        "origin": [
            [
                "sra_ch",
                "P"
            ],
            [
                "csv_pairs_ch",
                "P"
            ],
            [
                "csv_singles_ch",
                "P"
            ],
            [
                "read_pairs_ch",
                "P"
            ],
            [
                "read_singles_ch",
                "P"
            ],
            [
                "input_paths_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming_unchecked",
                "P"
            ]
        ]
    },
    "OPERATION_57": {
        "string": "sra_ch.concat(\n          csv_pairs_ch, csv_singles_ch, read_pairs_ch,\n          read_singles_ch, input_paths_ch)\n        .dump ( tag: 'ch_non_bam_reads_unchecked__concatenated' )\n        .set{ ch_non_bam_reads_unchecked }",
        "origin": [
            [
                "sra_ch",
                "P"
            ],
            [
                "csv_pairs_ch",
                "P"
            ],
            [
                "csv_singles_ch",
                "P"
            ],
            [
                "read_pairs_ch",
                "P"
            ],
            [
                "read_singles_ch",
                "P"
            ],
            [
                "input_paths_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_non_bam_reads_unchecked",
                "P"
            ]
        ]
    },
    "OPERATION_58": {
        "string": "subsample_reads_ch_unchecked\n      .ifEmpty{  exit 1, \"No reads provided! Check read input files\" }\n      .set { subsample_ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "subsample_reads_ch_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "subsample_ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_59": {
        "string": "reads_ch_unchecked\n      .ifEmpty{ exit 1, \"No reads provided! Check read input files\" }\n      .set { ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "reads_ch_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_60": {
        "string": "ch_non_bam_reads_unchecked\n                                                           \n      .set { ch_non_bam_reads }",
        "origin": [
            [
                "ch_non_bam_reads_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_non_bam_reads",
                "P"
            ]
        ]
    },
    "OPERATION_61": {
        "string": "ch_read_files_trimming_unchecked\n        .ifEmpty{ exit 1, \"No reads provided! Check read input files\" }\n        .into { ch_read_files_trimming_to_trim; ch_read_files_trimming_to_check_size }",
        "origin": [
            [
                "ch_read_files_trimming_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming_to_trim",
                "P"
            ],
            [
                "ch_read_files_trimming_to_check_size",
                "P"
            ]
        ]
    },
    "OPERATION_62": {
        "string": "subsample_reads_ch_unchecked\n      .set { subsample_ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "subsample_reads_ch_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "subsample_ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_63": {
        "string": "reads_ch_unchecked\n      .set { ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "reads_ch_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_64": {
        "string": "ch_read_files_trimming_unchecked\n      .into { ch_read_files_trimming_to_trim; ch_read_files_trimming_to_check_size }",
        "origin": [
            [
                "ch_read_files_trimming_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming_to_trim",
                "P"
            ],
            [
                "ch_read_files_trimming_to_check_size",
                "P"
            ]
        ]
    },
    "OPERATION_65": {
        "string": "ch_non_bam_reads_unchecked\n      .set { ch_non_bam_reads }",
        "origin": [
            [
                "ch_non_bam_reads_unchecked",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_non_bam_reads",
                "P"
            ]
        ]
    },
    "OPERATION_66": {
        "string": "peptide_molecules_comma_separated = peptide_molecules.join(\",\")",
        "origin": [
            [
                "peptide_molecules",
                "P"
            ]
        ],
        "gives": [
            [
                "peptide_molecules_comma_separated",
                "P"
            ]
        ]
    },
    "OPERATION_67": {
        "string": "peptide_molecule_flags = peptide_molecules.collect { it -> \"--${it}\" }.join ( \" \" )",
        "origin": [
            [
                "peptide_molecules",
                "P"
            ]
        ],
        "gives": [
            [
                "peptide_molecule_flags",
                "P"
            ]
        ]
    },
    "OPERATION_68": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_69": {
        "string": "sketch_style_parsed = ch_sketch_style_unparsed\n    .splitText()\n    .dump ( tag: 'ch_sketch_style' )\n    .map { it -> it.replaceAll('\\\\n', '' ) }\n    .first()\n    .dump ( tag: 'sketch_style_parsed' )\n    .collect ()",
        "origin": [
            [
                "ch_sketch_style_unparsed",
                "P"
            ]
        ],
        "gives": [
            [
                "sketch_style_parsed",
                "P"
            ]
        ]
    },
    "OPERATION_70": {
        "string": "sketch_value_parsed = ch_sketch_value_unparsed\n    .splitText()\n    .map { it -> it.replaceAll('\\\\n', '')}\n    .first()\n    .dump ( tag : 'sketch_value_parsed' )\n    .collect()",
        "origin": [
            [
                "ch_sketch_value_unparsed",
                "P"
            ]
        ],
        "gives": [
            [
                "sketch_value_parsed",
                "P"
            ]
        ]
    },
    "OPERATION_71": {
        "string": "tenx_reads_aligned_concatenation_ch\n    .mix( tenx_reads_unaligned_ch )\n    .dump(tag: \"tenx_ch_reads_for_ribosomal_removal\")\n    .set{ tenx_ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "tenx_reads_aligned_concatenation_ch",
                "P"
            ],
            [
                "tenx_reads_unaligned_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "tenx_ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_72": {
        "string": "good_barcodes_unfiltered_ch.filter{ it -> it[1].size() > 0 }\n      .ifEmpty{ exit 1, \"No cell barcodes found with at least ${tenx_min_umi_per_cell} molecular barcodes (UMIs) per cell\"}\n      .set{ good_barcodes_ch }",
        "origin": [
            [
                "good_barcodes_unfiltered_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "good_barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_73": {
        "string": "tenx_ch_reads_for_ribosomal_removal\n    .combine( good_barcodes_ch, by: 0 )\n    .dump( tag: 'tenx_ch_reads_for_ribosomal_removal__combine__good_barcodes_ch' )\n    .map{ it -> [it[0], it[1], it[2], it[3].splitText()] }\n    .transpose()\n    .dump( tag: 'tenx_ch_reads_for_ribosomal_removal__combine__good_barcodes_ch__transpose' )\n    .map{ it -> [it[0], it[1], it[2], it[3].replaceAll(\"\\\\s+\", \"\") ] }\n    .dump( tag: 'tenx_ch_reads_for_ribosomal_removal__combine__good_barcodes_ch__transpose__no_newlines' )\n    .set{ tenx_reads_with_good_barcodes_ch }",
        "origin": [
            [
                "tenx_ch_reads_for_ribosomal_removal",
                "P"
            ]
        ],
        "gives": [
            [
                "tenx_reads_with_good_barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_74": {
        "string": "per_cell_fastqs_ch_possibly_empty\n                                       \n    .filter { it -> it[1].size() > 20 }\n    .set { per_cell_fastqs_ch }",
        "origin": [
            [
                "per_cell_fastqs_ch_possibly_empty",
                "P"
            ]
        ],
        "gives": [
            [
                "per_cell_fastqs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_75": {
        "string": "ch_non_bam_reads\n      .concat(per_cell_fastqs_ch)\n      .set { ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "ch_non_bam_reads",
                "P"
            ],
            [
                "per_cell_fastqs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_76": {
        "string": "ch_non_bam_reads\n      .mix ( per_cell_fastqs_ch )\n      .dump ( tag: 'ch_non_bam_reads__per_cell_fastqs_ch' )\n      .into{ ch_read_files_trimming_to_trim; ch_read_files_trimming_to_check_size }",
        "origin": [
            [
                "ch_non_bam_reads",
                "P"
            ],
            [
                "per_cell_fastqs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming_to_trim",
                "P"
            ],
            [
                "ch_read_files_trimming_to_check_size",
                "P"
            ]
        ]
    },
    "OPERATION_77": {
        "string": "ch_reads_all_trimmed\n    .dump ( tag: 'ch_reads_all_trimmed' )\n    .branch {\n                                       \n      paired: it[1].size() == 2\n      single: true\n    }\n    .set { ch_reads_trimmed_branched }",
        "origin": [
            [
                "ch_reads_all_trimmed",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_trimmed_branched",
                "P"
            ]
        ]
    },
    "OPERATION_78": {
        "string": "ch_reads_trimmed_branched.paired().filter{ it -> it[1][0].size() > 200 }\n    .dump ( tag: 'ch_reads_trimmed_paired' )\n    .set{ ch_reads_trimmed_paired }",
        "origin": [
            [
                "ch_reads_trimmed_branched",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_trimmed_paired",
                "P"
            ]
        ]
    },
    "OPERATION_79": {
        "string": "ch_reads_trimmed_branched.single().filter{ it -> it[1].size() > 200 }\n    .dump ( tag: 'ch_reads_trimmed_single' )\n    .set{ ch_reads_trimmed_single }",
        "origin": [
            [
                "ch_reads_trimmed_branched",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_trimmed_single",
                "P"
            ]
        ]
    },
    "OPERATION_80": {
        "string": "ch_reads_trimmed_single\n    .mix ( ch_reads_trimmed_paired )\n    .set { ch_reads_trimmed }",
        "origin": [
            [
                "ch_reads_trimmed_single",
                "P"
            ],
            [
                "ch_reads_trimmed_paired",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_trimmed",
                "P"
            ]
        ]
    },
    "OPERATION_81": {
        "string": "ch_reads_trimmed\n      .concat( fastas_ch )\n      .dump ( tag: 'trimmed_reads__concat_fastas' )\n      .set { subsample_ch_reads_for_ribosomal_removal }",
        "origin": [
            [
                "ch_reads_trimmed",
                "P"
            ],
            [
                "fastas_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "subsample_ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_82": {
        "string": "ch_reads_for_ribosomal_removal = ch_reads_trimmed.mix(fastas_ch)",
        "origin": [
            [
                "ch_reads_trimmed",
                "P"
            ],
            [
                "fastas_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    },
    "OPERATION_83": {
        "string": "ch_reads_for_ribosomal_removal\n        .set { ch_reads_to_translate }",
        "origin": [
            [
                "ch_reads_for_ribosomal_removal",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_to_translate",
                "P"
            ]
        ]
    },
    "OPERATION_84": {
        "string": "ch_translated_protein_seqs\n      .mix ( ch_protein_fastas )\n      .dump ( tag: 'ch_protein_seq_to_sketch_from_translate' )\n      .set { ch_protein_seq_to_sketch }",
        "origin": [
            [
                "ch_translated_protein_seqs",
                "P"
            ],
            [
                "ch_protein_fastas",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_protein_seq_to_sketch",
                "P"
            ]
        ]
    },
    "OPERATION_85": {
        "string": "ch_noncoding_nucleotides_nonempty = ch_noncoding_nucleotides_potentially_empty.filter{ it[1].size() > 0 }",
        "origin": [
            [
                "ch_noncoding_nucleotides_potentially_empty",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_noncoding_nucleotides_nonempty",
                "P"
            ]
        ]
    },
    "OPERATION_86": {
        "string": "ch_translatable_nucleotide_seqs\n      .dump( tag: 'ch_translatable_nucleotide_seqs' )\n      .filter{ it[1].size() > 0 }\n      .dump ( tag: 'ch_reads_to_sketch__from_translate' )\n      .set { ch_reads_to_sketch }",
        "origin": [
            [
                "ch_translatable_nucleotide_seqs",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_to_sketch",
                "P"
            ]
        ]
    },
    "OPERATION_87": {
        "string": "ch_reads_to_translate\n      .dump ( tag: 'ch_reads_to_sketch__no_translation' )\n      .set{ ch_reads_to_sketch }",
        "origin": [
            [
                "ch_reads_to_translate",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_to_sketch",
                "P"
            ]
        ]
    },
    "OPERATION_88": {
        "string": "sourmash_sketches_all_nucleotide\n      .filter{ it[3].size() > 0 }\n      .dump ( tag: \"sourmash_sketches_all_nucleotide\" )\n      .set { sourmash_sketches_nucleotide }",
        "origin": [
            [
                "sourmash_sketches_all_nucleotide",
                "P"
            ]
        ],
        "gives": [
            [
                "sourmash_sketches_nucleotide",
                "P"
            ]
        ]
    },
    "OPERATION_89": {
        "string": "ch_protein_fastas\n    .set { ch_protein_seq_to_sketch }",
        "origin": [
            [
                "ch_protein_fastas",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_protein_seq_to_sketch",
                "P"
            ]
        ]
    },
    "OPERATION_90": {
        "string": "ch_protein_fastas\n    .set { ch_protein_seq_to_sketch }",
        "origin": [
            [
                "ch_protein_fastas",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_protein_seq_to_sketch",
                "P"
            ]
        ]
    },
    "OPERATION_91": {
        "string": "sourmash_sketches_peptide = sourmash_sketches_all_peptide.filter{ it[3].size() > 0 }",
        "origin": [
            [
                "sourmash_sketches_all_peptide",
                "P"
            ]
        ],
        "gives": [
            [
                "sourmash_sketches_peptide",
                "P"
            ]
        ]
    },
    "OPERATION_92": {
        "string": "sourmash_sketches_nucleotide\n    .mix ( sourmash_sketches_peptide )\n    .dump ( tag: 'ch_sourmash_sketches_mixed' )\n    .set { ch_sourmash_sketches_mixed }",
        "origin": [
            [
                "sourmash_sketches_nucleotide",
                "P"
            ],
            [
                "sourmash_sketches_peptide",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_sourmash_sketches_mixed",
                "P"
            ]
        ]
    },
    "OPERATION_93": {
        "string": "ch_fastq_id_to_cell_id_is_aligned\n    .dump( tag: 'ch_fastq_id_to_cell_id_is_aligned' )\n    .combine ( ch_sourmash_sketches_mixed, by: 0 )\n    .unique()\n    .dump( tag: 'fastq_id_to_cells__combine__sketches' )\n                                                    \n                                                                           \n                                                                 \n                    \n                                                                     \n                \n              \n                                                                                                                                         \n                                                                                                                           \n                                                                                    \n                                        \n                                                                                        \n                                  \n                             \n                                                                                                                                                                  \n    .groupTuple( by: [1, 3, 4, 5] )\n                                                                \n        \n                                                                              \n                                                                 \n                      \n                                                                   \n                \n                 \n                                                                                                                                         \n        \n    .dump( tag: 'fastq_id_to_cells__combine__sketches__grouptuple' )\n    .map { it -> [it[0].unique(), it[1], it[2].unique(), it[3], it[4], it[5], it[6]] }\n    .dump( tag: 'fastq_id_to_cells__combine__sketches__grouptuple__unique' )\n    .set { ch_sourmash_sketches_to_merge }",
        "origin": [
            [
                "ch_fastq_id_to_cell_id_is_aligned",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_sourmash_sketches_to_merge",
                "P"
            ]
        ]
    },
    "OPERATION_94": {
        "string": "ch_sourmash_sketches_merged_to_view\n    .dump( tag: \"ch_sourmash_sketches_to_view\" )",
        "origin": [
            [
                "ch_sourmash_sketches_merged_to_view",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_95": {
        "string": "sourmash_sketches_nucleotide\n    .mix ( sourmash_sketches_peptide )\n    .dump ( tag: 'skip_merge__ch_sourmash_sketches_to_compare' )\n    .set { ch_sourmash_sketches_merged }",
        "origin": [
            [
                "sourmash_sketches_nucleotide",
                "P"
            ],
            [
                "sourmash_sketches_peptide",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_sourmash_sketches_merged",
                "P"
            ]
        ]
    },
    "OPERATION_96": {
        "string": "ch_peptide_molecules_for_compare\n    .combine( ch_ksizes_for_compare_peptide )\n    .set { ch_sourmash_compare_params_peptide }",
        "origin": [
            [
                "ch_peptide_molecules_for_compare",
                "P"
            ],
            [
                "ch_ksizes_for_compare_peptide",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_sourmash_compare_params_peptide",
                "P"
            ]
        ]
    },
    "OPERATION_97": {
        "string": "ch_sourmash_sketches_merged\n                                                      \n                                                             \n                        \n                 \n    .map { [tuple(it[2].split(\",\")), it[4]] }\n    .dump(tag: 'ch_sourmash_sketches_merged__map_split' )\n    .transpose()\n    .dump(tag: 'ch_sourmash_sketches_merged__map_split__tranpose' )\n                                                                     \n    .combine( ch_sourmash_compare_params_both, by: 0)\n    .dump(tag: 'ch_sourmash_sketches_merged__map_split__combine' )\n    .groupTuple(by: [0, 2])\n    .dump(tag: 'ch_sourmash_sketches_to_compare' )\n    .set { ch_sourmash_sketches_to_compare }",
        "origin": [
            [
                "ch_sourmash_sketches_merged",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_sourmash_sketches_to_compare",
                "P"
            ]
        ]
    },
    "OPERATION_98": {
        "string": "good_barcodes_ch = barcodes_ch",
        "origin": [
            [
                "barcodes_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "good_barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_99": {
        "string": "good_barcodes_ch = tenx_bam_barcodes_ch",
        "origin": [
            [
                "tenx_bam_barcodes_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "good_barcodes_ch",
                "P"
            ]
        ]
    },
    "OPERATION_100": {
        "string": "ch_reads_for_ribosomal_removal = fastas_ch",
        "origin": [
            [
                "fastas_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_for_ribosomal_removal",
                "P"
            ]
        ]
    }
}
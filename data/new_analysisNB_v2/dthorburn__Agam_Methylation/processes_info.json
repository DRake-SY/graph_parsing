{
    "Decompress": {
        "name_process": "Decompress",
        "string_process": " process Decompress {\n    errorStrategy { 'retry' }\n    maxRetries 3\n\n    executor = 'pbspro'\n    clusterOptions = \"-lselect=1:ncpus=${params.DC_threads}:mem=${params.DC_memory}gb -lwalltime=${params.DC_walltime}:00:00\"\n\n    tag { run_id }\n\n    publishDir(\n      path: \"${params.TarDir}/\",\n      mode: 'move',\n      saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) },\n    )\n\n    input:\n    path(tb) from tarball\n    val run_id\n\n    output:\n    path(\"**.fast5\") into fast5s\n                      \n                                           \n                                             \n\n    script:\n    \"\"\"\n    tar -xf ${tb}\n    ##echo \"\" > bad_practises.txt\n    \"\"\"\n  }",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    tar -xf ${tb}\n    ##echo \"\" > bad_practises.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tarball",
            "run_id"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fast5s"
        ],
        "nb_outputs": 1,
        "name_workflow": "dthorburn__Agam_Methylation",
        "directive": [
            "errorStrategy { 'retry' }",
            "maxRetries 3",
            "executor = 'pbspro'",
            "clusterOptions = \"-lselect=1:ncpus=${params.DC_threads}:mem=${params.DC_memory}gb -lwalltime=${params.DC_walltime}:00:00\"",
            "tag { run_id }",
            "publishDir( path: \"${params.TarDir}/\", mode: 'move', saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }, )"
        ],
        "when": "",
        "stub": ""
    },
    "Guppy_Call": {
        "name_process": "Guppy_Call",
        "string_process": " process Guppy_Call { \n    errorStrategy { 'retry' }\n    maxRetries 3\n    maxForks params.GP_Forks\n    \n                   \n    tag { run_id }\n    \n                                                                                                                                                                                        \n                                                                                               \n    publishDir(\n      path: \"${params.GuppyDir}\",\n      mode: 'copy',\n                                                              \n    )\n    \n                                            \n                                                                                                       \n    executor = 'pbspro'\n    clusterOptions = \"-lselect=1:ncpus=${params.Guppy_threads}:mem=${params.Guppy_memory}gb:ngpus=${params.Guppy_GPUs}:gpu_type=${params.Guppy_GPU} -lwalltime=${params.Guppy_walltime}:00:00\"\n   \n    beforeScript 'module load cuda/11.4.2'\n    \n    input:\n    path ref_genome\n                    \n    path Gup_container\n    path fast5_files from fast5s\n    path file_in from fast5_dir\n   \n    output:\n                                                                                                                                       \n                                                                                                                                              \n            \"outdir/pass/*.bam\"                          \n    path(\"*.bam\") into all_bams1, all_bams2\n            \n    script:\n    \"\"\"\n    if [ ! -d outdir ]; then mkdir outdir; fi\n    n_slots=`expr ${params.Guppy_threads} / 2`\n    taskset -c 0-\\${n_slots} \\\\\n      singularity exec --nv ${Gup_container} \\\\\n        guppy_basecaller \\\\\n          --config \"${params.Guppy_gupConf}\" \\\\\n          --device cuda:all \\\\\n          --bam_out \\\\\n          --recursive \\\\\n          --compress \\\\\n          --align_ref ${ref_genome} \\\\\n          -i \"${file_in}\" \\\\\n          -s outdir \\\\\n          --gpu_runners_per_device \"${params.Guppy_GPU_runners}\" \\\\\n          --num_callers \"${params.Guppy_callers}\"\n      \n    mv outdir/pass/*.bam ./\n    \"\"\"\n  }",
        "nb_lignes_process": 55,
        "string_script": "    \"\"\"\n    if [ ! -d outdir ]; then mkdir outdir; fi\n    n_slots=`expr ${params.Guppy_threads} / 2`\n    taskset -c 0-\\${n_slots} \\\\\n      singularity exec --nv ${Gup_container} \\\\\n        guppy_basecaller \\\\\n          --config \"${params.Guppy_gupConf}\" \\\\\n          --device cuda:all \\\\\n          --bam_out \\\\\n          --recursive \\\\\n          --compress \\\\\n          --align_ref ${ref_genome} \\\\\n          -i \"${file_in}\" \\\\\n          -s outdir \\\\\n          --gpu_runners_per_device \"${params.Guppy_GPU_runners}\" \\\\\n          --num_callers \"${params.Guppy_callers}\"\n      \n    mv outdir/pass/*.bam ./\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Singularity Hub"
        ],
        "tools_url": [
            "https://bio.tools/singularity_hub"
        ],
        "tools_dico": [
            {
                "name": "Singularity Hub",
                "uri": "https://bio.tools/singularity_hub",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3524",
                            "term": "Simulation experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Framework to build and deploy Singularity containers for mobility of compute, and the singularity-python software with novel metrics for assessing reproducibility of such containers.",
                "homepage": "https://singularity-hub.org/"
            }
        ],
        "inputs": [
            "ref_genome",
            "Gup_container",
            "fast5s",
            "fast5_dir"
        ],
        "nb_inputs": 4,
        "outputs": [
            "all_bams1",
            "all_bams2"
        ],
        "nb_outputs": 2,
        "name_workflow": "dthorburn__Agam_Methylation",
        "directive": [
            "errorStrategy { 'retry' }",
            "maxRetries 3",
            "maxForks params.GP_Forks",
            "tag { run_id }",
            "publishDir( path: \"${params.GuppyDir}\", mode: 'copy', )",
            "executor = 'pbspro'",
            "clusterOptions = \"-lselect=1:ncpus=${params.Guppy_threads}:mem=${params.Guppy_memory}gb:ngpus=${params.Guppy_GPUs}:gpu_type=${params.Guppy_GPU} -lwalltime=${params.Guppy_walltime}:00:00\"",
            "beforeScript 'module load cuda/11.4.2'"
        ],
        "when": "",
        "stub": ""
    },
    "IndexBams": {
        "name_process": "IndexBams",
        "string_process": " process IndexBams {\n    errorStrategy { 'retry' }\n    maxRetries 3\n    maxForks params.BI_Forks\n  \n    executor = 'pbspro'\n    clusterOptions = \"-lselect=1:ncpus=${params.Index_threads}:mem=${params.Index_memory}gb -lwalltime=${params.Index_walltime}:00:00\"\n    \n    publishDir(\n      path: \"${params.GuppyDir}\",\n      mode: 'copy',\n    )\n    \n    beforeScript 'module load samtools/1.2'\n\n    input: \n    set path(queryBam) from bams_ch\n    \n    output:\n    path(\"*.bai\") into bais_ch\n      \n    script:\n    \"\"\"\n    samtools index ${queryBam}\n    \"\"\"\n  }",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    samtools index ${queryBam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bams_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bais_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "dthorburn__Agam_Methylation",
        "directive": [
            "errorStrategy { 'retry' }",
            "maxRetries 3",
            "maxForks params.BI_Forks",
            "executor = 'pbspro'",
            "clusterOptions = \"-lselect=1:ncpus=${params.Index_threads}:mem=${params.Index_memory}gb -lwalltime=${params.Index_walltime}:00:00\"",
            "publishDir( path: \"${params.GuppyDir}\", mode: 'copy', )",
            "beforeScript 'module load samtools/1.2'"
        ],
        "when": "",
        "stub": ""
    },
    "ProcBams": {
        "name_process": "ProcBams",
        "string_process": " process ProcBams {\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }\n    maxRetries 3\n    \n    executor = 'pbspro'\n    clusterOptions = \"-lselect=1:ncpus=${params.BP_threads}:mem=${params.BP_memory} -lwalltime=${params.BP_walltime}:00:00\"\n  \n    tag { run_id }\n\n    publishDir(\n      path: \"${params.ResDir}\",\n      mode: 'copy',\n    )\n    \n    beforeScript 'module load anaconda3/personal; source activate modbam2bed'\n\n    input:\n                                                                        \n    path bams from all_bams2.collect()\n    path bais from bais_ch.collect()\n    path ref_genome\n    val run_id\n\n    output:\n    path \"${run_id}.cpg.bam\"\n    \n    script:\n    def all_bams = bams.collect{ \"$it\" }.join(' ')\n    \"\"\"\n    modbam2bed -e -m ${params.BP_modType} --cpg -t ${params.BP_threads} ${ref_genome} ${all_bams} > ${run_id}.cpg.bam\n    \"\"\"\n  }",
        "nb_lignes_process": 30,
        "string_script": "    def all_bams = bams.collect{ \"$it\" }.join(' ')\n    \"\"\"\n    modbam2bed -e -m ${params.BP_modType} --cpg -t ${params.BP_threads} ${ref_genome} ${all_bams} > ${run_id}.cpg.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_bams2",
            "bais_ch",
            "ref_genome",
            "run_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dthorburn__Agam_Methylation",
        "directive": [
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }",
            "maxRetries 3",
            "executor = 'pbspro'",
            "clusterOptions = \"-lselect=1:ncpus=${params.BP_threads}:mem=${params.BP_memory} -lwalltime=${params.BP_walltime}:00:00\"",
            "tag { run_id }",
            "publishDir( path: \"${params.ResDir}\", mode: 'copy', )",
            "beforeScript 'module load anaconda3/personal; source activate modbam2bed'"
        ],
        "when": "",
        "stub": ""
    }
}
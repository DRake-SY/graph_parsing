{
    "get_submission": {
        "name_process": "get_submission",
        "string_process": "\nprocess get_submission {\n\n    input:\n    file synapseconfig from file(params.synapseconfig)\n    val subid from params.submissionid\n\n    output:\n    file 'submission.json' into submission\n\n    script:\n    \"\"\"\n    challengeutils -c $synapseconfig download-submission $subid --output submission.json\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    challengeutils -c $synapseconfig download-submission $subid --output submission.json\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "params"
        ],
        "nb_inputs": 1,
        "outputs": [
            "submission"
        ],
        "nb_outputs": 1,
        "name_workflow": "Sage-Bionetworks-Challenges__nf-model2data",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "run_docker": {
        "name_process": "run_docker",
        "string_process": "\nprocess run_docker {\n\n    input:\n    file sub_info from submission\n    path input from params.data\n\n    output:\n    file 'predictions.csv' into prediction\n\n    script:\n    \"\"\"\n    repo=`cat $sub_info | jq -r .docker_repository`\n    digest=`cat $sub_info | jq -r .docker_digest`\n    docker run -v $input:/input:ro -v \\$PWD:/output:rw \\$repo@\\$digest\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    repo=`cat $sub_info | jq -r .docker_repository`\n    digest=`cat $sub_info | jq -r .docker_digest`\n    docker run -v $input:/input:ro -v \\$PWD:/output:rw \\$repo@\\$digest\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "AUDocker"
        ],
        "tools_url": [
            "https://bio.tools/audocker"
        ],
        "tools_dico": [
            {
                "name": "AUDocker",
                "uri": "https://bio.tools/audocker",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Protein-ligand docking"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Ligand-binding simulation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A GUI for AutoDock Vina, it helps in virtual screening of huge number of ligands continuously. Helps in resumption of work in accidental shutdowns. This program can help you in docking several ligands automatically in to a prescribed protein receptor site.",
                "homepage": "http://sdisau.blogspot.kr/2011/04/audocker-10-easy-tool-for-virtual.html"
            }
        ],
        "inputs": [
            "submission",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "prediction"
        ],
        "nb_outputs": 1,
        "name_workflow": "Sage-Bionetworks-Challenges__nf-model2data",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "validate": {
        "name_process": "validate",
        "string_process": "\nprocess validate {\n\n    input:\n    file pred from prediction\n     \n    output:\n    val \"done\" into validated\n\n    script:\n    \"\"\"\n    #!/usr/bin/python\n\n    with open(\"$pred\", \"r\") as pred_f:\n        text = pred_f.read()\n    \n    if not text:\n        raise ValueError(\"Must have values\")\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    #!/usr/bin/python\n\n    with open(\"$pred\", \"r\") as pred_f:\n        text = pred_f.read()\n    \n    if not text:\n        raise ValueError(\"Must have values\")\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prediction"
        ],
        "nb_inputs": 1,
        "outputs": [
            "validated"
        ],
        "nb_outputs": 1,
        "name_workflow": "Sage-Bionetworks-Challenges__nf-model2data",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "score": {
        "name_process": "score",
        "string_process": "\nprocess score {\n\n    input:\n    val valid from validated\n    file pred from prediction\n\n    output:\n    file 'score.json' into scores\n\n    when:\n    valid == 'done'\n\n    script:\n    \"\"\"\n    #!/usr/bin/python\n    import json\n\n    with open(\"$pred\", \"r\") as pred_f:\n        text = pred_f.read()\n\n    # Scoring function here\n\n    prediction_file_status = \"SCORED\"\n\n    result = {'primary_metric': 'auc',\n              'primary_metric_value': 0.8,\n              'secondary_metric': 'aupr',\n              'secondary_metric_value': 0.2,\n              'submission_status': prediction_file_status}\n\n    with open(\"score.json\", 'w') as score_o:\n        score_o.write(json.dumps(result))\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    #!/usr/bin/python\n    import json\n\n    with open(\"$pred\", \"r\") as pred_f:\n        text = pred_f.read()\n\n    # Scoring function here\n\n    prediction_file_status = \"SCORED\"\n\n    result = {'primary_metric': 'auc',\n              'primary_metric_value': 0.8,\n              'secondary_metric': 'aupr',\n              'secondary_metric_value': 0.2,\n              'submission_status': prediction_file_status}\n\n    with open(\"score.json\", 'w') as score_o:\n        score_o.write(json.dumps(result))\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "validated",
            "prediction"
        ],
        "nb_inputs": 2,
        "outputs": [
            "scores"
        ],
        "nb_outputs": 1,
        "name_workflow": "Sage-Bionetworks-Challenges__nf-model2data",
        "directive": [],
        "when": "valid == 'done'",
        "stub": ""
    }
}
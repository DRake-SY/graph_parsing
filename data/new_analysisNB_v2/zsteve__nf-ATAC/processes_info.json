{
    "sampleFastQC": {
        "name_process": "sampleFastQC",
        "string_process": "\nprocess sampleFastQC {\n             \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(reads) from readPairOut_FQC\n  output:\n    file '*'\n    file 'fastqc_output' into fastQCReport\n  script:\n    \"\"\"mkdir -p fastqc_output;\n    fastqc -t $params.numCpus -o fastqc_output $reads \\\n      > fastqc.stdout 2> fastqc.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"mkdir -p fastqc_output;\n    fastqc -t $params.numCpus -o fastqc_output $reads \\\n      > fastqc.stdout 2> fastqc.stderr\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "readPairOut_FQC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastQCReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleCutadapt": {
        "name_process": "sampleCutadapt",
        "string_process": "\nprocess sampleCutadapt {\n              \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(reads) from readPairOut\n  output:\n    file 'cutadapt_output/*'\n    set val(sampleInfo), file('cutadapt_output/*_trimmed*') into trimmedPairOut\n                                     \n  script:\n    read1_trimmed_name = file(reads[0]).getName().toString().replaceAll(/_R1/, '_R1_trimmed')\n    read2_trimmed_name = file(reads[1]).getName().toString().replaceAll(/_R2/, '_R2_trimmed')\n    \"\"\"\n    mkdir -p cutadapt_output; \\\n    cutadapt \\\n    -a ${def_cmd_params[\"cutadapt\"][\"-a\"]} -A ${def_cmd_params[\"cutadapt\"][\"-A\"]}\\\n    --info-file=cutadapt_output/cutadapt_info_file\\\n    -q ${def_cmd_params[\"cutadapt\"][\"-q\"]}\\\n    --minimum-length ${def_cmd_params[\"cutadapt\"][\"--minimum-length\"]}\\\n    -o cutadapt_output/${read1_trimmed_name}\\\n    -p cutadapt_output/${read2_trimmed_name}\\\n    $reads > cutadapt_output/cutadapt.stdout 2> cutadapt_output/cutadapt.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    read1_trimmed_name = file(reads[0]).getName().toString().replaceAll(/_R1/, '_R1_trimmed')\n    read2_trimmed_name = file(reads[1]).getName().toString().replaceAll(/_R2/, '_R2_trimmed')\n    \"\"\"\n    mkdir -p cutadapt_output; \\\n    cutadapt \\\n    -a ${def_cmd_params[\"cutadapt\"][\"-a\"]} -A ${def_cmd_params[\"cutadapt\"][\"-A\"]}\\\n    --info-file=cutadapt_output/cutadapt_info_file\\\n    -q ${def_cmd_params[\"cutadapt\"][\"-q\"]}\\\n    --minimum-length ${def_cmd_params[\"cutadapt\"][\"--minimum-length\"]}\\\n    -o cutadapt_output/${read1_trimmed_name}\\\n    -p cutadapt_output/${read2_trimmed_name}\\\n    $reads > cutadapt_output/cutadapt.stdout 2> cutadapt_output/cutadapt.stderr\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "readPairOut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmedPairOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleMapToReference": {
        "name_process": "sampleMapToReference",
        "string_process": "\nprocess sampleMapToReference {\n                               \n             \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(reads) from trimmedPairOut\n  output:\n    file 'bowtie2_output/*'\n    set val(sampleInfo), file('bowtie2_output/*.sam') into mappedSamOut\n  script:\n    output_sam_name = sampleInfo[\"ID\"]+'.sam'\n    \"\"\"\n    mkdir -p bowtie2_output;\n    bowtie2 ${getFlagString(def_cmd_params, \"bowtie2\", \"-X2000\")}\\\n    ${getFlagString(def_cmd_params, \"bowtie2\", \"--no-mixed\")}\\\n    ${getFlagString(def_cmd_params, \"bowtie2\", \"--no-discordant\")}\\\n    -p ${def_cmd_params[\"bowtie2\"][\"-p\"]}\\\n    -x ${def_cmd_params[\"bowtie2\"][\"-x\"]}\\\n    -1 ${reads[0]}\\\n    -2 ${reads[1]}\\\n    -S bowtie2_output/$output_sam_name\\\n    > bowtie2_output/bowtie2.stdout 2> bowtie2_output/${sampleInfo[\"ID\"]}_bowtie2.out\n    \"\"\"\n                                                                                         \n                                                                        \n}",
        "nb_lignes_process": 25,
        "string_script": "    output_sam_name = sampleInfo[\"ID\"]+'.sam'\n    \"\"\"\n    mkdir -p bowtie2_output;\n    bowtie2 ${getFlagString(def_cmd_params, \"bowtie2\", \"-X2000\")}\\\n    ${getFlagString(def_cmd_params, \"bowtie2\", \"--no-mixed\")}\\\n    ${getFlagString(def_cmd_params, \"bowtie2\", \"--no-discordant\")}\\\n    -p ${def_cmd_params[\"bowtie2\"][\"-p\"]}\\\n    -x ${def_cmd_params[\"bowtie2\"][\"-x\"]}\\\n    -1 ${reads[0]}\\\n    -2 ${reads[1]}\\\n    -S bowtie2_output/$output_sam_name\\\n    > bowtie2_output/bowtie2.stdout 2> bowtie2_output/${sampleInfo[\"ID\"]}_bowtie2.out\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "trimmedPairOut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mappedSamOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleSamToBam": {
        "name_process": "sampleSamToBam",
        "string_process": "\nprocess sampleSamToBam {\n             \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  echo true\n  input:\n    set val(sampleInfo), file(samFile) from mappedSamOut\n  output:\n    file 'samtobam_output/*'\n\t\tfile 'samtobam_output/*.bam.bai'\n    set val(sampleInfo), file('samtobam_output/*.bam') into mappedBamOut_getStat,mappedBamOut\n    set val(sampleInfo), file('samtobam_output/*.bam'), file('samtobam_output/*.bai') into mappedBamOut_QC\n  script:\n    output_name = sampleInfo[\"ID\"]\n\t\t                                                                                                                      \n    \"\"\"\n      mkdir -p samtobam_output;\n      picard SortSam SO=coordinate INPUT=$samFile OUTPUT=samtobam_output/${output_name}.bam CREATE_INDEX=true\\\n      > samtobam_output/picard_sortsam.stdout 2> samtobam_output/picard_sortsam.stderr\n    \tmv samtobam_output/*.bai samtobam_output/${output_name}.bam.bai\n\t\t\"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    output_name = sampleInfo[\"ID\"]\n\t\t                                                                                                                      \n    \"\"\"\n      mkdir -p samtobam_output;\n      picard SortSam SO=coordinate INPUT=$samFile OUTPUT=samtobam_output/${output_name}.bam CREATE_INDEX=true\\\n      > samtobam_output/picard_sortsam.stdout 2> samtobam_output/picard_sortsam.stderr\n    \tmv samtobam_output/*.bai samtobam_output/${output_name}.bam.bai\n\t\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "mappedSamOut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mappedBamOut_getStat",
            "mappedBamOut",
            "mappedBamOut_QC"
        ],
        "nb_outputs": 3,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "sampleGetMapStats": {
        "name_process": "sampleGetMapStats",
        "string_process": "\nprocess sampleGetMapStats {\n             \n                                                                \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(bamFile) from mappedBamOut_getStat\n  output:\n    file 'flagstat_output/*'\n\t\tfile 'qualimap_output*/*'\n    file 'flagstat_output/*_flagstat.txt' into flagStatOut\n  script:\n    output_flagstat_name = sampleInfo[\"ID\"] + '_flagstat.txt'\n    \"\"\"\n      mkdir -p flagstat_output;\n      samtools flagstat $bamFile > flagstat_output/$output_flagstat_name\\\n      2> samtools_flagstat.stderr\n\t\t\t\n\t\t\tmkdir -p qualimap_output_${sampleInfo[\"ID\"]};\n\t\t\tqualimap bamqc -bam $bamFile -outdir qualimap_output_${sampleInfo[\"ID\"]}\n\t\t\"\"\"\t\n}",
        "nb_lignes_process": 20,
        "string_script": "    output_flagstat_name = sampleInfo[\"ID\"] + '_flagstat.txt'\n    \"\"\"\n      mkdir -p flagstat_output;\n      samtools flagstat $bamFile > flagstat_output/$output_flagstat_name\\\n      2> samtools_flagstat.stderr\n\t\t\t\n\t\t\tmkdir -p qualimap_output_${sampleInfo[\"ID\"]};\n\t\t\tqualimap bamqc -bam $bamFile -outdir qualimap_output_${sampleInfo[\"ID\"]}\n\t\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "mappedBamOut_getStat"
        ],
        "nb_inputs": 1,
        "outputs": [
            "flagStatOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleFilterMMMR": {
        "name_process": "sampleFilterMMMR",
        "string_process": "\nprocess sampleFilterMMMR {\n                                                \n             \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(bamFile) from mappedBamOut\n  output:\n    file \"filtering_output/*\"\n    set val(sampleInfo), file('filtering_output/*_filtered_MMMR.bam') into filteredMMMROut\n  script:\n    output_bam_name = sampleInfo[\"ID\"] + '_filtered_MMMR.bam'\n    \"\"\"\n      mkdir -p filtering_output;\n      java -jar $params.jvarkitPath/dist/samjs.jar\\\n      --samoutputformat ${def_cmd_params[\"samjs\"][\"--samoutputformat\"]}\\\n      -o filtering_output/$output_bam_name\\\n      -e \\'${def_cmd_params[\"samjs\"][\"-e\"]}\\'\\\n      $bamFile > filtering_output/jvarkit_samjs.stdout 2> filtering_output/jvarkit_samjs.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    output_bam_name = sampleInfo[\"ID\"] + '_filtered_MMMR.bam'\n    \"\"\"\n      mkdir -p filtering_output;\n      java -jar $params.jvarkitPath/dist/samjs.jar\\\n      --samoutputformat ${def_cmd_params[\"samjs\"][\"--samoutputformat\"]}\\\n      -o filtering_output/$output_bam_name\\\n      -e \\'${def_cmd_params[\"samjs\"][\"-e\"]}\\'\\\n      $bamFile > filtering_output/jvarkit_samjs.stdout 2> filtering_output/jvarkit_samjs.stderr\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mappedBamOut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "filteredMMMROut"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleFilterDedup": {
        "name_process": "sampleFilterDedup",
        "string_process": "\nprocess sampleFilterDedup {\n                            \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(bamFile) from filteredMMMROut\n  output:\n    file 'filtering_output/*'\n    set val(sampleInfo), file('filtering_output/*_dedup.bam') into filteredDedupOut_makeTags, \\\n                          filteredDedupOut_callPeaks_MACS\n  script:\n    output_bam_name = sampleInfo[\"ID\"] + '_dedup.bam'\n    output_metrics_name = sampleInfo[\"ID\"] + '_dedup_metrics'\n    \"\"\"\n      mkdir -p filtering_output;\n      picard MarkDuplicates\\\n      INPUT=$bamFile\\\n      OUTPUT=filtering_output/$output_bam_name\\\n      METRICS_FILE=filtering_output/$output_metrics_name\\\n      REMOVE_DUPLICATES=${def_cmd_params[\"markduplicates\"][\"REMOVE_DUPLICATES\"]}\\\n      ASSUME_SORTED=${def_cmd_params[\"markduplicates\"][\"ASSUME_SORTED\"]}\\\n      VALIDATION_STRINGENCY=${def_cmd_params[\"markduplicates\"][\"VALIDATION_STRINGENCY\"]}\\\n      CREATE_INDEX=${def_cmd_params[\"markduplicates\"][\"CREATE_INDEX\"]}\\\n      > filtering_output/picard_markduplicates.stdout 2> filtering_output/picard_markduplicates.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    output_bam_name = sampleInfo[\"ID\"] + '_dedup.bam'\n    output_metrics_name = sampleInfo[\"ID\"] + '_dedup_metrics'\n    \"\"\"\n      mkdir -p filtering_output;\n      picard MarkDuplicates\\\n      INPUT=$bamFile\\\n      OUTPUT=filtering_output/$output_bam_name\\\n      METRICS_FILE=filtering_output/$output_metrics_name\\\n      REMOVE_DUPLICATES=${def_cmd_params[\"markduplicates\"][\"REMOVE_DUPLICATES\"]}\\\n      ASSUME_SORTED=${def_cmd_params[\"markduplicates\"][\"ASSUME_SORTED\"]}\\\n      VALIDATION_STRINGENCY=${def_cmd_params[\"markduplicates\"][\"VALIDATION_STRINGENCY\"]}\\\n      CREATE_INDEX=${def_cmd_params[\"markduplicates\"][\"CREATE_INDEX\"]}\\\n      > filtering_output/picard_markduplicates.stdout 2> filtering_output/picard_markduplicates.stderr\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "filteredMMMROut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "filteredDedupOut_makeTags",
            "filteredDedupOut_callPeaks_MACS"
        ],
        "nb_outputs": 2,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleMakeTags": {
        "name_process": "sampleMakeTags",
        "string_process": "\nprocess sampleMakeTags {\n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(bamFile) from filteredDedupOut_makeTags\n  output:\n    set val(sampleInfo), file('maketags_output_*') into makeTagsOut, makeTagsOut_callPeaks_homer\n  script:\n    \"\"\"\n    makeTagDirectory\\\n    maketags_output_${sampleInfo[\"ID\"]}\\\n    -genome $params.refGenomeFasta\\\n    -checkGC $bamFile\\\n    > maketagdirectory.stdout 2> maketagdirectory.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    makeTagDirectory\\\n    maketags_output_${sampleInfo[\"ID\"]}\\\n    -genome $params.refGenomeFasta\\\n    -checkGC $bamFile\\\n    > maketagdirectory.stdout 2> maketagdirectory.stderr\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filteredDedupOut_makeTags"
        ],
        "nb_inputs": 1,
        "outputs": [
            "makeTagsOut",
            "makeTagsOut_callPeaks_homer"
        ],
        "nb_outputs": 2,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleMakeUCSCTrack": {
        "name_process": "sampleMakeUCSCTrack",
        "string_process": "\nprocess sampleMakeUCSCTrack {\n             \n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(tagDir) from makeTagsOut\n  output:\n    file \"makeUCSCtrack_output/*\"\n    file \"makeUCSCtrack_output/*.bedgraph.gz\" into makeUCSCTrackOut \n  script:\n    output_track_name = sampleInfo[\"ID\"] + '_UCSC.bedgraph'\n    \"\"\"\n    mkdir -p makeUCSCtrack_output;\n    makeUCSCfile $tagDir -o makeUCSCtrack_output/$output_track_name\\\n      -fsize ${def_cmd_params[\"makeucscfile\"][\"-fsize\"]}\\\n      -name $output_track_name\\\n      > makeucsctrack.stdout 2> makeucsctrack.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    output_track_name = sampleInfo[\"ID\"] + '_UCSC.bedgraph'\n    \"\"\"\n    mkdir -p makeUCSCtrack_output;\n    makeUCSCfile $tagDir -o makeUCSCtrack_output/$output_track_name\\\n      -fsize ${def_cmd_params[\"makeucscfile\"][\"-fsize\"]}\\\n      -name $output_track_name\\\n      > makeucsctrack.stdout 2> makeucsctrack.stderr\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "makeTagsOut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "makeUCSCTrackOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "sampleMACS2CallPeaks": {
        "name_process": "sampleMACS2CallPeaks",
        "string_process": "\nprocess sampleMACS2CallPeaks {\n  publishDir {sampleInfo[\"baseDirOut\"]}\n  echo true\n  input:\n    set val(sampleInfo), file(bamFile) from filteredDedupOut_callPeaks_MACS\n  output:\n    file \"macs2_output/*\"\n    set val(sampleInfo), file(\"macs2_output/*.xls\") into outputMACS2_xlsPeaks\n  script:\n    \"\"\"\n    mkdir -p macs2_output;\n    macs2 callpeak ${getFlagString(def_cmd_params, \"macs2\", \"--nomodel\")}\\\n    -t $bamFile\\\n    -n ${sampleInfo[\"ID\"]}\\\n    --keep-dup ${def_cmd_params[\"macs2\"][\"--keep-dup\"]}\\\n    --gsize ${def_cmd_params[\"macs2\"][\"--gsize\"]}\\\n    --shift ${def_cmd_params[\"macs2\"][\"--shift\"]}\\\n    --extsize ${def_cmd_params[\"macs2\"][\"--extsize\"]}\\\n    --outdir macs2_output\\\n    -B ${getFlagString(def_cmd_params, \"macs2\", \"-B\")} > macs2_output/macs2.stdout 2> macs2_output/macs2.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    mkdir -p macs2_output;\n    macs2 callpeak ${getFlagString(def_cmd_params, \"macs2\", \"--nomodel\")}\\\n    -t $bamFile\\\n    -n ${sampleInfo[\"ID\"]}\\\n    --keep-dup ${def_cmd_params[\"macs2\"][\"--keep-dup\"]}\\\n    --gsize ${def_cmd_params[\"macs2\"][\"--gsize\"]}\\\n    --shift ${def_cmd_params[\"macs2\"][\"--shift\"]}\\\n    --extsize ${def_cmd_params[\"macs2\"][\"--extsize\"]}\\\n    --outdir macs2_output\\\n    -B ${getFlagString(def_cmd_params, \"macs2\", \"-B\")} > macs2_output/macs2.stdout 2> macs2_output/macs2.stderr\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filteredDedupOut_callPeaks_MACS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "outputMACS2_xlsPeaks"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "sampleHomerCallPeaks": {
        "name_process": "sampleHomerCallPeaks",
        "string_process": "\nprocess sampleHomerCallPeaks {\n  publishDir {sampleInfo[\"baseDirOut\"]}\n  errorStrategy 'ignore'\n  input:\n    set val(sampleInfo), file(tagDir) from makeTagsOut_callPeaks_homer\n  output:\n    file 'homer_findpeaks_output/*'\n    file 'homer_findpeaks_output/*.txt' into outputHomerFindpeaks\n  script:\n    output_name = sampleInfo[\"ID\"] + '_homer_findpeaks.txt'\n  \"\"\"\n    findPeaks\\\n    $tagDir\\\n    -style ${def_cmd_params[\"findpeaks\"][\"-style\"]}\\\n    -o homer_findpeaks_output/$output_name\\\n    > homer_findpeaks_output/homer_findpeaks.stdout 2> homer_findpeaks_output/homer_findpeaks.stderr\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    output_name = sampleInfo[\"ID\"] + '_homer_findpeaks.txt'\n  \"\"\"\n    findPeaks\\\n    $tagDir\\\n    -style ${def_cmd_params[\"findpeaks\"][\"-style\"]}\\\n    -o homer_findpeaks_output/$output_name\\\n    > homer_findpeaks_output/homer_findpeaks.stdout 2> homer_findpeaks_output/homer_findpeaks.stderr\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "makeTagsOut_callPeaks_homer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "outputHomerFindpeaks"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "sampleAnnotatePeaks": {
        "name_process": "sampleAnnotatePeaks",
        "string_process": "\nprocess sampleAnnotatePeaks {\n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(xlsFile) from outputMACS2_xlsPeaks\n  output:\n    file 'homer_annotatepeaks_output/*'\n    set val(sampleInfo), file(\"homer_annotatepeaks_output/$annotationFile\") into outputAnnotatePeaks\n  script:\n    annotationFile = sampleInfo[\"ID\"] + '_annotation.txt'\n    \"\"\"\n    mkdir -p homer_annotatepeaks_output;\n    annotatePeaks.pl\\\n      $xlsFile\\\n      $params.refGenomeName\\\n      > homer_annotatepeaks_output/$annotationFile 2> homer_annotatepeaks_output/homer_annotatepeaks_output.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    annotationFile = sampleInfo[\"ID\"] + '_annotation.txt'\n    \"\"\"\n    mkdir -p homer_annotatepeaks_output;\n    annotatePeaks.pl\\\n      $xlsFile\\\n      $params.refGenomeName\\\n      > homer_annotatepeaks_output/$annotationFile 2> homer_annotatepeaks_output/homer_annotatepeaks_output.stderr\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputMACS2_xlsPeaks"
        ],
        "nb_inputs": 1,
        "outputs": [
            "outputAnnotatePeaks"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "subsetBam": {
        "name_process": "subsetBam",
        "string_process": "\nprocess subsetBam {\n  publishDir {sampleInfo[\"baseDirOut\"]}\n  input:\n    set val(sampleInfo), file(bamFile), file(bamIndex) from mappedBamOut_QC\n  output:\n    file 'subsetbam/*' \n    set val(sampleInfo), file('subsetbam/subset.bam'), file('subsetbam/subset.bam.bai') into subsetBamOut_QC\n  script:\n    \"\"\"\n    mkdir -p subsetbam\n    sambamba view --format=bam --subsample=0.1 $bamFile > subsetbam/subset.bam\n    sambamba index -p subsetbam/subset.bam > subsetbam/subset.bam.bai\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    mkdir -p subsetbam\n    sambamba view --format=bam --subsample=0.1 $bamFile > subsetbam/subset.bam\n    sambamba index -p subsetbam/subset.bam > subsetbam/subset.bam.bai\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "mappedBamOut_QC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "subsetBamOut_QC"
        ],
        "nb_outputs": 1,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}"
        ],
        "when": "",
        "stub": ""
    },
    "createQCReport": {
        "name_process": "createQCReport",
        "string_process": "\nprocess createQCReport {\n  publishDir {sampleInfo[\"baseDirOut\"]}\n  echo true\n  errorStrategy 'ignore'\n  input:\n    set val(sampleInfo), file(subsetBamFile), file(subsetBamIndex) from subsetBamOut_QC \n  output:\n    file 'qc_output/*'\n  exec: \n    rmdScriptDir = workflow.scriptFile.getParent().toString()\n    rmd_bsgenome = def_cmd_params[\"qc_report\"][\"bsgenome\"]\n    rmd_txdb = def_cmd_params[\"qc_report\"][\"txdb\"]\n    rmd_nchr = def_cmd_params[\"qc_report\"][\"nchr\"]\n  shell:\n    \"\"\"\t\n    mkdir -p qc_output;\n    !{rmdScriptDir}/qc/create_qc.sh !{subsetBamFile} !{sampleInfo[\"ID\"]} !{rmd_bsgenome} !{rmd_txdb} !{rmdScriptDir}/qc/qc.rmd qc_output !{rmd_nchr}\\\n    > qc_output/create_qc_report_output.stdout 2> qc_output/create_qc_report_output.stderr\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    rmdScriptDir = workflow.scriptFile.getParent().toString()\n    rmd_bsgenome = def_cmd_params[\"qc_report\"][\"bsgenome\"]\n    rmd_txdb = def_cmd_params[\"qc_report\"][\"txdb\"]\n    rmd_nchr = def_cmd_params[\"qc_report\"][\"nchr\"]\n  shell:\n    \"\"\"\t\n    mkdir -p qc_output;\n    !{rmdScriptDir}/qc/create_qc.sh !{subsetBamFile} !{sampleInfo[\"ID\"]} !{rmd_bsgenome} !{rmd_txdb} !{rmdScriptDir}/qc/qc.rmd qc_output !{rmd_nchr}\\\n    > qc_output/create_qc_report_output.stdout 2> qc_output/create_qc_report_output.stderr\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "subsetBamOut_QC"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zsteve__nf-ATAC",
        "directive": [
            "publishDir {sampleInfo[\"baseDirOut\"]}",
            "echo true",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    }
}
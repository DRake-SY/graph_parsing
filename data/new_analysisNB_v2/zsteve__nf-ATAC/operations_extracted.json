{
    "OPERATION_1": {
        "string": "Channel.from(sampleTable.readLines())\n        .map{\n          line ->\n          def entries = line.tokenize()\n          read_paths = getReadPairFromSampleDir(entries[1])\n                                                                \n      file(entries[2]).mkdir()\n                    \n                                                                   \n          [[\"ID\":entries[0], \"baseDir\":entries[1], \"baseDirOut\":entries[2]], [file(read_paths[\"R1\"]), file(read_paths[\"R2\"])]]\n        }\n        .into{readPairOut; readPairOut_FQC}",
        "origin": [],
        "gives": [
            [
                "readPairOut",
                "P"
            ],
            [
                "readPairOut_FQC",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.value([inputDir, outputDir])\n    .map{dir ->\n        def inputDir = dir[0]\n    def outputDir = dir[1]\n    def sampleID = file(inputDir).getBaseName().toString()\n        file(outputDir).mkdir()\n    read_paths = getReadPairFromSampleDir(inputDir)\n        [[\"ID\":sampleID, \"baseDir\":inputDir, \"baseDirOut\":outputDir], [file(read_paths[\"R1\"]), file(read_paths[\"R2\"])]]}\n    .into{readPairOut; readPairOut_FQC}",
        "origin": [
            [
                "[inputDir, outputDir]",
                "V"
            ]
        ],
        "gives": [
            [
                "readPairOut",
                "P"
            ],
            [
                "readPairOut_FQC",
                "P"
            ]
        ]
    }
}
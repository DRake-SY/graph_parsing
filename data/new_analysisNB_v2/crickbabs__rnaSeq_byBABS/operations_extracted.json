{
    "OPERATION_1": {
        "string": "samples = Channel.from(samples_info)",
        "origin": [
            [
                "samples_info",
                "V"
            ]
        ],
        "gives": [
            [
                "samples",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "r_script = Channel.fromPath(R_SCRIPT_FILEPATH)",
        "origin": [
            [
                "R_SCRIPT_FILEPATH",
                "A"
            ]
        ],
        "gives": [
            [
                "r_script",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "design_file = Channel.fromPath(DESIGN_FILEPATH)",
        "origin": [
            [
                "DESIGN_FILEPATH",
                "A"
            ]
        ],
        "gives": [
            [
                "design_file",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "trimmed_fastq_star = Channel.create()",
        "origin": [],
        "gives": [
            [
                "trimmed_fastq_star",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "trimmed_fastq_star_mbscreen = Channel.create()",
        "origin": [],
        "gives": [
            [
                "trimmed_fastq_star_mbscreen",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "trimmed_fastq_screen = Channel.create()",
        "origin": [],
        "gives": [
            [
                "trimmed_fastq_screen",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "bam_star_sort = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam_star_sort",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "bam_star_multiqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam_star_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "star_results_dgea = Channel.create()",
        "origin": [],
        "gives": [
            [
                "star_results_dgea",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "star_results_multiqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "star_results_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "bam_star_sorted_picard = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam_star_sorted_picard",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "bam_star_sorted_multiqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam_star_sorted_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "picard_rg_duplicate = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_rg_duplicate",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "picard_rg_multiqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_rg_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "picard_dupmarked_indexing = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_indexing",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "picard_dupmarked_complexity = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_complexity",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "picard_dupmarked_rnaseqmetrics = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_rnaseqmetrics",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "picard_dupmarked_multimetrics = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_multimetrics",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "picard_dupmarked_infer_experiment = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_infer_experiment",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "picard_dupmarked_junction_annotation = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_junction_annotation",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "picard_dupmarked_junction_saturation = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_junction_saturation",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "picard_dupmarked_mismatch_profile = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_mismatch_profile",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "picard_dupmarked_read_distribution = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_read_distribution",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "picard_dupmarked_rnaseqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "picard_dupmarked_rnaseqc",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "bai_picard_transcript_integrity_number = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bai_picard_transcript_integrity_number",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "bai_picard_rnaseqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bai_picard_rnaseqc",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "bai_picard_multiqc = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bai_picard_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "diffs.min() }[0]\ndef ROUGH_READ_LENGTH = starIndexReadLengths[index.toInteger()]\n\n\n                                                                               \n                                                                               \n                                                                               \n                                                                               \n                                                                               \n\n              \ndef BINOMIAL = GENUS.capitalize() + \" \" + SPECIES\ndef BINOMIAL_DIRNAME = BINOMIAL.replace(\" \", \"_\").toLowerCase()\ndef BINOMIAL_FILENAME = BINOMIAL.replace(\" \", \"_\")\n\n\n                                                                               \n                                                                               \n                                                                               \n                                                                               \n                                                                               \n \n                 \ndef GENOME_DIRNAME = \"release-\" + GENOME_RELEASE\ndef ROUGH_READ_LENGTH_DIRNAME = ROUGH_READ_LENGTH + \"bp\"\n\n                       \ndef BABS_WORKING_DIRPATH = \"/camp/stp/babs/working\"\n\n                           \ndef ALIGNMENT_DIRNAME = \"alignment\"\ndef ANALYSIS_DIRNAME = \"analysis\"\ndef OUTPUT_DIRNAME = \"output\"\ndef LOG_DIRNAME = \"log\"\n\n                                          \ndef CUTADAPT_DIRNAME = \"cutadapt\"\ndef FSCREEN_DIRNAME = \"fastq_screen\"\ndef RSEM_DIRNAME = \"rsem\"\ndef STAR_DIRNAME = \"star\"\ndef STAR_MBSCREEN_DIRNAME = \"mbscreen\"\ndef PICARD_DIRNAME = \"picard\"\ndef RSEQC_DIRNAME = \"rseqc\"\ndef RNASEQC_DIRNAME = \"rnaseqc\"\n\n                                    \n                                    \n                                    \n\ndef CUTADAPT_DIRPATH = Paths.get(OUTPUT_DIRPATH, CUTADAPT_DIRNAME).toString()\ndef FSCREEN_DIRPATH = Paths.get(OUTPUT_DIRPATH, FSCREEN_DIRNAME).toString()\ndef STAR_DIRPATH = Paths.get(OUTPUT_DIRPATH, STAR_DIRNAME).toString()\ndef STAR_MBSCREEN_DIRPATH = Paths.get(OUTPUT_DIRPATH,\n\t\t\t\t\t\t\t\t\t\tSTAR_MBSCREEN_DIRNAME).toString()\ndef PICARD_DIRPATH = Paths.get(OUTPUT_DIRPATH, PICARD_DIRNAME).toString()\ndef RSEQC_DIRPATH = Paths.get(OUTPUT_DIRPATH, RSEQC_DIRNAME).toString()\ndef RNASEQC_DIRPATH = Paths.get(OUTPUT_DIRPATH, RNASEQC_DIRNAME).toString()\ndef ANALYSIS_DIRPATH = Paths.get(OUTPUT_DIRPATH, ANALYSIS_DIRNAME).toString()\ndef LOG_DIRPATH = Paths.get(OUTPUT_DIRPATH, LOG_DIRNAME).toString()\n\n\n                                                                               \n                                                                               \n                                                                               \n                                                                               \n                                                                               \n\n             \ndef ANNOT_EXTENSION = \"gtf\"\ndef ANNOT_BASENAME =\n\tBINOMIAL_FILENAME + \".\" + GENOME_VERSION + \".\" + GENOME_RELEASE\n\n           \ndef SEQ_BASENAME = BINOMIAL_FILENAME + \".\" + GENOME_VERSION\n\n                  \ndef BABS_DATA_DIRNAME = \"data\"\ndef BABS_GENOME_DIRNAME = \"genomes\"\ndef INDICE_DIRNAME = \"genome_idx\"\ndef ANNOT_DIRNAME = ANNOT_EXTENSION\ndef RSEM_STAR_MBIOL_DIRNAME = \"molecular_biology\"\ndef RSEM_STAR_MBIOL_INDICE_DIRNAME = \"all.idx\" \ndef SEQ_DIRNAME = \"genome\"\n\n               \ndef RSEM_STAR_INDICE_NAME = \"genome\"\ndef RSEM_STAR_MBSCREEN_INDICE_NAME = \"molecular_biology.all\"\n\n                     \n                     \n                     \n\n                                      \ndef BABS_DATA_DIRPATH =\n\tPaths.get(BABS_WORKING_DIRPATH, BABS_DATA_DIRNAME).toString()\n\n                                  \ndef BABS_GENOME_DIRPATH =\n\tPaths.get(BABS_DATA_DIRPATH, BABS_GENOME_DIRNAME).toString()\n\n                                                                         \ndef GENOME_DIRPATH =\n\tPaths.get(\n\t\tBABS_GENOME_DIRPATH, BINOMIAL_DIRNAME,\n\t\tGENOME_TYPE, GENOME_VERSION,\n\t\tGENOME_DIRNAME\n\t\t).toString()\n\ndef ANNOT_DIRPATH = Paths.get(GENOME_DIRPATH, ANNOT_DIRNAME).toString()\n\ndef INDICE_DIRPATH = Paths.get(GENOME_DIRPATH, INDICE_DIRNAME).toString()\n\n                                              \ndef RSEM_STAR_INDICE_DIRPATH =\n\tPaths.get(\n\t\tINDICE_DIRPATH, RSEM_DIRNAME,\n\t\tSTAR_DIRNAME,\n\t\tROUGH_READ_LENGTH_DIRNAME\n\t\t).toString()\n\n                                                                \ndef RSEM_STAR_MBSCREEN_INDICE_DIRPATH =\n\tPaths.get(\n\t\tBABS_GENOME_DIRPATH,\n\t\tRSEM_STAR_MBIOL_DIRNAME,\n\t\tRSEM_STAR_MBIOL_INDICE_DIRNAME,\n\t\tRSEM_DIRNAME, STAR_DIRNAME,\n\t\tROUGH_READ_LENGTH_DIRNAME\n\t\t).toString()\n\n                \n                \n                \n\ndef ANNOT_FILENAME = ANNOT_BASENAME + \".\" + ANNOT_EXTENSION\ndef ANNOT_RNASEQC_FILENAME = ANNOT_BASENAME + \".rnaseqc.\" + ANNOT_EXTENSION\ndef ANNOT_BED_FILENAME = ANNOT_BASENAME + \".bed\"\ndef ANNOT_REFFLAT_FILENAME = ANNOT_BASENAME + \".refflat\"\ndef ANNOT_RRNA_FILENAME = ANNOT_BASENAME + \".rRNA.list\"\ndef ANNOT_RRNA_INTERVAL_FILENAME = ANNOT_BASENAME + \".rRNA.interval_list\"\n\n                                                      \n                                         \n                               \ndef SEQ_FILENAME = SEQ_BASENAME + \".dna_sm.\" + GENOME_SEQ_EXTENSION\n\n                \n                \n                \n\ndef ANNOT_FILEPATH = Paths.get(ANNOT_DIRPATH, ANNOT_FILENAME).toString()\n\ndef ANNOT_RNASEQC_FILEPATH =\n\tPaths.get(ANNOT_DIRPATH, ANNOT_RNASEQC_FILENAME).toString()\n\ndef ANNOT_REFFLAT_FILEPATH =\n\tPaths.get(ANNOT_DIRPATH, ANNOT_REFFLAT_FILENAME).toString()\n\ndef ANNOT_BED_FILEPATH =\n\tPaths.get(ANNOT_DIRPATH, ANNOT_BED_FILENAME).toString()\n\ndef ANNOT_RRNA_FILEPATH =\n\tPaths.get(ANNOT_DIRPATH, ANNOT_RRNA_FILENAME).toString()\n\ndef ANNOT_RRNA_INTERVAL_FILEPATH =\n\tPaths.get(ANNOT_DIRPATH, ANNOT_RRNA_INTERVAL_FILENAME).toString()\n\ndef SEQ_FILEPATH =\n\tPaths.get(GENOME_DIRPATH, SEQ_DIRNAME, SEQ_FILENAME).toString()\n\n\n                                                                               \n                                                                               \n                                                                               \n                                                                               \n                                                                               \n\n                                               \nFile cutadapt_dir = createDirPathFromString(CUTADAPT_DIRPATH)\n\n                                                   \nFile fscreen_dir = createDirPathFromString(FSCREEN_DIRPATH)\n\n                                           \nFile star_dir = createDirPathFromString(STAR_DIRPATH)\n\n                                           \nFile star_mbscreen_dir = createDirPathFromString(STAR_MBSCREEN_DIRPATH)\n\n                                              \nFile picard_dir = createDirPathFromString(PICARD_DIRPATH)\n\n                                              \nFile rseqc_dir = createDirPathFromString(RSEQC_DIRPATH)\n\n                                              \nFile rnaseqc_dir = createDirPathFromString(RNASEQC_DIRPATH)\n\n                                   \nFile analysis_dir = createDirPathFromString(ANALYSIS_DIRPATH)\n\n                                   \nFile log_dir = createDirPathFromString(LOG_DIRPATH)\n\n\n                                                                               \n                                                                               \n                                                                               \n                                                                               \n                                                                               \n\n                                             \ndef single_end_columns = [\"file\",\"sample\"]\ndef paired_end_columns = [\"file1\",\"file2\",\"sample\"]\nif (SINGLE_END ) {",
        "origin": [
            [
                "diffs",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_29": {
        "string": "trimmed_fastq.into(\n\ttrimmed_fastq_star,\n\ttrimmed_fastq_star_mbscreen,\n\ttrimmed_fastq_screen\n\t)",
        "origin": [
            [
                "trimmed_fastq",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_30": {
        "string": "bam_star.into(bam_star_sort, bam_star_multiqc)",
        "origin": [
            [
                "bam_star",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_31": {
        "string": "star_results.into(star_results_dgea, star_results_multiqc)",
        "origin": [
            [
                "star_results",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_32": {
        "string": "bam_star_sorted.into(bam_star_sorted_picard, bam_star_sorted_multiqc)",
        "origin": [
            [
                "bam_star_sorted",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_33": {
        "string": "picard_rg.into(picard_rg_duplicate, picard_rg_multiqc)",
        "origin": [
            [
                "picard_rg",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_34": {
        "string": "picard_dupmarked.into(\n\tpicard_dupmarked_indexing,\n\tpicard_dupmarked_complexity,\n\tpicard_dupmarked_rnaseqmetrics,\n\tpicard_dupmarked_multimetrics,\n\tpicard_dupmarked_infer_experiment,\n\tpicard_dupmarked_junction_annotation,\n\tpicard_dupmarked_junction_saturation,\n\tpicard_dupmarked_mismatch_profile,\n\tpicard_dupmarked_read_distribution,\n\tpicard_dupmarked_rnaseqc)",
        "origin": [
            [
                "picard_dupmarked",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_35": {
        "string": "bai_picard.into(\n\tbai_picard_transcript_integrity_number,\n\tbai_picard_rnaseqc,\n\tbai_picard_multiqc\n\t)",
        "origin": [
            [
                "bai_picard",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n            .from(params.input_paths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.input_paths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; trimming_reads; raw_read_count; scatter_plots_set  }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "trimming_reads",
                "P"
            ],
            [
                "raw_read_count",
                "P"
            ],
            [
                "scatter_plots_set",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .from(params.input_paths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.input_paths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; trimming_reads; raw_read_count;scatter_plots_set }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "trimming_reads",
                "P"
            ],
            [
                "raw_read_count",
                "P"
            ],
            [
                "scatter_plots_set",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n        .fromFilePairs(params.input, size: params.single_end ? 1 : 2)\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.input}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { ch_read_files_fastqc; trimming_reads; raw_read_count; scatter_plots_set}",
        "origin": [
            [
                "params.input, size: params.single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "trimming_reads",
                "P"
            ],
            [
                "raw_read_count",
                "P"
            ],
            [
                "scatter_plots_set",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .value( ch_fasta_pathogen)\n    .collect()\n    .set { genome_fasta_pathogen_to_unzip}",
        "origin": [
            [
                "ch_fasta_pathogen",
                "V"
            ]
        ],
        "gives": [
            [
                "genome_fasta_pathogen_to_unzip",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n    .value( ch_fasta_host )\n    .set { genome_fasta_host_to_unzip}",
        "origin": [
            [
                "ch_fasta_host",
                "V"
            ]
        ],
        "gives": [
            [
                "genome_fasta_host_to_unzip",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n\t    .value(ch_gff_host_tRNA)\n\t    .set {host_gff_trna_file_to_unzip}",
        "origin": [
            [
                "ch_gff_host_tRNA",
                "V"
            ]
        ],
        "gives": [
            [
                "host_gff_trna_file_to_unzip",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n\t    .value(ch_gff_host_genome)\n\t    .set {host_gff_trna_to_unzip}",
        "origin": [
            [
                "ch_gff_host_genome",
                "V"
            ]
        ],
        "gives": [
            [
                "host_gff_trna_to_unzip",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n\t    .value(ch_gff_host_genome)\n\t    .set {host_gff_to_unzip}",
        "origin": [
            [
                "ch_gff_host_genome",
                "V"
            ]
        ],
        "gives": [
            [
                "host_gff_to_unzip",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel\n    .value(ch_gff_pathogen)\n    .set {pathogen_gff_to_unzip}",
        "origin": [
            [
                "ch_gff_pathogen",
                "V"
            ]
        ],
        "gives": [
            [
                "pathogen_gff_to_unzip",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n    .value(ch_transcriptome_host)\n    .into {host_transcriptome_to_combine; transcriptome_host_to_split_q_table_salmon; transcriptome_host_to_split_table_salmon; transcriptome_host_to_split_q_table_salmon_alignment_based; transcriptome_host_to_split_table_salmon_alignment; transcriptome_fasta_host_ref_names}",
        "origin": [
            [
                "ch_transcriptome_host",
                "V"
            ]
        ],
        "gives": [
            [
                "host_transcriptome_to_combine",
                "P"
            ],
            [
                "transcriptome_host_to_split_q_table_salmon",
                "P"
            ],
            [
                "transcriptome_host_to_split_table_salmon",
                "P"
            ],
            [
                "transcriptome_host_to_split_q_table_salmon_alignment_based",
                "P"
            ],
            [
                "transcriptome_host_to_split_table_salmon_alignment",
                "P"
            ],
            [
                "transcriptome_fasta_host_ref_names",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel\n    .value(ch_transcriptome_pathogen)\n    .into {pathogen_transcriptome_to_combine; transcriptome_pathogen_to_split_table_salmon; transcriptome_pathogen_to_split_table_salmon_alignment; transcriptome_pathogen_to_split_q_table_salmon; transcriptome_pathogen_to_split_q_table_salmon_alignment_based;transcriptome_fasta_pathogen_ref_names}",
        "origin": [
            [
                "ch_transcriptome_pathogen",
                "V"
            ]
        ],
        "gives": [
            [
                "pathogen_transcriptome_to_combine",
                "P"
            ],
            [
                "transcriptome_pathogen_to_split_table_salmon",
                "P"
            ],
            [
                "transcriptome_pathogen_to_split_table_salmon_alignment",
                "P"
            ],
            [
                "transcriptome_pathogen_to_split_q_table_salmon",
                "P"
            ],
            [
                "transcriptome_pathogen_to_split_q_table_salmon_alignment_based",
                "P"
            ],
            [
                "transcriptome_fasta_pathogen_ref_names",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel\n\t\t    .value( params.a )\n\t\t    .set { adapter_sequence_3 }",
        "origin": [
            [
                "params.a",
                "V"
            ]
        ],
        "gives": [
            [
                "adapter_sequence_3",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel\n\t\t    .from (params.a, params.A)\n\t\t    .collect()\n\t\t    .set { adapter_sequence_3 }",
        "origin": [
            [
                "params.a, params.A",
                "V"
            ]
        ],
        "gives": [
            [
                "adapter_sequence_3",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel\n\t .value(params.quality_cutoff)\n\t .set { quality_cutoff}",
        "origin": [
            [
                "params.quality_cutoff",
                "V"
            ]
        ],
        "gives": [
            [
                "quality_cutoff",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel\n\t    .value( adapter_database )\n\t    .set { adapter_database }",
        "origin": [
            [
                "adapter_database",
                "V"
            ]
        ],
        "gives": [
            [
                "adapter_database",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel\n\t    .value(params.kmer_length)\n\t    .set {kmer_length_salmon_index}",
        "origin": [
            [
                "params.kmer_length",
                "V"
            ]
        ],
        "gives": [
            [
                "kmer_length_salmon_index",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel\n\t    .value(params.gene_attribute_gff_to_create_transcriptome_host)\n\t    .into {host_gff_attribute_salmon_alignment_tRNA; gene_attribute_gff_to_create_transcriptome_host_salmon; host_atr_collect_data_salmon; combine_annot_quant_pathogen; combine_annot_quant_host; atr_scatter_plot_pathogen; atr_scatter_plot_host; attribute_quant_stats_salmon; host_annotations_RNA_class_stats_pathogen; attribute_host_RNA_class_stats; host_atr_collect_data_salmon_alignment_mode; combine_annot_quant_pathogen_salmon_alignment_based; combine_annot_quant_host_salmon_alignment_based; atr_scatter_plot_pathogen_alignment; atr_scatter_plot_host_alignment; attribute_quant_stats_salmon_alignment;host_annotations_RNA_class_stats_pathogen_alignment; attribute_host_RNA_class_stats_alignment}",
        "origin": [
            [
                "params.gene_attribute_gff_to_create_transcriptome_host",
                "V"
            ]
        ],
        "gives": [
            [
                "host_gff_attribute_salmon_alignment_tRNA",
                "P"
            ],
            [
                "gene_attribute_gff_to_create_transcriptome_host_salmon",
                "P"
            ],
            [
                "host_atr_collect_data_salmon",
                "P"
            ],
            [
                "combine_annot_quant_pathogen",
                "P"
            ],
            [
                "combine_annot_quant_host",
                "P"
            ],
            [
                "atr_scatter_plot_pathogen",
                "P"
            ],
            [
                "atr_scatter_plot_host",
                "P"
            ],
            [
                "attribute_quant_stats_salmon",
                "P"
            ],
            [
                "host_annotations_RNA_class_stats_pathogen",
                "P"
            ],
            [
                "attribute_host_RNA_class_stats",
                "P"
            ],
            [
                "host_atr_collect_data_salmon_alignment_mode",
                "P"
            ],
            [
                "combine_annot_quant_pathogen_salmon_alignment_based",
                "P"
            ],
            [
                "combine_annot_quant_host_salmon_alignment_based",
                "P"
            ],
            [
                "atr_scatter_plot_pathogen_alignment",
                "P"
            ],
            [
                "atr_scatter_plot_host_alignment",
                "P"
            ],
            [
                "attribute_quant_stats_salmon_alignment",
                "P"
            ],
            [
                "host_annotations_RNA_class_stats_pathogen_alignment",
                "P"
            ],
            [
                "attribute_host_RNA_class_stats_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel\n\t    .value(params.gene_feature_gff_to_create_transcriptome_host)\n\t    .collect()\n\t    .into { gene_feature_gff_host_salmon_alignment; gene_feature_gff_to_create_transcriptome_host_salmon}",
        "origin": [
            [
                "params.gene_feature_gff_to_create_transcriptome_host",
                "V"
            ]
        ],
        "gives": [
            [
                "gene_feature_gff_host_salmon_alignment",
                "P"
            ],
            [
                "gene_feature_gff_to_create_transcriptome_host_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "Channel\n\t    .value(params.gene_attribute_gff_to_create_transcriptome_pathogen)\n\t    .into {pathogen_gff_attribute_salmon_alignment; gene_attribute_gff_to_create_transcriptome_pathogen_salmon}",
        "origin": [
            [
                "params.gene_attribute_gff_to_create_transcriptome_pathogen",
                "V"
            ]
        ],
        "gives": [
            [
                "pathogen_gff_attribute_salmon_alignment",
                "P"
            ],
            [
                "gene_attribute_gff_to_create_transcriptome_pathogen_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "Channel\n\t    .value(params.gene_feature_gff_to_create_transcriptome_pathogen)\n\t    .collect()\n\t    .into {gene_feature_to_quantify_pathogen_salmon_alignment; gene_feature_to_extract_annotations_pathogen; gene_feature_gff_to_create_transcriptome_pathogen_salmon}",
        "origin": [
            [
                "params.gene_feature_gff_to_create_transcriptome_pathogen",
                "V"
            ]
        ],
        "gives": [
            [
                "gene_feature_to_quantify_pathogen_salmon_alignment",
                "P"
            ],
            [
                "gene_feature_to_extract_annotations_pathogen",
                "P"
            ],
            [
                "gene_feature_gff_to_create_transcriptome_pathogen_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "Channel\n\t    .value(params.libtype)\n\t    .into {libtype_salmon; libtype_salmon_alignment_mode}",
        "origin": [
            [
                "params.libtype",
                "V"
            ]
        ],
        "gives": [
            [
                "libtype_salmon",
                "P"
            ],
            [
                "libtype_salmon_alignment_mode",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "Channel\n\t    .value(params.gene_feature_gff_to_quantify_host)\n\t    .collect()\n\t    .into {gene_feature_to_quantify_host; gene_feature_to_extract_annotations_host_htseq}",
        "origin": [
            [
                "params.gene_feature_gff_to_quantify_host",
                "V"
            ]
        ],
        "gives": [
            [
                "gene_feature_to_quantify_host",
                "P"
            ],
            [
                "gene_feature_to_extract_annotations_host_htseq",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "Channel\n\t    .value(params.gene_feature_gff_to_quantify_pathogen)\n\t    .collect()\n\t    .into {gene_feature_to_quantify_pathogen; gene_feature_to_extract_annotations_pathongen_htseq}",
        "origin": [
            [
                "params.gene_feature_gff_to_quantify_pathogen",
                "V"
            ]
        ],
        "gives": [
            [
                "gene_feature_to_quantify_pathogen",
                "P"
            ],
            [
                "gene_feature_to_extract_annotations_pathongen_htseq",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "Channel\n\t    .value(params.pathogen_gff_attribute)\n\t    .into { pathogen_gff_attribute; pathogen_gff_attribute_to_extract_annotations_htseq}",
        "origin": [
            [
                "params.pathogen_gff_attribute",
                "V"
            ]
        ],
        "gives": [
            [
                "pathogen_gff_attribute",
                "P"
            ],
            [
                "pathogen_gff_attribute_to_extract_annotations_htseq",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "Channel\n\t    .value(params.stranded)\n\t    .set { stranded_htseq_unique}",
        "origin": [
            [
                "params.stranded",
                "V"
            ]
        ],
        "gives": [
            [
                "stranded_htseq_unique",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "Channel\n\t    .value(params.host_gff_attribute)\n\t    .into { host_gff_attribute_to_pathogen; host_gff_attribute_htseq; host_gff_attribute_htseq_combine; host_gff_attribute_to_extract_annotations_htseq; host_gff_attribute_mapping_stats_htseq; host_gff_attribute_RNA_class_pathogen_htseq; host_gff_attribute_RNA_class_host_htseq; combine_annot_quant_pathogen_host_gff_attribute; host_gff_attribute_htseq_TPM; atr_scatter_plot_pathogen_htseq_u_m; atr_scatter_plot_host_htseq_u_m}",
        "origin": [
            [
                "params.host_gff_attribute",
                "V"
            ]
        ],
        "gives": [
            [
                "host_gff_attribute_to_pathogen",
                "P"
            ],
            [
                "host_gff_attribute_htseq",
                "P"
            ],
            [
                "host_gff_attribute_htseq_combine",
                "P"
            ],
            [
                "host_gff_attribute_to_extract_annotations_htseq",
                "P"
            ],
            [
                "host_gff_attribute_mapping_stats_htseq",
                "P"
            ],
            [
                "host_gff_attribute_RNA_class_pathogen_htseq",
                "P"
            ],
            [
                "host_gff_attribute_RNA_class_host_htseq",
                "P"
            ],
            [
                "combine_annot_quant_pathogen_host_gff_attribute",
                "P"
            ],
            [
                "host_gff_attribute_htseq_TPM",
                "P"
            ],
            [
                "atr_scatter_plot_pathogen_htseq_u_m",
                "P"
            ],
            [
                "atr_scatter_plot_host_htseq_u_m",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "Channel\n    .value(ch_RNA_classes)\n    .into { RNA_classes_to_replace; RNA_classes_to_replace_alignment; RNA_classes_to_replace_htseq_uniquely_mapped}",
        "origin": [
            [
                "ch_RNA_classes",
                "V"
            ]
        ],
        "gives": [
            [
                "RNA_classes_to_replace",
                "P"
            ],
            [
                "RNA_classes_to_replace_alignment",
                "P"
            ],
            [
                "RNA_classes_to_replace_htseq_uniquely_mapped",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-dualrnaseq-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/dualrnaseq Workflow Summary'\n    section_href: 'https://github.com/nf-core/dualrnaseq'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "Channel.empty()\n      .set {ch_fastqc_results}",
        "origin": [],
        "gives": [
            [
                "ch_fastqc_results",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "Channel.empty()\n      .set {ch_fastqc_trimmed_results}",
        "origin": [],
        "gives": [
            [
                "ch_fastqc_trimmed_results",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "Channel.empty()\n  .into {collect_total_reads_raw_salmon; collect_total_reads_raw_salmon_alignment; collect_total_reads_raw_star; collect_total_reads_raw_star_for_salmon}",
        "origin": [],
        "gives": [
            [
                "collect_total_reads_raw_salmon",
                "P"
            ],
            [
                "collect_total_reads_raw_salmon_alignment",
                "P"
            ],
            [
                "collect_total_reads_raw_star",
                "P"
            ],
            [
                "collect_total_reads_raw_star_for_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "Channel.empty()\n      .set {multiqc_salmon_quant}",
        "origin": [],
        "gives": [
            [
                "multiqc_salmon_quant",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "Channel.empty()\n     .into {multiqc_star_for_salmon_alignment; multiqc_salmon_alignment_quant}",
        "origin": [],
        "gives": [
            [
                "multiqc_star_for_salmon_alignment",
                "P"
            ],
            [
                "multiqc_salmon_alignment_quant",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "Channel.empty()\n     .set {multiqc_star_alignment}",
        "origin": [],
        "gives": [
            [
                "multiqc_star_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "Channel.empty()\n     .set {multiqc_htseq_unique}",
        "origin": [],
        "gives": [
            [
                "multiqc_htseq_unique",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_39": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_40": {
        "string": "scatter_plots_set\n\t\t\t.map { tag, file -> tag }\n\t\t\t.set {scatter_plots}",
        "origin": [
            [
                "scatter_plots_set",
                "P"
            ]
        ],
        "gives": [
            [
                "scatter_plots",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "trimming_reads\n      .into {trimming_results_to_qc; trimming_results_star_htseq; trimming_results_to_salmon; trimming_results_star_salmon}",
        "origin": [
            [
                "trimming_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "trimming_results_to_qc",
                "P"
            ],
            [
                "trimming_results_star_htseq",
                "P"
            ],
            [
                "trimming_results_to_salmon",
                "P"
            ],
            [
                "trimming_results_star_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "raw_read_count\n\t    .map { tag, file -> file }\n\t    .set {raw_read_count_file}",
        "origin": [
            [
                "raw_read_count",
                "P"
            ]
        ],
        "gives": [
            [
                "raw_read_count_file",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "to_collect_total_reads\n\t\t  .into {collect_total_reads_raw_salmon; collect_total_reads_raw_salmon_alignment; collect_total_reads_raw_star; collect_total_reads_raw_star_for_salmon}",
        "origin": [
            [
                "to_collect_total_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "collect_total_reads_raw_salmon",
                "P"
            ],
            [
                "collect_total_reads_raw_salmon_alignment",
                "P"
            ],
            [
                "collect_total_reads_raw_star",
                "P"
            ],
            [
                "collect_total_reads_raw_star_for_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "htseq_files_to_combine\n\t    .collect()\n\t    .set { htseq_result_quantification }",
        "origin": [
            [
                "htseq_files_to_combine",
                "P"
            ]
        ],
        "gives": [
            [
                "htseq_result_quantification",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "gff_host_genome_salmon_alignment  = gff_host_tRNA_genome_salmon_alignment",
        "origin": [
            [
                "gff_host_tRNA_genome_salmon_alignment",
                "P"
            ]
        ],
        "gives": [
            [
                "gff_host_genome_salmon_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "gff_host_genome_salmon_alignment  = combine_gff_host_genome_star_salmon",
        "origin": [
            [
                "combine_gff_host_genome_star_salmon",
                "P"
            ]
        ],
        "gives": [
            [
                "gff_host_genome_salmon_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "host_transcriptome_to_combine  = host_transcriptome_genome_tRNA",
        "origin": [
            [
                "host_transcriptome_genome_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "host_transcriptome_to_combine",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "host_transcriptome_to_combine  = host_transcriptome",
        "origin": [
            [
                "host_transcriptome",
                "P"
            ]
        ],
        "gives": [
            [
                "host_transcriptome_to_combine",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "transcriptome_host_to_split_q_table_salmon  = transcriptome_host_to_split_q_table_salmon_with_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_q_table_salmon_with_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_q_table_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "transcriptome_host_to_split_q_table_salmon  = transcriptome_host_to_split_q_table_salmon_without_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_q_table_salmon_without_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_q_table_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "transcriptome_host_to_split_table_salmon  = transcriptome_host_to_split_table_salmon_with_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_table_salmon_with_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_table_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "transcriptome_host_to_split_table_salmon  = transcriptome_host_to_split_table_salmon_without_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_table_salmon_without_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_table_salmon",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "transcriptome_host_to_split_q_table_salmon_alignment_based  = transcriptome_host_to_split_q_table_salmon_alignment_based_with_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_q_table_salmon_alignment_based_with_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_q_table_salmon_alignment_based",
                "P"
            ]
        ]
    },
    "OPERATION_54": {
        "string": "transcriptome_host_to_split_q_table_salmon_alignment_based  = transcriptome_host_to_split_q_table_salmon_alignment_based_without_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_q_table_salmon_alignment_based_without_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_q_table_salmon_alignment_based",
                "P"
            ]
        ]
    },
    "OPERATION_55": {
        "string": "transcriptome_host_to_split_table_salmon_alignment  = transcriptome_host_to_split_table_salmon_alignment_with_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_table_salmon_alignment_with_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_table_salmon_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_56": {
        "string": "transcriptome_host_to_split_table_salmon_alignment  = transcriptome_host_to_split_table_salmon_alignment_without_tRNA",
        "origin": [
            [
                "transcriptome_host_to_split_table_salmon_alignment_without_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_host_to_split_table_salmon_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_57": {
        "string": "transcriptome_fasta_host_ref_names  = transcriptome_fasta_host_ref_names_with_tRNA",
        "origin": [
            [
                "transcriptome_fasta_host_ref_names_with_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_fasta_host_ref_names",
                "P"
            ]
        ]
    },
    "OPERATION_58": {
        "string": "transcriptome_fasta_host_ref_names  = transcriptome_fasta_host_ref_names_without_tRNA",
        "origin": [
            [
                "transcriptome_fasta_host_ref_names_without_tRNA",
                "P"
            ]
        ],
        "gives": [
            [
                "transcriptome_fasta_host_ref_names",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel.empty().into {\n  model2build_ch;\n  model2sample_ch;\n  model_ch;\n  model2gen_quan_ch;\n  gen_quan_ch;\n}",
        "origin": [],
        "gives": [
            [
                "model2build_ch",
                "P"
            ],
            [
                "model2sample_ch",
                "P"
            ],
            [
                "model_ch",
                "P"
            ],
            [
                "model2gen_quan_ch",
                "P"
            ],
            [
                "gen_quan_ch",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n  .of(1..params.chains)\n  .set{ chains_ch }",
        "origin": [
            [
                "1..params.chains",
                "V"
            ]
        ],
        "gives": [
            [
                "chains_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath(params.model, checkIfExists: true)\n    .map{ [ it.simpleName, it ] }\n    .set{ model2build_ch }",
        "origin": [
            [
                "params.model, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "model2build_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(params.model, checkIfExists: true)\n    .map{ [ it.simpleName, it ] }\n    .set{ model_ch }",
        "origin": [
            [
                "params.model, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "model_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath(params.data, checkIfExists: true)\n    .map{ [ it.simpleName, it ] }\n    .combine(model_ch)\n    .combine(chains_ch)\n    .set{ model2sample_ch }",
        "origin": [
            [
                "model_ch",
                "P"
            ],
            [
                "chains_ch",
                "P"
            ],
            [
                "params.data, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "model2sample_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath(params.model, checkIfExists: true)\n    .map{ [ it.simpleName, it ] }\n    .set{ model_ch }",
        "origin": [
            [
                "params.model, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "model_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n    .fromPath(params.data, checkIfExists: true)\n    .map{ [ it.simpleName, it ] }\n    .combine(model_ch)\n    .set{ model2gen_quan_ch }",
        "origin": [
            [
                "model_ch",
                "P"
            ],
            [
                "params.data, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "model2gen_quan_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n    .fromPath(params.fittedParams, checkIfExists: true)\n    .collect()\n    .map{ [ it ] }\n    .combine(model2gen_quan_ch)\n    .map{ [ it[3], it[1], it[4], it[2], it[0] ] }\n    .set{ gen_quan_ch }",
        "origin": [
            [
                "model2gen_quan_ch",
                "P"
            ],
            [
                "params.fittedParams, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "gen_quan_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n    .fromPath(params.data, checkIfExists: true)\n    .map{ [ it.simpleName, it ] }\n    .combine(model_built_ch)\n    .combine(chains_ch)\n    .set{ model2sample_ch }",
        "origin": [
            [
                "model_built_ch",
                "P"
            ],
            [
                "chains_ch",
                "P"
            ],
            [
                "params.data, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "model2sample_ch",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "samples2summary_ch\n  .groupTuple(by: [0,1])\n  .set{ summarise_ch }",
        "origin": [
            [
                "samples2summary_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "summarise_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "samples2gen_quan_ch\n    .groupTuple(by: [0,1])\n    .map { [ it[0], it[1], it[2][1], it[3][1], it[4] ] }\n    .set{ gen_quan_ch }",
        "origin": [
            [
                "samples2gen_quan_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "gen_quan_ch",
                "P"
            ]
        ]
    }
}
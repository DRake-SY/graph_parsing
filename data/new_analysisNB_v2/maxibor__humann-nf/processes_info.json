{
    "prepare_humann_db": {
        "name_process": "prepare_humann_db",
        "string_process": " process prepare_humann_db {\n\n        label 'ristretto'\n\n        conda (params.enable_conda ? \"bioconda::humann=3.0.0\" : null)\n        if (workflow.containerEngine == 'singularity') {\n            container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n        } else {\n            container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n        }\n\n        output:\n            path(\"done.txt\") into humann_finished\n        script:\n            \"\"\"\n            humann_databases --download chocophlan full ${params.humann_path}\n            humann_databases --download uniref ${params.humann_db_type}_diamond ${params.humann_path}\n            touch done.txt\n            \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "            \"\"\"\n            humann_databases --download chocophlan full ${params.humann_path}\n            humann_databases --download uniref ${params.humann_db_type}_diamond ${params.humann_path}\n            touch done.txt\n            \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "humann_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__humann-nf",
        "directive": [
            "label 'ristretto'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity') { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "build_metaphlan_db": {
        "name_process": "build_metaphlan_db",
        "string_process": " process build_metaphlan_db {\n    tag \"${params.mpa_db_name}\"\n\n    label 'intenso'\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.13\" : null)\n    if (workflow.containerEngine == 'singularity') {\n        container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.13--pyhb7b1952_0\"\n    } else {\n        container \"quay.io/biocontainers/metaphlan:3.0.13--pyhb7b1952_0\"\n    }\n\n    output:\n        val(\"${params.mpa_db_name}\") into mpa_db_path_wait\n    \n    script:\n        \"\"\"\n        metaphlan --install -x ${params.mpa_db_name} --bowtie2db ${params.bt2db} --nproc ${task.cpus}\n        \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        metaphlan --install -x ${params.mpa_db_name} --bowtie2db ${params.bt2db} --nproc ${task.cpus}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "mpa_db_path_wait"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__humann-nf",
        "directive": [
            "tag \"${params.mpa_db_name}\"",
            "label 'intenso'",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.13\" : null) if (workflow.containerEngine == 'singularity') { container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.13--pyhb7b1952_0\" } else { container \"quay.io/biocontainers/metaphlan:3.0.13--pyhb7b1952_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "AdapterRemoval": {
        "name_process": "AdapterRemoval",
        "string_process": "\nprocess AdapterRemoval {\n    tag \"$name\"\n\n    label 'expresso'\n\n    conda (params.enable_conda ? \"bioconda::adapterremoval=2.3.2\" : null)\n    if (workflow.containerEngine == 'singularity') {\n        container \"https://depot.galaxyproject.org/singularity/adapterremoval:2.3.2--h33c0355_1\"\n    } else {\n        container \"quay.io/biocontainers/adapterremoval:2.3.2--h33c0355_1\"\n    }\n\n    input:\n        set val(name), file(reads) from reads_to_trim\n\n    output:\n        set val(name), file('*.trimmed.fastq.gz') into (trimmed_reads_mpa, trimmed_reads_humann)\n        file(\"*.settings\") into adapter_removal_results_multiqc\n\n    script:\n        settings = name+\".settings\"\n        if (params.pairedEnd && !params.collapse){\n            out1 = name+\".pair1.trimmed.fastq.gz\"\n            out2 = name+\".pair2.trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval \\\\\n                --basename $name \\\\\n                --file1 ${reads[0]} \\\\\n                --file2 ${reads[1]} \\\\\n                --trimns \\\\\n                --trimqualities \\\\\n                --minquality 20 \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --output1 $out1 \\\\\n                --output2 $out2 \\\\\n                --threads ${task.cpus} \\\\\n                --qualitybase ${params.phred} \\\\\n                --settings $settings\n            \"\"\"\n        } else if (params.pairedEnd && params.collapse) {\n            trimmed_out = name+\".trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval  \\\\\n                --qualitybase ${params.phred} \\\\\n                --file1 ${reads[0]} \\\\\n                --file2 ${reads[1]} \\\\\n                --collapse \\\\\n                --trimns \\\\\n                --trimqualities \\\\\n                --minquality 20 \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --basename $name \\\\\n                --threads ${task.cpus} \\\\\n                --settings $settings \\\\\n                --seed 42 \\\\\n                --gzip\n\n                cat *.collapsed.gz *.collapsed.truncated.gz > $trimmed_out\n            \"\"\"\n        } \n        else {\n            se_out = name+\".trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval \\\\\n                --basename $name \\\\\n                --file1 ${reads[0]} \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --trimns \\\\\n                --trimqualities \\\\\n                --minquality 20 \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --output1 $se_out \\\\\n                --threads ${task.cpus} \\\\\n                --qualitybase ${params.phred} \\\\\n                --settings $settings\n            \"\"\"\n        }       \n}",
        "nb_lignes_process": 77,
        "string_script": "        settings = name+\".settings\"\n        if (params.pairedEnd && !params.collapse){\n            out1 = name+\".pair1.trimmed.fastq.gz\"\n            out2 = name+\".pair2.trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval \\\\\n                --basename $name \\\\\n                --file1 ${reads[0]} \\\\\n                --file2 ${reads[1]} \\\\\n                --trimns \\\\\n                --trimqualities \\\\\n                --minquality 20 \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --output1 $out1 \\\\\n                --output2 $out2 \\\\\n                --threads ${task.cpus} \\\\\n                --qualitybase ${params.phred} \\\\\n                --settings $settings\n            \"\"\"\n        } else if (params.pairedEnd && params.collapse) {\n            trimmed_out = name+\".trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval  \\\\\n                --qualitybase ${params.phred} \\\\\n                --file1 ${reads[0]} \\\\\n                --file2 ${reads[1]} \\\\\n                --collapse \\\\\n                --trimns \\\\\n                --trimqualities \\\\\n                --minquality 20 \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --basename $name \\\\\n                --threads ${task.cpus} \\\\\n                --settings $settings \\\\\n                --seed 42 \\\\\n                --gzip\n\n                cat *.collapsed.gz *.collapsed.truncated.gz > $trimmed_out\n            \"\"\"\n        } \n        else {\n            se_out = name+\".trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval \\\\\n                --basename $name \\\\\n                --file1 ${reads[0]} \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --trimns \\\\\n                --trimqualities \\\\\n                --minquality 20 \\\\\n                --minlength ${params.minimum_read_length} \\\\\n                --output1 $se_out \\\\\n                --threads ${task.cpus} \\\\\n                --qualitybase ${params.phred} \\\\\n                --settings $settings\n            \"\"\"\n        }",
        "nb_lignes_script": 56,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_to_trim"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "adapter_removal_results_multiqc"
        ],
        "nb_outputs": 2,
        "name_workflow": "maxibor__humann-nf",
        "directive": [
            "tag \"$name\"",
            "label 'expresso'",
            "conda (params.enable_conda ? \"bioconda::adapterremoval=2.3.2\" : null) if (workflow.containerEngine == 'singularity') { container \"https://depot.galaxyproject.org/singularity/adapterremoval:2.3.2--h33c0355_1\" } else { container \"quay.io/biocontainers/adapterremoval:2.3.2--h33c0355_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "metaphlan": {
        "name_process": "metaphlan",
        "string_process": "\nprocess metaphlan {\n    tag \"$name\"\n\n    label 'intenso'\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.13\" : null)\n    if (workflow.containerEngine == 'singularity') {\n        container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.13--pyhb7b1952_0\"\n    } else {\n        container \"quay.io/biocontainers/metaphlan:3.0.13--pyhb7b1952_0\"\n    }\n\n    publishDir \"${params.results}/metaphlan/$name\", mode: 'copy', pattern: '*.out'\n\n    input:\n        set val(name), file(reads) from trimmed_reads_mpa\n        val (mpa_db) from mpa_db_path_wait.ifEmpty([])\n\n    output:\n        set val(name), file('*.metaphlan.out') into metaphlan_out\n        path(\"*.bowtie2.log\") into bt2_log\n\n    script:\n        out = name+\".metaphlan.out\"\n        sam_out = name+\".sam\"\n        bt_out = name+\".bowtie2.log\"\n        if (params.pairedEnd && !params.collapse){\n            \"\"\"\n            bowtie2 --no-unal --very-sensitive -S $sam_out -x ${params.bt2db}/${params.mpa_db_name} -p ${task.cpus} -1 ${reads[0]} -2 ${reads[1]} 2> $bt_out\n            metaphlan $sam_out \\\\\n                      -o $out \\\\\n                      --bowtie2db ${params.bt2db} \\\\\n                      -x ${params.mpa_db_name} \\\\\n                      --input_type sam \\\\\n                      --nproc ${task.cpus} \\\\\n            \"\"\"    \n        } else {\n            \"\"\"\n            bowtie2 --no-unal --very-sensitive -S $sam_out -x ${params.bt2db}/${params.mpa_db_name} -p ${task.cpus} -U $reads 2> $bt_out\n            metaphlan $sam_out \\\\\n                      -o $out \\\\\n                      --bowtie2db ${params.bt2db} \\\\\n                      -x ${params.mpa_db_name} \\\\\n                      --input_type sam \\\\\n                      --nproc ${task.cpus} \\\\\n            \"\"\"  \n        } \n}",
        "nb_lignes_process": 47,
        "string_script": "        out = name+\".metaphlan.out\"\n        sam_out = name+\".sam\"\n        bt_out = name+\".bowtie2.log\"\n        if (params.pairedEnd && !params.collapse){\n            \"\"\"\n            bowtie2 --no-unal --very-sensitive -S $sam_out -x ${params.bt2db}/${params.mpa_db_name} -p ${task.cpus} -1 ${reads[0]} -2 ${reads[1]} 2> $bt_out\n            metaphlan $sam_out \\\\\n                      -o $out \\\\\n                      --bowtie2db ${params.bt2db} \\\\\n                      -x ${params.mpa_db_name} \\\\\n                      --input_type sam \\\\\n                      --nproc ${task.cpus} \\\\\n            \"\"\"    \n        } else {\n            \"\"\"\n            bowtie2 --no-unal --very-sensitive -S $sam_out -x ${params.bt2db}/${params.mpa_db_name} -p ${task.cpus} -U $reads 2> $bt_out\n            metaphlan $sam_out \\\\\n                      -o $out \\\\\n                      --bowtie2db ${params.bt2db} \\\\\n                      -x ${params.mpa_db_name} \\\\\n                      --input_type sam \\\\\n                      --nproc ${task.cpus} \\\\\n            \"\"\"  \n        }",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Ragout",
            "Rbowtie2",
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/ragout",
            "https://bio.tools/rbowtie2",
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            },
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "trimmed_reads_mpa",
            "mpa_db_path_wait"
        ],
        "nb_inputs": 2,
        "outputs": [
            "metaphlan_out",
            "bt2_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "maxibor__humann-nf",
        "directive": [
            "tag \"$name\"",
            "label 'intenso'",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.13\" : null) if (workflow.containerEngine == 'singularity') { container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.13--pyhb7b1952_0\" } else { container \"quay.io/biocontainers/metaphlan:3.0.13--pyhb7b1952_0\" }",
            "publishDir \"${params.results}/metaphlan/$name\", mode: 'copy', pattern: '*.out'"
        ],
        "when": "",
        "stub": ""
    },
    "humann": {
        "name_process": "humann",
        "string_process": "\nprocess humann {\n    tag \"$name\"\n\n    label 'intenso'\n\n    conda (params.enable_conda ? \"bioconda::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity') {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    publishDir \"${params.results}/humann\", mode: 'copy'\n\n    input:\n        set val(name), path(reads), path(mpa_res) from humann_ch\n        path chocoDB from chocophlanDB\n        path uniDB from unirefDB\n\n    output:\n        set val(name), path(name) into humann_results\n\n    script:\n        \"\"\"\n        humann -i $reads \\\\\n            -o $name \\\\\n            --threads ${task.cpus} \\\\\n            --taxonomic-profile $mpa_res \\\\\n            --nucleotide-database $chocoDB \\\\\n            --protein-database $uniDB \\\\\n            --input-format fastq.gz \\\\\n            --search-mode ${params.humann_db_type}\n        \"\"\"\n\n}",
        "nb_lignes_process": 34,
        "string_script": "        \"\"\"\n        humann -i $reads \\\\\n            -o $name \\\\\n            --threads ${task.cpus} \\\\\n            --taxonomic-profile $mpa_res \\\\\n            --nucleotide-database $chocoDB \\\\\n            --protein-database $uniDB \\\\\n            --input-format fastq.gz \\\\\n            --search-mode ${params.humann_db_type}\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "humann_ch",
            "chocophlanDB",
            "unirefDB"
        ],
        "nb_inputs": 3,
        "outputs": [
            "humann_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__humann-nf",
        "directive": [
            "tag \"$name\"",
            "label 'intenso'",
            "conda (params.enable_conda ? \"bioconda::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity') { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }",
            "publishDir \"${params.results}/humann\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
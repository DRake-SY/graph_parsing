{
    "Rename_Metrics": {
        "name_process": "Rename_Metrics",
        "string_process": "\nprocess Rename_Metrics {\n    input:\n    set sid, file(metrics) from metrics_for_rename\n\n    output:\n    set sid, \"*_metric.nii.gz\" into metrics_for_mean_std,\n        metrics_for_endpoints_metrics, metrics_for_endpoints_roi_stats,\n        metrics_for_volume, metrics_for_mean_std_per_point\n\n    script:\n    \"\"\"\n    for metric in *.nii.gz; do\n        mv \\$metric \\$(basename \\${metric/${sid}__/} .nii.gz)_metric.nii.gz\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    for metric in *.nii.gz; do\n        mv \\$metric \\$(basename \\${metric/${sid}__/} .nii.gz)_metric.nii.gz\n    done\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metrics_for_rename"
        ],
        "nb_inputs": 1,
        "outputs": [
            "metrics_for_mean_std",
            "metrics_for_endpoints_metrics",
            "metrics_for_endpoints_roi_stats",
            "metrics_for_volume",
            "metrics_for_mean_std_per_point"
        ],
        "nb_outputs": 5,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Fixel_AFD": {
        "name_process": "Fixel_AFD",
        "string_process": "\nprocess Fixel_AFD {\n    input:\n    set sid, file(bundles), file(fodf) from bundle_fodf_for_fixel_afd\n\n    output:\n    set sid, \"*_afd_metric.nii.gz\" into fixel_afd_for_mean_std,\n        fixel_afd_for_endpoints_metrics, fixel_afd_for_endpoints_roi_stats,\n        fixel_afd_for_mean_std_per_point\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        scil_compute_mean_fixel_afd_from_bundles.py \\$bundle $fodf \\${bname}_afd_metric.nii.gz\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        scil_compute_mean_fixel_afd_from_bundles.py \\$bundle $fodf \\${bname}_afd_metric.nii.gz\n    done\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundle_fodf_for_fixel_afd"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fixel_afd_for_mean_std",
            "fixel_afd_for_endpoints_metrics",
            "fixel_afd_for_endpoints_roi_stats",
            "fixel_afd_for_mean_std_per_point"
        ],
        "nb_outputs": 4,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Remove_Invalid_Streamlines": {
        "name_process": "Remove_Invalid_Streamlines",
        "string_process": "\nprocess Remove_Invalid_Streamlines {\n    input:\n    set sid, file(bundles) from bundles_for_rm_invalid\n\n    output:\n    set sid, \"${sid}__*_ic.trk\" into bundles_for_label_and_distance_map, bundles_for_centroids\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n      do if [[ \\$bundle == *\"__\"* ]]; then\n          pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n          bname=\\${bundle:\\$pos}\n          bname=\\$(basename \\$bname .trk)\n      else\n          bname=\\$(basename \\$bundle .trk)\n      fi\n      bname=\\${bname/$params.bundle_suffix_to_remove/}\n\n      scil_remove_invalid_streamlines.py \\$bundle ${sid}__\\${bname}_ic.trk --cut_invalid -f\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n      do if [[ \\$bundle == *\"__\"* ]]; then\n          pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n          bname=\\${bundle:\\$pos}\n          bname=\\$(basename \\$bname .trk)\n      else\n          bname=\\$(basename \\$bundle .trk)\n      fi\n      bname=\\${bname/$params.bundle_suffix_to_remove/}\n\n      scil_remove_invalid_streamlines.py \\$bundle ${sid}__\\${bname}_ic.trk --cut_invalid -f\n    done\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_rm_invalid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bundles_for_label_and_distance_map",
            "bundles_for_centroids"
        ],
        "nb_outputs": 2,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Centroid": {
        "name_process": "Bundle_Centroid",
        "string_process": "\nprocess Bundle_Centroid {\n    input:\n    set sid, file(bundles) from bundles_for_centroids\n\n    output:\n    set sid, \"*_centroid_${params.nb_points}.trk\" into centroids_computed\n\n    when:\n    !params.use_provided_centroids\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_ic/}\n        scil_compute_centroid.py \\$bundle centroid.trk --nb_points $params.nb_points -f\n        scil_uniformize_streamlines_endpoints.py centroid.trk ${sid}__\\${bname}_centroid_${params.nb_points}.trk --auto\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_ic/}\n        scil_compute_centroid.py \\$bundle centroid.trk --nb_points $params.nb_points -f\n        scil_uniformize_streamlines_endpoints.py centroid.trk ${sid}__\\${bname}_centroid_${params.nb_points}.trk --auto\n    done\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_centroids"
        ],
        "nb_inputs": 1,
        "outputs": [
            "centroids_computed"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "!params.use_provided_centroids",
        "stub": ""
    },
    "Resample_Centroid": {
        "name_process": "Resample_Centroid",
        "string_process": "\nprocess Resample_Centroid {\n    input:\n    set sid, file(bundles) from centroids_for_resample\n\n    output:\n    set sid, \"${sid}__*_centroid_${params.nb_points}.trk\" into centroids_provided\n\n    when:\n    params.use_provided_centroids\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_centroid/}\n        bname=\\${bname/_ic/}\n\n        scil_resample_streamlines.py \\$bundle \\\n            \"${sid}__\\${bname}_centroid_${params.nb_points}.trk\" \\\n            --nb_pts_per_streamline $params.nb_points -f\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_centroid/}\n        bname=\\${bname/_ic/}\n\n        scil_resample_streamlines.py \\$bundle \\\n            \"${sid}__\\${bname}_centroid_${params.nb_points}.trk\" \\\n            --nb_pts_per_streamline $params.nb_points -f\n    done\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "centroids_for_resample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "centroids_provided"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "params.use_provided_centroids",
        "stub": ""
    },
    "Bundle_Label_And_Distance_Maps": {
        "name_process": "Bundle_Label_And_Distance_Maps",
        "string_process": "\nprocess Bundle_Label_And_Distance_Maps {\n    input:\n    set sid, file(bundles), file(centroids) from\\\n        bundles_centroids_for_label_and_distance_map\n\n    output:\n    set sid, \"${sid}__*_labels.npz\", \"${sid}__*_distances.npz\" into\\\n        label_distance_maps_for_mean_std_per_point\n    set sid, \"${sid}__*_labels.trk\" into bundles_for_uniformize\n    file \"${sid}__*_distances.trk\"\n    set sid, \"${sid}__*_labels.nii.gz\" into voxel_label_maps_for_volume,\n                                            voxel_label_map_for_lesion_load\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_ic/}\n \n        centroid=${sid}__\\${bname}_centroid_${params.nb_points}.trk\n        scil_compute_bundle_voxel_label_map.py \\$bundle \\${centroid} \\\n            ${sid}__\\${bname}_labels.nii.gz \\\n            --out_labels_npz ${sid}__\\${bname}_labels.npz \\\n            --out_distances_npz ${sid}__\\${bname}_distances.npz \\\n            --labels_color_dpp ${sid}__\\${bname}_labels.trk \\\n            --distances_color_dpp ${sid}__\\${bname}_distances.trk \\\n            --min_streamline_count ${params.min_streamline_count} \\\n            --min_voxel_count ${params.min_voxel_count}\n        done\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_ic/}\n \n        centroid=${sid}__\\${bname}_centroid_${params.nb_points}.trk\n        scil_compute_bundle_voxel_label_map.py \\$bundle \\${centroid} \\\n            ${sid}__\\${bname}_labels.nii.gz \\\n            --out_labels_npz ${sid}__\\${bname}_labels.npz \\\n            --out_distances_npz ${sid}__\\${bname}_distances.npz \\\n            --labels_color_dpp ${sid}__\\${bname}_labels.trk \\\n            --distances_color_dpp ${sid}__\\${bname}_distances.trk \\\n            --min_streamline_count ${params.min_streamline_count} \\\n            --min_voxel_count ${params.min_voxel_count}\n        done\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_centroids_for_label_and_distance_map"
        ],
        "nb_inputs": 1,
        "outputs": [
            "label_distance_maps_for_mean_std_per_point",
            "bundles_for_uniformize",
            "voxel_label_maps_for_volume",
            "voxel_label_map_for_lesion_load"
        ],
        "nb_outputs": 4,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Uniformize_Bundle": {
        "name_process": "Uniformize_Bundle",
        "string_process": "\nprocess Uniformize_Bundle {\n    input:\n    set sid, file(bundles) from bundles_for_uniformize\n\n    output:\n    set sid, \"*_uniformized.trk\" into bundles_for_coloring,\n             bundles_for_lesion_load,\n             bundles_for_mean_std, bundles_for_endpoints_map,\n             bundles_for_endpoints_metrics, bundles_for_centroid,\n             bundles_for_volume, bundles_for_streamline_count,\n             bundles_for_mean_std_per_point, bundles_for_length_stats\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list; do\n        # Uniformize the bundle orientation as well as simplifying\n        # filename convention\n        if [[ \\$bundle == *\"__\"* ]]; then\n            scil_uniformize_streamlines_endpoints.py \\$bundle \\\n                \\${bundle/_labels.trk/_uniformized.trk} --auto -f\n        else\n            scil_uniformize_streamlines_endpoints.py \\$bundle \\\n                ${sid}__\\${bundle/_labels.trk/_uniformized.trk} --auto -f\n        fi\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list; do\n        # Uniformize the bundle orientation as well as simplifying\n        # filename convention\n        if [[ \\$bundle == *\"__\"* ]]; then\n            scil_uniformize_streamlines_endpoints.py \\$bundle \\\n                \\${bundle/_labels.trk/_uniformized.trk} --auto -f\n        else\n            scil_uniformize_streamlines_endpoints.py \\$bundle \\\n                ${sid}__\\${bundle/_labels.trk/_uniformized.trk} --auto -f\n        fi\n    done\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_uniformize"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bundles_for_coloring",
            "bundles_for_lesion_load",
            "bundles_for_mean_std",
            "bundles_for_endpoints_map",
            "bundles_for_endpoints_metrics",
            "bundles_for_centroid",
            "bundles_for_volume",
            "bundles_for_streamline_count",
            "bundles_for_mean_std_per_point",
            "bundles_for_length_stats"
        ],
        "nb_outputs": 10,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Lesion_Load": {
        "name_process": "Lesion_Load",
        "string_process": "\nprocess Lesion_Load {\n    input:\n    set sid, file(lesion), file(bundles), file(label_maps) from\\\n        lesion_bundles_voxel_label_maps_for_lesion_load\n\n    output:\n    file \"${sid}__lesion_load.json\" into lesion_load_to_aggregate\n    file \"${sid}__lesion_load_per_point.json\" into lesion_load_per_point_to_aggregate\n    set sid, \"${sid}__lesion_load_per_point.json\" into lesion_load_per_point_for_plot\n    file \"${sid}__lesion_streamlines_stats.json\"\n    file \"${sid}__*_lesion_map.nii.gz\"\n    file \"${sid}__lesion_stats.json\"\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    mkdir streamlines_stats/\n    mkdir lesion_load/\n    mkdir lesion_load_per_point/\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        rm ${sid}__lesion_stats.json -f\n        mv ${sid}__\\${bname}_labels.nii.gz \\$bname.nii.gz\n        mv \\$bundle \\$bname.trk\n\n        scil_analyse_lesions_load.py $lesion lesion_load_per_point/\\$bname.json \\\n            --bundle_labels_map \\$bname.nii.gz \\\n            --out_lesion_atlas \"${sid}__\\${bname}_lesion_map.nii.gz\" \\\n            --min_lesion_vol $params.min_lesion_vol\n\n        scil_analyse_lesions_load.py $lesion lesion_load/\\$bname.json \\\n            --bundle \\$bname.trk --out_lesion_stats ${sid}__lesion_stats.json \\\n            --out_streamlines_stats streamlines_stats/\\$bname.json \\\n            --min_lesion_vol $params.min_lesion_vol\n    done\n\n    scil_merge_json.py ${sid}__lesion_stats.json ${sid}__lesion_stats.json \\\n        --remove_parent_key --add_parent_key ${sid} -f\n\n    cd streamlines_stats\n    scil_merge_json.py *.json ../${sid}__lesion_streamlines_stats.json \\\n        --add_parent_key ${sid}\n    \n    cd ../lesion_load\n    scil_merge_json.py *.json ../${sid}__lesion_load.json \\\n        --add_parent_key ${sid}\n    \n    cd ../lesion_load_per_point\n    scil_merge_json.py *.json ../${sid}__lesion_load_per_point.json \\\n        --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    mkdir streamlines_stats/\n    mkdir lesion_load/\n    mkdir lesion_load_per_point/\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        rm ${sid}__lesion_stats.json -f\n        mv ${sid}__\\${bname}_labels.nii.gz \\$bname.nii.gz\n        mv \\$bundle \\$bname.trk\n\n        scil_analyse_lesions_load.py $lesion lesion_load_per_point/\\$bname.json \\\n            --bundle_labels_map \\$bname.nii.gz \\\n            --out_lesion_atlas \"${sid}__\\${bname}_lesion_map.nii.gz\" \\\n            --min_lesion_vol $params.min_lesion_vol\n\n        scil_analyse_lesions_load.py $lesion lesion_load/\\$bname.json \\\n            --bundle \\$bname.trk --out_lesion_stats ${sid}__lesion_stats.json \\\n            --out_streamlines_stats streamlines_stats/\\$bname.json \\\n            --min_lesion_vol $params.min_lesion_vol\n    done\n\n    scil_merge_json.py ${sid}__lesion_stats.json ${sid}__lesion_stats.json \\\n        --remove_parent_key --add_parent_key ${sid} -f\n\n    cd streamlines_stats\n    scil_merge_json.py *.json ../${sid}__lesion_streamlines_stats.json \\\n        --add_parent_key ${sid}\n    \n    cd ../lesion_load\n    scil_merge_json.py *.json ../${sid}__lesion_load.json \\\n        --add_parent_key ${sid}\n    \n    cd ../lesion_load_per_point\n    scil_merge_json.py *.json ../${sid}__lesion_load_per_point.json \\\n        --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 43,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "lesion_bundles_voxel_label_maps_for_lesion_load"
        ],
        "nb_inputs": 1,
        "outputs": [
            "lesion_load_to_aggregate",
            "lesion_load_per_point_to_aggregate",
            "lesion_load_per_point_for_plot"
        ],
        "nb_outputs": 3,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Color_Bundle": {
        "name_process": "Color_Bundle",
        "string_process": "\nprocess Color_Bundle {\n    input:\n    set sid, file(bundles) from bundles_for_coloring\n\n    output:\n    file \"*_colored.trk\"\n\n    script:\n    def json_str = JsonOutput.toJson(params.colors)\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_assign_color_to_tractogram.py $bundles_list --dict_colors colors.json\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    def json_str = JsonOutput.toJson(params.colors)\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_assign_color_to_tractogram.py $bundles_list --dict_colors colors.json\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_coloring"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Length_Stats": {
        "name_process": "Bundle_Length_Stats",
        "string_process": "\nprocess Bundle_Length_Stats {\n    input:\n    set sid, file(bundles) from bundles_for_length_stats\n\n    output:\n    file \"${sid}__length_stats.json\" into bundles_length_stats_to_aggregate\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        scil_compute_streamlines_length_stats.py \\$bundle > \\$bname.json\n        done\n\n        scil_merge_json.py *.json ${sid}__length_stats.json --add_parent_key ${sid} \\\n            --keep_separate\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        scil_compute_streamlines_length_stats.py \\$bundle > \\$bname.json\n        done\n\n        scil_merge_json.py *.json ${sid}__length_stats.json --add_parent_key ${sid} \\\n            --keep_separate\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_length_stats"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bundles_length_stats_to_aggregate"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Endpoints_Map": {
        "name_process": "Bundle_Endpoints_Map",
        "string_process": "\nprocess Bundle_Endpoints_Map {\n    input:\n    set sid, file(bundles) from bundles_for_endpoints_map\n\n    output:\n    file \"${sid}__endpoints_map_raw.json\" into endpoints_maps_to_aggregate\n    set sid, \"*_endpoints_map_head.nii.gz\", \"*_endpoints_map_tail.nii.gz\" \\\n        into endpoints_maps_for_roi_stats\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n\n        scil_compute_endpoints_map.py \\$bname.trk \\\n            ${sid}__\\${bname}_endpoints_map_head.nii.gz \\\n            ${sid}__\\${bname}_endpoints_map_tail.nii.gz >\\\n            ${sid}__\\${bname}_endpoints_map_raw.json\n    done\n    scil_merge_json.py *_endpoints_map_raw.json ${sid}__endpoints_map_raw.json \\\n        --no_list --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n\n        scil_compute_endpoints_map.py \\$bname.trk \\\n            ${sid}__\\${bname}_endpoints_map_head.nii.gz \\\n            ${sid}__\\${bname}_endpoints_map_tail.nii.gz >\\\n            ${sid}__\\${bname}_endpoints_map_raw.json\n    done\n    scil_merge_json.py *_endpoints_map_raw.json ${sid}__endpoints_map_raw.json \\\n        --no_list --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_endpoints_map"
        ],
        "nb_inputs": 1,
        "outputs": [
            "endpoints_maps_to_aggregate",
            "endpoints_maps_for_roi_stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Metrics_Stats_In_Endpoints": {
        "name_process": "Bundle_Metrics_Stats_In_Endpoints",
        "string_process": "\nprocess Bundle_Metrics_Stats_In_Endpoints {\n    input:\n    set sid, file(metrics), file(endpoints_map_head), file(endpoints_map_tail)\\\n         from metrics_endpoints_for_roi_stats\n\n    output:\n    file \"${sid}__endpoints_metric_stats.json\" into endpoints_metric_stats_to_aggregate\n\n    script:\n    normalize_weights =\\\n        params.endpoints_metric_stats_normalize_weights ?\\\n            '--normalize_weights' : '--bin'\n    String map_list = endpoints_map_head.join(\", \").replace(',', '')\n    \"\"\"\n    shopt -s extglob\n    for map in $map_list;\n        do if [[ \\$map == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$map | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${map:\\$pos}\n            bname=\\$(basename \\$bname .nii.gz)\n        else\n            bname=\\$(basename \\$map .nii.gz)\n        fi\n        bname=\\${bname/_endpoints_map_head/}\n        mv \\$map \\${bname}_head.nii.gz\n        mv \\${map/_head/_tail} \\${bname}_tail.nii.gz\n        if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n            b_metrics=\"!(*afd*|*head*|*tail*).nii.gz \\${bname}_afd_metric.nii.gz\"\n        else\n            b_metrics=\"$metrics\"\n        fi\n\n        scil_compute_metrics_stats_in_ROI.py \\${bname}_head.nii.gz $normalize_weights\\\n            --metrics \\${b_metrics} > \\${bname}_head.json\n        scil_compute_metrics_stats_in_ROI.py \\${bname}_tail.nii.gz $normalize_weights\\\n            --metrics \\${b_metrics} > \\${bname}_tail.json\n    done\n\n    scil_merge_json.py *_tail.json *_head.json ${sid}__endpoints_metric_stats.json \\\n        --no_list --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    normalize_weights =\\\n        params.endpoints_metric_stats_normalize_weights ?\\\n            '--normalize_weights' : '--bin'\n    String map_list = endpoints_map_head.join(\", \").replace(',', '')\n    \"\"\"\n    shopt -s extglob\n    for map in $map_list;\n        do if [[ \\$map == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$map | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${map:\\$pos}\n            bname=\\$(basename \\$bname .nii.gz)\n        else\n            bname=\\$(basename \\$map .nii.gz)\n        fi\n        bname=\\${bname/_endpoints_map_head/}\n        mv \\$map \\${bname}_head.nii.gz\n        mv \\${map/_head/_tail} \\${bname}_tail.nii.gz\n        if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n            b_metrics=\"!(*afd*|*head*|*tail*).nii.gz \\${bname}_afd_metric.nii.gz\"\n        else\n            b_metrics=\"$metrics\"\n        fi\n\n        scil_compute_metrics_stats_in_ROI.py \\${bname}_head.nii.gz $normalize_weights\\\n            --metrics \\${b_metrics} > \\${bname}_head.json\n        scil_compute_metrics_stats_in_ROI.py \\${bname}_tail.nii.gz $normalize_weights\\\n            --metrics \\${b_metrics} > \\${bname}_tail.json\n    done\n\n    scil_merge_json.py *_tail.json *_head.json ${sid}__endpoints_metric_stats.json \\\n        --no_list --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "metrics_endpoints_for_roi_stats"
        ],
        "nb_inputs": 1,
        "outputs": [
            "endpoints_metric_stats_to_aggregate"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Endpoints_Metrics": {
        "name_process": "Bundle_Endpoints_Metrics",
        "string_process": "\nprocess Bundle_Endpoints_Metrics {\n    input:\n    set sid, file(bundle), file(metrics) from metrics_bundles_for_endpoints_metrics\n\n    output:\n    file \"*/*_endpoints_metric.nii.gz\"\n\n    when:\n    !params.skip_projection_endpoints_metrics\n\n    script:\n    \"\"\"\n    shopt -s extglob\n    bundle=$bundle\n    if [[ \\$bundle == *\"__\"* ]]; then\n        pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n        bname=\\${bundle:\\$pos}\n        bname=\\$(basename \\$bname .trk)\n    else\n        bname=\\$(basename \\$bundle .trk)\n    fi\n    bname=\\${bname/_uniformized/}\n    mkdir \\${bname}\n    if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n        b_metrics=\"!(*afd*).nii.gz \\${bname}_afd_metric.nii.gz\"\n    else\n        b_metrics=\"$metrics\"\n    fi\n\n    scil_compute_endpoints_metric.py \\$bundle \\${b_metrics} \\${bname}\n    cd \\${bname}\n    for i in *.nii.gz;\n    do\n    mv \"\\$i\" \"${sid}__\\$i\";\n    done\n    rename s/${sid}__${sid}__/${sid}__/ *\n\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n    shopt -s extglob\n    bundle=$bundle\n    if [[ \\$bundle == *\"__\"* ]]; then\n        pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n        bname=\\${bundle:\\$pos}\n        bname=\\$(basename \\$bname .trk)\n    else\n        bname=\\$(basename \\$bundle .trk)\n    fi\n    bname=\\${bname/_uniformized/}\n    mkdir \\${bname}\n    if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n        b_metrics=\"!(*afd*).nii.gz \\${bname}_afd_metric.nii.gz\"\n    else\n        b_metrics=\"$metrics\"\n    fi\n\n    scil_compute_endpoints_metric.py \\$bundle \\${b_metrics} \\${bname}\n    cd \\${bname}\n    for i in *.nii.gz;\n    do\n    mv \"\\$i\" \"${sid}__\\$i\";\n    done\n    rename s/${sid}__${sid}__/${sid}__/ *\n\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metrics_bundles_for_endpoints_metrics"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "!params.skip_projection_endpoints_metrics",
        "stub": ""
    },
    "Bundle_Mean_Std": {
        "name_process": "Bundle_Mean_Std",
        "string_process": "\nprocess Bundle_Mean_Std {\n    input:\n    set sid, file(metrics), file(bundles) from metrics_bundles_for_mean_std\n\n    output:\n    file \"${sid}__mean_std.json\" into mean_std_to_aggregate\n\n    script:\n    density_weighting =\\\n        params.mean_std_density_weighting ? '--density_weighting' : ''\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    shopt -s extglob\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n\n        if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n            b_metrics=\"!(*afd*).nii.gz \\${bname}_afd_metric.nii.gz\"\n        else\n            b_metrics=\"$metrics\"\n        fi\n        scil_compute_bundle_mean_std.py $density_weighting \\$bname.trk \\${b_metrics} >\\\n            \\${bname}.json\n    done\n    scil_merge_json.py *.json ${sid}__mean_std.json --no_list --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    density_weighting =\\\n        params.mean_std_density_weighting ? '--density_weighting' : ''\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    shopt -s extglob\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n\n        if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n            b_metrics=\"!(*afd*).nii.gz \\${bname}_afd_metric.nii.gz\"\n        else\n            b_metrics=\"$metrics\"\n        fi\n        scil_compute_bundle_mean_std.py $density_weighting \\$bname.trk \\${b_metrics} >\\\n            \\${bname}.json\n    done\n    scil_merge_json.py *.json ${sid}__mean_std.json --no_list --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "metrics_bundles_for_mean_std"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mean_std_to_aggregate"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Volume": {
        "name_process": "Bundle_Volume",
        "string_process": "\nprocess Bundle_Volume {\n    input:\n    set sid, file(bundles) from bundles_for_volume\n\n    output:\n    file \"${sid}__volume.json\" into volumes_to_aggregate\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n        scil_compute_bundle_volume.py \\$bname.trk > \\${bname}.json\n    done\n    scil_merge_json.py *.json ${sid}__volume.json --no_list --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n        scil_compute_bundle_volume.py \\$bname.trk > \\${bname}.json\n    done\n    scil_merge_json.py *.json ${sid}__volume.json --no_list --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_volume"
        ],
        "nb_inputs": 1,
        "outputs": [
            "volumes_to_aggregate"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Streamline_Count": {
        "name_process": "Bundle_Streamline_Count",
        "string_process": "\nprocess Bundle_Streamline_Count {\n    input:\n    set sid, file(bundles) from bundles_for_streamline_count\n\n    output:\n    file \"${sid}__streamline_count.json\" into streamline_counts_to_aggregate\n\n    script:\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n        scil_count_streamlines.py \\$bname.trk > \\${bname}.json\n    done\n    scil_merge_json.py *.json ${sid}__streamline_count.json --no_list \\\n        --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n        scil_count_streamlines.py \\$bname.trk > \\${bname}.json\n    done\n    scil_merge_json.py *.json ${sid}__streamline_count.json --no_list \\\n        --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "bundles_for_streamline_count"
        ],
        "nb_inputs": 1,
        "outputs": [
            "streamline_counts_to_aggregate"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Volume_Per_Label": {
        "name_process": "Bundle_Volume_Per_Label",
        "string_process": "\nprocess Bundle_Volume_Per_Label {\n    input:\n    set sid, file(voxel_label_maps) from voxel_label_maps_for_volume\n\n    output:\n    file \"${sid}__volume_per_label.json\" into volumes_per_label_to_aggregate\n\n    script:\n    String maps_list = voxel_label_maps.join(\", \").replace(',', '')\n    \"\"\"\n    for map in $maps_list;\n        do if [[ \\$map == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$map | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${map:\\$pos}\n            bname=\\$(basename \\$bname .nii.gz)\n        else\n            bname=\\$(basename \\$map .nii.gz)\n        fi\n        bname=\\${bname/_voxel_label_map/}\n\n        scil_compute_bundle_volume_per_label.py \\$map \\$bname --sort_keys >\\\n            \\${bname}.json\n        done\n    scil_merge_json.py *.json ${sid}__volume_per_label.json --no_list \\\n        --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    String maps_list = voxel_label_maps.join(\", \").replace(',', '')\n    \"\"\"\n    for map in $maps_list;\n        do if [[ \\$map == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$map | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${map:\\$pos}\n            bname=\\$(basename \\$bname .nii.gz)\n        else\n            bname=\\$(basename \\$map .nii.gz)\n        fi\n        bname=\\${bname/_voxel_label_map/}\n\n        scil_compute_bundle_volume_per_label.py \\$map \\$bname --sort_keys >\\\n            \\${bname}.json\n        done\n    scil_merge_json.py *.json ${sid}__volume_per_label.json --no_list \\\n        --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "voxel_label_maps_for_volume"
        ],
        "nb_inputs": 1,
        "outputs": [
            "volumes_per_label_to_aggregate"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Bundle_Mean_Std_Per_Point": {
        "name_process": "Bundle_Mean_Std_Per_Point",
        "string_process": "\nprocess Bundle_Mean_Std_Per_Point {\n    input:\n    set sid, file(metrics), file(bundles), file(label_maps), file(distance_maps) \\\n         from metrics_bundles_label_distance_maps_for_mean_std_per_point\n\n    output:\n    set sid, \"${sid}__mean_std_per_point.json\" into \\\n        mean_std_per_point_for_plot\n    file \"${sid}__mean_std_per_point.json\" into \\\n        mean_std_per_point_to_aggregate\n\n    script:\n    density_weighting =\\\n        params.mean_std_per_point_density_weighting ? '--density_weighting' : ''\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    shopt -s extglob\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n        label_map=${sid}__\\${bname}_labels.npz\n        distance_map=${sid}__\\${bname}_distances.npz\n\n        if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n            b_metrics=\"!(*afd*).nii.gz \\${bname}_afd_metric.nii.gz\"\n        else\n            b_metrics=\"$metrics\"\n        fi\n\n        scil_compute_bundle_mean_std_per_point.py \\$bname.trk \\$label_map \\$distance_map \\\n            \\${b_metrics} --sort_keys $density_weighting > \\$bname.json\n        done\n        scil_merge_json.py *.json ${sid}__mean_std_per_point.json --no_list \\\n            --add_parent_key ${sid}\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    density_weighting =\\\n        params.mean_std_per_point_density_weighting ? '--density_weighting' : ''\n    String bundles_list = bundles.join(\", \").replace(',', '')\n    \"\"\"\n    shopt -s extglob\n    for bundle in $bundles_list;\n        do if [[ \\$bundle == *\"__\"* ]]; then\n            pos=\\$((\\$(echo \\$bundle | grep -b -o __ | cut -d: -f1)+2))\n            bname=\\${bundle:\\$pos}\n            bname=\\$(basename \\$bname .trk)\n        else\n            bname=\\$(basename \\$bundle .trk)\n        fi\n        bname=\\${bname/_uniformized/}\n        mv \\$bundle \\$bname.trk\n        label_map=${sid}__\\${bname}_labels.npz\n        distance_map=${sid}__\\${bname}_distances.npz\n\n        if [ -f \"\\${bname}_afd_metric.nii.gz\" ]; then\n            b_metrics=\"!(*afd*).nii.gz \\${bname}_afd_metric.nii.gz\"\n        else\n            b_metrics=\"$metrics\"\n        fi\n\n        scil_compute_bundle_mean_std_per_point.py \\$bname.trk \\$label_map \\$distance_map \\\n            \\${b_metrics} --sort_keys $density_weighting > \\$bname.json\n        done\n        scil_merge_json.py *.json ${sid}__mean_std_per_point.json --no_list \\\n            --add_parent_key ${sid}\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "metrics_bundles_label_distance_maps_for_mean_std_per_point"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mean_std_per_point_for_plot",
            "mean_std_per_point_to_aggregate"
        ],
        "nb_outputs": 2,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Plot_Mean_Std_Per_Point": {
        "name_process": "Plot_Mean_Std_Per_Point",
        "string_process": "\nprocess Plot_Mean_Std_Per_Point {\n    input:\n    set sid, file(mean_std_per_point) from mean_std_per_point_for_plot\n\n    output:\n    set sid, \"*.png\"\n\n    script:\n    def json_str = JsonOutput.toJson(params.colors)\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_plot_mean_std_per_point.py $mean_std_per_point tmp_dir/ --dict_colors \\\n        colors.json\n    mv tmp_dir/* ./\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    def json_str = JsonOutput.toJson(params.colors)\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_plot_mean_std_per_point.py $mean_std_per_point tmp_dir/ --dict_colors \\\n        colors.json\n    mv tmp_dir/* ./\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mean_std_per_point_for_plot"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Plot_Lesions_Per_Point": {
        "name_process": "Plot_Lesions_Per_Point",
        "string_process": "\nprocess Plot_Lesions_Per_Point {\n    input:\n    set sid, file(lesion_per_point) from lesion_load_per_point_for_plot\n\n    output:\n    set sid, \"*.png\"\n\n    script:\n    def json_str = JsonOutput.toJson(params.colors)\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_merge_json.py $lesion_per_point tmp.json --recursive --average_last_layer\n    scil_plot_mean_std_per_point.py tmp.json tmp_dir/ --dict_colors \\\n        colors.json\n    mv tmp_dir/* ./\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    def json_str = JsonOutput.toJson(params.colors)\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_merge_json.py $lesion_per_point tmp.json --recursive --average_last_layer\n    scil_plot_mean_std_per_point.py tmp.json tmp_dir/ --dict_colors \\\n        colors.json\n    mv tmp_dir/* ./\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lesion_load_per_point_for_plot"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Lesion_Load": {
        "name_process": "Aggregate_All_Lesion_Load",
        "string_process": "\nprocess Aggregate_All_Lesion_Load {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_lesion_load_to_aggregate\n\n    output:\n    file \"lesion_load.json\"\n    file \"lesion_load.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons lesion_load.json --average_last_layer --recursive\n    scil_convert_json_to_xlsx.py lesion_load.json lesion_load.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons lesion_load.json --average_last_layer --recursive\n    scil_convert_json_to_xlsx.py lesion_load.json lesion_load.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_lesion_load_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Lesion_Load_Per_Point": {
        "name_process": "Aggregate_All_Lesion_Load_Per_Point",
        "string_process": "\nprocess Aggregate_All_Lesion_Load_Per_Point {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_lesion_load_per_point_to_aggregate\n\n    output:\n    file \"lesion_load_per_point.json\" into population_lesion_load_per_point\n    file \"lesion_load_per_point.xlsx\"\n\n    script:\n    String json_list = jsons.join(\", \").replace(',', '')\n    \"\"\"\n    for json in $json_list\n        do scil_merge_json.py \\$json \\${json/.json/_avg.json} --remove_parent_key --recursive --average_last_layer\n    done\n    scil_merge_json.py *_avg.json lesion_load_per_point.json  \\\n        --recursive\n    scil_convert_json_to_xlsx.py lesion_load_per_point.json lesion_load_per_point.xlsx \\\n        --stats_over_population\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    String json_list = jsons.join(\", \").replace(',', '')\n    \"\"\"\n    for json in $json_list\n        do scil_merge_json.py \\$json \\${json/.json/_avg.json} --remove_parent_key --recursive --average_last_layer\n    done\n    scil_merge_json.py *_avg.json lesion_load_per_point.json  \\\n        --recursive\n    scil_convert_json_to_xlsx.py lesion_load_per_point.json lesion_load_per_point.xlsx \\\n        --stats_over_population\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "all_lesion_load_per_point_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [
            "population_lesion_load_per_point"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Endpoints_Map": {
        "name_process": "Aggregate_All_Endpoints_Map",
        "string_process": "\nprocess Aggregate_All_Endpoints_Map {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_aggregate_endspoints_map\n\n    output:\n    file \"endpoints_map.json\"\n    file \"endpoints_map.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons endpoints_map.json --no_list\n    scil_convert_json_to_xlsx.py endpoints_map.json endpoints_map.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons endpoints_map.json --no_list\n    scil_convert_json_to_xlsx.py endpoints_map.json endpoints_map.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_aggregate_endspoints_map"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Endpoints_Metric_Stats": {
        "name_process": "Aggregate_All_Endpoints_Metric_Stats",
        "string_process": "\nprocess Aggregate_All_Endpoints_Metric_Stats {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_aggregate_all_endpoints_metric_stats\n\n    output:\n    file \"endpoints_metric_stats.json\"\n    file \"endpoints_metric_stats.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons endpoints_metric_stats.json --no_list\n    scil_convert_json_to_xlsx.py endpoints_metric_stats.json endpoints_metric_stats.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons endpoints_metric_stats.json --no_list\n    scil_convert_json_to_xlsx.py endpoints_metric_stats.json endpoints_metric_stats.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_aggregate_all_endpoints_metric_stats"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Bundle_Length_Stats": {
        "name_process": "Aggregate_All_Bundle_Length_Stats",
        "string_process": "\nprocess Aggregate_All_Bundle_Length_Stats {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_bundle_length_stats_to_aggretate\n\n    output:\n    file \"length_stats.json\"\n    file \"length_stats.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons length_stats.json --no_list\n    scil_convert_json_to_xlsx.py length_stats.json length_stats.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons length_stats.json --no_list\n    scil_convert_json_to_xlsx.py length_stats.json length_stats.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_bundle_length_stats_to_aggretate"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_mean_std": {
        "name_process": "Aggregate_All_mean_std",
        "string_process": "\nprocess Aggregate_All_mean_std {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_mean_std_to_aggregate\n\n    output:\n    file \"mean_std.json\"\n    file \"mean_std.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons mean_std.json --no_list\n    scil_convert_json_to_xlsx.py mean_std.json mean_std.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons mean_std.json --no_list\n    scil_convert_json_to_xlsx.py mean_std.json mean_std.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_mean_std_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Volume": {
        "name_process": "Aggregate_All_Volume",
        "string_process": "\nprocess Aggregate_All_Volume {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_volumes_to_aggregate\n\n    output:\n    file \"volumes.json\"\n    file \"volumes.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons volumes.json --no_list\n    scil_convert_json_to_xlsx.py volumes.json volumes.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons volumes.json --no_list\n    scil_convert_json_to_xlsx.py volumes.json volumes.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_volumes_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Streamline_Count": {
        "name_process": "Aggregate_All_Streamline_Count",
        "string_process": "\nprocess Aggregate_All_Streamline_Count {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_streamline_counts_to_aggregate\n\n    output:\n    file \"streamline_count.json\"\n    file \"streamline_count.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons streamline_count.json --no_list\n    scil_convert_json_to_xlsx.py streamline_count.json streamline_count.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons streamline_count.json --no_list\n    scil_convert_json_to_xlsx.py streamline_count.json streamline_count.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_streamline_counts_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Volume_Per_Label": {
        "name_process": "Aggregate_All_Volume_Per_Label",
        "string_process": "\nprocess Aggregate_All_Volume_Per_Label {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_volumes_per_label_to_aggregate\n\n    output:\n    file \"volume_per_label.json\"\n    file \"volume_per_label.xlsx\"\n\n    script:\n    \"\"\"\n    scil_merge_json.py $jsons volume_per_label.json --no_list\n    scil_convert_json_to_xlsx.py volume_per_label.json volume_per_label.xlsx\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    scil_merge_json.py $jsons volume_per_label.json --no_list\n    scil_convert_json_to_xlsx.py volume_per_label.json volume_per_label.xlsx\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_volumes_per_label_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Aggregate_All_Mean_Std_Per_Point": {
        "name_process": "Aggregate_All_Mean_Std_Per_Point",
        "string_process": "\nprocess Aggregate_All_Mean_Std_Per_Point {\n    tag = { \"Statistics\" }\n    publishDir = params.statsPublishDir\n\n    input:\n    file jsons from all_mean_std_per_point_to_aggregate\n\n    output:\n    file \"mean_std_per_point.json\" into population_mean_std_per_point\n    file \"mean_std_per_point.xlsx\"\n\n    script:\n    String json_list = jsons.join(\", \").replace(',', '')\n    \"\"\"\n    for json in $json_list\n        do scil_merge_json.py \\$json \\${json/.json/_avg.json} --remove_parent_key --recursive\n    done\n    scil_merge_json.py *_avg.json mean_std_per_point.json  \\\n        --recursive\n    scil_convert_json_to_xlsx.py mean_std_per_point.json mean_std_per_point.xlsx \\\n        --stats_over_population\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    String json_list = jsons.join(\", \").replace(',', '')\n    \"\"\"\n    for json in $json_list\n        do scil_merge_json.py \\$json \\${json/.json/_avg.json} --remove_parent_key --recursive\n    done\n    scil_merge_json.py *_avg.json mean_std_per_point.json  \\\n        --recursive\n    scil_convert_json_to_xlsx.py mean_std_per_point.json mean_std_per_point.xlsx \\\n        --stats_over_population\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "all_mean_std_per_point_to_aggregate"
        ],
        "nb_inputs": 1,
        "outputs": [
            "population_mean_std_per_point"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Statistics\" }",
            "publishDir = params.statsPublishDir"
        ],
        "when": "",
        "stub": ""
    },
    "Plot_Population_Mean_Std_Per_Point": {
        "name_process": "Plot_Population_Mean_Std_Per_Point",
        "string_process": "\nprocess Plot_Population_Mean_Std_Per_Point {\n    tag = { \"Plots\" }\n    publishDir = params.plotPublishDir\n\n    input:\n    file(json_a) from population_mean_std_lesion_per_point\n\n    output:\n    file \"*.png\"\n\n    script:\n    def json_str = JsonOutput.toJson(params.colors)\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_plot_mean_std_per_point.py $json_a tmp_dir/ --dict_colors colors.json \\\n        --stats_over_population\n    mv tmp_dir/* ./\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    def json_str = JsonOutput.toJson(params.colors)\n    \"\"\"\n    echo '$json_str' >> colors.json\n    scil_plot_mean_std_per_point.py $json_a tmp_dir/ --dict_colors colors.json \\\n        --stats_over_population\n    mv tmp_dir/* ./\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "population_mean_std_lesion_per_point"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__tractometry_flow",
        "directive": [
            "tag = { \"Plots\" }",
            "publishDir = params.plotPublishDir"
        ],
        "when": "",
        "stub": ""
    }
}
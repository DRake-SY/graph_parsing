{
    "OPERATION_1": {
        "string": "LIB_RUN_LOCAL_FASTQS = Channel.from(\n  action.call(params, 'input', 'raw_fastq_dir', 'map').collect {k, v -> [k,v]})",
        "origin": [],
        "gives": [
            [
                "LIB_RUN_LOCAL_FASTQS",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "TRANS_FA = Channel.fromPath(action.call(params, 'fasta', 'transcript_file', 'file'))\n\t.ifEmpty { exit 1, \"Index not found: \" + action.call(params, 'fasta', 'transcript_file', 'file')}",
        "origin": [
            [
                "action.call(params, 'fasta', 'transcript_file', 'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "TRANS_FA",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "GENOME_FA = Channel.fromPath(action.call(params, 'fasta', 'genome_file', 'file'))\n\t.ifEmpty { exit 1, \"Index not found: \" + action.call(params, 'fasta', 'genome_file', 'file')}",
        "origin": [
            [
                "action.call(params, 'fasta', 'genome_file', 'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "GENOME_FA",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "GTF = Channel.fromPath(action.call(params, 'annotation', 'gtf_file', 'file'))\n\t.ifEmpty { exit 1, \"Index not found: \" + action.call(params, 'annotation', 'gtf_file', 'file')}",
        "origin": [
            [
                "action.call(params, 'annotation', 'gtf_file', 'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "GTF",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "bamIndex_tool = Channel.from(action.call(params, 'tools', 'samtools_sambamba_string', 'string'))",
        "origin": [],
        "gives": [
            [
                "bamIndex_tool",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "STAR_INDEX = Channel.fromPath(\"${idx_filename}\")\n\t\t\t.ifEmpty { exit 1, \"Index not found: ${idx_filename}\" }",
        "origin": [
            [
                "\"${idx_filename}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "STAR_INDEX",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "BOWTIE2_INDEX = Channel.fromPath(\"${idx_filename}/*\")\n\t\t\t.ifEmpty { exit 1, \"Index not found: ${idx_filename}\" }\n\t\t\t.collect()",
        "origin": [
            [
                "\"${idx_filename}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "BOWTIE2_INDEX",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "SALMON_INDEX = Channel.fromPath(\"${idx_filename}\")\n\t\t\t.ifEmpty { exit 1, \"Index not found: ${idx_filename}\" }",
        "origin": [
            [
                "\"${idx_filename}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "SALMON_INDEX",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "LIB_RUN_LOCAL_FASTQS\n  .map { v -> [v[0], v[1].collect{file(it)}] }\n  .into {FASTQC_FQ; SALMON_FQ; STAR_FQ; TOPHAT_FQ; TEST_FQ}",
        "origin": [
            [
                "LIB_RUN_LOCAL_FASTQS",
                "P"
            ]
        ],
        "gives": [
            [
                "FASTQC_FQ",
                "P"
            ],
            [
                "SALMON_FQ",
                "P"
            ],
            [
                "STAR_FQ",
                "P"
            ],
            [
                "TOPHAT_FQ",
                "P"
            ],
            [
                "TEST_FQ",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "TRANS_FA.into(1)",
        "origin": [
            [
                "TRANS_FA",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "STAR_GENOME_FA, BOWTIE2_GENOME_FA,\n\tTOPHAT_GENOME_FA, PICARD_ALIGN_GENOME_FA,\n\tPICARD_SEQ_GENOME_FA, CHRSIZE_FA = GENOME_FA.into(6)",
        "origin": [
            [
                "GENOME_FA",
                "P"
            ]
        ],
        "gives": [
            [
                "STAR_GENOME_FA",
                "P"
            ],
            [
                "BOWTIE2_GENOME_FA",
                "P"
            ],
            [
                "TOPHAT_GENOME_FA",
                "P"
            ],
            [
                "PICARD_ALIGN_GENOME_FA",
                "P"
            ],
            [
                "PICARD_SEQ_GENOME_FA",
                "P"
            ],
            [
                "CHRSIZE_FA",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "STAR_GTF, TOPHAT_GTF, REFFLAT_GTF, RRNA_GTF, CNT_GTF = GTF.into(5)",
        "origin": [
            [
                "GTF",
                "P"
            ]
        ],
        "gives": [
            [
                "STAR_GTF",
                "P"
            ],
            [
                "TOPHAT_GTF",
                "P"
            ],
            [
                "REFFLAT_GTF",
                "P"
            ],
            [
                "RRNA_GTF",
                "P"
            ],
            [
                "CNT_GTF",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "STAR_BAM_INDEX_TOOL, TOPHAT_BAM_INDEX_TOOL = bamIndex_tool.into(2)",
        "origin": [
            [
                "bamIndex_tool",
                "P"
            ]
        ],
        "gives": [
            [
                "STAR_BAM_INDEX_TOOL",
                "P"
            ],
            [
                "TOPHAT_BAM_INDEX_TOOL",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "STAR_BAM\n\t.mix(TOPHAT_BAM)\n\t.into {BAM_2CNT; BAM_2ALIGN_STATS; BAM_2SEQ_STATS; BAM_TEST}",
        "origin": [
            [
                "STAR_BAM",
                "P"
            ],
            [
                "TOPHAT_BAM",
                "P"
            ]
        ],
        "gives": [
            [
                "BAM_2CNT",
                "P"
            ],
            [
                "BAM_2ALIGN_STATS",
                "P"
            ],
            [
                "BAM_2SEQ_STATS",
                "P"
            ],
            [
                "BAM_TEST",
                "P"
            ]
        ]
    }
}
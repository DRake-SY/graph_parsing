{
    "OPERATION_1": {
        "string": "UNIQUE_MATRIX_TYPES = Channel.of(\n\t\t\t\tgarnett_matrix_type,\n\t                        scmap_cluster_matrix_type,\n\t                        scmap_cell_matrix_type,\n\t                        scpred_matrix_type)\n\t                    .filter{ it != null }\n\t                    .unique()",
        "origin": [
            [
                "garnett_matrix_type,\n\t                        scmap_cluster_matrix_type,\n\t                        scmap_cell_matrix_type,\n\t                        scpred_matrix_type",
                "V"
            ]
        ],
        "gives": [
            [
                "UNIQUE_MATRIX_TYPES",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "IMPORT_PARAMS = Channel\n\t                .fromPath(params.data_import.training_datasets)\n\t                .splitCsv(header:false, sep:\",\")\n\t                .combine(UNIQUE_MATRIX_TYPES)",
        "origin": [
            [
                "UNIQUE_MATRIX_TYPES",
                "P"
            ],
            [
                "params.data_import.training_datasets",
                "A"
            ]
        ],
        "gives": [
            [
                "IMPORT_PARAMS",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "MANUAL_INPUT_DATA = Channel.fromPath(\"${params.input_data}/*\")",
        "origin": [
            [
                "\"${params.input_data}/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "MANUAL_INPUT_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "BARCODE_COL = Channel.from(params.metadata.query_barcode_col_name).first()",
        "origin": [
            [
                "params.metadata.query_barcode_col_name",
                "V"
            ]
        ],
        "gives": [
            [
                "BARCODE_COL",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "CELL_LABEL_COL = Channel.from(params.metadata.query_label_col_name).first()",
        "origin": [
            [
                "params.metadata.query_label_col_name",
                "V"
            ]
        ],
        "gives": [
            [
                "CELL_LABEL_COL",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "GARNETT_OUTPUT = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "GARNETT_OUTPUT",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "SCMAP_CELL_OUTPUT = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCMAP_CELL_OUTPUT",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "SCMAP_CLUST_OUTPUT = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCMAP_CLUST_OUTPUT",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "SCPRED_OUTPUT = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCPRED_OUTPUT",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "TRAINING_DATA_UNMELT.set{ TRAINING_DATA_PROCESSED }",
        "origin": [
            [
                "TRAINING_DATA_UNMELT",
                "P"
            ]
        ],
        "gives": [
            [
                "TRAINING_DATA_PROCESSED",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "TRAINING_DATA.set{ TRAINING_DATA_PROCESSED }",
        "origin": [
            [
                "TRAINING_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "TRAINING_DATA_PROCESSED",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "TRAINING_DATA_PROCESSED.into{\n\t    GARNETT_DATA\n\t    SCMAP_CELL_DATA\n\t    SCMAP_CLUSTER_DATA\n\t    SCPRED_DATA\n\t}",
        "origin": [
            [
                "TRAINING_DATA_PROCESSED",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "GARNETT_FULL_DATA = GARNETT_DATA.merge(N_CLUST)",
        "origin": [
            [
                "GARNETT_DATA",
                "P"
            ],
            [
                "N_CLUST",
                "P"
            ]
        ],
        "gives": [
            [
                "GARNETT_FULL_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "MANUAL_INPUT_DATA.map{it -> tuple(it, it.getBaseName().toString().split('\\\\.')[0], it.getBaseName().toString().split('\\\\.')[2] ) }.set{ZIP_FILES}",
        "origin": [
            [
                "MANUAL_INPUT_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "ZIP_FILES",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "ZIP_FILES.groupTuple(by:[1, 2]).map{it -> tuple(it[0][0], it[0][1], it[1], it[2]) }.set{GROUPED_DATA}",
        "origin": [
            [
                "ZIP_FILES",
                "P"
            ]
        ],
        "gives": [
            [
                "GROUPED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "MARKERS.map{it -> it.getBaseName().toString().split('\\\\_')[2] }.first().set{N_CLUST}",
        "origin": [
            [
                "MARKERS",
                "P"
            ]
        ],
        "gives": [
            [
                "N_CLUST",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "DATA.into{\n\t    GARNETT_DATA\n\t    SCMAP_CELL_DATA\n\t    SCMAP_CLUSTER_DATA\n\t    SCPRED_DATA\n\t}",
        "origin": [
            [
                "DATA",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_18": {
        "string": "GARNETT_FULL_DATA = GARNETT_DATA.merge(N_CLUST)",
        "origin": [
            [
                "GARNETT_DATA",
                "P"
            ],
            [
                "N_CLUST",
                "P"
            ]
        ],
        "gives": [
            [
                "GARNETT_FULL_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "GARNETT_FILTERED_DATA = GARNETT_FULL_DATA.filter{ it[5] == params.garnett.matrix_type }",
        "origin": [
            [
                "GARNETT_FULL_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "GARNETT_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "SCMAP_CELL_FILTERED_DATA = SCMAP_CELL_DATA.filter{ it[5] == params.scmap_cell.matrix_type }",
        "origin": [
            [
                "SCMAP_CELL_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SCMAP_CELL_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "SCMAP_CLUSTER_FILTERED_DATA = SCMAP_CLUSTER_DATA.filter{ it[5] == params.scmap_cluster.matrix_type }",
        "origin": [
            [
                "SCMAP_CLUSTER_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SCMAP_CLUSTER_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "SCPRED_FILTERED_DATA = SCPRED_DATA.filter{ it[5] == params.scpred.matrix_type }",
        "origin": [
            [
                "SCPRED_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "SCPRED_FILTERED_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "ALL_RESULTS = GARNETT_OUTPUT\n    .concat(SCMAP_CLUST_OUTPUT)\n    .concat(SCMAP_CELL_OUTPUT)\n    .concat(SCPRED_OUTPUT)",
        "origin": [
            [
                "GARNETT_OUTPUT",
                "P"
            ],
            [
                "SCMAP_CLUST_OUTPUT",
                "P"
            ],
            [
                "SCMAP_CELL_OUTPUT",
                "P"
            ],
            [
                "SCPRED_OUTPUT",
                "P"
            ]
        ],
        "gives": [
            [
                "ALL_RESULTS",
                "P"
            ]
        ]
    }
}
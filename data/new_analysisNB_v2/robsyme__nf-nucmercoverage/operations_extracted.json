{
    "OPERATION_1": {
        "string": "refs = Channel.fromPath(params.refs).map{[it.getParent().getBaseName(), it]}",
        "origin": [
            [
                "params.refs",
                "A"
            ]
        ],
        "gives": [
            [
                "refs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "qrys = Channel.fromPath(params.qrys).map{[it.getParent().getBaseName(), it]}",
        "origin": [
            [
                "params.qrys",
                "A"
            ]
        ],
        "gives": [
            [
                "qrys",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "refs\n.tap { genomes1 }\n.combine(qrys)\n.filter{ it[0] != it[2] }\n.tap { genomePairs }",
        "origin": [
            [
                "refs",
                "P"
            ],
            [
                "qrys",
                "P"
            ]
        ],
        "gives": [
            [
                "genomes1",
                "P"
            ],
            [
                "genomePairs",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "genomeCoverages\n.groupTuple()\n.set { plottingInputs }",
        "origin": [
            [
                "genomeCoverages",
                "P"
            ]
        ],
        "gives": [
            [
                "plottingInputs",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "outputSVGs.println()",
        "origin": [
            [
                "outputSVGs",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "Channel.fromPath(\"$baseDir/assets/where_are_my_files.txt\")\n       .into{ch_where_trim_galore; ch_where_star; ch_where_hisat2; ch_where_hisat2_sort}",
        "origin": [
            [
                "\"$baseDir/assets/where_are_my_files.txt\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_where_trim_galore",
                "P"
            ],
            [
                "ch_where_star",
                "P"
            ],
            [
                "ch_where_hisat2",
                "P"
            ],
            [
                "ch_where_hisat2_sort",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .into { gtfFile }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtfFile",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n        .fromPath(params.gff)\n        .ifEmpty { exit 1, \"GFF annotation file not found: ${params.gff}\" }\n        .into { gffFile }",
        "origin": [
            [
                "params.gff",
                "A"
            ]
        ],
        "gives": [
            [
                "gffFile",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "reads_ch = Channel.fromFilePairs(params.reads)",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "newSampleSheet\n  .splitCsv(header:true)\n  .map { row-> tuple(row.number, file(row.R1), file(row.R2), row.isolate) }\n  .set { newSampleChannel }",
        "origin": [
            [
                "newSampleSheet",
                "P"
            ]
        ],
        "gives": [
            [
                "newSampleChannel",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "newSampleSheetFastQC\n  .splitCsv(header:true)\n  .map { row-> tuple(row.number, file(row.R1), file(row.R2), row.isolate) }\n  .set { newSampleChannelFastQC }",
        "origin": [
            [
                "newSampleSheetFastQC",
                "P"
            ]
        ],
        "gives": [
            [
                "newSampleChannelFastQC",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "_fastqc.{zip,html}\" into fastqc_results",
        "origin": [
            [
                "_fastqc",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_10": {
        "string": "_fastqc.{zip,html}\" into trimgalore_fastqc_reports",
        "origin": [
            [
                "_fastqc",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "gtf_featureCounts.collect()",
        "origin": [
            [
                "gtf_featureCounts",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "fastqc_results.collect().ifEmpty([])",
        "origin": [
            [
                "fastqc_results",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "trimgalore_results.collect()",
        "origin": [
            [
                "trimgalore_results",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "Channel.fromPath( params.bams)\n         .ifEmpty { error \"Cannot find any path matching: ${params.bams}\" }\n         .map { it -> [it.name -  ~/\\.list/, it] }\n         .set { input }",
        "origin": [
            [
                "params.bams",
                "A"
            ]
        ],
        "gives": [
            [
                "input",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "input.into{ bams_ch; bams_list1_ch; bams_list2_ch }",
        "origin": [
            [
                "input",
                "P"
            ]
        ],
        "gives": [
            [
                "bams_ch",
                "P"
            ],
            [
                "bams_list1_ch",
                "P"
            ],
            [
                "bams_list2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "GL_ch.into { GL_ch1; GL_ch2 }",
        "origin": [
            [
                "GL_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "GL_ch1",
                "P"
            ],
            [
                "GL_ch2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "admixture_ch.join( bams_list2_ch, by: 0 )\n    .set { admix_comb }",
        "origin": [
            [
                "admixture_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "admix_comb",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "covariance_ch.combine( bams_list1_ch, by: 0 )\n    .set { covariance_comb }",
        "origin": [
            [
                "covariance_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "covariance_comb",
                "P"
            ]
        ]
    }
}
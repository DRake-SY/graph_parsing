{
    "supernova_full": {
        "name_process": "supernova_full",
        "string_process": " process supernova_full {\n        tag \"${id}\"\n        label \"supernova\"\n        publishDir \"${params.outdir}/supernova/\", mode: 'copy'\n\n        input:\n        set val(id), val(fastqs), val(tenx_options), val(supernova_options) from supernova_input\n\n        output:\n        set val(id), file(\"${id}/*\") into supernova_results, supernova_results2\n\n        script:\n        \"\"\"\n        supernova run --id=${id} --fastqs=${fastqs} ${tenx_options} ${supernova_options}\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        supernova run --id=${id} --fastqs=${fastqs} ${tenx_options} ${supernova_options}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "supernova_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "supernova_results",
            "supernova_results2"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "tag \"${id}\"",
            "label \"supernova\"",
            "publishDir \"${params.outdir}/supernova/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "supernova": {
        "name_process": "supernova",
        "string_process": " process supernova {\n        tag \"${id}\"\n        label \"supernova\"\n        publishDir \"${params.outdir}/supernova/\", mode: 'copy'\n\n        input:\n        set val(id), val(fastqs), val(tenx_options), val(supernova_options) from supernova_input\n\n        output:\n        set val(id), file(\"${id}_supernova\") into supernova_results, supernova_results2\n\n        script:\n                                                                               \n                                                                                   \n                                    \n        \"\"\"\n        supernova run --id=${id} --fastqs=${fastqs} ${tenx_options} ${supernova_options}\n        rsync -rav --include=\"_*\" --include=\"*.tgz\" --include=\"outs/\" --include=\"outs/*.*\" \\\n          --include=\"assembly/\" --include=\"stats/***\" --include=\"logs/***\" --include=\"a.base/\" \\\n          --include=\"a.base/\" --include=\"a.hbx\" --include=\"a.inv\" --include=\"final/***\" --include=\"gang\" \\\n          --include=\"micro\"  --include=\"a.hbx\" --include=\"a.inv\" --include=\"final/***\" \\\n          --exclude=\"*\" \"${id}/\" ${id}_supernova\n        \"\"\"\n    }",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        supernova run --id=${id} --fastqs=${fastqs} ${tenx_options} ${supernova_options}\n        rsync -rav --include=\"_*\" --include=\"*.tgz\" --include=\"outs/\" --include=\"outs/*.*\" \\\n          --include=\"assembly/\" --include=\"stats/***\" --include=\"logs/***\" --include=\"a.base/\" \\\n          --include=\"a.base/\" --include=\"a.hbx\" --include=\"a.inv\" --include=\"final/***\" --include=\"gang\" \\\n          --include=\"micro\"  --include=\"a.hbx\" --include=\"a.inv\" --include=\"final/***\" \\\n          --exclude=\"*\" \"${id}/\" ${id}_supernova\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "supernova_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "supernova_results",
            "supernova_results2"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "tag \"${id}\"",
            "label \"supernova\"",
            "publishDir \"${params.outdir}/supernova/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "supernova_mkoutput": {
        "name_process": "supernova_mkoutput",
        "string_process": "\nprocess supernova_mkoutput {\n    tag \"${id}\"\n    label \"supernova\"\n    publishDir \"${params.outdir}/assemblies/\", mode: 'copy'\n\n    input:\n    set val(id), file(supernova_folder) from supernova_results\n\n    output:\n    set val(id), file(\"${id}.fasta\") into supernova_asm1, supernova_asm2\n    file \"${id}.phased.fasta\"\n\n    script:\n    \"\"\"\n    supernova mkoutput --asmdir=${id}_supernova/outs/assembly --outprefix=${id} --style=pseudohap --minsize=${params.minsize} --nozip\n    supernova mkoutput --asmdir=${id}_supernova/outs/assembly --outprefix=${id}.phased --style=megabubbles --minsize=${params.minsize} --nozip\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    supernova mkoutput --asmdir=${id}_supernova/outs/assembly --outprefix=${id} --style=pseudohap --minsize=${params.minsize} --nozip\n    supernova mkoutput --asmdir=${id}_supernova/outs/assembly --outprefix=${id}.phased --style=megabubbles --minsize=${params.minsize} --nozip\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "supernova_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "supernova_asm1",
            "supernova_asm2"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "tag \"${id}\"",
            "label \"supernova\"",
            "publishDir \"${params.outdir}/assemblies/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast {\n    tag \"${id}\"\n    publishDir \"${params.outdir}/quast/${id}\", mode: 'copy'\n\n    input:\n    set val(id), file(asm) from supernova_asm1\n\n    output:\n    file(\"quast_results/latest/*\") into quast_results\n\n    script:\n    def size_parameter = params.genomesize ? \"--est-ref-size ${params.genomesize}\" : \"\"\n    \"\"\"\n    quast.py ${size_parameter} --threads ${task.cpus} ${asm}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    def size_parameter = params.genomesize ? \"--est-ref-size ${params.genomesize}\" : \"\"\n    \"\"\"\n    quast.py ${size_parameter} --threads ${task.cpus} ${asm}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "supernova_asm1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "quast_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/quast/${id}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n    tag \"${id}\"\n    publishDir \"${params.outdir}/busco/\", mode: 'copy'\n\n    input:\n    set val(id), file(asm) from supernova_asm2\n    file(augustus_archive) from Channel.fromPath(\"$baseDir/misc/augustus_config.tar.bz2\")\n\n    output:\n    file (\"run_${id}/*.{txt,tsv}\") into busco_results\n\n    script:\n    \"\"\"\n    tar xfj ${augustus_archive}\n    export AUGUSTUS_CONFIG_PATH=augustus_config/\n    run_BUSCO.py -i ${asm} -o ${id} -c ${task.cpus} -m genome -l ${buscoPath}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    tar xfj ${augustus_archive}\n    export AUGUSTUS_CONFIG_PATH=augustus_config/\n    run_BUSCO.py -i ${asm} -o ${id} -c ${task.cpus} -m genome -l ${buscoPath}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "supernova_asm2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "busco_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/busco/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "get_supernova_version": {
        "name_process": "get_supernova_version",
        "string_process": "\nprocess get_supernova_version {\n    label \"supernova\"\n    output:\n    file(\"v_supernova.txt\") into v_supernova\n\n    script:\n    \"\"\"\n    supernova run --version > v_supernova.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n    supernova run --version > v_supernova.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "v_supernova"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "label \"supernova\""
        ],
        "when": "",
        "stub": ""
    },
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy',\n        saveAs: { filename ->\n            if (filename.indexOf(\".csv\") > 0) filename\n            else null\n        }\n    input:\n      file \"v_supernova.txt\" from v_supernova\n    output:\n      file \"software_versions_mqc.yaml\" into software_versions_yaml\n      file \"software_versions.csv\"\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    quast.py -v &> v_quast.txt\n    multiqc --version > v_multiqc.txt\n    run_BUSCO.py -v > v_busco.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    quast.py -v &> v_quast.txt\n    multiqc --version > v_multiqc.txt\n    run_BUSCO.py -v > v_busco.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "v_supernova"
        ],
        "nb_inputs": 1,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/multiqc\", mode: 'copy'\n\n    input:\n    file ('supernova/') from supernova_results2.collect()\n    file ('busco/') from busco_results.collect()\n    file ('quast/') from quast_results.collect()\n    file ('software_versions/') from software_versions_yaml.toList()\n    file(mqc_config) from Channel.fromPath(\"${params.multiqc_config}\")\n\n    output:\n    file \"*multiqc_report.html\"\n    file \"*_data\"\n\n    script:\n    \"\"\"\n    multiqc -i ${custom_runName} -f -s  --config ${mqc_config} .\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    multiqc -i ${custom_runName} -f -s  --config ${mqc_config} .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "supernova_results2",
            "busco_results",
            "quast_results",
            "software_versions_yaml"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "publishDir \"${params.outdir}/multiqc\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file output_docs from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    markdown_to_html.r $output_docs results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    markdown_to_html.r $output_docs results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__neutronstar",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
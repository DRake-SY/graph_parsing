{
    "OPERATION_1": {
        "string": "bam = Channel\n    .fromPath(\"${params.input_folder}/${params.bam_file_prefix}.bam\")\n    .ifEmpty { exit 1, \"${params.input_folder}/${params.bam_file_prefix}.bam not found.\\nPlease specify --input_folder option (--input_folder bamfolder)\"}\n    .map { bam -> tuple(bam.simpleName, bam) }",
        "origin": [
            [
                "\"${params.input_folder}/${params.bam_file_prefix}.bam\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bam",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "bai = Channel\n    .fromPath(\"${params.input_folder}/${params.bam_file_prefix}*.bai\")\n    .ifEmpty { exit 1, \"${params.input_folder}/${params.bam_file_prefix}*.bai not found.\\nPlease specify ensure that your BAM index(es) are in your input_folder\"}\n    .map { bai -> tuple(bai.simpleName, bai) }",
        "origin": [
            [
                "\"${params.input_folder}/${params.bam_file_prefix}*.bai\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bai",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ref = Channel\n\t\t.fromPath(params.ref)\n\t\t.ifEmpty { exit 1, \"${params.ref} not found.\\nPlease specify --ref option (--ref fastafile)\"}",
        "origin": [
            [
                "params.ref",
                "A"
            ]
        ],
        "gives": [
            [
                "ref",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "sonic = Channel\n    .fromPath(params.sonic)\n    .ifEmpty { exit 1, \"${params.sonic} not found.\\nPlease specify --sonic option (--sonic sonicfile)\"}",
        "origin": [
            [
                "params.sonic",
                "A"
            ]
        ],
        "gives": [
            [
                "sonic",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "completeChannel = bam.combine(bai, by: 0)",
        "origin": [
            [
                "bam",
                "P"
            ]
        ],
        "gives": [
            [
                "completeChannel",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n    .fromFilePairs( params.reads )\n    .ifEmpty { error \"Cannot find any reads matching: ${params.reads}\" }\n    .set { samples_ch }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "samples_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath( params.samplesheet )\n    .ifEmpty { error \"Cannot find any sample sheet matching: ${params.samplesheet}\" }\n    .set { samplesheet_ch }",
        "origin": [
            [
                "params.samplesheet",
                "A"
            ]
        ],
        "gives": [
            [
                "samplesheet_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath( params.runparams )\n    .ifEmpty { error \"Cannot find any runparameters file matching: ${params.runparams}\" }\n    .set { runparams_ch }",
        "origin": [
            [
                "params.runparams",
                "A"
            ]
        ],
        "gives": [
            [
                "runparams_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromPath( params.phmm )\n                         \n        .set { phmm_ch }",
        "origin": [
            [
                "params.phmm",
                "A"
            ]
        ],
        "gives": [
            [
                "phmm_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "phmm_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "phmm_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "index_count = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "index_count",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "undetermined_counts = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "undetermined_counts",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "exact_to_combine = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "exact_to_combine",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "blast_to_combine = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "blast_to_combine",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "taxtab_to_output = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "taxtab_to_output",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "bootstrapFinal = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "bootstrapFinal",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "filtReadsErrKey = filtReadsErr.collect().flatten().map {\n        file ->\n        def key = file.name.toString().tokenize('_').get(0)\n        return tuple(key, file)\n     }.groupTuple()",
        "origin": [
            [
                "filtReadsErr",
                "P"
            ]
        ],
        "gives": [
            [
                "filtReadsErrKey",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "filtReadsKey = filtReads.collect().flatten().map {\n        file ->\n        def key = file.name.toString().tokenize('_').get(0)\n        return tuple(key, file)\n     }.groupTuple()",
        "origin": [
            [
                "filtReads",
                "P"
            ]
        ],
        "gives": [
            [
                "filtReadsKey",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(\"$projectDir/assets/where_are_my_files.txt\", checkIfExists: true)\n    .into { ch_wherearemyfiles_for_trimgalore; ch_wherearemyfiles_for_alignment }",
        "origin": [
            [
                "\"$projectDir/assets/where_are_my_files.txt\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_wherearemyfiles_for_trimgalore",
                "P"
            ],
            [
                "ch_wherearemyfiles_for_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_splicesites_for_bismark_hisat_align = Channel.fromPath(params.known_splices, checkIfExists: true)",
        "origin": [
            [
                "params.known_splices, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_splicesites_for_bismark_hisat_align",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_splicesites_for_bismark_hisat_align = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_splicesites_for_bismark_hisat_align",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .fromPath(params.bismark_index, checkIfExists: true)\n            .ifEmpty { exit 1, \"Bismark index file not found: ${params.bismark_index}\" }\n            .into { ch_bismark_index_for_bismark_align; ch_bismark_index_for_bismark_methXtract }",
        "origin": [
            [
                "params.bismark_index, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bismark_index_for_bismark_align",
                "P"
            ],
            [
                "ch_bismark_index_for_bismark_methXtract",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n            .fromPath(params.fasta, checkIfExists: true)\n            .ifEmpty { exit 1, \"fasta file not found : ${params.fasta}\" }\n            .set { ch_fasta_for_makeBismarkIndex }",
        "origin": [
            [
                "params.fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta_for_makeBismarkIndex",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n        .fromPath(params.fasta, checkIfExists: true)\n        .ifEmpty { exit 1, \"fasta file not found : ${params.fasta}\" }\n        .into { ch_fasta_for_makeBwaMemIndex; ch_fasta_for_makeFastaIndex; ch_fasta_for_methyldackel }",
        "origin": [
            [
                "params.fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta_for_makeBwaMemIndex",
                "P"
            ],
            [
                "ch_fasta_for_makeFastaIndex",
                "P"
            ],
            [
                "ch_fasta_for_methyldackel",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n            .fromPath(\"${params.bwa_meth_index}*\", checkIfExists: true)\n            .ifEmpty { exit 1, \"bwa-meth index file(s) not found: ${params.bwa_meth_index}\" }\n            .set { ch_bwa_meth_indices_for_bwamem_align }",
        "origin": [
            [
                "\"${params.bwa_meth_index}*\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bwa_meth_indices_for_bwamem_align",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n            .fromPath(params.fasta_index, checkIfExists: true)\n            .ifEmpty { exit 1, \"fasta index file not found: ${params.fasta_index}\" }\n            .set { ch_fasta_index_for_methyldackel }",
        "origin": [
            [
                "params.fasta_index, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta_index_for_methyldackel",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n        .fromPath(params.fasta, checkIfExists: true)\n        .ifEmpty { exit 1, \"fasta file not found : ${params.fasta}\" }\n        .into { ch_fasta_for_cgmaptools; ch_fasta_bismarkIndex_2 }",
        "origin": [
            [
                "params.fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta_for_cgmaptools",
                "P"
            ],
            [
                "ch_fasta_bismarkIndex_2",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n            .from(params.input_paths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, 'params.input_paths was empty - no input files supplied' }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel\n            .from(params.input_paths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, 'params.input_paths was empty - no input files supplied' }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel\n        .fromPath(params.bam)\n        .map { file -> tuple(file.baseName, file) }\n        .ifEmpty { exit 1, 'params.bam_paths was empty - no input files supplied' }\n        .set { ch_indep_bam_for_processing }",
        "origin": [
            [
                "params.bam",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_indep_bam_for_processing",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel\n        .fromFilePairs(params.input, size: params.single_end ? 1 : 2)\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.input}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { ch_read_files_fastqc; ch_read_files_trimming}",
        "origin": [
            [
                "params.input, size: params.single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-methylseq-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/methylseq Workflow Summary'\n    section_href: 'https://github.com/nf-core/methylseq'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "ch_fastqc_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_fastqc_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "ch_trim_galore_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_trim_galore_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ch_read_files_trimming = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "ch_trim_galore_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_trim_galore_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "ch_bismark_dedup_log_for_bismark_report = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_bismark_report",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "ch_bismark_dedup_log_for_bismark_summary = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_bismark_summary",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "ch_bismark_dedup_log_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "ch_bismark_align_log_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_align_log_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "ch_bismark_dedup_log_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "ch_bismark_splitting_report_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_splitting_report_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "ch_bismark_mbias_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_mbias_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "ch_bismark_reports_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_reports_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "ch_bismark_summary_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_summary_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "ch_markDups_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_markDups_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "ch_flagstat_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_flagstat_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "ch_samtools_stats_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_samtools_stats_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "ch_markDups_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_markDups_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "ch_methyldackel_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_methyldackel_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "ch_sorted_bam = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_sorted_bam",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "ch_cgmap_CG_file = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_CG_file",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "ch_cgmap_visualization_cove = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_visualization_cove",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "ch_cgmap_ATCG_to_extract_CHR = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_ATCG_to_extract_CHR",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "ch_cgmap_atcgmap_chr = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_atcgmap_chr",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "ch_wherearemyfiles_for_alignment.set { ch_wherearemyfiles_for_bismark_align }",
        "origin": [
            [
                "ch_wherearemyfiles_for_alignment",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_wherearemyfiles_for_bismark_align",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "ch_wherearemyfiles_for_alignment.into { ch_wherearemyfiles_for_bwamem_align; ch_wherearemyfiles_for_samtools_sort_index_flagstat }",
        "origin": [
            [
                "ch_wherearemyfiles_for_alignment",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_wherearemyfiles_for_bwamem_align",
                "P"
            ],
            [
                "ch_wherearemyfiles_for_samtools_sort_index_flagstat",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "ch_fasta_for_makeBwaMemIndex.close()",
        "origin": [
            [
                "ch_fasta_for_makeBwaMemIndex",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_43": {
        "string": "ch_fasta_for_makeFastaIndex.close()",
        "origin": [
            [
                "ch_fasta_for_makeFastaIndex",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_44": {
        "string": "save_intermeds.join(', ')",
        "origin": [
            [
                "save_intermeds",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_45": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_46": {
        "string": "ch_bam_for_bismark_deduplicate.into { ch_bam_dedup_for_bismark_methXtract; ch_bam_dedup_for_qualimap; ch_bam_cgmaptools }",
        "origin": [
            [
                "ch_bam_for_bismark_deduplicate",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_dedup_for_bismark_methXtract",
                "P"
            ],
            [
                "ch_bam_dedup_for_qualimap",
                "P"
            ],
            [
                "ch_bam_cgmaptools",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "ch_bismark_align_log_for_bismark_report\n     .join(ch_bismark_dedup_log_for_bismark_report)\n     .join(ch_bismark_splitting_report_for_bismark_report)\n     .join(ch_bismark_mbias_for_bismark_report)\n     .set{ ch_bismark_logs_for_bismark_report }",
        "origin": [
            [
                "ch_bismark_align_log_for_bismark_report",
                "P"
            ],
            [
                "ch_bismark_dedup_log_for_bismark_report",
                "P"
            ],
            [
                "ch_bismark_splitting_report_for_bismark_report",
                "P"
            ],
            [
                "ch_bismark_mbias_for_bismark_report",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bismark_logs_for_bismark_report",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "ch_bam_sorted_for_markDuplicates.into { ch_bam_dedup_for_methyldackel; ch_bam_dedup_for_qualimap; ch_bam_cgmaptools }",
        "origin": [
            [
                "ch_bam_sorted_for_markDuplicates",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_dedup_for_methyldackel",
                "P"
            ],
            [
                "ch_bam_dedup_for_qualimap",
                "P"
            ],
            [
                "ch_bam_cgmaptools",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "ch_bam_index.set { ch_bam_index_for_methyldackel }",
        "origin": [
            [
                "ch_bam_index",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_index_for_methyldackel",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "ch_bam_dedup_for_qualimap_indep.set { ch_bam_dedup_for_qualimap }",
        "origin": [
            [
                "ch_bam_dedup_for_qualimap_indep",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_dedup_for_qualimap",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "ch_trimmed_reads_for_alignment = ch_read_files_trimming",
        "origin": [
            [
                "ch_read_files_trimming",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_trimmed_reads_for_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "ch_cgmap_CG_file = ch_cgmap_PE",
        "origin": [
            [
                "ch_cgmap_PE",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_CG_file",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "ch_cgmap_for_MKit = ch_cgmap_methkit_PE",
        "origin": [
            [
                "ch_cgmap_methkit_PE",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_for_MKit",
                "P"
            ]
        ]
    },
    "OPERATION_54": {
        "string": "ch_cgmap_to_extract_CHR = ch_cgmap_to_extract_CHR_PE",
        "origin": [
            [
                "ch_cgmap_to_extract_CHR_PE",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_cgmap_to_extract_CHR",
                "P"
            ]
        ]
    }
}
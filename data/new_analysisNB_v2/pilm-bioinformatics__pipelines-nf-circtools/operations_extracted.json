{
    "OPERATION_1": {
        "string": "Channel.fromPath(\"$baseDir/assets/where_are_my_files.txt\")\n       .into{ch_where_trim_galore; ch_where_star; }",
        "origin": [
            [
                "\"$baseDir/assets/where_are_my_files.txt\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_where_trim_galore",
                "P"
            ],
            [
                "ch_where_star",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "star_index = Channel\n        .fromPath(params.star_index)\n        .ifEmpty { exit 1, \"STAR index not found: ${params.star_index}\" }",
        "origin": [
            [
                "params.star_index",
                "A"
            ]
        ],
        "gives": [
            [
                "star_index",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.fasta)\n           .ifEmpty { exit 1, \"Fasta file not found: ${params.fasta}\" }\n           .into { ch_fasta_for_star_index; ch_fasta_for_circtools}",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta_for_star_index",
                "P"
            ],
            [
                "ch_fasta_for_circtools",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .into { gtf_makeSTARindex; \n              gtf_star; gtf_qualimap;  gtf_circtools; }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtf_makeSTARindex",
                "P"
            ],
            [
                "gtf_star",
                "P"
            ],
            [
                "gtf_qualimap",
                "P"
            ],
            [
                "gtf_circtools",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath(params.rrna)\n    .ifEmpty { exit 1, \"rrna FASTA file is unreachable: ${params.rrna}\"  }\n    .set { tx_rrna_ch  }",
        "origin": [
            [
                "params.rrna",
                "A"
            ]
        ],
        "gives": [
            [
                "tx_rrna_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath(params.repeat)\n    .ifEmpty { exit 1, \"repeat GTF fasta file is unreachable: ${params.repeat}\"  }\n    .set { repeat_ch  }",
        "origin": [
            [
                "params.repeat",
                "A"
            ]
        ],
        "gives": [
            [
                "repeat_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { raw_reads_fastqc; raw_reads_trim; }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trim",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n        .into { raw_reads_fastqc; raw_reads_trim; }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trim",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "stats_NanoPlot": {
        "name_process": "stats_NanoPlot",
        "string_process": "\nprocess stats_NanoPlot {\n    label 'mapcard'                                       \n\n    input:  \n    file in_qc\n\n    publishDir \"$params.outdir/nanoPlot\"\n\n    output:  \n    file '*'                              \n\n    script:\n    \"\"\"\n    NanoPlot --fasta $in_qc -t $params.threads\n\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    NanoPlot --fasta $in_qc -t $params.threads\n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_qc"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "",
        "stub": ""
    },
    "assembly_MetaFlye": {
        "name_process": "assembly_MetaFlye",
        "string_process": "\nprocess assembly_MetaFlye {\n    label 'metaflye' \n\n    input:\n    file in_flye\n\n    publishDir \"$params.outdir\"\n\n    output:     \n    file 'out_flye/assembly.fasta' into (out_flye, flye_analysis)\n    \n    when:\n    params.flye == true\n\n    script:\n      \n                                                                                              \n                                                        \n      \n    \"\"\"\n    flye --$params.flyeDt $in_flye --threads $params.threads --out-dir out_flye --meta --plasmids --genome-size $params.genomeSize \n\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    flye --$params.flyeDt $in_flye --threads $params.threads --out-dir out_flye --meta --plasmids --genome-size $params.genomeSize \n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "in_flye"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'metaflye'"
        ],
        "when": "params.flye == true",
        "stub": ""
    },
    "map_CARD": {
        "name_process": "map_CARD",
        "string_process": "\nprocess map_CARD {\n    label 'mapcard' \n\n    input:\n\tfile fa from in_align\n\t\n    publishDir \"$params.outdir\", mode: 'copy'                   \n\n    output:  \n    file '*' into card_aln \n\n\twhen:\n\tparams.flye\t== false\n        \n    script:\n\t\n    \"\"\"\n    minimap2 -ax $params.readtype $params.argDb $fa -t $params.threads -c | samtools view -S -b | samtools view -b -F 4 > aln_F4.bam\n\n    \"\"\" \t\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    minimap2 -ax $params.readtype $params.argDb $fa -t $params.threads -c | samtools view -S -b | samtools view -b -F 4 > aln_F4.bam\n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "in_align"
        ],
        "nb_inputs": 1,
        "outputs": [
            "card_aln"
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "params.flye\t== false",
        "stub": ""
    },
    "mapFlye_CARD": {
        "name_process": "mapFlye_CARD",
        "string_process": "\nprocess mapFlye_CARD {\n    label 'mapcard' \n\n    input:\n    file out_flye\n\t\n    publishDir \"$params.outdir\", mode: 'copy'\n\n    output:  \n    file '*' into flyecard_aln \n\n\twhen:\n\tparams.flye\t== true\n        \n    script:\n\t\n    \"\"\"\n    minimap2 -ax $params.readtype $params.argDb $out_flye -t $params.threads | samtools view -S -b | samtools view -b -F 4 > aln_F4.bam\n\n    \"\"\" \t\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    minimap2 -ax $params.readtype $params.argDb $out_flye -t $params.threads | samtools view -S -b | samtools view -b -F 4 > aln_F4.bam\n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "out_flye"
        ],
        "nb_inputs": 1,
        "outputs": [
            "flyecard_aln"
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "params.flye\t== true",
        "stub": ""
    },
    "aln_analysis": {
        "name_process": "aln_analysis",
        "string_process": "\nprocess aln_analysis {\n    label 'mapcard' \n  \n    input:\n    file card_aln\n    file in_analysis\n\n    publishDir \"$params.outdir\", mode:'copy'\n\n    output:   \n    file \"argHitsDf.tsv\" into in_summary\n    file \"argHits.fasta\" into(in_tax, in_pf)\n\t\n\twhen:\n\tparams.flye == false\n           \n    script:\n    \"\"\"\n    read_analysis.py --bam_file $card_aln --reads_fasta $in_analysis --ident $params.ident --cov_length $params.length --folder $params.outdir --aro_idx $PWD/bin/aro_index.tsv\n    \n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    read_analysis.py --bam_file $card_aln --reads_fasta $in_analysis --ident $params.ident --cov_length $params.length --folder $params.outdir --aro_idx $PWD/bin/aro_index.tsv\n    \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "card_aln",
            "in_analysis"
        ],
        "nb_inputs": 2,
        "outputs": [
            "in_summary"
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "params.flye == false",
        "stub": ""
    },
    "alnFlye_analysis": {
        "name_process": "alnFlye_analysis",
        "string_process": "\nprocess alnFlye_analysis {\n    label 'mapcard' \n  \n    input:\n    file flyecard_aln\n    file flye_analysis\n\n    publishDir \"$params.outdir\", mode:'copy'\n\n    output:   \n    file \"argHitsDf.tsv\" into inflye_summary\n    file \"argHits.fasta\" into(inflye_tax, inflye_pf)\n\t\n\twhen:\n\tparams.flye == true\n             \n    script:\n    \"\"\"\n    read_analysis.py --bam_file $flyecard_aln --reads_fasta $flye_analysis --ident $params.ident --cov_length $params.length --folder $params.outdir --aro_idx $PWD/bin/aro_index.tsv\n    \n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    read_analysis.py --bam_file $flyecard_aln --reads_fasta $flye_analysis --ident $params.ident --cov_length $params.length --folder $params.outdir --aro_idx $PWD/bin/aro_index.tsv\n    \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "flyecard_aln",
            "flye_analysis"
        ],
        "nb_inputs": 2,
        "outputs": [
            "inflye_summary"
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "params.flye == true",
        "stub": ""
    },
    "plasflow": {
        "name_process": "plasflow",
        "string_process": "\nprocess plasflow {\n    label 'plasflow'\n    \n    input:\n\tfile argHits from in_pf.mix(inflye_pf)\n\n    publishDir \"$params.outdir\", mode:'copy'\n\n    output:   \n    file 'result_pf.tsv' into out_pf  \n             \n    script:\n    \"\"\"\n    PlasFlow.py --input $argHits --output result_pf.tsv --threshold $params.pfThreshold --models $params.pfModels\n    \n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    PlasFlow.py --input $argHits --output result_pf.tsv --threshold $params.pfThreshold --models $params.pfModels\n    \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_pf",
            "inflye_pf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "out_pf"
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'plasflow'"
        ],
        "when": "",
        "stub": ""
    },
    "taxonomy": {
        "name_process": "taxonomy",
        "string_process": "\nprocess taxonomy {\n    if( params.taxon == \"Blast\")\n        label 'blast' \n    if( params.taxon == \"Diamond\")\n        label 'diamond'\n \n    input:\n\tfile argHits from in_tax.mix(inflye_tax)\n\n    publishDir \"$params.outdir\", mode:'copy'\n\n    output:   \n    file 'result_tax.tsv' into (in_ssciname, out_taxonomy)\n        \n    script:\n    if( params.taxon == \"Blast\")\n    \"\"\"\n    blastn -task blastn -max_target_seqs 1 -num_threads $params.threads -outfmt \"6 delim=    qseqid staxid pident length mismatch gapopen qstart qend sstart send evalue bitscore\" -db $params.blastDbDir/$params.blastDbName -query $argHits -out result_tax.tsv \n    \n    \"\"\"\n    else if( params.taxon == \"Diamond\")\n    \"\"\"\n    diamond blastx -d $params.diamondDbDir/$params.diamondDbName -q $argHits -p $params.threads -F 15 -f 6 qseqid staxids pident length mismatch gapopen qstart qend sstart send evalue bitscore --max-target-seqs 1 -o result_tax.tsv\n    \n    \"\"\"\n    else\n    throw new IllegalArgumentException(\"Unknown taxonomy aligner $params.taxon\")   \n}",
        "nb_lignes_process": 27,
        "string_script": "    if( params.taxon == \"Blast\")\n    \"\"\"\n    blastn -task blastn -max_target_seqs 1 -num_threads $params.threads -outfmt \"6 delim=    qseqid staxid pident length mismatch gapopen qstart qend sstart send evalue bitscore\" -db $params.blastDbDir/$params.blastDbName -query $argHits -out result_tax.tsv \n    \n    \"\"\"\n    else if( params.taxon == \"Diamond\")\n    \"\"\"\n    diamond blastx -d $params.diamondDbDir/$params.diamondDbName -q $argHits -p $params.threads -F 15 -f 6 qseqid staxids pident length mismatch gapopen qstart qend sstart send evalue bitscore --max-target-seqs 1 -o result_tax.tsv\n    \n    \"\"\"\n    else\n    throw new IllegalArgumentException(\"Unknown taxonomy aligner $params.taxon\")",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "G-BLASTN",
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn",
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            },
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "in_tax",
            "inflye_tax"
        ],
        "nb_inputs": 2,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'blast' if( params.taxon == \"Diamond\")",
            "label 'diamond'"
        ],
        "when": "",
        "stub": ""
    },
    "get_ssciname": {
        "name_process": "get_ssciname",
        "string_process": "\nprocess get_ssciname {\n    label 'mapcard'\n  \n    input:\n    file in_ssciname\n\n    publishDir \"$params.outdir\", mode:'copy'\n\n    output:   \n    file \"*\" into out_ssciname\n             \n    script:\n    \"\"\"\n    get_taxon.py --blast_out $in_ssciname\n\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    get_taxon.py --blast_out $in_ssciname\n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_ssciname"
        ],
        "nb_inputs": 1,
        "outputs": [
            "out_ssciname"
        ],
        "nb_outputs": 1,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "",
        "stub": ""
    },
    "summary": {
        "name_process": "summary",
        "string_process": "\nprocess summary {\n    label 'mapcard'\n \n    input: \n\tfile argHitsDf from in_summary.mix(inflye_summary)\n    file out_pf\n    file out_taxonomy\n    file out_ssciname\n\n    publishDir \"$params.outdir\", mode:'copy'\n\n    output:   \n    file 'summary.tsv'               \n\t\n    script:\n    \"\"\"\n    #!/usr/bin/python\nimport pandas as pd\naln_df = pd.read_csv(\"$argHitsDf\", sep=\"\\\\t\")\npf_df = pd.read_csv(\"$out_pf\", sep=\"\\\\t\")\ntaxon_df = pd.read_csv(\"$out_taxonomy\", sep=\"\\\\t\", header=None, names=['contig_name', 'taxid', 'pident', 'length', 'mismatch', 'gapopen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore'])\nssciname_df = pd.read_csv(\"$out_ssciname\", sep=\"\\\\t\")\ntax_df = pd.merge(taxon_df, ssciname_df[['taxid', 'species', 'class']], on='taxid', how='left')\n\naln_pf_df = pd.merge(aln_df, pf_df[['contig_name', 'label']], on='contig_name', how='left')\naln_pf_df.rename(columns={'label':'gene_location'}, inplace = True)\naln_pf_df['gene_location'] = aln_pf_df['gene_location'].apply(lambda x: x.split('.')[0])\naln_pf_tax_df = pd.merge(aln_pf_df, tax_df[['contig_name', 'species', 'class', 'pident', 'evalue', 'bitscore']], on='contig_name', how='left')\n\t\nsummary_df = aln_pf_tax_df.drop(['index', 'contig_length', 'aln_length', 'aln_nm', 'ref_start', 'ref_length', 'ref_ARO', 'ref_ID', 'ref_NCBI', 'c_tuples', 'matches', 'insertions', 'deletions'], axis=1)\n\t\nsummary_df.to_csv('summary.tsv', sep=\"\\\\t\")\n\t\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    #!/usr/bin/python\nimport pandas as pd\naln_df = pd.read_csv(\"$argHitsDf\", sep=\"\\\\t\")\npf_df = pd.read_csv(\"$out_pf\", sep=\"\\\\t\")\ntaxon_df = pd.read_csv(\"$out_taxonomy\", sep=\"\\\\t\", header=None, names=['contig_name', 'taxid', 'pident', 'length', 'mismatch', 'gapopen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore'])\nssciname_df = pd.read_csv(\"$out_ssciname\", sep=\"\\\\t\")\ntax_df = pd.merge(taxon_df, ssciname_df[['taxid', 'species', 'class']], on='taxid', how='left')\n\naln_pf_df = pd.merge(aln_df, pf_df[['contig_name', 'label']], on='contig_name', how='left')\naln_pf_df.rename(columns={'label':'gene_location'}, inplace = True)\naln_pf_df['gene_location'] = aln_pf_df['gene_location'].apply(lambda x: x.split('.')[0])\naln_pf_tax_df = pd.merge(aln_pf_df, tax_df[['contig_name', 'species', 'class', 'pident', 'evalue', 'bitscore']], on='contig_name', how='left')\n\t\nsummary_df = aln_pf_tax_df.drop(['index', 'contig_length', 'aln_length', 'aln_nm', 'ref_start', 'ref_length', 'ref_ARO', 'ref_ID', 'ref_NCBI', 'c_tuples', 'matches', 'insertions', 'deletions'], axis=1)\n\t\nsummary_df.to_csv('summary.tsv', sep=\"\\\\t\")\n\t\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_summary",
            "inflye_summary",
            "out_pf",
            "out_taxonomy",
            "out_ssciname"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "louperelo__longmetarg",
        "directive": [
            "label 'mapcard'"
        ],
        "when": "",
        "stub": ""
    }
}
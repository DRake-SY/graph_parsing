{
    "OPERATION_1": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_4": {
        "string": "ch_samplesheet_reformat\n    .splitCsv(header:true, sep:',')\n    .map { get_sample_info(it, params.genomes) }\n    .map { it -> [ it[0], it[1], it[2] ] }                                  \n    .into { ch_txome_reconstruction;\n            ch_annot_feature_count}",
        "origin": [
            [
                "ch_samplesheet_reformat",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_txome_reconstruction",
                "P"
            ],
            [
                "ch_annot_feature_count",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_annot_feature_count\n    .concat(ch_txome_feature_count)\n    .set{ ch_feature_count }",
        "origin": [
            [
                "ch_annot_feature_count",
                "P"
            ],
            [
                "ch_txome_feature_count",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_feature_count",
                "P"
            ]
        ]
    }
}
{
    "extract_ancestor_bed": {
        "name_process": "extract_ancestor_bed",
        "string_process": "\nprocess extract_ancestor_bed {\n\n    publishDir \"${params.out}/ANNOTATE_VCF\", mode: 'copy'\n\n    cpus 1\n\n    input:\n      set file(vcf), file(vcfindex) from smallvcf_ancestor\n\n    output:\n      set file(\"ANC.bed.gz\"), file(\"ANC.bed.gz.tbi\") into anncestor_bed\n\n      \"\"\"\n\n        bcftools query --samples ${params.anc} -f '%CHROM\\\\t%POS\\\\t%END\\\\t[%TGT]\\\\n' ${vcf} |\\\\\n        awk -F\"/\" '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n        awk '{print \\$1, \\$2 = \\$2 - 1, \\$3, \\$4}' OFS=\"\\\\t\" |\\\\\n        bgzip > ANC.bed.gz\n\n        tabix ANC.bed.gz\n        echo \"ANCESTOR DONE\"\n      \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n\n        bcftools query --samples ${params.anc} -f '%CHROM\\\\t%POS\\\\t%END\\\\t[%TGT]\\\\n' ${vcf} |\\\\\n        awk -F\"/\" '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n        awk '{print \\$1, \\$2 = \\$2 - 1, \\$3, \\$4}' OFS=\"\\\\t\" |\\\\\n        bgzip > ANC.bed.gz\n\n        tabix ANC.bed.gz\n        echo \"ANCESTOR DONE\"\n      \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "smallvcf_ancestor"
        ],
        "nb_inputs": 1,
        "outputs": [
            "anncestor_bed"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/ANNOTATE_VCF\", mode: 'copy'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "annotate_small_vcf": {
        "name_process": "annotate_small_vcf",
        "string_process": "\nprocess annotate_small_vcf {\n\n    publishDir \"${params.out}/ANNOTATE_VCF\", mode: 'copy'\n\n    cpus 1\n\n    input:\n      set file(vcf), file(vcfindex) from smallvcf_annotations\n      set file(\"ANC.bed.gz\"), file(\"ANC.bed.gz.tbi\") from anncestor_bed\n\n    output:\n      set file(\"Ce330_annotated.vcf.gz\"), file(\"Ce330_annotated.vcf.gz.tbi\") into annotated_vcf\n\n      \"\"\"\n\n        vcfanno ${params.vcfanno_config} ${vcf} |\\\\\n        awk '\\$0 ~ \"#\" || \\$0 !~ \"Masked\" {print}' |\\\\\n        bcftools filter -i N_MISSING=0 -Oz -o Ce330_annotated.vcf.gz\n\n        tabix -p vcf Ce330_annotated.vcf.gz\n\n        echo \"done it again yes1\"\n      \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n\n        vcfanno ${params.vcfanno_config} ${vcf} |\\\\\n        awk '\\$0 ~ \"#\" || \\$0 !~ \"Masked\" {print}' |\\\\\n        bcftools filter -i N_MISSING=0 -Oz -o Ce330_annotated.vcf.gz\n\n        tabix -p vcf Ce330_annotated.vcf.gz\n\n        echo \"done it again yes1\"\n      \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "vcfanno",
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/vcfanno",
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "vcfanno",
                "uri": "https://bio.tools/vcfanno",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3661",
                                    "term": "SNP annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, flexible annotation of genetic variants.",
                "homepage": "https://github.com/brentp/vcfanno"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "smallvcf_annotations",
            "anncestor_bed"
        ],
        "nb_inputs": 2,
        "outputs": [
            "annotated_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/ANNOTATE_VCF\", mode: 'copy'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_ped": {
        "name_process": "vcf_to_ped",
        "string_process": "\nprocess vcf_to_ped {\n\n    tag {\"PRUNING VCF FOR ADMIXTURE\"}\n\n    publishDir \"${params.out}/ADMIXTURE/PLINK/\", mode: 'copy'\n\n    input:\n      set file(vcf), file(vcfindex), val(nSM), val(maf), val(samples), val(ld) from vcf_admix_plink\n\n    output:\n      set file(\"ce_norm.vcf.gz\"), file(\"ce_norm.vcf.gz.tbi\"), val(nSM), val(maf), val(samples), val(ld), file(\"*.map\"), file(\"*.ped\") into plink_output\n      file(\"plink.prune.in\") into pruned_marker_set\n\n      \"\"\"\n\n      bcftools norm -m +snps ${vcf} -Oz -o ce_norm.vcf.gz\n      tabix -p vcf ce_norm.vcf.gz\n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --maf ${maf} --set-missing-var-ids @:# --indep-pairwise 50 10 ${ld} --allow-extra-chr \n      \n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --maf ${maf} --set-missing-var-ids @:# --extract plink.prune.in --geno --recode12 --out LD_${ld}_MAF_${maf} --allow-extra-chr \n      \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n\n      bcftools norm -m +snps ${vcf} -Oz -o ce_norm.vcf.gz\n      tabix -p vcf ce_norm.vcf.gz\n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --maf ${maf} --set-missing-var-ids @:# --indep-pairwise 50 10 ${ld} --allow-extra-chr \n      \n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --maf ${maf} --set-missing-var-ids @:# --extract plink.prune.in --geno --recode12 --out LD_${ld}_MAF_${maf} --allow-extra-chr \n      \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "vcf_admix_plink"
        ],
        "nb_inputs": 1,
        "outputs": [
            "plink_output",
            "pruned_marker_set"
        ],
        "nb_outputs": 2,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag {\"PRUNING VCF FOR ADMIXTURE\"}",
            "publishDir \"${params.out}/ADMIXTURE/PLINK/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_admixture": {
        "name_process": "run_admixture",
        "string_process": "\nprocess run_admixture {\n\n    tag { \" ${pop} - ${rseed} \"}\n\n    publishDir \"${params.out}/ADMIXTURE/${pop}/\", mode: 'copy', pattern: '*.P'\n    publishDir \"${params.out}/ADMIXTURE/${pop}/\", mode: 'copy', pattern: '*.Q'\n    publishDir \"${params.out}/ADMIXTURE/${pop}/\", mode: 'copy', pattern: 'log_*'\n\n    cpus 4\n\n    input:\n      set pop, rseed, file(vcf), file(vcfindex), val(nSM), val(maf), val(samples), val(ld), file(map), file(ped) from admixture_genome\n\n    output:\n      set pop, rseed, file(vcf), file(vcfindex), val(nSM), val(maf), val(samples), val(ld), file(map), file(ped), file(\"log_${pop}_${rseed}.out\"), file(\"LD_${ld}_MAF_${maf}_${pop}_${rseed}.P\"), file(\"LD_${ld}_MAF_${maf}_${pop}_${rseed}.Q\") into admixture_output\n      set pop, rseed, file(\"log_${pop}_${rseed}.out\"), file(\"LD_${ld}_MAF_${maf}_${pop}_${rseed}.P\"), file(\"LD_${ld}_MAF_${maf}_${pop}_${rseed}.Q\") into admix_results\n\n      \"\"\"\n\n        admixture --cv=10 -s ${rseed} ${ped} ${pop} -j4 | tee log_${pop}_${rseed}.out\n\n        mv LD_${ld}_MAF_${maf}.${pop}.P LD_${ld}_MAF_${maf}_${pop}_${rseed}.P\n        mv LD_${ld}_MAF_${maf}.${pop}.Q LD_${ld}_MAF_${maf}_${pop}_${rseed}.Q\n      \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n\n        admixture --cv=10 -s ${rseed} ${ped} ${pop} -j4 | tee log_${pop}_${rseed}.out\n\n        mv LD_${ld}_MAF_${maf}.${pop}.P LD_${ld}_MAF_${maf}_${pop}_${rseed}.P\n        mv LD_${ld}_MAF_${maf}.${pop}.Q LD_${ld}_MAF_${maf}_${pop}_${rseed}.Q\n      \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Admixture"
        ],
        "tools_url": [
            "https://bio.tools/admixture"
        ],
        "tools_dico": [
            {
                "name": "Admixture",
                "uri": "https://bio.tools/admixture",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Maximum likelihood estimation of individual ancestries from multilocus SNP genotype datasets. It uses the same statistical model as STRUCTURE but calculates estimates using a fast numerical optimization algorithm.",
                "homepage": "http://software.genetics.ucla.edu/admixture/"
            }
        ],
        "inputs": [
            "admixture_genome"
        ],
        "nb_inputs": 1,
        "outputs": [
            "admixture_output",
            "admix_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag { \" ${pop} - ${rseed} \"}",
            "publishDir \"${params.out}/ADMIXTURE/${pop}/\", mode: 'copy', pattern: '*.P'",
            "publishDir \"${params.out}/ADMIXTURE/${pop}/\", mode: 'copy', pattern: '*.Q'",
            "publishDir \"${params.out}/ADMIXTURE/${pop}/\", mode: 'copy', pattern: 'log_*'",
            "cpus 4"
        ],
        "when": "",
        "stub": ""
    },
    "concat_replicate_logs": {
        "name_process": "concat_replicate_logs",
        "string_process": "\nprocess concat_replicate_logs {\n\n    tag { \" ${pop} \"}\n\n    echo true\n\n    executor 'local'\n\n    input:\n      set pop, rseed, file(admixlog), file(admixp), file(admixq) from grouped_admix\n\n    output:\n      file(\"K${pop}_summary.txt\") into concatenated_logs\n\n\n    \"\"\"\n      grep -h CV log*.out |\\\\\n      cut -f3- -d\" \" |\\\\\n      sed 's/(\\\\|)\\\\|:\\\\|K=//g' > K${pop}_summary.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n      grep -h CV log*.out |\\\\\n      cut -f3- -d\" \" |\\\\\n      sed 's/(\\\\|)\\\\|:\\\\|K=//g' > K${pop}_summary.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "grouped_admix"
        ],
        "nb_inputs": 1,
        "outputs": [
            "concatenated_logs"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag { \" ${pop} \"}",
            "echo true",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "concat_pop_logs": {
        "name_process": "concat_pop_logs",
        "string_process": "\nprocess concat_pop_logs {\n\n    publishDir \"${params.out}/ADMIXTURE/CV_Summary/\", mode: 'copy'\n\n    echo true\n\n    executor 'local'\n\n    input:\n      file(clog) from concatenated_logs.toSortedList()\n\n    output:\n      set file(\"admix_replicates_CV.tsv\"), file(\"admix_summarized_CV.txt\"), file(\"bestK.txt\") into cv_summary\n      file(\"bestK.txt\") into bestk\n\n    \"\"\"\n\n      # FULL RESULTS\n      cat *summary.txt |\\\\\n      sort -k1n |\\\\\n      awk '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n      awk 'BEGIN{OFS=\"\\\\t\"; print \"K\", \"CV\"}; {print \\$0} OFS=\"\\\\t\"' > admix_replicates_CV.tsv\n\n      # Means of replicates\n      cat *summary.txt |\\\\\n      sort -k1n |\\\\\n      awk '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n      awk 'BEGIN{OFS=\"\\\\t\"; print \"K\", \"CV\"}; {print \\$0} OFS=\"\\\\t\"' |\\\\\n      datamash -g 1 mean 2 -H |\\\\\n      sed 's/GroupBy(\\\\|)\\\\|mean(//g' > admix_summarized_CV.txt\n\n      # FIND BEST K - FIRST K WHERE NEXT HIGHER K CV VALUE IS SAME TO 2 decimal places\n      cat *summary.txt |\\\\\n      sort -k1n |\\\\\n      awk '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n      awk 'BEGIN{OFS=\"\\\\t\"; print \"K\", \"CV\"}; {print \\$0} OFS=\"\\\\t\"' |\\\\\n      datamash -g 1 mean 2 -H |\\\\\n      sed 's/GroupBy(\\\\|)\\\\|mean(//g' |\\\\\n      awk 'NR>1{print \\$0, sprintf(\"%3.2f\", \\$2-p)} {p = \\$2}' |\\\\\n      sed 's/-//g' |\\\\\n      awk '\\$3 == 0.00 {print}' |\\\\\n      head -1 |\\\\\n      cut -f-1 > bestK.txt\n\n      # ADD PLUS MINUS 2 RANGE TO BEST K\n      bk=`head -1 bestK.txt`\n\n      START=\\$(( 1+bk ))\n      END=\\$(( 2+bk ))\n      for ((i=START;i<=END;i++)); do\n          echo \\$i >> bestK.txt\n      done\n\n      START=\\$(( bk-2 ))\n      END=\\$(( bk-1 ))\n      for ((i=START;i<=END;i++)); do\n          echo \\$i >> bestK.txt\n      done\n\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "\"\"\"\n\n      # FULL RESULTS\n      cat *summary.txt |\\\\\n      sort -k1n |\\\\\n      awk '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n      awk 'BEGIN{OFS=\"\\\\t\"; print \"K\", \"CV\"}; {print \\$0} OFS=\"\\\\t\"' > admix_replicates_CV.tsv\n\n      # Means of replicates\n      cat *summary.txt |\\\\\n      sort -k1n |\\\\\n      awk '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n      awk 'BEGIN{OFS=\"\\\\t\"; print \"K\", \"CV\"}; {print \\$0} OFS=\"\\\\t\"' |\\\\\n      datamash -g 1 mean 2 -H |\\\\\n      sed 's/GroupBy(\\\\|)\\\\|mean(//g' > admix_summarized_CV.txt\n\n      # FIND BEST K - FIRST K WHERE NEXT HIGHER K CV VALUE IS SAME TO 2 decimal places\n      cat *summary.txt |\\\\\n      sort -k1n |\\\\\n      awk '\\$1=\\$1' OFS=\"\\\\t\" |\\\\\n      awk 'BEGIN{OFS=\"\\\\t\"; print \"K\", \"CV\"}; {print \\$0} OFS=\"\\\\t\"' |\\\\\n      datamash -g 1 mean 2 -H |\\\\\n      sed 's/GroupBy(\\\\|)\\\\|mean(//g' |\\\\\n      awk 'NR>1{print \\$0, sprintf(\"%3.2f\", \\$2-p)} {p = \\$2}' |\\\\\n      sed 's/-//g' |\\\\\n      awk '\\$3 == 0.00 {print}' |\\\\\n      head -1 |\\\\\n      cut -f-1 > bestK.txt\n\n      # ADD PLUS MINUS 2 RANGE TO BEST K\n      bk=`head -1 bestK.txt`\n\n      START=\\$(( 1+bk ))\n      END=\\$(( 2+bk ))\n      for ((i=START;i<=END;i++)); do\n          echo \\$i >> bestK.txt\n      done\n\n      START=\\$(( bk-2 ))\n      END=\\$(( bk-1 ))\n      for ((i=START;i<=END;i++)); do\n          echo \\$i >> bestK.txt\n      done\n\n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "concatenated_logs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cv_summary",
            "bestk"
        ],
        "nb_outputs": 2,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/ADMIXTURE/CV_Summary/\", mode: 'copy'",
            "echo true",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "run_admixture_besk_k": {
        "name_process": "run_admixture_besk_k",
        "string_process": "\nprocess run_admixture_besk_k {\n\n    publishDir \"${params.out}/ADMIXTURE/BEST_K/\", mode: 'copy', pattern: '*.P'\n    publishDir \"${params.out}/ADMIXTURE/BEST_K/\", mode: 'copy', pattern: '*.Q'\n\n    cpus 4\n\n    input:\n      set file(vcf), file(vcfindex), val(nSM), val(maf), val(samples), val(ld), file(map), file(ped), file(bestk) from rerun_admixture\n\n    output:\n      set file(vcf), file(vcfindex), val(nSM), val(maf), val(samples), val(ld), file(map), file(ped), file(bestk), file(\"log_BestK.out\"), file(\"LD_${ld}_MAF_${maf}_BestK.P\"), file(\"LD_${ld}_MAF_${maf}_BestK.Q\") into admixture_bestk\n      file(\"LD_${ld}_MAF_${maf}_BestK.Q\") into admixture_bestk_to_popgenome\n\n      \"\"\"\n\n        bk=`head -1 ${bestk}`\n\n        admixture --cv=100 ${ped} \\$bk -j4 | tee log_BestK.out\n\n        mv LD_${ld}_MAF_${maf}.\\$bk.P LD_${ld}_MAF_${maf}_BestK.P\n        mv LD_${ld}_MAF_${maf}.\\$bk.Q LD_${ld}_MAF_${maf}_BestK.Q\n      \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n\n        bk=`head -1 ${bestk}`\n\n        admixture --cv=100 ${ped} \\$bk -j4 | tee log_BestK.out\n\n        mv LD_${ld}_MAF_${maf}.\\$bk.P LD_${ld}_MAF_${maf}_BestK.P\n        mv LD_${ld}_MAF_${maf}.\\$bk.Q LD_${ld}_MAF_${maf}_BestK.Q\n      \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Admixture"
        ],
        "tools_url": [
            "https://bio.tools/admixture"
        ],
        "tools_dico": [
            {
                "name": "Admixture",
                "uri": "https://bio.tools/admixture",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Maximum likelihood estimation of individual ancestries from multilocus SNP genotype datasets. It uses the same statistical model as STRUCTURE but calculates estimates using a fast numerical optimization algorithm.",
                "homepage": "http://software.genetics.ucla.edu/admixture/"
            }
        ],
        "inputs": [
            "rerun_admixture"
        ],
        "nb_inputs": 1,
        "outputs": [
            "admixture_bestk",
            "admixture_bestk_to_popgenome"
        ],
        "nb_outputs": 2,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/ADMIXTURE/BEST_K/\", mode: 'copy', pattern: '*.P'",
            "publishDir \"${params.out}/ADMIXTURE/BEST_K/\", mode: 'copy', pattern: '*.Q'",
            "cpus 4"
        ],
        "when": "",
        "stub": ""
    },
    "ibdseq_haplotype": {
        "name_process": "ibdseq_haplotype",
        "string_process": "\nprocess ibdseq_haplotype {\n\n    publishDir \"${params.out}/HAPLOTYPE\", mode: 'copy'\n\n    cpus 8\n\n    input:\n      set file(vcf), file(vindex) from smallvcf_haplotype\n\n    output:\n      file(\"haplotype.tsv\") into haplotype_analysis\n\n      \"\"\"\n\n        minalleles=\\$(bcftools query --list-samples ${vcf} | wc -l | awk '{ print \\$0*${minalleles} }' | awk '{printf(\"%d\\\\n\", \\$0+=\\$0<0?0:0.9)}')\n        if [[ \\${minalleles} -lt 2 ]];\n        then\n            minalleles=2;\n        fi;\n        echo \"minalleles=${minalleles}\"\n        for chrom in I II III IV V X; do\n            java -jar `which ibdseq.r1206.jar` \\\\\n                gt=${vcf} \\\\\n                out=haplotype_\\${chrom} \\\\\n                ibdtrim=${ibdtrim} \\\\\n                minalleles=\\${minalleles} \\\\\n                r2max=${r2max} \\\\\n                nthreads=${task.cpus} \\\\\n                chrom=\\${chrom}\n            done;\n\n        cat *.ibd | awk '{ print \\$0 \"\\\\t${minalleles}\\\\t${ibdtrim}\\\\t${r2window}\\\\t${r2max}\" }' > haplotype.tsv\n      \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "\"\"\"\n\n        minalleles=\\$(bcftools query --list-samples ${vcf} | wc -l | awk '{ print \\$0*${minalleles} }' | awk '{printf(\"%d\\\\n\", \\$0+=\\$0<0?0:0.9)}')\n        if [[ \\${minalleles} -lt 2 ]];\n        then\n            minalleles=2;\n        fi;\n        echo \"minalleles=${minalleles}\"\n        for chrom in I II III IV V X; do\n            java -jar `which ibdseq.r1206.jar` \\\\\n                gt=${vcf} \\\\\n                out=haplotype_\\${chrom} \\\\\n                ibdtrim=${ibdtrim} \\\\\n                minalleles=\\${minalleles} \\\\\n                r2max=${r2max} \\\\\n                nthreads=${task.cpus} \\\\\n                chrom=\\${chrom}\n            done;\n\n        cat *.ibd | awk '{ print \\$0 \"\\\\t${minalleles}\\\\t${ibdtrim}\\\\t${r2window}\\\\t${r2max}\" }' > haplotype.tsv\n      \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "smallvcf_haplotype"
        ],
        "nb_inputs": 1,
        "outputs": [
            "haplotype_analysis"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/HAPLOTYPE\", mode: 'copy'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "analyze_ibdseq": {
        "name_process": "analyze_ibdseq",
        "string_process": "\nprocess analyze_ibdseq {\n\n    publishDir \"${params.out}/HAPLOTYPE\", mode: 'copy'\n\n    input:\n        file(\"haplotype.tsv\") from haplotype_analysis\n\n    output:\n        file(\"processed_haps.Rda\")\n        file(\"haplotype_plot_df.Rda\") into plot_df\n\n\n    \"\"\"\n      \n      Rscript --vanilla `which process_ibd.R`\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n      \n      Rscript --vanilla `which process_ibd.R`\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "haplotype_analysis"
        ],
        "nb_inputs": 1,
        "outputs": [
            "plot_df"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/HAPLOTYPE\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_ibdseq": {
        "name_process": "plot_ibdseq",
        "string_process": "\nprocess plot_ibdseq {\n\n    publishDir \"${params.out}/HAPLOTYPE\", mode: 'copy'\n\n    input:\n        file(\"haplotype_plot_df.Rda\") from plot_df\n\n    output:\n        file(\"haplotype_length.pdf\")\n        file(\"max_haplotype_sorted_genome_wide.pdf\")\n        file(\"haplotype.pdf\")\n        file(\"sweep_summary.tsv\")\n\n    \"\"\"\n      Rscript --vanilla `which plot_ibd.R`\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n      Rscript --vanilla `which plot_ibd.R`\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "plot_df"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/HAPLOTYPE\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "popgenome_whole_pop": {
        "name_process": "popgenome_whole_pop",
        "string_process": "\nprocess popgenome_whole_pop {\n\n  tag { CHROM }\n\n  publishDir \"${params.out}/POPGENOME/WINDOW/${CHROM}\", mode: \"copy\"\n\n  echo true\n\n  input:\n    set file(vcf), file(vindex) from smallvcf_classic_popgen_window\n    each CHROM from contigs_popgenome_window\n\n  output:\n    set file(\"*Linkage_Statistics.Rda\"), file(\"*Neutrality_Diversity_Statistics.Rda\"), file(\"*WHOLE_POPULATION_Statistics.Rda\") into popgenome_wholepop_statistics\n\n\n  script:\n    \"\"\"\n      #!/usr/bin/env Rscript\n\n      require(PopGenome)\n      require(data.table)\n      require(tidyr)\n      require(dplyr)\n      require(glue)\n\n      system(glue::glue(\"echo Initializing PopGenome Parameters\"))\n\n      chr1 <- c(1,15072434)\n      chr2 <- c(1,15279421)\n      chr3 <- c(1,13783801)\n      chr4 <- c(1,17493829)\n      chr5 <- c(1,20924180)\n      chr6 <- c(1,17718942)\n      \n      chr.lengths <- list(chr1,chr2,chr3,chr4,chr5,chr6)\n      chroms <- c(\"I\",\"II\",\"III\",\"IV\",\"V\",\"X\")\n      \n      ANALYSIS_CHROM <- \"${CHROM}\"\n      CHROM_START <- chr.lengths[which(chroms == \"${CHROM}\")][[1]][1]\n      CHROM_END <- chr.lengths[which(chroms == \"${CHROM}\")][[1]][2]\n\n      SLIDE_DISTANCE <- ${params.popgenome_slide}\n      WINDOW_SIZE <-  ${params.popgenome_window}\n\n      OUTGROUP <- \"${params.anc}\"\n\n      system(glue::glue(\"echo Done Initializing PopGenome Parameters - WindowSize = {WINDOW_SIZE}, StepSize = {SLIDE_DISTANCE}, Whole Population, Chromosome = ${CHROM}\"))\n\n      POPGENOME_VCF <- \"${vcf}\"\n      POPGENOME_GFF <- \"${params.gff}\"\n\n      system(glue::glue(\"echo PopGenome - Reading VCF file\")) \n      GENOME_OBJECT <- PopGenome::readVCF(\n                                          POPGENOME_VCF, \n                                          numcols = 10000, \n                                          tid = ANALYSIS_CHROM, \n                                          frompos = CHROM_START, \n                                          topos = CHROM_END, \n                                          approx = F)\n     \n      system(glue::glue(\"echo PopGenome - Setting Outgroup and Defining Window Size\"))\n\n      GENOME_OBJECT <- PopGenome::set.outgroup(GENOME_OBJECT, OUTGROUP,  diploid = FALSE)\n      \n      GENOME_OBJECT <- PopGenome::sliding.window.transform(\n                                                            GENOME_OBJECT, \n                                                            width = WINDOW_SIZE, \n                                                            jump = SLIDE_DISTANCE,\n                                                            type = 2, \n                                                            whole.data = FALSE\n                                                          )\n\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Detail Stats\"))\n      GENOME_OBJECT <- PopGenome::detail.stats(GENOME_OBJECT)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Neutrality Stats\"))\n      GENOME_OBJECT <- PopGenome::neutrality.stats(GENOME_OBJECT, detail = TRUE)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Diversity Stats\"))\n      GENOME_OBJECT <- PopGenome::diversity.stats(GENOME_OBJECT, pi = TRUE)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Fst Stats\"))\n      GENOME_OBJECT <- PopGenome::F_ST.stats(GENOME_OBJECT, mode = \"nucleotide\", detail = TRUE)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Linkage Stats\"))\n      GENOME_OBJECT <- PopGenome::linkage.stats(GENOME_OBJECT, do.ZnS = TRUE, do.WALL = TRUE)\n\n      system(glue::glue(\"echo PopGenome - Finished Calculating Population Genetic Statistics - Saving File\"))\n\n      save(GENOME_OBJECT, file = glue::glue(\"CHROMOSOME-{ANALYSIS_CHROM}_WHOLE_POPULATION_Statistics.Rda\"))\n\n      system(glue::glue(\"echo Generating PopGenome DataFrames - Extracting Window Bins\"))\n\n      windowStarts <- data.frame(snp_index = 1:length(colnames(GENOME_OBJECT@BIG.BIAL[[1]])),\n                                 position = colnames(GENOME_OBJECT@BIG.BIAL[[1]]))\n      \n      slide_index <- cbind(data.frame(lapply(GENOME_OBJECT@SLIDE.POS,  function(x) as.numeric(floor(mean(x)))))) %>%\n        tidyr::gather(temp, snp_index) %>%\n        dplyr::select(-temp) %>%\n        dplyr::left_join(., windowStarts, by = \"snp_index\")\n\n      system(glue::glue(\"echo Generating PopGenome DataFrames - Extracting Linkage Stats\"))\n\n      linkage_df <- data.frame(Wall.B = c(GENOME_OBJECT@Wall.B),\n                               Wall.Q = c(GENOME_OBJECT@Wall.Q),\n                               Kelly.Z_nS = c(GENOME_OBJECT@Kelly.Z_nS),\n                               Rozas.ZZ = c(GENOME_OBJECT@Rozas.ZZ),\n                               Rozas.ZA = c(GENOME_OBJECT@Rozas.ZA)) %>%\n                                 dplyr::mutate(Population = \"WHOLE_POPULATION\",\n                                               WindowPosition = slide_index\\$position) %>%\n        tidyr::gather(LinkageStat, value, -Population, -WindowPosition)\n\n      save(linkage_df, file = glue::glue(\"CHROMOSOME-{ANALYSIS_CHROM}_WHOLE_POPULATION_Linkage_Statistics.Rda\"))\n\n      system(glue::glue(\"echo Generating PopGenome DataFrames - Extracting Neutrality and Diversity Stats\"))\n\n      neutrality_df <- data.frame(Tajima.D = c(GENOME_OBJECT@Tajima.D),\n                                  n.segregating.sites = c(GENOME_OBJECT@n.segregating.sites),\n                                  Fu.Li.F = c(GENOME_OBJECT@Fu.Li.F),\n                                  Fu.Li.D = c(GENOME_OBJECT@Fu.Li.D),\n                                  Fay.Wu.H = c(GENOME_OBJECT@Fay.Wu.H),\n                                  Zeng.E = c(GENOME_OBJECT@Zeng.E),\n                                  theta_Tajima = c(GENOME_OBJECT@theta_Tajima),\n                                  theta_Watterson = c(GENOME_OBJECT@theta_Watterson),\n                                  theta_Achaz.Watterson = c(GENOME_OBJECT@theta_Achaz.Watterson),\n                                  theta_Achaz.Tajima = c(GENOME_OBJECT@theta_Achaz.Tajima),\n                                  theta_Fay.Wu = c(GENOME_OBJECT@theta_Fay.Wu),\n                                  theta_Zeng = c(GENOME_OBJECT@theta_Zeng),\n                                  nuc.diversity.within = c(GENOME_OBJECT@nuc.diversity.within),\n                                  PI = c(GENOME_OBJECT@Pi),\n                                  theta_Fu.Li = c(GENOME_OBJECT@theta_Fu.Li),\n                                  hap.diversity.within = c(GENOME_OBJECT@hap.diversity.within)) %>%\n        dplyr::mutate(Population = \"WHOLE_POPULATION\",\n                      WindowPosition = slide_index\\$position) %>%\n        tidyr::gather(statistic, value, -Population, -WindowPosition)\n      \n      save(neutrality_df, file = glue::glue(\"CHROMOSOME-{ANALYSIS_CHROM}_WHOLE_POPULATION_Neutrality_Diversity_Statistics.Rda\"))\n    \"\"\"\n\n}",
        "nb_lignes_process": 136,
        "string_script": "    \"\"\"\n      #!/usr/bin/env Rscript\n\n      require(PopGenome)\n      require(data.table)\n      require(tidyr)\n      require(dplyr)\n      require(glue)\n\n      system(glue::glue(\"echo Initializing PopGenome Parameters\"))\n\n      chr1 <- c(1,15072434)\n      chr2 <- c(1,15279421)\n      chr3 <- c(1,13783801)\n      chr4 <- c(1,17493829)\n      chr5 <- c(1,20924180)\n      chr6 <- c(1,17718942)\n      \n      chr.lengths <- list(chr1,chr2,chr3,chr4,chr5,chr6)\n      chroms <- c(\"I\",\"II\",\"III\",\"IV\",\"V\",\"X\")\n      \n      ANALYSIS_CHROM <- \"${CHROM}\"\n      CHROM_START <- chr.lengths[which(chroms == \"${CHROM}\")][[1]][1]\n      CHROM_END <- chr.lengths[which(chroms == \"${CHROM}\")][[1]][2]\n\n      SLIDE_DISTANCE <- ${params.popgenome_slide}\n      WINDOW_SIZE <-  ${params.popgenome_window}\n\n      OUTGROUP <- \"${params.anc}\"\n\n      system(glue::glue(\"echo Done Initializing PopGenome Parameters - WindowSize = {WINDOW_SIZE}, StepSize = {SLIDE_DISTANCE}, Whole Population, Chromosome = ${CHROM}\"))\n\n      POPGENOME_VCF <- \"${vcf}\"\n      POPGENOME_GFF <- \"${params.gff}\"\n\n      system(glue::glue(\"echo PopGenome - Reading VCF file\")) \n      GENOME_OBJECT <- PopGenome::readVCF(\n                                          POPGENOME_VCF, \n                                          numcols = 10000, \n                                          tid = ANALYSIS_CHROM, \n                                          frompos = CHROM_START, \n                                          topos = CHROM_END, \n                                          approx = F)\n     \n      system(glue::glue(\"echo PopGenome - Setting Outgroup and Defining Window Size\"))\n\n      GENOME_OBJECT <- PopGenome::set.outgroup(GENOME_OBJECT, OUTGROUP,  diploid = FALSE)\n      \n      GENOME_OBJECT <- PopGenome::sliding.window.transform(\n                                                            GENOME_OBJECT, \n                                                            width = WINDOW_SIZE, \n                                                            jump = SLIDE_DISTANCE,\n                                                            type = 2, \n                                                            whole.data = FALSE\n                                                          )\n\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Detail Stats\"))\n      GENOME_OBJECT <- PopGenome::detail.stats(GENOME_OBJECT)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Neutrality Stats\"))\n      GENOME_OBJECT <- PopGenome::neutrality.stats(GENOME_OBJECT, detail = TRUE)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Diversity Stats\"))\n      GENOME_OBJECT <- PopGenome::diversity.stats(GENOME_OBJECT, pi = TRUE)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Fst Stats\"))\n      GENOME_OBJECT <- PopGenome::F_ST.stats(GENOME_OBJECT, mode = \"nucleotide\", detail = TRUE)\n      system(glue::glue(\"echo PopGenome - Calculating Population Genetic Statistics - Linkage Stats\"))\n      GENOME_OBJECT <- PopGenome::linkage.stats(GENOME_OBJECT, do.ZnS = TRUE, do.WALL = TRUE)\n\n      system(glue::glue(\"echo PopGenome - Finished Calculating Population Genetic Statistics - Saving File\"))\n\n      save(GENOME_OBJECT, file = glue::glue(\"CHROMOSOME-{ANALYSIS_CHROM}_WHOLE_POPULATION_Statistics.Rda\"))\n\n      system(glue::glue(\"echo Generating PopGenome DataFrames - Extracting Window Bins\"))\n\n      windowStarts <- data.frame(snp_index = 1:length(colnames(GENOME_OBJECT@BIG.BIAL[[1]])),\n                                 position = colnames(GENOME_OBJECT@BIG.BIAL[[1]]))\n      \n      slide_index <- cbind(data.frame(lapply(GENOME_OBJECT@SLIDE.POS,  function(x) as.numeric(floor(mean(x)))))) %>%\n        tidyr::gather(temp, snp_index) %>%\n        dplyr::select(-temp) %>%\n        dplyr::left_join(., windowStarts, by = \"snp_index\")\n\n      system(glue::glue(\"echo Generating PopGenome DataFrames - Extracting Linkage Stats\"))\n\n      linkage_df <- data.frame(Wall.B = c(GENOME_OBJECT@Wall.B),\n                               Wall.Q = c(GENOME_OBJECT@Wall.Q),\n                               Kelly.Z_nS = c(GENOME_OBJECT@Kelly.Z_nS),\n                               Rozas.ZZ = c(GENOME_OBJECT@Rozas.ZZ),\n                               Rozas.ZA = c(GENOME_OBJECT@Rozas.ZA)) %>%\n                                 dplyr::mutate(Population = \"WHOLE_POPULATION\",\n                                               WindowPosition = slide_index\\$position) %>%\n        tidyr::gather(LinkageStat, value, -Population, -WindowPosition)\n\n      save(linkage_df, file = glue::glue(\"CHROMOSOME-{ANALYSIS_CHROM}_WHOLE_POPULATION_Linkage_Statistics.Rda\"))\n\n      system(glue::glue(\"echo Generating PopGenome DataFrames - Extracting Neutrality and Diversity Stats\"))\n\n      neutrality_df <- data.frame(Tajima.D = c(GENOME_OBJECT@Tajima.D),\n                                  n.segregating.sites = c(GENOME_OBJECT@n.segregating.sites),\n                                  Fu.Li.F = c(GENOME_OBJECT@Fu.Li.F),\n                                  Fu.Li.D = c(GENOME_OBJECT@Fu.Li.D),\n                                  Fay.Wu.H = c(GENOME_OBJECT@Fay.Wu.H),\n                                  Zeng.E = c(GENOME_OBJECT@Zeng.E),\n                                  theta_Tajima = c(GENOME_OBJECT@theta_Tajima),\n                                  theta_Watterson = c(GENOME_OBJECT@theta_Watterson),\n                                  theta_Achaz.Watterson = c(GENOME_OBJECT@theta_Achaz.Watterson),\n                                  theta_Achaz.Tajima = c(GENOME_OBJECT@theta_Achaz.Tajima),\n                                  theta_Fay.Wu = c(GENOME_OBJECT@theta_Fay.Wu),\n                                  theta_Zeng = c(GENOME_OBJECT@theta_Zeng),\n                                  nuc.diversity.within = c(GENOME_OBJECT@nuc.diversity.within),\n                                  PI = c(GENOME_OBJECT@Pi),\n                                  theta_Fu.Li = c(GENOME_OBJECT@theta_Fu.Li),\n                                  hap.diversity.within = c(GENOME_OBJECT@hap.diversity.within)) %>%\n        dplyr::mutate(Population = \"WHOLE_POPULATION\",\n                      WindowPosition = slide_index\\$position) %>%\n        tidyr::gather(statistic, value, -Population, -WindowPosition)\n      \n      save(neutrality_df, file = glue::glue(\"CHROMOSOME-{ANALYSIS_CHROM}_WHOLE_POPULATION_Neutrality_Diversity_Statistics.Rda\"))\n    \"\"\"",
        "nb_lignes_script": 117,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "smallvcf_classic_popgen_window",
            "contigs_popgenome_window"
        ],
        "nb_inputs": 2,
        "outputs": [
            "popgenome_wholepop_statistics"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag { CHROM }",
            "publishDir \"${params.out}/POPGENOME/WINDOW/${CHROM}\", mode: \"copy\"",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "plot_popgenome_whole_pop": {
        "name_process": "plot_popgenome_whole_pop",
        "string_process": "\nprocess plot_popgenome_whole_pop {\n\n\n  publishDir \"${params.out}/POPGENOME/PLOTS\", mode: \"copy\", pattern: \"*.png\"\n  publishDir \"${params.out}/POPGENOME/WHOLE_GENOME\", mode: \"copy\", pattern: \"*.Rda\"\n\n  input:\n    file(\"*\") from popgenome_wholepop_statistics.collect()\n\n  output:\n    set file(\"Ce_Genome-wide_Neutrality_stats.Rda\"), file(\"Ce_Genome-wide_Linkage_stats.Rda\") into whole_genome_popgenome\n    file(\"*.png\") into whole_genome_popgenome_plots\n\n\n  script:\n\n  \"\"\"\n    #!/usr/bin/env Rscript\n    library(tidyverse)\n\n    # PLOT NEUTRALITY STATISTICS\n    Neutrality_files <- grep(glue::glue(\"Neutrality\"),list.files(), value = T)\n    \n    neutrality_ls <- list()\n    for( i in 1:length(Neutrality_files) ){\n      \n      chr <- strsplit(strsplit(Neutrality_files[i],split = \"_\")[[1]][1], split=\"-\")[[1]][[2]]\n      if(chr == \"23\"){\n        chr <- \"X\"\n      }\n\n      load(Neutrality_files[i])\n      neutrality_ls[[i]] <- data.frame(neutrality_df) %>%\n        dplyr::mutate(CHROM = chr)\n    }\n\n    neutrality_df <- dplyr::bind_rows(neutrality_ls)\n    \n    save(neutrality_df, file = glue::glue(\"Ce_Genome-wide_Neutrality_stats.Rda\"))\n\n    for(neutrality_statistic in unique(neutrality_df\\$statistic)){\n\n      neutrpl <- neutrality_df %>%\n        dplyr::filter(statistic == neutrality_statistic) %>%\n        ggplot()+\n        aes(x = WindowPosition/1e6, y = value) +\n        geom_point(alpha = 0.25 ) +\n        geom_point(alpha = 0.5, size = 0.5) +\n        theme_bw()+\n        facet_grid(.~CHROM, scales =\"free\", space = \"free_x\") +\n        theme(axis.text.x = ggplot2::element_text(size = 16),\n              axis.text.y = ggplot2::element_text(size = 16),\n              axis.title.x = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3),\n              axis.title.y = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3)) +\n        labs(x = \"Genomic Position (Mb)\",\n             y = neutrality_statistic)\n      \n      ggsave(plot = neutrpl,\n             glue::glue(\"Genome-wide_{neutrality_statistic}.png\"),\n             width = 12,\n             height = 4,\n             dpi = 300)\n    }\n\n\n    Linkage_files <- grep(glue::glue(\"Linkage\"),list.files(), value = T)\n  \n    linkage_ls <- list()\n    for( i in 1:length(Linkage_files)){\n      \n      chr <- strsplit(strsplit(Linkage_files[i],split = \"_\")[[1]][1], split=\"-\")[[1]][[2]]\n      if(chr == \"23\"){\n        chr <- \"X\"\n      }\n      load(Linkage_files[i])\n      linkage_ls[[i]] <- data.frame(linkage_df) %>%\n        dplyr::mutate(CHROM = chr)\n    }\n    \n    linkage_df <- dplyr::bind_rows(linkage_ls)\n    \n    save(linkage_df, file = glue::glue(\"Ce_Genome-wide_Linkage_stats.Rda\"))\n    \n    for(linkage_statistic in unique(linkage_df\\$LinkageStat)){\n\n      linkpl <- linkage_df %>%\n        dplyr::filter(LinkageStat == linkage_statistic) %>%\n        ggplot()+\n        aes(x = WindowPosition/1e6, y = value, color = Population) +\n        geom_point(size = 0.5, alpha = 0.5)+\n        theme_bw() +\n        facet_grid(.~CHROM, scales =\"free\", space = \"free_x\") +\n        theme(axis.text.x = ggplot2::element_text(size = 16),\n              axis.text.y = ggplot2::element_text(size = 16),\n              # legend.position = \"none\",\n              axis.title.x = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3),\n              axis.title.y = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3)) +\n        labs(x = \"Genomic Position (Mb)\",\n             y = linkage_statistic)\n      \n      ggsave(plot = linkpl, \n             glue::glue(\"Genome-wide_{linkage_statistic}.png\"),\n             width = 12,\n             height = 4,\n             dpi = 300)\n    }\n\n  \"\"\"\n\n\n}",
        "nb_lignes_process": 110,
        "string_script": "  \"\"\"\n    #!/usr/bin/env Rscript\n    library(tidyverse)\n\n    # PLOT NEUTRALITY STATISTICS\n    Neutrality_files <- grep(glue::glue(\"Neutrality\"),list.files(), value = T)\n    \n    neutrality_ls <- list()\n    for( i in 1:length(Neutrality_files) ){\n      \n      chr <- strsplit(strsplit(Neutrality_files[i],split = \"_\")[[1]][1], split=\"-\")[[1]][[2]]\n      if(chr == \"23\"){\n        chr <- \"X\"\n      }\n\n      load(Neutrality_files[i])\n      neutrality_ls[[i]] <- data.frame(neutrality_df) %>%\n        dplyr::mutate(CHROM = chr)\n    }\n\n    neutrality_df <- dplyr::bind_rows(neutrality_ls)\n    \n    save(neutrality_df, file = glue::glue(\"Ce_Genome-wide_Neutrality_stats.Rda\"))\n\n    for(neutrality_statistic in unique(neutrality_df\\$statistic)){\n\n      neutrpl <- neutrality_df %>%\n        dplyr::filter(statistic == neutrality_statistic) %>%\n        ggplot()+\n        aes(x = WindowPosition/1e6, y = value) +\n        geom_point(alpha = 0.25 ) +\n        geom_point(alpha = 0.5, size = 0.5) +\n        theme_bw()+\n        facet_grid(.~CHROM, scales =\"free\", space = \"free_x\") +\n        theme(axis.text.x = ggplot2::element_text(size = 16),\n              axis.text.y = ggplot2::element_text(size = 16),\n              axis.title.x = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3),\n              axis.title.y = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3)) +\n        labs(x = \"Genomic Position (Mb)\",\n             y = neutrality_statistic)\n      \n      ggsave(plot = neutrpl,\n             glue::glue(\"Genome-wide_{neutrality_statistic}.png\"),\n             width = 12,\n             height = 4,\n             dpi = 300)\n    }\n\n\n    Linkage_files <- grep(glue::glue(\"Linkage\"),list.files(), value = T)\n  \n    linkage_ls <- list()\n    for( i in 1:length(Linkage_files)){\n      \n      chr <- strsplit(strsplit(Linkage_files[i],split = \"_\")[[1]][1], split=\"-\")[[1]][[2]]\n      if(chr == \"23\"){\n        chr <- \"X\"\n      }\n      load(Linkage_files[i])\n      linkage_ls[[i]] <- data.frame(linkage_df) %>%\n        dplyr::mutate(CHROM = chr)\n    }\n    \n    linkage_df <- dplyr::bind_rows(linkage_ls)\n    \n    save(linkage_df, file = glue::glue(\"Ce_Genome-wide_Linkage_stats.Rda\"))\n    \n    for(linkage_statistic in unique(linkage_df\\$LinkageStat)){\n\n      linkpl <- linkage_df %>%\n        dplyr::filter(LinkageStat == linkage_statistic) %>%\n        ggplot()+\n        aes(x = WindowPosition/1e6, y = value, color = Population) +\n        geom_point(size = 0.5, alpha = 0.5)+\n        theme_bw() +\n        facet_grid(.~CHROM, scales =\"free\", space = \"free_x\") +\n        theme(axis.text.x = ggplot2::element_text(size = 16),\n              axis.text.y = ggplot2::element_text(size = 16),\n              # legend.position = \"none\",\n              axis.title.x = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3),\n              axis.title.y = ggplot2::element_text(size = 18, face = \"bold\", color = \"black\", vjust = -0.3)) +\n        labs(x = \"Genomic Position (Mb)\",\n             y = linkage_statistic)\n      \n      ggsave(plot = linkpl, \n             glue::glue(\"Genome-wide_{linkage_statistic}.png\"),\n             width = 12,\n             height = 4,\n             dpi = 300)\n    }\n\n  \"\"\"",
        "nb_lignes_script": 91,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "popgenome_wholepop_statistics"
        ],
        "nb_inputs": 1,
        "outputs": [
            "whole_genome_popgenome",
            "whole_genome_popgenome_plots"
        ],
        "nb_outputs": 2,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/POPGENOME/PLOTS\", mode: \"copy\", pattern: \"*.png\"",
            "publishDir \"${params.out}/POPGENOME/WHOLE_GENOME\", mode: \"copy\", pattern: \"*.Rda\""
        ],
        "when": "",
        "stub": ""
    },
    "popgenome_gene_complete": {
        "name_process": "popgenome_gene_complete",
        "string_process": "\nprocess popgenome_gene_complete {\n\n  tag { \"${CHROM}\" }\n\n  publishDir \"${params.out}/POPGENOME/GENE/${CHROM}\", mode: \"copy\"\n\n  input:\n    set file(vcf), file(vindex) from smallvcf_classic_popgen_gene\n    each CHROM from contigs_popgenome_gene\n\n  output:\n    set val(\"${CHROM}\"), file(\"CHROMOSOME-${CHROM}_WHOLE_POPULATION_Statistics.Rda\"), file(\"CHROMOSOME-${CHROM}_WHOLE_POPULATION_PopGenome_Object.Rda\") into fst_complete_gene_output\n\n    \"\"\"\n\n      Rscript --vanilla `which PopGenome_Gene_exons.R` ${CHROM} ${params.anc} ${vcf} ${params.gff}\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n\n      Rscript --vanilla `which PopGenome_Gene_exons.R` ${CHROM} ${params.anc} ${vcf} ${params.gff}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "smallvcf_classic_popgen_gene",
            "contigs_popgenome_gene"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fst_complete_gene_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag { \"${CHROM}\" }",
            "publishDir \"${params.out}/POPGENOME/GENE/${CHROM}\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "popgenome_gene_kpop": {
        "name_process": "popgenome_gene_kpop",
        "string_process": "\nprocess popgenome_gene_kpop {\n\n  tag { \"${CHROM}\" }\n\n  publishDir \"${params.out}/POPGENOME/SUBPOPs/GENE/${CHROM}\", mode: \"copy\"\n\n  input:\n    set file(vcf), file(vindex) from smallvcf_classic_popgen_gene_admix_pops\n    file(popfile) from admixture_bestk_to_popgenome\n    each CHROM from contigs_popgenome_gene_subpops\n\n  output:\n    set val(\"${CHROM}\"), file(\"CHROMOSOME-${CHROM}_WHOLE_POPULATION_FST_Statistics.Rda\"), file(\"CHROMOSOME-${CHROM}_WHOLE_POPULATION_ND_Statistics.Rda\") into fst_pops_gene_output\n\n    \"\"\"\n\n      Rscript --vanilla `which PopGenome_Gene_exons_subpops.R` ${CHROM} ${params.anc} ${vcf} ${params.gff} ${popfile}\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n\n      Rscript --vanilla `which PopGenome_Gene_exons_subpops.R` ${CHROM} ${params.anc} ${vcf} ${params.gff} ${popfile}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "smallvcf_classic_popgen_gene_admix_pops",
            "admixture_bestk_to_popgenome",
            "contigs_popgenome_gene_subpops"
        ],
        "nb_inputs": 3,
        "outputs": [
            "fst_pops_gene_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag { \"${CHROM}\" }",
            "publishDir \"${params.out}/POPGENOME/SUBPOPs/GENE/${CHROM}\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_h21": {
        "name_process": "vcf_to_h21",
        "string_process": "\nprocess vcf_to_h21 {\n\n  publishDir \"${params.out}/H21/INPUT/\", mode: \"copy\"\n\n  tag {CHROM}\n\n  input:\n    set file(vcf), file(vindex) from smallvcf_h21\n    each CHROM from contigs_h21\n\n  output:\n    set val(CHROM), file(\"${CHROM}_H21_input.txt\") into h21_input\n\n  \"\"\"\n\n    bcftools view -v snps ${vcf} |\\\\\n    bcftools query --regions ${CHROM} -f '%POS,[%TGT,]\\\\n' |\\\\\n    sed 's/,\\$//' |\\\\\n    sed -E 's/(.)\\\\/(.)/\\\\2/g' |\\\\\n    sed 's/\\\\./N/g' > ${CHROM}_H21_input.txt\n  \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n\n    bcftools view -v snps ${vcf} |\\\\\n    bcftools query --regions ${CHROM} -f '%POS,[%TGT,]\\\\n' |\\\\\n    sed 's/,\\$//' |\\\\\n    sed -E 's/(.)\\\\/(.)/\\\\2/g' |\\\\\n    sed 's/\\\\./N/g' > ${CHROM}_H21_input.txt\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "smallvcf_h21",
            "contigs_h21"
        ],
        "nb_inputs": 2,
        "outputs": [
            "h21_input"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/H21/INPUT/\", mode: \"copy\"",
            "tag {CHROM}"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_eigstrat_files": {
        "name_process": "vcf_to_eigstrat_files",
        "string_process": "\nprocess vcf_to_eigstrat_files {\n\n    tag {\"PREPARE EIGENSTRAT FILES\"}\n\n    publishDir \"${params.out}/EIGESTRAT/INPUTFILES/\", mode: 'copy'\n\n    input:\n      set file(vcf), file(vcfindex) from annotated_vcf_eigenstrat\n\n    output:\n      set file(\"eigenstrat_input.ped\"), file(\"eigenstrat_input.pedsnp\"), file(\"eigenstrat_input.pedind\") into eigenstrat_input\n\n      \"\"\"\n\n      bcftools view --regions I,II,III,IV,V,X ${vcf} |\\\\\n      bcftools norm -m +snps -Oz -o ce_norm.vcf.gz\n\n      tabix -p vcf ce_norm.vcf.gz\n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --indep-pairwise 50 10 0.95 --allow-extra-chr \n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --extract plink.prune.in --geno --recode12 --out eigenstrat_input --allow-extra-chr\n\n      awk -F\":\" '\\$1=\\$1' OFS=\"\\\\t\" plink.prune.in | \\\\\n      sort -k1,1d -k2,2n > markers.txt\n\n      bcftools query -l ce_norm.vcf.gz |\\\\\n      sort > sorted_samples.txt \n\n      bcftools view -v snps -S sorted_samples.txt -R markers.txt ce_norm.vcf.gz |\\\\\n      bcftools query -f '%CHROM\\\\t%CHROM:%POS\\\\t%cM\\\\t%POS\\\\t%REF\\\\t%ALT\\\\n' ce_norm.vcf.gz |\\\\\n      sed 's/^III/3/g' |\\\\\n      sed 's/^II/2/g' |\\\\\n      sed 's/^IV/4/g' |\\\\\n      sed 's/^I/1/g' |\\\\\n      sed 's/^V/5/g' > eigenstrat_input.pedsnp      \n\n      cut -f-6 -d' ' eigenstrat_input.ped |\\\\\n      awk '{print 1, \\$2, \\$3, \\$3, \\$5, 1}'  > eigenstrat_input.pedind\n\n      echo \"rerun\"\n      \"\"\"\n\n}",
        "nb_lignes_process": 43,
        "string_script": "\"\"\"\n\n      bcftools view --regions I,II,III,IV,V,X ${vcf} |\\\\\n      bcftools norm -m +snps -Oz -o ce_norm.vcf.gz\n\n      tabix -p vcf ce_norm.vcf.gz\n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --indep-pairwise 50 10 0.95 --allow-extra-chr \n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --extract plink.prune.in --geno --recode12 --out eigenstrat_input --allow-extra-chr\n\n      awk -F\":\" '\\$1=\\$1' OFS=\"\\\\t\" plink.prune.in | \\\\\n      sort -k1,1d -k2,2n > markers.txt\n\n      bcftools query -l ce_norm.vcf.gz |\\\\\n      sort > sorted_samples.txt \n\n      bcftools view -v snps -S sorted_samples.txt -R markers.txt ce_norm.vcf.gz |\\\\\n      bcftools query -f '%CHROM\\\\t%CHROM:%POS\\\\t%cM\\\\t%POS\\\\t%REF\\\\t%ALT\\\\n' ce_norm.vcf.gz |\\\\\n      sed 's/^III/3/g' |\\\\\n      sed 's/^II/2/g' |\\\\\n      sed 's/^IV/4/g' |\\\\\n      sed 's/^I/1/g' |\\\\\n      sed 's/^V/5/g' > eigenstrat_input.pedsnp      \n\n      cut -f-6 -d' ' eigenstrat_input.ped |\\\\\n      awk '{print 1, \\$2, \\$3, \\$3, \\$5, 1}'  > eigenstrat_input.pedind\n\n      echo \"rerun\"\n      \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "annotated_vcf_eigenstrat"
        ],
        "nb_inputs": 1,
        "outputs": [
            "eigenstrat_input"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "tag {\"PREPARE EIGENSTRAT FILES\"}",
            "publishDir \"${params.out}/EIGESTRAT/INPUTFILES/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_eigenstrat_no_outlier_removal": {
        "name_process": "run_eigenstrat_no_outlier_removal",
        "string_process": "\nprocess run_eigenstrat_no_outlier_removal {\n\n    publishDir \"${params.out}/EIGESTRAT/NO_REMOVAL/\", mode: 'copy'\n\n    input:\n      set file(\"eigenstrat_input.ped\"), file(\"eigenstrat_input.pedsnp\"), file(\"eigenstrat_input.pedind\") from eigenstrat_no_outlier\n      file(eigenparameters) from eigenstrat_noremoval\n\n    output:\n      set file(\"eigenstrat_no_removal.evac\"), file(\"eigenstrat_no_removal.eval\"), file(\"logfile_no_removal.txt\"), file(\"eigenstrat_no_removal_relatedness\"), file(\"eigenstrat_no_removal_relatedness.id\"), file(\"TracyWidom_statistics_no_removal.tsv\") into eigenstrat_outlier_removal_output\n\n      \"\"\"\n\n      smartpca -p ${eigenparameters} > logfile_no_removal.txt\n\n      sed -n -e '/Tracy/,\\$p' logfile_no_removal.txt |\\\n      sed -e '/kurt/,\\$d' |\\\n      awk '\\$0 !~ \"##\" && \\$0 !~ \"#\" {print}' |\\\n      sed -e \"s/[[:space:]]\\\\+/ /g\" |\\\n      sed 's/^ //g' |\\\n      awk 'BEGIN{print \"N\", \"eigenvalue\", \"difference\", \"twstat\", \"p-value\", \"effect.n\"}; {print}' OFS=\"\\\\t\" |\\\n      awk -F\" \" '\\$1=\\$1' OFS=\"\\\\t\" > TracyWidom_statistics_no_removal.tsv\n      \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n\n      smartpca -p ${eigenparameters} > logfile_no_removal.txt\n\n      sed -n -e '/Tracy/,\\$p' logfile_no_removal.txt |\\\n      sed -e '/kurt/,\\$d' |\\\n      awk '\\$0 !~ \"##\" && \\$0 !~ \"#\" {print}' |\\\n      sed -e \"s/[[:space:]]\\\\+/ /g\" |\\\n      sed 's/^ //g' |\\\n      awk 'BEGIN{print \"N\", \"eigenvalue\", \"difference\", \"twstat\", \"p-value\", \"effect.n\"}; {print}' OFS=\"\\\\t\" |\\\n      awk -F\" \" '\\$1=\\$1' OFS=\"\\\\t\" > TracyWidom_statistics_no_removal.tsv\n      \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "eigenstrat_no_outlier",
            "eigenstrat_noremoval"
        ],
        "nb_inputs": 2,
        "outputs": [
            "eigenstrat_outlier_removal_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/EIGESTRAT/NO_REMOVAL/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_eigenstrat_with_outlier_removal": {
        "name_process": "run_eigenstrat_with_outlier_removal",
        "string_process": "\nprocess run_eigenstrat_with_outlier_removal {\n\n\n    publishDir \"${params.out}/EIGESTRAT/OUTLIER_REMOVAL/\", mode: 'copy'\n\n    input:\n      set file(\"eigenstrat_input.ped\"), file(\"eigenstrat_input.pedsnp\"), file(\"eigenstrat_input.pedind\") from eigenstrat_outlier_removal\n      file(eigenparameters) from eigenstrat_removal\n\n    output:\n      set file(\"eigenstrat_outliers_removed.evac\"), file(\"eigenstrat_outliers_removed.eval\"), file(\"logfile_outlier.txt\"), file(\"eigenstrat_outliers_removed_relatedness\"), file(\"eigenstrat_outliers_removed_relatedness.id\"), file(\"TracyWidom_statistics_outlier_removal.tsv\") into eigenstrat_no_outlier_removal_output\n      \n      \"\"\"\n\n      smartpca -p ${eigenparameters} > logfile_outlier.txt\n\n      sed -n -e '/Tracy/,\\$p' logfile_outlier.txt |\\\n      sed -e '/kurt/,\\$d' |\\\n      awk '\\$0 !~ \"##\" && \\$0 !~ \"#\" {print}' |\\\n      sed -e \"s/[[:space:]]\\\\+/ /g\" |\\\n      sed 's/^ //g' |\\\n      awk 'BEGIN{print \"N\", \"eigenvalue\", \"difference\", \"twstat\", \"p-value\", \"effect.n\"}; {print}' OFS=\"\\\\t\" |\\\n      awk -F\" \" '\\$1=\\$1' OFS=\"\\\\t\" > TracyWidom_statistics_outlier_removal.tsv\n      \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n\n      smartpca -p ${eigenparameters} > logfile_outlier.txt\n\n      sed -n -e '/Tracy/,\\$p' logfile_outlier.txt |\\\n      sed -e '/kurt/,\\$d' |\\\n      awk '\\$0 !~ \"##\" && \\$0 !~ \"#\" {print}' |\\\n      sed -e \"s/[[:space:]]\\\\+/ /g\" |\\\n      sed 's/^ //g' |\\\n      awk 'BEGIN{print \"N\", \"eigenvalue\", \"difference\", \"twstat\", \"p-value\", \"effect.n\"}; {print}' OFS=\"\\\\t\" |\\\n      awk -F\" \" '\\$1=\\$1' OFS=\"\\\\t\" > TracyWidom_statistics_outlier_removal.tsv\n      \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "eigenstrat_outlier_removal",
            "eigenstrat_removal"
        ],
        "nb_inputs": 2,
        "outputs": [
            "eigenstrat_no_outlier_removal_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/EIGESTRAT/OUTLIER_REMOVAL/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prep_files_for_DAPC": {
        "name_process": "prep_files_for_DAPC",
        "string_process": "\nprocess prep_files_for_DAPC {\n\n\n    publishDir \"${params.out}/DAPC/INPUT_FILES\", mode: 'copy'\n\n    input:\n      set file(vcf), file(vcfindex) from smallvcf_dapc\n\n    output:\n      file(\"dapc_input.raw\") into dapc_input\n      \n      \"\"\"\n\n      bcftools view --regions I,II,III,IV,V,X ${vcf} |\\\\\n      bcftools norm -m +snps -Oz -o ce_norm.vcf.gz\n\n      tabix -p vcf ce_norm.vcf.gz\n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --indep-pairwise 50 10 0.95 --allow-extra-chr \n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --extract plink.prune.in --geno --recodeA --out dapc_input --allow-extra-chr\n      \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n\n      bcftools view --regions I,II,III,IV,V,X ${vcf} |\\\\\n      bcftools norm -m +snps -Oz -o ce_norm.vcf.gz\n\n      tabix -p vcf ce_norm.vcf.gz\n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --indep-pairwise 50 10 0.95 --allow-extra-chr \n\n      plink --vcf ce_norm.vcf.gz --snps-only --biallelic-only --set-missing-var-ids @:# --extract plink.prune.in --geno --recodeA --out dapc_input --allow-extra-chr\n      \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "smallvcf_dapc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dapc_input"
        ],
        "nb_outputs": 1,
        "name_workflow": "Thatguy027__CePopulationGenetics-nf",
        "directive": [
            "publishDir \"${params.out}/DAPC/INPUT_FILES\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
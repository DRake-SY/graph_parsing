{
    "OPERATION_1": {
        "string": "K = Channel.from(2..params.admix_k)",
        "origin": [
            [
                "2..params.admix_k",
                "V"
            ]
        ],
        "gives": [
            [
                "K",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ld_range = Channel.from(params.admix_ld)",
        "origin": [
            [
                "params.admix_ld",
                "V"
            ]
        ],
        "gives": [
            [
                "ld_range",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.from(CONTIG_LIST)\n       .into{contigs_popgenome_window;\n             contigs_popgenome_gene;\n             contigs_h21;\n             contigs_raisd;\n             contigs_popgenome_gene_subpops;\n             contigs_other1;\n             contigs_other2}",
        "origin": [
            [
                "CONTIG_LIST",
                "V"
            ]
        ],
        "gives": [
            [
                "contigs_popgenome_window",
                "P"
            ],
            [
                "contigs_popgenome_gene",
                "P"
            ],
            [
                "contigs_h21",
                "P"
            ],
            [
                "contigs_raisd",
                "P"
            ],
            [
                "contigs_popgenome_gene_subpops",
                "P"
            ],
            [
                "contigs_other1",
                "P"
            ],
            [
                "contigs_other2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "pop_strains = Channel.from(pop_file.collect { it.tokenize( ' ' ) })\n             .map { POP, MAF, SM -> [POP, MAF, SM] }",
        "origin": [],
        "gives": [
            [
                "pop_strains",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "small_vcf = Channel.fromPath(params.snv_vcf)",
        "origin": [
            [
                "params.snv_vcf",
                "A"
            ]
        ],
        "gives": [
            [
                "small_vcf",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "small_index = Channel.fromPath(\"${params.snv_vcf}\" + \".tbi\")",
        "origin": [
            [
                "\"${params.snv_vcf}\" + \".tbi\"",
                "A"
            ]
        ],
        "gives": [
            [
                "small_index",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "eigenstrat_noremoval = Channel.fromPath(params.eigen_par_no_removal)",
        "origin": [
            [
                "params.eigen_par_no_removal",
                "A"
            ]
        ],
        "gives": [
            [
                "eigenstrat_noremoval",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "eigenstrat_removal = Channel.fromPath(params.eigen_par_outlier_removal)",
        "origin": [
            [
                "params.eigen_par_outlier_removal",
                "A"
            ]
        ],
        "gives": [
            [
                "eigenstrat_removal",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.from( 1000..2000 )\n       .randomSample( 10, 234 )\n       .into{ rseed_find_best_k;\n              rseed_run_best_k}",
        "origin": [
            [
                "1000..2000",
                "V"
            ]
        ],
        "gives": [
            [
                "rseed_find_best_k",
                "P"
            ],
            [
                "rseed_run_best_k",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.from( 3,4,5,6,7,8 )\n       .spread(dapc_input)\n       .into{dapc_pop_input}",
        "origin": [
            [
                "dapc_input",
                "V"
            ],
            [
                "3,4,5,6,7,8",
                "V"
            ]
        ],
        "gives": [
            [
                "dapc_pop_input",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "pop_strains\n  .combine(ld_range)\n  .into{subset_vcf_input;\n        plink_input; \n        print_plink_input }",
        "origin": [
            [
                "pop_strains",
                "P"
            ],
            [
                "ld_range",
                "P"
            ]
        ],
        "gives": [
            [
                "subset_vcf_input",
                "P"
            ],
            [
                "plink_input",
                "P"
            ],
            [
                "print_plink_input",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "small_vcf\n  .spread(small_index)\n  .into { smallvcf_ancestor;;\n          smallvcf_annotations;\n          }",
        "origin": [
            [
                "small_vcf",
                "P"
            ],
            [
                "small_index",
                "V"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "annotated_vcf\n  .into { annotated_vcf_haplotype;\n          annotated_vcf_popgen;\n          annotated_vcf_eigenstrat;\n          smallvcf_admixture;\n          smallvcf_phylo;\n          smallvcf_haplotype;\n          smallvcf_recombination;\n          smallvcf_classic_popgen_window;\n          smallvcf_classic_popgen_gene;\n          smallvcf_classic_popgen_gene_admix_pops;\n          smallvcf_haplotype_popgen;\n          smallvcf_popstructure;\n          smallvcf_eigenstrat;\n          smallvcf_dapc;\n          smallvcf_h21;\n          smallvcf_raisd;\n          smallvcf_other}",
        "origin": [
            [
                "annotated_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "annotated_vcf_haplotype",
                "P"
            ],
            [
                "annotated_vcf_popgen",
                "P"
            ],
            [
                "annotated_vcf_eigenstrat",
                "P"
            ],
            [
                "smallvcf_admixture",
                "P"
            ],
            [
                "smallvcf_phylo",
                "P"
            ],
            [
                "smallvcf_haplotype",
                "P"
            ],
            [
                "smallvcf_recombination",
                "P"
            ],
            [
                "smallvcf_classic_popgen_window",
                "P"
            ],
            [
                "smallvcf_classic_popgen_gene",
                "P"
            ],
            [
                "smallvcf_classic_popgen_gene_admix_pops",
                "P"
            ],
            [
                "smallvcf_haplotype_popgen",
                "P"
            ],
            [
                "smallvcf_popstructure",
                "P"
            ],
            [
                "smallvcf_eigenstrat",
                "P"
            ],
            [
                "smallvcf_dapc",
                "P"
            ],
            [
                "smallvcf_h21",
                "P"
            ],
            [
                "smallvcf_raisd",
                "P"
            ],
            [
                "smallvcf_other",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "smallvcf_admixture\n  .spread(subset_vcf_input)\n  .into { vcf_admix_plink;\n          vcf_admix_print }",
        "origin": [
            [
                "smallvcf_admixture",
                "P"
            ],
            [
                "subset_vcf_input",
                "V"
            ]
        ],
        "gives": [
            [
                "vcf_admix_plink",
                "P"
            ],
            [
                "vcf_admix_print",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "plink_output\n  .into{ admixture_find_best_k;\n         admixture_run_best_k}",
        "origin": [
            [
                "plink_output",
                "P"
            ]
        ],
        "gives": [
            [
                "admixture_find_best_k",
                "P"
            ],
            [
                "admixture_run_best_k",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "K\n  .spread(rseed_find_best_k)\n  .spread(admixture_find_best_k)\n  .into{ admixture_genome;\n         admixture_regions}",
        "origin": [
            [
                "K",
                "P"
            ],
            [
                "rseed_find_best_k)\n  .spread(admixture_find_best_k",
                "V"
            ]
        ],
        "gives": [
            [
                "admixture_genome",
                "P"
            ],
            [
                "admixture_regions",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "admix_results\n  .groupTuple()\n  .into{ grouped_admix;\n         grouped_print}",
        "origin": [
            [
                "admix_results",
                "P"
            ]
        ],
        "gives": [
            [
                "grouped_admix",
                "P"
            ],
            [
                "grouped_print",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "bestk\n  .splitText()\n  .set{k_range}",
        "origin": [
            [
                "bestk",
                "P"
            ]
        ],
        "gives": [
            [
                "k_range",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "admixture_run_best_k\n  .spread(k_range)\n  .into{ rerun_admixture;\n         rerun_admixture_extra}",
        "origin": [
            [
                "admixture_run_best_k",
                "P"
            ],
            [
                "k_range",
                "V"
            ]
        ],
        "gives": [
            [
                "rerun_admixture",
                "P"
            ],
            [
                "rerun_admixture_extra",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "eigenstrat_input\n  .into{eigenstrat_no_outlier;\n        eigenstrat_outlier_removal;\n        eigenstrat_fst}",
        "origin": [
            [
                "eigenstrat_input",
                "P"
            ]
        ],
        "gives": [
            [
                "eigenstrat_no_outlier",
                "P"
            ],
            [
                "eigenstrat_outlier_removal",
                "P"
            ],
            [
                "eigenstrat_fst",
                "P"
            ]
        ]
    }
}
{
    "preprocess_fai": {
        "name_process": "preprocess_fai",
        "string_process": " process preprocess_fai {\n      tag \"${fasta}\"\n      container 'lifebitai/samtools:latest'\n\n      input:\n      file(fasta) from fasta_to_index\n\n      output:\n      file(\"${fasta}.fai\") into (fai_clairvoyante, fai_sniffles)\n\n      script:\n      \"\"\"\n      samtools faidx $fasta\n      \"\"\"\n  }",
        "nb_lignes_process": 13,
        "string_script": "      \"\"\"\n      samtools faidx $fasta\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta_to_index"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"${fasta}\"",
            "container 'lifebitai/samtools:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "minimap2": {
        "name_process": "minimap2",
        "string_process": "\nprocess minimap2 {\n    tag \"$reads\"\n    container 'evolbioinfo/minimap2:v2.14'\n\n    cpus threads\n\n    input:\n    set val(name), file(reads), file(fasta) from minimap2\n\n    output:\n    set val(name), file(\"${name}.sam\") into mapped_reads\n\n    script:\n    \"\"\"\n    minimap2 -ax map-ont -t ${task.cpus} $fasta $reads > ${name}.sam\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    minimap2 -ax map-ont -t ${task.cpus} $fasta $reads > ${name}.sam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "minimap2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapped_reads"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$reads\"",
            "container 'evolbioinfo/minimap2:v2.14'",
            "cpus threads"
        ],
        "when": "",
        "stub": ""
    },
    "bwa_sort": {
        "name_process": "bwa_sort",
        "string_process": "\nprocess bwa_sort {\n    tag \"$sam\"\n    container 'lifebitai/samtools:latest'\n\n    input:\n    set val(name), file(sam) from mapped_reads\n\n    output:\n    set val(name), file(\"${name}-sorted.bam\") into sorted_bam\n\n    \"\"\"\n    samtools sort -o ${name}-sorted.bam -O BAM $sam\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    samtools sort -o ${name}-sorted.bam -O BAM $sam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mapped_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$sam\"",
            "container 'lifebitai/samtools:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "mark_duplicates": {
        "name_process": "mark_duplicates",
        "string_process": "\nprocess mark_duplicates {\n    tag \"$bam\"\n    container 'broadinstitute/gatk:latest'\n\n    input:\n    set val(name), file(bam) from sorted_bam\n\n    output:\n    set val(name), file(\"${name}-marked_dup.bam\"), file(\"${name}-marked_dup.bai\") into marked_bam_qc, marked_bam_clairvoyante, marked_bam_sniffles, marked_bam_svim\n    file \"${name}.bam.metrics\" into mark_dup_report\n\n    \"\"\"\n    gatk MarkDuplicates \\\n    -I ${bam} \\\n    --CREATE_INDEX true \\\n    -M ${name}.bam.metrics \\\n    -O ${name}-marked_dup.bam\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    gatk MarkDuplicates \\\n    -I ${bam} \\\n    --CREATE_INDEX true \\\n    -M ${name}.bam.metrics \\\n    -O ${name}-marked_dup.bam\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "sorted_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "marked_bam_qc",
            "marked_bam_clairvoyante",
            "marked_bam_sniffles",
            "marked_bam_svim",
            "mark_dup_report"
        ],
        "nb_outputs": 5,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$bam\"",
            "container 'broadinstitute/gatk:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "bam_qc": {
        "name_process": "bam_qc",
        "string_process": "\nprocess bam_qc {\n    tag \"$bam\"\n    container 'maxulysse/sarek:latest'\n\n    input:\n    set val(name), file(bam), file(bai) from marked_bam_qc\n\n    output:\n    file(\"${name}\") into bam_qc_report\n\n    when: !params.skip_multiqc\n\n    script:\n                                                           \n    \"\"\"\n    qualimap \\\n    bamqc \\\n    -bam ${bam} \\\n    --paint-chromosome-limits \\\n    --genome-gc-distr HUMAN \\\n    -nt ${task.cpus} \\\n    -skip-duplicated \\\n    --skip-dup-mode 0 \\\n    -outdir ${name} \\\n    -outformat HTML\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    qualimap \\\n    bamqc \\\n    -bam ${bam} \\\n    --paint-chromosome-limits \\\n    --genome-gc-distr HUMAN \\\n    -nt ${task.cpus} \\\n    -skip-duplicated \\\n    --skip-dup-mode 0 \\\n    -outdir ${name} \\\n    -outformat HTML\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "marked_bam_qc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_qc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$bam\"",
            "container 'maxulysse/sarek:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "clairvoyante": {
        "name_process": "clairvoyante",
        "string_process": "\nprocess clairvoyante {\n    tag \"$bam\"\n    publishDir \"${params.outdir}/clairvoyante\", mode: 'copy'\n    container 'lifebitai/clairvoyante:latest'\n\n    cpus threads\n\n    input:\n    set val(name), file(bam), file(bai), file(fasta), file(fai), file(model_data), file(model_index), file(model_meta) from clairvoyante\n\n    output:\n    set file(\"${name}.vcf.gz\"), file(\"${name}.vcf.gz.tbi\") into clairvoyante_vcf \n\n    script:\n    model = model_index.getName().substring(0, model_index.getName().lastIndexOf(\".index\"))\n                                                     \n    \"\"\"\n    clairvoyante.py callVarBamParallel \\\n       --chkpnt_fn $model \\\n       --ref_fn $fasta \\\n       --bam_fn $bam \\\n       --sampleName $name \\\n       --output_prefix $name \\\n       --threshold 0.125 \\\n       --minCoverage 4 \\\n       --tensorflowThreads ${task.cpus} \\\n       > commands.sh\n    export CUDA_VISIBLE_DEVICES=\"\"\n    cat commands.sh | parallel -j${task.cpus}\n    vcfcat ${name}*.vcf | vcfstreamsort | bgziptabix ${name}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    model = model_index.getName().substring(0, model_index.getName().lastIndexOf(\".index\"))\n                                                     \n    \"\"\"\n    clairvoyante.py callVarBamParallel \\\n       --chkpnt_fn $model \\\n       --ref_fn $fasta \\\n       --bam_fn $bam \\\n       --sampleName $name \\\n       --output_prefix $name \\\n       --threshold 0.125 \\\n       --minCoverage 4 \\\n       --tensorflowThreads ${task.cpus} \\\n       > commands.sh\n    export CUDA_VISIBLE_DEVICES=\"\"\n    cat commands.sh | parallel -j${task.cpus}\n    vcfcat ${name}*.vcf | vcfstreamsort | bgziptabix ${name}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "MoDEL",
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/model",
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "MoDEL",
                "uri": "https://bio.tools/model",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0842",
                                "term": "Identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Database of protein Molecular Dynamics simulations, with 1800 trajectories representing different structural clusters of the PDB.",
                "homepage": "http://mmb.irbbarcelona.org/MoDEL"
            },
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "clairvoyante"
        ],
        "nb_inputs": 1,
        "outputs": [
            "clairvoyante_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$bam\"",
            "publishDir \"${params.outdir}/clairvoyante\", mode: 'copy'",
            "container 'lifebitai/clairvoyante:latest'",
            "cpus threads"
        ],
        "when": "",
        "stub": ""
    },
    "sniffles_preprocessing": {
        "name_process": "sniffles_preprocessing",
        "string_process": "\nprocess sniffles_preprocessing {\n    tag \"$bam\"\n    publishDir \"${params.outdir}/bam\", mode: 'copy'\n    container 'lifebitai/samtools:latest'\n\n    input:\n    set val(name), file(bam), file(bai), file(fasta), file(fai) from sniffles_preprocessing\n\n    output:\n    set val(name), file(\"${name}.bam\"), file(\"${name}.bam.bai\") into bam_md_sniffles \n\n    \"\"\"\n    samtools calmd $bam $fasta | samtools view -S -b - > ${name}.bam\n    samtools index ${name}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    samtools calmd $bam $fasta | samtools view -S -b - > ${name}.bam\n    samtools index ${name}.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sniffles_preprocessing"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_md_sniffles"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$bam\"",
            "publishDir \"${params.outdir}/bam\", mode: 'copy'",
            "container 'lifebitai/samtools:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "sniffles": {
        "name_process": "sniffles",
        "string_process": "\nprocess sniffles {\n    tag \"$bam\"\n    publishDir \"${params.outdir}/sniffles\", mode: 'copy'\n    container 'lifebitai/sniffles:latest'\n\n    cpus threads\n\n    input:\n    set val(name), file(bam), file(bai) from bam_md_sniffles\n\n    output:\n    file(\"sniffles_${name}.vcf\") into sniffles_vcf\n\n    \"\"\"\n    sniffles --mapped_reads $bam --vcf sniffles_${name}.vcf -s ${params.min_support} --threads ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    sniffles --mapped_reads $bam --vcf sniffles_${name}.vcf -s ${params.min_support} --threads ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Sniffles"
        ],
        "tools_url": [
            "https://bio.tools/sniffles"
        ],
        "tools_dico": [
            {
                "name": "Sniffles",
                "uri": "https://bio.tools/sniffles",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "An algorithm for structural variation detection from third generation sequencing alignment.",
                "homepage": "https://github.com/fritzsedlazeck/Sniffles"
            }
        ],
        "inputs": [
            "bam_md_sniffles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sniffles_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$bam\"",
            "publishDir \"${params.outdir}/sniffles\", mode: 'copy'",
            "container 'lifebitai/sniffles:latest'",
            "cpus threads"
        ],
        "when": "",
        "stub": ""
    },
    "svim": {
        "name_process": "svim",
        "string_process": "\nprocess svim {\n    tag \"$bam\"\n    container 'lifebitai/svim:latest'\n\n    input:\n    set val(name), file(bam), file(bai) from marked_bam_svim\n\n    output:\n    set val(name), file(\"${name}/final_results.vcf\") into svim_vcf \n\n    \"\"\"\n    svim alignment ${name} $bam\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    svim alignment ${name} $bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "marked_bam_svim"
        ],
        "nb_inputs": 1,
        "outputs": [
            "svim_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$bam\"",
            "container 'lifebitai/svim:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_svim": {
        "name_process": "filter_svim",
        "string_process": "\nprocess filter_svim {\n    tag \"$vcf\"\n    publishDir \"${params.outdir}/svim\", mode: 'copy'\n    container 'lifebitai/svim:latest'\n\n    input:\n    set val(name), file(vcf) from svim_vcf\n\n    output:\n    file(\"svim_${name}.vcf\") into svim_filtered_vcf\n\n    \"\"\"\n    cat $vcf | \\\n         awk '{{ if(\\$1 ~ /^#/) {{ print \\$0 }} \\\n         else {{ if(\\$6>10) {{ print \\$0 }} }} }}' > svim_${name}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    cat $vcf | \\\n         awk '{{ if(\\$1 ~ /^#/) {{ print \\$0 }} \\\n         else {{ if(\\$6>10) {{ print \\$0 }} }} }}' > svim_${name}.vcf\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "svim_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [
            "svim_filtered_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"$vcf\"",
            "publishDir \"${params.outdir}/svim\", mode: 'copy'",
            "container 'lifebitai/svim:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    tag \"multiqc_report.html\"\n\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n    container 'ewels/multiqc:v1.7'\n\n    input:\n    file bam_metrics from mark_dup_report\n    file bam_qc_report from bam_qc_report\n\n    when: \n    !params.skip_multiqc\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\"\n\n    script:\n    \"\"\"\n    multiqc . -m qualimap -m picard -m gatk -m bcftools\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    multiqc . -m qualimap -m picard -m gatk -m bcftools\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "mark_dup_report",
            "bam_qc_report"
        ],
        "nb_inputs": 2,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \"multiqc_report.html\"",
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'",
            "container 'ewels/multiqc:v1.7'"
        ],
        "when": "!params.skip_multiqc",
        "stub": ""
    },
    "sv_length_plot": {
        "name_process": "sv_length_plot",
        "string_process": "\nprocess sv_length_plot {\n    publishDir \"${params.outdir}/plots\", mode: 'copy'\n    container 'lifebitai/sv-plots:latest'\n\n    input:\n    set val(sniffles_name), file(sniffles_vcf) from sniffles_vcf_length\n    set val(svim_name), file(svim_vcf) from svim_filtered_vcf_length\n\n    output:\n    set file(\"SV-length_${sniffles_name}.png\"), file(\"${sniffles_name}.txt\"), file(\"SV-length_${svim_name}.png\"), file(\"${svim_name}.txt\") into sv_length_plots\n\n    \"\"\"\n    SV-length-plot.py $sniffles_vcf -o SV-length_${sniffles_name}.png -c ${sniffles_name}.txt\n    SV-length-plot.py $svim_vcf -o SV-length_${svim_name}.png -c ${svim_name}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    SV-length-plot.py $sniffles_vcf -o SV-length_${sniffles_name}.png -c ${sniffles_name}.txt\n    SV-length-plot.py $svim_vcf -o SV-length_${svim_name}.png -c ${svim_name}.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sniffles_vcf_length",
            "svim_filtered_vcf_length"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sv_length_plots"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "publishDir \"${params.outdir}/plots\", mode: 'copy'",
            "container 'lifebitai/sv-plots:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "sv_carriers_plot": {
        "name_process": "sv_carriers_plot",
        "string_process": "\nprocess sv_carriers_plot {\n    publishDir \"${params.outdir}/plots\", mode: 'copy'\n    container 'lifebitai/sv-plots:latest'\n\n    input:\n    set val(sniffles_name), file(sniffles_vcf) from sniffles_vcf_carriers\n    set val(svim_name), file(svim_vcf) from svim_filtered_vcf_carriers\n\n    output:\n    set file(\"SV-carriers_${sniffles_name}.png\"), file(\"SV-carriers_${svim_name}.png\") into sv_carriers_plots\n\n    \"\"\"\n    SV-carriers-plot.py $sniffles_vcf -o SV-carriers_${sniffles_name}.png\n    SV-carriers-plot.py $svim_vcf -o SV-carriers_${svim_name}.png\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    SV-carriers-plot.py $sniffles_vcf -o SV-carriers_${sniffles_name}.png\n    SV-carriers-plot.py $svim_vcf -o SV-carriers_${svim_name}.png\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sniffles_vcf_carriers",
            "svim_filtered_vcf_carriers"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sv_carriers_plots"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "publishDir \"${params.outdir}/plots\", mode: 'copy'",
            "container 'lifebitai/sv-plots:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "deploit_report": {
        "name_process": "deploit_report",
        "string_process": "\nprocess deploit_report {\n    tag \".report.json\"\n    publishDir \"${params.outdir}/Visualisations\", mode: 'copy'\n\n    container 'lifebitai/vizjson:latest'\n\n    input:\n    set file(sv_sniffles_length_plot), file(sniffles_table), file(sv_length_svim_plot), file(svim_table) from sv_length_plots\n    set file(sniffles_carriers_plot), file(svim_carriers_plot) from sv_carriers_plots\n\n    output:\n    file '.report.json' into results\n\n    when:\n    !params.skip_deploit_report\n\n    script:\n    \"\"\"\n    sniffles_title=\\$(head -n 1 $sniffles_table)\n    svim_title=\\$(head -n 1 $svim_table)\n\n    tail -n +2 $sniffles_table > sniffles.tsv\n    tail -n +2 $svim_table > svim.tsv\n\n    tsv2csv.py < sniffles.tsv > sniffles_tmp.csv\n    tsv2csv.py < svim.tsv > svim_tmp.csv\n\n    # reformat\n    cat sniffles_tmp.csv | sed \"s/://g\" | sed \"s/ variants//g\" | sed \"s/bp//g\" > sniffles.csv\n    cat svim_tmp.csv | sed \"s/://g\" | sed \"s/ variants//g\" | sed \"s/bp//g\" > svim.csv\n\n    # add header\n    sed -i '1iType of Structural Variant,Number of Variants,Length /bp' sniffles.csv\n    sed -i '1iType of Structural Variant,Number of Variants,Length /bp' svim.csv\n\n    csv2json.py sniffles.csv \"\\${sniffles_title}\" \"${sniffles_table}.json\" False\n    csv2json.py svim.csv \"\\${svim_title}\" \"${svim_table}.json\" False\n\n    img2json.py \"results/plots/${sv_sniffles_length_plot}\" \"Sniffles Length Plot\" \"${sv_sniffles_length_plot}.json\"\n    img2json.py \"results/plots/${sv_length_svim_plot}\" \"SVIM Length Plot\" \"${sv_length_svim_plot}.json\"\n    img2json.py \"results/plots/${sniffles_carriers_plot}\" \"Sniffles Carriers Plot\" \"${sniffles_carriers_plot}.json\"\n    img2json.py \"results/plots/${svim_carriers_plot}\" \"SVIM Carriers Plot\" \"${svim_carriers_plot}.json\"\n\n    combine_reports.py .\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    \"\"\"\n    sniffles_title=\\$(head -n 1 $sniffles_table)\n    svim_title=\\$(head -n 1 $svim_table)\n\n    tail -n +2 $sniffles_table > sniffles.tsv\n    tail -n +2 $svim_table > svim.tsv\n\n    tsv2csv.py < sniffles.tsv > sniffles_tmp.csv\n    tsv2csv.py < svim.tsv > svim_tmp.csv\n\n    # reformat\n    cat sniffles_tmp.csv | sed \"s/://g\" | sed \"s/ variants//g\" | sed \"s/bp//g\" > sniffles.csv\n    cat svim_tmp.csv | sed \"s/://g\" | sed \"s/ variants//g\" | sed \"s/bp//g\" > svim.csv\n\n    # add header\n    sed -i '1iType of Structural Variant,Number of Variants,Length /bp' sniffles.csv\n    sed -i '1iType of Structural Variant,Number of Variants,Length /bp' svim.csv\n\n    csv2json.py sniffles.csv \"\\${sniffles_title}\" \"${sniffles_table}.json\" False\n    csv2json.py svim.csv \"\\${svim_title}\" \"${svim_table}.json\" False\n\n    img2json.py \"results/plots/${sv_sniffles_length_plot}\" \"Sniffles Length Plot\" \"${sv_sniffles_length_plot}.json\"\n    img2json.py \"results/plots/${sv_length_svim_plot}\" \"SVIM Length Plot\" \"${sv_length_svim_plot}.json\"\n    img2json.py \"results/plots/${sniffles_carriers_plot}\" \"Sniffles Carriers Plot\" \"${sniffles_carriers_plot}.json\"\n    img2json.py \"results/plots/${svim_carriers_plot}\" \"SVIM Carriers Plot\" \"${svim_carriers_plot}.json\"\n\n    combine_reports.py .\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sv_length_plots",
            "sv_carriers_plots"
        ],
        "nb_inputs": 2,
        "outputs": [
            "results"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__long-reads",
        "directive": [
            "tag \".report.json\"",
            "publishDir \"${params.outdir}/Visualisations\", mode: 'copy'",
            "container 'lifebitai/vizjson:latest'"
        ],
        "when": "!params.skip_deploit_report",
        "stub": ""
    }
}
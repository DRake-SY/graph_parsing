{
    "OPERATION_1": {
        "string": "fastq_reads_qc = Channel\n                            .fromPath(params.fastqs)\n                            .map { file -> tuple(file.simpleName, file) }",
        "origin": [
            [
                "params.fastqs",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "fastq_reads_trim = Channel\n                            .fromPath(params.fastqs)\n                            .map { file -> tuple(file.simpleName, file) }",
        "origin": [
            [
                "params.fastqs",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_trim",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fastq_reads_hisat2_notrim = Channel\n                            .fromPath(params.fastqs)\n                            .map { file -> tuple(file.simpleName, file) }        ",
        "origin": [
            [
                "params.fastqs",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_hisat2_notrim",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .fromFilePairs( params.fastqs, size: params.singleEnd ? 1 : 2 )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n            .into { fastq_reads_qc; fastq_reads_trim; fastq_reads_hisat2_notrim }",
        "origin": [
            [
                "params.fastqs, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ],
            [
                "fastq_reads_trim",
                "P"
            ],
            [
                "fastq_reads_hisat2_notrim",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n        .empty()\n        .into { fastq_reads_qc; fastq_reads_trim; fastq_reads_hisat2_notrim }",
        "origin": [],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ],
            [
                "fastq_reads_trim",
                "P"
            ],
            [
                "fastq_reads_hisat2_notrim",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "read_files_sra = Channel\n                        .fromPath(params.sras)\n                        .map { file -> tuple(file.baseName, file) }",
        "origin": [
            [
                "params.sras",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_sra",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "read_files_sra = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "read_files_sra",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "software_versions = Channel.create()",
        "origin": [],
        "gives": [
            [
                "software_versions",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_10": {
        "string": "software_versions.collectFile(name: \"software_versions_nascent_${output_date}_${workflow.runName}.yaml\", storeDir: \"${params.outdir}/pipeline_info\")",
        "origin": [
            [
                "software_versions",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "sorted_bam_ch\n   .into { sorted_bams_for_preseq; sorted_bams_for_rseqc; sorted_bams_for_dreg_prep; sorted_bams_for_pileup; sorted_bams_for_picard; sorted_bam_for_bedgraph }",
        "origin": [
            [
                "sorted_bam_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sorted_bams_for_preseq",
                "P"
            ],
            [
                "sorted_bams_for_rseqc",
                "P"
            ],
            [
                "sorted_bams_for_dreg_prep",
                "P"
            ],
            [
                "sorted_bams_for_pileup",
                "P"
            ],
            [
                "sorted_bams_for_picard",
                "P"
            ],
            [
                "sorted_bam_for_bedgraph",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "sorted_bam_indices_ch\n    .into { sorted_bam_indicies_for_pileup; sorted_bam_indices_for_preseq; sorted_bam_indices_for_rseqc; sorted_bam_indices_for_picard; sorted_bam_index_for_bedgraph }",
        "origin": [
            [
                "sorted_bam_indices_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sorted_bam_indicies_for_pileup",
                "P"
            ],
            [
                "sorted_bam_indices_for_preseq",
                "P"
            ],
            [
                "sorted_bam_indices_for_rseqc",
                "P"
            ],
            [
                "sorted_bam_indices_for_picard",
                "P"
            ],
            [
                "sorted_bam_index_for_bedgraph",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "cram_ch\n    .into { cram_for_counts; cram_dreg_prep }",
        "origin": [
            [
                "cram_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cram_for_counts",
                "P"
            ],
            [
                "cram_dreg_prep",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "cram_index_ch\n    .into { cram_index_for_counts; cram_index_dreg_prep}",
        "origin": [
            [
                "cram_index_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cram_index_for_counts",
                "P"
            ],
            [
                "cram_index_dreg_prep",
                "P"
            ]
        ]
    }
}
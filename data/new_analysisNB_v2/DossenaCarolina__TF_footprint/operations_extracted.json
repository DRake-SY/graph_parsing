{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.design)\n    .splitCsv(header: true)\n    .map { sample ->\n    println([sample.name,sample.id,sample.bam])\n    [sample.name,sample.id,file(sample.bam)] }\n    .into { rep_to_group; \n\t    in_bed_create }",
        "origin": [
            [
                "params.design",
                "A"
            ]
        ],
        "gives": [
            [
                "rep_to_group",
                "P"
            ],
            [
                "in_bed_create",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(params.tf_list)\n    .splitCsv()\n                               \n    .set { ch_tf_list }",
        "origin": [
            [
                "params.tf_list",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_tf_list",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath(params.jaspar_motifs)\n    .splitCsv(header: true)\n    .map { tf ->\n                                               \n    [tf.id,tf.name,file(tf.path),tf.length] }   \n    .combine(ch_tf_list)\n    .filter { it[1] == it[4] }\n    .map {it -> it[0..-2] }\n    .set { in_fimo }",
        "origin": [
            [
                "ch_tf_list",
                "P"
            ],
            [
                "params.jaspar_motifs",
                "A"
            ]
        ],
        "gives": [
            [
                "in_fimo",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(params.jaspar_motifs)\n    .splitCsv(header: true)\n    .map { tf ->\n                                               \n    [tf.id,tf.name,file(tf.path),tf.length] }\n    .filter { it[1] ==~ /${params.tf}/ }\n    .set { in_fimo }",
        "origin": [
            [
                "params.jaspar_motifs",
                "A"
            ]
        ],
        "gives": [
            [
                "in_fimo",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "in_bed_create\n.collect { it[1] }\n.set { in_consensus }",
        "origin": [
            [
                "in_bed_create",
                "P"
            ]
        ],
        "gives": [
            [
                "in_consensus",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "rep_to_group\n    .groupTuple(by: 0)\n    .map { it ->  [ it[0], it[1].flatten(), it[2].flatten()] }\n    .set { bam_mrep }",
        "origin": [
            [
                "rep_to_group",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_mrep",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_bed_fasta = in_sequence_pwm_match.first()",
        "origin": [
            [
                "in_sequence_pwm_match",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bed_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "sites\n.combine(in_centipede) \n.set { ch_in_centipede }",
        "origin": [
            [
                "sites",
                "P"
            ],
            [
                "in_centipede",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_in_centipede",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel.from(\n    preprocessingCmd.execute().text\n).into{PREPROCESSING_TO_RNA; PREPROCESSING}",
        "origin": [],
        "gives": [
            [
                "PREPROCESSING_TO_RNA",
                "P"
            ],
            [
                "PREPROCESSING",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "LIST_RENZ = Channel.fromList(params.protocol.renz.collect{k, v -> [k, v]})",
        "origin": [],
        "gives": [
            [
                "LIST_RENZ",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.from(params.rna_annotation.get('rna_annotation_name', 'rna'))\n       .combine(PREPROCESSING_TO_RNA).set{GENOME_RNA_ANNOT_NAME}",
        "origin": [
            [
                "PREPROCESSING_TO_RNA",
                "P"
            ]
        ],
        "gives": [
            [
                "GENOME_RNA_ANNOT_NAME",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.from(params.input.fastq_paths\n    .collect{k, v ->  [k, v]}\n    )\n    .branch{\n        for_download: isSRA(it[1][0])\n        local:       !isSRA(it[1][0])\n    }.set{FASTQ_PATHS}",
        "origin": [],
        "gives": [
            [
                "FASTQ_PATHS",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "LIB_OLIGOS_RAW = Channel.from(\n    params.input.oligos.collect{k, v ->  [k, v, file(v)]}\n    ).combine(PREPROCESSING)",
        "origin": [
            [
                "PREPROCESSING",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_OLIGOS_RAW",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromList(params.protocol.read_length.collect{k, v -> [k, v]})\n    .into{ LIST_RLENGTHS_COLLECTION1; LIST_RLENGTHS_COLLECTION2}",
        "origin": [],
        "gives": [
            [
                "LIST_RLENGTHS_COLLECTION1",
                "P"
            ],
            [
                "LIST_RLENGTHS_COLLECTION2",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.create().into{LIB_DISTANCES; LIB_RESTR_COMBINATIONS}",
        "origin": [],
        "gives": [
            [
                "LIB_DISTANCES",
                "P"
            ],
            [
                "LIB_RESTR_COMBINATIONS",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromList(\n        params.run.restriction_check.collect{ segment, renz_keys ->\n            renz_keys.collect{ renz_key ->\n                available_renz.containsKey(renz_key) ?\n                    [renz_key, segment, ''] :\n                    renz_key.endsWith('p') ?\n                        [renz_key[0..-2], segment, '+'] :\n                        [renz_key[0..-2], segment, '-']\n            }\n        }.sum()\n    ).into{LIST_FOR_RESTR_RUN; LIB_RESTR_COMBINATIONS}",
        "origin": [],
        "gives": [
            [
                "LIST_FOR_RESTR_RUN",
                "P"
            ],
            [
                "LIB_RESTR_COMBINATIONS",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromList(\n        tables_list = params.output.tables.collect{ k, v -> [k, v['filter'], v['header']]}\n        ).set{LIST_TABLES}",
        "origin": [],
        "gives": [
            [
                "LIST_TABLES",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "FASTQ_PATHS.local().map { it -> [ it[0], file(it[1][0]), file(it[1][1]) ] }\n    .concat(DOWNLOADED).into{ LIB_FASTQ; LIB_VIEW;\n                              LIB_FASTQ_TO_FASTUNIQ }",
        "origin": [
            [
                "FASTQ_PATHS",
                "P"
            ],
            [
                "DOWNLOADED",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FASTQ",
                "P"
            ],
            [
                "LIB_VIEW",
                "P"
            ],
            [
                "LIB_FASTQ_TO_FASTUNIQ",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "LIB_SPLIT_FASTQ_RAW\n    .transpose()\n    .map{[it[0],\n          parseChunkPair(it[1],it[2]),                                           \n          it[1],\n          file(it[1]),\n          it[2],\n          file(it[2])]}\n    .into{ LIB_SPLIT_FASTQ_TO_TABLE;\n           LIB_SPLIT_FASTQ_TO_TRIM;\n           LIB_SPLIT_FASTQ_TO_CINDEX }",
        "origin": [
            [
                "LIB_SPLIT_FASTQ_RAW",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SPLIT_FASTQ_TO_TABLE",
                "P"
            ],
            [
                "LIB_SPLIT_FASTQ_TO_TRIM",
                "P"
            ],
            [
                "LIB_SPLIT_FASTQ_TO_CINDEX",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "LIB_TABLE_FASTQ.into{ LIB_TABLE_FASTQ_FOR_TRIM;\n                      LIB_TABLE_FASTQ_FOR_GA;\n                      LIB_TABLE_FASTQ_FOR_RNACOMP;\n                      LIB_TABLE_FASTQ_FOR_SUBSTR;\n                      LIB_TABLE_FASTQ_FOR_COLLECT}",
        "origin": [
            [
                "LIB_TABLE_FASTQ",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_TABLE_FASTQ_FOR_TRIM",
                "P"
            ],
            [
                "LIB_TABLE_FASTQ_FOR_GA",
                "P"
            ],
            [
                "LIB_TABLE_FASTQ_FOR_RNACOMP",
                "P"
            ],
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR",
                "P"
            ],
            [
                "LIB_TABLE_FASTQ_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "LIB_TABLE_FASTQ_FOR_TRIM\n    .combine(LIB_TRIMMED, by: [0, 1] )\n    .map { it ->  [it[0], it[1], file(it[2]), file(it[3]), file(it[4]) ] }\n    .set { LIB_FOR_GET_TRIM_OUTPUT }",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_TRIM",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_GET_TRIM_OUTPUT",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "MAPPING_COLLECTION1 = LIST_RLENGTHS_COLLECTION1.flatMap { lib, read_length ->\n    [[library: lib, oligo: \"adaptor_forward\", apply_to:1, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.adaptor_forward, left_shift:-6, mismatch_general:1, report_len:20],\n    [library: lib, oligo: \"adaptor_reverse\", apply_to:1, right_shift: read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.adaptor_reverse, left_shift:-6, mismatch_general:1, report_len:20],\n    [library: lib, oligo: \"adaptor_reverse_short\", apply_to:1, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.adaptor_reverse_short, left_shift:0, mismatch_general:1, report_len:16],\n    [library: lib, oligo: \"bridge_forward\", apply_to:1, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.bridge_forward, left_shift:0, mismatch_general:1, report_len:br_length],\n    [library: lib, oligo: \"bridge_reverse\", apply_to:1, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.bridge_reverse, left_shift:0, mismatch_general:1, report_len:br_length]]\n}",
        "origin": [
            [
                "LIST_RLENGTHS_COLLECTION1",
                "P"
            ]
        ],
        "gives": [
            [
                "MAPPING_COLLECTION1",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "MAPPING_COLLECTION2 = LIST_RLENGTHS_COLLECTION2.flatMap { lib, read_length ->\n    [[library: lib, oligo: \"adaptor_forward\", apply_to:2, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.adaptor_forward, left_shift:-6, mismatch_general:1, report_len:20],\n    [library: lib, oligo: \"adaptor_reverse\", apply_to:2, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.adaptor_reverse, left_shift:-6, mismatch_general:1, report_len:20],\n    [library: lib, oligo: \"bridge_forward\", apply_to:2, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.bridge_forward, left_shift:0, mismatch_general:1, report_len:br_length],\n    [library: lib, oligo: \"bridge_reverse\", apply_to:2, right_shift:read_length-14, read_length:read_length,\n    n_primers:params.input.oligos_variants.bridge_reverse, left_shift:0, mismatch_general:1, report_len:br_length],\n    [library: lib, oligo: \"ggg\", apply_to:2, right_shift:3, read_length:read_length,\n    n_primers:params.input.oligos_variants.ggg, left_shift:0, mismatch_general:0, report_len:3]]\n}",
        "origin": [
            [
                "LIST_RLENGTHS_COLLECTION2",
                "P"
            ]
        ],
        "gives": [
            [
                "MAPPING_COLLECTION2",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "LIB_OLIGOS_CINDEX.into { LIB_OLIGOS_CINDEX1; LIB_OLIGOS_CINDEX2 }",
        "origin": [
            [
                "LIB_OLIGOS_CINDEX",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_OLIGOS_CINDEX1",
                "P"
            ],
            [
                "LIB_OLIGOS_CINDEX2",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "LIB_FASTQ_CINDEX.into { LIB_FASTQ_CINDEX1; LIB_FASTQ_CINDEX2;\n                        LIB_FASTQ_CINDEX_FOR_RNACOMP;\n                        LIB_FASTQ_CINDEX_FOR_SUBSTR}",
        "origin": [
            [
                "LIB_FASTQ_CINDEX",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FASTQ_CINDEX1",
                "P"
            ],
            [
                "LIB_FASTQ_CINDEX2",
                "P"
            ],
            [
                "LIB_FASTQ_CINDEX_FOR_RNACOMP",
                "P"
            ],
            [
                "LIB_FASTQ_CINDEX_FOR_SUBSTR",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "LIB_OLIGOS_CINDEX1.combine(LIB_FASTQ_CINDEX1).combine(MAPPING_COLLECTION1)\n    .filter { it[0]==it[6][\"oligo\"] && it[2]==it[6][\"library\"] }\n    .map { it ->  [it[0], file(it[1]), it[2], it[3], file(it[4]), it[6].apply_to, it[6], it[6][\"read_length\"] ] }\n    .set { LIB_FOR_OLIGOS_MAPPING1 }",
        "origin": [
            [
                "LIB_OLIGOS_CINDEX1",
                "P"
            ],
            [
                "LIB_FASTQ_CINDEX1",
                "P"
            ],
            [
                "MAPPING_COLLECTION1",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_OLIGOS_MAPPING1",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "LIB_OLIGOS_CINDEX2.combine(LIB_FASTQ_CINDEX2).combine(MAPPING_COLLECTION2)\n    .filter { it[0]==it[6][\"oligo\"] && it[2]==it[6][\"library\"] }\n    .map { it ->  [it[0], file(it[1]), it[2], it[3], file(it[5]), it[6].apply_to, it[6], it[6][\"read_length\"]  ] }\n    .set { LIB_FOR_OLIGOS_MAPPING2 }",
        "origin": [
            [
                "LIB_OLIGOS_CINDEX2",
                "P"
            ],
            [
                "LIB_FASTQ_CINDEX2",
                "P"
            ],
            [
                "MAPPING_COLLECTION2",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_OLIGOS_MAPPING2",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "LIB_FOR_OLIGOS_MAPPING = LIB_FOR_OLIGOS_MAPPING1.concat(LIB_FOR_OLIGOS_MAPPING2)",
        "origin": [
            [
                "LIB_FOR_OLIGOS_MAPPING1",
                "P"
            ],
            [
                "LIB_FOR_OLIGOS_MAPPING2",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_OLIGOS_MAPPING",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "LIB_MAPPED_OLIGOS.into{ LIB_MAPPED_OLIGOS_FOR_GA;\n                        LIB_MAPPED_OLIGOS_FOR_RNACOMP;\n                        LIB_MAPPED_OLIGOS_FOR_SUBSTR;\n                        LIB_MAPPED_OLIGOS_FOR_COLLECT}",
        "origin": [
            [
                "LIB_MAPPED_OLIGOS",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_MAPPED_OLIGOS_FOR_GA",
                "P"
            ],
            [
                "LIB_MAPPED_OLIGOS_FOR_RNACOMP",
                "P"
            ],
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR",
                "P"
            ],
            [
                "LIB_MAPPED_OLIGOS_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "LIB_TABLE_FASTQ_FOR_GA\n    .combine( LIB_MAPPED_OLIGOS_FOR_GA, by: [0, 1])\n    .filter{ it[3]==\"bridge_forward\" && it[4]==1 }\n    .map{ [it[0], it[1], file(it[2]), file(it[5])]  }\n    .set{ LIB_FOR_GA }",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_GA",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_GA",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "LIB_TABLE_FASTQ_FOR_RNACOMP\n    .combine(LIB_MAPPED_OLIGOS_FOR_RNACOMP, by: [0, 1])                                                                                                  \n    .branch {\n        bridge_forward: it[3]==\"bridge_forward\"\n        ggg: it[3]==\"ggg\"\n    }.combine()                                                                                                                                                                                                  \n    .filter{\n        it[0]==it[7] && it[1]==it[8] && it[4]==1 && it[11]==2\n    }\n    .map{\n        [it[0], it[1], file(it[2]), file(it[5]), file(it[12]), it[13] ]\n    }                                                                                                  \n    .combine(LIB_FASTQ_CINDEX_FOR_RNACOMP, by:[0,1])\n    .set { LIB_FOR_RNACOMP }",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_RNACOMP",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_RNACOMP",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "LIB_MAPPED_OLIGOS_FOR_SUBSTR.into {\n    LIB_MAPPED_OLIGOS_FOR_SUBSTR_DNA;\n    LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA1;\n    LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA2;\n}",
        "origin": [
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR_DNA",
                "P"
            ],
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA1",
                "P"
            ],
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA2",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "LIB_TABLE_FASTQ_FOR_SUBSTR.into {\n    LIB_TABLE_FASTQ_FOR_SUBSTR_DNA;\n    LIB_TABLE_FASTQ_FOR_SUBSTR_RNA1;\n    LIB_TABLE_FASTQ_FOR_SUBSTR_RNA2\n}",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR_DNA",
                "P"
            ],
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR_RNA1",
                "P"
            ],
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR_RNA2",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "LIB_TRIMTABLE.into {\n    LIB_TRIMTABLE_FOR_SUBSTR_DNA;\n    LIB_TRIMTABLE_FOR_SUBSTR_RNA1;\n    LIB_TRIMTABLE_FOR_SUBSTR_RNA2;\n    LIB_TRIMTABLE_FOR_COLLECT\n}",
        "origin": [
            [
                "LIB_TRIMTABLE",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_TRIMTABLE_FOR_SUBSTR_DNA",
                "P"
            ],
            [
                "LIB_TRIMTABLE_FOR_SUBSTR_RNA1",
                "P"
            ],
            [
                "LIB_TRIMTABLE_FOR_SUBSTR_RNA2",
                "P"
            ],
            [
                "LIB_TRIMTABLE_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "LIB_MAPPED_OLIGOS_FOR_SUBSTR_DNA\n    .branch{\n        bridge_forward:  it[2]==\"bridge_forward\"  && it[3]==1\n        adaptor_forward: it[2]==\"adaptor_forward\" && it[3]==1\n    }.set{LIB_MAPPED_BRANCHED_FOR_DNA}",
        "origin": [
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR_DNA",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_MAPPED_BRANCHED_FOR_DNA",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "LIB_TABLE_FASTQ_FOR_SUBSTR_DNA\n    .combine(LIB_MAPPED_BRANCHED_FOR_DNA.bridge_forward, by:[0,1])           \n    .combine(LIB_MAPPED_BRANCHED_FOR_DNA.adaptor_forward, by:[0,1])          \n    .combine(LIB_TRIMTABLE_FOR_SUBSTR_DNA, by:[0,1])\n    .map{\n        library, chunk, table_fastq,\n        oligo1, side1, file_oligo1, read_length1,\n        oligo2, side2, file_oligo2, read_length2,\n        trim_table\n        -> [library, chunk, table_fastq, file_oligo1, file_oligo2, trim_table, read_length1]\n    }.set{ LIB_FOR_SUBSTR_DNA }",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR_DNA",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_SUBSTR_DNA",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "LIB_COUT_RNACOMP.into { LIB_RNACOMP_TO_SUBSTR_RNA1;\n                        LIB_RNACOMP_TO_SUBSTR_RNA2 }",
        "origin": [
            [
                "LIB_COUT_RNACOMP",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_RNACOMP_TO_SUBSTR_RNA1",
                "P"
            ],
            [
                "LIB_RNACOMP_TO_SUBSTR_RNA2",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA1\n    .branch{\n        bridge_forward:  it[2]==\"bridge_forward\"  && it[3]==1\n        adaptor_reverse_short: it[2]==\"adaptor_reverse_short\" && it[3]==1\n    }.set{LIB_MAPPED_BRANCHED_FOR_RNA1}",
        "origin": [
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA1",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_MAPPED_BRANCHED_FOR_RNA1",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "LIB_TABLE_FASTQ_FOR_SUBSTR_RNA1\n    .combine(LIB_MAPPED_BRANCHED_FOR_RNA1.bridge_forward, by:[0,1])           \n    .combine(LIB_MAPPED_BRANCHED_FOR_RNA1.adaptor_reverse_short, by:[0,1])          \n    .combine(LIB_RNACOMP_TO_SUBSTR_RNA1, by:[0,1])\n    .combine(LIB_TRIMTABLE_FOR_SUBSTR_RNA1, by:[0,1])\n    .map{\n        library, chunk, table_fastq,\n        oligo1, side1, file_oligo1, read_length1,\n        oligo2, side2, file_oligo2, read_length2,\n        rnacomp1, rnacomp2, trim_table\n        -> [library, chunk, table_fastq, file_oligo1, file_oligo2, rnacomp1, trim_table, read_length1]\n    }.set{ LIB_FOR_SUBSTR_RNA1 }",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR_RNA1",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_SUBSTR_RNA1",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA2\n    .branch{\n        ggg:  it[2]==\"ggg\"  && it[3]==2\n        adaptor_forward: it[2]==\"adaptor_forward\" && it[3]==2\n        bridge_reverse:  it[2]==\"bridge_reverse\"  && it[3]==2\n    }.set{LIB_MAPPED_BRANCHED_FOR_RNA2}",
        "origin": [
            [
                "LIB_MAPPED_OLIGOS_FOR_SUBSTR_RNA2",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_MAPPED_BRANCHED_FOR_RNA2",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "LIB_TABLE_FASTQ_FOR_SUBSTR_RNA2\n    .combine(LIB_MAPPED_BRANCHED_FOR_RNA2.ggg, by:[0,1])                      \n    .combine(LIB_MAPPED_BRANCHED_FOR_RNA2.adaptor_forward, by:[0,1])          \n    .combine(LIB_MAPPED_BRANCHED_FOR_RNA2.bridge_reverse, by:[0,1])           \n    .combine(LIB_RNACOMP_TO_SUBSTR_RNA2, by:[0,1])\n    .combine(LIB_TRIMTABLE_FOR_SUBSTR_RNA2, by:[0,1])\n    .map{\n        library, chunk, table_fastq,\n        oligo1, side1, file_oligo1, read_length1,\n        oligo2, side2, file_oligo2, read_length2,\n        oligo3, side3, file_oligo3, read_length3,\n        rnacomp1, rnacomp2, trim_table\n        -> [library, chunk, table_fastq, file_oligo1, file_oligo2, file_oligo3, rnacomp2, trim_table, read_length1]\n    }.set{ LIB_FOR_SUBSTR_RNA2 }",
        "origin": [
            [
                "LIB_TABLE_FASTQ_FOR_SUBSTR_RNA2",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_SUBSTR_RNA2",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "GENOME_INDEX.into{\n    GENOME_INDEX_FOR_DNA;\n    GENOME_INDEX_FOR_DNA_EXT;\n    GENOME_INDEX_FOR_RNA1;\n    GENOME_INDEX_FOR_RNA2\n}",
        "origin": [
            [
                "GENOME_INDEX",
                "P"
            ]
        ],
        "gives": [
            [
                "GENOME_INDEX_FOR_DNA",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_DNA_EXT",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_RNA1",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_RNA2",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "LIB_SUBSTR_DNA.combine(GENOME_INDEX_FOR_DNA)\n    .set{LIB_FOR_DNA_MAPPING}",
        "origin": [
            [
                "LIB_SUBSTR_DNA",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_DNA",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_DNA_MAPPING",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "LIB_SUBSTR_DNA_EXT.combine(GENOME_INDEX_FOR_DNA_EXT)\n        .set{LIB_FOR_DNA_MAPPING_EXT}",
        "origin": [
            [
                "LIB_SUBSTR_DNA_EXT",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_DNA_EXT",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_DNA_MAPPING_EXT",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "GENOME_SPLICESITES.into{GENOME_SPLICESITES_RNA1; GENOME_SPLICESITES_RNA2}",
        "origin": [
            [
                "GENOME_SPLICESITES",
                "P"
            ]
        ],
        "gives": [
            [
                "GENOME_SPLICESITES_RNA1",
                "P"
            ],
            [
                "GENOME_SPLICESITES_RNA2",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "LIB_SUBSTR_RNA1.combine(GENOME_INDEX_FOR_RNA1).combine(GENOME_SPLICESITES_RNA1)\n    .set{LIB_FOR_RNA1_MAPPING}",
        "origin": [
            [
                "LIB_SUBSTR_RNA1",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_RNA1",
                "P"
            ],
            [
                "GENOME_SPLICESITES_RNA1",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_RNA1_MAPPING",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "LIB_SUBSTR_RNA2.combine(GENOME_INDEX_FOR_RNA2).combine(GENOME_SPLICESITES_RNA2)\n    .set{LIB_FOR_RNA2_MAPPING}",
        "origin": [
            [
                "LIB_SUBSTR_RNA2",
                "P"
            ],
            [
                "GENOME_INDEX_FOR_RNA2",
                "P"
            ],
            [
                "GENOME_SPLICESITES_RNA2",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_RNA2_MAPPING",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "LIB_SAM_RNA1.into{LIB_SAM_RNA1_FOR_BED; LIB_SAM_RNA1_FOR_COLLECT}",
        "origin": [
            [
                "LIB_SAM_RNA1",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM_RNA1_FOR_BED",
                "P"
            ],
            [
                "LIB_SAM_RNA1_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "LIB_SAM_RNA2.into{LIB_SAM_RNA2_FOR_BED; LIB_SAM_RNA2_FOR_COLLECT}",
        "origin": [
            [
                "LIB_SAM_RNA2",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM_RNA2_FOR_BED",
                "P"
            ],
            [
                "LIB_SAM_RNA2_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "LIB_SAM_DNA.into{LIB_SAM_DNA_FOR_BED; LIB_SAM_DNA_FOR_COLLECT}",
        "origin": [
            [
                "LIB_SAM_DNA",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM_DNA_FOR_BED",
                "P"
            ],
            [
                "LIB_SAM_DNA_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "LIB_SAM_DNA_EXT.into{LIB_SAM_DNA_EXT_FOR_BED; LIB_SAM_DNA_EXT_FOR_COLLECT}",
        "origin": [
            [
                "LIB_SAM_DNA_EXT",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM_DNA_EXT_FOR_BED",
                "P"
            ],
            [
                "LIB_SAM_DNA_EXT_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "LIB_SAM_DNA_FOR_BED.map{ [it[0], it[1], \"dna_nonextended\", file(it[2]) ] }\n        .concat(LIB_SAM_DNA_EXT_FOR_BED.map{ [it[0], it[1], \"dna\", file(it[2]) ] })\n        .concat(LIB_SAM_RNA1_FOR_BED.map{ [it[0], it[1], \"rna1\", file(it[2]) ] })\n        .concat(LIB_SAM_RNA2_FOR_BED.map{ [it[0], it[1], \"rna2\", file(it[2]) ] }).set{LIB_SAM2BED}",
        "origin": [
            [
                "LIB_SAM_DNA_FOR_BED",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM2BED",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "LIB_SAM_DNA.set{LIB_SAM_DNA_EXT_FOR_COLLECT}",
        "origin": [
            [
                "LIB_SAM_DNA",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM_DNA_EXT_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "LIB_SAM_DNA_FOR_BED.map{ [it[0], it[1], \"dna_nonextended\", file(it[2]) ] }\n        .concat(LIB_SAM_RNA1_FOR_BED.map{ [it[0], it[1], \"rna1\", file(it[2]) ] })\n        .concat(LIB_SAM_RNA2_FOR_BED.map{ [it[0], it[1], \"rna2\", file(it[2]) ] }).set{LIB_SAM2BED}",
        "origin": [
            [
                "LIB_SAM_DNA_FOR_BED",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_SAM2BED",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "LIB_BED.into{LIB_BED_FOR_RESTR; LIB_BED_FOR_COLLECT}",
        "origin": [
            [
                "LIB_BED",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_BED_FOR_RESTR",
                "P"
            ],
            [
                "LIB_BED_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "LIST_FOR_RESTR_RUN\n        .combine(GENOME_RENZ, by:0)\n        .combine(LIB_BED_FOR_RESTR)\n        .filter{\n            renz_key, segment_left, renz_strand, renz_file, library, chunk, segment_right, bed_file ->\n            segment_left == segment_right\n         }.map{\n            renz_key, segment_left, renz_strand, renz_file, library, chunk, segment_right, bed_file ->\n            [library, chunk, segment_left, file(bed_file), renz_key, renz_strand, file(renz_file)]\n         }.set{ LIB_FOR_RESTR_RUN }",
        "origin": [
            [
                "LIST_FOR_RESTR_RUN",
                "P"
            ],
            [
                "LIB_BED_FOR_RESTR",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_RESTR_RUN",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "LIB_MAPPED_OLIGOS_FOR_COLLECT.branch{\n            bridge_forward: it[2]==\"bridge_forward\" & it[3]==1\n            ggg: it[2]==\"ggg\" & it[3]==2\n        }.set{LIB_MAPPED_OLIGOS_FOR_COLLECT_BRANCHED}",
        "origin": [
            [
                "LIB_MAPPED_OLIGOS_FOR_COLLECT",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_MAPPED_OLIGOS_FOR_COLLECT_BRANCHED",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "LIB_BED_FOR_COLLECT.branch{\n        dna : it[2]==dna_mode\n        rna1 : it[2]==\"rna1\"\n        rna2 : it[2]==\"rna2\"\n    }.set{LIB_BED_FOR_COLLECT_BRANCHED}",
        "origin": [
            [
                "LIB_BED_FOR_COLLECT",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_BED_FOR_COLLECT_BRANCHED",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "LIB_DISTANCES\n    .groupTuple(by: [0,1]).map{it -> [it[0], it[1], it[5]]}.set{ LIB_DISTANCES_FOR_COLLECT }",
        "origin": [
            [
                "LIB_DISTANCES",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_DISTANCES_FOR_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "IDS_FASTUNIQ\n    .combine(LIB_TABLE_FASTQ_FOR_COLLECT, by:0).map{ v -> [v[0], v[2], v[3], v[1]]}\n    .combine(LIB_TRIMTABLE_FOR_COLLECT, by: [0,1])\n    .combine(LIB_MAPPED_OLIGOS_FOR_COLLECT_BRANCHED.bridge_forward().map{it -> [it[0], it[1], it[4]]}, by: [0,1])\n    .combine(LIB_MAPPED_GA, by: [0,1])\n    .combine(LIB_MAPPED_OLIGOS_FOR_COLLECT_BRANCHED.ggg().map{it -> [it[0], it[1], it[4]]}, by: [0,1])\n    .combine(LIB_SUBSTR_DNA_INFO, by:[0,1])\n    .combine(LIB_SUBSTR_RNA1_INFO, by:[0,1])\n    .combine(LIB_SUBSTR_RNA2_INFO, by:[0,1])\n    .combine(LIB_SAM_DNA_EXT_FOR_COLLECT, by:[0,1])\n    .combine(LIB_SAM_DNA_FOR_COLLECT, by:[0,1])\n    .combine(LIB_SAM_RNA1_FOR_COLLECT, by:[0,1])\n    .combine(LIB_SAM_RNA2_FOR_COLLECT, by:[0,1])\n    .combine(LIB_BED_FOR_COLLECT_BRANCHED.dna().map{it -> [it[0], it[1], it[3]]}, by:[0,1])\n    .combine(LIB_BED_FOR_COLLECT_BRANCHED.rna1().map{it -> [it[0], it[1], it[3]]}, by:[0,1])\n    .combine(LIB_BED_FOR_COLLECT_BRANCHED.rna2().map{it -> [it[0], it[1], it[3]]}, by:[0,1])\n    .combine(LIB_DISTANCES_FOR_COLLECT, by:[0,1])\n    .map{ v -> [ v[0], v[1], v[2..-2]+v[-1] ] }.set{ LIB_COLLECT }",
        "origin": [
            [
                "IDS_FASTUNIQ",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_COLLECT",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "restriction\n                   .collect{k, v -> k+\":\"+\"(\"+v.join(\") | (\")+\")\"}.join(\"\\\\n\")\n                   .replaceAll(/\"\\+\"/, \"1\")\n                   .replaceAll(/\"-\"/, \"0\")",
        "origin": [
            [
                "restriction",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_54": {
        "string": "additional_filters\n                   .collect{k, v -> k+\":\"+v}.join(\"\\\\n\")",
        "origin": [
            [
                "additional_filters",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_55": {
        "string": "GENOME_CHROMSIZES.into{GENOME_CHROMSIZES_FOR_FILTERS; GENOME_CHROMSIZES_FOR_COOLER}",
        "origin": [
            [
                "GENOME_CHROMSIZES",
                "P"
            ]
        ],
        "gives": [
            [
                "GENOME_CHROMSIZES_FOR_FILTERS",
                "P"
            ],
            [
                "GENOME_CHROMSIZES_FOR_COOLER",
                "P"
            ]
        ]
    },
    "OPERATION_56": {
        "string": "GENOME_CHROMSIZES.set{GENOME_CHROMSIZES_FOR_FILTERS}",
        "origin": [
            [
                "GENOME_CHROMSIZES",
                "P"
            ]
        ],
        "gives": [
            [
                "GENOME_CHROMSIZES_FOR_FILTERS",
                "P"
            ]
        ]
    },
    "OPERATION_57": {
        "string": "LIB_COLLECTED.combine(GENOME_CHROMSIZES_FOR_FILTERS).set{LIB_COLLECTED_FOR_FILTERS}",
        "origin": [
            [
                "LIB_COLLECTED",
                "P"
            ],
            [
                "GENOME_CHROMSIZES_FOR_FILTERS",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_COLLECTED_FOR_FILTERS",
                "P"
            ]
        ]
    },
    "OPERATION_58": {
        "string": "LIB_FILTERS.into{ LIB_FILTERS_STATS; LIB_FILTERS_TABLE }",
        "origin": [
            [
                "LIB_FILTERS",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FILTERS_STATS",
                "P"
            ],
            [
                "LIB_FILTERS_TABLE",
                "P"
            ]
        ]
    },
    "OPERATION_59": {
        "string": "report_stats.collect()",
        "origin": [
            [
                "report_stats",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_60": {
        "string": "FILES_STATS.groupTuple(by:0).set{FILES_STATS_FOR_MERGE}",
        "origin": [
            [
                "FILES_STATS",
                "P"
            ]
        ],
        "gives": [
            [
                "FILES_STATS_FOR_MERGE",
                "P"
            ]
        ]
    },
    "OPERATION_61": {
        "string": "LIB_FILTERS_TABLE.combine(LIST_TABLES).set{LIB_FOR_WRITING}",
        "origin": [
            [
                "LIB_FILTERS_TABLE",
                "P"
            ],
            [
                "LIST_TABLES",
                "P"
            ]
        ],
        "gives": [
            [
                "LIB_FOR_WRITING",
                "P"
            ]
        ]
    },
    "OPERATION_62": {
        "string": "FILES_TABLE.groupTuple(by:[0,2]).set{FILES_TABLE_FOR_MERGE}",
        "origin": [
            [
                "FILES_TABLE",
                "P"
            ]
        ],
        "gives": [
            [
                "FILES_TABLE_FOR_MERGE",
                "P"
            ]
        ]
    },
    "OPERATION_63": {
        "string": "FILES_TABLE_MERGED.filter{ it[1] == params.output.cooler_properties.table_name }\n      .combine(GENOME_CHROMSIZES_FOR_COOLER)\n      .set{ TABLES_FOR_COOLER }",
        "origin": [
            [
                "FILES_TABLE_MERGED",
                "P"
            ],
            [
                "GENOME_CHROMSIZES_FOR_COOLER",
                "P"
            ]
        ],
        "gives": [
            [
                "TABLES_FOR_COOLER",
                "P"
            ]
        ]
    }
}
{
    "fastq_merge_bam_index": {
        "name_process": "fastq_merge_bam_index",
        "string_process": "\nprocess fastq_merge_bam_index {\n                                                                                         \n    input:\n    set val(sampleID), file(fastq_r1: \"*\"), file(fastq_r2: \"*\"), file(bam) from samples_R1_R2\n\n    output:\n    set val(sampleID), file(\"${merged_fastq_R1}\"), file(\"${merged_fastq_R2}\"), file(bam), file(\"${bai}\") into samples_fastq_merged\n\n    script:\n    prefix = \"${sampleID}\"\n    merged_fastq_R1 = \"${prefix}_R1.fastq.gz\"\n    merged_fastq_R2 = \"${prefix}_R2.fastq.gz\"\n    bai = \"${bam}.bai\"\n    \"\"\"\n    cat ${fastq_r1} > \"${merged_fastq_R1}\"\n    cat ${fastq_r2} > \"${merged_fastq_R2}\"\n    samtools index \"${bam}\"\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    prefix = \"${sampleID}\"\n    merged_fastq_R1 = \"${prefix}_R1.fastq.gz\"\n    merged_fastq_R2 = \"${prefix}_R2.fastq.gz\"\n    bai = \"${bam}.bai\"\n    \"\"\"\n    cat ${fastq_r1} > \"${merged_fastq_R1}\"\n    cat ${fastq_r2} > \"${merged_fastq_R2}\"\n    samtools index \"${bam}\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BAIT",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bait",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BAIT",
                "uri": "https://bio.tools/bait",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BAIT (Bioinformatic Analysis of Inherited Templates) is a software to create strand inheritance plots in data derived from the Strand-Seq sequencing protocol. The software is designed to be flexible with a range of species, and basic template folders can called to read in species-specific data.",
                "homepage": "http://sourceforge.net/projects/bait/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "samples_R1_R2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samples_fastq_merged"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__fastq-bed-subset",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "get_qnames": {
        "name_process": "get_qnames",
        "string_process": "\nprocess get_qnames {\n    input:\n    set val(sampleID), file(fastq_R1), file(fastq_R2), file(bam), file(bai), val(chrom), val(start), val(stop), val(numReads) from samples_fastq_merged_targets\n\n    output:\n    set val(sampleID), file(fastq_R1), file(fastq_R2), val(chrom), val(start), val(stop), val(numReads), file(\"${output_file}\") into samples_qnames\n\n    script:\n    prefix = \"${sampleID}.${chrom}.${start}.${stop}\"\n    output_file = \"${prefix}.qnames.txt\"\n    \"\"\"\n    get_qnames.py \\\n    \"${bam}\" \\\n    \"${chrom}\" \\\n    \"${start}\" \\\n    \"${stop}\" \\\n    \"${numReads}\" \\\n    \"${output_file}\"\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    prefix = \"${sampleID}.${chrom}.${start}.${stop}\"\n    output_file = \"${prefix}.qnames.txt\"\n    \"\"\"\n    get_qnames.py \\\n    \"${bam}\" \\\n    \"${chrom}\" \\\n    \"${start}\" \\\n    \"${stop}\" \\\n    \"${numReads}\" \\\n    \"${output_file}\"\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samples_fastq_merged_targets"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samples_qnames"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__fastq-bed-subset",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "subset_fastq": {
        "name_process": "subset_fastq",
        "string_process": "\nprocess subset_fastq {\n    input:\n    set val(sampleID), val(chrom), val(start), val(stop), val(numReads), file(qnames_txt), val(fastq_label), file(fastq) from samples_qnames_per_fastq\n\n    output:\n    set val(sampleID), val(fastq_label), file(\"${output_file}\") into subset_fastqs\n\n    script:\n    fastq_basename = \"${fastq}\".replaceFirst(/.fastq.gz$/, \"\")\n    prefix = \"${chrom}.${start}.${stop}\"\n    output_file = \"${prefix}.fastq.gz\"\n    \"\"\"\n    subset_fastq.py \\\n    \"${fastq}\" \\\n    \"${qnames_txt}\" \\\n    \"${output_file}\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    fastq_basename = \"${fastq}\".replaceFirst(/.fastq.gz$/, \"\")\n    prefix = \"${chrom}.${start}.${stop}\"\n    output_file = \"${prefix}.fastq.gz\"\n    \"\"\"\n    subset_fastq.py \\\n    \"${fastq}\" \\\n    \"${qnames_txt}\" \\\n    \"${output_file}\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samples_qnames_per_fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "subset_fastqs"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__fastq-bed-subset",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge_subsetted_fastq": {
        "name_process": "merge_subsetted_fastq",
        "string_process": "\nprocess merge_subsetted_fastq {\n    publishDir \"${params.outputDir}/reads\", mode: \"copy\", overwrite: true\n    input:\n    set val(sampleID), val(fastq_label), file(fastqs: \"*\") from grouped_fastqs\n\n    output:\n    set val(sampleID), val(fastq_label), file(\"${output_file}\") into merged_subset_fastqs\n\n    script:\n    prefix = \"${sampleID}.${fastq_label}\"\n    output_file = \"${prefix}.fastq.gz\"\n    \"\"\"\n    echo ${fastqs} | tr ' ' '\\n' | sort | tr '\\n' ' ' | xargs cat > \"${output_file}\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    prefix = \"${sampleID}.${fastq_label}\"\n    output_file = \"${prefix}.fastq.gz\"\n    \"\"\"\n    echo ${fastqs} | tr ' ' '\\n' | sort | tr '\\n' ' ' | xargs cat > \"${output_file}\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "grouped_fastqs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_subset_fastqs"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__fastq-bed-subset",
        "directive": [
            "publishDir \"${params.outputDir}/reads\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
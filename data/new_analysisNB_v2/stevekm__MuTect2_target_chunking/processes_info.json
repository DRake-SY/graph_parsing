{
    "mutect2_noChunk": {
        "name_process": "mutect2_noChunk",
        "string_process": "\nprocess mutect2_noChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n\n    input:\n    set val(comparisonID), val(tumorID), val(normalID), file(tumorBam), file(tumorBai), file(normalBam), file(normalBai), file(targets_bed), file(ref_fasta), file(ref_fai), file(ref_dict), file(dbsnp_ref_vcf), file(dbsnp_ref_vcf_idx), file(cosmic_ref_vcf), file(cosmic_ref_vcf_idx) from input_noChunk_ch\n\n    output:\n    set val(\"${label}\"), val(comparisonID), val(tumorID), val(normalID), file(\"${output_norm_vcf}\") into variants_noChunk\n    file(\"${output_vcf}\")\n    file(\"${multiallelics_stats}\")\n    file(\"${realign_stats}\")\n\n    when: params.disable != \"true\"\n\n    script:\n    label = \"noChunk\"\n    prefix = \"${comparisonID}.${label}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"${targets_bed}\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    label = \"noChunk\"\n    prefix = \"${comparisonID}.${label}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"${targets_bed}\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "ICLabel",
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/ICLabel",
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "ICLabel",
                "uri": "https://bio.tools/ICLabel",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3304",
                            "term": "Neurobiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3629",
                                    "term": "Deisotoping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3629",
                                    "term": "Deconvolution"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Automated electroencephalographic independent component classifier, dataset, and website.",
                "homepage": "https://iclabel.ucsd.edu/"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "input_noChunk_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_noChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_vcf_noChunk": {
        "name_process": "filter_vcf_noChunk",
        "string_process": "\nprocess filter_vcf_noChunk {\n                                                     \n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true\n\n    input:\n    set val(label), val(comparisonID), val(tumorID), val(normalID), file(vcf) from variants_noChunk\n\n    output:\n    set val(label), val(comparisonID), val(tumorID), val(normalID), file(\"${output_vcf}\") into variants_noChunk_filtered\n\n    script:\n    prefix = \"${comparisonID}.${label}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = \"${comparisonID}.${label}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "variants_noChunk"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_noChunk_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_tsv_noChunk": {
        "name_process": "vcf_to_tsv_noChunk",
        "string_process": "\nprocess vcf_to_tsv_noChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n\n    input:\n    set val(label), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(ref_fasta), file(ref_fai), file(ref_dict) from variants_noChunk_filtered.combine(ref_fasta6).combine(ref_fai6).combine(ref_dict6)\n\n    output:\n    set val(label), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(\"${reformat_tsv}\") into vcf_tsv_noChunk                 \n\n    script:\n    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${label}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${label}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "SCcaller"
        ],
        "tools_url": [
            "https://bio.tools/sccaller"
        ],
        "tools_dico": [
            {
                "name": "SCcaller",
                "uri": "https://bio.tools/sccaller",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for Identifying single nucleotide variations (SNVs) and short insertions and deletions (INDELs) from single cell sequencing data.",
                "homepage": "https://github.com/biosinodx/SCcaller/"
            }
        ],
        "inputs": [
            "variants_noChunk_filtered",
            "ref_fasta6",
            "ref_fai6",
            "ref_dict6"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcf_tsv_noChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bed_chromChunk": {
        "name_process": "bed_chromChunk",
        "string_process": "\nprocess bed_chromChunk {\n                                          \n    executor \"local\"\n    tag \"${chrom}\"\n\n    input:\n    set file(targets_bed), val(chrom) from targets_chroms\n\n    output:\n    set val(\"${label}\"), val(chrom), file(\"${output_bed}\") into chromChunk_targets\n\n    script:\n    label = \"chromChunk\"\n    output_bed = \"targets.${chrom}.bed\"\n    \"\"\"\n    subset_bed.py \"${chrom}\" \"${targets_bed}\" > \"${output_bed}\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    label = \"chromChunk\"\n    output_bed = \"targets.${chrom}.bed\"\n    \"\"\"\n    subset_bed.py \"${chrom}\" \"${targets_bed}\" > \"${output_bed}\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "ICLabel"
        ],
        "tools_url": [
            "https://bio.tools/ICLabel"
        ],
        "tools_dico": [
            {
                "name": "ICLabel",
                "uri": "https://bio.tools/ICLabel",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3304",
                            "term": "Neurobiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3629",
                                    "term": "Deisotoping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3629",
                                    "term": "Deconvolution"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Automated electroencephalographic independent component classifier, dataset, and website.",
                "homepage": "https://iclabel.ucsd.edu/"
            }
        ],
        "inputs": [
            "targets_chroms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chromChunk_targets"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "executor \"local\"",
            "tag \"${chrom}\""
        ],
        "when": "",
        "stub": ""
    },
    "mutect2_chromChunk": {
        "name_process": "mutect2_chromChunk",
        "string_process": "\nprocess mutect2_chromChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n                \n\n    input:\n    set val(label), val(chrom), val(comparisonID), val(tumorID), val(normalID), file(tumorBam), file(tumorBai), file(normalBam), file(normalBai), file(\"targets.bed\"), file(ref_fasta), file(ref_fai), file(ref_dict), file(dbsnp_ref_vcf), file(dbsnp_ref_vcf_idx), file(cosmic_ref_vcf), file(cosmic_ref_vcf_idx) from input_chromChunk_ch\n\n    output:\n    set val(\"${label}\"), val(chrom), val(comparisonID), val(tumorID), val(normalID), file(\"${output_norm_vcf}\") into variants_chromChunk\n    file(\"${output_vcf}\")\n    file(\"${multiallelics_stats}\")\n    file(\"${realign_stats}\")\n\n    when: params.disable != \"true\"\n\n    script:\n                                           \n    prefix = \"${comparisonID}.${label}.${chrom}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"targets.bed\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    prefix = \"${comparisonID}.${label}.${chrom}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"targets.bed\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "input_chromChunk_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_chromChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_vcf_chromChunk": {
        "name_process": "filter_vcf_chromChunk",
        "string_process": "\nprocess filter_vcf_chromChunk {\n                                                     \n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true\n\n    input:\n    set val(label), val(chrom), val(comparisonID), val(tumorID), val(normalID), file(vcf) from variants_chromChunk\n\n    output:\n    set val(label), val(chrom), val(comparisonID), val(tumorID), val(normalID), file(\"${output_vcf}\") into variants_chromChunk_filtered\n\n    script:\n    prefix = \"${comparisonID}.${label}.${chrom}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = \"${comparisonID}.${label}.${chrom}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "variants_chromChunk"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_chromChunk_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_tsv_chromChunk": {
        "name_process": "vcf_to_tsv_chromChunk",
        "string_process": "\nprocess vcf_to_tsv_chromChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n\n    input:\n    set val(label), val(chrom), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(ref_fasta), file(ref_fai), file(ref_dict) from variants_chromChunk_filtered.combine(ref_fasta5).combine(ref_fai5).combine(ref_dict5)\n\n    output:\n    set val(label), val(chrom), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(\"${reformat_tsv}\") into vcf_tsv_chromChunk                 \n\n    script:\n    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${label}.${chrom}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${label}.${chrom}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "SCcaller"
        ],
        "tools_url": [
            "https://bio.tools/sccaller"
        ],
        "tools_dico": [
            {
                "name": "SCcaller",
                "uri": "https://bio.tools/sccaller",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for Identifying single nucleotide variations (SNVs) and short insertions and deletions (INDELs) from single cell sequencing data.",
                "homepage": "https://github.com/biosinodx/SCcaller/"
            }
        ],
        "inputs": [
            "variants_chromChunk_filtered",
            "ref_fasta5",
            "ref_fai5",
            "ref_dict5"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcf_tsv_chromChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bed_nChunk": {
        "name_process": "bed_nChunk",
        "string_process": "\nprocess bed_nChunk {\n    executor \"local\"\n    echo true\n\n    input:\n    set val(nChunkLabel), val(nchunks), file(\"targets\") from nChunk_target\n\n    output:\n    file(\"targets.*\") into chunked_targets\n\n    script:\n    \"\"\"\n    chunk-lines.py \"targets\" \"${nchunks}\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    chunk-lines.py \"targets\" \"${nchunks}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "nChunk_target"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chunked_targets"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "executor \"local\"",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "mutect2_nChunk": {
        "name_process": "mutect2_nChunk",
        "string_process": "\nprocess mutect2_nChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n    echo true\n\n    input:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(tumorBam), file(tumorBai), file(normalBam), file(normalBai), file(\"targets.bed\"), file(ref_fasta), file(ref_fai), file(ref_dict), file(dbsnp_ref_vcf), file(dbsnp_ref_vcf_idx), file(cosmic_ref_vcf), file(cosmic_ref_vcf_idx) from input_nChunk_ch\n\n    output:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(\"${output_norm_vcf}\") into variants_nChunk\n    file(\"${output_vcf}\")\n    file(\"${multiallelics_stats}\")\n    file(\"${realign_stats}\")\n\n    when: params.disable != \"true\"\n\n    script:\n                                           \n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"targets.bed\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"targets.bed\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "input_nChunk_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_nChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "filter_vcf_nChunk": {
        "name_process": "filter_vcf_nChunk",
        "string_process": "\nprocess filter_vcf_nChunk {\n                                                     \n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true\n\n    input:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(vcf) from variants_nChunk\n\n    output:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(\"${output_vcf}\") into variants_nChunk_filtered\n\n    script:\n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "variants_nChunk"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_nChunk_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_tsv_nChunk": {
        "name_process": "vcf_to_tsv_nChunk",
        "string_process": "\nprocess vcf_to_tsv_nChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n\n    input:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(ref_fasta), file(ref_fai), file(ref_dict) from variants_nChunk_filtered.combine(ref_fasta4).combine(ref_fai4).combine(ref_dict4)\n\n    output:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(\"${reformat_tsv}\") into vcf_tsv_nChunk                 \n\n    script:\n    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "SCcaller"
        ],
        "tools_url": [
            "https://bio.tools/sccaller"
        ],
        "tools_dico": [
            {
                "name": "SCcaller",
                "uri": "https://bio.tools/sccaller",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for Identifying single nucleotide variations (SNVs) and short insertions and deletions (INDELs) from single cell sequencing data.",
                "homepage": "https://github.com/biosinodx/SCcaller/"
            }
        ],
        "inputs": [
            "variants_nChunk_filtered",
            "ref_fasta4",
            "ref_fai4",
            "ref_dict4"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcf_tsv_nChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "targetChunkLines": {
        "name_process": "targetChunkLines",
        "string_process": "\nprocess targetChunkLines {\n    executor \"local\"\n    echo true\n\n    input:\n    set val(lineChunkLabel), val(lineChunks), file(\"targets\") from lineChunk_target\n\n    output:\n    file(\"targets.*\") into line_chunked_targets\n\n    script:\n    \"\"\"\n    chunk-by-lines.py \"targets\" \"${lineChunks}\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    chunk-by-lines.py \"targets\" \"${lineChunks}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lineChunk_target"
        ],
        "nb_inputs": 1,
        "outputs": [
            "line_chunked_targets"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "executor \"local\"",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "mutect2_lineChunk": {
        "name_process": "mutect2_lineChunk",
        "string_process": "\nprocess mutect2_lineChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n    echo true\n\n    input:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(tumorBam), file(tumorBai), file(normalBam), file(normalBai), file(\"targets.bed\"), file(ref_fasta), file(ref_fai), file(ref_dict), file(dbsnp_ref_vcf), file(dbsnp_ref_vcf_idx), file(cosmic_ref_vcf), file(cosmic_ref_vcf_idx) from input_lineChunk_ch\n\n    output:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(\"${output_norm_vcf}\") into variants_lineChunk\n    file(\"${output_vcf}\")\n    file(\"${multiallelics_stats}\")\n    file(\"${realign_stats}\")\n\n    when: params.disable != \"true\"\n\n    script:\n                                           \n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"targets.bed\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.vcf\"\n    output_norm_vcf = \"${prefix}.norm.vcf\"\n    multiallelics_stats = \"${prefix}.bcftools.multiallelics.stats.txt\"\n    realign_stats = \"${prefix}.bcftools.realign.stats.txt\"\n    \"\"\"\n    gatk.sh -T MuTect2 \\\n    -dt NONE \\\n    --logging_level WARN \\\n    --standard_min_confidence_threshold_for_calling 30 \\\n    --max_alt_alleles_in_normal_count 10 \\\n    --max_alt_allele_in_normal_fraction 0.05 \\\n    --max_alt_alleles_in_normal_qscore_sum 40 \\\n    --reference_sequence \"${ref_fasta}\" \\\n    --dbsnp \"${dbsnp_ref_vcf}\" \\\n    --cosmic \"${cosmic_ref_vcf}\" \\\n    --intervals \"targets.bed\" \\\n    --interval_padding 10 \\\n    --input_file:tumor \"${tumorBam}\" \\\n    --input_file:normal \"${normalBam}\" \\\n    --out \"${output_vcf}\"\n\n    # normalize and split vcf entries\n    cat ${output_vcf} | \\\n    bcftools norm --multiallelics -both --output-type v - 2>\"${multiallelics_stats}\" | \\\n    bcftools norm --fasta-ref \"${ref_fasta}\" --output-type v - 2>\"${realign_stats}\" > \\\n    \"${output_norm_vcf}\"\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "input_lineChunk_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_lineChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "filter_vcf_lineChunk": {
        "name_process": "filter_vcf_lineChunk",
        "string_process": "\nprocess filter_vcf_lineChunk {\n                                                     \n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true\n\n    input:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(vcf) from variants_lineChunk\n\n    output:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(\"${output_vcf}\") into variants_lineChunk_filtered\n\n    script:\n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    output_vcf = \"${prefix}.filter.vcf\"\n    \"\"\"\n    # get the header\n    grep '^#' \"${vcf}\" > \"${output_vcf}\"\n    # get the 'PASS' entries\n    grep -v '^#' \"${vcf}\" | grep 'PASS' >> \"${output_vcf}\" || :\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "variants_lineChunk"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variants_lineChunk_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_tsv_lineChunk": {
        "name_process": "vcf_to_tsv_lineChunk",
        "string_process": "\nprocess vcf_to_tsv_lineChunk {\n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'\n\n    input:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(ref_fasta), file(ref_fai), file(ref_dict) from variants_lineChunk_filtered.combine(ref_fasta8).combine(ref_fai8).combine(ref_dict8)\n\n    output:\n    set val(chunkLabel), val(targetChunkNum), val(comparisonID), val(tumorID), val(normalID), file(vcf), file(\"${reformat_tsv}\") into vcf_tsv_lineChunk                 \n\n    script:\n    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    caller = \"MuTect2\"\n    prefix = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    tsv_file = \"${prefix}.tsv\"\n    reformat_tsv = \"${prefix}.reformat.tsv\"\n    \"\"\"\n    # convert VCF to TSV\n    # NOTE: automatically filters for only PASS entries\n    gatk.sh -T VariantsToTable \\\n    -R \"${ref_fasta}\" \\\n    -V \"${vcf}\" \\\n    -F CHROM -F POS -F ID -F REF -F ALT -F FILTER -F QUAL -F AC -F AN -F NLOD -F TLOD \\\n    -GF AD -GF DP -GF AF \\\n    -o \"${tsv_file}\"\n\n    # reformat and adjust the TSV table for consistency downstream\n    # add extra columns to the VCF TSV file for downstream\n    reformat-vcf-table.py -c MuTect2 -s \"${tumorID}\" -i \"${tsv_file}\" | \\\n    paste-col.py --header \"Sample\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Tumor\" -v \"${tumorID}\"  | \\\n    paste-col.py --header \"Normal\" -v \"${normalID}\"  | \\\n    paste-col.py --header \"VariantCaller\" -v \"${caller}\" > \\\n    \"${reformat_tsv}\"\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "SCcaller"
        ],
        "tools_url": [
            "https://bio.tools/sccaller"
        ],
        "tools_dico": [
            {
                "name": "SCcaller",
                "uri": "https://bio.tools/sccaller",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for Identifying single nucleotide variations (SNVs) and short insertions and deletions (INDELs) from single cell sequencing data.",
                "homepage": "https://github.com/biosinodx/SCcaller/"
            }
        ],
        "inputs": [
            "variants_lineChunk_filtered",
            "ref_fasta8",
            "ref_fai8",
            "ref_dict8"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcf_tsv_lineChunk"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/variants\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "annotate": {
        "name_process": "annotate",
        "string_process": "\nprocess annotate {\n                            \n    tag \"${prefix}\"\n    publishDir \"${params.outputDir}/annotations\", overwrite: true, mode: 'copy'\n\n    input:\n    set val(type), val(label), file(vcf), file(tsv), file(annovar_db_dir) from vcfs_tsvs.combine(annovar_db_dir)\n\n    output:\n    set val(type), val(label), file(vcf), file(tsv), file(\"${annovar_output_txt}\"), file(\"${avinput_tsv}\") into vcfs_tsvs_annotations\n\n    script:\n    prefix = \"${label}\"\n    avinput_file = \"${prefix}.avinput\"\n    avinput_tsv = \"${avinput_file}.tsv\"\n    annovar_output_txt = \"${prefix}.${params.ANNOVAR_BUILD_VERSION}_multianno.txt\"\n    \"\"\"\n    table_annovar.pl \"${vcf}\" \"${annovar_db_dir}\" \\\n    --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n    --remove \\\n    --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n    --operation \"${params.ANNOVAR_OPERATION}\" \\\n    --nastring . \\\n    --vcfinput \\\n    --onetranscript \\\n    --outfile \"${prefix}\"\n    printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tCHROM\\tPOS\\tID\\tREF\\tALT\\n\" > \"${prefix}.avinput.tsv\"\n    cut -f1-5,9-13 ${avinput_file} >>  \"${avinput_tsv}\"\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    prefix = \"${label}\"\n    avinput_file = \"${prefix}.avinput\"\n    avinput_tsv = \"${avinput_file}.tsv\"\n    annovar_output_txt = \"${prefix}.${params.ANNOVAR_BUILD_VERSION}_multianno.txt\"\n    \"\"\"\n    table_annovar.pl \"${vcf}\" \"${annovar_db_dir}\" \\\n    --buildver \"${params.ANNOVAR_BUILD_VERSION}\" \\\n    --remove \\\n    --protocol \"${params.ANNOVAR_PROTOCOL}\" \\\n    --operation \"${params.ANNOVAR_OPERATION}\" \\\n    --nastring . \\\n    --vcfinput \\\n    --onetranscript \\\n    --outfile \"${prefix}\"\n    printf \"Chr\\tStart\\tEnd\\tRef\\tAlt\\tCHROM\\tPOS\\tID\\tREF\\tALT\\n\" > \"${prefix}.avinput.tsv\"\n    cut -f1-5,9-13 ${avinput_file} >>  \"${avinput_tsv}\"\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfs_tsvs",
            "annovar_db_dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "vcfs_tsvs_annotations"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\"",
            "publishDir \"${params.outputDir}/annotations\", overwrite: true, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_tables": {
        "name_process": "merge_tables",
        "string_process": "\nprocess merge_tables {\n                                          \n    tag \"${prefix}\"\n                                                                      \n\n    input:\n    set val(type), val(label), file(vcf), file(tsv), file(annovar_txt), file(avinput_tsv) from vcfs_tsvs_annotations\n\n    output:\n    file(\"${output_annotations}\") into merged_tables\n\n    script:\n    prefix = \"${label}\"\n    output_annotations = \"${prefix}.annotations.tsv\"\n    \"\"\"\n    merge-vcf-tables.R \"${tsv}\" \"${annovar_txt}\" \"${avinput_tsv}\" tmp.tsv\n\n    cat tmp.tsv | \\\n    paste-col.py --header \"Type\" -v \"${type}\"  | \\\n    paste-col.py --header \"Label\" -v \"${label}\"  > \\\n    \"${output_annotations}\"\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    prefix = \"${label}\"\n    output_annotations = \"${prefix}.annotations.tsv\"\n    \"\"\"\n    merge-vcf-tables.R \"${tsv}\" \"${annovar_txt}\" \"${avinput_tsv}\" tmp.tsv\n\n    cat tmp.tsv | \\\n    paste-col.py --header \"Type\" -v \"${type}\"  | \\\n    paste-col.py --header \"Label\" -v \"${label}\"  > \\\n    \"${output_annotations}\"\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfs_tsvs_annotations"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_tables"
        ],
        "nb_outputs": 1,
        "name_workflow": "stevekm__MuTect2_target_chunking",
        "directive": [
            "tag \"${prefix}\""
        ],
        "when": "",
        "stub": ""
    }
}
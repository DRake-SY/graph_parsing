{
    "OPERATION_1": {
        "string": "Channel\n\t.from([[params.prefix, [file(params.reads1)]]])\n\t.into { read_files_fastqc; read_files_dedup; read_files_synthetic_contaminants }",
        "origin": [],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_dedup",
                "P"
            ],
            [
                "read_files_synthetic_contaminants",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n\t.from([[params.prefix, [file(params.reads1), file(params.reads2)]]] )\n\t.into { read_files_fastqc; read_files_dedup; read_files_synthetic_contaminants }",
        "origin": [],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_dedup",
                "P"
            ],
            [
                "read_files_synthetic_contaminants",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "dedup_log = Channel.from(file(\"$baseDir/assets/no_dedup.yaml\"))",
        "origin": [],
        "gives": [
            [
                "dedup_log",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath( \"${params.artefacts}\", checkIfExists: true ).set { artefacts }",
        "origin": [
            [
                "\"${params.artefacts}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "artefacts",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath( \"${params.phix174ill}\", checkIfExists: true ).set { phix174ill }",
        "origin": [
            [
                "\"${params.phix174ill}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "phix174ill",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath( \"${params.adapters}\", checkIfExists: true ).set { adapters }",
        "origin": [
            [
                "\"${params.adapters}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "adapters",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath( \"${params.foreign_genome}\", checkIfExists: true ).set { foreign_genome }",
        "origin": [
            [
                "\"${params.foreign_genome}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "foreign_genome",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "index_foreign_genome_log = Channel.from(file(\"$baseDir/assets/foreign_genome_indexing_mqc.yaml\"))",
        "origin": [],
        "gives": [
            [
                "index_foreign_genome_log",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "index_foreign_genome_log = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "index_foreign_genome_log",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ref_foreign_genome = Channel.from(file(params.foreign_genome_ref))",
        "origin": [],
        "gives": [
            [
                "ref_foreign_genome",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel\n\t.from([[params.prefix, [file(params.reads1)]]])\n\t.into { reads_profile_taxa; reads_profile_functions }",
        "origin": [],
        "gives": [
            [
                "reads_profile_taxa",
                "P"
            ],
            [
                "reads_profile_functions",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "reads_merge_paired_end_cleaned = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_merge_paired_end_cleaned",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "merge_paired_end_cleaned_log = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "merge_paired_end_cleaned_log",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel\n\t.from([[params.prefix, [file(params.reads1), file(params.reads2)]]] )\n\t.set { reads_merge_paired_end_cleaned }",
        "origin": [],
        "gives": [
            [
                "reads_merge_paired_end_cleaned",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "merge_paired_end_cleaned_log = Channel.from(file(\"$baseDir/assets/merge_paired_end_cleaned_mqc.yaml\"))",
        "origin": [],
        "gives": [
            [
                "merge_paired_end_cleaned_log",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "reads_profile_taxa = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_profile_taxa",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "reads_profile_functions = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_profile_functions",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "reads_merge_paired_end_cleaned = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_merge_paired_end_cleaned",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "merge_paired_end_cleaned_log = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "merge_paired_end_cleaned_log",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "reads_profile_taxa = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_profile_taxa",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "reads_profile_functions = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_profile_functions",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "reads_profile_taxa = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_profile_taxa",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "Channel.fromPath( params.metaphlan_databases, type: 'dir', checkIfExists: true ).set { bowtie2_metaphlan_databases }",
        "origin": [
            [
                "params.metaphlan_databases, type: 'dir', checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "bowtie2_metaphlan_databases",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "Channel.fromPath( params.chocophlan, type: 'dir', checkIfExists: true ).set { chocophlan_databases }",
        "origin": [
            [
                "params.chocophlan, type: 'dir', checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "chocophlan_databases",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "Channel.fromPath( params.uniref, type: 'dir', checkIfExists: true ).set { uniref_databases }",
        "origin": [
            [
                "params.uniref, type: 'dir', checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "uniref_databases",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "summary.collect { k,v -> \"${k.padRight(27)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_27": {
        "string": "to_synthetic_contaminants = read_files_synthetic_contaminants",
        "origin": [
            [
                "read_files_synthetic_contaminants",
                "P"
            ]
        ],
        "gives": [
            [
                "to_synthetic_contaminants",
                "P"
            ]
        ]
    }
}
{
    "run_strelkaGenotyping": {
        "name_process": "run_strelkaGenotyping",
        "string_process": " process run_strelkaGenotyping {\n     cpus params.cpu\n     memory params.mem+'GB'\n     tag { sample }\n\n     publishDir params.output_folder+\"/VCFs/GT/raw\", mode: 'copy', pattern: \"*vcf*\"\n     publishDir params.output_folder+\"/CallableRegions\", mode: 'copy', pattern: \"*bed*\"\n\n     input:\n     set val(sample), file(bamT), file(baiT), file(bamN), file(baiN), file(vcfSNV), file(vcfSNVtbi), file(vcfINDEL), file(vcfINDELtbi) from pairs2genotype\n     file bed\n     file tbi\n     file fasta_ref\n     file fasta_ref_fai\n\n     output:\n     file 'strelkaAnalysis/results/variants/*vcf.gz'\n     file 'strelkaAnalysis/results/variants/*.tbi'\n     file 'strelkaAnalysis/results/regions/*.bed.gz' optional true\n     file 'strelkaAnalysis/results/regions/*.tbi' optional true\n     \n     shell:\n     if (params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n     if( params.rna ){ \n\tfiles1=\"--bam ${bamT[0]}\"\n\tfiles2=\"--bam ${bamT[1]}\"\n     }else{ \n\tfiles1=\"--normalBam $bamN --tumorBam ${bamT[0]}\" \n\tfiles2=\"--normalBam $bamN --tumorBam ${bamT[1]}\"\n     }\n     '''\n     !{baseDir}/bin/prep_vcf_bed.sh\n     forcedGT=''\n     for v in `ls *.vcf.gz`; do forcedGT=$forcedGT' --forcedGT '$v; done\n     forcedGT=$forcedGT\" --callRegions regions.bed.gz\"\n     !{workflow} $forcedGT !{files1} --referenceFasta !{fasta_ref} --config !{config} !{exome} --runDir strelkaAnalysis !{callRegions} !{outputCallableRegions}\n     cd strelkaAnalysis\n     ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n     cd results/variants\n     mv somatic.indels.vcf.gz !{sample}_!{bamT[0]}.somaticGT.indels.vcf.gz\n     mv somatic.snvs.vcf.gz !{sample}_!{bamT[0]}.somaticGT.snvs.vcf.gz\n     mv somatic.indels.vcf.gz.tbi !{sample}_!{bamT[0]}.somaticGT.indels.vcf.gz.tbi\n     mv somatic.snvs.vcf.gz.tbi !{sample}_!{bamT[0]}.somaticGT.snvs.vcf.gz.tbi\n     cd ../regions\n     mv somatic.callable.regions.bed.gz !{sample}_!{bamT[0]}.somaticGT.callable.regions.bed.gz\n     mv somatic.callable.regions.bed.gz.tbi !{sample}_!{bamT[0]}.somaticGT.callable.regions.bed.gz.tbi\n\n     cd ../../..\n     mv strelkaAnalysis strelkaAnalysis_T1\n     !{workflow} $forcedGT !{files2} --referenceFasta !{fasta_ref} --config !{config} !{exome} --runDir strelkaAnalysis !{callRegions} !{outputCallableRegions}\n     cd strelkaAnalysis\n     ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n     cd results/variants\n     mv somatic.indels.vcf.gz !{sample}_!{bamT[1]}.somaticGT.indels.vcf.gz\n     mv somatic.snvs.vcf.gz !{sample}_!{bamT[1]}.somaticGT.snvs.vcf.gz\n     mv somatic.indels.vcf.gz.tbi !{sample}_!{bamT[1]}.somaticGT.indels.vcf.gz.tbi\n     mv somatic.snvs.vcf.gz.tbi !{sample}_!{bamT[1]}.somaticGT.snvs.vcf.gz.tbi\n     cd ../regions\n     mv somatic.callable.regions.bed.gz !{sample}_!{bamT[1]}.somaticGT.callable.regions.bed.gz\n     mv somatic.callable.regions.bed.gz.tbi !{sample}_!{bamT[1]}.somaticGT.callable.regions.bed.gz.tbi\n     cd ../../..\n     mv strelkaAnalysis strelkaAnalysis_T2\n     '''\n  }",
        "nb_lignes_process": 62,
        "string_script": "     if (params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n     if( params.rna ){ \n\tfiles1=\"--bam ${bamT[0]}\"\n\tfiles2=\"--bam ${bamT[1]}\"\n     }else{ \n\tfiles1=\"--normalBam $bamN --tumorBam ${bamT[0]}\" \n\tfiles2=\"--normalBam $bamN --tumorBam ${bamT[1]}\"\n     }\n     '''\n     !{baseDir}/bin/prep_vcf_bed.sh\n     forcedGT=''\n     for v in `ls *.vcf.gz`; do forcedGT=$forcedGT' --forcedGT '$v; done\n     forcedGT=$forcedGT\" --callRegions regions.bed.gz\"\n     !{workflow} $forcedGT !{files1} --referenceFasta !{fasta_ref} --config !{config} !{exome} --runDir strelkaAnalysis !{callRegions} !{outputCallableRegions}\n     cd strelkaAnalysis\n     ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n     cd results/variants\n     mv somatic.indels.vcf.gz !{sample}_!{bamT[0]}.somaticGT.indels.vcf.gz\n     mv somatic.snvs.vcf.gz !{sample}_!{bamT[0]}.somaticGT.snvs.vcf.gz\n     mv somatic.indels.vcf.gz.tbi !{sample}_!{bamT[0]}.somaticGT.indels.vcf.gz.tbi\n     mv somatic.snvs.vcf.gz.tbi !{sample}_!{bamT[0]}.somaticGT.snvs.vcf.gz.tbi\n     cd ../regions\n     mv somatic.callable.regions.bed.gz !{sample}_!{bamT[0]}.somaticGT.callable.regions.bed.gz\n     mv somatic.callable.regions.bed.gz.tbi !{sample}_!{bamT[0]}.somaticGT.callable.regions.bed.gz.tbi\n\n     cd ../../..\n     mv strelkaAnalysis strelkaAnalysis_T1\n     !{workflow} $forcedGT !{files2} --referenceFasta !{fasta_ref} --config !{config} !{exome} --runDir strelkaAnalysis !{callRegions} !{outputCallableRegions}\n     cd strelkaAnalysis\n     ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n     cd results/variants\n     mv somatic.indels.vcf.gz !{sample}_!{bamT[1]}.somaticGT.indels.vcf.gz\n     mv somatic.snvs.vcf.gz !{sample}_!{bamT[1]}.somaticGT.snvs.vcf.gz\n     mv somatic.indels.vcf.gz.tbi !{sample}_!{bamT[1]}.somaticGT.indels.vcf.gz.tbi\n     mv somatic.snvs.vcf.gz.tbi !{sample}_!{bamT[1]}.somaticGT.snvs.vcf.gz.tbi\n     cd ../regions\n     mv somatic.callable.regions.bed.gz !{sample}_!{bamT[1]}.somaticGT.callable.regions.bed.gz\n     mv somatic.callable.regions.bed.gz.tbi !{sample}_!{bamT[1]}.somaticGT.callable.regions.bed.gz.tbi\n     cd ../../..\n     mv strelkaAnalysis strelkaAnalysis_T2\n     '''",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs2genotype",
            "bed",
            "tbi",
            "fasta_ref",
            "fasta_ref_fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "IARCbioinfo__strelka2-nf",
        "directive": [
            "cpus params.cpu",
            "memory params.mem+'GB'",
            "tag { sample }",
            "publishDir params.output_folder+\"/VCFs/GT/raw\", mode: 'copy', pattern: \"*vcf*\"",
            "publishDir params.output_folder+\"/CallableRegions\", mode: 'copy', pattern: \"*bed*\""
        ],
        "when": "",
        "stub": ""
    },
    "run_strelka_somatic": {
        "name_process": "run_strelka_somatic",
        "string_process": " process run_strelka_somatic {\n     cpus params.cpu\n     memory params.mem+'GB' \n      \n     publishDir params.output_folder+\"/VCFs/raw\", mode: 'copy', pattern: \"*vcf*\"\n     publishDir params.output_folder+\"/CallableRegions\", mode: 'copy', pattern: \"*bed*\"\n\n     input:\n     set val(sample), file(bamT), file(baiT) , file(bamN), file(baiN), file(vcf), file(vcf_tbi) from pairs\n     file bed\n     file tbi\n     file fasta_ref\n     file fasta_ref_fai\n\n     output:\n     file '*.somatic.*.vcf.gz' into vcffiles\n     file '*.somatic.*.vcf.gz.tbi' into tbifiles\n     file '*callable.regions.bed.gz*' optional true into regionfiles\n\n     shell:\n     if (vcf.name=='NO_VCF' & params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n     if(sample){\n\t   output_prefix=\"${sample}.somatic\"\n     }else{\n\t   output_prefix=\"${bamT}_vs_${bamN}.somatic\"\n     }\n     '''\n     forcedGT=''\n     if [ -e \"!{vcf}\" ]; then\n       !{baseDir}/bin/prep_vcf_bed.sh\n       for v in `ls *.vcf.gz`; do forcedGT=$forcedGT' --forcedGT '$v; done\n       forcedGT=$forcedGT\" --callRegions regions.bed.gz\"\n     fi\n     !{workflow} $forcedGT --tumorBam !{bamT} --normalBam !{bamN} --referenceFasta !{fasta_ref} --config !{config} !{exome} --runDir strelkaAnalysis !{callRegions} !{outputCallableRegions}\n     cd strelkaAnalysis\n     ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n     cd ..\n     mv strelkaAnalysis/results/variants/* .\n     mv somatic.indels.vcf.gz !{output_prefix}.indels.vcf.gz\n     mv somatic.snvs.vcf.gz !{output_prefix}.snvs.vcf.gz\n     mv somatic.indels.vcf.gz.tbi !{output_prefix}.indels.vcf.gz.tbi\n     mv somatic.snvs.vcf.gz.tbi !{output_prefix}.snvs.vcf.gz.tbi\n     fixStrelkaOutput.sh *.vcf.gz\n     if [ -d strelkaAnalysis/results/regions/ ]; then\n     \tmv strelkaAnalysis/results/regions/* .\n     \tmv somatic.callable.regions.bed.gz !{output_prefix}.callable.regions.bed.gz\n     \tmv somatic.callable.regions.bed.gz.tbi !{output_prefix}.callable.regions.bed.gz.tbi\n     fi\n     '''\n  }",
        "nb_lignes_process": 48,
        "string_script": "     if (vcf.name=='NO_VCF' & params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n     if(sample){\n\t   output_prefix=\"${sample}.somatic\"\n     }else{\n\t   output_prefix=\"${bamT}_vs_${bamN}.somatic\"\n     }\n     '''\n     forcedGT=''\n     if [ -e \"!{vcf}\" ]; then\n       !{baseDir}/bin/prep_vcf_bed.sh\n       for v in `ls *.vcf.gz`; do forcedGT=$forcedGT' --forcedGT '$v; done\n       forcedGT=$forcedGT\" --callRegions regions.bed.gz\"\n     fi\n     !{workflow} $forcedGT --tumorBam !{bamT} --normalBam !{bamN} --referenceFasta !{fasta_ref} --config !{config} !{exome} --runDir strelkaAnalysis !{callRegions} !{outputCallableRegions}\n     cd strelkaAnalysis\n     ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n     cd ..\n     mv strelkaAnalysis/results/variants/* .\n     mv somatic.indels.vcf.gz !{output_prefix}.indels.vcf.gz\n     mv somatic.snvs.vcf.gz !{output_prefix}.snvs.vcf.gz\n     mv somatic.indels.vcf.gz.tbi !{output_prefix}.indels.vcf.gz.tbi\n     mv somatic.snvs.vcf.gz.tbi !{output_prefix}.snvs.vcf.gz.tbi\n     fixStrelkaOutput.sh *.vcf.gz\n     if [ -d strelkaAnalysis/results/regions/ ]; then\n     \tmv strelkaAnalysis/results/regions/* .\n     \tmv somatic.callable.regions.bed.gz !{output_prefix}.callable.regions.bed.gz\n     \tmv somatic.callable.regions.bed.gz.tbi !{output_prefix}.callable.regions.bed.gz.tbi\n     fi\n     '''",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs",
            "bed",
            "tbi",
            "fasta_ref",
            "fasta_ref_fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "vcffiles",
            "tbifiles",
            "regionfiles"
        ],
        "nb_outputs": 3,
        "name_workflow": "IARCbioinfo__strelka2-nf",
        "directive": [
            "cpus params.cpu",
            "memory params.mem+'GB'",
            "publishDir params.output_folder+\"/VCFs/raw\", mode: 'copy', pattern: \"*vcf*\"",
            "publishDir params.output_folder+\"/CallableRegions\", mode: 'copy', pattern: \"*bed*\""
        ],
        "when": "",
        "stub": ""
    },
    "getAllelicFractionSomatic": {
        "name_process": "getAllelicFractionSomatic",
        "string_process": " process getAllelicFractionSomatic{\n\n         publishDir params.output_folder+\"/VCFs/withAF/\", mode: 'copy'\n\n         input:\n         file vcf from vcffiles\n\n         output:\n         file '*.vcf' into passfiles\n\n         shell:\n         '''\n         !{baseDir}/bin/getAllelicFraction !{vcf}\n         '''\n      }",
        "nb_lignes_process": 13,
        "string_script": "         '''\n         !{baseDir}/bin/getAllelicFraction !{vcf}\n         '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcffiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "passfiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "IARCbioinfo__strelka2-nf",
        "directive": [
            "publishDir params.output_folder+\"/VCFs/withAF/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_strelka_germline": {
        "name_process": "run_strelka_germline",
        "string_process": " process run_strelka_germline {\n    cpus params.cpu\n    memory params.mem+'GB'\n    tag { sample }\n      \n    publishDir params.output_folder+\"/VCFs/raw\", mode: 'copy', pattern: \"*vcf.gz*\"\n\n    input:\n    set val(sample), file(bam), file(bai), file(vcf), file(vcf_tbi) from bamFiles\n    file bed\n    file tbi \n    file fasta_ref\n    file fasta_ref_fai\n    \n    output:\n    file '*.germline.vcf.gz' into vcffiles\n    file '*.germline.vcf.gz.tbi' into vcftbifiles\n\n    shell:\n    if (vcf.name=='NO_VCF' & params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n    if (vcf.name=='NO_VCF' & params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n     if(sample){\n\t   output_prefix=\"${sample}.germline\"\n     }else{\n\t   output_prefix=\"${bam}.germline\"\n     }\n    '''\n    forcedGT=''\n     if [ -e \"!{vcf}\" ]; then\n       !{baseDir}/bin/prep_vcf_bed.sh\n       for v in `ls *.vcf.gz`; do forcedGT=$forcedGT' --forcedGT '$v; done\n       forcedGT=$forcedGT\" --callRegions regions.bed.gz\"\n     fi\n    !{workflow} $forcedGT --bam !{bam} --referenceFasta !{fasta_ref} --config !{config} !{rna} !{exome} --runDir strelkaAnalysis !{callRegions}\n    cd strelkaAnalysis\n    ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n    cd ..\n    mv strelkaAnalysis/results/variants/* .\n    mv variants.vcf.gz !{output_prefix}.vcf.gz\n    mv variants.vcf.gz.tbi !{output_prefix}.vcf.gz.tbi\n    '''\n  }",
        "nb_lignes_process": 40,
        "string_script": "    if (vcf.name=='NO_VCF' & params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n    if (vcf.name=='NO_VCF' & params.callRegions!=\"NO_FILE\") { callRegions=\"--callRegions $bed\" } else { callRegions=\"\" }\n     if(sample){\n\t   output_prefix=\"${sample}.germline\"\n     }else{\n\t   output_prefix=\"${bam}.germline\"\n     }\n    '''\n    forcedGT=''\n     if [ -e \"!{vcf}\" ]; then\n       !{baseDir}/bin/prep_vcf_bed.sh\n       for v in `ls *.vcf.gz`; do forcedGT=$forcedGT' --forcedGT '$v; done\n       forcedGT=$forcedGT\" --callRegions regions.bed.gz\"\n     fi\n    !{workflow} $forcedGT --bam !{bam} --referenceFasta !{fasta_ref} --config !{config} !{rna} !{exome} --runDir strelkaAnalysis !{callRegions}\n    cd strelkaAnalysis\n    ./runWorkflow.py -m local -j !{params.cpu} -g !{params.mem}\n    cd ..\n    mv strelkaAnalysis/results/variants/* .\n    mv variants.vcf.gz !{output_prefix}.vcf.gz\n    mv variants.vcf.gz.tbi !{output_prefix}.vcf.gz.tbi\n    '''",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamFiles",
            "bed",
            "tbi",
            "fasta_ref",
            "fasta_ref_fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "vcffiles",
            "vcftbifiles"
        ],
        "nb_outputs": 2,
        "name_workflow": "IARCbioinfo__strelka2-nf",
        "directive": [
            "cpus params.cpu",
            "memory params.mem+'GB'",
            "tag { sample }",
            "publishDir params.output_folder+\"/VCFs/raw\", mode: 'copy', pattern: \"*vcf.gz*\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_pass": {
        "name_process": "filter_pass",
        "string_process": "\nprocess filter_pass{\n   cpus 1\n   memory '1GB'\n\n   publishDir params.output_folder+\"/VCFs/filtered/\", mode: 'copy'\n\n   input:\n   file vcf from vcffiles2.flatten()\n\n   output:\n   file '*_PASS.vcf.gz*' into filtered\n\n   shell:\n   file_tag = vcf[0].name.replace(\".vcf.gz\",\"\").replace(\".vcf\",\"\")\n   '''\n   bcftools view -f PASS -O z !{vcf} -o !{file_tag}_PASS.vcf.gz\n   bcftools index -t !{file_tag}_PASS.vcf.gz\n   '''\n}",
        "nb_lignes_process": 18,
        "string_script": "   file_tag = vcf[0].name.replace(\".vcf.gz\",\"\").replace(\".vcf\",\"\")\n   '''\n   bcftools view -f PASS -O z !{vcf} -o !{file_tag}_PASS.vcf.gz\n   bcftools index -t !{file_tag}_PASS.vcf.gz\n   '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcffiles2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "IARCbioinfo__strelka2-nf",
        "directive": [
            "cpus 1",
            "memory '1GB'",
            "publishDir params.output_folder+\"/VCFs/filtered/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
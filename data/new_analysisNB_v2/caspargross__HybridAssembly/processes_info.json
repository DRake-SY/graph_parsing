{
    "porechop": {
        "name_process": "porechop",
        "string_process": "\nprocess porechop { \n                                                     \n    tag{id}\n        \n    input:\n    set id, lr, sr1, sr2 from files_preprocessing\n    \n    output:\n    set id, file('lr_porechop.fastq'), sr1, sr2 into files_porechop\n    set id, lr, val(\"raw\") into files_nanoplot_raw\n    \n    script:\n                                               \n    \"\"\"\n    $PY36\n    cat ${lr} > nanoreads.fastq\n    porechop -i nanoreads.fastq -t ${task.cpus} -o lr_porechop.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    $PY36\n    cat ${lr} > nanoreads.fastq\n    porechop -i nanoreads.fastq -t ${task.cpus} -o lr_porechop.fastq\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_preprocessing"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_porechop",
            "files_nanoplot_raw"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "filtlong": {
        "name_process": "filtlong",
        "string_process": "\nprocess filtlong {\n                                                                                                      \n    tag{id}\n\n    input: \n    set id, lr, sr1, sr2 from files_porechop\n    \n    output:\n    set id, file(\"lr_filtlong.fastq\"), sr1, sr2 into files_lr_filtered \n    set id, file(\"lr_filtlong.fastq\"), val('filtered') into files_nanoplot_filtered    \n\n    script:\n    \"\"\"\n    $PY36\n    filtlong \\\n    --min_length 1000 \\\n    --keep_percent 90 \\\n    --length_weight 0.5\\\n    --target_bases  ${target_lr_length} \\\n    ${lr} > lr_filtlong.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    $PY36\n    filtlong \\\n    --min_length 1000 \\\n    --keep_percent 90 \\\n    --length_weight 0.5\\\n    --target_bases  ${target_lr_length} \\\n    ${lr} > lr_filtlong.fastq\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "files_porechop"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_lr_filtered",
            "files_nanoplot_filtered"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "nanoplot": {
        "name_process": "nanoplot",
        "string_process": "\nprocess nanoplot {\n                                                            \n    tag{id}\n    publishDir \"${params.outDir}/${id}/qc/longread_${type}/\", mode: 'copy'\n    \n    input:\n    set id, lr, type from files_nanoplot_raw.mix(files_nanoplot_filtered)\n\n    output:\n    file '*.png'\n    file '*.html'\n    file '*.txt'\n    set id, file(\"*_NanoStats.txt\"), type into stats_lr\n    \n    script:\n    \"\"\"\n    $PY36\n    NanoPlot -t ${task.cpus} -p ${type}_  --title ${id}_${type} -c darkblue --fastq ${lr}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    $PY36\n    NanoPlot -t ${task.cpus} -p ${type}_  --title ${id}_${type} -c darkblue --fastq ${lr}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_nanoplot_raw",
            "files_nanoplot_filtered"
        ],
        "nb_inputs": 2,
        "outputs": [
            "stats_lr"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/qc/longread_${type}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "seqpurge": {
        "name_process": "seqpurge",
        "string_process": "\nprocess seqpurge {\n                                    \n    publishDir \"${params.outDir}/${id}/qc/shortread/\", mode: 'copy', pattern: \"${id}_readQC.qcml\"\n    tag{id}\n    \n    input:\n    set id, lr, sr1, sr2 from files_to_seqpurge\n    \n    output:\n    set id, lr, file('sr1.fastq.gz'), file('sr2.fastq.gz') into files_purged\n    set id, file(\"${id}_readQC.qcml\"), val(\"read_qc\") into stats_sr\n    \n    script:\n    \"\"\"\n    $PY27  \n    SeqPurge -in1 ${sr1} -in2 ${sr2} -threads ${task.cpus} -out1 sr1.fastq.gz -out2 sr2.fastq.gz -qc ${id}_readQC.qcml \n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    $PY27  \n    SeqPurge -in1 ${sr1} -in2 ${sr2} -threads ${task.cpus} -out1 sr1.fastq.gz -out2 sr2.fastq.gz -qc ${id}_readQC.qcml \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_to_seqpurge"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_purged",
            "stats_sr"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "publishDir \"${params.outDir}/${id}/qc/shortread/\", mode: 'copy', pattern: \"${id}_readQC.qcml\"",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "sample_shortreads": {
        "name_process": "sample_shortreads",
        "string_process": "\nprocess sample_shortreads {\n                     \n    tag{id}\n\n    input:\n    set id, lr, sr1, sr2 from files_purged\n\n    output:\n    set id, lr, file('sr1_filt.fastq'), file('sr2_filt.fastq') into files_filtered\n    \n    shell:\n    '''\n    !{PY27}\n    readLength=$(zcat !{sr1} | awk 'NR % 4 == 2 {s += length($1); t++} END {print s/t}')\n    srNumber=$(echo \"(!{params.genomeSize} * !{params.targetShortReadCov})/${readLength}\" | bc)\n    seqtk sample -s100 !{sr1} ${srNumber} > sr1_filt.fastq \n    seqtk sample -s100 !{sr2} ${srNumber} > sr2_filt.fastq \n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    !{PY27}\n    readLength=$(zcat !{sr1} | awk 'NR % 4 == 2 {s += length($1); t++} END {print s/t}')\n    srNumber=$(echo \"(!{params.genomeSize} * !{params.targetShortReadCov})/${readLength}\" | bc)\n    seqtk sample -s100 !{sr1} ${srNumber} > sr1_filt.fastq \n    seqtk sample -s100 !{sr2} ${srNumber} > sr2_filt.fastq \n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "files_purged"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "unicycler": {
        "name_process": "unicycler",
        "string_process": "\nprocess unicycler{\n                                              \n                                             \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly/\", mode: 'copy'   \n   \n    input:\n    set id, lr, sr1, sr2 from files_pre_unicycler\n\n    output:\n    set id, file(\"unicycler/assembly.fasta\"), val('unicycler') into assembly_unicycler\n    set id, val('unicycler'), file(\"unicycler/assembly.gfa\") into assembly_graph_unicycler\n    file(\"unicycler/assembly.fasta\")\n    file(\"unicycler/unicycler.log\")\n\n    when:\n    isMode(['unicycler', 'all', 'all_lr'])\n\n    script:\n    if (!longReadOnly)\n        \"\"\" \n        $PY36\n        unicycler -1 ${sr1} -2 ${sr2} -l ${lr} -o unicycler -t ${task.cpus}\n        \"\"\"\n    else \n        \"\"\"\n        $PY36\n        unicycler -l ${lr} -o unicycler -t ${task.cpus}\n        \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    if (!longReadOnly)\n        \"\"\" \n        $PY36\n        unicycler -1 ${sr1} -2 ${sr2} -l ${lr} -o unicycler -t ${task.cpus}\n        \"\"\"\n    else \n        \"\"\"\n        $PY36\n        unicycler -l ${lr} -o unicycler -t ${task.cpus}\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "files_pre_unicycler"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_unicycler",
            "assembly_graph_unicycler"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly/\", mode: 'copy'"
        ],
        "when": "isMode(['unicycler', 'all', 'all_lr'])",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": "\nprocess spades{\n                                                      \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly/spades\", mode: 'copy', pattern: \"${id}*\"\n\n    input:\n    set id, lr,  sr1, sr2 from files_pre_spades  \n\n    output:\n    set id, lr, sr1, sr2, file(\"spades/contigs.fasta\"), val('spades') into files_spades \n    set id, file(\"spades/scaffolds.fasta\"), val('spades_simple') into assembly_spades_simple \n    file(\"${id}_contigs_spades.fasta\")\n    set id, val('spades'), file(\"${id}_graph_spades.gfa\") into assembly_graph_spades\n    file(\"${id}_scaffolds_spades.fasta\")\n\n    when:\n    isMode(['spades','spades_simple','all'])\n     \n    script:\n    if (!longReadOnly)\n    \"\"\"\n    $PY36\n    spades.py -t ${task.cpus} \\\n    --phred-offset 33 --careful \\\n    --pe1-1 ${sr1} \\\n    --pe1-2 ${sr2} \\\n    --nanopore ${lr} \\\n    -o spades\n    cp spades/assembly_graph_with_scaffolds.gfa ${id}_graph_spades.gfa\n    cp spades/scaffolds.fasta ${id}_scaffolds_spades.fasta\n    cp spades/contigs.fasta ${id}_contigs_spades.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    if (!longReadOnly)\n    \"\"\"\n    $PY36\n    spades.py -t ${task.cpus} \\\n    --phred-offset 33 --careful \\\n    --pe1-1 ${sr1} \\\n    --pe1-2 ${sr2} \\\n    --nanopore ${lr} \\\n    -o spades\n    cp spades/assembly_graph_with_scaffolds.gfa ${id}_graph_spades.gfa\n    cp spades/scaffolds.fasta ${id}_scaffolds_spades.fasta\n    cp spades/contigs.fasta ${id}_contigs_spades.fasta\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_pre_spades"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_spades",
            "assembly_spades_simple",
            "assembly_graph_spades"
        ],
        "nb_outputs": 3,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly/spades\", mode: 'copy', pattern: \"${id}*\""
        ],
        "when": "isMode(['spades','spades_simple','all'])",
        "stub": ""
    },
    "links_scaffolding": {
        "name_process": "links_scaffolding",
        "string_process": "\nprocess links_scaffolding{\n                                                                    \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly_processed/links_${type}\", mode: 'copy'   \n    \n    input:\n    set id, lr, sr1, sr2, scaffolds, type from files_spades\n    \n    output:\n    set id, lr,  sr1, sr2, file(\"${id}_${type}_scaffold_links.fasta\"), type into files_links\n\n    when:\n    isMode(['spades', 'all'])\n    \n    script:\n    \"\"\"\n    $PY36\n    echo ${lr} > longreads.txt\n    LINKS -x 1 -f ${scaffolds} -s longreads.txt -b links\n    mv links.scaffolds.fa ${id}_${type}_scaffold_links.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    $PY36\n    echo ${lr} > longreads.txt\n    LINKS -x 1 -f ${scaffolds} -s longreads.txt -b links\n    mv links.scaffolds.fa ${id}_${type}_scaffold_links.fasta\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "G-Links"
        ],
        "tools_url": [
            "https://bio.tools/g-links"
        ],
        "tools_dico": [
            {
                "name": "G-Links",
                "uri": "https://bio.tools/g-links",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A gateway server for querying and retrieving gene annotation data",
                "homepage": "http://www.g-language.org/wiki/glinks"
            }
        ],
        "inputs": [
            "files_spades"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_links"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly_processed/links_${type}\", mode: 'copy'"
        ],
        "when": "isMode(['spades', 'all'])",
        "stub": ""
    },
    "gapfiller": {
        "name_process": "gapfiller",
        "string_process": "\nprocess gapfiller{\n                                                                      \n   tag{id}\n   publishDir \"${params.outDir}/${id}/assembly_processed/gapfiller\", mode: 'copy'   \n   \n   input:\n   set id, lr, sr1, sr2, scaffolds, type from files_links\n          \n   output:\n   set id, file(\"${id}_gapfilled.fasta\"), type into assembly_gapfiller\n\n   script:\n   \"\"\"\n   $PY27\n   Gap2Seq -scaffolds ${scaffolds} -reads ${sr1},${sr2} -filled ${id}_gapfilled.fasta  -nf-cores ${task.cpus}\n   \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "   \"\"\"\n   $PY27\n   Gap2Seq -scaffolds ${scaffolds} -reads ${sr1},${sr2} -filled ${id}_gapfilled.fasta  -nf-cores ${task.cpus}\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_links"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_gapfiller"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly_processed/gapfiller\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "canu_parameters": {
        "name_process": "canu_parameters",
        "string_process": "\nprocess canu_parameters {\n                                         \n    output: \n    file('canu_settings.txt') into canu_settings\n\n    script:\n    \"\"\"\n    echo \\\n    \"genomeSize=${params.genomeSize}\n    minReadLength=1000\n    maxMemory=${task.memory.toGiga()}\n    maxThreads=${task.cpus}\n    corThreads=${task.cpus}\n    useGrid=false\n    \" > canu_settings.txt\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    echo \\\n    \"genomeSize=${params.genomeSize}\n    minReadLength=1000\n    maxMemory=${task.memory.toGiga()}\n    maxThreads=${task.cpus}\n    corThreads=${task.cpus}\n    useGrid=false\n    \" > canu_settings.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "canu_settings"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "canu": {
        "name_process": "canu",
        "string_process": "\nprocess canu{\n                                        \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly/canu\", mode: 'copy'\n\n    input:\n    set id, lr, sr1, sr2 from files_pre_canu\n    file canu_settings\n    \n    output: \n    set id, lr, sr1, sr2, file(\"${id}.contigs.fasta\"), val('canu') into files_unpolished_canu\n    file(\"${id}.report\")\n    set id, val('canu'), file(\"${id}_graph_canu.gfa\") into assembly_graph_canu\n    file(\"${id}_assembly_canu.fasta\")\n\n    when:\n    isMode(['canu','all', 'all_lr'])\n\n    script:\n    \"\"\"\n    $PY27\n    canu -s ${canu_settings} -p ${id} -nanopore-raw ${lr}\n    cp ${id}.unitigs.gfa ${id}_graph_canu.gfa\n    cp ${id}.contigs.fasta ${id}_assembly_canu.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    $PY27\n    canu -s ${canu_settings} -p ${id} -nanopore-raw ${lr}\n    cp ${id}.unitigs.gfa ${id}_graph_canu.gfa\n    cp ${id}.contigs.fasta ${id}_assembly_canu.fasta\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "files_pre_canu",
            "canu_settings"
        ],
        "nb_inputs": 2,
        "outputs": [
            "files_unpolished_canu",
            "assembly_graph_canu"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly/canu\", mode: 'copy'"
        ],
        "when": "isMode(['canu','all', 'all_lr'])",
        "stub": ""
    },
    "miniasm": {
        "name_process": "miniasm",
        "string_process": "\nprocess miniasm{\n                                                            \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly/miniasm\", mode: 'copy'\n\n    input:\n    set id, lr, sr1, sr2 from files_pre_miniasm\n    \n    output:\n    set id, lr, sr1, sr2, file(\"${id}_assembly_miniasm.fasta\") into files_noconsensus\n    set id, val('miniasm'), file(\"${id}_graph_miniasm.gfa\") into assembly_graph_miniasm\n\n    when:\n    isMode(['miniasm', 'all', 'all_lr'])\n\n    script:\n    \"\"\"\n    $PY36\n    minimap2 -x ava-ont -t ${task.cpus} ${lr} ${lr} > ovlp.paf\n    miniasm -f ${lr} ovlp.paf > ${id}_graph_miniasm.gfa\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' ${id}_graph_miniasm.gfa | fold > ${id}_assembly_miniasm.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    $PY36\n    minimap2 -x ava-ont -t ${task.cpus} ${lr} ${lr} > ovlp.paf\n    miniasm -f ${lr} ovlp.paf > ${id}_graph_miniasm.gfa\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' ${id}_graph_miniasm.gfa | fold > ${id}_assembly_miniasm.fasta\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "TFold"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/tfold"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "TFold",
                "uri": "https://bio.tools/tfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An algorithm for predicting non-coding RNA secondary structures.",
                "homepage": "https://evryrna.ibisc.univ-evry.fr/evryrna/tfold"
            }
        ],
        "inputs": [
            "files_pre_miniasm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_noconsensus",
            "assembly_graph_miniasm"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly/miniasm\", mode: 'copy'"
        ],
        "when": "isMode(['miniasm', 'all', 'all_lr'])",
        "stub": ""
    },
    "racon": {
        "name_process": "racon",
        "string_process": "\nprocess racon {\n                                                              \n                    \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly_processed/racon\", mode: 'copy'\n    \n    input:\n    set id, lr, sr1, sr2, assembly from files_noconsensus\n\n    output:\n    set id, lr,  sr1, sr2, file(\"${id}_consensus_racon.fasta\"), val(\"miniasm\") into files_unpolished_racon\n\n    file(\"${id}_consensus_racon.fasta\")\n\n    script:\n    \"\"\"\n    $PY36\n    minimap2 -x map-ont -t ${task.cpus} ${assembly} ${lr} > map1.paf\n    racon -t ${task.cpus} ${lr} map1.paf ${assembly} > cons1.fasta\n    minimap2 -x map-ont -t ${task.cpus} cons1.fasta ${lr} > map2.paf\n    racon -t ${task.cpus} ${lr} map2.paf cons1.fasta > cons2.fasta\n    minimap2 -x map-ont -t ${task.cpus} cons2.fasta ${lr} >map3.paf\n    racon -t ${task.cpus} ${lr} map3.paf cons2.fasta > ${id}_consensus_racon.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    $PY36\n    minimap2 -x map-ont -t ${task.cpus} ${assembly} ${lr} > map1.paf\n    racon -t ${task.cpus} ${lr} map1.paf ${assembly} > cons1.fasta\n    minimap2 -x map-ont -t ${task.cpus} cons1.fasta ${lr} > map2.paf\n    racon -t ${task.cpus} ${lr} map2.paf cons1.fasta > cons2.fasta\n    minimap2 -x map-ont -t ${task.cpus} cons2.fasta ${lr} >map3.paf\n    racon -t ${task.cpus} ${lr} map3.paf cons2.fasta > ${id}_consensus_racon.fasta\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "files_noconsensus"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_unpolished_racon"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly_processed/racon\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "flye": {
        "name_process": "flye",
        "string_process": "\nprocess flye {\n                                     \n    errorStrategy 'ignore'\n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly\", mode: 'copy'\n\n    input:\n    set id, lr, sr1, sr2 from files_pre_flye\n\n    output:\n    set id, lr, sr1, sr2, file(\"flye/scaffolds.fasta\"), val('flye') into files_unpolished_flye\n    file(\"flye/assembly_info.txt\")\n    set id, val('flye'), file(\"flye/${id}_graph_flye.gfa\") into assembly_graph_flye\n    file(\"flye/${id}_assembly_flye.fasta\")\n\n    when:\n    isMode(['flye', 'all', 'all_lr'])\n\n    script:\n    \"\"\"\n    $PY27\n    flye --nano-raw ${lr} --out-dir flye \\\n    --genome-size ${params.genomeSize} --threads ${task.cpus} -i 0\n    cp flye/2-repeat/graph_final.gfa flye/${id}_graph_flye.gfa\n    cp flye/scaffolds.fasta flye/${id}_assembly_flye.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    $PY27\n    flye --nano-raw ${lr} --out-dir flye \\\n    --genome-size ${params.genomeSize} --threads ${task.cpus} -i 0\n    cp flye/2-repeat/graph_final.gfa flye/${id}_graph_flye.gfa\n    cp flye/scaffolds.fasta flye/${id}_assembly_flye.fasta\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "files_pre_flye"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_unpolished_flye",
            "assembly_graph_flye"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "errorStrategy 'ignore'",
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly\", mode: 'copy'"
        ],
        "when": "isMode(['flye', 'all', 'all_lr'])",
        "stub": ""
    },
    "pilon": {
        "name_process": "pilon",
        "string_process": "\nprocess pilon{\n                                              \n    tag{id}\n    publishDir \"${params.outDir}/${id}/assembly_processed/pilon\", mode: 'copy'\n\n    input:\n    set id, lr, sr1, sr2, contigs, type from files_pilon\n\n    output:\n    set id, file(\"${id}_${type}_pilon.fasta\"), type into assembly_pilon\n\n    script:\n    \"\"\"\n    $PY36\n    bowtie2-build ${contigs} contigs_index.bt2 \n\n    bowtie2 --local --very-sensitive-local -I 0 -X 2000 -x contigs_index.bt2 \\\n    -1 ${sr1} -2 ${sr2} -p ${task.cpus} | samtools sort -o alignments.bam -T reads.tmp \n    \n    samtools index alignments.bam\n\n    pilon -Xmx16384m --genome ${contigs} --frags alignments.bam --changes \\\n    --output ${id}_${type}_pilon --fix all --threads ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    $PY36\n    bowtie2-build ${contigs} contigs_index.bt2 \n\n    bowtie2 --local --very-sensitive-local -I 0 -X 2000 -x contigs_index.bt2 \\\n    -1 ${sr1} -2 ${sr2} -p ${task.cpus} | samtools sort -o alignments.bam -T reads.tmp \n    \n    samtools index alignments.bam\n\n    pilon -Xmx16384m --genome ${contigs} --frags alignments.bam --changes \\\n    --output ${id}_${type}_pilon --fix all --threads ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools",
            "pilon"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools",
            "https://bio.tools/pilon"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pilon",
                "uri": "https://bio.tools/pilon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Read alignment analysis to diagnose, report, and automatically improve de novo genome assemblies.",
                "homepage": "http://www.broadinstitute.org/software/pilon/"
            }
        ],
        "inputs": [
            "files_pilon"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_pilon"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/assembly_processed/pilon\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "draw_assembly_graph": {
        "name_process": "draw_assembly_graph",
        "string_process": "\nprocess draw_assembly_graph {\n                                                      \n    tag{id}\n    publishDir \"${params.outDir}/${id}/qc/graph_plot/\", mode: 'copy'\n\n    input:\n    set id, type, gfa from assembly_graph_spades.mix(assembly_graph_unicycler, assembly_graph_flye, assembly_graph_miniasm, assembly_graph_canu)\n\n    output:\n    file(\"${id}_${type}_graph.svg\")\n\n    script:\n    \"\"\"\n    $PY36\n    Bandage image ${gfa} ${id}_${type}_graph.svg\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    $PY36\n    Bandage image ${gfa} ${id}_${type}_graph.svg\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Bandage"
        ],
        "tools_url": [
            "https://bio.tools/bandage"
        ],
        "tools_dico": [
            {
                "name": "Bandage",
                "uri": "https://bio.tools/bandage",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Sequence assembly visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Sequence assembly rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Assembly visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Assembly rendering"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "GUI program that allows users to interact with the assembly graphs made by de novo assemblers such as Velvet, SPAdes, MEGAHIT and others. It visualises assembly graphs, with connections, using graph layout algorithms.",
                "homepage": "https://rrwick.github.io/Bandage/"
            }
        ],
        "inputs": [
            "assembly_graph_spades",
            "assembly_graph_unicycler",
            "assembly_graph_flye",
            "assembly_graph_miniasm",
            "assembly_graph_canu"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "tag{id}",
            "publishDir \"${params.outDir}/${id}/qc/graph_plot/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "format_final_output": {
        "name_process": "format_final_output",
        "string_process": "\nprocess format_final_output {\n                                                             \n    publishDir \"${params.outDir}/${id}/genomes/\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, contigs, type from assembly_merged\n\n    output:\n                                       \n    set id, type, file(\"${id}_${type}_genome.fasta\") into final_files\n    set id, type, val(\"${params.outDir}/${id}/genomes/${id}_${type}_genome.fasta\") into final_files_plasmident\n \n    script:\n    data_source = longReadOnly ? \"nanopore\" : \"hybrid\"\n    \"\"\"\n    $PY36\n    format_output.py ${contigs} ${id} ${type} ${params.minContigLength} ${data_source}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    data_source = longReadOnly ? \"nanopore\" : \"hybrid\"\n    \"\"\"\n    $PY36\n    format_output.py ${contigs} ${id} ${type} ${params.minContigLength} ${data_source}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "assembly_merged"
        ],
        "nb_inputs": 1,
        "outputs": [
            "final_files",
            "final_files_plasmident"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "publishDir \"${params.outDir}/${id}/genomes/\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "per_sample_stats": {
        "name_process": "per_sample_stats",
        "string_process": "\nprocess per_sample_stats{\n                                                     \n    publishDir \"${params.outDir}/${id}/qc/assembly_qc\", mode: 'copy', pattern: \"*.{pdf,png}\"\n    publishDir \"${params.outDir}/${id}/qc\", mode: 'copy', pattern: \"qc_summary_${id}.json\"\n    tag{id}\n\n    input:\n    set id, types, genomes, readStats, readStatTypes from to_sample_stats\n    \n    output:\n                                                                  \n    file(\"*.pdf\")\n    file(\"*.png\")\n    file(\"*.json\")\n\n    script:\n    \"\"\"\n    $PY36\n    sample_stats.py \"${id}\" \"${types}\" \"${genomes}\" \"${readStats}\" \"${readStatTypes}\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    $PY36\n    sample_stats.py \"${id}\" \"${types}\" \"${genomes}\" \"${readStats}\" \"${readStatTypes}\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "to_sample_stats"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "caspargross__HybridAssembly",
        "directive": [
            "publishDir \"${params.outDir}/${id}/qc/assembly_qc\", mode: 'copy', pattern: \"*.{pdf,png}\"",
            "publishDir \"${params.outDir}/${id}/qc\", mode: 'copy', pattern: \"qc_summary_${id}.json\"",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode\n    label 'process_low'\n\n    output:\n    file \"software_versions.csv\"\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    python3 --version > v_python.txt 2>&1\n    openproblems-cli --version > v_openproblems.txt\n    bash --version | head -n 1 > v_bash.txt\n    javac -version || echo \"\" | head -n 1 > v_java.txt\n    scrape_software_versions.py\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    python3 --version > v_python.txt 2>&1\n    openproblems-cli --version > v_openproblems.txt\n    bash --version | head -n 1 > v_bash.txt\n    javac -version || echo \"\" | head -n 1 > v_java.txt\n    scrape_software_versions.py\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "list_tasks": {
        "name_process": "list_tasks",
        "string_process": "\nprocess list_tasks {\n    label 'process_low'\n                                                                        \n\n    output:\n    file(tasks) into ch_list_tasks\n\n    script:\n    tasks = \"tasks.txt\"\n    \"\"\"\n    openproblems-cli tasks > ${tasks}\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    tasks = \"tasks.txt\"\n    \"\"\"\n    openproblems-cli tasks > ${tasks}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_list_tasks"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "list_datasets": {
        "name_process": "list_datasets",
        "string_process": "\nprocess list_datasets {\n    tag \"${task_name}\"\n    label 'process_low'\n                                                                                 \n\n    input:\n    val(task_name) from ch_task_names_for_list_datasets\n\n    output:\n    set val(task_name), file(datasets) into ch_list_datasets\n\n    script:\n    datasets = \"${task_name}.datasets.txt\"\n    \"\"\"\n    openproblems-cli list --datasets --task ${task_name} > ${datasets}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    datasets = \"${task_name}.datasets.txt\"\n    \"\"\"\n    openproblems-cli list --datasets --task ${task_name} > ${datasets}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_task_names_for_list_datasets"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_list_datasets"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "dataset_images": {
        "name_process": "dataset_images",
        "string_process": "\nprocess dataset_images {\n    tag \"${task_name}:${dataset_name}\"\n    label 'process_low'\n\n    input:\n    set val(task_name), val(dataset_name) from ch_task_dataset_pairs\n\n    output:\n    set val(task_name), val(dataset_name), env(IMAGE), env(HASH) into ch_task_dataset_image_hash\n\n    script:\n    \"\"\"\n    IMAGE=`openproblems-cli image --datasets --task ${task_name} ${dataset_name} | tr -d \"\\n\"`\n    HASH=`openproblems-cli hash --datasets --task ${task_name} ${dataset_name}`\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    IMAGE=`openproblems-cli image --datasets --task ${task_name} ${dataset_name} | tr -d \"\\n\"`\n    HASH=`openproblems-cli hash --datasets --task ${task_name} ${dataset_name}`\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_task_dataset_pairs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_task_dataset_image_hash"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${dataset_name}\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "load_dataset": {
        "name_process": "load_dataset",
        "string_process": "\nprocess load_dataset {\n    tag \"${task_name}:${dataset_name}:${image}\"\n    container \"${params.container_host}${image}\"\n    label 'process_batch'\n\n                                                                                     \n\n    input:\n    set val(task_name), val(dataset_name), val(image), val(hash) from ch_task_dataset_image_hash\n\n    output:\n    set val(task_name), val(dataset_name), file(dataset_h5ad) into ch_loaded_datasets, ch_loaded_datasets_to_print\n\n    script:\n    dataset_h5ad = \"${task_name}.${dataset_name}.dataset.h5ad\"\n    \"\"\"\n    openproblems-cli load ${params.test_flag} --task ${task_name} --output ${dataset_h5ad} ${dataset_name}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    dataset_h5ad = \"${task_name}.${dataset_name}.dataset.h5ad\"\n    \"\"\"\n    openproblems-cli load ${params.test_flag} --task ${task_name} --output ${dataset_h5ad} ${dataset_name}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_task_dataset_image_hash"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_loaded_datasets",
            "ch_loaded_datasets_to_print"
        ],
        "nb_outputs": 2,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${dataset_name}:${image}\"",
            "container \"${params.container_host}${image}\"",
            "label 'process_batch'"
        ],
        "when": "",
        "stub": ""
    },
    "list_methods": {
        "name_process": "list_methods",
        "string_process": "\nprocess list_methods {\n    tag \"${task_name}\"\n    label 'process_low'\n                                                                                \n\n    input:\n    val(task_name) from ch_task_names_for_list_methods\n\n    output:\n    set val(task_name), file(methods) into ch_list_methods\n\n    script:\n    methods = \"${task_name}.methods.txt\"\n    \"\"\"\n    openproblems-cli list --methods --task ${task_name} > ${methods}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    methods = \"${task_name}.methods.txt\"\n    \"\"\"\n    openproblems-cli list --methods --task ${task_name} > ${methods}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "pcaMethods"
        ],
        "tools_url": [
            "https://bio.tools/pcamethods"
        ],
        "tools_dico": [
            {
                "name": "pcaMethods",
                "uri": "https://bio.tools/pcamethods",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            },
                            {
                                "uri": "http://edamontology.org/data_1772",
                                "term": "Score"
                            },
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            }
                        ]
                    }
                ],
                "description": "This tool provides BPCA, PPCA and NipalsPCA that can be used to perform PCA on incomplete data as well as for accurate missing value estimation. A set of methods for printing and plotting the results is also provided. All PCA methods make use of the same data structure to provide a common interface to the PCA results.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/pcaMethods.html"
            }
        ],
        "inputs": [
            "ch_task_names_for_list_methods"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_list_methods"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "method_images": {
        "name_process": "method_images",
        "string_process": "\nprocess method_images {\n    tag \"${task_name}:${method_name}\"\n    label 'process_low'\n\n    input:\n    set val(task_name), val(method_name) from ch_task_method_pairs\n\n    output:\n    set val(task_name), val(method_name), env(IMAGE), env(HASH) into ch_task_method_image_hash\n\n    script:\n    \"\"\"\n    IMAGE=`openproblems-cli image --methods --task ${task_name} ${method_name} | tr -d \"\\n\"`\n    HASH=`openproblems-cli hash --methods --task ${task_name} ${method_name}`\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    IMAGE=`openproblems-cli image --methods --task ${task_name} ${method_name} | tr -d \"\\n\"`\n    HASH=`openproblems-cli hash --methods --task ${task_name} ${method_name}`\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_task_method_pairs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_task_method_image_hash"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${method_name}\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "run_method": {
        "name_process": "run_method",
        "string_process": "\nprocess run_method {\n    tag \"${task_name}:${method_name}-${dataset_name}:${image}\"\n    container \"${params.container_host}${image}\"\n    label 'process_batch'\n                                                                                    \n\n    input:\n    set val(task_name), val(method_name), val(image), val(hash), val(dataset_name), file(dataset_h5ad) from ch_dataset_methods\n\n    output:\n    set val(task_name), val(dataset_name), val(method_name), file(method_h5ad), file(method_version) into ch_ran_methods\n\n    script:\n    method_h5ad = \"${task_name}.${dataset_name}.${method_name}.method.h5ad\"\n    method_version = \"${task_name}.${dataset_name}.${method_name}.method.txt\"\n    \"\"\"\n    openproblems-cli run ${params.test_flag} --task ${task_name} --input ${dataset_h5ad} --output ${method_h5ad} ${method_name} > ${method_version}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    method_h5ad = \"${task_name}.${dataset_name}.${method_name}.method.h5ad\"\n    method_version = \"${task_name}.${dataset_name}.${method_name}.method.txt\"\n    \"\"\"\n    openproblems-cli run ${params.test_flag} --task ${task_name} --input ${dataset_h5ad} --output ${method_h5ad} ${method_name} > ${method_version}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_dataset_methods"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_ran_methods"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${method_name}-${dataset_name}:${image}\"",
            "container \"${params.container_host}${image}\"",
            "label 'process_batch'"
        ],
        "when": "",
        "stub": ""
    },
    "publish_code_versions": {
        "name_process": "publish_code_versions",
        "string_process": "\nprocess publish_code_versions {\n    tag \"${task_name}:${method_name}-${dataset_name}\"\n    label 'process_low'\n    publishDir \"${params.outdir}/results/methods/\", mode: params.publish_dir_mode\n\n    input:\n    set val(task_name), val(dataset_name), val(method_name), file(method_h5ad), file(method_version_in) from ch_ran_methods_to_code_versions\n\n    script:\n    method_version_out = \"${task_name}.${dataset_name}.${method_name}.method.txt\"\n    \"\"\"\n    cat ${method_version_in} > ${method_version_out}\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    method_version_out = \"${task_name}.${dataset_name}.${method_name}.method.txt\"\n    \"\"\"\n    cat ${method_version_in} > ${method_version_out}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_ran_methods_to_code_versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${method_name}-${dataset_name}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}/results/methods/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "list_metrics": {
        "name_process": "list_metrics",
        "string_process": "\nprocess list_metrics {\n    tag \"${task_name}\"\n    label 'process_low'\n                                                                                \n\n    input:\n    val(task_name) from ch_task_names_for_list_metrics\n\n    output:\n    set val(task_name), file(metrics) into ch_list_metrics\n\n    script:\n    metrics = \"${task_name}.metrics.txt\"\n    \"\"\"\n    openproblems-cli list --metrics --task ${task_name} > ${metrics}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    metrics = \"${task_name}.metrics.txt\"\n    \"\"\"\n    openproblems-cli list --metrics --task ${task_name} > ${metrics}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "GRmetrics"
        ],
        "tools_url": [
            "https://bio.tools/grmetrics"
        ],
        "tools_dico": [
            {
                "name": "GRmetrics",
                "uri": "https://bio.tools/grmetrics",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3438",
                                    "term": "Calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Functions for calculating and visualizing growth-rate inhibition (GR) metrics.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/GRmetrics.html"
            }
        ],
        "inputs": [
            "ch_task_names_for_list_metrics"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_list_metrics"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "metric_images": {
        "name_process": "metric_images",
        "string_process": "\nprocess metric_images {\n    tag \"${task_name}:${metric_name}\"\n    label 'process_low'\n\n    input:\n    set val(task_name), val(metric_name) from ch_task_metric_pairs\n\n    output:\n    set val(task_name), val(metric_name), env(IMAGE), env(HASH) into ch_task_metric_image_hash\n\n    script:\n    \"\"\"\n    IMAGE=`openproblems-cli image --metrics --task ${task_name} ${metric_name} | tr -d \"\\n\"`\n    HASH=`openproblems-cli hash --metrics --task ${task_name} ${metric_name}`\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    IMAGE=`openproblems-cli image --metrics --task ${task_name} ${metric_name} | tr -d \"\\n\"`\n    HASH=`openproblems-cli hash --metrics --task ${task_name} ${metric_name}`\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_task_metric_pairs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_task_metric_image_hash"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${metric_name}\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "run_metric": {
        "name_process": "run_metric",
        "string_process": "\nprocess run_metric {\n    tag \"${task_name}:${metric_name}-${method_name}-${dataset_name}:${image}\"\n    container \"${params.container_host}${image}\"\n    label 'process_batch'\n    publishDir \"${params.outdir}/metrics\", mode: params.publish_dir_mode\n\n    input:\n    set val(task_name), val(metric_name), val(image), val(hash), val(dataset_name), val(method_name), file(method_h5ad), file(method_version) from ch_dataset_method_metrics\n\n    output:\n    set val(task_name), val(dataset_name), val(method_name), val(metric_name), file(metric_txt) into ch_evaluated_metrics\n\n    script:\n    metric_txt = \"${task_name}.${dataset_name}.${method_name}.${metric_name}.metric.txt\"\n    \"\"\"\n    openproblems-cli evaluate --task ${task_name} --input ${method_h5ad} ${metric_name} > ${metric_txt}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    metric_txt = \"${task_name}.${dataset_name}.${method_name}.${metric_name}.metric.txt\"\n    \"\"\"\n    openproblems-cli evaluate --task ${task_name} --input ${method_h5ad} ${metric_name} > ${metric_txt}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_dataset_method_metrics"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_evaluated_metrics"
        ],
        "nb_outputs": 1,
        "name_workflow": "openproblems-bio__nf-openproblems",
        "directive": [
            "tag \"${task_name}:${metric_name}-${method_name}-${dataset_name}:${image}\"",
            "container \"${params.container_host}${image}\"",
            "label 'process_batch'",
            "publishDir \"${params.outdir}/metrics\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    }
}
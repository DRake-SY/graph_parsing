{
    "OPERATION_1": {
        "string": "Channel.fromFilePairs(\"$root/**/*${params.lesion_name}.nii.gz\",\n                     size: 1,\n                     maxDepth: 1,\n                     flat: true) {it.parent.name}\n          .into{lesions; lesions_for_registration; check_lesions}",
        "origin": [],
        "gives": [
            [
                "lesions",
                "P"
            ],
            [
                "lesions_for_registration",
                "P"
            ],
            [
                "check_lesions",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromFilePairs(\"$root/**/*t1.nii.gz\",\n                          size: 1,\n                          maxDepth: 1,\n                          flat: true) {it.parent.name}\n          .into{t1s_for_register; check_t1s}",
        "origin": [],
        "gives": [
            [
                "t1s_for_register",
                "P"
            ],
            [
                "check_t1s",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromFilePairs(\"$tractograms/**/*.trk\",\n                          size: 1,\n                          maxDepth: 1,\n                          flat: true) {it.parent.name}\n          .into{trks_for_combine; check_trks; trks_for_transformation}",
        "origin": [],
        "gives": [
            [
                "trks_for_combine",
                "P"
            ],
            [
                "check_trks",
                "P"
            ],
            [
                "trks_for_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromFilePairs(\"$tractograms/**/*t1.nii.gz\",\n                          size: 1,\n                          maxDepth: 1,\n                          flat: true) {it.parent.name}\n            .into{trks_t1s_for_register; check_trks_t1s}",
        "origin": [],
        "gives": [
            [
                "trks_t1s_for_register",
                "P"
            ],
            [
                "check_trks_t1s",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromFilePairs(\"$atlas/{atlas_labels.nii.gz,atlas_labels.txt,atlas_t1.nii.gz,atlas_list.txt}\",\n                          size: 4,\n                          maxDepth: 0,\n                          flat: true) {it.parent.name}\n      .into{atlas_for_combine; atlas_for_trk_registration; atlas_for_lesion_registration; atlas_for_copy; check_atlas}",
        "origin": [],
        "gives": [
            [
                "atlas_for_combine",
                "P"
            ],
            [
                "atlas_for_trk_registration",
                "P"
            ],
            [
                "atlas_for_lesion_registration",
                "P"
            ],
            [
                "atlas_for_copy",
                "P"
            ],
            [
                "check_atlas",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "check_lesions.count().into{check_lesions_number; check_lesions_number_compare_t1}",
        "origin": [
            [
                "check_lesions",
                "P"
            ]
        ],
        "gives": [
            [
                "check_lesions_number",
                "P"
            ],
            [
                "check_lesions_number_compare_t1",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "check_t1s.count().into{check_t1s_number; check_t1s_number_for_registration}",
        "origin": [
            [
                "check_t1s",
                "P"
            ]
        ],
        "gives": [
            [
                "check_t1s_number",
                "P"
            ],
            [
                "check_t1s_number_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "check_trks_t1s.count().into{check_trks_t1s_numbers; check_trks_t1s_for_compare; trks_t1s_empty; check_trks_t1s_for_registration}",
        "origin": [
            [
                "check_trks_t1s",
                "P"
            ]
        ],
        "gives": [
            [
                "check_trks_t1s_numbers",
                "P"
            ],
            [
                "check_trks_t1s_for_compare",
                "P"
            ],
            [
                "trks_t1s_empty",
                "P"
            ],
            [
                "check_trks_t1s_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "check_trks.count().into{check_trks_numbers; check_trks_for_compare}",
        "origin": [
            [
                "check_trks",
                "P"
            ]
        ],
        "gives": [
            [
                "check_trks_numbers",
                "P"
            ],
            [
                "check_trks_for_compare",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "check_lesions_number\n.subscribe{a -> if (a == 0)\n    error \"Error ~ No subjects found. Please check the naming convention, your --input path.\"}",
        "origin": [
            [
                "check_lesions_number",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "check_atlas\n.count()\n.subscribe{a -> if (a == 0)\n    error \"Error ~ No atlas found. Please check the naming convention, your --atlas path.\"}",
        "origin": [
            [
                "check_atlas",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "check_lesions_number_compare_t1\n  .concat(check_t1s_number)\n  .toList()\n  .subscribe{a, b -> if (a != b && b > 0)\n  error \"Error ~ Some subjects have a T1w and others don't.\\n\" +\n        \"Please be sure to have the same acquisitions for all subjects.\"}",
        "origin": [
            [
                "check_lesions_number_compare_t1",
                "P"
            ],
            [
                "check_t1s_number",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "check_trks_numbers\n.subscribe{a -> if (a == 0)\n    error \"Error ~ No tractograms found. Please check the naming convention, your --tractograms path.\"\n}",
        "origin": [
            [
                "check_trks_numbers",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_14": {
        "string": "check_trks_for_compare\n  .concat(check_trks_t1s_for_compare)\n  .toList()\n  .subscribe{a, b -> if (a != b && b > 0)\n  error \"Error ~ Some tractograms have a T1w and others don't.\\n\" +\n        \"Please be sure to have the same acquisitions for all tractograms.\"}",
        "origin": [
            [
                "check_trks_for_compare",
                "P"
            ],
            [
                "check_trks_t1s_for_compare",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_15": {
        "string": "t1s_for_register.combine(atlas_for_lesion_registration).set{atlas_lesion_for_registration}",
        "origin": [
            [
                "t1s_for_register",
                "P"
            ],
            [
                "atlas_for_lesion_registration",
                "P"
            ]
        ],
        "gives": [
            [
                "atlas_lesion_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "lesions_for_registration\n    .join(transformation_for_registration_lesions)\n    .set{lesion_mat_for_transformation}",
        "origin": [
            [
                "lesions_for_registration",
                "P"
            ],
            [
                "transformation_for_registration_lesions",
                "P"
            ]
        ],
        "gives": [
            [
                "lesion_mat_for_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "trks_t1s_for_register.combine(atlas_for_trk_registration).set{atlas_trk_for_registration}",
        "origin": [
            [
                "trks_t1s_for_register",
                "P"
            ],
            [
                "atlas_for_trk_registration",
                "P"
            ]
        ],
        "gives": [
            [
                "atlas_trk_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "transformation_for_trk_registration\n    .cross(trks_for_transformation)\n    .map { [ it[0][0], it[1][1], it[0][1], it[0][2], it[0][3], it[0][4]] }\n    .set{transfo_trk_for_registration}",
        "origin": [
            [
                "transformation_for_trk_registration",
                "P"
            ],
            [
                "trks_for_transformation",
                "P"
            ]
        ],
        "gives": [
            [
                "transfo_trk_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "trks_for_combine.combine(atlas_for_combine).set{trk_atlases_for_decompose_connectivity}",
        "origin": [
            [
                "trks_for_combine",
                "P"
            ],
            [
                "atlas_for_combine",
                "P"
            ]
        ],
        "gives": [
            [
                "trk_atlases_for_decompose_connectivity",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "transformed_trks.combine(atlas_for_combine).set{trk_atlases_for_decompose_connectivity}",
        "origin": [
            [
                "transformed_trks",
                "P"
            ],
            [
                "atlas_for_combine",
                "P"
            ]
        ],
        "gives": [
            [
                "trk_atlases_for_decompose_connectivity",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "lesions.set{lesion_for_connectivity}",
        "origin": [
            [
                "lesions",
                "P"
            ]
        ],
        "gives": [
            [
                "lesion_for_connectivity",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "transformed_lesions.set{lesion_for_connectivity}",
        "origin": [
            [
                "transformed_lesions",
                "P"
            ]
        ],
        "gives": [
            [
                "lesion_for_connectivity",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "h5_for_combine_with_lesion.combine(lesion_for_connectivity)\n  .set{h5_labels_lesion_for_compute_connectivity}",
        "origin": [
            [
                "h5_for_combine_with_lesion",
                "P"
            ],
            [
                "lesion_for_connectivity",
                "P"
            ]
        ],
        "gives": [
            [
                "h5_labels_lesion_for_compute_connectivity",
                "P"
            ]
        ]
    }
}
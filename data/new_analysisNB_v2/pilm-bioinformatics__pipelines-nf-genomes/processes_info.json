{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${outdir}/pipeline_info\", mode: 'copy',\n    saveAs: {filename ->\n        if (filename.indexOf(\".csv\") > 0) filename\n        else null\n    }\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n                                                                     \n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir \"${outdir}/pipeline_info\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "copy_fasta": {
        "name_process": "copy_fasta",
        "string_process": "\nprocess copy_fasta {\n  publishDir path: { \"${outdir}/seq\"},\n  mode: 'copy'\n\n  input:\n  file fasta from ch_fasta_for_cp\n\n  output:\n  file \"${params.genome}.${params.release}.fa\" into ch_fasta_for_star_index, ch_fasta_for_hisat_index, ch_fasta_for_txome, ch_fasta_for_gentrome, ch_fasta_for_config\n  file \"${params.genome}.${params.release}.fa.fai\"\n  \n  script:\n  \"\"\"\n  cp ${fasta} ${params.genome}.${params.release}.fa\n  samtools faidx ${params.genome}.${params.release}.fa\n\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  cp ${fasta} ${params.genome}.${params.release}.fa\n  samtools faidx ${params.genome}.${params.release}.fa\n\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_fasta_for_cp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fasta_for_star_index",
            "ch_fasta_for_hisat_index",
            "ch_fasta_for_txome",
            "ch_fasta_for_gentrome",
            "ch_fasta_for_config"
        ],
        "nb_outputs": 5,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir path: { \"${outdir}/seq\"} , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "copy_gtf": {
        "name_process": "copy_gtf",
        "string_process": "\nprocess copy_gtf {\n  publishDir path: { \"${outdir}/rnaseq\"},\n  mode: 'copy'\n\n  input:\n  file gtf from ch_gtf_for_cp\n\n  output:\n  file \"${params.genome}.${params.release}.gtf\" into gtf_makeHisatSplicesites, gtf_makeHISATindex, gtf_makeSTARindex, ch_gtf_for_txome, ch_gtf_for_gentrome, ch_gtf_for_config\n  file \"${params.genome}.${params.release}_pre.gtf\" into ch_pre_gtf\n  \n  script:\n  \"\"\"\n  cp ${gtf} ${params.genome}.${params.release}.gtf\n  awk '\\$3==\"transcript\"' ${gtf}  | sed 's/\\ttranscript\\t/\\texon\\t/' > ${params.genome}.${params.release}_pre.gtf\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  cp ${gtf} ${params.genome}.${params.release}.gtf\n  awk '\\$3==\"transcript\"' ${gtf}  | sed 's/\\ttranscript\\t/\\texon\\t/' > ${params.genome}.${params.release}_pre.gtf\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_gtf_for_cp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gtf_makeHisatSplicesites",
            "gtf_makeHISATindex",
            "gtf_makeSTARindex",
            "ch_gtf_for_txome",
            "ch_gtf_for_gentrome",
            "ch_gtf_for_config",
            "ch_pre_gtf"
        ],
        "nb_outputs": 7,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir path: { \"${outdir}/rnaseq\"} , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeSTARindex": {
        "name_process": "makeSTARindex",
        "string_process": " process makeSTARindex {\n        label 'high_memory'\n        tag \"$fasta\"\n        publishDir path: { \"${outdir}\" },\n                   mode: 'copy'\n\n        input:\n        file fasta from ch_fasta_for_star_index\n        file gtf from gtf_makeSTARindex\n\n        output:\n        file \"star\" into star_index\n\n        script:\n        def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --runThreadN ${task.cpus} \\\\\n            --sjdbGTFfile $gtf \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            $avail_mem\n        \"\"\"\n    }",
        "nb_lignes_process": 24,
        "string_script": "        def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --runThreadN ${task.cpus} \\\\\n            --sjdbGTFfile $gtf \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            $avail_mem\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "ch_fasta_for_star_index",
            "gtf_makeSTARindex"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "label 'high_memory'",
            "tag \"$fasta\"",
            "publishDir path: { \"${outdir}\" } , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeHisatSplicesites": {
        "name_process": "makeHisatSplicesites",
        "string_process": " process makeHisatSplicesites {\n        tag \"$gtf\"\n        publishDir path: { \"${outdir}/hisat2\" },\n                   mode: 'copy'\n\n        input:\n        file gtf from gtf_makeHisatSplicesites\n\n        output:\n        file \"${gtf.baseName}.hisat2_splice_sites.txt\" into indexing_splicesites, alignment_splicesites\n\n        script:\n        \"\"\"\n        hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.hisat2_splice_sites.txt\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.hisat2_splice_sites.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf_makeHisatSplicesites"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indexing_splicesites",
            "alignment_splicesites"
        ],
        "nb_outputs": 2,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "tag \"$gtf\"",
            "publishDir path: { \"${outdir}/hisat2\" } , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeHISATindex": {
        "name_process": "makeHISATindex",
        "string_process": " process makeHISATindex {\n        tag \"$fasta\"\n        publishDir path: { \"${outdir}/hisat2\" },\n                   mode: 'copy'\n\n        input:\n        file fasta from ch_fasta_for_hisat_index\n        file indexing_splicesites from indexing_splicesites\n        file gtf from gtf_makeHISATindex\n\n        output:\n        file \"${fasta.baseName}.*.ht2*\" into hs2_indices\n\n        script:\n        if( !task.memory ){\n            log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n            avail_mem = 0\n        } else {\n            log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n            avail_mem = task.memory.toGiga()\n        }\n        if( avail_mem > params.hisatBuildMemory ){\n            log.info \"[HISAT2 index build] Over ${params.hisatBuildMemory} GB available, so using splice sites and exons in HISAT2 index\"\n            extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.hisat2_exons.txt\"\n            ss = \"--ss $indexing_splicesites\"\n            exon = \"--exon ${gtf.baseName}.hisat2_exons.txt\"\n        } else {\n            log.info \"[HISAT2 index build] Less than ${params.hisatBuildMemory} GB available, so NOT using splice sites and exons in HISAT2 index.\"\n            log.info \"[HISAT2 index build] Use --hisatBuildMemory [small number] to skip this check.\"\n            extract_exons = ''\n            ss = ''\n            exon = ''\n        }\n        \"\"\"\n        $extract_exons\n        hisat2-build -p ${task.cpus} $ss $exon $fasta ${fasta.baseName}.hisat2_index\n        \"\"\"\n    }",
        "nb_lignes_process": 36,
        "string_script": "        if( !task.memory ){\n            log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n            avail_mem = 0\n        } else {\n            log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n            avail_mem = task.memory.toGiga()\n        }\n        if( avail_mem > params.hisatBuildMemory ){\n            log.info \"[HISAT2 index build] Over ${params.hisatBuildMemory} GB available, so using splice sites and exons in HISAT2 index\"\n            extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.hisat2_exons.txt\"\n            ss = \"--ss $indexing_splicesites\"\n            exon = \"--exon ${gtf.baseName}.hisat2_exons.txt\"\n        } else {\n            log.info \"[HISAT2 index build] Less than ${params.hisatBuildMemory} GB available, so NOT using splice sites and exons in HISAT2 index.\"\n            log.info \"[HISAT2 index build] Use --hisatBuildMemory [small number] to skip this check.\"\n            extract_exons = ''\n            ss = ''\n            exon = ''\n        }\n        \"\"\"\n        $extract_exons\n        hisat2-build -p ${task.cpus} $ss $exon $fasta ${fasta.baseName}.hisat2_index\n        \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "SSA",
            "Assexon"
        ],
        "tools_url": [
            "https://bio.tools/ssa",
            "https://bio.tools/Assexon"
        ],
        "tools_dico": [
            {
                "name": "SSA",
                "uri": "https://bio.tools/ssa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0240",
                                    "term": "Sequence motif comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SSA (Signal Search Analysis) is a software package for the analysis of nucleic acid sequence motifs that are postionally correlated with a functional site (e.g a transcription or translation initiation site).",
                "homepage": "http://ccg.vital-it.ch/ssa/"
            },
            {
                "name": "Assexon",
                "uri": "https://bio.tools/Assexon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assembling Exon Using Gene Capture Data | Exon capture across species has been one of the most broadly applied approaches to acquire multi-locus data in phylogenomic studies of non-model organisms. Methods for assembling loci from short-read sequences (eg, Illumina platforms) that rely on mapping reads to a reference genome may not be suitable for studies comprising species across a wide phylogenetic spectrum; thus, de novo assembling methods are more generally applied. Current approaches for assembling targeted exons from short reads are not particularly optimized as they cannot (1) assemble loci with low read depth, (2) handle large files efficiently, and (3) reliably address issues with paralogs. Thus, we present Assexon: a streamlined pipeline that de novo assembles targeted exons and their flanking sequences from raw reads",
                "homepage": "https://github.com/yhadevol/Assexon"
            }
        ],
        "inputs": [
            "ch_fasta_for_hisat_index",
            "indexing_splicesites",
            "gtf_makeHISATindex"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hs2_indices"
        ],
        "nb_outputs": 1,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "tag \"$fasta\"",
            "publishDir path: { \"${outdir}/hisat2\" } , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeTxome": {
        "name_process": "makeTxome",
        "string_process": " process makeTxome {\n  publishDir path: { \"${outdir}/rnaseq\"},\n  mode: 'copy'\n  \n  input:\n  file fasta from ch_fasta_for_txome\n  file gtf from ch_gtf_for_txome\n  file pre_gtf from ch_pre_gtf\n\n  output:\n  file \"tx_${gtf.baseName}.fa\" into ch_txfasta_for_gentrome, ch_txfasta_for_config\n  file \"tx_${pre_gtf.baseName}.fa\" into ch_pre_txfasta_for_config\n\n  script:\n  \"\"\"\n  gffread -w tx_${gtf.baseName}.fa -g $fasta $gtf\n  gffread -w tx_${pre_gtf.baseName}.fa -g $fasta $gtf\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  gffread -w tx_${gtf.baseName}.fa -g $fasta $gtf\n  gffread -w tx_${pre_gtf.baseName}.fa -g $fasta $gtf\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "ch_fasta_for_txome",
            "ch_gtf_for_txome",
            "ch_pre_gtf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_txfasta_for_gentrome",
            "ch_txfasta_for_config",
            "ch_pre_txfasta_for_config"
        ],
        "nb_outputs": 3,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir path: { \"${outdir}/rnaseq\"} , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeGentrome": {
        "name_process": "makeGentrome",
        "string_process": " process makeGentrome {\n  publishDir path: { \"${outdir}/rnaseq\"},\n  mode: 'copy'\n  \n  input:\n  file fasta from ch_fasta_for_gentrome\n  file gtf from ch_gtf_for_gentrome\n  file txome from ch_txfasta_for_gentrome\n  \n  output:\n  file 'gentrome.fa' into ch_gentrome_for_config\n  file 'decoys.txt' into ch_decoys_for_config\n  \n  script:\n  \"\"\"\n  wget https://github.com/COMBINE-lab/SalmonTools/raw/master/scripts/generateDecoyTranscriptome.sh\n  chmod +x generateDecoyTranscriptome.sh\n  ./generateDecoyTranscriptome.sh -j ${task.cpus} -a $gtf -g $fasta -t $txome -o .\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  wget https://github.com/COMBINE-lab/SalmonTools/raw/master/scripts/generateDecoyTranscriptome.sh\n  chmod +x generateDecoyTranscriptome.sh\n  ./generateDecoyTranscriptome.sh -j ${task.cpus} -a $gtf -g $fasta -t $txome -o .\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fasta_for_gentrome",
            "ch_gtf_for_gentrome",
            "ch_txfasta_for_gentrome"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_gentrome_for_config",
            "ch_decoys_for_config"
        ],
        "nb_outputs": 2,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir path: { \"${outdir}/rnaseq\"} , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "config_file": {
        "name_process": "config_file",
        "string_process": "\nprocess config_file {\n  publishDir \"${outdir}\", mode: 'copy'\n  \n  input:\n  file fasta from ch_fasta_for_config\n  file gtf from ch_gtf_for_config\n  file txfasta from ch_txfasta_for_config\n  file pre_txfasta from ch_pre_txfasta_for_config\n  file gentrome from ch_gentrome_for_config\n  file decoys from ch_decoys_for_config\n  \n  output:\n  file \"${params.genome}.${params.release}.config\"\n  \n  \n  script:\n  hisat2_index = \"\"\n  star_index = \"\"\n  base_genome = \"${params.organism}/${params.genome}.${params.release}\"\n  if (params.hisat2) {hisat2_index = \"hisat2_index = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/hisat2/${params.genome}.${params.release}.hisat2_index\\\\\\\"\"}\n  if (params.star) {star_index = \"star_index = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/star\\\\\\\"\"}\n  config = \"${params.genome}.${params.release}.config\"\n  \"\"\"\n  echo \"// params.genome_path = ${params.outdir}\" >> $config\n  echo \"params {\" >> $config\n  echo \"  fasta = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/seq/$fasta\\\\\\\"\" >>$config\n  echo \"  transcriptome = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$txfasta\\\\\\\"\" >>$config\n  echo \"  pre_transcriptome = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$pre_txfasta\\\\\\\"\" >>$config\n  echo \"  gtf = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$gtf\\\\\\\"\" >>$config\n  echo \"  gentrome = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$gentrome\\\\\\\"\" >>$config\n  echo \"  decoys = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$decoys\\\\\\\"\" >>$config\n  echo \"  $hisat2_index\" >>$config\n  echo \"  $star_index\" >>$config\n  echo \"}\" >>$config\n  \"\"\"\n  \n}",
        "nb_lignes_process": 36,
        "string_script": "  hisat2_index = \"\"\n  star_index = \"\"\n  base_genome = \"${params.organism}/${params.genome}.${params.release}\"\n  if (params.hisat2) {hisat2_index = \"hisat2_index = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/hisat2/${params.genome}.${params.release}.hisat2_index\\\\\\\"\"}\n  if (params.star) {star_index = \"star_index = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/star\\\\\\\"\"}\n  config = \"${params.genome}.${params.release}.config\"\n  \"\"\"\n  echo \"// params.genome_path = ${params.outdir}\" >> $config\n  echo \"params {\" >> $config\n  echo \"  fasta = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/seq/$fasta\\\\\\\"\" >>$config\n  echo \"  transcriptome = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$txfasta\\\\\\\"\" >>$config\n  echo \"  pre_transcriptome = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$pre_txfasta\\\\\\\"\" >>$config\n  echo \"  gtf = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$gtf\\\\\\\"\" >>$config\n  echo \"  gentrome = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$gentrome\\\\\\\"\" >>$config\n  echo \"  decoys = \\\\\\\"\\\\\\${params.genome_path}/${base_genome}/rnaseq/$decoys\\\\\\\"\" >>$config\n  echo \"  $hisat2_index\" >>$config\n  echo \"  $star_index\" >>$config\n  echo \"}\" >>$config\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "haploconfig"
        ],
        "tools_url": [
            "https://bio.tools/haploconfig"
        ],
        "tools_dico": [
            {
                "name": "haploconfig",
                "uri": "https://bio.tools/haploconfig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Program that can be used to implement tests of neutrality based on the frequency distribution of haplotypes in a sample of DNA sequences (the \u201chaplotype configuration\u201d) and the number of segregating sites. The neutrality tests can be performed conditional on the standard neutral coalescent model with or without recombination, exponential population growth, or island migration.",
                "homepage": "http://www.stanford.edu/group/rosenberglab/haploconfig.html"
            }
        ],
        "inputs": [
            "ch_fasta_for_config",
            "ch_gtf_for_config",
            "ch_txfasta_for_config",
            "ch_pre_txfasta_for_config",
            "ch_gentrome_for_config",
            "ch_decoys_for_config"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir \"${outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file output_docs from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    # markdown_to_html.r $output_docs results_description.html\n    touch results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    # markdown_to_html.r $output_docs results_description.html\n    touch results_description.html\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "pilm-bioinformatics__pipelines-nf-genomes",
        "directive": [
            "publishDir \"${outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
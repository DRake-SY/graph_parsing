{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.images, checkIfExists: true)\n    .set {images}",
        "origin": [
            [
                "params.images, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "images",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.masks, checkIfExists: true)\n        .cross(images) {it -> it.name}\n        .map { plant -> [mask:plant[0], image:plant[1]] }\n        .buffer(size: params.chunksize, remainder: true)\n        .map { chunk -> [chunk_idx++, chunk.image, chunk.mask, file('dummy')] }\n        .set { chunks }",
        "origin": [
            [
                "images",
                "P"
            ],
            [
                "params.masks, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "chunks",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.empty() ]",
        "origin": [],
        "gives": []
    },
    "OPERATION_4": {
        "string": "Channel.empty(), chunks ]",
        "origin": [],
        "gives": []
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath(model, glob: false, checkIfExists: true)\n    .set { ch_model }",
        "origin": [
            [
                "model, glob: false, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_model",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath(\"$baseDir/assets/shiny/app.R\", checkIfExists: true)\n    .collectFile(name: 'app.R', storeDir: \"$params.outdir\")\n    .set { ch_shinyapp }",
        "origin": [
            [
                "\"$baseDir/assets/shiny/app.R\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_shinyapp",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "images\n        .buffer(size: params.chunksize, remainder: true)\n        .map { chunk -> [chunk_idx++, chunk] }\n        .set { chunks }",
        "origin": [
            [
                "images",
                "P"
            ]
        ],
        "gives": [
            [
                "chunks",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "invalid_images\n .collectFile(name: 'invalid_images.txt', storeDir: params.outdir)",
        "origin": [
            [
                "invalid_images",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "ch_segmentations = ch_originals.join(ch_predictions).join(ch_ratios)",
        "origin": [
            [
                "ch_originals",
                "P"
            ],
            [
                "ch_predictions",
                "P"
            ],
            [
                "ch_ratios",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_segmentations",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_results\n .collectFile(name: 'aradeepopsis_traits.csv', storeDir: params.outdir, keepHeader: true)\n .set {ch_resultfile}",
        "origin": [
            [
                "ch_results",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_resultfile",
                "P"
            ]
        ]
    }
}
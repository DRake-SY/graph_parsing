{
    "pairReads": {
        "name_process": "pairReads",
        "string_process": "\nprocess pairReads {\n\tinput:\n\tset pair_ID, file(reads) from raw_reads\n\n\toutput:\n\tset file(\"${reads[0]}\"), file(\"${reads[1]}\") into pair_reads\n\t\"\"\"\n\t\"\"\"\n\n}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n\t\"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "raw_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pair_reads"
        ],
        "nb_outputs": 1,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "splitKmerReads": {
        "name_process": "splitKmerReads",
        "string_process": "\nprocess splitKmerReads{\n    conda 'bioconda::ska=1.0'\n    publishDir outDir + \"/results/single_sample/${filename}/ska/\", mode: 'copy', pattern: \"*.skf\"\n\tinput:\n\tset file(forward_read), file(reverse_read) from pair_reads\n\n\toutput:\n\tfile \"${filename}.skf\" into split_to_align, split_to_compare\n\n\tscript:\n\tfilename = \"${forward_read.baseName.replace(\"_R1.fastq\",\"\")}\"\n\t\"\"\"\n\tska fastq -k ${kmer} -c ${coverage} -q ${quality_score} -o ${filename} $forward_read $reverse_read\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\tfilename = \"${forward_read.baseName.replace(\"_R1.fastq\",\"\")}\"\n\t\"\"\"\n\tska fastq -k ${kmer} -c ${coverage} -q ${quality_score} -o ${filename} $forward_read $reverse_read\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SKAT"
        ],
        "tools_url": [
            "https://bio.tools/skat"
        ],
        "tools_dico": [
            {
                "name": "SKAT",
                "uri": "https://bio.tools/skat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A SNP-set (e.g., a gene or a region) level test for association between a set of rare (or common) variants and dichotomous or quantitative phenotypes, SKAT aggregates individual score test statistics of SNPs in a SNP set and computes SNP-set level p-values, e.g. a gene or a region level p-value, while adjusting for covariates, such as principal components to account for population stratification. SKAT also allows for power/sample size calculations for designing for sequence association studies.",
                "homepage": "https://www.hsph.harvard.edu/skat/"
            }
        ],
        "inputs": [
            "pair_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "split_to_align",
            "split_to_compare"
        ],
        "nb_outputs": 2,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [
            "conda 'bioconda::ska=1.0'",
            "publishDir outDir + \"/results/single_sample/${filename}/ska/\", mode: 'copy', pattern: \"*.skf\""
        ],
        "when": "",
        "stub": ""
    },
    "alignSplitFile": {
        "name_process": "alignSplitFile",
        "string_process": "\nprocess alignSplitFile{\n    conda 'bioconda::ska=1.0'\n    publishDir outDir + \"/results/single_sample/${filename}/ska/\", mode: 'copy', pattern: \"*.aln\"\n    input:\n    file(split_kmer) from split_to_align\n\n    output:\n    file \"${filename}_variants.aln\" into alignment\n    \n    script:\n    filename = split_kmer.baseName\n    \n    \"\"\"\n    ska align -v -p ${proportion} $baseDir/data/reference_db/* ${split_kmer} -o ${filename}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    filename = split_kmer.baseName\n    \n    \"\"\"\n    ska align -v -p ${proportion} $baseDir/data/reference_db/* ${split_kmer} -o ${filename}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SKAT"
        ],
        "tools_url": [
            "https://bio.tools/skat"
        ],
        "tools_dico": [
            {
                "name": "SKAT",
                "uri": "https://bio.tools/skat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A SNP-set (e.g., a gene or a region) level test for association between a set of rare (or common) variants and dichotomous or quantitative phenotypes, SKAT aggregates individual score test statistics of SNPs in a SNP set and computes SNP-set level p-values, e.g. a gene or a region level p-value, while adjusting for covariates, such as principal components to account for population stratification. SKAT also allows for power/sample size calculations for designing for sequence association studies.",
                "homepage": "https://www.hsph.harvard.edu/skat/"
            }
        ],
        "inputs": [
            "split_to_align"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alignment"
        ],
        "nb_outputs": 1,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [
            "conda 'bioconda::ska=1.0'",
            "publishDir outDir + \"/results/single_sample/${filename}/ska/\", mode: 'copy', pattern: \"*.aln\""
        ],
        "when": "",
        "stub": ""
    },
    "iqTree": {
        "name_process": "iqTree",
        "string_process": "\nprocess iqTree{\n    conda 'bioconda::iqtree=2.0.3'\n    publishDir outDir + \"/results/single_sample/${filename}/iqtree/\", mode: 'copy'\n    input:\n    file(alignment_file) from alignment\n\n    output:\n    file \"${outfile}\" into tree_file\n\n\n    script:\n    filename = alignment_file.baseName.replace(\"_variants\", \"\")\n    if (contree.equals(\"true\")){\n        outfile = \"${filename}.contree\"\n    }\n    else{\n\toutfile = \"${filename}.treefile\"\n        if (bootstrap.toInteger() == 0){\n            \"\"\"\n            iqtree -s ${alignment_file} -st DNA -m GTR+G+ASC -T AUTO -pre ${filename}\n            \"\"\"\n        }  \n    }\n\n\n                                                  \n    if (bootstrap.toInteger() < 1000){\n        println(\"WARNING: cannot preform less than 1000 iterations\")\n        println(\"Setting number of iterations from ${bootstrap} to 1000 iterations\")\n        \"\"\"\n        iqtree -s ${alignment_file} -st DNA -m GTR+G+ASC -T AUTO -bb 1000 -pre ${filename}\n        \"\"\"\n    }\n    else{\n        \"\"\"\n        iqtree -s ${alignment_file} -st DNA -m GTR+G+ASC -T AUTO -bb ${bootstrap} -pre ${filename}\n        \"\"\"\n   }\n}",
        "nb_lignes_process": 38,
        "string_script": "    filename = alignment_file.baseName.replace(\"_variants\", \"\")\n    if (contree.equals(\"true\")){\n        outfile = \"${filename}.contree\"\n    }\n    else{\n\toutfile = \"${filename}.treefile\"\n        if (bootstrap.toInteger() == 0){\n            \"\"\"\n            iqtree -s ${alignment_file} -st DNA -m GTR+G+ASC -T AUTO -pre ${filename}\n            \"\"\"\n        }  \n    }\n\n\n                                                  \n    if (bootstrap.toInteger() < 1000){\n        println(\"WARNING: cannot preform less than 1000 iterations\")\n        println(\"Setting number of iterations from ${bootstrap} to 1000 iterations\")\n        \"\"\"\n        iqtree -s ${alignment_file} -st DNA -m GTR+G+ASC -T AUTO -bb 1000 -pre ${filename}\n        \"\"\"\n    }\n    else{\n        \"\"\"\n        iqtree -s ${alignment_file} -st DNA -m GTR+G+ASC -T AUTO -bb ${bootstrap} -pre ${filename}\n        \"\"\"\n   }",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tree_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [
            "conda 'bioconda::iqtree=2.0.3'",
            "publishDir outDir + \"/results/single_sample/${filename}/iqtree/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "rCode": {
        "name_process": "rCode",
        "string_process": "\nprocess rCode{\n    conda 'python=3.8.5 r::r-base=3.6.1 conda-forge::r-cowplot=1.1.0 bioconda::bioconductor-ggtree=1.8.2 r::r-ggplot2=3.1.1 bioconda::bioconductor-treeio=1.0.2'\n    input:\n    file(newick) from tree_file\n\n    script:\n    filename = newick.baseName\n    pdf_output = outDir + \"/results/single_sample/${filename}/${filename}.pdf\"\n    input = outDir + \"/results/single_sample/${filename}/iqtree/${newick}\"\n    \"\"\"\n    python ${cluster_sample} ${filename} ${r_folder}\n    Rscript \"${r_folder}treemaker.R\" \"${r_folder}sample_cluster.txt\" ${input} ${pdf_output}\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    filename = newick.baseName\n    pdf_output = outDir + \"/results/single_sample/${filename}/${filename}.pdf\"\n    input = outDir + \"/results/single_sample/${filename}/iqtree/${newick}\"\n    \"\"\"\n    python ${cluster_sample} ${filename} ${r_folder}\n    Rscript \"${r_folder}treemaker.R\" \"${r_folder}sample_cluster.txt\" ${input} ${pdf_output}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "tree_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [
            "conda 'python=3.8.5 r::r-base=3.6.1 conda-forge::r-cowplot=1.1.0 bioconda::bioconductor-ggtree=1.8.2 r::r-ggplot2=3.1.1 bioconda::bioconductor-treeio=1.0.2'"
        ],
        "when": "",
        "stub": ""
    },
    "skaCompare": {
        "name_process": "skaCompare",
        "string_process": "\nprocess skaCompare{\n    conda 'bioconda::ska=1.0'\n    publishDir outDir + \"/results/single_sample/${split_kmer.baseName}/ska/\", mode: 'copy', pattern: \"*.tsv\"\n\tinput:\n\tfile(split_kmer) from split_to_compare\n\n\toutput:\n\tfile \"${split_kmer.baseName}.tsv\" into split_distances\n\n\tscript:\n\t\"\"\"\n\tska compare ${params.split_reference_set} -q ${split_kmer} > ${split_kmer.baseName}.tsv\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tska compare ${params.split_reference_set} -q ${split_kmer} > ${split_kmer.baseName}.tsv\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SKAT"
        ],
        "tools_url": [
            "https://bio.tools/skat"
        ],
        "tools_dico": [
            {
                "name": "SKAT",
                "uri": "https://bio.tools/skat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A SNP-set (e.g., a gene or a region) level test for association between a set of rare (or common) variants and dichotomous or quantitative phenotypes, SKAT aggregates individual score test statistics of SNPs in a SNP set and computes SNP-set level p-values, e.g. a gene or a region level p-value, while adjusting for covariates, such as principal components to account for population stratification. SKAT also allows for power/sample size calculations for designing for sequence association studies.",
                "homepage": "https://www.hsph.harvard.edu/skat/"
            }
        ],
        "inputs": [
            "split_to_compare"
        ],
        "nb_inputs": 1,
        "outputs": [
            "split_distances"
        ],
        "nb_outputs": 1,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [
            "conda 'bioconda::ska=1.0'",
            "publishDir outDir + \"/results/single_sample/${split_kmer.baseName}/ska/\", mode: 'copy', pattern: \"*.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "jsonify": {
        "name_process": "jsonify",
        "string_process": "\nprocess jsonify{\n    conda 'python=3.8.5 anaconda::pandas=1.1.3'\n\tinput:\n\tfile(distance_dataframe) from split_distances\n\n\tscript:\n\tresult_folder = \"${outDir}/results/single_sample/${distance_dataframe.baseName}/\"\n\t\"\"\"\n\tpython ${to_json} ${distance_dataframe} ${result_folder} ${parameters}\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\tresult_folder = \"${outDir}/results/single_sample/${distance_dataframe.baseName}/\"\n\t\"\"\"\n\tpython ${to_json} ${distance_dataframe} ${result_folder} ${parameters}\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "split_distances"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PaulusBoskabouter__BasicPhylo",
        "directive": [
            "conda 'python=3.8.5 anaconda::pandas=1.1.3'"
        ],
        "when": "",
        "stub": ""
    }
}
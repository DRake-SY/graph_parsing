{
    "OPERATION_1": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n            .from( params.input_paths )\n            .map { row -> [ row[0], [ file( row[1][0], checkIfExists: true ) ] ] }\n            .ifEmpty { exit 1, \"params.input_paths or params.bams was empty - no input files supplied!\" }\n            .set { input_data }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "input_data",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .from( params.input_paths )\n            .map { row -> [ row[0], [ file( row[1][0], checkIfExists: true), file( row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.input_paths or params.bams was empty - no input files supplied!\" }\n            .set { input_data }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "input_data",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromFilePairs( params.input, size: -1 )\n    .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.input}\\nNB: Path needs\" +\n    \"to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n    .set { input_data }",
        "origin": [
            [
                "params.input, size: -1",
                "A"
            ]
        ],
        "gives": [
            [
                "input_data",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath( params.input )\n    .map { row -> [ file(row).baseName, [ file( row, checkIfExists: true ) ] ] }\n    .ifEmpty { exit 1, \"Cannot find any bam file matching: ${params.input}\\nNB: Path needs\" +\n    \"to be enclosed in quotes!\\n\" }\n    .dump()                         \n    .set { input_data }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "input_data",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-hlatyping-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/hlatyping Workflow Summary'\n    section_href: 'https://github.com/nf-core/hlatyping'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_10": {
        "string": "fished_reads_bai \n    .into {fished_reads_index}",
        "origin": [
            [
                "fished_reads_bai",
                "P"
            ]
        ],
        "gives": [
            [
                "fished_reads_index",
                "P"
            ]
        ]
    }
}
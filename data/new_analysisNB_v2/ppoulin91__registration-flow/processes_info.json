{
    "README": {
        "name_process": "README",
        "string_process": "\nprocess README {\n    cpus 1\n    publishDir = params.Readme_Publish_Dir\n    tag = \"README\"\n\n    output:\n    file \"readme.txt\"\n\n    script:\n    String list_options = new String();\n    for (String item : params) {\n        list_options += item + \"\\n\"\n    }\n    \"\"\"\n    echo \"Registration-flow pipeline\\n\" >> readme.txt\n    echo \"Start time: $workflow.start\\n\" >> readme.txt\n    echo \"[Command-line]\\n$workflow.commandLine\\n\" >> readme.txt\n    echo \"[Git Info]\\n\" >> readme.txt\n    echo \"$workflow.repository - $workflow.revision [$workflow.commitId]\\n\" >> readme.txt\n    echo \"[Options]\\n\" >> readme.txt\n    echo \"$list_options\" >> readme.txt\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    String list_options = new String();\n    for (String item : params) {\n        list_options += item + \"\\n\"\n    }\n    \"\"\"\n    echo \"Registration-flow pipeline\\n\" >> readme.txt\n    echo \"Start time: $workflow.start\\n\" >> readme.txt\n    echo \"[Command-line]\\n$workflow.commandLine\\n\" >> readme.txt\n    echo \"[Git Info]\\n\" >> readme.txt\n    echo \"$workflow.repository - $workflow.revision [$workflow.commitId]\\n\" >> readme.txt\n    echo \"[Options]\\n\" >> readme.txt\n    echo \"$list_options\" >> readme.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ppoulin91__registration-flow",
        "directive": [
            "cpus 1",
            "publishDir = params.Readme_Publish_Dir",
            "tag = \"README\""
        ],
        "when": "",
        "stub": ""
    },
    "Register_T1": {
        "name_process": "Register_T1",
        "string_process": "\nprocess Register_T1 {\n    cpus params.processes\n\n    input:\n    set sid, file(t1), file(template) from t1_and_template_for_registration\n\n    output:\n    set sid, \"${sid}__output0GenericAffine.mat\"  into transformation_for_nii, transformation_for_trk\n    file \"${sid}__t1_transformed.nii.gz\"\n    script:\n    \"\"\"\n    antsRegistrationSyN.sh -d 3 -m ${t1} -f ${template} -n ${params.processes} -o \"${sid}__output\" -t a\n    mv ${sid}__outputWarped.nii.gz ${sid}__t1_transformed.nii.gz\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    antsRegistrationSyN.sh -d 3 -m ${t1} -f ${template} -n ${params.processes} -o \"${sid}__output\" -t a\n    mv ${sid}__outputWarped.nii.gz ${sid}__t1_transformed.nii.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_and_template_for_registration"
        ],
        "nb_inputs": 1,
        "outputs": [
            "transformation_for_nii",
            "transformation_for_trk"
        ],
        "nb_outputs": 2,
        "name_workflow": "ppoulin91__registration-flow",
        "directive": [
            "cpus params.processes"
        ],
        "when": "",
        "stub": ""
    },
    "Transform_NII": {
        "name_process": "Transform_NII",
        "string_process": "\nprocess Transform_NII {\n    cpus 1\n\n    input:\n    set sid, file(nii), file(transfo), file(template) from nii_and_template_for_transformation\n\n    output:\n    file \"*_transformed.nii.gz\"\n\n    script:\n    \"\"\"\n    antsApplyTransforms -d 3 -i $nii -r $template -t $transfo -o ${nii.getSimpleName()}_transformed.nii.gz\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    antsApplyTransforms -d 3 -i $nii -r $template -t $transfo -o ${nii.getSimpleName()}_transformed.nii.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "nii_and_template_for_transformation"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ppoulin91__registration-flow",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "Transform_TRK": {
        "name_process": "Transform_TRK",
        "string_process": "\nprocess Transform_TRK {\n    cpus 1\n\n    input:\n    set sid, file(trk), file(transfo), file(template) from trk_and_template_for_transformation\n\n    output:\n    file \"*_transformed.trk\"\n\n    script:\n    \"\"\"\n    scil_apply_transform_to_tractogram.py $trk $template $transfo ${trk.getSimpleName()}_transformed.trk --remove_invalid --inverse\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    scil_apply_transform_to_tractogram.py $trk $template $transfo ${trk.getSimpleName()}_transformed.trk --remove_invalid --inverse\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trk_and_template_for_transformation"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ppoulin91__registration-flow",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.inputDir+'/*.txt')\n                        .ifEmpty { exit 1, \"Input dir for annotation txt files not found at ${params.inputDir}. Is the dir path correct?\" }\n                        .filter{txt -> txt =~/chr\\d+/}\n                        .map { txt -> ['chr'+ txt.simpleName.split('_chr').last() , txt] }\n                                                                                                                                        \n                        .filter { it[0] =~ /chr[^XYM]/ }\n                        .set { ch_bcftools_site_metrics_subcols }",
        "origin": [
            [
                "params.inputDir+'/*.txt'",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bcftools_site_metrics_subcols",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.inputFinalPlatekeys)\n                        .ifEmpty { exit 1, \"Input file with samples and platekeys data not found at ${params.inputFinalPlatekeys}. Is the file path correct?\" }\n                        .set { ch_inputFinalPlatekeys }",
        "origin": [
            [
                "params.inputFinalPlatekeys",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputFinalPlatekeys",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.inputUNRELATED_1KGP3).set { ch_inputUNRELATED_1KGP3 }",
        "origin": [
            [
                "params.inputUNRELATED_1KGP3",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputUNRELATED_1KGP3",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.input1KGP3).set { ch_input1KGP3 }",
        "origin": [
            [
                "params.input1KGP3",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_input1KGP3",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(params.inputSuper_pop_codes).set { ch_inputSuper_pop_codes }",
        "origin": [
            [
                "params.inputSuper_pop_codes",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputSuper_pop_codes",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath(params.input05both1K100K_eigenvec).set { ch_input05both1K100K_eigenvec }",
        "origin": [
            [
                "params.input05both1K100K_eigenvec",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_input05both1K100K_eigenvec",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath(params.inputGELprojection_proj_eigenvec).set { ch_GELprojection_proj_eigenvec }",
        "origin": [
            [
                "params.inputGELprojection_proj_eigenvec",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_GELprojection_proj_eigenvec",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath(params.inputPCsancestryrelated)\n                        .ifEmpty { exit 1, \"Input file with Michigan LD data not found at ${params.inputPCsancestryrelated}. Is the file path correct?\" }\n                        .set { ch_inputPCsancestryrelated }",
        "origin": [
            [
                "params.inputPCsancestryrelated",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputPCsancestryrelated",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath(params.inputAncestryAssignmentProbs)\n                        .ifEmpty { exit 1, \"Input file with Michigan LD data not found at ${params.inputAncestryAssignmentProbs}. Is the file path correct?\" }\n                        .set { ch_inputAncestryAssignmentProbs }",
        "origin": [
            [
                "params.inputAncestryAssignmentProbs",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputAncestryAssignmentProbs",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath(params.inputProbs200K)\n                        .ifEmpty { exit 1, \"Input file with Ancestry assignments of 200K data not found at ${params.inputinputProbs200K}. Is the file path correct?\" }\n                        .set { ch_inputinputProbs200K }",
        "origin": [
            [
                "params.inputProbs200K",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputinputProbs200K",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath(params.inputMichiganLDfileExclude)\n                        .ifEmpty { exit 1, \"Input file with Michigan LD for excluding regions  not found at ${params.inputMichiganLDfile}. Is the file path correct?\" }\n                        .set { ch_inputMichiganLDfileExclude }",
        "origin": [
            [
                "params.inputMichiganLDfileExclude",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_inputMichiganLDfileExclude",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(params.input)\n                        .ifEmpty { exit 1, \"Input .csv list of input tissues not found at ${params.input}. Is the file path correct?\" }\n                        .splitCsv(sep: ',',  skip: 1)\n                        .map { bcf, index -> ['chr'+file(bcf).simpleName.split('_chr').last() , file(bcf), file(index)] }\n                        .filter{bcf -> bcf =~/chr\\d+/}\n                                                                                                                                        \n                        .filter { it[0] =~ /chr[^XYM]/ }\n                        .set { ch_bcfs }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bcfs",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_14": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
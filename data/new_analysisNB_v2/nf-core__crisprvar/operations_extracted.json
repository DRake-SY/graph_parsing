{
    "OPERATION_1": {
        "string": "Channel\n             .from(params.readPaths)\n             .map { row -> [ row[0], [file(row[1][0])]] }\n             .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n             .map{ name, reads -> tuple(trim_pattern ? name.replaceAll(trim_pattern, '') : name, reads) }\n             .dump()\n             .into { raw_reads_to_join; raw_reads_to_print }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_reads_to_join",
                "P"
            ],
            [
                "raw_reads_to_print",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n             .from(params.readPaths)\n             .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n             .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n             .map{ name, reads -> tuple(trim_pattern ? name.replaceAll(trim_pattern, '') : name, reads) }\n             .dump()\n             .into { raw_reads_to_join; raw_reads_to_print }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_reads_to_join",
                "P"
            ],
            [
                "raw_reads_to_print",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n         .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n         .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n         .map{ name, reads -> tuple(trim_pattern ? name.replaceAll(trim_pattern, '') : name, reads) }\n         .dump()\n         .into { raw_reads_to_join; raw_reads_to_print }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads_to_join",
                "P"
            ],
            [
                "raw_reads_to_print",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n      .fromPath(params.samplesheet)\n      .ifEmpty{ exit 1, \"Cannot find samplesheet file: ${params.samplesheet}\" }\n      .dump()\n      .into { original_samplesheet_ch; original_samplesheet_to_print_ch }",
        "origin": [
            [
                "params.samplesheet",
                "A"
            ]
        ],
        "gives": [
            [
                "original_samplesheet_ch",
                "P"
            ],
            [
                "original_samplesheet_to_print_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(\"$baseDir/assets/where_are_my_files.txt\", checkIfExists: true)\n       .into{ch_where_trim_galore; ch_where_star; ch_where_hisat2; ch_where_hisat2_sort}",
        "origin": [
            [
                "\"$baseDir/assets/where_are_my_files.txt\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_where_trim_galore",
                "P"
            ],
            [
                "ch_where_star",
                "P"
            ],
            [
                "ch_where_hisat2",
                "P"
            ],
            [
                "ch_where_hisat2_sort",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "original_samplesheet_to_print_ch.println()",
        "origin": [
            [
                "original_samplesheet_to_print_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "raw_reads_to_print.subscribe{ println it }",
        "origin": [
            [
                "raw_reads_to_print",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "summary.collect { k,v -> \"${k.padRight(20)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "samplesheet_cleaned\n   .collect()\n   .splitCsv(header:true)\n   .map{ row -> tuple(row.sample_id[0], tuple(row.amplicon_seq[0], row.expected_hdr_amplicon_seq[0], row.guide_seq[0]))}\n   .ifEmpty { exit 1, \"Cannot parse cleaned input samplesheet ${params.samplesheet}\" }\n                              \n   .dump()\n   .into{ samplesheet_ch; samplesheet_parsed_to_print }",
        "origin": [
            [
                "samplesheet_cleaned",
                "P"
            ]
        ],
        "gives": [
            [
                "samplesheet_ch",
                "P"
            ],
            [
                "samplesheet_parsed_to_print",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "samplesheet_cleaned\n   .collect()\n   .splitCsv(header:true)\n   .map{ row -> tuple(row.sample_id[0], tuple(row.amplicon_seq[0], row.guide_seq[0]))}\n   .ifEmpty { exit 1, \"Cannot parse cleaned input samplesheet ${params.samplesheet}\" }\n   .dump()\n                              \n   .into{ samplesheet_ch; samplesheet_parsed_to_print }",
        "origin": [
            [
                "samplesheet_cleaned",
                "P"
            ]
        ],
        "gives": [
            [
                "samplesheet_ch",
                "P"
            ],
            [
                "samplesheet_parsed_to_print",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "samplesheet_parsed_to_print\n    .subscribe{ println it }",
        "origin": [
            [
                "samplesheet_parsed_to_print",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "samplesheet_ch\n  .join( raw_reads_to_join )\n  .ifEmpty{ exit 1, \"No samples found matching samplesheet sample_id column\" }\n  .into{ raw_reads_fastqc; raw_reads_trimgalore; joined_reads_to_print }",
        "origin": [
            [
                "samplesheet_ch",
                "P"
            ],
            [
                "raw_reads_to_join",
                "P"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trimgalore",
                "P"
            ],
            [
                "joined_reads_to_print",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "joined_reads_to_print\n      .subscribe{ println it }",
        "origin": [
            [
                "joined_reads_to_print",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "rawreads = Channel.from( ['1', file(params.reads1), '_R1', '_rawreads'], ['1', file(params.reads2), '_R2', '_rawreads'] )",
        "origin": [],
        "gives": [
            [
                "rawreads",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "rawreads = Channel.value( ['1', file(params.reads1), '', '_rawreads'] )",
        "origin": [],
        "gives": [
            [
                "rawreads",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "todedup = Channel.value( [file(params.reads1), file(params.reads2)] )",
        "origin": [],
        "gives": [
            [
                "todedup",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "todedup = Channel.value( [file(params.reads1), \"null\"] )",
        "origin": [],
        "gives": [
            [
                "todedup",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "todedup = Channel.value( [\"null1\", \"null2\"] )",
        "origin": [
            [
                "[\"null1\", \"null2\"]",
                "V"
            ]
        ],
        "gives": [
            [
                "todedup",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "totrim = Channel.value( [file(params.reads1), file(params.reads2)] )",
        "origin": [],
        "gives": [
            [
                "totrim",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "totrim = Channel.value( [file(params.reads1), \"null\"] )",
        "origin": [],
        "gives": [
            [
                "totrim",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "mocktrim = Channel.from(\"null\")PROCESS DEF trim",
        "origin": [
            [
                "\"null\"",
                "V"
            ]
        ],
        "gives": [
            [
                "mocktrim",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "mockdecontaminate = Channel.from(\"null\", \"null\")PROCESS DEF decontaminate",
        "origin": [
            [
                "\"null\", \"null\"",
                "V"
            ]
        ],
        "gives": [
            [
                "mockdecontaminate",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "trimmedreads2qc = Channel.from('4').combine(trimmedreads.flatMap().merge( Channel.from( ['_R1', '_R2'] ) ){ a, b -> [a, b] }).combine(Channel.from('_trimmedreads'))",
        "origin": [
            [
                "'4'",
                "V"
            ],
            [
                "['_R1', '_R2']",
                "V"
            ],
            [
                "'_trimmedreads'",
                "V"
            ]
        ],
        "gives": [
            [
                "trimmedreads2qc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "trimmedreads2qc = Channel.from('4').combine(trimmedreads.flatMap()).combine( Channel.from( '' ) ).combine(Channel.from('_trimmedreads'))",
        "origin": [
            [
                "'4'",
                "V"
            ],
            [
                "''",
                "V"
            ],
            [
                "'_trimmedreads'",
                "V"
            ]
        ],
        "gives": [
            [
                "trimmedreads2qc",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "decontaminatedreads2qc = Channel.from('6').combine(decontaminatedreads).combine( Channel.from( '' ) ).combine(Channel.from('_decontaminatedreads'))",
        "origin": [
            [
                "decontaminatedreads",
                "P"
            ],
            [
                "'6'",
                "V"
            ],
            [
                "''",
                "V"
            ],
            [
                "'_decontaminatedreads'",
                "V"
            ]
        ],
        "gives": [
            [
                "decontaminatedreads2qc",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "toprofiletaxa = Channel.from( file(\"$workingdir/${params.prefix}_clean.fq\") )",
        "origin": [],
        "gives": [
            [
                "toprofiletaxa",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "toprofilefunctionreads = Channel.from( file(\"$workingdir/${params.prefix}_clean.fq\") )",
        "origin": [],
        "gives": [
            [
                "toprofilefunctionreads",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_16": {
        "string": "out.println(\"YET ANOTHER METAGENOMIC PIPELINE (YAMP) - Version: $version ($timestamp)\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_17": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_18": {
        "string": "out.println(\"YET ANOTHER METAGENOMIC PIPELINE (YAMP) - Version: $version ($timestamp)\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_19": {
        "string": "out.println(\"This pipeline is distributed in the hope that it will be useful\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_20": {
        "string": "out.println(\"but WITHOUT ANY WARRANTY. See the GNU GPL v3.0 for more details.\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_21": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_22": {
        "string": "out.println(\"Please report comments and bugs to alessia.visconti@kcl.ac.uk\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_23": {
        "string": "out.println(\"or at https://github.com/alesssia/YAMP/issues.\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_24": {
        "string": "out.println(\"Check https://github.com/alesssia/YAMP for updates, and refer to\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_25": {
        "string": "out.println(\"https://github.com/alesssia/YAMP/wiki for more details.\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_26": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_27": {
        "string": "out.println(\"Usage: \")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_28": {
        "string": "out.println(\"   nextflow run YAMP.nf --reads1 R1 --reads2 R2 --prefix mysample --outdir path --mode MODE  \")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_29": {
        "string": "out.println(\"                [options] [-with-docker|-with-singularity]\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_30": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_31": {
        "string": "out.println(\"Mandatory arguments:\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_32": {
        "string": "out.println(\"    --reads1   R1      Forward (if paired-end) OR all reads (if single-end) file path\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_33": {
        "string": "out.println(\"    [--reads2] R2      Reverse reads file path (only if paired-end library layout)\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_34": {
        "string": "out.println(\"    --prefix   prefix  Prefix used to name the result files\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_35": {
        "string": "out.println(\"    --outdir   path    Output directory (will be outdir/prefix/)\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_36": {
        "string": "out.println(\"    --mode     <QC|characterisation|complete>\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_37": {
        "string": "out.println(\"Options:\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_38": {
        "string": "out.println(\"    --librarylayout <single|paired>\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_39": {
        "string": "out.println(\"    --dedup         <true|false>   whether to perform de-duplication\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_40": {
        "string": "out.println(\"    --keepQCtmpfile <true|false>   whether to save QC temporary files\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_41": {
        "string": "out.println(\"    --keepCCtmpfile <true|false>   whether to save community characterisation temporary files\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_42": {
        "string": "out.println(\"Please refer to nextflow.config for more options.\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_43": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_44": {
        "string": "out.println(\"Container:\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_45": {
        "string": "out.println(\"    Docker image to use with -with-docker|-with-singularity options is\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_46": {
        "string": "out.println(\"    'docker://alesssia/yampdocker'\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_47": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_48": {
        "string": "out.println(\"YAMP supports FASTQ and compressed FASTQ files.\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_49": {
        "string": "out.println(\"\")",
        "origin": [
            [
                "out",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_50": {
        "string": "toQC = rawreads.mix(trimmedreads2qc, decontaminatedreads2qc) ",
        "origin": [
            [
                "rawreads",
                "P"
            ],
            [
                "trimmedreads2qc",
                "P"
            ],
            [
                "decontaminatedreads2qc",
                "P"
            ]
        ],
        "gives": [
            [
                "toQC",
                "P"
            ]
        ]
    }
}
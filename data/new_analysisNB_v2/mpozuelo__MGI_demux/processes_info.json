{
    "demux_index": {
        "name_process": "demux_index",
        "string_process": "\nprocess demux_index {\n  tag \"$sample\"\n  label 'process_high'\n  publishDir \"${cluster_path}/data/03_intermediate/${platform}/${run_id}/${lane}/Index-removal/\", mode: 'copy',\n  saveAs: { filename ->\n    filename.endsWith(\".log\") ? \"logs/$filename\" : filename\n  }\n\n\n  input:\n  set val(row), val(sample), val(index), val(index2), val(barcode), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user), path(reads) from ch_demux\n\n  output:\n  set val(row), val(sample), path(\"*.fq.gz\"), val(index), val(index2), val(barcode), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user) into ch_demux_index2\n  path(\"*.log\") optional true\n\n  script:\n                                                                \n  read1 = reads[0]\n  read2 = reads[1]\n  read1_index = \"${sample}_${run_id}_${lane}_${index}_R1.fq.gz\"\n  read2_index = \"${sample}_${run_id}_${lane}_${index}_R2.fq.gz\"\n  errors = index.length() > 6 ? \"-e 0.15\" : \"-e 0.2\"\n\n\n  if (index == \"NNNNNNNN\" | index == \"NNNNNN\") {\n    \"\"\"\n    length=(\\$(echo -e `zcat $read1 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n    length2=(\\$(echo -e `zcat $read2 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n    if [ \"\\$length\" = \"\\$length2\" ]\n    then\n    mv $read1 $read1_index\n    mv $read2 $read2_index\n    else\n    cutadapt -l \\$length -o $read1_index $read1 -j 0 > \"${sample}_${run_id}_${lane}_${index}_R1.log\"\n    cutadapt -l \\$length -o $read2_index $read2 -j 0 > \"${sample}_${run_id}_${lane}_${index}_R2.log\"\n    fi\n    \"\"\"\n  } else {\n    \"\"\"\n    cutadapt \\\n    $errors \\\n    --no-indels \\\n    -a $sample=\\\"$index\\$\\\" \\\n    -o $read2_index -p $read1_index \\\n    $read2 $read1 \\\n    -j 0 \\\n    --discard-untrimmed > ${sample}_${run_id}_${lane}_${index}.log\n    \"\"\"\n  }\n\n}",
        "nb_lignes_process": 51,
        "string_script": "  read1 = reads[0]\n  read2 = reads[1]\n  read1_index = \"${sample}_${run_id}_${lane}_${index}_R1.fq.gz\"\n  read2_index = \"${sample}_${run_id}_${lane}_${index}_R2.fq.gz\"\n  errors = index.length() > 6 ? \"-e 0.15\" : \"-e 0.2\"\n\n\n  if (index == \"NNNNNNNN\" | index == \"NNNNNN\") {\n    \"\"\"\n    length=(\\$(echo -e `zcat $read1 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n    length2=(\\$(echo -e `zcat $read2 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n    if [ \"\\$length\" = \"\\$length2\" ]\n    then\n    mv $read1 $read1_index\n    mv $read2 $read2_index\n    else\n    cutadapt -l \\$length -o $read1_index $read1 -j 0 > \"${sample}_${run_id}_${lane}_${index}_R1.log\"\n    cutadapt -l \\$length -o $read2_index $read2 -j 0 > \"${sample}_${run_id}_${lane}_${index}_R2.log\"\n    fi\n    \"\"\"\n  } else {\n    \"\"\"\n    cutadapt \\\n    $errors \\\n    --no-indels \\\n    -a $sample=\\\"$index\\$\\\" \\\n    -o $read2_index -p $read1_index \\\n    $read2 $read1 \\\n    -j 0 \\\n    --discard-untrimmed > ${sample}_${run_id}_${lane}_${index}.log\n    \"\"\"\n  }",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "CINdex",
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cindex",
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            },
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "ch_demux"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_demux_index2"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "tag \"$sample\"",
            "label 'process_high'",
            "publishDir \"${cluster_path}/data/03_intermediate/${platform}/${run_id}/${lane}/Index-removal/\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".log\") ? \"logs/$filename\" : filename }"
        ],
        "when": "",
        "stub": ""
    },
    "demux_index2": {
        "name_process": "demux_index2",
        "string_process": " process demux_index2 {\n     tag \"$sample\"\n     label 'process_high'\n     publishDir \"${cluster_path}/data/03_intermediate/${platform}/${run_id}/${lane}/Index2-removal/\", mode: 'copy',\n     saveAs: { filename ->\n       filename.endsWith(\".log\") ? \"logs/$filename\" : filename\n     }\n\n\n     input:\n     set val(row), val(sample), path(reads), val(index), val(index2), val(barcode), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user) from ch_demux_index2\n\n     output:\n     set val(row), val(sample), path(\"*.fq.gz\"), val(index), val(index2), val(barcode), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user) into ch_demux_BC\n     path(\"*.{fq.gz,log}\")\n\n     script:\n                                                                   \n     read1 = reads[0]\n     read2 = reads[1]\n     read1_index2 = \"${sample}_${run_id}_${lane}_${index}_${index2}_R1.fq.gz\"\n     read2_index2 = \"${sample}_${run_id}_${lane}_${index}_${index2}_R2.fq.gz\"\n     errors = index2.length() > 6 ? \"-e 0.15\" : \"-e 0.2\"\n\n     if (index2 == \"NNNNNNNN\" | index2 == \"NNNNNN\") {\n       if (index == \"NNNNNNNN\" | index == \"NNNNNN\" ) {\n         \"\"\"\n         mv $read1 $read1_index2\n         mv $read2 $read2_index2\n         \"\"\"\n       } else {\n         \"\"\"\n         length=(\\$(echo -e `zcat $read1 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n         length2=(\\$(echo -e `zcat $read2 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n         if [ \"\\$length\" = \"\\$length2\" ]\n         then\n         mv $read1 $read1_index2\n         mv $read2 $read2_index2\n         else\n         cutadapt -l \\$length -o $read1_index2 $read1 -j 0 > \"${sample}_${run_id}_${lane}_${index}_${index2}_R1.log\"\n         cutadapt -l \\$length -o $read2_index2 $read2 -j 0 > \"${sample}_${run_id}_${lane}_${index}_${index2}_R2.log\"\n         fi\n         \"\"\"\n       }\n     } else {\n       \"\"\"\n       cutadapt \\\n       $errors \\\n       --no-indels \\\n       -a $sample=\\\"$index2\\$\\\" \\\n       -o $read2_index2 -p $read1_index2 \\\n       $read2 $read1 \\\n       -j 0 \\\n       --discard-untrimmed > \"${sample}_${run_id}_${lane}_${index}_${index2}.log\"\n       \"\"\"\n     }\n   }",
        "nb_lignes_process": 55,
        "string_script": "     read1 = reads[0]\n     read2 = reads[1]\n     read1_index2 = \"${sample}_${run_id}_${lane}_${index}_${index2}_R1.fq.gz\"\n     read2_index2 = \"${sample}_${run_id}_${lane}_${index}_${index2}_R2.fq.gz\"\n     errors = index2.length() > 6 ? \"-e 0.15\" : \"-e 0.2\"\n\n     if (index2 == \"NNNNNNNN\" | index2 == \"NNNNNN\") {\n       if (index == \"NNNNNNNN\" | index == \"NNNNNN\" ) {\n         \"\"\"\n         mv $read1 $read1_index2\n         mv $read2 $read2_index2\n         \"\"\"\n       } else {\n         \"\"\"\n         length=(\\$(echo -e `zcat $read1 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n         length2=(\\$(echo -e `zcat $read2 | head -2 | tail -1 | awk '{print length(\\$0)}'`))\n         if [ \"\\$length\" = \"\\$length2\" ]\n         then\n         mv $read1 $read1_index2\n         mv $read2 $read2_index2\n         else\n         cutadapt -l \\$length -o $read1_index2 $read1 -j 0 > \"${sample}_${run_id}_${lane}_${index}_${index2}_R1.log\"\n         cutadapt -l \\$length -o $read2_index2 $read2 -j 0 > \"${sample}_${run_id}_${lane}_${index}_${index2}_R2.log\"\n         fi\n         \"\"\"\n       }\n     } else {\n       \"\"\"\n       cutadapt \\\n       $errors \\\n       --no-indels \\\n       -a $sample=\\\"$index2\\$\\\" \\\n       -o $read2_index2 -p $read1_index2 \\\n       $read2 $read1 \\\n       -j 0 \\\n       --discard-untrimmed > \"${sample}_${run_id}_${lane}_${index}_${index2}.log\"\n       \"\"\"\n     }",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "CINdex",
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cindex",
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            },
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "ch_demux_index2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_demux_BC"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "tag \"$sample\"",
            "label 'process_high'",
            "publishDir \"${cluster_path}/data/03_intermediate/${platform}/${run_id}/${lane}/Index2-removal/\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".log\") ? \"logs/$filename\" : filename }"
        ],
        "when": "",
        "stub": ""
    },
    "demux_BC": {
        "name_process": "demux_BC",
        "string_process": "\nprocess demux_BC {\n  tag \"$sample\"\n  label 'process_high'\n\n    publishDir \"${cluster_path}/data/03_intermediate/${platform}/${run_id}/${lane}/${user}/BC_removal\", mode: 'copy',\n    saveAs: { filename ->\n      filename.endsWith(\".log\") ? \"logs/$filename\" : filename\n    }\n\n\n  input:\n  set val(row), val(sample), path(reads), val(index), val(index2), val(barcode), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user) from ch_demux_BC\n\n  output:\n  set val(row), val(sample), file(\"*.fq.gz\"), val(index), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user) into ch_change_header\n  path(\"*.{fq.gz,log}\")\n\n  script:\n                                                                \n  read1 = reads[0]\n  read2 = reads[1]\n  read1_BC = \"${sample}_${run_id}_${lane}_R1.fq.gz\"\n  read2_BC = \"${sample}_${run_id}_${lane}_R2.fq.gz\"\n  errors = barcode.length() > 6 ? \"-e 0.15\" : \"-e 0.2\"\n\n  if (barcode == \"NNNNNNNN\" | barcode == \"NNNNNN\") {\n    \"\"\"\n    mv $read1 $read1_BC\n    mv $read2 $read2_BC\n    \"\"\"\n  } else {\n    \"\"\"\n    cutadapt \\\n    $errors \\\n    --no-indels \\\n    -g $sample=\\\"^$barcode\\\" \\\n    -o $read1_BC -p $read2_BC \\\n    $read1 $read2 \\\n    -j 0 \\\n    --discard-untrimmed > \"${sample}_${run_id}_${lane}.log\"\n    \"\"\"\n  }\n}",
        "nb_lignes_process": 42,
        "string_script": "  read1 = reads[0]\n  read2 = reads[1]\n  read1_BC = \"${sample}_${run_id}_${lane}_R1.fq.gz\"\n  read2_BC = \"${sample}_${run_id}_${lane}_R2.fq.gz\"\n  errors = barcode.length() > 6 ? \"-e 0.15\" : \"-e 0.2\"\n\n  if (barcode == \"NNNNNNNN\" | barcode == \"NNNNNN\") {\n    \"\"\"\n    mv $read1 $read1_BC\n    mv $read2 $read2_BC\n    \"\"\"\n  } else {\n    \"\"\"\n    cutadapt \\\n    $errors \\\n    --no-indels \\\n    -g $sample=\\\"^$barcode\\\" \\\n    -o $read1_BC -p $read2_BC \\\n    $read1 $read2 \\\n    -j 0 \\\n    --discard-untrimmed > \"${sample}_${run_id}_${lane}.log\"\n    \"\"\"\n  }",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "genBaRcode",
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/genBaRcode",
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "genBaRcode",
                "uri": "https://bio.tools/genBaRcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a comprehensive R package for genetic barcode analysis.\n\nAnalysis and Visualization Tools for Genetic Barcode Data.\n\nIndex of /web/packages/genBaRcode/vignettes.\n\nProvides the necessary functions to identify and extract a selection of already available barcode constructs (Cornils, K. et al. (2014) <doi:10.1093/nar/gku081>) and freely choosable barcode designs from next generation sequence (NGS) data. Furthermore, it offers the possibility to account for sequence errors, the calculation of barcode similarities and provides a variety of visualisation tools (Thielecke, L. et al. (2017) <doi:10.1038/srep43249>)",
                "homepage": "https://cran.r-project.org/package=genBaRcode"
            },
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "ch_demux_BC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_change_header"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "tag \"$sample\"",
            "label 'process_high'",
            "publishDir \"${cluster_path}/data/03_intermediate/${platform}/${run_id}/${lane}/${user}/BC_removal\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".log\") ? \"logs/$filename\" : filename }"
        ],
        "when": "",
        "stub": ""
    },
    "change_header": {
        "name_process": "change_header",
        "string_process": "\nprocess change_header {\n  tag \"$sample\"\n  label 'process_medium'\n  publishDir \"${cluster_path}/data/04_pfastq/${platform}/${run_id}/${lane}/${user}/demux_fastq/\", mode: 'copy',\n  saveAs: { filename ->\n    filename.endsWith(\".fq.gz\") ? \"fastq/$filename\" : filename\n  }\n\n  input:\n  set val(row), val(sample), file(reads), val(index), val(run_id), val(lane), val(protocol), val(platform), val(genome), val(user) from ch_change_header\n\n  output:\n  set val(row), val(sample), file(\"*001.fastq.gz\"), val(index), val(run_id), val(lane), val(protocol), val(platform), val(user) into ch_umi_removal,\n                                                                                                                                     ch_fastqc\n  path(\"*.csv\") into ch_merge_samplesheet\n\n  script:\n  fqheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq\"\n  fqheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq\"\n  gzheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq.gz\"\n  gzheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq.gz\"\n\n                                                                           \n                                                                                                        \n                                                              \n\n  \"\"\"\n  if [ $protocol -eq \"scRNAseq\" ]\n  then\n    File_ID_new=\\$(echo \"${sample}\" | rev | cut -c 3- | rev)\n  else\n    File_ID_new=${sample}\n  fi\n\n  zcat ${reads[0]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader1 &\n  zcat ${reads[1]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader2\n  pigz -p $task.cpus $fqheader1\n  pigz -p $task.cpus $fqheader2\n  Lane_ID_number=\\$(echo \"${lane}\" | rev | cut -c 1 | rev)\n  convertHeaders.py -i $gzheader1 -o \\${File_ID_new}_S${row}_L00\\${Lane_ID_number}_R1_001.fastq.gz &\n  convertHeaders.py -i $gzheader2 -o \\${File_ID_new}_S${row}_L00\\${Lane_ID_number}_R2_001.fastq.gz\n  printf \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\" \"\\$File_ID_new\" \"$row\" \"\\$Lane_ID_number\" \"$run_id\" \"$platform\" \"$protocol\" \"$genome\" \"$user\" > \"${sample}_samplesheet.csv\"\n  \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "  fqheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq\"\n  fqheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq\"\n  gzheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq.gz\"\n  gzheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq.gz\"\n\n                                                                           \n                                                                                                        \n                                                              \n\n  \"\"\"\n  if [ $protocol -eq \"scRNAseq\" ]\n  then\n    File_ID_new=\\$(echo \"${sample}\" | rev | cut -c 3- | rev)\n  else\n    File_ID_new=${sample}\n  fi\n\n  zcat ${reads[0]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader1 &\n  zcat ${reads[1]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader2\n  pigz -p $task.cpus $fqheader1\n  pigz -p $task.cpus $fqheader2\n  Lane_ID_number=\\$(echo \"${lane}\" | rev | cut -c 1 | rev)\n  convertHeaders.py -i $gzheader1 -o \\${File_ID_new}_S${row}_L00\\${Lane_ID_number}_R1_001.fastq.gz &\n  convertHeaders.py -i $gzheader2 -o \\${File_ID_new}_S${row}_L00\\${Lane_ID_number}_R2_001.fastq.gz\n  printf \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\" \"\\$File_ID_new\" \"$row\" \"\\$Lane_ID_number\" \"$run_id\" \"$platform\" \"$protocol\" \"$genome\" \"$user\" > \"${sample}_samplesheet.csv\"\n  \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_change_header"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_umi_removal",
            "ch_fastqc",
            "ch_merge_samplesheet"
        ],
        "nb_outputs": 3,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "tag \"$sample\"",
            "label 'process_medium'",
            "publishDir \"${cluster_path}/data/04_pfastq/${platform}/${run_id}/${lane}/${user}/demux_fastq/\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".fq.gz\") ? \"fastq/$filename\" : filename }"
        ],
        "when": "",
        "stub": ""
    },
    "remove_umi": {
        "name_process": "remove_umi",
        "string_process": "\nprocess remove_umi {\n  tag \"$sample\"\n  label 'process_medium'\n  publishDir \"${cluster_path}/data/04_pfastq/${platform}/${run_id}/${lane}/${user}/demux_fastq/woUMI\", mode: 'copy',\n  saveAs: { filename ->\n    filename.endsWith(\".csv\") ? null : filename\n  }\n\n  input:\n  set val(row), val(sample), path(reads), val(index), val(barcode), val(run_id), val(lane), val(protocol), val(platform), val(user) from ch_umi_removal\n\n  output:\n  path(\"*woUMI*.fastq.gz\")\n\n  when:\n  protocol == \"RNAseq_3_S\" | protocol == \"RNAseq_3_ULI\"\n\n  script:\n  \"\"\"\n  File_ID_new=\\$(echo \"${sample}\" | rev | cut -c 3- | rev)\n  File_ID_number=\\$(echo \"${sample}\" | rev | cut -c 1 | rev)\n  Lane_ID_number=\\$(echo \"${lane}\" | rev | cut -c 1 | rev)\n  woumi1=\\$(printf \"%s_woUMI_S%s_L00%s_R1_001.fastq.gz\" \"\\${File_ID_new}\" \"\\${File_ID_number}\" \"\\${Lane_ID_number}\")\n  woumi2=\\$(printf \"%s_woUMI_S%s_L00%s_R2_001.fastq.gz\" \"\\${File_ID_new}\" \"\\${File_ID_number}\" \"\\${Lane_ID_number}\")\n  cutadapt -l 10 -j 0 -o $umi ${reads[0]}\n  umi_tools extract -I ${reads[0]} -S \\$woumi1 --read2-in=${reads[1]} --read2-out=\\$woumi2 --bc-pattern=NNNNNNNNNN\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  File_ID_new=\\$(echo \"${sample}\" | rev | cut -c 3- | rev)\n  File_ID_number=\\$(echo \"${sample}\" | rev | cut -c 1 | rev)\n  Lane_ID_number=\\$(echo \"${lane}\" | rev | cut -c 1 | rev)\n  woumi1=\\$(printf \"%s_woUMI_S%s_L00%s_R1_001.fastq.gz\" \"\\${File_ID_new}\" \"\\${File_ID_number}\" \"\\${Lane_ID_number}\")\n  woumi2=\\$(printf \"%s_woUMI_S%s_L00%s_R2_001.fastq.gz\" \"\\${File_ID_new}\" \"\\${File_ID_number}\" \"\\${Lane_ID_number}\")\n  cutadapt -l 10 -j 0 -o $umi ${reads[0]}\n  umi_tools extract -I ${reads[0]} -S \\$woumi1 --read2-in=${reads[1]} --read2-out=\\$woumi2 --bc-pattern=NNNNNNNNNN\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "ch_umi_removal"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "tag \"$sample\"",
            "label 'process_medium'",
            "publishDir \"${cluster_path}/data/04_pfastq/${platform}/${run_id}/${lane}/${user}/demux_fastq/woUMI\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".csv\") ? null : filename }"
        ],
        "when": "protocol == \"RNAseq_3_S\" | protocol == \"RNAseq_3_ULI\"",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": " process fastqc {\n     tag \"$sample\"\n     label 'process_medium'\n     publishDir \"${cluster_path}/data/04_pfastq/${platform}/${run_id}/${lane}/${user}/fastqc/${sample}\", mode: 'copy',\n     saveAs: { filename ->\n       filename.endsWith(\".zip\") ? \"zips/$filename\" : filename\n     }\n\n     input:\n     set val(row), val(sample), path(reads), val(index), val(run_id), val(lane), val(protocol), val(platform), val(user) from ch_fastqc\n\n     output:\n     set path(\"*_fastqc.{zip,html}\"), val(run_id), val(lane), val(platform), val(user) into fastqc_results\n\n     script:\n     \"\"\"\n     fastqc --quiet --threads $task.cpus $reads\n     \"\"\"\n   }",
        "nb_lignes_process": 17,
        "string_script": "     \"\"\"\n     fastqc --quiet --threads $task.cpus $reads\n     \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "tag \"$sample\"",
            "label 'process_medium'",
            "publishDir \"${cluster_path}/data/04_pfastq/${platform}/${run_id}/${lane}/${user}/fastqc/${sample}\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".zip\") ? \"zips/$filename\" : filename }"
        ],
        "when": "",
        "stub": ""
    },
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": " process get_software_versions {\n     publishDir \"${params.outdir}/pipeline_info\", mode: 'copy',\n         saveAs: { filename ->\n             if (filename.indexOf(\".csv\") > 0) filename\n             else null\n         }\n\n     output:\n     file 'software_versions_mqc.yaml' into software_versions_yaml\n     file \"software_versions.csv\"\n\n     script:\n     \"\"\"\n     fastqc --version &> v_fastqc.txt\n     cutadapt --version &> v_cutadapt.txt\n     scrape_software_versions.py &> software_versions_mqc.yaml\n     \"\"\"\n }",
        "nb_lignes_process": 16,
        "string_script": "     \"\"\"\n     fastqc --version &> v_fastqc.txt\n     cutadapt --version &> v_cutadapt.txt\n     scrape_software_versions.py &> software_versions_mqc.yaml\n     \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__MGI_demux",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    }
}
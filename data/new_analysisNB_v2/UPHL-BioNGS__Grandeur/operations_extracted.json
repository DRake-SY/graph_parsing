{
    "OPERATION_1": {
        "string": "Channel\n  .fromFilePairs([\"${params.reads}/*_R{1,2}*.{fastq,fastq.gz,fq,fq.gz}\",\n                  \"${params.reads}/*_{1,2}*.{fastq,fastq.gz,fq,fq.gz}\"], size: 2 )\n  .map { reads -> tuple(reads[0].replaceAll(~/_S[0-9]+_L[0-9]+/,\"\"), reads[1]) }\n  .view { \"Paired-end fastq files found : ${it[0]}\" }\n  .into { reads_check ; reads_seqyclean ; reads_fastqc ; reads }",
        "origin": [],
        "gives": [
            [
                "reads_check",
                "P"
            ],
            [
                "reads_seqyclean",
                "P"
            ],
            [
                "reads_fastqc",
                "P"
            ],
            [
                "reads",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n  .fromPath(\"${params.fastas}/*{.fa,.fasta,.fna}\")\n  .map { file -> tuple(file.baseName, file) }\n  .view { \"Fasta file found : ${it[0]}\" }\n  .into { fastas_check ; fastas ; fastas_mash ; fastas_quast ; fastas_prokka ; fastas_seqsero2 ; fastas_amrfinder ; fastas_serotypefinder ; fastas_kleborate ; fastas_mlst ; fastas_kraken2 }",
        "origin": [
            [
                "\"${params.fastas}/*{.fa,.fasta,.fna}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "fastas_check",
                "P"
            ],
            [
                "fastas",
                "P"
            ],
            [
                "fastas_mash",
                "P"
            ],
            [
                "fastas_quast",
                "P"
            ],
            [
                "fastas_prokka",
                "P"
            ],
            [
                "fastas_seqsero2",
                "P"
            ],
            [
                "fastas_amrfinder",
                "P"
            ],
            [
                "fastas_serotypefinder",
                "P"
            ],
            [
                "fastas_kleborate",
                "P"
            ],
            [
                "fastas_mlst",
                "P"
            ],
            [
                "fastas_kraken2",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(\"${params.gff}/*.gff\", type: 'file')\n  .view { \"gff file : $it\" }\n  .into { gffs_check ; local_gffs }",
        "origin": [
            [
                "\"${params.gff}/*.gff\", type: 'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "gffs_check",
                "P"
            ],
            [
                "local_gffs",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "genome_sizes = Channel.fromPath(params.genome_sizes, type:'file')",
        "origin": [
            [
                "params.genome_sizes, type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_sizes",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.empty()",
        "origin": [],
        "gives": []
    },
    "OPERATION_6": {
        "string": "Channel.empty()",
        "origin": [],
        "gives": []
    },
    "OPERATION_7": {
        "string": "prokka_files = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "prokka_files",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "gffs = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "gffs",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "kraken2_files = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "kraken2_files",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "kraken2_top_hit = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "kraken2_top_hit",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "kraken2_top_perc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "kraken2_top_perc",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "kraken2_top_reads = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "kraken2_top_reads",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "blobtools_species_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "blobtools_species_results",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "blobtools_perc_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "blobtools_perc_results",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "reads_check\n  .concat(fastas_check)\n  .concat(gffs_check)\n  .ifEmpty{\n    println(\"FATAL : No fastq or fastq.gz files were found at ${params.reads}\")\n    println(\"Set 'params.reads' to directory with paired-end reads\" )\n    println(\"FATAL : No fastas were found at ${params.fastas}\")\n    println(\"Set 'params.fastas' to directory with fastas\" )\n    println(\"FATAL : No gff files were found at ${params.gff}\")\n    println(\"Set 'params.gff' to directory with gff files\" )\n    exit 1\n  }",
        "origin": [
            [
                "reads_check",
                "P"
            ],
            [
                "fastas_check",
                "P"
            ],
            [
                "gffs_check",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_16": {
        "string": "seqyclean_files_combine\n  .collectFile(name: \"SummaryStatistics.tsv\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/seqyclean\")",
        "origin": [
            [
                "seqyclean_files_combine",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_17": {
        "string": "quast_files_combine\n  .collectFile(name: \"report.tsv\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/quast\")",
        "origin": [
            [
                "quast_files_combine",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_18": {
        "string": "shuffled_files\n  .join(mash_genome_size_gc, by: 0)\n  .join(mash_genus_gc, by: 0)\n  .join(mash_species_gc, by: 0)\n  .combine(genome_sizes)\n  .set { for_gc }",
        "origin": [
            [
                "shuffled_files",
                "P"
            ],
            [
                "genome_sizes",
                "P"
            ]
        ],
        "gives": [
            [
                "for_gc",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "cg_pipeline_files\n  .collectFile(name: \"cg_pipeline_report.txt\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/cg_pipeline\")",
        "origin": [
            [
                "cg_pipeline_files",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_20": {
        "string": "seqsero2_files\n  .collectFile(name: \"SeqSero_result.tsv\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/seqsero2\")",
        "origin": [
            [
                "seqsero2_files",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_21": {
        "string": "kleborate_files\n  .collectFile(name: \"kleborate_results.txt\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/kleborate\")",
        "origin": [
            [
                "kleborate_files",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_22": {
        "string": "amrfinder_files\n  .collectFile(name: \"ncbi-AMRFinderplus.txt\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/ncbi-AMRFinderplus\")",
        "origin": [
            [
                "amrfinder_files",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_23": {
        "string": "mlst_files\n  .collectFile(name: \"mlst_result.tsv\",\n    keepHeader: false,\n    sort: true,\n    storeDir: \"${params.outdir}/mlst\")",
        "origin": [
            [
                "mlst_files",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_24": {
        "string": "reads\n  .concat(fastas)\n  .join(seqyclean_perc_kept_results, remainder: true, by: 0)\n  .join(seqyclean_pairskept_results, remainder: true, by: 0)\n  .join(fastqc_1_results, remainder: true, by: 0)\n  .join(fastqc_2_results, remainder: true, by: 0)\n  .join(mash_genome_size_results, remainder: true, by: 0)\n  .join(mash_coverage_results, remainder: true, by: 0)\n  .join(mash_genus_results, remainder: true, by: 0)\n  .join(mash_species_results, remainder: true, by: 0)\n  .join(mash_full_results, remainder: true, by: 0)\n  .join(mash_pvalue_results, remainder: true, by: 0)\n  .join(mash_distance_results, remainder: true, by: 0)\n  .join(quast_gc_results, remainder: true, by: 0)\n  .join(quast_contigs_results, remainder: true, by: 0)\n  .join(quast_N50_contigs_results, remainder: true, by: 0)\n  .join(quast_length_results, remainder: true, by: 0)\n  .join(cg_avrl_results, remainder: true, by: 0)\n  .join(cg_quality_results, remainder: true, by: 0)\n  .join(cg_cov_results, remainder: true, by: 0)\n  .join(ref_genome_length, remainder: true, by: 0)\n  .join(seqsero2_profile_results, remainder: true, by: 0)\n  .join(seqsero2_serotype_results, remainder: true, by: 0)\n  .join(seqsero2_contamination_results, remainder: true, by: 0)\n  .join(serotypefinder_results_o, remainder: true, by: 0)\n  .join(serotypefinder_results_h, remainder: true, by: 0)\n  .join(shigatyper_predictions, remainder: true, by: 0)\n  .join(shigatyper_cadA, remainder: true, by: 0)\n  .join(kleborate_score, remainder: true, by: 0)\n  .join(kleborate_mlst, remainder: true, by: 0)\n  .join(blobtools_species_results, remainder: true, by: 0)\n  .join(blobtools_perc_results, remainder: true, by: 0)\n  .join(kraken2_top_hit, remainder: true, by: 0)\n  .join(kraken2_top_perc, remainder: true, by: 0)\n  .join(kraken2_top_reads, remainder: true, by: 0)\n  .join(amr_genes, remainder: true, by: 0)\n  .join(virulence_genes, remainder: true, by:0)\n  .join(mlst_results, remainder: true, by: 0)\n  .set { results }",
        "origin": [
            [
                "reads",
                "P"
            ],
            [
                "fastas",
                "P"
            ]
        ],
        "gives": [
            [
                "results",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "summary_files_txt\n  .collectFile(name: \"grandeur_summary.txt\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}/summary\")",
        "origin": [
            [
                "summary_files_txt",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_26": {
        "string": "summary_files_tsv\n  .collectFile(name: \"grandeur_results.tsv\",\n    keepHeader: true,\n    sort: true,\n    storeDir: \"${params.outdir}\")",
        "origin": [
            [
                "summary_files_tsv",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .from(file(\"${params.mzmldef}\").readLines())\n    .map { it -> it.tokenize('\\t') }\n    .map { it -> [file(it[0]), file(it[0]).baseName, or_na(it, 1), or_na(it, 2)] }\n    .set { mzml_in }",
        "origin": [],
        "gives": [
            [
                "mzml_in",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath(params.mzmls)\n    .map { it -> [file(it), file(it).baseName, 'NA', 'NA'] }\n    .set { mzml_in }",
        "origin": [
            [
                "params.mzmls",
                "A"
            ]
        ],
        "gives": [
            [
                "mzml_in",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "mzml_in\n  .tap { mzml_msgf; mzml_quant; input_order }\n  .toList()\n  .map { it.sort( {a, b -> a[1] <=> b[1]}) }                                                       \n  .map { it -> [it.collect() { it[0] }, it.collect() { it[1] } ] }                                 \n  .set{ mzmlfiles_all }",
        "origin": [
            [
                "mzml_in",
                "P"
            ]
        ],
        "gives": [
            [
                "mzmlfiles_all",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "isobaricxml\n  .toList()\n  .map { it.sort({a, b -> a[0] <=> b[0]}) }\n  .map { it -> it.collect() { it[1] } }\n  .set { isofiles_sorted }",
        "origin": [
            [
                "isobaricxml",
                "P"
            ]
        ],
        "gives": [
            [
                "isofiles_sorted",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "mzids\n  .groupTuple(by: [0,1,2])\n  .set { mzids_2pin }",
        "origin": [
            [
                "mzids",
                "P"
            ]
        ],
        "gives": [
            [
                "mzids_2pin",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "mzidtsvs\n  .groupTuple()\n  .join(percolated)\n  .set { mzperco }",
        "origin": [
            [
                "mzidtsvs",
                "P"
            ],
            [
                "percolated",
                "P"
            ]
        ],
        "gives": [
            [
                "mzperco",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "tmzidtsv_perco\n  .toList()\n  .map { it.sort( {a, b -> a[0] <=> b[0]}) }                                            \n  .transpose()\n  .toList()\n  .combine(quantlookup)\n  .set { prepsm }",
        "origin": [
            [
                "tmzidtsv_perco",
                "P"
            ],
            [
                "quantlookup",
                "P"
            ]
        ],
        "gives": [
            [
                "prepsm",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "setpsmtables\n  .transpose()\n  .set { psm_pep }",
        "origin": [
            [
                "setpsmtables",
                "P"
            ]
        ],
        "gives": [
            [
                "psm_pep",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "psmmeans\n  .toList()\n  .transpose()\n  .toList()\n  .set { psmdata }",
        "origin": [
            [
                "psmmeans",
                "P"
            ]
        ],
        "gives": [
            [
                "psmdata",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "input_order\n  .map { it -> it[1] }                  \n  .toList()\n  .map { it -> [it] }                                    \n  .merge(psmdata)\n  .set { psm_values }",
        "origin": [
            [
                "input_order",
                "P"
            ],
            [
                "psmdata",
                "P"
            ]
        ],
        "gives": [
            [
                "psm_values",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "input_files_ch = Channel.watchPath(\"$params.fast5\").",
        "origin": [
            [
                "\"$params.fast5\"",
                "A"
            ]
        ],
        "gives": [
            [
                "input_files_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "fast5_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "fast5_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fastq_ch = Channel.fromPath(\"$params.samples\")\n  .splitCsv(header:true)\n  .map{ row-> tuple(row.sampleId, file(row.fastq))}",
        "origin": [
            [
                "\"$params.samples\"",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "references_ch = Channel.fromPath(\"$params.samples\")\n  .splitCsv(header:true)\n  .map{ row-> tuple(row.sampleId, file(row.reference))}",
        "origin": [
            [
                "\"$params.samples\"",
                "A"
            ]
        ],
        "gives": [
            [
                "references_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "references_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "references_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "summaries_ch = Channel.fromPath(\"$params.samples\")\n  .splitCsv(header:true)\n  .map{ row-> tuple(row.sampleId, file(row.summary))}",
        "origin": [
            [
                "\"$params.samples\"",
                "A"
            ]
        ],
        "gives": [
            [
                "summaries_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "summaries_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "summaries_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "illumina_fastq_ch = Channel.fromPath(\"$params.samples\")\n  .splitCsv(header:true)\n  .map{ row-> tuple(row.sampleId, file(row.r1), file(row.r2))}",
        "origin": [
            [
                "\"$params.samples\"",
                "A"
            ]
        ],
        "gives": [
            [
                "illumina_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "illumina_fastq_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "illumina_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "guppy_fastqs_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "guppy_fastqs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "basecall_summary_ch.collectFile(name: \"${params.runid}_summary.txt\", keepHeader:true, \n  skip:1, storeDir:\"$params.outdir/basecall\").set{merged_summary_ch}",
        "origin": [
            [
                "basecall_summary_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "merged_summary_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "passed_fastq_ch.mix(failed_fastq_ch)",
        "origin": [
            [
                "passed_fastq_ch",
                "P"
            ],
            [
                "failed_fastq_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "guppy_fastqs_ch.into{basecalled_fastq_ch; collect_fastq_ch}",
        "origin": [
            [
                "guppy_fastqs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "basecalled_fastq_ch",
                "P"
            ],
            [
                "collect_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "collect_fastq_ch.collectFile(name: \"${params.runid}.fastq\", storeDir:\"$params.outdir/basecall\").set{merged_fastq_ch}",
        "origin": [
            [
                "collect_fastq_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "merged_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "raw_fastqs_ch = basecalled_fastq_ch.mix(fastq_ch)",
        "origin": [
            [
                "basecalled_fastq_ch",
                "P"
            ],
            [
                "fastq_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "raw_fastqs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "raw_fastqs_ch.into{filter_fastqs_ch; fastqs_ch}",
        "origin": [
            [
                "raw_fastqs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "filter_fastqs_ch",
                "P"
            ],
            [
                "fastqs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "all_fastqs_ch = quality_fastqs_ch.mix(fastqs_ch)",
        "origin": [
            [
                "quality_fastqs_ch",
                "P"
            ],
            [
                "fastqs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "all_fastqs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "all_fastqs_ch.into{fastq_qc_ch; fastq_tax_ch; fastq_assembly_ch; fastq_hybrid_assembly_ch; fastq_mapping_reads_ch; fastq_mapping_assembly_ch ; fastq_resistance_ch}",
        "origin": [
            [
                "all_fastqs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "fastq_qc_ch",
                "P"
            ],
            [
                "fastq_tax_ch",
                "P"
            ],
            [
                "fastq_assembly_ch",
                "P"
            ],
            [
                "fastq_hybrid_assembly_ch",
                "P"
            ],
            [
                "fastq_mapping_reads_ch",
                "P"
            ],
            [
                "fastq_mapping_assembly_ch",
                "P"
            ],
            [
                "fastq_resistance_ch",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "summaries_ch.into{summary_qc_ch; summary_aln_ch}",
        "origin": [
            [
                "summaries_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "summary_qc_ch",
                "P"
            ],
            [
                "summary_aln_ch",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "centrifuge_reports_ch.collectFile(name:\"${params.runid}_centrifuge_report.txt\", keepHeader:true, \n  skip:1, storeDir:\"$params.outdir/taxonomy\")",
        "origin": [
            [
                "centrifuge_reports_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_21": {
        "string": "hybrid_fasta_ch.mix(fasta_ch).set{assembled_fasta_ch}",
        "origin": [
            [
                "hybrid_fasta_ch",
                "P"
            ],
            [
                "fasta_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "assembled_fasta_ch",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "assembled_fasta_ch.into{assemblies_resistance_ch; assemblies_map_ch; assemblies_prokka_ch}",
        "origin": [
            [
                "assembled_fasta_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "assemblies_resistance_ch",
                "P"
            ],
            [
                "assemblies_map_ch",
                "P"
            ],
            [
                "assemblies_prokka_ch",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "cov_bam_ch.into{pyco_bam_ch; bed_bam_ch}",
        "origin": [
            [
                "cov_bam_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "pyco_bam_ch",
                "P"
            ],
            [
                "bed_bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "cov_bam_ch = bam_ref_ch",
        "origin": [
            [
                "bam_ref_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cov_bam_ch",
                "P"
            ]
        ]
    }
}
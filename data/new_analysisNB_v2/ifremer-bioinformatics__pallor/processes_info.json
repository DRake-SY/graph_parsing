{
    "get_single_copy": {
        "name_process": "get_single_copy",
        "string_process": "\nprocess get_single_copy {\n  label 'busco_env'\n\n  publishDir \"${params.outdir}/${params.completness_dirname}\" , mode: 'copy', pattern : \"${genome_name}/short_summary*\"\n  publishDir \"${params.outdir}/${params.completness_dirname}\" , mode: 'copy', pattern : \"${genome_name}/run_*/*.tsv\" , saveAs : { full_table -> \"${genome_name}/full_table.tsv\" }\n  publishDir \"${params.outdir}/${params.completness_dirname}\" , mode: 'copy', pattern : \"*.faa\"\n\n  input:\n    set genome_name, file(fasta) from genomes\n\n  output:\n    file \"${genome_name}/short_summary*\"                                 \n    file \"${genome_name}/run_*/full_table.tsv\"                                \n    file \"${genome_name}.sg.faa\" into single_copy_proteins\n\n  shell:\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=${params.augustus_config_path}\n    busco -c ${task.cpus} --force --offline -m genome -i ${fasta} -o ${genome_name} -l ${params.odb_path}/${params.odb_name} >& busco.log 2>&1\n    catSingleCopyBySpecie.py -f ${genome_name}/run_${params.odb_name}/busco_sequences/single_copy_busco_sequences/ -s ${genome_name} >& catSingleCopyBySpecie.log 2>&1\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=${params.augustus_config_path}\n    busco -c ${task.cpus} --force --offline -m genome -i ${fasta} -o ${genome_name} -l ${params.odb_path}/${params.odb_name} >& busco.log 2>&1\n    catSingleCopyBySpecie.py -f ${genome_name}/run_${params.odb_name}/busco_sequences/single_copy_busco_sequences/ -s ${genome_name} >& catSingleCopyBySpecie.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "genomes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "single_copy_proteins"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "label 'busco_env'",
            "publishDir \"${params.outdir}/${params.completness_dirname}\" , mode: 'copy', pattern : \"${genome_name}/short_summary*\"",
            "publishDir \"${params.outdir}/${params.completness_dirname}\" , mode: 'copy', pattern : \"${genome_name}/run_*/*.tsv\" , saveAs : { full_table -> \"${genome_name}/full_table.tsv\" }",
            "publishDir \"${params.outdir}/${params.completness_dirname}\" , mode: 'copy', pattern : \"*.faa\""
        ],
        "when": "",
        "stub": ""
    },
    "concat_single_copy": {
        "name_process": "concat_single_copy",
        "string_process": "\nprocess concat_single_copy {\n\n  publishDir \"${params.outdir}/${params.concatenate_dirname}\", mode: 'copy'\n\n  input:\n    file '*.faa' from single_copy_proteins.collect()\n\n  output:\n    file \"single_copy_busco_sequences.fasta\" into cat_all_single_copy_proteins\n\n  shell:\n    \"\"\"\n    cat *.faa > single_copy_busco_sequences.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    cat *.faa > single_copy_busco_sequences.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "single_copy_proteins"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cat_all_single_copy_proteins"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "publishDir \"${params.outdir}/${params.concatenate_dirname}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_single_copy": {
        "name_process": "filter_single_copy",
        "string_process": "\nprocess filter_single_copy {\n  label 'biopython_env'\n\n  publishDir \"${params.outdir}/${params.extract_shared_sg_dirname}\", mode: 'copy'\n\n  input:\n    file fasta from cat_all_single_copy_proteins\n\n  output:\n    file \"*.faa\" into shared_single_copy_proteins\n\n  shell:\n    \"\"\"\n    extractSharedSingleCopy.py -f ${fasta} -s ${params.min_species}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    extractSharedSingleCopy.py -f ${fasta} -s ${params.min_species}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cat_all_single_copy_proteins"
        ],
        "nb_inputs": 1,
        "outputs": [
            "shared_single_copy_proteins"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "label 'biopython_env'",
            "publishDir \"${params.outdir}/${params.extract_shared_sg_dirname}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mafft": {
        "name_process": "mafft",
        "string_process": "\nprocess mafft {\n  label 'mafft_env'\n\n  publishDir \"${params.outdir}/${params.alignment_dirname}\", mode: 'copy'\n\n  input:\n    file faa from shared_single_copy_proteins.flatten()\n\n  output:\n    file \"*.mafft\" into aligned_shared_single_copy_proteins\n\n  shell:\n    \"\"\"\n    mafft --auto ${faa} > ${faa}.mafft\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mafft --auto ${faa} > ${faa}.mafft\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "shared_single_copy_proteins"
        ],
        "nb_inputs": 1,
        "outputs": [
            "aligned_shared_single_copy_proteins"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "label 'mafft_env'",
            "publishDir \"${params.outdir}/${params.alignment_dirname}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gblocks": {
        "name_process": "gblocks",
        "string_process": "\nprocess gblocks {\n                                          \n  validExitStatus 1\n  label 'gblocks_env'\n\n  publishDir \"${params.outdir}/${params.cleaning_dirname}\", mode: 'copy'\n\n  input:\n    file aln from aligned_shared_single_copy_proteins\n\n  output:\n    file \"*-gb\" into cleaned_aligned_shared_single_copy_proteins\n\n  script:\n    \"\"\"\n    Gblocks ${aln} -t=p -p=n -b3=8 -b4=10 -b5=h\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    Gblocks ${aln} -t=p -p=n -b3=8 -b4=10 -b5=h\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "gblocks"
        ],
        "tools_url": [
            "https://bio.tools/gblocks"
        ],
        "tools_dico": [
            {
                "name": "gblocks",
                "uri": "https://bio.tools/gblocks",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Cleaning aligned sequences.",
                "homepage": "http://www.embl-heidelberg.de/~castresa/Gblocks/Gblocks.html"
            }
        ],
        "inputs": [
            "aligned_shared_single_copy_proteins"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleaned_aligned_shared_single_copy_proteins"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "validExitStatus 1",
            "label 'gblocks_env'",
            "publishDir \"${params.outdir}/${params.cleaning_dirname}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "concatenation": {
        "name_process": "concatenation",
        "string_process": "\nprocess concatenation {\n  label 'biopython_env'\n\n  publishDir \"${params.outdir}/${params.matrix_dirname}\", mode: 'copy'\n\n  input:\n    file '*-gb' from cleaned_aligned_shared_single_copy_proteins.collect()\n\n  output:\n    file \"*.fas\" into concatenated_alignments\n\n  script:\n    \"\"\"\n    ElConcatenero.py -if fasta -of fasta -in *-gb -o concatenated\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    ElConcatenero.py -if fasta -of fasta -in *-gb -o concatenated\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cleaned_aligned_shared_single_copy_proteins"
        ],
        "nb_inputs": 1,
        "outputs": [
            "concatenated_alignments"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "label 'biopython_env'",
            "publishDir \"${params.outdir}/${params.matrix_dirname}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "iqtree": {
        "name_process": "iqtree",
        "string_process": "\nprocess iqtree {\n  label 'iqtree_env'\n\n  publishDir \"${params.outdir}/${params.tree_dirname}\", mode: 'copy'\n\n  input:\n    file matrix from concatenated_alignments\n\n  output:\n    file \"*.treefile\" into iqtree_tree\n    file \"*.iqtree\" into iqtree_logs\n\n  shell:\n    \"\"\"\n    iqtree -s ${matrix} -bb 1000 -alrt 1000 -nt ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    iqtree -s ${matrix} -bb 1000 -alrt 1000 -nt ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "concatenated_alignments"
        ],
        "nb_inputs": 1,
        "outputs": [
            "iqtree_tree",
            "iqtree_logs"
        ],
        "nb_outputs": 2,
        "name_workflow": "ifremer-bioinformatics__pallor",
        "directive": [
            "label 'iqtree_env'",
            "publishDir \"${params.outdir}/${params.tree_dirname}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "ch_add_exclusions = Channel.value('TRUE')",
        "origin": [
            [
                "'TRUE'",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_add_exclusions",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_add_exclusions = Channel.value('FALSE')",
        "origin": [
            [
                "'FALSE'",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_add_exclusions",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_firth_regression = Channel.value('TRUE')",
        "origin": [
            [
                "'TRUE'",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_firth_regression",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_firth_regression = Channel.value('FALSE')",
        "origin": [
            [
                "'FALSE'",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_firth_regression",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_samples_to_combine_vcfs = Channel.fromPath(params.input_samplefile)",
        "origin": [
            [
                "params.input_samplefile",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_samples_to_combine_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_samples_to_combine_vcfs = Channel.fromPath(params.input_phenofile)",
        "origin": [
            [
                "params.input_phenofile",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_samples_to_combine_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_samples_to_combine_vcfs = Channel.fromPath(params.input_phenofile)",
        "origin": [
            [
                "params.input_phenofile",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_samples_to_combine_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_samples_to_combine_vcfs = Channel.fromPath(params.input_samplefile)",
        "origin": [
            [
                "params.input_samplefile",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_samples_to_combine_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "ch_pheno_for_assoc_test = Channel.fromPath(params.input_phenofile)",
        "origin": [
            [
                "params.input_phenofile",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_pheno_for_assoc_test",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_codes_pheno = Channel.value(file(params.input_id_code_count))",
        "origin": [],
        "gives": [
            [
                "ch_codes_pheno",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_codes_pheno = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_codes_pheno",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "ch_gwas_input = Channel.value(file(params.gwas_input))",
        "origin": [],
        "gives": [
            [
                "ch_gwas_input",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_gwas_input = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_gwas_input",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(params.agg_vcf_file_list)\n           .ifEmpty { exit 1, \"VCF file containing  not found: ${params.agg_vcf_file_list}\" }\n           .into {ch_vcf_file; ch_vcfs_to_split; ch_index_to_split}",
        "origin": [
            [
                "params.agg_vcf_file_list",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_vcf_file",
                "P"
            ],
            [
                "ch_vcfs_to_split",
                "P"
            ],
            [
                "ch_index_to_split",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel\n    .fromFilePairs(\"${params.plink_input}\",size:3, flat : true)\n    .ifEmpty { exit 1, \"PLINK files not found: ${params.plink_input}\" }\n    .set { plinkCh }",
        "origin": [
            [
                "\"${params.plink_input}\",size:3, flat : true",
                "A"
            ]
        ],
        "gives": [
            [
                "plinkCh",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel.fromPath(params.individual_vcf_file_list)\n           .ifEmpty { exit 1, \"VCF file containing  not found: ${params.individual_vcf_file_list}\" }\n           .into { ch_vcf_file; ch_vcfs_to_split }",
        "origin": [
            [
                "params.individual_vcf_file_list",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_vcf_file",
                "P"
            ],
            [
                "ch_vcfs_to_split",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel.fromPath(params.fam)\n    .ifEmpty { exit 1, \"FAM file (w/ header) containing phenotype info not found: ${params.fam}\" }\n    .set { ch_fam }",
        "origin": [
            [
                "params.fam",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fam",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel.fromPath(params.bed)\n        .ifEmpty { exit 1, \"PLINK binary pedigree file not found: ${params.bed}\" }\n        .set { ch_bed }",
        "origin": [
            [
                "params.bed",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bed",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel.fromPath(params.bim)\n        .ifEmpty { exit 1, \"PLINK BIM file not found: ${params.bim}\" }\n        .set { ch_bim }",
        "origin": [
            [
                "params.bim",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bim",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel.fromPath(params.snps)\n    .ifEmpty { exit 1, \"SNPs of interest file not found: ${params.snps}\" }\n    .set { ch_snps }",
        "origin": [
            [
                "params.snps",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_snps",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "Channel.fromPath(params.covariate_file)\n    .ifEmpty { exit 1, \"File with covariates not found: ${params.covariate_file}\" }\n    .set { ch_covariate_file }",
        "origin": [
            [
                "params.covariate_file",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_covariate_file",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_23": {
        "string": "ch_vcfs_to_split\n        .splitCsv(header: true)\n        .map{ row -> [file(row.vcf)] }\n        .set { ch_vcfs }",
        "origin": [
            [
                "ch_vcfs_to_split",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "ch_index_to_split\n        .splitCsv(header: true)\n        .map{ row -> [file(row.index)] }\n        .set { ch_indexes }",
        "origin": [
            [
                "ch_index_to_split",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_indexes",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "ch_vcfs_to_split\n        .splitCsv(header: true)\n        .map{ row -> [file(row.vcf)] }\n        .into { ch_vcfs; ch_vcf_ind }",
        "origin": [
            [
                "ch_vcfs_to_split",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_vcfs",
                "P"
            ],
            [
                "ch_vcf_ind",
                "P"
            ]
        ]
    }
}
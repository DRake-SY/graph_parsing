{
    "OPERATION_1": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-artic-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/artic Workflow Summary'\n    section_href: 'https://github.com/nf-core/artic'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "ch_samplesheet_reformat\n    .splitCsv(header:true, sep:',')\n    .map { validate_input(it) }\n    .into { ch_reads_fastqc;\n            ch_reads_nanoplot;\n            ch_reads_align }",
        "origin": [
            [
                "ch_samplesheet_reformat",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_reads_fastqc",
                "P"
            ],
            [
                "ch_reads_nanoplot",
                "P"
            ],
            [
                "ch_reads_align",
                "P"
            ]
        ]
    }
}
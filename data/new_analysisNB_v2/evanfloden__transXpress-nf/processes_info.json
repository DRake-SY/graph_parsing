{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"FASTQC on $sample_id\"\n    publishDir params.outdir\n\n    input:\n    set sample_id, file(reads) from read_pairs_ch\n\n    output:\n    file(\"fastqc_${sample_id}_logs\") into fastqc_ch\n\n\n    script:\n    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "read_pairs_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "evanfloden__transXpress-nf",
        "directive": [
            "tag \"FASTQC on $sample_id\"",
            "publishDir params.outdir"
        ],
        "when": "",
        "stub": ""
    },
    "trimmomatic": {
        "name_process": "trimmomatic",
        "string_process": "\nprocess trimmomatic {\n    tag {\"$reads[0]\"+\" and \" +\"$reads[1]\"}\n\n    input:\n      set val(sample_id), file(reads) from read_pairs_ch2\n      file 'adapters.fasta' from file(params.trimmomatic_adapters)\n\n    output:\n      set val(sample_id),\\\n          file(\"${reads[0]}.R1-P.qtrim.fastq.gz\"), \\\n          file(\"${reads[1]}.R2-P.qtrim.fastq.gz\") \\\n          into filteredPairedReads_ch1, \\\n               filteredPairedReads_ch2\n\n    script:\n      \"\"\"\n      trimmomatic PE -threads ${task.cpus} \\\n                     ${reads[0]} ${reads[1]} \\\n                     ${reads[0]}.R1-P.qtrim.fastq.gz \\\n                     ${reads[0]}.R1-U.qtrim.fastq.gz \\\n                     ${reads[1]}.R2-P.qtrim.fastq.gz \\\n                     ${reads[1]}.R2-U.qtrim.fastq.gz \\\n                     ILLUMINACLIP:adapters.fasta:2:30:10 \\\n                     SLIDINGWINDOW:4:5 \\\n                     LEADING:5 \\\n                     TRAILING:5 \\\n                     MINLEN:25 \n      \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "      \"\"\"\n      trimmomatic PE -threads ${task.cpus} \\\n                     ${reads[0]} ${reads[1]} \\\n                     ${reads[0]}.R1-P.qtrim.fastq.gz \\\n                     ${reads[0]}.R1-U.qtrim.fastq.gz \\\n                     ${reads[1]}.R2-P.qtrim.fastq.gz \\\n                     ${reads[1]}.R2-U.qtrim.fastq.gz \\\n                     ILLUMINACLIP:adapters.fasta:2:30:10 \\\n                     SLIDINGWINDOW:4:5 \\\n                     LEADING:5 \\\n                     TRAILING:5 \\\n                     MINLEN:25 \n      \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "read_pairs_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "filteredPairedReads_ch1",
            "filteredPairedReads_ch2"
        ],
        "nb_outputs": 3,
        "name_workflow": "evanfloden__transXpress-nf",
        "directive": [
            "tag {\"$reads[0]\"+\" and \" +\"$reads[1]\"}"
        ],
        "when": "",
        "stub": ""
    },
    "rnaSPAdes_yaml": {
        "name_process": "rnaSPAdes_yaml",
        "string_process": "\nprocess rnaSPAdes_yaml {\n\n    input:\n      file rnaSPAdes_sample from rnaSPAdes_samples_ch\n\n    output:\n      file \"rnaSPAdes_samples.yaml\" into rnaSPAdes_yaml_ch\n\nscript:\n    \"\"\"\n    #!/usr/bin/env python\n    import re\n    import os\n    import os.path\n    import pprint\n    sample_list = []\n    with open(\"${rnaSPAdes_sample}\", \"r\") as input_handle:\n      for line in input_handle:\n        row = re.split(\"[\\t ]+\", line)\n        if (len(row) > 3): # paired reads\n          paired_dict = {}\n          paired_dict['orientation'] = 'fr'\n          paired_dict['type'] = 'paired-end'\n          f_reads = row[2].strip()\n          r_reads = row[3].strip()\n          paired_dict['left reads'] = [f_reads]\n          paired_dict['right reads'] = [r_reads]\n          sample_list.append(paired_dict)\n        if (len(row) == 3): # unpaired reads\n          unpaired_dict = {}\n          unpaired_dict['type'] = 'single'\n          u_reads = row[2].strip()\n          assert os.path.isfile(u_reads)\n          unpaired_dict['single reads'] = [u_reads]\n          sample_list.append(unpaired_dict)\n    with open(\"rnaSPAdes_samples.yaml\", \"w\") as output_handle:\n      output_handle.write(pprint.pformat(sample_list))\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n    import re\n    import os\n    import os.path\n    import pprint\n    sample_list = []\n    with open(\"${rnaSPAdes_sample}\", \"r\") as input_handle:\n      for line in input_handle:\n        row = re.split(\"[\\t ]+\", line)\n        if (len(row) > 3): # paired reads\n          paired_dict = {}\n          paired_dict['orientation'] = 'fr'\n          paired_dict['type'] = 'paired-end'\n          f_reads = row[2].strip()\n          r_reads = row[3].strip()\n          paired_dict['left reads'] = [f_reads]\n          paired_dict['right reads'] = [r_reads]\n          sample_list.append(paired_dict)\n        if (len(row) == 3): # unpaired reads\n          unpaired_dict = {}\n          unpaired_dict['type'] = 'single'\n          u_reads = row[2].strip()\n          assert os.path.isfile(u_reads)\n          unpaired_dict['single reads'] = [u_reads]\n          sample_list.append(unpaired_dict)\n    with open(\"rnaSPAdes_samples.yaml\", \"w\") as output_handle:\n      output_handle.write(pprint.pformat(sample_list))\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rnaSPAdes_samples_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rnaSPAdes_yaml_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "evanfloden__transXpress-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "rnaSPAdes": {
        "name_process": "rnaSPAdes",
        "string_process": "\nprocess rnaSPAdes {\n    memory = 2.GB\n\n    input:\n      file reads from filteredPairedReads_ch2.collect()\n      file datasets from rnaSPAdes_yaml_ch\n\n    output:\n      set val(\"rnaSPAdes\"), \\\n          file(\"rnaSPAdes.gene_trans_map\"), \\\n          file(\"rnaSPAdes/transcripts.fasta\") \\\n          into rnaSPAdes_ch\n\n    script:\n      \"\"\"\n      rnaspades.py --dataset ${datasets} \\\n                   -t ${task.cpus} \\\n                   -m ${task.memory.toGiga()} \\\n                   -o rnaSPAdes \\\n                   --only-assembler -k 47 \\\n                   ${params.rnaSPAdes_params}\n\n      # Make a fake gene to transcript file:\n      cat \"rnaSPAdes/transcripts.fasta\" | grep \">\" | tr -d \">\" | cut -f 1 -d \" \" > tmp.txt\n      paste tmp.txt tmp.txt > rnaSPAdes.gene_trans_map\n      \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "      \"\"\"\n      rnaspades.py --dataset ${datasets} \\\n                   -t ${task.cpus} \\\n                   -m ${task.memory.toGiga()} \\\n                   -o rnaSPAdes \\\n                   --only-assembler -k 47 \\\n                   ${params.rnaSPAdes_params}\n\n      # Make a fake gene to transcript file:\n      cat \"rnaSPAdes/transcripts.fasta\" | grep \">\" | tr -d \">\" | cut -f 1 -d \" \" > tmp.txt\n      paste tmp.txt tmp.txt > rnaSPAdes.gene_trans_map\n      \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filteredPairedReads_ch2",
            "rnaSPAdes_yaml_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rnaSPAdes_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "evanfloden__transXpress-nf",
        "directive": [
            "memory = 2.GB"
        ],
        "when": "",
        "stub": ""
    }
}
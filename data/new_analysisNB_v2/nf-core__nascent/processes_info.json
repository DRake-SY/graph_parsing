{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    validExitStatus 0,1,127\n    publishDir \"${params.outdir}/software_versions/\", mode: 'copy', pattern: '*.txt'\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    bbversion.sh --version > v_bbduk.txt\n    hisat2 --version > v_hisat2.txt\n    samtools --version > v_samtools.txt\n    fastq-dump --version > v_fastq-dump.txt\n    preseq > v_preseq.txt\n    seqkit version > v_seqkit.txt\n    bedtools --version > v_bedtools.txt\n    export LC_ALL=C\n    igvtools version > v_igv-tools.txt\n\n    # Can't call this before running MultiQC or it breaks it\n    read_distribution.py --version > v_rseqc.txt\n\n    for X in `ls *.txt`; do\n        cat \\$X >> all_versions.txt;\n    done\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    bbversion.sh --version > v_bbduk.txt\n    hisat2 --version > v_hisat2.txt\n    samtools --version > v_samtools.txt\n    fastq-dump --version > v_fastq-dump.txt\n    preseq > v_preseq.txt\n    seqkit version > v_seqkit.txt\n    bedtools --version > v_bedtools.txt\n    export LC_ALL=C\n    igvtools version > v_igv-tools.txt\n\n    # Can't call this before running MultiQC or it breaks it\n    read_distribution.py --version > v_rseqc.txt\n\n    for X in `ls *.txt`; do\n        cat \\$X >> all_versions.txt;\n    done\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "HISAT2",
            "SAMtools",
            "preseq",
            "BEDTools",
            "IGVtools"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools",
            "https://bio.tools/preseq",
            "https://bio.tools/bedtools",
            "https://bio.tools/igvtools"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "IGVtools",
                "uri": "https://bio.tools/igvtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0256",
                                    "term": "Sequence feature comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0256",
                                    "term": "Feature comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0256",
                                    "term": "Feature table comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The igvtools utility provides a set of tools for pre-processing data files.",
                "homepage": "https://software.broadinstitute.org/software/igv/igvtools"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0,1,127",
            "publishDir \"${params.outdir}/software_versions/\", mode: 'copy', pattern: '*.txt'"
        ],
        "when": "",
        "stub": ""
    },
    "sra_dump": {
        "name_process": "sra_dump",
        "string_process": "\nprocess sra_dump {\n    tag \"$prefix\"\n\n    input:\n    set val(prefix), file(reads) from read_files_sra\n\n    output:\n    set val(prefix), file(\"*.fastq\") into fastq_reads_qc_sra, fastq_reads_trim_sra, fastq_reads_gzip_sra\n\n    script:\n    prefix = reads.baseName\n    if (!params.threadfqdump) {\n        \"\"\"\n        echo ${prefix}\n\n        fastq-dump ${reads}\n        \"\"\"\n    } else if (!params.singleEnd) {\n         \"\"\"\n        export PATH=~/.local/bin:$PATH\n\n        parallel-fastq-dump \\\n            --threads ${task.cpus} \\\n            --split-3 \\\n            --sra-id ${reads}\n        \"\"\"\n    } else if (!params.threadfqdump && !params.singleEnd) {\n        \"\"\"\n        echo ${prefix}\n\n        fastq-dump --split-3 ${reads}\n        \"\"\"\n    } else {\n        \"\"\"\n        export PATH=~/.local/bin:$PATH\n\n        parallel-fastq-dump \\\n            --threads ${task.cpus} \\\n            --sra-id ${reads}\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 41,
        "string_script": "    prefix = reads.baseName\n    if (!params.threadfqdump) {\n        \"\"\"\n        echo ${prefix}\n\n        fastq-dump ${reads}\n        \"\"\"\n    } else if (!params.singleEnd) {\n         \"\"\"\n        export PATH=~/.local/bin:$PATH\n\n        parallel-fastq-dump \\\n            --threads ${task.cpus} \\\n            --split-3 \\\n            --sra-id ${reads}\n        \"\"\"\n    } else if (!params.threadfqdump && !params.singleEnd) {\n        \"\"\"\n        echo ${prefix}\n\n        fastq-dump --split-3 ${reads}\n        \"\"\"\n    } else {\n        \"\"\"\n        export PATH=~/.local/bin:$PATH\n\n        parallel-fastq-dump \\\n            --threads ${task.cpus} \\\n            --sra-id ${reads}\n        \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_files_sra"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastq_reads_qc_sra",
            "fastq_reads_trim_sra",
            "fastq_reads_gzip_sra"
        ],
        "nb_outputs": 3,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$prefix\""
        ],
        "when": "",
        "stub": ""
    },
    "make_hisat_index": {
        "name_process": "make_hisat_index",
        "string_process": " process make_hisat_index {\n        tag \"$fasta\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir },\n                   saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n        input:\n        file fasta from ch_fasta_for_hisat_index\n\n        output:\n        file \"*.ht2\" into hisat2_indices\n\n        script:\n        if( !task.memory ){\n            log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n            avail_mem = 0\n        } else {\n            log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n            avail_mem = task.memory.toGiga()\n        }\n        \"\"\"\n        hisat2-build -p ${task.cpus} ${fasta} ${fasta.baseName}-hisat2_index\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        if( !task.memory ){\n            log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n            avail_mem = 0\n        } else {\n            log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n            avail_mem = task.memory.toGiga()\n        }\n        \"\"\"\n        hisat2-build -p ${task.cpus} ${fasta} ${fasta.baseName}-hisat2_index\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fasta_for_hisat_index"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hisat2_indices"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$fasta\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$prefix\"\n    publishDir \"${params.outdir}/qc/fastqc/\", mode: 'copy',\n        saveAs: {filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"}\n\n    input:\n    set val(prefix), file(reads) from fastq_reads_qc.mix(fastq_reads_qc_sra)\n\n    output:\n    file \"*.{zip,html,txt}\" into fastqc_results\n\n    script:\n    prefix = reads.baseName\n    \"\"\"\n    fastqc $reads\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    prefix = reads.baseName\n    \"\"\"\n    fastqc $reads\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq_reads_qc",
            "fastq_reads_qc_sra"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$prefix\"",
            "publishDir \"${params.outdir}/qc/fastqc/\", mode: 'copy' , saveAs: {filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"}"
        ],
        "when": "",
        "stub": ""
    },
    "gzip_fastq": {
        "name_process": "gzip_fastq",
        "string_process": "\nprocess gzip_fastq {\n    tag \"$name\"\n    publishDir \"${params.outdir}/fastq\", mode: 'copy'\n\n    when:\n    params.savefq || params.saveAllfq\n\n    input:\n    set val(name), file(fastq_reads) from fastq_reads_gzip.mix(fastq_reads_gzip_sra)\n\n    output:\n    set val(name), file(\"*.gz\") into compressed_fastq\n\n    script:\n    \"\"\"\n    gzip -c ${name}.fastq > ${name}.fastq.gz\n    \"\"\"\n }",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    gzip -c ${name}.fastq > ${name}.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_reads_gzip",
            "fastq_reads_gzip_sra"
        ],
        "nb_inputs": 2,
        "outputs": [
            "compressed_fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}/fastq\", mode: 'copy'"
        ],
        "when": "params.savefq || params.saveAllfq",
        "stub": ""
    },
    "bbduk": {
        "name_process": "bbduk",
        "string_process": "\nprocess bbduk {\n    validExitStatus 0,1\n    tag \"$name\"\n    publishDir \"${params.outdir}/qc/trimstats\", mode: 'copy', pattern: \"*.txt\"\n\n    input:\n    set val(name), file(reads) from fastq_reads_trim.mix(fastq_reads_trim_sra)\n\n    output:\n    set val(name), file (\"*.trim.fastq\") into trimmed_reads_fastqc, trimmed_reads_hisat2, trimmed_reads_gzip\n    file \"*.txt\" into trim_stats\n\n    script:\n    bbduk_mem = task.memory.toGiga()\n    if (!params.singleEnd && params.flip) {\n        \"\"\"\n        echo ${name}\n\n        seqkit seq -j 16 -r -p \\\n                  ${name}_R1.flip.fastq \\\n                  -o ${name}.flip.fastq\n                  \n        seqkit seq -j 16 -r -p \\\n                 ${name}_R2.flip.fastq \\\n                 -o ${name}.flip.fastq\n\n        \n\n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}_R1.flip.fastq \\\n                  in2=${name}_R2.flip.fastq \\\n                  out=${name}_R1.flip.trim.fastq \\\n                  out2=${name}_R2.flip.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    } else if (params.flip) {\n        \"\"\"\n        echo ${name}\n\n\n        seqkit seq -j 16 -r -p \\\n                  ${name}.fastq \\\n                  -o ${name}.flip.fastq\n\n        \n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}.flip.fastq \\\n                  out=${name}.flip.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    }else if (!params.singleEnd) {\n        \"\"\"\n        echo ${name}      \n\n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}_R1.fastq \\\n                  in2=${name}_R2.fastq \\\n                  out=${name}_R1.trim.fastq \\\n                  out2=${name}_R2.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        echo ${name}\n        echo ${bbduk_mem}\n        \n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}.fastq \\\n                  out=${name}.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 104,
        "string_script": "    bbduk_mem = task.memory.toGiga()\n    if (!params.singleEnd && params.flip) {\n        \"\"\"\n        echo ${name}\n\n        seqkit seq -j 16 -r -p \\\n                  ${name}_R1.flip.fastq \\\n                  -o ${name}.flip.fastq\n                  \n        seqkit seq -j 16 -r -p \\\n                 ${name}_R2.flip.fastq \\\n                 -o ${name}.flip.fastq\n\n        \n\n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}_R1.flip.fastq \\\n                  in2=${name}_R2.flip.fastq \\\n                  out=${name}_R1.flip.trim.fastq \\\n                  out2=${name}_R2.flip.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    } else if (params.flip) {\n        \"\"\"\n        echo ${name}\n\n\n        seqkit seq -j 16 -r -p \\\n                  ${name}.fastq \\\n                  -o ${name}.flip.fastq\n\n        \n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}.flip.fastq \\\n                  out=${name}.flip.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    }else if (!params.singleEnd) {\n        \"\"\"\n        echo ${name}      \n\n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}_R1.fastq \\\n                  in2=${name}_R2.fastq \\\n                  out=${name}_R1.trim.fastq \\\n                  out2=${name}_R2.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        echo ${name}\n        echo ${bbduk_mem}\n        \n        bbduk.sh -Xmx${bbduk_mem}g \\\n                  t=${task.cpus} \\\n                  in=${name}.fastq \\\n                  out=${name}.trim.fastq \\\n                  ref=${bbmap_adapters} \\\n                  ktrim=r qtrim=10 k=23 mink=11 hdist=1 \\\n                  maq=10 minlen=25 \\\n                  tpe tbo \\\n                  literal=AAAAAAAAAAAAAAAAAAAAAAA \\\n                  stats=${name}.trimstats.txt \\\n                  refstats=${name}.refstats.txt \\\n                  ehist=${name}.ehist.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 90,
        "language_script": "bash",
        "tools": [
            "TPES"
        ],
        "tools_url": [
            "https://bio.tools/TPES"
        ],
        "tools_dico": [
            {
                "name": "TPES",
                "uri": "https://bio.tools/TPES",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tumor Purity Estimation from SNVs.",
                "homepage": "https://bitbucket.org/l0ka/tpes.git"
            }
        ],
        "inputs": [
            "fastq_reads_trim",
            "fastq_reads_trim_sra"
        ],
        "nb_inputs": 2,
        "outputs": [
            "trimmed_reads_fastqc",
            "trimmed_reads_hisat2",
            "trimmed_reads_gzip",
            "trim_stats"
        ],
        "nb_outputs": 4,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0,1",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/qc/trimstats\", mode: 'copy', pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_trimmed": {
        "name_process": "fastqc_trimmed",
        "string_process": "\nprocess fastqc_trimmed {\n    validExitStatus 0,1\n    tag \"$prefix\"\n    publishDir \"${params.outdir}/qc/fastqc/\", mode: 'copy',\n        saveAs: {filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"}\n\n    input:\n    set val(prefix), file(trimmed_reads) from trimmed_reads_fastqc\n\n    output:\n    file \"*_fastqc.{zip,html,txt}\" into trimmed_fastqc_results\n\n    script:\n    prefix = trimmed_reads.baseName\n    \"\"\"\n    echo ${prefix}\n\n    fastqc $trimmed_reads\n\t\textract_fastqc_stats.sh --srr=${prefix} > ${prefix}_stats_fastqc.txt\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = trimmed_reads.baseName\n    \"\"\"\n    echo ${prefix}\n\n    fastqc $trimmed_reads\n\t\textract_fastqc_stats.sh --srr=${prefix} > ${prefix}_stats_fastqc.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "trimmed_reads_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0,1",
            "tag \"$prefix\"",
            "publishDir \"${params.outdir}/qc/fastqc/\", mode: 'copy' , saveAs: {filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"}"
        ],
        "when": "",
        "stub": ""
    },
    "gzip_trimmed": {
        "name_process": "gzip_trimmed",
        "string_process": "\nprocess gzip_trimmed {\n    tag \"$prefix\"\n    publishDir \"${params.outdir}/trimmed\", mode: 'copy'\n\n    when:\n    params.saveTrim || params.saveAllfq\n\n    input:\n    file(trimmed_reads) from trimmed_reads_gzip\n\n    output:\n    set val(prefix), file(\"*.gz\") into trimmed_gzip\n\n    script:\n    prefix = trimmed_reads.baseName\n    \"\"\"\n    gzip -c $trimmed_reads > ${prefix}.fastq.gz\n    \"\"\"\n }",
        "nb_lignes_process": 18,
        "string_script": "    prefix = trimmed_reads.baseName\n    \"\"\"\n    gzip -c $trimmed_reads > ${prefix}.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_reads_gzip"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_gzip"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$prefix\"",
            "publishDir \"${params.outdir}/trimmed\", mode: 'copy'"
        ],
        "when": "params.saveTrim || params.saveAllfq",
        "stub": ""
    },
    "hisat2": {
        "name_process": "hisat2",
        "string_process": "\nprocess hisat2 {\n                                                                           \n                                                                      \n                                                            \n    tag \"$name\"\n    validExitStatus 0,143\n\n    input:\n    val(indices) from hisat2_indices.first()\n    set val(name), file(trimmed_reads) from trimmed_reads_hisat2\n\n    output:\n    set val(name), file(\"*.sam\") into hisat2_sam\n\n    script:\n    index_base = indices[0].toString() - ~/.\\d.ht2/\n    if (!params.singleEnd) {\n        \"\"\"\n        echo ${name}\n    \n        hisat2  -p ${task.cpus} \\\n                --very-sensitive \\\n                --no-spliced-alignment \\\n                -x ${index_base} \\\n                -1 ${name}_R1.trim.fastq \\\n                -2 ${name}_R2.trim.fastq\n                > ${name}.sam\n        \"\"\"\n    } else {\n        \"\"\"\n        echo ${name}\n    \n        hisat2  -p ${task.cpus} \\\n                --very-sensitive \\\n                --no-spliced-alignment \\\n                -x ${index_base}\\\n                -U ${trimmed_reads} \\\n                > ${name}.sam\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    index_base = indices[0].toString() - ~/.\\d.ht2/\n    if (!params.singleEnd) {\n        \"\"\"\n        echo ${name}\n    \n        hisat2  -p ${task.cpus} \\\n                --very-sensitive \\\n                --no-spliced-alignment \\\n                -x ${index_base} \\\n                -1 ${name}_R1.trim.fastq \\\n                -2 ${name}_R2.trim.fastq\n                > ${name}.sam\n        \"\"\"\n    } else {\n        \"\"\"\n        echo ${name}\n    \n        hisat2  -p ${task.cpus} \\\n                --very-sensitive \\\n                --no-spliced-alignment \\\n                -x ${index_base}\\\n                -U ${trimmed_reads} \\\n                > ${name}.sam\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "HISAT2"
        ],
        "tools_url": [
            "https://bio.tools/hisat2"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            }
        ],
        "inputs": [
            "hisat2_indices",
            "trimmed_reads_hisat2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "hisat2_sam"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$name\"",
            "validExitStatus 0,143"
        ],
        "when": "",
        "stub": ""
    },
    "samtools": {
        "name_process": "samtools",
        "string_process": "\nprocess samtools {\n    tag \"$prefix\"\n    publishDir \"${params.outdir}/mapped/bams\", mode: 'copy', pattern: \"${prefix}.sorted.bam\"\n    publishDir \"${params.outdir}/mapped/bams\", mode: 'copy', pattern: \"${prefix}.sorted.bam.bai\"\n    publishDir \"${params.outdir}/qc/mapstats\", mode: 'copy', pattern: \"${prefix}.sorted.bam.flagstat\"\n    publishDir \"${params.outdir}/qc/mapstats\", mode: 'copy', pattern: \"${prefix}.sorted.bam.millionsmapped\"\n\n    input:\n    set val(name), file(mapped_sam) from hisat2_sam\n\n    output:\n    set val(name), file(\"${prefix}.sorted.bam\") into sorted_bam_ch\n    set val(name), file(\"${prefix}.sorted.bam.bai\") into sorted_bam_indices_ch\n    set val(name), file(\"${prefix}.sorted.bam.flagstat\") into bam_flagstat\n    set val(name), file(\"${prefix}.sorted.bam.millionsmapped\") into bam_milmapped_bedgraph\n\n    script:\n    prefix = mapped_sam.baseName\n                                                                                                                               \n                                                                                                 \n    if (!params.singleEnd) {\n    \"\"\"\n\n    samtools view -@ ${task.cpus} -bS -o ${prefix}.bam ${mapped_sam}\n    samtools sort -@ ${task.cpus} ${prefix}.bam > ${prefix}.sorted.bam\n    samtools flagstat ${prefix}.sorted.bam > ${prefix}.sorted.bam.flagstat\n    samtools view -@ ${task.cpus} -F 0x40 ${prefix}.sorted.bam | cut -f1 | sort | uniq | wc -l > ${prefix}.sorted.bam.millionsmapped\n    samtools index ${prefix}.sorted.bam ${prefix}.sorted.bam.bai\n    \"\"\"\n    } else {\n    \"\"\"\n\n    samtools view -@ ${task.cpus} -bS -o ${prefix}.bam ${mapped_sam}\n    samtools sort -@ ${task.cpus} ${prefix}.bam > ${prefix}.sorted.bam\n    samtools flagstat ${prefix}.sorted.bam > ${prefix}.sorted.bam.flagstat\n    samtools view -@ ${task.cpus} -F 0x904 -c ${prefix}.sorted.bam > ${prefix}.sorted.bam.millionsmapped\n    samtools index ${prefix}.sorted.bam ${prefix}.sorted.bam.bai\n    \"\"\"\n    }\n}",
        "nb_lignes_process": 39,
        "string_script": "    prefix = mapped_sam.baseName\n                                                                                                                               \n                                                                                                 \n    if (!params.singleEnd) {\n    \"\"\"\n\n    samtools view -@ ${task.cpus} -bS -o ${prefix}.bam ${mapped_sam}\n    samtools sort -@ ${task.cpus} ${prefix}.bam > ${prefix}.sorted.bam\n    samtools flagstat ${prefix}.sorted.bam > ${prefix}.sorted.bam.flagstat\n    samtools view -@ ${task.cpus} -F 0x40 ${prefix}.sorted.bam | cut -f1 | sort | uniq | wc -l > ${prefix}.sorted.bam.millionsmapped\n    samtools index ${prefix}.sorted.bam ${prefix}.sorted.bam.bai\n    \"\"\"\n    } else {\n    \"\"\"\n\n    samtools view -@ ${task.cpus} -bS -o ${prefix}.bam ${mapped_sam}\n    samtools sort -@ ${task.cpus} ${prefix}.bam > ${prefix}.sorted.bam\n    samtools flagstat ${prefix}.sorted.bam > ${prefix}.sorted.bam.flagstat\n    samtools view -@ ${task.cpus} -F 0x904 -c ${prefix}.sorted.bam > ${prefix}.sorted.bam.millionsmapped\n    samtools index ${prefix}.sorted.bam ${prefix}.sorted.bam.bai\n    \"\"\"\n    }",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2_sam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam_ch",
            "sorted_bam_indices_ch",
            "bam_flagstat",
            "bam_milmapped_bedgraph"
        ],
        "nb_outputs": 4,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$prefix\"",
            "publishDir \"${params.outdir}/mapped/bams\", mode: 'copy', pattern: \"${prefix}.sorted.bam\"",
            "publishDir \"${params.outdir}/mapped/bams\", mode: 'copy', pattern: \"${prefix}.sorted.bam.bai\"",
            "publishDir \"${params.outdir}/qc/mapstats\", mode: 'copy', pattern: \"${prefix}.sorted.bam.flagstat\"",
            "publishDir \"${params.outdir}/qc/mapstats\", mode: 'copy', pattern: \"${prefix}.sorted.bam.millionsmapped\""
        ],
        "when": "",
        "stub": ""
    },
    "preseq": {
        "name_process": "preseq",
        "string_process": "\nprocess preseq {\n    tag \"$name\"\n    errorStrategy 'ignore'\n    publishDir \"${params.outdir}/qc/preseq/\", mode: 'copy', pattern: \"*.txt\"\n\n    input:\n    set val(name), file(bam_file) from sorted_bams_for_preseq\n    file(bam_indices) from sorted_bam_indices_for_preseq\n\n    output:\n    file(\"*.txt\") into preseq_results\n\n    script:\n    \"\"\"\n\n    preseq c_curve -B -o ${name}.c_curve.txt \\\n           ${bam_file}\n\n    preseq lc_extrap -B -o ${name}.lc_extrap.txt \\\n           ${bam_file}\n    \"\"\"\n }",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n\n    preseq c_curve -B -o ${name}.c_curve.txt \\\n           ${bam_file}\n\n    preseq lc_extrap -B -o ${name}.lc_extrap.txt \\\n           ${bam_file}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "preseq"
        ],
        "tools_url": [
            "https://bio.tools/preseq"
        ],
        "tools_dico": [
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            }
        ],
        "inputs": [
            "sorted_bams_for_preseq",
            "sorted_bam_indices_for_preseq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "preseq_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$name\"",
            "errorStrategy 'ignore'",
            "publishDir \"${params.outdir}/qc/preseq/\", mode: 'copy', pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "rseqc": {
        "name_process": "rseqc",
        "string_process": "\nprocess rseqc {\n    tag \"$name\"\n    validExitStatus 0,143\n    publishDir \"${params.outdir}/qc/rseqc\" , mode: 'copy',\n        saveAs: {filename ->\n                 if (filename.indexOf(\"infer_experiment.txt\") > 0)              \"infer_experiment/$filename\"\n            else if (filename.indexOf(\"read_distribution.txt\") > 0)             \"read_distribution/$filename\"\n            else if (filename.indexOf(\"read_duplication.DupRate_plot.pdf\") > 0) \"read_duplication/$filename\"\n            else if (filename.indexOf(\"read_duplication.DupRate_plot.r\") > 0)   \"read_duplication/rscripts/$filename\"\n            else if (filename.indexOf(\"read_duplication.pos.DupRate.xls\") > 0)  \"read_duplication/dup_pos/$filename\"\n            else if (filename.indexOf(\"read_duplication.seq.DupRate.xls\") > 0)  \"read_duplication/dup_seq/$filename\"\n            else if (filename.indexOf(\"RPKM_saturation.eRPKM.xls\") > 0)         \"RPKM_saturation/rpkm/$filename\"\n            else if (filename.indexOf(\"RPKM_saturation.rawCount.xls\") > 0)      \"RPKM_saturation/counts/$filename\"\n            else if (filename.indexOf(\"RPKM_saturation.saturation.pdf\") > 0)    \"RPKM_saturation/$filename\"\n            else if (filename.indexOf(\"RPKM_saturation.saturation.r\") > 0)      \"RPKM_saturation/rscripts/$filename\"\n            else filename\n        }\n\n    input:\n    set val(name), file(bam_file) from sorted_bams_for_rseqc\n    file(bam_indices) from sorted_bam_indices_for_rseqc\n\n    output:\n    file \"*.{txt,pdf,r,xls}\" into rseqc_results\n\n    script:\n    \"\"\"\n\n    read_distribution.py -i ${bam_file} \\\n                         -r ${genome_refseq} \\\n                         > ${name}.read_dist.txt\n\n    read_duplication.py -i ${bam_file} \\\n                        -o ${name}.read_duplication\n\n    infer_experiment.py -i ${bam_file} \\\n                        -r ${genome_refseq} \\\n                        > ${name}.infer_experiment.txt\n    \"\"\"\n }",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n\n    read_distribution.py -i ${bam_file} \\\n                         -r ${genome_refseq} \\\n                         > ${name}.read_dist.txt\n\n    read_duplication.py -i ${bam_file} \\\n                        -o ${name}.read_duplication\n\n    infer_experiment.py -i ${bam_file} \\\n                        -r ${genome_refseq} \\\n                        > ${name}.infer_experiment.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sorted_bams_for_rseqc",
            "sorted_bam_indices_for_rseqc"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rseqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$name\"",
            "validExitStatus 0,143",
            "publishDir \"${params.outdir}/qc/rseqc\" , mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"infer_experiment.txt\") > 0) \"infer_experiment/$filename\" else if (filename.indexOf(\"read_distribution.txt\") > 0) \"read_distribution/$filename\" else if (filename.indexOf(\"read_duplication.DupRate_plot.pdf\") > 0) \"read_duplication/$filename\" else if (filename.indexOf(\"read_duplication.DupRate_plot.r\") > 0) \"read_duplication/rscripts/$filename\" else if (filename.indexOf(\"read_duplication.pos.DupRate.xls\") > 0) \"read_duplication/dup_pos/$filename\" else if (filename.indexOf(\"read_duplication.seq.DupRate.xls\") > 0) \"read_duplication/dup_seq/$filename\" else if (filename.indexOf(\"RPKM_saturation.eRPKM.xls\") > 0) \"RPKM_saturation/rpkm/$filename\" else if (filename.indexOf(\"RPKM_saturation.rawCount.xls\") > 0) \"RPKM_saturation/counts/$filename\" else if (filename.indexOf(\"RPKM_saturation.saturation.pdf\") > 0) \"RPKM_saturation/$filename\" else if (filename.indexOf(\"RPKM_saturation.saturation.r\") > 0) \"RPKM_saturation/rscripts/$filename\" else filename }"
        ],
        "when": "",
        "stub": ""
    },
    "pileup": {
        "name_process": "pileup",
        "string_process": "\nprocess pileup {\n    tag \"$name\"\n    publishDir \"${params.outdir}/qc/pileup\", mode: 'copy', pattern: \"*.txt\"\n\n    input:\n    set val(name), file(bam_file) from sorted_bams_for_pileup\n    file(bam_indices) from sorted_bam_indicies_for_pileup\n\n    output:\n    file(\"*.txt\") into pileup_results\n\n    script:\n    pileup_mem = task.memory.toGiga()\n    \"\"\"\n\n    pileup.sh -Xmx${pileup_mem}g \\\n              in=${bam_file} \\\n              out=${name}.coverage.stats.txt \\\n              hist=${name}.coverage.hist.txt\n    \"\"\"\n }",
        "nb_lignes_process": 20,
        "string_script": "    pileup_mem = task.memory.toGiga()\n    \"\"\"\n\n    pileup.sh -Xmx${pileup_mem}g \\\n              in=${bam_file} \\\n              out=${name}.coverage.stats.txt \\\n              hist=${name}.coverage.hist.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sorted_bams_for_pileup",
            "sorted_bam_indicies_for_pileup"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pileup_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}/qc/pileup\", mode: 'copy', pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "bedgraphs": {
        "name_process": "bedgraphs",
        "string_process": "\nprocess bedgraphs {\n    validExitStatus 0,143\n    tag \"$name\"\n    publishDir \"${params.outdir}/mapped/bedgraphs\", mode: 'copy', pattern: \"*{neg,pos}.bedGraph\"\n    publishDir \"${params.outdir}/mapped/bedgraphs\", mode: 'copy', pattern: \"${name}.bedGraph\"\n    publishDir \"${params.outdir}/mapped/rcc_bedgraphs\", mode: 'copy', pattern: \"${name}.rcc.bedGraph\"\n\n    input:\n    set val(name), file(bam_file) from sorted_bams_for_bedtools_bedgraph\n    set val(name), file(bam_indices) from sorted_bam_indices_for_bedtools_bedgraph\n    set val(name), file(millions_mapped) from bam_milmapped_bedgraph\n\n    output:\n    set val(name), file(\"*.bedGraph\") into non_normalized_bedgraphs\n    set val(name), file(\"${name}.rcc.bedGraph\") into bedgraph_tdf\n    set val(name), file(\"${name}.pos.rcc.bedGraph\") into bedgraph_bigwig_pos\n    set val(name), file(\"${name}.neg.rcc.bedGraph\") into bedgraph_bigwig_neg\n\n    script:\n    \"\"\"\n\n    genomeCoverageBed \\\n                     -bg \\\n                     -strand + \\\n                     -g hg38 \\\n                     -ibam ${bam_file} \\\n                     > ${name}.pos.bedGraph\n\n    genomeCoverageBed \\\n                     -bg \\\n                     -strand - \\\n                     -g hg38 \\\n                     -ibam ${bam_file} \\\n                     > ${name}.tmp.neg.bedGraph\n\n     awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' ${name}.tmp.neg.bedGraph \\\n        > ${name}.neg.bedGraph\n        rm ${name}.tmp.neg.bedGraph\n\n    cat ${name}.pos.bedGraph \\\n        ${name}.neg.bedGraph \\\n        > ${name}.unsorted.bedGraph\n\n    sortBed \\\n             -i ${name}.unsorted.bedGraph \\\n             > ${name}.bedGraph\n\n    rm ${name}.unsorted.bedGraph\n\n    python ${params.rcc} \\\n        ${name}.bedGraph \\\n        ${millions_mapped} \\\n        ${name}.rcc.bedGraph \\\n\n    python ${params.rcc} \\\n        ${name}.pos.bedGraph \\\n        ${millions_mapped} \\\n        ${name}.unsorted.pos.rcc.bedGraph\n\n    sortBed -i ${name}.unsorted.pos.rcc.bedGraph > ${name}.pos.rcc.bedGraph\n    rm ${name}.unsorted.pos.rcc.bedGraph\n\n    python ${params.rcc} \\\n        ${name}.neg.bedGraph \\\n        ${millions_mapped} \\\n        ${name}.unsorted.neg.rcc.bedGraph\n\n    sortBed -i ${name}.unsorted.neg.rcc.bedGraph > ${name}.neg.rcc.bedGraph\n    rm ${name}.unsorted.neg.rcc.bedGraph\n\n    \"\"\"\n }",
        "nb_lignes_process": 71,
        "string_script": "    \"\"\"\n\n    genomeCoverageBed \\\n                     -bg \\\n                     -strand + \\\n                     -g hg38 \\\n                     -ibam ${bam_file} \\\n                     > ${name}.pos.bedGraph\n\n    genomeCoverageBed \\\n                     -bg \\\n                     -strand - \\\n                     -g hg38 \\\n                     -ibam ${bam_file} \\\n                     > ${name}.tmp.neg.bedGraph\n\n     awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' ${name}.tmp.neg.bedGraph \\\n        > ${name}.neg.bedGraph\n        rm ${name}.tmp.neg.bedGraph\n\n    cat ${name}.pos.bedGraph \\\n        ${name}.neg.bedGraph \\\n        > ${name}.unsorted.bedGraph\n\n    sortBed \\\n             -i ${name}.unsorted.bedGraph \\\n             > ${name}.bedGraph\n\n    rm ${name}.unsorted.bedGraph\n\n    python ${params.rcc} \\\n        ${name}.bedGraph \\\n        ${millions_mapped} \\\n        ${name}.rcc.bedGraph \\\n\n    python ${params.rcc} \\\n        ${name}.pos.bedGraph \\\n        ${millions_mapped} \\\n        ${name}.unsorted.pos.rcc.bedGraph\n\n    sortBed -i ${name}.unsorted.pos.rcc.bedGraph > ${name}.pos.rcc.bedGraph\n    rm ${name}.unsorted.pos.rcc.bedGraph\n\n    python ${params.rcc} \\\n        ${name}.neg.bedGraph \\\n        ${millions_mapped} \\\n        ${name}.unsorted.neg.rcc.bedGraph\n\n    sortBed -i ${name}.unsorted.neg.rcc.bedGraph > ${name}.neg.rcc.bedGraph\n    rm ${name}.unsorted.neg.rcc.bedGraph\n\n    \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sorted_bams_for_bedtools_bedgraph",
            "sorted_bam_indices_for_bedtools_bedgraph",
            "bam_milmapped_bedgraph"
        ],
        "nb_inputs": 3,
        "outputs": [
            "non_normalized_bedgraphs",
            "bedgraph_tdf",
            "bedgraph_bigwig_pos",
            "bedgraph_bigwig_neg"
        ],
        "nb_outputs": 4,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0,143",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/mapped/bedgraphs\", mode: 'copy', pattern: \"*{neg,pos}.bedGraph\"",
            "publishDir \"${params.outdir}/mapped/bedgraphs\", mode: 'copy', pattern: \"${name}.bedGraph\"",
            "publishDir \"${params.outdir}/mapped/rcc_bedgraphs\", mode: 'copy', pattern: \"${name}.rcc.bedGraph\""
        ],
        "when": "",
        "stub": ""
    },
    "make_chromosome_sizes": {
        "name_process": "make_chromosome_sizes",
        "string_process": " process make_chromosome_sizes {\n      tag \"$fasta\"\n      publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir },\n              saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n      input:\n      file fasta from genome_fasta\n\n      output:\n      file(\"${fasta}.sizes\") into chrom_sizes_ch\n\n      script:\n      \"\"\"\n      samtools faidx $fasta\n      cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n      \"\"\"\n  }",
        "nb_lignes_process": 15,
        "string_script": "      \"\"\"\n      samtools faidx $fasta\n      cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n      \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "genome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chrom_sizes_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$fasta\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "dreg_prep": {
        "name_process": "dreg_prep",
        "string_process": "\nprocess dreg_prep {\n    validExitStatus 0,143\n    errorStrategy 'ignore'\n    tag \"$name\"\n    publishDir \"${params.outdir}/mapped/dreg_input\", mode: 'copy', pattern: \"*.bw\"\n\n    input:\n    set val(name), file(bam_file) from sorted_bams_for_dreg_prep\n    file(chr_sizes) from chrom_sizes_for_bed\n\n    output:\n        set val(name), file(\"*.bw\") into dreg_bigwig\n\n    script:\n    \"\"\"\n\n    echo \"Creating BigWigs suitable as inputs to dREG\"\n\n    bedtools bamtobed -i ${bam_file} | awk 'BEGIN{OFS=\"\\t\"} (\\$5 > 0){print \\$0}' | \\\n    awk 'BEGIN{OFS=\"\\t\"} (\\$6 == \"+\") {print \\$1,\\$2,\\$2+1,\\$4,\\$5,\\$6}; (\\$6 == \"-\") {print \\$1, \\$3-1,\\$3,\\$4,\\$5,\\$6}' \\\n    > ${name}.dreg.bed\n    sortBed -i ${name}.dreg.bed > ${name}.dreg.sort.bed\n\n    echo positive strand processed to bedGraph\n\n    bedtools genomecov -bg -i ${name}.dreg.sort.bed -g ${chr_sizes} -strand + > ${name}.pos.bedGraph\n    sortBed -i ${name}.pos.bedGraph > ${name}.pos.sort.bedGraph\n    bedtools genomecov -bg -i ${name}.dreg.sort.bed -g ${chr_sizes} -strand - \\\n    | awk 'BEGIN{OFS=\"\\t\"} {print \\$1,\\$2,\\$3,-1*\\$4}' > ${name}.neg.bedGraph\n    sortBed -i ${name}.neg.bedGraph > ${name}.neg.sort.bedGraph\n\n    echo negative strand processed to bedGraph\n\n    ${params.bedGraphToBigWig} ${name}.pos.sort.bedGraph ${chr_sizes} ${name}.pos.bw\n    ${params.bedGraphToBigWig} ${name}.neg.sort.bedGraph ${chr_sizes} ${name}.neg.bw\n\n    echo bedGraph to bigwig done\n    \"\"\"\n }",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n\n    echo \"Creating BigWigs suitable as inputs to dREG\"\n\n    bedtools bamtobed -i ${bam_file} | awk 'BEGIN{OFS=\"\\t\"} (\\$5 > 0){print \\$0}' | \\\n    awk 'BEGIN{OFS=\"\\t\"} (\\$6 == \"+\") {print \\$1,\\$2,\\$2+1,\\$4,\\$5,\\$6}; (\\$6 == \"-\") {print \\$1, \\$3-1,\\$3,\\$4,\\$5,\\$6}' \\\n    > ${name}.dreg.bed\n    sortBed -i ${name}.dreg.bed > ${name}.dreg.sort.bed\n\n    echo positive strand processed to bedGraph\n\n    bedtools genomecov -bg -i ${name}.dreg.sort.bed -g ${chr_sizes} -strand + > ${name}.pos.bedGraph\n    sortBed -i ${name}.pos.bedGraph > ${name}.pos.sort.bedGraph\n    bedtools genomecov -bg -i ${name}.dreg.sort.bed -g ${chr_sizes} -strand - \\\n    | awk 'BEGIN{OFS=\"\\t\"} {print \\$1,\\$2,\\$3,-1*\\$4}' > ${name}.neg.bedGraph\n    sortBed -i ${name}.neg.bedGraph > ${name}.neg.sort.bedGraph\n\n    echo negative strand processed to bedGraph\n\n    ${params.bedGraphToBigWig} ${name}.pos.sort.bedGraph ${chr_sizes} ${name}.pos.bw\n    ${params.bedGraphToBigWig} ${name}.neg.sort.bedGraph ${chr_sizes} ${name}.neg.bw\n\n    echo bedGraph to bigwig done\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "sorted_bams_for_dreg_prep",
            "chrom_sizes_for_bed"
        ],
        "nb_inputs": 2,
        "outputs": [
            "dreg_bigwig"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0,143",
            "errorStrategy 'ignore'",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/mapped/dreg_input\", mode: 'copy', pattern: \"*.bw\""
        ],
        "when": "",
        "stub": ""
    },
    "normalized_bigwigs": {
        "name_process": "normalized_bigwigs",
        "string_process": "\nprocess normalized_bigwigs {\n    validExitStatus 0\n    tag \"$name\"\n    publishDir \"${params.outdir}/mapped/rcc_bigwig\", mode: 'copy'\n\n    input:\n    set val(name), file(neg_bedgraph) from bedgraph_bigwig_neg\n    set val(name), file(pos_bedgraph) from bedgraph_bigwig_pos\n    file chrom_sizes from chrom_sizes_for_bigwig\n\n    output:\n    set val(name), file(\"*.rcc.bw\") into normalized_bigwig\n\n    script:\n    \"\"\"\n    ${params.bedGraphToBigWig} ${pos_bedgraph} ${chrom_sizes} ${name}.pos.rcc.bw\n    ${params.bedGraphToBigWig} ${neg_bedgraph} ${chrom_sizes} ${name}.neg.rcc.bw\n\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    ${params.bedGraphToBigWig} ${pos_bedgraph} ${chrom_sizes} ${name}.pos.rcc.bw\n    ${params.bedGraphToBigWig} ${neg_bedgraph} ${chrom_sizes} ${name}.neg.rcc.bw\n\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bedgraph_bigwig_neg",
            "bedgraph_bigwig_pos",
            "chrom_sizes_for_bigwig"
        ],
        "nb_inputs": 3,
        "outputs": [
            "normalized_bigwig"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/mapped/rcc_bigwig\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "igvtools": {
        "name_process": "igvtools",
        "string_process": "\nprocess igvtools {\n    tag \"$name\"\n                                                                             \n                                              \n    errorStrategy 'ignore'\n    publishDir \"${params.outdir}/mapped/tdfs\", mode: 'copy', pattern: \"*.tdf\"\n\n    input:\n    set val(name), file(normalized_bg) from bedgraph_tdf\n    file chrom_sizes from chrom_sizes_for_igv\n\n    output:\n    set val(name), file(\"*.tdf\") into tiled_data_ch\n\n    script:\n    \"\"\"\n    export LC_ALL=C\n    igvtools toTDF ${normalized_bg} ${name}.rcc.tdf ${chrom_sizes}\n    \"\"\"\n }",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    export LC_ALL=C\n    igvtools toTDF ${normalized_bg} ${name}.rcc.tdf ${chrom_sizes}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "IGVtools"
        ],
        "tools_url": [
            "https://bio.tools/igvtools"
        ],
        "tools_dico": [
            {
                "name": "IGVtools",
                "uri": "https://bio.tools/igvtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0256",
                                    "term": "Sequence feature comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0256",
                                    "term": "Feature comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0256",
                                    "term": "Feature table comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The igvtools utility provides a set of tools for pre-processing data files.",
                "homepage": "https://software.broadinstitute.org/software/igv/igvtools"
            }
        ],
        "inputs": [
            "bedgraph_tdf",
            "chrom_sizes_for_igv"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tiled_data_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "tag \"$name\"",
            "errorStrategy 'ignore'",
            "publishDir \"${params.outdir}/mapped/tdfs\", mode: 'copy', pattern: \"*.tdf\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    validExitStatus 0,1,143\n    errorStrategy 'ignore'\n    publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"multiqc_report.html\"\n    publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"*_data\"\n\n    when:\n    !params.skipMultiQC\n\n    input:\n    file multiqc_config from ch_multiqc_config.collect()\n    file (fastqc:'qc/fastqc/*') from fastqc_results.collect()\n    file ('qc/fastqc/*') from trimmed_fastqc_results.collect()\n    file ('qc/trimstats/*') from trim_stats.collect()\n    file ('qc/mapstats/*') from bam_flagstat.collect()\n    file ('qc/rseqc/*') from rseqc_results.collect()\n    file ('qc/preseq/*') from preseq_results.collect()\n    file ('software_versions/*') from software_versions_yaml\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\" into multiqc_report_files\n\n    script:\n    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n\n\n    \"\"\"\n    export PATH=~/.local/bin:$PATH\n\n    multiqc . -f $rtitle $rfilename --config $multiqc_config\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n\n\n    \"\"\"\n    export PATH=~/.local/bin:$PATH\n\n    multiqc . -f $rtitle $rfilename --config $multiqc_config\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "fastqc_results",
            "trimmed_fastqc_results",
            "trim_stats",
            "bam_flagstat",
            "rseqc_results",
            "preseq_results",
            "software_versions_yaml"
        ],
        "nb_inputs": 8,
        "outputs": [
            "multiqc_report",
            "multiqc_report_files"
        ],
        "nb_outputs": 2,
        "name_workflow": "nf-core__nascent",
        "directive": [
            "validExitStatus 0,1,143",
            "errorStrategy 'ignore'",
            "publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"multiqc_report.html\"",
            "publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"*_data\""
        ],
        "when": "!params.skipMultiQC",
        "stub": ""
    }
}
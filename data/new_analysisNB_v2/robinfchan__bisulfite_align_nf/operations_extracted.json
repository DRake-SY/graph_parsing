{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(params.bismark_index, checkIfExists: true)\n        .ifEmpty { exit 1, \"Bismark index files not found: ${params.bismark_index}\" }\n        .into { ch_bismark_index_for_bismark_align; ch_bismark_index_for_bismark_methXtract }",
        "origin": [
            [
                "params.bismark_index, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bismark_index_for_bismark_align",
                "P"
            ],
            [
                "ch_bismark_index_for_bismark_methXtract",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .empty()\n        .into { ch_bismark_index_for_bismark_align; ch_bismark_index_for_bismark_methXtract }",
        "origin": [],
        "gives": [
            [
                "ch_bismark_index_for_bismark_align",
                "P"
            ],
            [
                "ch_bismark_index_for_bismark_methXtract",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\" }\n        .into { ch_read_files_for_fastqc; ch_read_files_for_trim_galore }",
        "origin": [
            [
                "params.reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_for_fastqc",
                "P"
            ],
            [
                "ch_read_files_for_trim_galore",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .fromFilePairs( params.reads, size: 2 )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\" }\n            .set { ch_read_files_for_trim_galore }",
        "origin": [
            [
                "params.reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_for_trim_galore",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_read_files_for_fastqc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_read_files_for_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n            .fromFilePairs( params.reads, size: 2 )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\" }\n            .set { ch_read_files_for_fastqc }",
        "origin": [
            [
                "params.reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_for_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_read_files_for_trim_galore = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_read_files_for_trim_galore",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_read_files_for_fastqc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_read_files_for_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "ch_read_files_for_trim_galore = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_read_files_for_trim_galore",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n        .fromFilePairs( params.trimmed_reads, size: 2 )\n        .ifEmpty { exit 1, \"Cannot find any trimmed reads in dir: ${params.trimmed_reads}\" }\n        .set { ch_trimmed_reads_for_alignment_preproc }",
        "origin": [
            [
                "params.trimmed_reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_trimmed_reads_for_alignment_preproc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_trimmed_reads_for_alignment_preproc = Channel.empty() }\n\n                                                                                      \nif( !params.skip_dedup || !params.skip_extract ) {",
        "origin": [],
        "gives": [
            [
                "ch_trimmed_reads_for_alignment_preproc",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n        .fromFilePairs( params.bams, size: 1 )\n        .ifEmpty { exit 1, \"Cannot find any bams in: ${params.bams}\" }\n        .set { ch_bam_for_bismark_deduplicate_preproc }",
        "origin": [
            [
                "params.bams, size: 1",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bam_for_bismark_deduplicate_preproc",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_bam_for_bismark_deduplicate_preproc = Channel.empty() }\n\n\n                     \ndef summary = [:]\nsummary['Run Name']         = workflow.runName\nif(params.reads)            summary['Reads'] = params.reads\nif(params.trimmed_reads)    summary['Trimmed Reads'] = params.trimmed_reads\nif(params.bams)             summary['BAMs'] = params.bams\nif(params.bismark_index)    summary['Bismark Index'] = params.bismark_index\nif(params.skip_fastqc || params.skip_trim || params.trimmed_reads)    summary['Skip FastQC'] = \"Yes\"\nif(params.skip_trim || params.trimmed_reads) summary['Skip Trim Galore!'] = \"Yes\"\nif(params.skip_align || params.bams)  summary['Skip Align'] = \"Yes\"\nif(params.rrbs || params.skip_dedup) summary['Skip Deduplication'] = \"Yes\"\nif(params.skip_extract) summary['Skip mC Extract'] = \"Yes\"\nif(params.rrbs)             summary['RRBS Mode'] = 'On'\nif(params.nugen)            summary['Nugen Trim Mode'] = 'On'\nif(params.truseq_epi)       summary['Trimming Profile'] = 'TruSeq Epigenome'\nif(params.single_cell && !params.nugen)     summary['Trimming Profile'] = 'Single Cell'\nif(params.single_cell && params.nugen)      summary['Trimming Profile'] = 'Nugen Trim + Single Cell'\nsummary['Trimming']         = \"5'R1: $clip_r1 / 5'R2: $clip_r2 / 3'R1: $three_prime_clip_r1 / 3'R2: $three_prime_clip_r2\"\nif(params.adapter1)         summary['Adapter 1 Seq'] = params.adapter1\nif(params.adapter2)         summary['Adapter 2 Seq'] = params.adapter2\nif(params.min_insert)       summary['Min. Insert Len.'] = params.min_insert\nif (params.comprehensive ) { ",
        "origin": [],
        "gives": [
            [
                "ch_bam_for_bismark_deduplicate_preproc",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "ch_fastqc_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_fastqc_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "ch_trimmed_reads_for_alignment = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_trimmed_reads_for_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "ch_trim_galore_results_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_trim_galore_results_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "ch_nugen_trimmed_reads_for_alignment = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_nugen_trimmed_reads_for_alignment",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "ch_bam_for_bismark_deduplicate = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_bam_for_bismark_deduplicate",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ch_bam_for_bismark_summary = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_bam_for_bismark_summary",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "ch_bam_for_preseq = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_bam_for_preseq",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "ch_bismark_align_log_for_bismark_report = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_align_log_for_bismark_report",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "ch_bismark_align_log_for_bismark_summary = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_align_log_for_bismark_summary",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "ch_bismark_align_log_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_align_log_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "ch_bismark_dedup_log_for_bismark_report = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_bismark_report",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "ch_bismark_dedup_log_for_bismark_summary = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_bismark_summary",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "ch_bismark_dedup_log_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "ch_bismark_dedup_log_for_bismark_report = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_bismark_report",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "ch_bismark_dedup_log_for_bismark_summary = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_bismark_summary",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "ch_bismark_dedup_log_for_multiqc = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_bismark_dedup_log_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_31": {
        "string": "ch_bam_for_bismark_deduplicate.into { ch_bam_dedup_for_bismark_methXtract; ch_bam_dedup_for_qualimap }",
        "origin": [
            [
                "ch_bam_for_bismark_deduplicate",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_dedup_for_bismark_methXtract",
                "P"
            ],
            [
                "ch_bam_dedup_for_qualimap",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "ch_bam_for_bismark_deduplicate_preproc.into { ch_bam_dedup_for_bismark_methXtract; ch_bam_dedup_for_qualimap }",
        "origin": [
            [
                "ch_bam_for_bismark_deduplicate_preproc",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bam_dedup_for_bismark_methXtract",
                "P"
            ],
            [
                "ch_bam_dedup_for_qualimap",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "ch_bismark_align_log_for_bismark_report\n        .join(ch_bismark_dedup_log_for_bismark_report)\n        .join(ch_bismark_splitting_report_for_bismark_report)\n        .join(ch_bismark_mbias_for_bismark_report)\n        .set{ ch_bismark_logs_for_bismark_report }",
        "origin": [
            [
                "ch_bismark_align_log_for_bismark_report",
                "P"
            ],
            [
                "ch_bismark_dedup_log_for_bismark_report",
                "P"
            ],
            [
                "ch_bismark_splitting_report_for_bismark_report",
                "P"
            ],
            [
                "ch_bismark_mbias_for_bismark_report",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_bismark_logs_for_bismark_report",
                "P"
            ]
        ]
    }
}
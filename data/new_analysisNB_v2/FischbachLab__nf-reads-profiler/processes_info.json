{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n\n\t                                                                             \n\t                                                                             \n    container params.docker_container_biobakery\n\n\toutput:\n\tfile \"software_versions_mqc.yaml\" into software_versions_yaml\n\n\tscript:\n\t                                                                            \n\t                                                                                    \n\t                                                                              \n\t                                                                                \n\t                                                                     \n\t\"\"\"\n\techo $workflow.manifest.version > v_pipeline.txt\n\techo $workflow.nextflow.version > v_nextflow.txt\n\n\tmetaphlan --version > v_metaphlan.txt\n\thumann --version > v_humann.txt\n\t\t\n\techo $params.docker_container_qiime2 | cut -d: -f 2 > v_qiime.txt\n\techo $params.docker_container_multiqc | cut -d: -f 2 > v_multiqc.txt\n\t\n\tscrape_software_versions.py > software_versions_mqc.yaml\n\t\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\t\"\"\"\n\techo $workflow.manifest.version > v_pipeline.txt\n\techo $workflow.nextflow.version > v_nextflow.txt\n\n\tmetaphlan --version > v_metaphlan.txt\n\thumann --version > v_humann.txt\n\t\t\n\techo $params.docker_container_qiime2 | cut -d: -f 2 > v_qiime.txt\n\techo $params.docker_container_multiqc | cut -d: -f 2 > v_multiqc.txt\n\t\n\tscrape_software_versions.py > software_versions_mqc.yaml\n\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "FischbachLab__nf-reads-profiler",
        "directive": [
            "container params.docker_container_biobakery"
        ],
        "when": "",
        "stub": ""
    },
    "merge_paired_end_cleaned": {
        "name_process": "merge_paired_end_cleaned",
        "string_process": "\nprocess merge_paired_end_cleaned {\n\n\ttag \"$name\"\n\tcontainer params.docker_container_bbmap\n\t\t\n\tinput:\n\ttuple val(name), file(reads) from reads_merge_paired_end_cleaned\n\t\n\toutput:\n\ttuple val(name), path(\"*_QCd.fq.gz\") into to_profile_taxa_merged\n\ttuple val(name), path(\"*_QCd.fq.gz\") into to_profile_functions_merged\n\t\n\twhen:\n\t!params.singleEnd\n\n   \tscript:\n\t\"\"\"\n\t# This step will have no logging because the information are not relevant\n\t# I will simply use a boilerplate YAML to record that this has happened\n\t# If the files were not compressed, they will be at this stage\n\t\n\t#Sets the maximum memory to the value requested in the config file\n    maxmem=\\$(echo \\\"$task.memory\\\" | sed 's/ //g' | sed 's/B//g')\n\n\treformat.sh -Xmx\\\"\\$maxmem\\\" in1=${reads[0]} in2=${reads[1]} out=${name}_QCd.fq.gz threads=${task.cpus}\n\t\"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\t\"\"\"\n\t# This step will have no logging because the information are not relevant\n\t# I will simply use a boilerplate YAML to record that this has happened\n\t# If the files were not compressed, they will be at this stage\n\t\n\t#Sets the maximum memory to the value requested in the config file\n    maxmem=\\$(echo \\\"$task.memory\\\" | sed 's/ //g' | sed 's/B//g')\n\n\treformat.sh -Xmx\\\"\\$maxmem\\\" in1=${reads[0]} in2=${reads[1]} out=${name}_QCd.fq.gz threads=${task.cpus}\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_merge_paired_end_cleaned"
        ],
        "nb_inputs": 1,
        "outputs": [
            "to_profile_taxa_merged",
            "to_profile_functions_merged"
        ],
        "nb_outputs": 2,
        "name_workflow": "FischbachLab__nf-reads-profiler",
        "directive": [
            "tag \"$name\"",
            "container params.docker_container_bbmap"
        ],
        "when": "!params.singleEnd",
        "stub": ""
    },
    "profile_taxa": {
        "name_process": "profile_taxa",
        "string_process": "\nprocess profile_taxa {\n\n    tag \"$name\"\n\n\t                                \n    container params.docker_container_biobakery\n\n\tpublishDir \"${workingpath}/${params.prefix}/taxa\", mode: 'copy', pattern: \"*.{biom,tsv}\"\n\t\n\tinput:\n\ttuple val(name), file(reads) from to_profile_taxa.mix(to_profile_taxa_merged)\n\t\n\toutput:\n\ttuple val(name), path(\"*.biom\") into to_alpha_diversity\n\ttuple val(name), path(\"*_metaphlan_bugs_list.tsv\") into to_profile_function_bugs\n\tfile \"profile_taxa_mqc.yaml\" into profile_taxa_log\n\n\twhen:\n\t!params.rna\n\t\n\tscript:\n\t\"\"\"\n\tmetaphlan \\\\\n\t\t--input_type fastq \\\\\n\t\t--tmp_dir . \\\\\n\t\t--biom ${name}.biom \\\\\n\t\t--bowtie2out ${name}_bt2out.txt \\\\\n\t\t--bowtie2db ${params.metaphlan_db} \\\\\n\t\t--bt2_ps ${params.bt2options} \\\\\n\t\t--add_viruses \\\\\n\t\t--sample_id ${name} \\\\\n\t\t--nproc ${task.cpus} \\\\\n\t\t$reads \\\\\n\t\t${name}_metaphlan_bugs_list.tsv 1> profile_taxa_mqc.txt\n\t\n\t# MultiQC doesn't have a module for Metaphlan yet. As a consequence, I\n\t# had to create a YAML file with all the info I need via a bash script\n\tbash scrape_profile_taxa_log.sh ${name}_metaphlan_bugs_list.tsv > profile_taxa_mqc.yaml\n\t\"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "\t\"\"\"\n\tmetaphlan \\\\\n\t\t--input_type fastq \\\\\n\t\t--tmp_dir . \\\\\n\t\t--biom ${name}.biom \\\\\n\t\t--bowtie2out ${name}_bt2out.txt \\\\\n\t\t--bowtie2db ${params.metaphlan_db} \\\\\n\t\t--bt2_ps ${params.bt2options} \\\\\n\t\t--add_viruses \\\\\n\t\t--sample_id ${name} \\\\\n\t\t--nproc ${task.cpus} \\\\\n\t\t$reads \\\\\n\t\t${name}_metaphlan_bugs_list.tsv 1> profile_taxa_mqc.txt\n\t\n\t# MultiQC doesn't have a module for Metaphlan yet. As a consequence, I\n\t# had to create a YAML file with all the info I need via a bash script\n\tbash scrape_profile_taxa_log.sh ${name}_metaphlan_bugs_list.tsv > profile_taxa_mqc.yaml\n\t\"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "to_profile_taxa",
            "to_profile_taxa_merged"
        ],
        "nb_inputs": 2,
        "outputs": [
            "to_alpha_diversity",
            "to_profile_function_bugs",
            "profile_taxa_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "FischbachLab__nf-reads-profiler",
        "directive": [
            "tag \"$name\"",
            "container params.docker_container_biobakery",
            "publishDir \"${workingpath}/${params.prefix}/taxa\", mode: 'copy', pattern: \"*.{biom,tsv}\""
        ],
        "when": "!params.rna",
        "stub": ""
    },
    "profile_function": {
        "name_process": "profile_function",
        "string_process": "\nprocess profile_function {\n\t\n    tag \"$name\"\n\n\t                                \n    container params.docker_container_biobakery\n\n\tpublishDir {params.rna ? \"${workingpath}/${params.prefix}/function/metaT\" : \"${workingpath}/${params.prefix}/function/metaG\" }, mode: 'copy', pattern: \"*.{tsv,log}\"\n\t\n\tinput:\n\ttuple val(name), file(reads) from to_profile_functions.mix(to_profile_functions_merged)\n\ttuple val(name), file(metaphlan_bug_list) from to_profile_function_bugs.mix(custom_taxa_profile)\n\t\n    output:\n\tfile \"*_HUMAnN.log\"\n\tfile \"*_genefamilies.tsv\"\n\tfile \"*_pathcoverage.tsv\"\n\tfile \"*_pathabundance.tsv\"\n\tfile \"profile_functions_mqc.yaml\" into profile_functions_log\n\n\tscript:\n\t\"\"\"\n\thead -n 3 ${metaphlan_bug_list}\n\tls -lhtr ${metaphlan_bug_list}\n\t#HUMAnN will use the list of species detected by the profile_taxa process\n\thumann \\\\\n\t\t--input $reads \\\\\n\t\t--output . \\\\\n\t\t--output-basename ${name} \\\\\n\t\t--taxonomic-profile ${metaphlan_bug_list} \\\\\n\t\t--nucleotide-database ${params.chocophlan} \\\\\n\t\t--protein-database ${params.uniref} \\\\\n\t\t--pathways metacyc \\\\\n\t\t--threads ${task.cpus} \\\\\n\t\t--memory-use minimum &> ${name}_HUMAnN.log \n\t\n\t# MultiQC doesn't have a module for humann yet. As a consequence, I\n\t# had to create a YAML file with all the info I need via a bash script\n\tbash scrape_profile_functions.sh ${name} ${name}_HUMAnN.log > profile_functions_mqc.yaml\n \t\"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "\t\"\"\"\n\thead -n 3 ${metaphlan_bug_list}\n\tls -lhtr ${metaphlan_bug_list}\n\t#HUMAnN will use the list of species detected by the profile_taxa process\n\thumann \\\\\n\t\t--input $reads \\\\\n\t\t--output . \\\\\n\t\t--output-basename ${name} \\\\\n\t\t--taxonomic-profile ${metaphlan_bug_list} \\\\\n\t\t--nucleotide-database ${params.chocophlan} \\\\\n\t\t--protein-database ${params.uniref} \\\\\n\t\t--pathways metacyc \\\\\n\t\t--threads ${task.cpus} \\\\\n\t\t--memory-use minimum &> ${name}_HUMAnN.log \n\t\n\t# MultiQC doesn't have a module for humann yet. As a consequence, I\n\t# had to create a YAML file with all the info I need via a bash script\n\tbash scrape_profile_functions.sh ${name} ${name}_HUMAnN.log > profile_functions_mqc.yaml\n \t\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "to_profile_functions",
            "to_profile_functions_merged",
            "to_profile_function_bugs",
            "custom_taxa_profile"
        ],
        "nb_inputs": 4,
        "outputs": [
            "profile_functions_log"
        ],
        "nb_outputs": 1,
        "name_workflow": "FischbachLab__nf-reads-profiler",
        "directive": [
            "tag \"$name\"",
            "container params.docker_container_biobakery",
            "publishDir {params.rna ? \"${workingpath}/${params.prefix}/function/metaT\" : \"${workingpath}/${params.prefix}/function/metaG\" }, mode: 'copy', pattern: \"*.{tsv,log}\""
        ],
        "when": "",
        "stub": ""
    },
    "alpha_diversity": {
        "name_process": "alpha_diversity",
        "string_process": "\nprocess alpha_diversity {\n\n    tag \"$name\"\n\n\tcontainer params.docker_container_qiime2\n\n\tpublishDir \"${workingpath}/${params.prefix}/alpha_diversity\", mode: 'copy', pattern: \"*.{tsv}\"\n\t\n\tinput:\n\ttuple val(name), file(metaphlan_bug_list) from to_alpha_diversity\n\t\t\n    output:\n\tfile \"*_alpha_diversity.tsv\"\n\tfile \"alpha_diversity_mqc.yaml\" into alpha_diversity_log\n\n\twhen:\n\t!params.rna\n\n\tscript:\n\t\"\"\"\n\t#It checks if the profiling was successful, that is if identifies at least three species\n\tn=\\$(grep -o s__ $metaphlan_bug_list | wc -l  | cut -d\\\" \\\" -f 1)\n\tif (( n <= 3 )); then\n\t\t#The file should be created in order to be returned\n\t\ttouch ${name}_alpha_diversity.tsv \n\telse\n\t\techo $name > ${name}_alpha_diversity.tsv\n\t\tqiime tools import --input-path $metaphlan_bug_list --type 'FeatureTable[Frequency]' --input-format BIOMV100Format --output-path ${name}_abundance_table.qza\n\t\tfor alpha in ace berger_parker_d brillouin_d chao1 chao1_ci dominance doubles enspie esty_ci fisher_alpha gini_index goods_coverage heip_e kempton_taylor_q lladser_pe margalef mcintosh_d mcintosh_e menhinick michaelis_menten_fit osd pielou_e robbins shannon simpson simpson_e singles strong\n\t\tdo\n\t\t\tqiime diversity alpha --i-table ${name}_abundance_table.qza --p-metric \\$alpha --output-dir \\$alpha &> /dev/null\n\t\t\tqiime tools export --input-path \\$alpha/alpha_diversity.qza --output-path \\${alpha} &> /dev/null\n\t\t\tvalue=\\$(sed -n '2p' \\${alpha}/alpha-diversity.tsv | cut -f 2)\n\t\t    echo -e  \\$alpha'\\t'\\$value \n\t\tdone >> ${name}_alpha_diversity.tsv  \n\tfi\n\n\t# MultiQC doesn't have a module for qiime yet. As a consequence, I\n\t# had to create a YAML file with all the info I need via a bash script\n\tbash generate_alpha_diversity_log.sh \\${n} > alpha_diversity_mqc.yaml\t\n\t\"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "\t\"\"\"\n\t#It checks if the profiling was successful, that is if identifies at least three species\n\tn=\\$(grep -o s__ $metaphlan_bug_list | wc -l  | cut -d\\\" \\\" -f 1)\n\tif (( n <= 3 )); then\n\t\t#The file should be created in order to be returned\n\t\ttouch ${name}_alpha_diversity.tsv \n\telse\n\t\techo $name > ${name}_alpha_diversity.tsv\n\t\tqiime tools import --input-path $metaphlan_bug_list --type 'FeatureTable[Frequency]' --input-format BIOMV100Format --output-path ${name}_abundance_table.qza\n\t\tfor alpha in ace berger_parker_d brillouin_d chao1 chao1_ci dominance doubles enspie esty_ci fisher_alpha gini_index goods_coverage heip_e kempton_taylor_q lladser_pe margalef mcintosh_d mcintosh_e menhinick michaelis_menten_fit osd pielou_e robbins shannon simpson simpson_e singles strong\n\t\tdo\n\t\t\tqiime diversity alpha --i-table ${name}_abundance_table.qza --p-metric \\$alpha --output-dir \\$alpha &> /dev/null\n\t\t\tqiime tools export --input-path \\$alpha/alpha_diversity.qza --output-path \\${alpha} &> /dev/null\n\t\t\tvalue=\\$(sed -n '2p' \\${alpha}/alpha-diversity.tsv | cut -f 2)\n\t\t    echo -e  \\$alpha'\\t'\\$value \n\t\tdone >> ${name}_alpha_diversity.tsv  \n\tfi\n\n\t# MultiQC doesn't have a module for qiime yet. As a consequence, I\n\t# had to create a YAML file with all the info I need via a bash script\n\tbash generate_alpha_diversity_log.sh \\${n} > alpha_diversity_mqc.yaml\t\n\t\"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "QIIME",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/qiime",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "to_alpha_diversity"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alpha_diversity_log"
        ],
        "nb_outputs": 1,
        "name_workflow": "FischbachLab__nf-reads-profiler",
        "directive": [
            "tag \"$name\"",
            "container params.docker_container_qiime2",
            "publishDir \"${workingpath}/${params.prefix}/alpha_diversity\", mode: 'copy', pattern: \"*.{tsv}\""
        ],
        "when": "!params.rna",
        "stub": ""
    },
    "log": {
        "name_process": "log",
        "string_process": "\nprocess log {\n\t\n\tpublishDir \"${workingpath}/${params.prefix}/log\", mode: 'copy'\n\n    container params.docker_container_multiqc\n\n\tinput:\n\tfile multiqc_config from multiqc_config_ch\n\tfile workflow_summary from create_workflow_summary(summary)\n\tfile \"software_versions_mqc.yaml\" from software_versions_yaml\n\tfile \"merge_paired_end_cleaned_mqc.yaml\" from merge_paired_end_cleaned_log.ifEmpty([])\n\tfile \"profile_taxa_mqc.yaml\" from profile_taxa_log.ifEmpty([])\n\tfile \"profile_functions_mqc.yaml\" from profile_functions_log.ifEmpty([])\n\tfile \"alpha_diversity_mqc.yaml\" from alpha_diversity_log.ifEmpty([])\n\t\n\toutput:\n\tpath \"${params.prefix}_multiqc_report.html\" into multiqc_report\n\tpath \"${params.prefix}_multiqc_data\"\n\n\tscript:\n\t\"\"\"\n\tmultiqc --config $multiqc_config . -f\n\tmv multiqc_report.html ${params.prefix}_multiqc_report.html\n\tmv multiqc_data ${params.prefix}_multiqc_data\n\t\"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\t\"\"\"\n\tmultiqc --config $multiqc_config . -f\n\tmv multiqc_report.html ${params.prefix}_multiqc_report.html\n\tmv multiqc_data ${params.prefix}_multiqc_data\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_config_ch",
            "summary",
            "software_versions_yaml",
            "merge_paired_end_cleaned_log",
            "profile_taxa_log",
            "profile_functions_log",
            "alpha_diversity_log"
        ],
        "nb_inputs": 7,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "FischbachLab__nf-reads-profiler",
        "directive": [
            "publishDir \"${workingpath}/${params.prefix}/log\", mode: 'copy'",
            "container params.docker_container_multiqc"
        ],
        "when": "",
        "stub": ""
    }
}
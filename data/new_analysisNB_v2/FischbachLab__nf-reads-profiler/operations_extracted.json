{
    "OPERATION_1": {
        "string": "Channel\n\t\t.from([[params.prefix, [file(params.reads1)]]])\n\t\t.into { to_profile_taxa; to_profile_functions }",
        "origin": [],
        "gives": [
            [
                "to_profile_taxa",
                "P"
            ],
            [
                "to_profile_functions",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "reads_merge_paired_end_cleaned = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reads_merge_paired_end_cleaned",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "merge_paired_end_cleaned_log = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "merge_paired_end_cleaned_log",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n\t\t.from([[params.prefix, [file(params.reads1), file(params.reads2)]]] )\n\t\t.set { reads_merge_paired_end_cleaned }",
        "origin": [],
        "gives": [
            [
                "reads_merge_paired_end_cleaned",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "merge_paired_end_cleaned_log = Channel.from(file(\"$baseDir/assets/merge_paired_end_cleaned_mqc.yaml\"))",
        "origin": [],
        "gives": [
            [
                "merge_paired_end_cleaned_log",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "to_profile_taxa = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "to_profile_taxa",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "to_profile_functions = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "to_profile_functions",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n\t\t.from([[params.prefix, file(params.taxonomic_profile)]])\n\t\t.set{ custom_taxa_profile }",
        "origin": [],
        "gives": [
            [
                "custom_taxa_profile",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "custom_taxa_profile = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "custom_taxa_profile",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n\t.fromPath(params.multiqc_config)\n\t.set {multiqc_config_ch}",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "multiqc_config_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "summary.collect { k,v -> \"${k.padRight(27)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
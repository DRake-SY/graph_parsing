{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.input, checkIfExists: true)\n    .splitCsv(header:true, sep:',')\n    .map { row -> [ row.sample_id, [ file(row.fastq_1, checkIfExists: true), file(row.fastq_2, checkIfExists: true) ] ] }\n    .into {  ch_raw_reads_fastqc;\n            ch_raw_reads_trim }",
        "origin": [
            [
                "params.input, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_raw_reads_fastqc",
                "P"
            ],
            [
                "ch_raw_reads_trim",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_blacklist = Channel.fromPath(params.blacklist, checkIfExists: true) } else { ch_blacklist = Channel.empty() }\n\nif (params.fasta) {",
        "origin": [
            [
                "params.blacklist, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_blacklist",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(bt2_dir, checkIfExists: true)\n        .set { ch_bt2_index }",
        "origin": [
            [
                "bt2_dir, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_bt2_index",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'cutrun-nextflow-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'cutrun_nextflow Workflow Summary'\n    section_href: 'https://github.com/khigashi1987/CUTRUN_Nextflow'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "summary.collect { k,v -> \"${k.padRight(20)}: $v\" }.join('\\n')",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_6": {
        "string": "ch_filtered_bam.into {ch_filtered_bam_macs; ch_filtered_bam_filter_macs; ch_filtered_bam_flagstat; ch_filtered_bam_bedgraph; ch_filtered_bam_bigwig}",
        "origin": [
            [
                "ch_filtered_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_filtered_bam_macs",
                "P"
            ],
            [
                "ch_filtered_bam_filter_macs",
                "P"
            ],
            [
                "ch_filtered_bam_flagstat",
                "P"
            ],
            [
                "ch_filtered_bam_bedgraph",
                "P"
            ],
            [
                "ch_filtered_bam_bigwig",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_genome_filter_regions.into {ch_genome_filter_regions_macs; ch_genome_filter_regions_seacr}",
        "origin": [
            [
                "ch_genome_filter_regions",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_genome_filter_regions_macs",
                "P"
            ],
            [
                "ch_genome_filter_regions_seacr",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_macs_peaks.into {ch_filtered_macs_peaks_qc; ch_filtered_macs_peaks_annot}",
        "origin": [
            [
                "ch_macs_peaks",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_filtered_macs_peaks_qc",
                "P"
            ],
            [
                "ch_filtered_macs_peaks_annot",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "ch_seacr_peaks.into {ch_filtered_seacr_peaks; ch_filtered_seacr_peaks_annot}",
        "origin": [
            [
                "ch_seacr_peaks",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_filtered_seacr_peaks",
                "P"
            ],
            [
                "ch_filtered_seacr_peaks_annot",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_dedup_bam = ch_sorted_bam",
        "origin": [
            [
                "ch_sorted_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dedup_bam",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_filtered_bam = ch_dedup_bam",
        "origin": [
            [
                "ch_dedup_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_filtered_bam",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "ch_genome_filter_regions_macs = ch_genome_filter_regions",
        "origin": [
            [
                "ch_genome_filter_regions",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_genome_filter_regions_macs",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_genome_filter_regions_seacr = ch_genome_filter_regions",
        "origin": [
            [
                "ch_genome_filter_regions",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_genome_filter_regions_seacr",
                "P"
            ]
        ]
    }
}
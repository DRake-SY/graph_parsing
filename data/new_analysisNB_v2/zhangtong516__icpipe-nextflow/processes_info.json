{
    "collapse_reads": {
        "name_process": "collapse_reads",
        "string_process": "\nprocess collapse_reads {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/01_collapsedFastq/\", mode: 'copy'\n\n    input:\n    set val(name), file(fastq_gz) from ch_reads\n\n    output:\n    set val(name), file(\"*.collapsed.fq.gz\") into collapsed_reads\n    set val(name), file(\"*.collapsed.read_counts.txt\") into collapsed_read_count\n\n    script:\n    \"\"\"\n    bash ${baseDir}/scripts/collapse_reads.sh ${fastq_gz} ${name}.collapsed.fq.gz ${task.cpus} ${params.trimLength} ${params.minLength}\n    zcat ${fastq_gz} | wc -l | awk '{print \"raw_reads\\t\" \\$1/4}' > ${name}.collapsed.read_counts.txt\n    zcat  ${name}.collapsed.fq.gz | wc -l | awk '{print \"collapsed_reads\\t\"\\$1/4}' >> ${name}.collapsed.read_counts.txt\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bash ${baseDir}/scripts/collapse_reads.sh ${fastq_gz} ${name}.collapsed.fq.gz ${task.cpus} ${params.trimLength} ${params.minLength}\n    zcat ${fastq_gz} | wc -l | awk '{print \"raw_reads\\t\" \\$1/4}' > ${name}.collapsed.read_counts.txt\n    zcat  ${name}.collapsed.fq.gz | wc -l | awk '{print \"collapsed_reads\\t\"\\$1/4}' >> ${name}.collapsed.read_counts.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "collapsed_reads",
            "collapsed_read_count"
        ],
        "nb_outputs": 2,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/01_collapsedFastq/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trim_adaptor": {
        "name_process": "trim_adaptor",
        "string_process": "\nprocess trim_adaptor {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/02_trimmedFastq/\", mode: 'copy'\n    input:\n    set val(name), file(collapsed_reads_fastq_gz) from collapsed_reads\n\n    output:\n    set val(name), file(\"*.collapsed.trimmed.fastq.gz\") into trimmed_reads\n    set val(name), file(\"*.trimmed.read_counts.txt\") into trimmed_read_count\n    file(\"*.read.trim.log.sum\")\n    file(\"*.trimAdaptor.log\")\n\n    script:\n    \"\"\"\n    cutadapt -j ${task.cpus} -n 2 -a ${params.adp1} -g ${params.adp2} -m ${params.minLength} \\\n        ${collapsed_reads_fastq_gz}  -o ${name}.collapsed.trimmed.fastq.gz  > ${name}.trimAdaptor.log\n\n    perl ${baseDir}/scripts/parse_trim_log.pl ${name}.trimAdaptor.log  > ${name}.read.trim.log.sum\n\n    zcat ${name}.collapsed.trimmed.fastq.gz | wc -l | awk '{print \"trimmed_reads\\t\"\\$1/4}' > ${name}.trimmed.read_counts.txt\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    cutadapt -j ${task.cpus} -n 2 -a ${params.adp1} -g ${params.adp2} -m ${params.minLength} \\\n        ${collapsed_reads_fastq_gz}  -o ${name}.collapsed.trimmed.fastq.gz  > ${name}.trimAdaptor.log\n\n    perl ${baseDir}/scripts/parse_trim_log.pl ${name}.trimAdaptor.log  > ${name}.read.trim.log.sum\n\n    zcat ${name}.collapsed.trimmed.fastq.gz | wc -l | awk '{print \"trimmed_reads\\t\"\\$1/4}' > ${name}.trimmed.read_counts.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "collapsed_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_reads",
            "trimmed_read_count"
        ],
        "nb_outputs": 2,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/02_trimmedFastq/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mapping_rRNA": {
        "name_process": "mapping_rRNA",
        "string_process": "\nprocess mapping_rRNA {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/03_rRNA/\", mode: 'copy'\n\n    input:\n    set val(name), file(trimmed_reads_fastq_gz) from trimmed_reads\n\n    output:\n    set val(name), file(\"*.collapsed.trimmed.remove_rRNA.fastq\") into removed_rRNA_fq\n    set val(name), file(\"*.collapsed.trimmed.map_rRNA.sam\") into mapped_rRNA_sam\n    file(\"*.collapsed.trimmed.map_rRNA.log\")\n\n\n    script:\n    \"\"\"\n    icSHAPE-pipe cleanFq -i ${trimmed_reads_fastq_gz} -o ${name}.collapsed.trimmed.remove_rRNA.fastq \\\n        -x ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA \\\n        -p ${task.cpus} --mode Local \\\n        --sam ${name}.collapsed.trimmed.map_rRNA.sam 2> \\\n        ${name}.collapsed.trimmed.map_rRNA.log\n\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    icSHAPE-pipe cleanFq -i ${trimmed_reads_fastq_gz} -o ${name}.collapsed.trimmed.remove_rRNA.fastq \\\n        -x ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA \\\n        -p ${task.cpus} --mode Local \\\n        --sam ${name}.collapsed.trimmed.map_rRNA.sam 2> \\\n        ${name}.collapsed.trimmed.map_rRNA.log\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "removed_rRNA_fq",
            "mapped_rRNA_sam"
        ],
        "nb_outputs": 2,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/03_rRNA/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mapping_smallRNA": {
        "name_process": "mapping_smallRNA",
        "string_process": "\nprocess mapping_smallRNA {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/04_smallRNA/\", mode: 'copy'\n\n    input:\n    set val(name), file(rm_rRNA_fastq) from removed_rRNA_fq\n\n    output:\n    set val(name), file(\"*.collapsed.trimmed.remove_rRNA_smallRNA.fastq\") into removed_smallRNA_fq\n    set val(name), file(\"*.collapsed.trimmed.map_smallRNA.sam\") into mapped_smallRNA_sam\n    file(\"*.collapsed.trimmed.map_smallRNA.log\")\n\n\n    script:\n    \"\"\"\n    icSHAPE-pipe cleanFq -i ${rm_rRNA_fastq} -o ${name}.collapsed.trimmed.remove_rRNA_smallRNA.fastq \\\n        -x ${params.genome_dir}/smallRNA/smallRNA \\\n        -p ${task.cpus} --mode Local \\\n        --sam ${name}.collapsed.trimmed.map_smallRNA.sam 2> \\\n        ${name}.collapsed.trimmed.map_smallRNA.log\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    icSHAPE-pipe cleanFq -i ${rm_rRNA_fastq} -o ${name}.collapsed.trimmed.remove_rRNA_smallRNA.fastq \\\n        -x ${params.genome_dir}/smallRNA/smallRNA \\\n        -p ${task.cpus} --mode Local \\\n        --sam ${name}.collapsed.trimmed.map_smallRNA.sam 2> \\\n        ${name}.collapsed.trimmed.map_smallRNA.log\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "removed_rRNA_fq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "removed_smallRNA_fq",
            "mapped_smallRNA_sam"
        ],
        "nb_outputs": 2,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/04_smallRNA/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "star_mapping_genome": {
        "name_process": "star_mapping_genome",
        "string_process": "\nprocess star_mapping_genome {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/05_mappedResult/\", mode: 'copy'\n\n    input:\n    set val(name), file(rm_smallRNA_fastq) from removed_smallRNA_fq\n\n    output:\n    set val(name), file(\"*.map_genome.sorted.bam\") into mapped_bam_for_fpkm\n    set val(name), file(\"*.map_genome.sorted.bam\") into mapped_bam_for_sam2tab\n    set val(name), file(\"*.map_genome.sorted.bam\") into mapped_bam_for_coverage\n    set val(name), file(\"*.map_genome.unsorted.bam\") into unsorted_bam\n    set val(name), file(\"*.map_genome.Log.progress.out\") into log_progress\n    set val(name), file(\"*.map_genome.Log.final.out\") into log_final\n    set val(name), file(\"*.map_genome.Log.out\") into log_out\n    set val(name), file(\"*.map_genome.Log.std.out\") into log_std\n\n\n    script:\n    \"\"\"\n    STAR --readFilesIn ${rm_smallRNA_fastq} \\\n        --outFileNamePrefix ${name}.map_genome. \\\n        --genomeDir ${params.genome_dir}/star \\\n        --runThreadN ${task.cpus} \\\n        --genomeLoad NoSharedMemory \\\n        --runMode alignReads \\\n        --outSAMtype BAM Unsorted \\\n        --outSAMmultNmax 1 \\\n        --outFilterMultimapNmax 1 \\\n        --outFilterMismatchNmax 2 \\\n        --outFilterIntronMotifs RemoveNoncanonicalUnannotated \\\n        --outSAMstrandField intronMotif \\\n        --outSJfilterOverhangMin 30 12 12 12 \\\n        --alignEndsType EndToEnd \\\n        --outSAMattributes All \\\n        --outSAMunmapped Within \\\n        --alignIntronMin 20 \\\n        --alignIntronMax 1000000 \\\n        --alignMatesGapMax 1000000 \\\n        --alignSJDBoverhangMin 1 \\\n        --outStd BAM_Unsorted > ${name}.map_genome.unsorted.bam\n\n    samtools view -h ${name}.map_genome.unsorted.bam |\\\n        awk '\\$0~/^@/{print \\$0}\\$0!~/^@/{for(i=12;i<NF;i++){if(substr(\\$i,1,4)==\"MD:Z\"){if(and(16,\\$2)==0){ if(\\$i!~/^MD:Z:0/ ) print \\$0; }else{if(\\$i!~/^MD:Z:.*0\\$/) print \\$0; }}}}' |\\\n        samtools view --threads ${task.cpus} -bh - |\\\n        samtools sort - -m 2G --threads ${task.cpus} \\\n            -o ${name}.map_genome.sorted.bam\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    \"\"\"\n    STAR --readFilesIn ${rm_smallRNA_fastq} \\\n        --outFileNamePrefix ${name}.map_genome. \\\n        --genomeDir ${params.genome_dir}/star \\\n        --runThreadN ${task.cpus} \\\n        --genomeLoad NoSharedMemory \\\n        --runMode alignReads \\\n        --outSAMtype BAM Unsorted \\\n        --outSAMmultNmax 1 \\\n        --outFilterMultimapNmax 1 \\\n        --outFilterMismatchNmax 2 \\\n        --outFilterIntronMotifs RemoveNoncanonicalUnannotated \\\n        --outSAMstrandField intronMotif \\\n        --outSJfilterOverhangMin 30 12 12 12 \\\n        --alignEndsType EndToEnd \\\n        --outSAMattributes All \\\n        --outSAMunmapped Within \\\n        --alignIntronMin 20 \\\n        --alignIntronMax 1000000 \\\n        --alignMatesGapMax 1000000 \\\n        --alignSJDBoverhangMin 1 \\\n        --outStd BAM_Unsorted > ${name}.map_genome.unsorted.bam\n\n    samtools view -h ${name}.map_genome.unsorted.bam |\\\n        awk '\\$0~/^@/{print \\$0}\\$0!~/^@/{for(i=12;i<NF;i++){if(substr(\\$i,1,4)==\"MD:Z\"){if(and(16,\\$2)==0){ if(\\$i!~/^MD:Z:0/ ) print \\$0; }else{if(\\$i!~/^MD:Z:.*0\\$/) print \\$0; }}}}' |\\\n        samtools view --threads ${task.cpus} -bh - |\\\n        samtools sort - -m 2G --threads ${task.cpus} \\\n            -o ${name}.map_genome.sorted.bam\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "removed_smallRNA_fq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapped_bam_for_fpkm",
            "mapped_bam_for_sam2tab",
            "mapped_bam_for_coverage",
            "unsorted_bam",
            "log_progress",
            "log_final",
            "log_out",
            "log_std"
        ],
        "nb_outputs": 8,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/05_mappedResult/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "estimate_rpkm": {
        "name_process": "estimate_rpkm",
        "string_process": "\nprocess estimate_rpkm{\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/06_fpkm/\", mode: 'copy'\n\n    input:\n    set val(name), file(mapped_bam) from mapped_bam_for_fpkm\n\n    output:\n    set val(name), file(\"*.gene.txt\") into gene_rpkm\n    set val(name), file(\"*.txn.txt\") into txn_rpkm\n    set val(name), file(\"*.gene.txt.summary\") into gene_rpkm_summary\n    set val(name), file(\"*.txn.txt.summary\") into txn_rpkm_summary\n    set val(name), file(\"*.isoforms.fpkm_tracking\") into isoform_fpkm\n    set val(name), file(\"*.isoforms.fpkm_tracking\") into isoform_fpkm2\n    set val(name), file(\"*.genes.fpkm_tracking\") into gene_fpkm\n    set val(name), file(\"*.skipped.gtf\") into skipped_gtf\n    set val(name), file(\"*.transcripts.gtf\") into transcripts_gtf\n\n    script:\n    \"\"\"\n    icSHAPE-pipe calcFPKM -i ${mapped_bam} -o ${name} \\\n        -G ${params.genome_dir}/Homo_sapiens.GRCh38.100.gtf -p ${task.cpus}\n\n    mv ./${name}/isoforms.fpkm_tracking ${name}.isoforms.fpkm_tracking\n    mv ./${name}/genes.fpkm_tracking ${name}.genes.fpkm_tracking\n    mv ./${name}/skipped.gtf ${name}.skipped.gtf\n    mv ./${name}/transcripts.gtf ${name}.transcripts.gtf\n\n    featureCounts -T ${task.cpus} \\\n        -a ${params.genome_dir}/Homo_sapiens.GRCh38.100.gtf \\\n        -g transcript_id \\\n        -o ${name}.txn.txt \\\n        ${mapped_bam}\n\n    featureCounts -T ${task.cpus} \\\n        -a ${params.genome_dir}/Homo_sapiens.GRCh38.100.gtf \\\n        -g gene_id \\\n        -o ${name}.gene.txt \\\n        ${mapped_bam}\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    \"\"\"\n    icSHAPE-pipe calcFPKM -i ${mapped_bam} -o ${name} \\\n        -G ${params.genome_dir}/Homo_sapiens.GRCh38.100.gtf -p ${task.cpus}\n\n    mv ./${name}/isoforms.fpkm_tracking ${name}.isoforms.fpkm_tracking\n    mv ./${name}/genes.fpkm_tracking ${name}.genes.fpkm_tracking\n    mv ./${name}/skipped.gtf ${name}.skipped.gtf\n    mv ./${name}/transcripts.gtf ${name}.transcripts.gtf\n\n    featureCounts -T ${task.cpus} \\\n        -a ${params.genome_dir}/Homo_sapiens.GRCh38.100.gtf \\\n        -g transcript_id \\\n        -o ${name}.txn.txt \\\n        ${mapped_bam}\n\n    featureCounts -T ${task.cpus} \\\n        -a ${params.genome_dir}/Homo_sapiens.GRCh38.100.gtf \\\n        -g gene_id \\\n        -o ${name}.gene.txt \\\n        ${mapped_bam}\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "mapped_bam_for_fpkm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gene_rpkm",
            "txn_rpkm",
            "gene_rpkm_summary",
            "txn_rpkm_summary",
            "isoform_fpkm",
            "isoform_fpkm2",
            "gene_fpkm",
            "skipped_gtf",
            "transcripts_gtf"
        ],
        "nb_outputs": 9,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/06_fpkm/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "sam2tab": {
        "name_process": "sam2tab",
        "string_process": "\nprocess sam2tab {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/07_sam2tab/\", mode: 'copy'\n\n    input:\n    set val(name), file(mapped_bam), file(mapped_rRNA_sam), file(mapped_smallRNA_sam) from mapped_bams\n\n    output:\n    set val(name), file(\"*.genome.tab\"), file(\"*.rRNA.tab\"), file(\"*.smallRNA.tab\") into genome_sam2tab1\n    set val(name), file(\"*.genome.tab\"), file(\"*.rRNA.tab\"), file(\"*.smallRNA.tab\") into genome_sam2tab2\n    set val(name), file(\"*.genome.tab\"), file(\"*.rRNA.tab\"), file(\"*.smallRNA.tab\") into genome_sam2tab3\n    set val(name), file(\"*.genome.tab\"), file(\"*.rRNA.tab\"), file(\"*.smallRNA.tab\") into genome_sam2tab4\n\n    script:\n    \"\"\"\n    icSHAPE-pipe sam2tab -in ${mapped_bam} -out ${name}.genome.tab\n    icSHAPE-pipe sam2tab -in ${mapped_rRNA_sam} -out ${name}.rRNA.tab\n    icSHAPE-pipe sam2tab -in ${mapped_smallRNA_sam} -out ${name}.smallRNA.tab\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    icSHAPE-pipe sam2tab -in ${mapped_bam} -out ${name}.genome.tab\n    icSHAPE-pipe sam2tab -in ${mapped_rRNA_sam} -out ${name}.rRNA.tab\n    icSHAPE-pipe sam2tab -in ${mapped_smallRNA_sam} -out ${name}.smallRNA.tab\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapped_bams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genome_sam2tab1",
            "genome_sam2tab2",
            "genome_sam2tab3",
            "genome_sam2tab4"
        ],
        "nb_outputs": 4,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/07_sam2tab/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "tab2gTab_single": {
        "name_process": "tab2gTab_single",
        "string_process": "\nprocess tab2gTab_single {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/08_genomeSHAPE_single/\", mode: 'copy'\n\n    input:\n    set val(name), file(dmso_genome_tab), file(dmso_rRNA_tab), file(dmso_smallRNA_tab), file(nain3_genome_tab), file(nain3_rRNA_tab), file(nain3_smallRNA_tab) from ch_for_genome_SHAPE_single\n\n    output:\n    set val(name), file(\"*.genome.single.gTab\"), file(\"*.rRNA.single.gTab\"), file(\"*.smallRNA.single.gTab\") into single_gTab\n    file(\"*.genome.single.gTab.param.log\")\n    file(\"*.rRNA.single.gTab.param.log\")\n    file(\"*.smallRNA.single.gTab.param.log\")\n\n    script:\n    \"\"\"\n    icSHAPE-pipe calcSHAPE -D ${dmso_genome_tab} -N ${nain3_genome_tab} \\\n        -size ${params.genome_dir}/star/chrNameLength.txt \\\n        -ijf ${params.genome_dir}/star/sjdbList.fromGTF.out.tab \\\n        -genome ${params.genome_dir}/Homo_sapiens.GRCh38.dna.primary_assembly.fa \\\n        -bases A,T,C,G \\\n        -out ${name}.genome.single.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_rRNA_tab} -N ${nain3_rRNA_tab} \\\n        -size ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -genome ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.rRNA.single.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_smallRNA_tab} -N ${nain3_smallRNA_tab} \\\n        -size ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -genome ${params.genome_dir}/smallRNA/smallRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.smallRNA.single.gTab\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    icSHAPE-pipe calcSHAPE -D ${dmso_genome_tab} -N ${nain3_genome_tab} \\\n        -size ${params.genome_dir}/star/chrNameLength.txt \\\n        -ijf ${params.genome_dir}/star/sjdbList.fromGTF.out.tab \\\n        -genome ${params.genome_dir}/Homo_sapiens.GRCh38.dna.primary_assembly.fa \\\n        -bases A,T,C,G \\\n        -out ${name}.genome.single.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_rRNA_tab} -N ${nain3_rRNA_tab} \\\n        -size ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -genome ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.rRNA.single.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_smallRNA_tab} -N ${nain3_smallRNA_tab} \\\n        -size ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -genome ${params.genome_dir}/smallRNA/smallRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.smallRNA.single.gTab\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_for_genome_SHAPE_single"
        ],
        "nb_inputs": 1,
        "outputs": [
            "single_gTab"
        ],
        "nb_outputs": 1,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/08_genomeSHAPE_single/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gTab2RTBD_single": {
        "name_process": "gTab2RTBD_single",
        "string_process": "\nprocess gTab2RTBD_single {\n                                              \n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/08_genomeSHAPE_single/\", mode: 'copy'\n\n    input:\n    set val(name), file(single_genome_gTab), file(single_rRNA_gTab), file(single_smallRNA_gTab), file(isoform_fpkms) from single_gTab_rpkm\n\n    output:\n    set val(name), file(\"*.genome.single.RTBD\") into single_RTBD\n    set val(name), file(\"*.trans.single.shape\") into single_shape\n    \n\n    script:\n    \"\"\"\n    icSHAPE-pipe genRTBDToTransRTBD -i ${single_genome_gTab} \\\n        -g ${params.genome_dir}/GTF/Anno.genomeCoor.bed \\\n        -p ${task.cpus}  -c 5,6,7,8 \\\n        -o ${name}.genome.single.RTBD\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${single_genome_gTab} \\\n        -o ${name}.trans.single.shape \\\n        -g ${params.genome_dir}/GTF/Anno.genomeCoor.bed \\\n        -p ${task.cpus} \\\n        -r ${isoform_fpkms} \\\n        -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n    \n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${single_rRNA_gTab} \\\n        -o ${name}.trans.single.shape \\\n        -s ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${single_smallRNA_gTab} \\\n        -o ${name}.trans.single.shape \\\n        -s ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    \"\"\"\n    icSHAPE-pipe genRTBDToTransRTBD -i ${single_genome_gTab} \\\n        -g ${params.genome_dir}/GTF/Anno.genomeCoor.bed \\\n        -p ${task.cpus}  -c 5,6,7,8 \\\n        -o ${name}.genome.single.RTBD\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${single_genome_gTab} \\\n        -o ${name}.trans.single.shape \\\n        -g ${params.genome_dir}/GTF/Anno.genomeCoor.bed \\\n        -p ${task.cpus} \\\n        -r ${isoform_fpkms} \\\n        -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n    \n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${single_rRNA_gTab} \\\n        -o ${name}.trans.single.shape \\\n        -s ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${single_smallRNA_gTab} \\\n        -o ${name}.trans.single.shape \\\n        -s ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "single_gTab_rpkm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "single_RTBD",
            "single_shape"
        ],
        "nb_outputs": 2,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/08_genomeSHAPE_single/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "coverage_rt_count": {
        "name_process": "coverage_rt_count",
        "string_process": "\nprocess coverage_rt_count {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/12_coverageCount_Single/\", mode: 'copy'\n\n    input:\n    set val(name), file(single_rtbd_file) from single_RTBD\n    output:\n    file(\"*.rtbd.txt\") into single_coverage\n    file(\"*.rtbd.txt.log\")\n\n    script:\n    \"\"\"\n    python ${baseDir}/scripts/transform_RTBD_file.py  ${single_rtbd_file}  ${name}.rtbd.txt\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    python ${baseDir}/scripts/transform_RTBD_file.py  ${single_rtbd_file}  ${name}.rtbd.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "single_RTBD"
        ],
        "nb_inputs": 1,
        "outputs": [
            "single_coverage"
        ],
        "nb_outputs": 1,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/12_coverageCount_Single/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_coverage": {
        "name_process": "merge_coverage",
        "string_process": "\nprocess merge_coverage {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/12_coverageCount_Single/\", mode: 'copy'\n\n    input:\n    val(input_files) from ch_for_merge_coverage\n\n    output:\n    file(\"all.rt.merged.wide.csv.gz\")\n    file(\"all.cov.merged.wide.csv.gz\")\n\n    script:\n    \"\"\"\n    Rscript ${baseDir}/scripts/merge_RTBD_txt.R  ${input_files}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    Rscript ${baseDir}/scripts/merge_RTBD_txt.R  ${input_files}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_for_merge_coverage"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/12_coverageCount_Single/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "tab2gTab_merged": {
        "name_process": "tab2gTab_merged",
        "string_process": "\nprocess tab2gTab_merged {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/09_genomeSHAPE/\", mode: 'copy'\n\n    input:\n    set val(name), val(dmso_genome_tab), val(dmso_rRNA_tab), val(dmso_smallRNA_tab), val(nain3_genome_tab), val(nain3_rRNA_tab), val(nain3_smallRNA_tab) from ch_for_genome_SHAPE\n\n    output:\n    set val(name), file(\"*.genome.gTab\"), file(\"*.rRNA.gTab\"), file(\"*.smallRNA.gTab\") into merged_gTab\n\n    script:\n    \"\"\"\n    icSHAPE-pipe calcSHAPE -D ${dmso_genome_tab} -N ${nain3_genome_tab} \\\n        -size ${params.genome_dir}/star/chrNameLength.txt \\\n        -ijf ${params.genome_dir}/star/sjdbList.fromGTF.out.tab \\\n        -genome ${params.genome_dir}/Homo_sapiens.GRCh38.dna.primary_assembly.fa \\\n        -bases A,T,C,G \\\n        -out ${name}.genome.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_rRNA_tab} -N ${nain3_rRNA_tab} \\\n        -size ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -genome ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.rRNA.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_smallRNA_tab} -N ${nain3_smallRNA_tab} \\\n        -size ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -genome ${params.genome_dir}/smallRNA/smallRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.smallRNA.gTab\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    icSHAPE-pipe calcSHAPE -D ${dmso_genome_tab} -N ${nain3_genome_tab} \\\n        -size ${params.genome_dir}/star/chrNameLength.txt \\\n        -ijf ${params.genome_dir}/star/sjdbList.fromGTF.out.tab \\\n        -genome ${params.genome_dir}/Homo_sapiens.GRCh38.dna.primary_assembly.fa \\\n        -bases A,T,C,G \\\n        -out ${name}.genome.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_rRNA_tab} -N ${nain3_rRNA_tab} \\\n        -size ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -genome ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.rRNA.gTab\n\n    icSHAPE-pipe calcSHAPE -D ${dmso_smallRNA_tab} -N ${nain3_smallRNA_tab} \\\n        -size ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -genome ${params.genome_dir}/smallRNA/smallRNA.fa \\\n        -bases A,T,C,G \\\n        -non-sliding \\\n        -out ${name}.smallRNA.gTab\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_for_genome_SHAPE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_gTab"
        ],
        "nb_outputs": 1,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/09_genomeSHAPE/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "calculate_shape": {
        "name_process": "calculate_shape",
        "string_process": "\nprocess calculate_shape {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/10_SHAPE/\", mode: 'copy'\n\n    input:\n    set val(name), file(genome_gTab), file(rRNA_gTab), file(smallRNA_gTab), val(isoform_fpkms) from ch_for_SHAPE\n\n    output:\n    set val(name), file(\"*.final.shape\") into final_shape\n\n    script:\n    \"\"\"\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${genome_gTab} \\\n        -o ${name}.final.shape \\\n        -g ${params.genome_dir}/GTF/Anno.genomeCoor.bed \\\n        -p ${task.cpus} \\\n        -r ${isoform_fpkms} \\\n        -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${rRNA_gTab} \\\n        -o ${name}.final.shape \\\n        -s ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${smallRNA_gTab} \\\n        -o ${name}.final.shape \\\n        -s ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${genome_gTab} \\\n        -o ${name}.final.shape \\\n        -g ${params.genome_dir}/GTF/Anno.genomeCoor.bed \\\n        -p ${task.cpus} \\\n        -r ${isoform_fpkms} \\\n        -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${rRNA_gTab} \\\n        -o ${name}.final.shape \\\n        -s ${params.genome_dir}/rRNA/human_rRNA_tRNA_mtRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n\n    icSHAPE-pipe genSHAPEToTransSHAPE -i ${smallRNA_gTab} \\\n        -o ${name}.final.shape \\\n        -s ${params.genome_dir}/smallRNA/smallRNA.len \\\n        -p ${task.cpus} \\\n        --app -c ${params.minCov} -T ${params.minRT} -M ${params.minRPKM}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_for_SHAPE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "final_shape"
        ],
        "nb_outputs": 1,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/10_SHAPE/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "generate_bedgraph": {
        "name_process": "generate_bedgraph",
        "string_process": "\nprocess generate_bedgraph {\n    tag \"${name}\"\n    publishDir \"${params.outDir}\" + \"/11_bedgraph/\", mode: 'copy'\n\n    input:\n    set val(name), file(genome_shape) from final_shape\n    output:\n    set val(name), file(\"*.transcriptome.bedgraph.gz\") into transcritome_bedgraph\n\n    script:\n    \"\"\"\n    python ${baseDir}/scripts/shape_to_bedGraph.py \\\n        -i ${genome_shape} \\\n        -o ${name}.transcriptome.bedgraph.gz \\\n        -n ${name}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    python ${baseDir}/scripts/shape_to_bedGraph.py \\\n        -i ${genome_shape} \\\n        -o ${name}.transcriptome.bedgraph.gz \\\n        -n ${name}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "final_shape"
        ],
        "nb_inputs": 1,
        "outputs": [
            "transcritome_bedgraph"
        ],
        "nb_outputs": 1,
        "name_workflow": "zhangtong516__icpipe-nextflow",
        "directive": [
            "tag \"${name}\"",
            "publishDir \"${params.outDir}\" + \"/11_bedgraph/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n  .fromFilePairs([\"${params.reads}/*_R{1,2}*.{fastq,fastq.gz,fq,fq.gz}\",\n                  \"${params.reads}/*{1,2}*.{fastq,fastq.gz,fq,fq.gz}\"], size: 2 )\n  .map { reads -> tuple(reads[0].replaceAll(~/_S[0-9]+_L[0-9]+/,\"\"), reads[1], \"paired\" ) }\n  .view { \"Fastq file found : ${it[0]}\" }\n  .into { paried_reads_check ; paired_reads }",
        "origin": [],
        "gives": [
            [
                "paried_reads_check",
                "P"
            ],
            [
                "paired_reads",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n  .fromPath(\"${params.single_reads}/*.{fastq,fastq.gz,fq,fq.gz}\")\n  .map { reads -> tuple(reads.simpleName, reads, \"single\" ) }\n  .view { \"Fastq file found : ${it[0]}\" }\n  .into { single_reads_check ; single_reads }",
        "origin": [
            [
                "\"${params.single_reads}/*.{fastq,fastq.gz,fq,fq.gz}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "single_reads_check",
                "P"
            ],
            [
                "single_reads",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n  .fromPath(\"${params.fastas}/*{.fa,.fasta,.fna}\", type:'file')\n  .map { fasta -> tuple(fasta.baseName, fasta ) }\n  .view { \"Fasta file found : ${it[0]}\" }\n  .into { fastas_check ; fastas }",
        "origin": [
            [
                "\"${params.fastas}/*{.fa,.fasta,.fna}\", type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "fastas_check",
                "P"
            ],
            [
                "fastas",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n  .fromPath(\"${params.multifastas}/*{.fa,.fasta,.fna}\", type:'file')\n  .view { \"MultiFasta file found : ${it}\" }\n  .into { multifastas_check ; multifastas_pangolin ; multifastas_vadr ; multifastas_nextclade ; multifastas_msa}",
        "origin": [
            [
                "\"${params.multifastas}/*{.fa,.fasta,.fna}\", type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "multifastas_check",
                "P"
            ],
            [
                "multifastas_pangolin",
                "P"
            ],
            [
                "multifastas_vadr",
                "P"
            ],
            [
                "multifastas_nextclade",
                "P"
            ],
            [
                "multifastas_msa",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n  .fromPath(\"${workflow.projectDir}/bin/combine_results.py\", type:'file')\n  .set { combine_results_script }",
        "origin": [
            [
                "\"${workflow.projectDir}/bin/combine_results.py\", type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "combine_results_script",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n  .fromPath(params.reference_genome, type:'file')\n  .ifEmpty{\n    println(\"No reference genome was selected. Set with 'params.reference_genome'\")\n    exit 1\n  }\n  .view { \"Reference Genome : $it\"}\n  .into { reference_genome ; reference_genome2 ; reference_genome_msa ; reference_genome_bamsnap ; reference_genome3 }",
        "origin": [
            [
                "params.reference_genome, type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "reference_genome",
                "P"
            ],
            [
                "reference_genome2",
                "P"
            ],
            [
                "reference_genome_msa",
                "P"
            ],
            [
                "reference_genome_bamsnap",
                "P"
            ],
            [
                "reference_genome3",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n  .fromPath(params.gff_file, type:'file')\n  .view { \"GFF file for Reference Genome : $it\"}\n  .set { gff_file }",
        "origin": [
            [
                "params.gff_file, type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "gff_file",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n  .fromPath(params.primer_bed, type:'file')\n  .ifEmpty{\n    println(\"A bedfile for primers is required. Set with 'params.primer_bed'.\")\n    exit 1\n  }\n  .view { \"Primer BedFile : $it\"}\n  .into { primer_bed ; primer_bed_bedtools ; primer_bed_ampliconstats }",
        "origin": [
            [
                "params.primer_bed, type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "primer_bed",
                "P"
            ],
            [
                "primer_bed_bedtools",
                "P"
            ],
            [
                "primer_bed_ampliconstats",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.empty()",
        "origin": [],
        "gives": []
    },
    "OPERATION_10": {
        "string": "Channel.empty()",
        "origin": [],
        "gives": []
    },
    "OPERATION_11": {
        "string": "fastp_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "fastp_results",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "fastp_files = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "fastp_files",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "seqyclean_perc_kept_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "seqyclean_perc_kept_results",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "seqyclean_pairskept_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "seqyclean_pairskept_results",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "seqyclean_files = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "seqyclean_files",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "ivar_trim_files = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ivar_trim_files",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "trimmer_version = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "trimmer_version",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "trimmed_bams4 = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "trimmed_bams4",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ivar_trim_files = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ivar_trim_files",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "aggregated_freyja_file = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "aggregated_freyja_file",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "Channel\n    .fromPath(params.sample_file, type:'file')\n    .ifEmpty{\n      println(\"No sample file was found. Set with 'params.sample_file'\")\n      exit 1\n    }\n    .view { \"Sample File : $it\" }\n    .set{ sample_file }",
        "origin": [
            [
                "params.sample_file, type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "sample_file",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "paried_reads_check\n  .concat(single_reads_check)\n  .concat(fastas_check)\n  .concat(multifastas_check)\n  .ifEmpty{\n    println(\"FATAL : No input files were found!\")\n    println(\"No paired-end fastq files were found at ${params.reads}.\" )\n    println(\"Set 'params.reads' to directory with paired-end reads\")\n    println(\"No single-end fastq files were found at ${params.single_reads}.\" )\n    println(\"Set 'params.single_reads' to directory with single-end reads\")\n    println(\"No fasta files were found at ${params.fastas}.\" )\n    println(\"Set 'params.fastas' to directory with fastas.\")\n    println(\"No multifasta files were found at ${params.fastas}.\" )\n    println(\"Set 'params.multifastas' to directory with multifastas.\")\n    exit 1\n  }",
        "origin": [
            [
                "paried_reads_check",
                "P"
            ],
            [
                "single_reads_check",
                "P"
            ],
            [
                "fastas_check",
                "P"
            ],
            [
                "multifastas_check",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_23": {
        "string": "paired_reads\n  .concat(single_reads)\n  .ifEmpty{ println(\"No fastq or fastq.gz files were found at ${params.reads} or ${params.single_reads}\") }\n  .into { fastq_reads_seqyclean ; fastq_reads_fastp ; fastq_reads_fastqc ; fastq_reads_rename }",
        "origin": [
            [
                "paired_reads",
                "P"
            ],
            [
                "single_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "fastq_reads_seqyclean",
                "P"
            ],
            [
                "fastq_reads_fastp",
                "P"
            ],
            [
                "fastq_reads_fastqc",
                "P"
            ],
            [
                "fastq_reads_rename",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "seqyclean_files_collect\n    .collectFile(name: \"Combined_SummaryStatistics.tsv\",\n      keepHeader: true,\n      sort: true,\n      storeDir: \"${params.outdir}/seqyclean\")",
        "origin": [
            [
                "seqyclean_files_collect",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_25": {
        "string": "pre_trim_bams\n    .into { trimmed_bams ; trimmed_bams5 }",
        "origin": [
            [
                "pre_trim_bams",
                "P"
            ]
        ],
        "gives": [
            [
                "trimmed_bams",
                "P"
            ],
            [
                "trimmed_bams5",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "pre_trim_bams_bedtools\n    .set { bam_bai }",
        "origin": [
            [
                "pre_trim_bams_bedtools",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_bai",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "trimmed_bams\n .combine(reference_genome2)\n .into { trimmed_bams_genome ; trimmed_bams_ivar_consensus ; trimmed_bams_bcftools_variants ; trimmed_bams_freyja  }",
        "origin": [
            [
                "trimmed_bams",
                "P"
            ],
            [
                "reference_genome2",
                "P"
            ]
        ],
        "gives": [
            [
                "trimmed_bams_genome",
                "P"
            ],
            [
                "trimmed_bams_ivar_consensus",
                "P"
            ],
            [
                "trimmed_bams_bcftools_variants",
                "P"
            ],
            [
                "trimmed_bams_freyja",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "pre_trim_bams_bamsnap\n  .join(ivar_variant_file, remainder: true, by:0)\n  .join(bcftools_variants_file, remainder: true, by:0)\n  .combine(reference_genome_bamsnap)\n  .set { bamsnap_files }",
        "origin": [
            [
                "pre_trim_bams_bamsnap",
                "P"
            ],
            [
                "reference_genome_bamsnap",
                "P"
            ]
        ],
        "gives": [
            [
                "bamsnap_files",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "pre_trim_bams2\n   .join(trimmed_bams4, remainder: true, by: 0)\n   .into { pre_post_bams ; pre_post_bams2 ; pre_post_bams3 ; pre_post_bams4 }",
        "origin": [
            [
                "pre_trim_bams2",
                "P"
            ]
        ],
        "gives": [
            [
                "pre_post_bams",
                "P"
            ],
            [
                "pre_post_bams2",
                "P"
            ],
            [
                "pre_post_bams3",
                "P"
            ],
            [
                "pre_post_bams4",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "consensus_results\n  .concat(fastas_results)\n  .join(fastqc_1_results, remainder: true, by: 0)\n  .join(fastqc_2_results, remainder: true, by: 0)\n  .join(seqyclean_pairskept_results, remainder: true, by: 0)\n  .join(seqyclean_perc_kept_results, remainder: true, by: 0)\n  .join(fastp_results, remainder: true, by: 0)\n  .join(ivar_variants_results, remainder: true, by: 0)\n  .join(bcftools_variants_results, remainder: true, by:0)\n  .join(samtools_coverage_results, remainder: true, by: 0)\n  .join(samtools_covdepth_results, remainder: true, by: 0)\n  .join(samtools_depth_results, remainder: true, by: 0)\n  .join(samtools_stats_before_size_results, remainder: true, by: 0)\n  .join(samtools_stats_after_size_results, remainder: true, by: 0)\n  .join(kraken2_human_results, remainder: true, by: 0)\n  .join(kraken2_sars_results, remainder: true, by: 0)\n  .join(bedtools_results, remainder: true, by: 0)\n  .join(samtools_ampliconstats_results, remainder: true, by: 0)\n  .join(aligner_version, remainder: true, by: 0)\n  .join(trimmer_version, remainder: true, by: 0)\n  .join(cleaner_version, remainder: true, by: 0)\n  .join(ivar_version, remainder: true, by: 0)\n  .set { results }",
        "origin": [
            [
                "consensus_results",
                "P"
            ],
            [
                "fastas_results",
                "P"
            ]
        ],
        "gives": [
            [
                "results",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "summary\n  .collectFile(name: \"combined_summary.csv\",\n    keepHeader: true,\n    sort: true,\n    skip: 1,\n    storeDir: \"${params.outdir}/summary\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_32": {
        "string": "nextclade_aligned_fasta\n      .into { msa_file ; msa_file2 }",
        "origin": [
            [
                "nextclade_aligned_fasta",
                "P"
            ]
        ],
        "gives": [
            [
                "msa_file",
                "P"
            ],
            [
                "msa_file2",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "fastq_reads_rename\n    .join(consensus_rename, by:0)\n    .join(fastas_rename, by:0)\n    .join(filtered_reads, remainder: true, by: 0)\n    .combine(sample_file)\n    .set { rename }",
        "origin": [
            [
                "fastq_reads_rename",
                "P"
            ],
            [
                "sample_file",
                "P"
            ]
        ],
        "gives": [
            [
                "rename",
                "P"
            ]
        ]
    }
}
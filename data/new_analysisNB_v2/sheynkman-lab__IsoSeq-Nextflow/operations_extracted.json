{
    "OPERATION_1": {
        "string": "ch_ccs_reads = Channel.value(file(params.ccs_reads))",
        "origin": [],
        "gives": [
            [
                "ch_ccs_reads",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_ccs_reads = Channel.fromPath(\"${params.ccs_reads}/*.ccs.bam\")",
        "origin": [
            [
                "\"${params.ccs_reads}/*.ccs.bam\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_ccs_reads",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_barcodes = Channel.value(file(params.barcodes))",
        "origin": [],
        "gives": [
            [
                "ch_barcodes",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "_ch_all_barcodes = Channel\n     .fromPath(\"${params.barcodes}\")\n     .splitFasta( record: [id: true, seqString: false ])",
        "origin": [
            [
                "\"${params.barcodes}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "_ch_all_barcodes",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_genome_fasta = Channel.value(file(params.genome_fasta))",
        "origin": [],
        "gives": [
            [
                "ch_genome_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_genome_fasta_uncompressed = Channel.value(file(params.genome_fasta))",
        "origin": [],
        "gives": [
            [
                "ch_genome_fasta_uncompressed",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "_ch_all_barcodes.into{\n    _ch_all_barcodes_3p\n    _ch_all_barcodes_5p\n}",
        "origin": [
            [
                "_ch_all_barcodes",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "_ch_3prime_barcodes = _ch_all_barcodes_3p\n    .filter { record -> record.id =~ /_3p$/ }",
        "origin": [
            [
                "_ch_all_barcodes_3p",
                "P"
            ]
        ],
        "gives": [
            [
                "_ch_3prime_barcodes",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "_ch_5prime_barcodes = _ch_all_barcodes_5p\n    .filter { record -> record.id =~ /_5p$/ }",
        "origin": [
            [
                "_ch_all_barcodes_5p",
                "P"
            ]
        ],
        "gives": [
            [
                "_ch_5prime_barcodes",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_barcode_pairs_list = _ch_3prime_barcodes.combine(_ch_5prime_barcodes)",
        "origin": [
            [
                "_ch_3prime_barcodes",
                "P"
            ],
            [
                "_ch_5prime_barcodes",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_barcode_pairs_list",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_barcode_pairs.into{\n    ch_barcode_pairs_view\n    ch_barcode_pairs_use\n}",
        "origin": [
            [
                "ch_barcode_pairs",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "ch_individual_lima_bam\n    .flatten()\n    .map { file ->\n        def key = file.name.toString().tokenize('.')[-2]\n        return tuple(key, file)\n     }\n    .groupTuple()\n    .set{ ch_lima_grouped_by_barcode }",
        "origin": [
            [
                "ch_individual_lima_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_lima_grouped_by_barcode",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_refined_flnc_report.collectFile(\n    name:'full.flnc.report.csv', \n    keepHeader:true, \n    storeDir:\"${params.outdir}/isoseq3/refine/\").set{ch_combined_flnc_report}",
        "origin": [
            [
                "ch_refined_flnc_report",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_combined_flnc_report",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "ch_collapsed_fasta.splitFasta(record: [id: true, seqString: true ])",
        "origin": [
            [
                "ch_collapsed_fasta",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_15": {
        "string": "ch_barcode_pairs_view.view()",
        "origin": [
            [
                "ch_barcode_pairs_view",
                "P"
            ]
        ],
        "gives": []
    }
}
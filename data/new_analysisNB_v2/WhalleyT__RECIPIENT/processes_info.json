{
    "prokka": {
        "name_process": "prokka",
        "string_process": "\nprocess prokka {\n    container 'file://singularity_images/prokka.simg'\n    \n    publishDir \"${params.outdir}/prokka\", mode: 'copy'\n    \n    validExitStatus 0, 5\n    \n    input:\n    set fasta_prefix, file(fasta_file) from fasta_dataset_prokka\n    \n    output:\n    file(\"${fasta_prefix}/${fasta_prefix}.gff\") into gff\n    file(\"${fasta_prefix}/${fasta_prefix}.faa\") into faa_annots\n                                                      \n                                                      \n                                                      \n                                                      \n                                                      \n                                                      \n                                                      \n                                                                 \n    \n\n    script:\n    \"\"\"\n    prokka --outdir ${fasta_prefix} --prefix ${fasta_prefix} ${fasta_file} --centre C  \\\n    --kingdom $params.kingdom --force  --metagenome --locustag L --norrna --notrna #--gram neg\n    \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    prokka --outdir ${fasta_prefix} --prefix ${fasta_prefix} ${fasta_file} --centre C  \\\n    --kingdom $params.kingdom --force  --metagenome --locustag L --norrna --notrna #--gram neg\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "fasta_dataset_prokka"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gff",
            "faa_annots"
        ],
        "nb_outputs": 2,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/prokka.simg'",
            "publishDir \"${params.outdir}/prokka\", mode: 'copy'",
            "validExitStatus 0, 5"
        ],
        "when": "",
        "stub": ""
    },
    "roary": {
        "name_process": "roary",
        "string_process": "\nprocess roary {\n    container 'file://singularity_images/roary.simg'\n    label 'multithreaded'\n    publishDir \"${params.outdir}/roary\", mode: 'copy'\n    \n    validExitStatus \"-\", 0\n\n    input:\n    file gff from gff.collect()\n\n    output:\n    file(\"*\") into roary\n    file(\"pan_genome_reference.fa\") into pan_genome\n    file(\"pan_genome_sequences/*\") into alignment_files\n    file(\"gene_presence_absence.Rtab\") into gene_presence\n    set file(\"*accessory*\"), \n        file(\"*.Rtab\"),\n        file(\"_*\"),\n        file(\"*.txt\"),\n        file(\"*csv\") into roary_out\n\n    shell:\n    '''\n    roary -p $(nproc) -e -n -z !{gff}\n    '''\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    roary -p $(nproc) -e -n -z !{gff}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Roary"
        ],
        "tools_url": [
            "https://bio.tools/roary"
        ],
        "tools_dico": [
            {
                "name": "Roary",
                "uri": "https://bio.tools/roary",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.",
                "homepage": "http://sanger-pathogens.github.io/Roary/"
            }
        ],
        "inputs": [
            "gff"
        ],
        "nb_inputs": 1,
        "outputs": [
            "roary",
            "pan_genome",
            "alignment_files",
            "gene_presence",
            "roary_out"
        ],
        "nb_outputs": 5,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/roary.simg'",
            "label 'multithreaded'",
            "publishDir \"${params.outdir}/roary\", mode: 'copy'",
            "validExitStatus \"-\", 0"
        ],
        "when": "",
        "stub": ""
    },
    "mash": {
        "name_process": "mash",
        "string_process": "\nprocess mash {\n    container 'file://singularity_images/mash.simg'    \n\n    publishDir \"${params.outdir}/mash\", mode: 'copy'\n    label 'multithreaded'\n    input:\n    file aa_fastas from faa_annots.collect()\n\n    output:\n    file(\"mash_output.phylip\") into mash\n\n    script:\n    \"\"\"\n    mash triangle -p ${task.cpus}  -a  $aa_fastas > mash_output.phylip\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mash triangle -p ${task.cpus}  -a  $aa_fastas > mash_output.phylip\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Mash"
        ],
        "tools_url": [
            "https://bio.tools/mash"
        ],
        "tools_dico": [
            {
                "name": "Mash",
                "uri": "https://bio.tools/mash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast genome and metagenome distance estimation using MinHash.",
                "homepage": "https://github.com/marbl/mash"
            }
        ],
        "inputs": [
            "faa_annots"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mash"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/mash.simg'",
            "publishDir \"${params.outdir}/mash\", mode: 'copy'",
            "label 'multithreaded'"
        ],
        "when": "",
        "stub": ""
    },
    "kraken": {
        "name_process": "kraken",
        "string_process": "\nprocess kraken {\n    container 'file://singularity_images/kraken2.simg'\n\n    publishDir \"${params.outdir}/kraken\", mode: 'copy'\n\n     input:\n        set fasta_prefix, file(fasta_file) from fasta_dataset_kraken\n    output:\n        file(\"${fasta_prefix}_kraken.report\")\n    script:\n         \"\"\"\n        kraken2 --db ${kraken_db}  --report ${fasta_prefix}_kraken.report ${fasta_file} \n         \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "         \"\"\"\n        kraken2 --db ${kraken_db}  --report ${fasta_prefix}_kraken.report ${fasta_file} \n         \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "fasta_dataset_kraken"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/kraken2.simg'",
            "publishDir \"${params.outdir}/kraken\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "core_genes": {
        "name_process": "core_genes",
        "string_process": "\nprocess core_genes {\n    container 'file://singularity_images/python_R.simg'\n    publishDir \"${params.outdir}/core\", mode: 'copy'\n\n    input:\n    file presence from gene_presence\n\n    output:\n    file(\"core_genes.txt\") into core_gene_set\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n    matrix <- read.table('$presence', header=TRUE, row.names = 1)\n\n    presence_pcnt <- rowSums(matrix) / ncol(matrix) * 100\n\n    core <- matrix[presence_pcnt >= 99,]\n    core_genes <- rownames(core)\n    write.table(core_genes, \"core_genes.txt\", quote=FALSE, row.names = FALSE, col.names = FALSE)\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n    matrix <- read.table('$presence', header=TRUE, row.names = 1)\n\n    presence_pcnt <- rowSums(matrix) / ncol(matrix) * 100\n\n    core <- matrix[presence_pcnt >= 99,]\n    core_genes <- rownames(core)\n    write.table(core_genes, \"core_genes.txt\", quote=FALSE, row.names = FALSE, col.names = FALSE)\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gene_presence"
        ],
        "nb_inputs": 1,
        "outputs": [
            "core_gene_set"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/core\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "tajima": {
        "name_process": "tajima",
        "string_process": "\nprocess tajima {\n    container 'file://singularity_images/python_R.simg'\n    publishDir \"${params.outdir}/tajima\", mode: 'copy'\n    label 'multithreaded'\n\n\n    input:\n    file tajima_in from alignment_files.collect()\n\n    output:\n    file(\"tajima.txt\") into tajima\n\n    script:\n    \"\"\"\n    python /opt/tajima.py -F $tajima_in\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    python /opt/tajima.py -F $tajima_in\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tajima"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/tajima\", mode: 'copy'",
            "label 'multithreaded'"
        ],
        "when": "",
        "stub": ""
    },
    "translate_reference": {
        "name_process": "translate_reference",
        "string_process": "\nprocess translate_reference {\n    container 'file://singularity_images/python_R.simg'\n    publishDir \"${params.outdir}/protein_reference\", mode: 'copy'\n    \n    input:\n    file(reference_dna) from pan_genome\n    \n    output:\n    file(\"protein_reference.faa\") into reference_protein\n    \n    script:\n    \"\"\"\n    python /opt/translate.py $reference_dna > protein_reference.faa\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    python /opt/translate.py $reference_dna > protein_reference.faa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pan_genome"
        ],
        "nb_inputs": 1,
        "outputs": [
            "reference_protein"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/protein_reference\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "split_fasta": {
        "name_process": "split_fasta",
        "string_process": "\nprocess split_fasta {\n    container 'file://singularity_images/python_R.simg'\n    publishDir \"${params.outdir}/loctree_in\", mode: 'copy'\n\n    input:\n    file(ref) from reference_protein\n\n    output:\n    file(\"*fasta\") into single_protein_files\n\n    script:\n    \"\"\"\n    python /opt/split_fasta.py $ref\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    python /opt/split_fasta.py $ref\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reference_protein"
        ],
        "nb_inputs": 1,
        "outputs": [
            "single_protein_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/loctree_in\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mhc_i_binding": {
        "name_process": "mhc_i_binding",
        "string_process": "\nprocess mhc_i_binding {\n    container 'twhalley93/bvd:latest'\n\n    publishDir \"${params.outdir}/mhc_i\", mode: 'copy'\n\n    input:\n    each file(fasta_file) from single_protein_files\n\n    output:\n    file(\"*_mhc_i.txt\") into mhc_i_files\n\n    script:\n    \"\"\"\n    netMHCpan -f $fasta_file > ${fasta_file.baseName}_mhc_i.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    netMHCpan -f $fasta_file > ${fasta_file.baseName}_mhc_i.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "NetMHCpan"
        ],
        "tools_url": [
            "https://bio.tools/netmhcpan"
        ],
        "tools_dico": [
            {
                "name": "NetMHCpan",
                "uri": "https://bio.tools/netmhcpan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Epitope mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Binding site prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Antibody epitope prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Epitope prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site detection"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            }
                        ]
                    }
                ],
                "description": "Predict binding of peptides to any known MHC molecule using artificial neural networks (ANNs).",
                "homepage": "http://www.cbs.dtu.dk/services/NetMHCpan/"
            }
        ],
        "inputs": [
            "single_protein_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mhc_i_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'twhalley93/bvd:latest'",
            "publishDir \"${params.outdir}/mhc_i\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mhc_ii_binding": {
        "name_process": "mhc_ii_binding",
        "string_process": "\nprocess mhc_ii_binding {\n    container 'twhalley93/bvd:latest'\n\n    publishDir \"${params.outdir}/mhc_ii\", mode: 'copy'\n\n    input:\n    each file(fasta_file) from single_protein_files\n\n    output:\n    file(\"*_mhc_ii.txt\") into mhc_ii_files\n\n    script:\n    \"\"\"\n    netMHCIIpan  -f $fasta_file > ${fasta_file.baseName}_mhc_ii.txt\n   \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    netMHCIIpan  -f $fasta_file > ${fasta_file.baseName}_mhc_ii.txt\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "NetMHCIIpan"
        ],
        "tools_url": [
            "https://bio.tools/netmhciipan"
        ],
        "tools_dico": [
            {
                "name": "NetMHCIIpan",
                "uri": "https://bio.tools/netmhciipan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Epitope mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Binding site prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Antibody epitope prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Epitope prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site detection"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            }
                        ]
                    }
                ],
                "description": "Predict binding of peptides to MHC class II molecules. The predictions are available for all three human MHC class II isotypes, HLA-DR, HLA-DP and HLA-DQ, as well as mouse molecules.",
                "homepage": "http://www.cbs.dtu.dk/services/NetMHCIIpan/"
            }
        ],
        "inputs": [
            "single_protein_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mhc_ii_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'twhalley93/bvd:latest'",
            "publishDir \"${params.outdir}/mhc_ii\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bepipred": {
        "name_process": "bepipred",
        "string_process": "\nprocess bepipred{\n    container 'twhalley93/bvd:latest'\n\n    publishDir \"${params.outdir}/bcell\", mode: 'copy'\n\n    input:\n    each file(fasta_file) from single_protein_files\n\n    output:\n    file(\"*_bcell.txt\") into bcell_files\n\n    script:\n    \"\"\"\n    python predict_antibody_epitope.py -f $fasta_fasta_file  -m Bepipred > ${fasta_file.baseName}_bcell.txt \n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    python predict_antibody_epitope.py -f $fasta_fasta_file  -m Bepipred > ${fasta_file.baseName}_bcell.txt \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "single_protein_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bcell_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'twhalley93/bvd:latest'",
            "publishDir \"${params.outdir}/bcell\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "clean_mhc_ii": {
        "name_process": "clean_mhc_ii",
        "string_process": "\nprocess clean_mhc_ii{\n    container 'file://singularity_images/python_R.simg' \n\n    publishDir \"${params.outdir}/final_output\", mode: 'copy'\n\n    input:\n    file mhc_ii from mhc_ii_files.collect()\n\n    output:\n    file(\"mhc_ii_binders.txt\") into mhc_ii_clean\n\n    script:\n    \"\"\"\n    parse_mhc_ii.py $mhc_ii\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    parse_mhc_ii.py $mhc_ii\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mhc_ii_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mhc_ii_clean"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/final_output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "clean_mhc_i": {
        "name_process": "clean_mhc_i",
        "string_process": "\nprocess clean_mhc_i{\n    container 'file://singularity_images/python_R.simg' \n\n    publishDir \"${params.outdir}/final_output\", mode: 'copy'\n\n    input:\n    file mhc_i from mhc_i_files.collect()\n\n    output:\n    file(\"mhc_i_binders.txt\") into mhc_i_clean\n\n    script:\n    \"\"\"\n    parse_mhc_i.py $mhc_i\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    parse_mhc_i.py $mhc_i\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mhc_i_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mhc_i_clean"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/final_output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "clean_bcell": {
        "name_process": "clean_bcell",
        "string_process": "\nprocess clean_bcell{\n    container 'file://singularity_images/python_R.simg' \n\n    publishDir \"${params.outdir}/final_output\", mode: 'copy'\n\n    input:\n    file bcell from bcell_files.collect()\n\n    output:\n    file(\"mhc_i_binders.txt\") into mhc_i_clean\n\n    script:\n    \"\"\"\n    parse_bcell.py $bcell\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    parse_bcell.py $bcell\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bcell_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mhc_i_clean"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/final_output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_loctree": {
        "name_process": "run_loctree",
        "string_process": "\nprocess run_loctree {\n    container 'file://singularity_images/loctree.simg'\n\n    publishDir \"${params.outdir}/loctree_out\", mode: 'copy'\n\n    input:\n    each file(single_fasta) from single_protein_files\n\n    output:\n    file(\"*.out\") into loctree_results\n\n    script:\n    \"\"\"\n    loctree3 -f $single_fasta -d bact -r ${single_fasta.baseName}.out -b /data/bacteria.profile\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    loctree3 -f $single_fasta -d bact -r ${single_fasta.baseName}.out -b /data/bacteria.profile\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "LocTree3"
        ],
        "tools_url": [
            "https://bio.tools/loctree3"
        ],
        "tools_dico": [
            {
                "name": "LocTree3",
                "uri": "https://bio.tools/loctree3",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0123",
                            "term": "Protein properties"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0123",
                            "term": "Protein physicochemistry"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2489",
                                    "term": "Subcellular localisation prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2489",
                                    "term": "Protein cellular localization prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2489",
                                    "term": "Protein targeting prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2489",
                                    "term": "Protein subcellular localisation prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2886",
                                "term": "Protein sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0896",
                                "term": "Protein report"
                            }
                        ]
                    }
                ],
                "description": "Prediction of protein subcellular localization in 18 classes for eukaryota, 6 for bacteria and 3 for archaea.",
                "homepage": "https://rostlab.org/services/loctree3/"
            }
        ],
        "inputs": [
            "single_protein_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "loctree_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/loctree.simg'",
            "publishDir \"${params.outdir}/loctree_out\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "clean_loctree": {
        "name_process": "clean_loctree",
        "string_process": "\nprocess clean_loctree{\n    container 'file://singularity_images/python_R.simg'\n   \n    publishDir \"${params.outdir}/final_output\", mode: 'copy'\n\n    input:\n    file(locfiles) from loctree_results.collect()\n\n    output:\n    file(\"loctree_parsed.txt\") into output_files\n\n    script:\n    \"\"\"\n    locgene_parser.py $locfiles\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    locgene_parser.py $locfiles\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "loctree_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "output_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "WhalleyT__RECIPIENT",
        "directive": [
            "container 'file://singularity_images/python_R.simg'",
            "publishDir \"${params.outdir}/final_output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
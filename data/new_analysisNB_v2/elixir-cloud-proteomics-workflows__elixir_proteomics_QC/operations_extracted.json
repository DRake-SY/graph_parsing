{
    "OPERATION_1": {
        "string": "Channel\n                                               \n    .watchPath( params.zipfiles )             \n    .map { \n        file = it\n        id = it.getName()\n        ext = params.zipfiles.tokenize( '/' )\n        pieces = id.tokenize( '_' )\n        checksum = pieces[-1].replace(\".raw.zip\", \"\")\n        [pieces[-2], checksum, file]\n    }.set { zipfiles }",
        "origin": [
            [
                "params.zipfiles",
                "A"
            ]
        ],
        "gives": [
            [
                "zipfiles",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath( params.zipfiles )\n    .map {\n        file = it\n        id = it.getName()\n        ext = params.zipfiles.tokenize( '/' )\n        pieces = id.tokenize( '_' )\n        checksum = pieces[-1].replace(\".raw.zip\", \"\")\n        [pieces[-2], checksum, file]\n    }.set { zipfiles }",
        "origin": [
            [
                "params.zipfiles",
                "A"
            ]
        ],
        "gives": [
            [
                "zipfiles",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .from(fastaconfig.readLines())\n    .map { line ->\n        list = line.split(\"\\t\")\n        genome_id = list[0]\n        internal_db = list[1]\n        fasta_file_name = list[2]\n        fasta_path = file(\"${fasta_folder}/${fasta_file_name}\")\n        [genome_id, fasta_file_name, internal_db, fasta_path]\n    }\n    .into{ fasta_desc; blastdb_desc }",
        "origin": [],
        "gives": [
            [
                "fasta_desc",
                "P"
            ],
            [
                "blastdb_desc",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .from(qconfig.readLines())\n    .map { line ->\n     list = line.split(\"\\t\")\n     internal_code = list[0]\n     genome           = list[1]\n     workflow_type    = list[2]\n     [internal_code, genome, workflow_type]\n    }\n    .set{qconfig_desc}",
        "origin": [],
        "gives": [
            [
                "qconfig_desc",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "queueQC12 = Channel.create()",
        "origin": [],
        "gives": [
            [
                "queueQC12",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "queueQC03 = Channel.create()",
        "origin": [],
        "gives": [
            [
                "queueQC03",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "input_pipe_withcode_reordered = corrected_mzmlfiles_for_second_step.combine(qconfig_desc,by: 0).map{\n  qc_id, sample_id, checksum, file, genome, analysis -> [genome, qc_id, sample_id, file, analysis, checksum]\n}",
        "origin": [
            [
                "corrected_mzmlfiles_for_second_step",
                "P"
            ]
        ],
        "gives": [
            [
                "input_pipe_withcode_reordered",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "input_pipe_complete_first_step = input_pipe_withcode_reordered.combine(blastdbs, by: 0)",
        "origin": [
            [
                "input_pipe_withcode_reordered",
                "P"
            ]
        ],
        "gives": [
            [
                "input_pipe_complete_first_step",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "input_pipe_complete_first_step\n     .into{ input_pipe_complete_first_step_for_srm; input_pipe_complete_first_step_for_shotgun; input_pipe_complete_first_step_for_shotgun_qc4l_cid; input_pipe_complete_first_step_for_shotgun_qc4l_hcd; input_pipe_complete_first_step_for_shotgun_qc4l_etcid; input_pipe_complete_first_step_for_shotgun_qc4l_ethcd ; debug }",
        "origin": [
            [
                "input_pipe_complete_first_step",
                "P"
            ]
        ],
        "gives": [
            [
                "input_pipe_complete_first_step_for_srm",
                "P"
            ],
            [
                "input_pipe_complete_first_step_for_shotgun",
                "P"
            ],
            [
                "input_pipe_complete_first_step_for_shotgun_qc4l_cid",
                "P"
            ],
            [
                "input_pipe_complete_first_step_for_shotgun_qc4l_hcd",
                "P"
            ],
            [
                "input_pipe_complete_first_step_for_shotgun_qc4l_etcid",
                "P"
            ],
            [
                "input_pipe_complete_first_step_for_shotgun_qc4l_ethcd",
                "P"
            ],
            [
                "debug",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "pep_c4l_all = pep_c4l_for_delivery_fake.mix(pep_c4l_for_delivery, pep_checked_for_delivery)",
        "origin": [
            [
                "pep_c4l_for_delivery_fake",
                "P"
            ],
            [
                "pep_c4l_for_delivery",
                "P"
            ],
            [
                "pep_checked_for_delivery",
                "P"
            ]
        ],
        "gives": [
            [
                "pep_c4l_all",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ms2_spectral_for_delivery.join(tic_for_delivery).join(tot_psm_for_delivery).join(uni_peptides_for_delivery).join(uni_prots_for_delivery).join(median_itms2_for_delivery).join(mass_checked_for_delivery).join(median_checked_for_delivery).join(median_itms1_for_delivery).join(pep_c4l_all).into{jointJsons; jointJsonsAA}",
        "origin": [
            [
                "ms2_spectral_for_delivery",
                "P"
            ],
            [
                "tic_for_delivery",
                "P"
            ],
            [
                "tot_psm_for_delivery",
                "P"
            ],
            [
                "uni_peptides_for_delivery",
                "P"
            ],
            [
                "uni_prots_for_delivery",
                "P"
            ],
            [
                "median_itms2_for_delivery",
                "P"
            ],
            [
                "mass_checked_for_delivery",
                "P"
            ],
            [
                "median_checked_for_delivery",
                "P"
            ],
            [
                "median_itms1_for_delivery",
                "P"
            ],
            [
                "pep_c4l_all",
                "P"
            ]
        ],
        "gives": [
            [
                "jointJsons",
                "P"
            ],
            [
                "jointJsonsAA",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "jointJsons.choice( queueQC03, queueQC12 ) { a -> a  = 0\n } else { \njointJsons.choice( queueQC03, queueQC12 ) { a -> a  = 1 }\n }",
        "origin": [
            [
                "jointJsons",
                "P"
            ]
        ],
        "gives": [
            [
                "queueQC03",
                "P"
            ],
            [
                "queueQC12",
                "P"
            ],
            [
                "queueQC03",
                "P"
            ],
            [
                "queueQC12",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "queueQC03Grouped = queueQC03.map{ \n    def rawids = it[0].tokenize( '_' );\n    def orid = \"${rawids[0]}_${rawids[1]}_${rawids[2]}\";\n    def l = [orid]; \n    l.addAll([it.drop(1)]); \n    return l \n}.groupTuple(size:4)",
        "origin": [
            [
                "queueQC03",
                "P"
            ]
        ],
        "gives": [
            [
                "queueQC03Grouped",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "queueQC03ToBeSent = queueQC03Grouped.map{\n\tdef id = [it[0]]\n\tid.addAll([it.drop(1).flatten()]); \n\treturn id\n}",
        "origin": [
            [
                "queueQC03Grouped",
                "P"
            ]
        ],
        "gives": [
            [
                "queueQC03ToBeSent",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "queueQC12ToBeSent = queueQC12.map{ \n    def rawids = it[0].tokenize( '_' );\n    def orid = \"${rawids[0]}_${rawids[1]}\";\n    def l = [orid]; \n    l.addAll([it.drop(1)]); \n    return l \n}",
        "origin": [
            [
                "queueQC12",
                "P"
            ]
        ],
        "gives": [
            [
                "queueQC12ToBeSent",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "jsonToBeSent = queueQC12ToBeSent.mix(queueQC03ToBeSent)",
        "origin": [
            [
                "queueQC12ToBeSent",
                "P"
            ],
            [
                "queueQC03ToBeSent",
                "P"
            ]
        ],
        "gives": [
            [
                "jsonToBeSent",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "mZML_params_for_mapping.map{\n        def rawids = it[0].tokenize( '_' )\n        def sample_id = \"${rawids[0]}_${rawids[1]}\"\n        [sample_id , it[1], it[3], it[4] ]\n}.unique().into {mZML_params_for_delivery; cicco}",
        "origin": [
            [
                "mZML_params_for_mapping",
                "P"
            ]
        ],
        "gives": [
            [
                "mZML_params_for_delivery",
                "P"
            ],
            [
                "cicco",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "WF_IDs = WF_vals.toList().unique()",
        "origin": [
            [
                "WF_vals",
                "P"
            ]
        ],
        "gives": [
            [
                "WF_IDs",
                "P"
            ]
        ]
    }
}
{
    "get_test_data": {
        "name_process": "get_test_data",
        "string_process": " process get_test_data {\n      label 'internet_access'\n      output :\n         file 'data_is_ready' into ready_integrity, ready_import, ready_lr\n         file 'manifest' into testmanifest\n         file 'metadata' into testmetadata\n       when :\n         !params.stats_only && !params.dada2merge\n      script :\n      def datatype = params.longreads ? \"longreads\" : \"shortreads\"\n      \"\"\"\n      get_test_data.sh ${baseDir} 'data_is_ready' ${datatype} 'manifest' 'metadata' &> get_test_data.log 2>&1\n      \"\"\"\n   }",
        "nb_lignes_process": 12,
        "string_script": "      def datatype = params.longreads ? \"longreads\" : \"shortreads\"\n      \"\"\"\n      get_test_data.sh ${baseDir} 'data_is_ready' ${datatype} 'manifest' 'metadata' &> get_test_data.log 2>&1\n      \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ready_integrity",
            "ready_import",
            "ready_lr",
            "testmanifest",
            "testmetadata"
        ],
        "nb_outputs": 5,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'internet_access'"
        ],
        "when": "!params.stats_only && !params.dada2merge",
        "stub": ""
    },
    "data_integrity": {
        "name_process": "data_integrity",
        "string_process": " process data_integrity {\n    \n            label 'biopython_env'\n    \n        \tpublishDir \"${params.outdir}/${params.data_integrity_dirname}\", mode: 'copy', pattern: 'data_integrity.txt'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'data_integrity.txt'\n        \tpublishDir \"${params.outdir}/${params.data_integrity_dirname}\", mode: 'copy', pattern: '*.sort'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*.sort'\n    \n        \tinput :\n        \t\tfile manifest from manifest4integrity\n        \t\tfile metadata from metadata4integrity\n                        file ready from ready_integrity\n    \n        \toutput :\n        \t\tfile 'data_integrity.txt'\n        \t\tfile \"${metadata}.sort\" into metadata_sort\n        \t\tfile \"${manifest}.sort\" into manifest_sort\n    \n        \twhen :\n        \t\tparams.data_integrity_enable && !params.stats_only && !params.dada2merge\n        \tscript :\n        \tdef datatype = params.singleEnd ? \"single\" : \"paired\"\n        \t\"\"\"\n                data_integrity.py -e ${metadata} -a ${manifest} -p ${params.primer_filter} -r ${datatype} -t ${task.cpus} -c ${params.control_list} &> data_integrity.log 2>&1\n                \"\"\"\n        }",
        "nb_lignes_process": 25,
        "string_script": "        \tdef datatype = params.singleEnd ? \"single\" : \"paired\"\n        \t\"\"\"\n                data_integrity.py -e ${metadata} -a ${manifest} -p ${params.primer_filter} -r ${datatype} -t ${task.cpus} -c ${params.control_list} &> data_integrity.log 2>&1\n                \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "manifest4integrity",
            "metadata4integrity",
            "ready_integrity"
        ],
        "nb_inputs": 3,
        "outputs": [
            "metadata_sort",
            "manifest_sort"
        ],
        "nb_outputs": 2,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'biopython_env'",
            "publishDir \"${params.outdir}/${params.data_integrity_dirname}\", mode: 'copy', pattern: 'data_integrity.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'data_integrity.txt'",
            "publishDir \"${params.outdir}/${params.data_integrity_dirname}\", mode: 'copy', pattern: '*.sort'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*.sort'"
        ],
        "when": "params.data_integrity_enable && !params.stats_only && !params.dada2merge",
        "stub": ""
    },
    "q2_import": {
        "name_process": "q2_import",
        "string_process": " process q2_import {\n    \n    \tlabel 'qiime2_env1cpu'\n    \n    \tpublishDir \"${params.outdir}/${params.import_dirname}\", mode: 'copy', pattern: 'data.qz*'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_import -> \"cmd/${task.process}_complete.sh\" }\n    \n    \tinput :\n    \t\tfile q2_manifest from manifest\n                file ready from ready_import\n    \n    \toutput :\n    \t\tfile 'data.qza' into imported_data\n    \t\tfile 'data.qzv' into imported_visu\n    \t\tfile 'import_output' into imported_output\n    \t\tfile 'completecmd' into complete_cmd_import\n                    file 'v_qiime2.txt' into qiime2_version\n    \n    \twhen :\n    \t\t!params.stats_only && !params.dada2merge\n    \n    \tscript :\n    \t\"\"\"\n    \tq2_import.sh ${params.singleEnd} ${q2_manifest} data.qza data.qzv import_output completecmd &> q2_import.log 2>&1\n    \tqiime --version|grep 'q2cli'|cut -d' ' -f3 > v_qiime2.txt\n    \t\"\"\"\n    }",
        "nb_lignes_process": 27,
        "string_script": "    \t\"\"\"\n    \tq2_import.sh ${params.singleEnd} ${q2_manifest} data.qza data.qzv import_output completecmd &> q2_import.log 2>&1\n    \tqiime --version|grep 'q2cli'|cut -d' ' -f3 > v_qiime2.txt\n    \t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "manifest",
            "ready_import"
        ],
        "nb_inputs": 2,
        "outputs": [
            "imported_data",
            "imported_visu",
            "imported_output",
            "complete_cmd_import",
            "qiime2_version"
        ],
        "nb_outputs": 5,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env1cpu'",
            "publishDir \"${params.outdir}/${params.import_dirname}\", mode: 'copy', pattern: 'data.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_import -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only && !params.dada2merge",
        "stub": ""
    },
    "q2_cutadapt": {
        "name_process": "q2_cutadapt",
        "string_process": " process q2_cutadapt {\n        \n        \tlabel 'qiime2_env'\n        \n        \tpublishDir \"${params.outdir}/${params.trimmed_dirname}\", mode: 'copy', pattern: 'data*.qz*'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_cutadapt -> \"cmd/${task.process}_complete.sh\" }\n        \n        \tinput :\n        \t\tfile imported_data from imported_data\n        \n        \toutput :\n        \t\tfile 'data_trimmed.qza' into trimmed_data\n        \t\tfile 'data_trimmed.qzv' into trimmed_visu\n        \t\tfile 'trimmed_output' into trimmed_output\n        \t\tfile 'completecmd' into complete_cmd_cutadapt\n        \n        \twhen :\n        \t\tparams.cutadapt_enable && !params.stats_only && !params.dada2merge\n        \n        \tscript :\n        \t\"\"\"\n        \tq2_cutadapt.sh ${params.singleEnd} ${task.cpus} ${imported_data} ${params.primerF} ${params.primerR} ${params.errorRate} ${params.overlap} data_trimmed.qza data_trimmed.qzv trimmed_output completecmd &> q2_cutadapt.log 2>&1\n        \t\"\"\"\n        }",
        "nb_lignes_process": 23,
        "string_script": "        \t\"\"\"\n        \tq2_cutadapt.sh ${params.singleEnd} ${task.cpus} ${imported_data} ${params.primerF} ${params.primerR} ${params.errorRate} ${params.overlap} data_trimmed.qza data_trimmed.qzv trimmed_output completecmd &> q2_cutadapt.log 2>&1\n        \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "imported_data"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_data",
            "trimmed_visu",
            "trimmed_output",
            "complete_cmd_cutadapt"
        ],
        "nb_outputs": 4,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.trimmed_dirname}\", mode: 'copy', pattern: 'data*.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_cutadapt -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "params.cutadapt_enable && !params.stats_only && !params.dada2merge",
        "stub": ""
    },
    "q2_dada2": {
        "name_process": "q2_dada2",
        "string_process": " process q2_dada2 {\n    \n    \tlabel 'qiime2_env'\n    \n    \tpublishDir \"${params.outdir}/${params.dada2_dirname}\", mode: 'copy', pattern: '*.qz*'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_dada2 -> \"cmd/${task.process}_complete.sh\" }\n    \n    \tinput :\n    \t\tfile dada2_input from dada2_input\n    \t\tfile metadata from metadata4dada2\n    \n    \toutput :\n    \t\tfile 'rep_seqs.qza' into dada2_seqs_dbotu3, dada2_seqs_taxo, dada2_seqs_filtering_tax, dada2_seqs_decontam, dada2_seqs_phylo, dada2_seqs_picrust2, dada2_seqs_ancom\n    \t\tfile 'rep_seqs.qzv' into visu_repseps\n    \t\tfile 'table.qza' into dada2_table_dbotu3, dada2_table_filtering_tax, dada2_table_picrust2, dada2_table_ancom\n    \t\tfile 'table.qzv' into visu_table\n    \t\tfile 'stats.qza' into stats_table\n    \t\tfile 'stats.qzv' into visu_stats\n    \t\tfile 'dada2_output' into dada2_output\n    \t\tfile 'completecmd' into complete_cmd_dada2\n    \n    \twhen :\n    \t\t!params.stats_only && !params.dada2merge\n    \n    \tscript :\n    \t\"\"\"\n    \tq2_dada2.sh ${params.singleEnd} ${dada2_input} ${metadata} rep_seqs.qza rep_seqs.qzv table.qza table.qzv stats.qza stats.qzv dada2_output ${params.FtrimLeft} ${params.RtrimLeft} ${params.FtruncLen} ${params.RtruncLen} ${params.FmaxEE} ${params.RmaxEE} ${params.minQ} ${params.chimeras} ${task.cpus} completecmd &> q2_dada2.log 2>&1\n    \t\"\"\"\n    }",
        "nb_lignes_process": 28,
        "string_script": "    \t\"\"\"\n    \tq2_dada2.sh ${params.singleEnd} ${dada2_input} ${metadata} rep_seqs.qza rep_seqs.qzv table.qza table.qzv stats.qza stats.qzv dada2_output ${params.FtrimLeft} ${params.RtrimLeft} ${params.FtruncLen} ${params.RtruncLen} ${params.FmaxEE} ${params.RmaxEE} ${params.minQ} ${params.chimeras} ${task.cpus} completecmd &> q2_dada2.log 2>&1\n    \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dada2_input",
            "metadata4dada2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "dada2_seqs_dbotu3",
            "dada2_seqs_taxo",
            "dada2_seqs_filtering_tax",
            "dada2_seqs_decontam",
            "dada2_seqs_phylo",
            "dada2_seqs_picrust2",
            "dada2_seqs_ancom",
            "visu_repseps",
            "dada2_table_dbotu3",
            "dada2_table_filtering_tax",
            "dada2_table_picrust2",
            "dada2_table_ancom",
            "visu_table",
            "stats_table",
            "visu_stats",
            "dada2_output",
            "complete_cmd_dada2"
        ],
        "nb_outputs": 17,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.dada2_dirname}\", mode: 'copy', pattern: '*.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_dada2 -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only && !params.dada2merge",
        "stub": ""
    },
    "q2_dbotu3": {
        "name_process": "q2_dbotu3",
        "string_process": " process q2_dbotu3 {\n    \n          label 'qiime2_env'\n    \n        \tpublishDir \"${params.outdir}/${params.dbotu3_dirname}\", mode: 'copy', pattern: '*.qz*'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_dbotu3 -> \"cmd/${task.process}_complete.sh\" }\n    \n        \tinput :\n        \t\tfile table from dada2_table_dbotu3\n        \t\tfile seqs from dada2_seqs_dbotu3\n        \t\tfile metadata from metadata4dbotu3\n    \n        \toutput :\n        \t\tfile 'dbotu3_details.txt' into dbotu3_details\n        \t\tfile 'dbotu3_seqs.qza' into dbotu3_seqs_decontam, dbotu3_seqs_taxo, dbotu3_seqs_filtering_tax, dbotu3_seqs_phylo, dbotu3_seqs_picrust2, dbotu3_seqs_ancom\n        \t\tfile 'dbotu3_seqs.qzv' into dbotu3_seqs_visu\n        \t\tfile 'dbotu3_table.qza' into dbotu3_table, dbotu3_table_filtering_tax, dbotu3_table_picrust2, dbotu3_table_ancom\n        \t\tfile 'dbotu3_table.qzv' into dbotu3_table_visu\n        \t\tfile 'dbotu3_output' into dbotu3_output\n        \t\tfile 'completecmd' into complete_cmd_dbotu3\n    \n        \twhen :\n        \t\t!params.stats_only && !params.dada2merge && params.dbotu3_enable\n    \n        \tscript :\n        \t\"\"\"\n        \tq2_dbotu3.sh ${table} ${seqs} ${metadata} dbotu3_details.txt dbotu3_seqs.qza dbotu3_seqs.qzv dbotu3_table.qza dbotu3_table.qzv dbotu3_output ${params.gen_crit} ${params.abund_crit} ${params.pval_crit} completecmd &> q2_dbotu3.log 2>&1\n        \t\"\"\"\n        }",
        "nb_lignes_process": 28,
        "string_script": "        \t\"\"\"\n        \tq2_dbotu3.sh ${table} ${seqs} ${metadata} dbotu3_details.txt dbotu3_seqs.qza dbotu3_seqs.qzv dbotu3_table.qza dbotu3_table.qzv dbotu3_output ${params.gen_crit} ${params.abund_crit} ${params.pval_crit} completecmd &> q2_dbotu3.log 2>&1\n        \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dada2_table_dbotu3",
            "dada2_seqs_dbotu3",
            "metadata4dbotu3"
        ],
        "nb_inputs": 3,
        "outputs": [
            "dbotu3_details",
            "dbotu3_seqs_decontam",
            "dbotu3_seqs_taxo",
            "dbotu3_seqs_filtering_tax",
            "dbotu3_seqs_phylo",
            "dbotu3_seqs_picrust2",
            "dbotu3_seqs_ancom",
            "dbotu3_seqs_visu",
            "dbotu3_table",
            "dbotu3_table_filtering_tax",
            "dbotu3_table_picrust2",
            "dbotu3_table_ancom",
            "dbotu3_table_visu",
            "dbotu3_output",
            "complete_cmd_dbotu3"
        ],
        "nb_outputs": 15,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.dbotu3_dirname}\", mode: 'copy', pattern: '*.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_dbotu3 -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only && !params.dada2merge && params.dbotu3_enable",
        "stub": ""
    },
    "q2_dada2_merge": {
        "name_process": "q2_dada2_merge",
        "string_process": " process q2_dada2_merge {\n    \n                label 'qiime2_env'\n    \n                publishDir \"${params.outdir}/${params.dada2_dirname}/merged\", mode: 'copy', pattern: '*.qza'\n                publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'dada2_output'\n                publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_dada2merge -> \"cmd/${task.process}_complete.sh\" }\n    \n                input :\n                        path table_dir from dada2merge_tabledir_ch\n                        path seq_dir from dada2merge_repseqsdir_ch\n                        path metadata_merge from metadata_merge_ch\n    \n                output :\n                        file 'merged_table.qza' into merge_table_picrust2, merge_table_ancom\n                        file 'merged_seq.qza' into merge_seqs_taxo, merge_seqs_phylo, merge_seqs_picrust2, merge_seqs_ancom\n                        file 'dada2_output' into dada2merge_output\n                        file 'completecmd' into complete_cmd_dada2merge\n    \n                when :\n                    params.dada2merge\n    \n                script :\n                \"\"\"\n                q2_merge.sh ${table_dir} ${seq_dir} merged_table.qza merged_seq.qza ${metadata_merge} merged_table.qzv dada2_output merged_seq.qzv completecmd &> q2_merge.log 2>&1\n                \"\"\"\n        }",
        "nb_lignes_process": 25,
        "string_script": "                \"\"\"\n                q2_merge.sh ${table_dir} ${seq_dir} merged_table.qza merged_seq.qza ${metadata_merge} merged_table.qzv dada2_output merged_seq.qzv completecmd &> q2_merge.log 2>&1\n                \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dada2merge_tabledir_ch",
            "dada2merge_repseqsdir_ch",
            "metadata_merge_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "merge_table_picrust2",
            "merge_table_ancom",
            "merge_seqs_taxo",
            "merge_seqs_phylo",
            "merge_seqs_picrust2",
            "merge_seqs_ancom",
            "dada2merge_output",
            "complete_cmd_dada2merge"
        ],
        "nb_outputs": 8,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.dada2_dirname}/merged\", mode: 'copy', pattern: '*.qza'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'dada2_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_dada2merge -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "params.dada2merge",
        "stub": ""
    },
    "q2_taxonomy": {
        "name_process": "q2_taxonomy",
        "string_process": " process q2_taxonomy {\n           label 'qiime2_highRAM'\n\n           publishDir \"${params.outdir}/${params.taxo_dirname}\", mode: 'copy', pattern: '*.qz*'\n           publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'taxo_output'\n           publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'ASV_taxonomy.tsv'\n           publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'ASV_table*'\n           publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_taxo -> \"cmd/${task.process}_complete.sh\" }\n\n           input : \n                file repseqs_taxo from seqs_taxo\n    \t\tfile summary_output from taxonomy_output\n           output :\n    \t\tfile 'taxonomy.qza' into data_taxonomy_filtering_tax, data_taxonomy_ancom\n    \t\tfile 'taxonomy.qzv' into visu_taxonomy\n    \t\tfile 'ASV_taxonomy.tsv' into taxonomy_tsv, taxonomy_tsv_filtering_tax\n    \t\tfile 'taxo_output' into taxo_output\n    \t\tfile 'ASV_table_with_taxonomy.biom' into biom\n    \t\tfile 'ASV_table_with_taxonomy.tsv' into biom_tsv, biom_tsv_decontam\n    \t\tfile 'taxonomic_database.qza' optional true into trained_database\n    \t\tfile 'seqs_db_amplicons.qza' optional true into seqs_db_filtered\n    \t\tfile 'completecmd' into complete_cmd_taxo\n           when :\n                !params.stats_only\n\n           script :\n           \"\"\"\n           q2_taxo.sh ${task.cpus} ${params.extract_db} ${params.primerF} ${params.primerR} ${params.confidence} ${repseqs_taxo} taxonomy.qza taxonomy.qzv taxo_output ASV_taxonomy.tsv ${summary_output} ASV_table_with_taxonomy.biom ASV_table_with_taxonomy.tsv taxonomic_database.qza seqs_db_amplicons.qza completecmd tmpdir ${params.database} ${params.seqs_db} ${params.taxo_db} &> q2_taxo.log 2>&1\n           \"\"\" \n    }",
        "nb_lignes_process": 28,
        "string_script": "           \"\"\"\n           q2_taxo.sh ${task.cpus} ${params.extract_db} ${params.primerF} ${params.primerR} ${params.confidence} ${repseqs_taxo} taxonomy.qza taxonomy.qzv taxo_output ASV_taxonomy.tsv ${summary_output} ASV_table_with_taxonomy.biom ASV_table_with_taxonomy.tsv taxonomic_database.qza seqs_db_amplicons.qza completecmd tmpdir ${params.database} ${params.seqs_db} ${params.taxo_db} &> q2_taxo.log 2>&1\n           \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seqs_taxo",
            "taxonomy_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "data_taxonomy_filtering_tax",
            "data_taxonomy_ancom",
            "visu_taxonomy",
            "taxonomy_tsv",
            "taxonomy_tsv_filtering_tax",
            "taxo_output",
            "biom",
            "biom_tsv",
            "biom_tsv_decontam",
            "trained_database",
            "seqs_db_filtered",
            "complete_cmd_taxo"
        ],
        "nb_outputs": 12,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_highRAM'",
            "publishDir \"${params.outdir}/${params.taxo_dirname}\", mode: 'copy', pattern: '*.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'taxo_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'ASV_taxonomy.tsv'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'ASV_table*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_taxo -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only",
        "stub": ""
    },
    "q2_filtering_tax": {
        "name_process": "q2_filtering_tax",
        "string_process": " process q2_filtering_tax {\n        \n             label 'qiime2_env'\n\n             publishDir \"${params.outdir}/${params.tax_filtering_dirname}\", mode: 'copy', pattern: '*.qz*'\n             publishDir \"${params.outdir}/${params.report_dirname}/tax_filtering\", mode: 'copy', pattern: 'tax_filtered_table_with_tax.*'\n             publishDir \"${params.outdir}/${params.report_dirname}/tax_filtering\", mode: 'copy', pattern: 'tax_filtered_output'\n             publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'\n             publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_filtering_tax -> \"cmd/${task.process}_complete.sh\" }\n\n             input :\n                 file asv_table from asv_table\n                 file asv_tax from data_taxonomy_filtering_tax\n                 file asv_seq from asv_seq\n                 file asv_tax_tsv from taxonomy_tsv_filtering_tax\n                 file metadata from metadata_filtering_tax\n             output :\n                 file 'tax_filtered_table.qza' into tax_filtered_table, tax_filtered_table_picrust2, tax_filtered_table_ancom\n                 file 'tax_filtered_seq.qza' into tax_filtered_seq, tax_filtered_seq_picrust2\n                 file 'tax_filtered_table.qzv' into tax_filtered_table_visu\n                 file 'tax_filtered_output' into tax_filtered_output\n                 file 'tax_filtered_seq.qzv' into tax_filtered_seq_visu\n                 file 'tax_filtered_table_with_tax.biom' into tax_filtered_table_biom\n                 file 'tax_filtered_table_with_tax.tsv' into tax_filtered_table_tsv, tax_filtered_table_tsv_stats\n                 file 'completecmd' into complete_cmd_filtering_tax\n             when :\n                 !params.stats_only\n             script :\n             \"\"\"\n             q2_filtering_tax.sh ${asv_table} ${asv_tax} ${params.tax_to_exclude} ${params.tax_to_include} tax_filtered_table.qza ${asv_seq} tax_filtered_seq.qza tax_filtered_table.qzv ${metadata} tax_filtered_output tax_filtered_seq.qzv ${asv_tax_tsv} tax_filtered_table_with_tax.biom tax_filtered_table_with_tax.tsv completecmd &> q2_filtering_tax.log 2>&1\n             \"\"\"\n        }",
        "nb_lignes_process": 30,
        "string_script": "             \"\"\"\n             q2_filtering_tax.sh ${asv_table} ${asv_tax} ${params.tax_to_exclude} ${params.tax_to_include} tax_filtered_table.qza ${asv_seq} tax_filtered_seq.qza tax_filtered_table.qzv ${metadata} tax_filtered_output tax_filtered_seq.qzv ${asv_tax_tsv} tax_filtered_table_with_tax.biom tax_filtered_table_with_tax.tsv completecmd &> q2_filtering_tax.log 2>&1\n             \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "asv_table",
            "data_taxonomy_filtering_tax",
            "asv_seq",
            "taxonomy_tsv_filtering_tax",
            "metadata_filtering_tax"
        ],
        "nb_inputs": 5,
        "outputs": [
            "tax_filtered_table",
            "tax_filtered_table_picrust2",
            "tax_filtered_table_ancom",
            "tax_filtered_seq",
            "tax_filtered_seq_picrust2",
            "tax_filtered_table_visu",
            "tax_filtered_output",
            "tax_filtered_seq_visu",
            "tax_filtered_table_biom",
            "tax_filtered_table_tsv",
            "tax_filtered_table_tsv_stats",
            "complete_cmd_filtering_tax"
        ],
        "nb_outputs": 12,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.tax_filtering_dirname}\", mode: 'copy', pattern: '*.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/tax_filtering\", mode: 'copy', pattern: 'tax_filtered_table_with_tax.*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/tax_filtering\", mode: 'copy', pattern: 'tax_filtered_output'",
            "publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_filtering_tax -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only",
        "stub": ""
    },
    "microDecon_step1": {
        "name_process": "microDecon_step1",
        "string_process": " process microDecon_step1 {\n    \n        \tlabel 'microdecon_env'\n    \n        \tpublishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_table.tsv'\n        \tpublishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'abundance_removed.txt'\n        \tpublishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'ASV_removed.txt'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_table.tsv'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'decontaminated_ASV_table.tsv'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'abundance_removed.txt'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'ASV_removed.txt'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_microDecon -> \"cmd/${task.process}_complete.sh\" }\n    \n        \tinput :\n        \t\tfile microDecon_table from microDecon_table\n    \n        \toutput :\n        \t\tfile 'decontaminated_ASV_table.tsv' into decontam_table, decontam_table_step2, decontam_table_step3\n        \t\tfile 'abundance_removed.txt' into abund_removed\n        \t\tfile 'ASV_removed.txt' into ASV_removed\n        \t\tfile 'completecmd' into complete_cmd_microDecon\n                        file 'v_microdecon.txt' into microdecon_version\n    \n        \twhen :\n        \t\t!params.stats_only && !params.dada2merge && params.microDecon_enable\n    \n        \tshell :\n        \t\"\"\"\n        \tsed '1d' ${microDecon_table} > microDecon_table\n        \tsed -i 's/#OTU ID/ASV_ID/g' microDecon_table\n            sed -i \"s/'//g\" microDecon_table\n        \tmicroDecon.R microDecon_table ${params.control_list} ${params.nb_controls} ${params.nb_samples} decontaminated_ASV_table.tsv abundance_removed.txt ASV_removed.txt &> microDecon.log 2>&1\n        \tcp ${baseDir}/bin/microDecon.R completecmd &>> microDecon.log 2>&1\n            Rscript -e \"write(x=as.character(packageVersion('microDecon')), file='v_microdecon.txt')\"\n    \n        \t\"\"\"\n        }",
        "nb_lignes_process": 36,
        "string_script": "        \t\"\"\"\n        \tsed '1d' ${microDecon_table} > microDecon_table\n        \tsed -i 's/#OTU ID/ASV_ID/g' microDecon_table\n            sed -i \"s/'//g\" microDecon_table\n        \tmicroDecon.R microDecon_table ${params.control_list} ${params.nb_controls} ${params.nb_samples} decontaminated_ASV_table.tsv abundance_removed.txt ASV_removed.txt &> microDecon.log 2>&1\n        \tcp ${baseDir}/bin/microDecon.R completecmd &>> microDecon.log 2>&1\n            Rscript -e \"write(x=as.character(packageVersion('microDecon')), file='v_microdecon.txt')\"\n    \n        \t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "microDecon_table"
        ],
        "nb_inputs": 1,
        "outputs": [
            "decontam_table",
            "decontam_table_step2",
            "decontam_table_step3",
            "abund_removed",
            "ASV_removed",
            "complete_cmd_microDecon",
            "microdecon_version"
        ],
        "nb_outputs": 7,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'microdecon_env'",
            "publishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_table.tsv'",
            "publishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'abundance_removed.txt'",
            "publishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'ASV_removed.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_table.tsv'",
            "publishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'decontaminated_ASV_table.tsv'",
            "publishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'abundance_removed.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'ASV_removed.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_microDecon -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only && !params.dada2merge && params.microDecon_enable",
        "stub": ""
    },
    "microDecon_step2": {
        "name_process": "microDecon_step2",
        "string_process": " process microDecon_step2 {\n    \n        \tlabel 'qiime2_env'\n    \n        \tpublishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_table.qza'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'decontaminated_ASV_table.qza'\n    \n        \tinput :\n        \t\tfile table4microDecon from decontam_table_step2\n    \n        \toutput :\n        \t\tfile 'decontaminated_ASV_table.qza' into decontam_table_qza, decontam_table_picrust2, decontam_table_ancom\n    \n        \twhen :\n        \t\t!params.stats_only && !params.dada2merge && params.microDecon_enable\n    \n        \tshell :\n        \t\"\"\"\n        \tbiom convert -i ${table4microDecon} -o decontaminated_ASV_table.biom --to-hdf5 --table-type=\"OTU table\" --process-obs-metadata taxonomy\n        \tqiime tools import --input-path decontaminated_ASV_table.biom --type 'FeatureTable[Frequency]' --input-format BIOMV210Format --output-path decontaminated_ASV_table.qza\n        \t\"\"\"\n        }",
        "nb_lignes_process": 20,
        "string_script": "        \t\"\"\"\n        \tbiom convert -i ${table4microDecon} -o decontaminated_ASV_table.biom --to-hdf5 --table-type=\"OTU table\" --process-obs-metadata taxonomy\n        \tqiime tools import --input-path decontaminated_ASV_table.biom --type 'FeatureTable[Frequency]' --input-format BIOMV210Format --output-path decontaminated_ASV_table.qza\n        \t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BioMe",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/biome",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "decontam_table_step2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "decontam_table_qza",
            "decontam_table_picrust2",
            "decontam_table_ancom"
        ],
        "nb_outputs": 3,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_table.qza'",
            "publishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'decontaminated_ASV_table.qza'"
        ],
        "when": "!params.stats_only && !params.dada2merge && params.microDecon_enable",
        "stub": ""
    },
    "microDecon_step3": {
        "name_process": "microDecon_step3",
        "string_process": " process microDecon_step3 {\n    \n        \tlabel 'seqtk_env'\n    \n        \tpublishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_ID.txt'\n        \tpublishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV.fasta'\n        \tpublishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'decontaminated_ASV.fasta'\n    \n        \tinput :\n        \t\tfile decontam_table from decontam_table_step3\n        \t\tfile dada2_output from decontam_output\n    \n        \toutput :\n        \t\tfile 'decontaminated_ASV_ID.txt' into decontam_ASV_ID\n        \t\tfile 'decontaminated_ASV.fasta' into decontam_ASV_fasta\n    \n        \twhen :\n        \t\t!params.stats_only && !params.dada2merge && params.microDecon_enable\n    \n        \tshell :\n        \t\"\"\"\n        \tcut -d \\$'\\t' -f1 ${decontam_table} | sed '1d' > decontaminated_ASV_ID.txt\n        \tseqtk subseq ${dada2_output}/sequences.fasta decontaminated_ASV_ID.txt > decontaminated_ASV.fasta\n        \t\"\"\"\n        }",
        "nb_lignes_process": 23,
        "string_script": "        \t\"\"\"\n        \tcut -d \\$'\\t' -f1 ${decontam_table} | sed '1d' > decontaminated_ASV_ID.txt\n        \tseqtk subseq ${dada2_output}/sequences.fasta decontaminated_ASV_ID.txt > decontaminated_ASV.fasta\n        \t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "decontam_table_step3",
            "decontam_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "decontam_ASV_ID",
            "decontam_ASV_fasta"
        ],
        "nb_outputs": 2,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'seqtk_env'",
            "publishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV_ID.txt'",
            "publishDir \"${params.outdir}/${params.microDecon_dirname}\", mode: 'copy', pattern: 'decontaminated_ASV.fasta'",
            "publishDir \"${params.outdir}/${params.report_dirname}/microDecon\", mode: 'copy', pattern: 'decontaminated_ASV.fasta'"
        ],
        "when": "!params.stats_only && !params.dada2merge && params.microDecon_enable",
        "stub": ""
    },
    "microDecon_step4": {
        "name_process": "microDecon_step4",
        "string_process": " process microDecon_step4 {\n    \n        \tlabel 'qiime2_env'\n    \n        \tpublishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: '*.qza'\n    \n        \tinput :\n        \t\tfile ASV_fasta from decontam_ASV_fasta\n    \n        \toutput :\n        \t\tfile 'decontam_seqs.qza' into decontam_seqs_qza, decontam_seqs_phylo, decontam_seqs_picrust2, decontam_seqs_ancom\n    \n        \twhen :\n        \t\t!params.stats_only && !params.dada2merge && params.microDecon_enable\n    \n        \tshell :\n        \t\"\"\"\n                qiime tools import --input-path ${ASV_fasta} --output-path decontam_seqs.qza --type 'FeatureData[Sequence]'\n        \t\"\"\"\n        }",
        "nb_lignes_process": 18,
        "string_script": "        \t\"\"\"\n                qiime tools import --input-path ${ASV_fasta} --output-path decontam_seqs.qza --type 'FeatureData[Sequence]'\n        \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "decontam_ASV_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "decontam_seqs_qza",
            "decontam_seqs_phylo",
            "decontam_seqs_picrust2",
            "decontam_seqs_ancom"
        ],
        "nb_outputs": 4,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: '*.qza'"
        ],
        "when": "!params.stats_only && !params.dada2merge && params.microDecon_enable",
        "stub": ""
    },
    "lr_mapping": {
        "name_process": "lr_mapping",
        "string_process": " process lr_mapping {\n     label 'lr_mapping_env'\n   \n     publishDir \"${params.outdir}/${params.lr_mapping_dirname}\", mode: 'copy', pattern: '*.bam'\n     publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'\n   \n     input:\n       set sample, file(fastq) from longreadsmanifest\n       file ready from ready_lr\n   \n     output:\n       file \"*.bam\" into lr_mapped\n       file 'lr_mapping.ok' into process_lr_mapping_report\n       file 'lr_samtools-sort.log' into process_lr_sort_report\n       file 'v_minimap2.txt' into v_minimap2_version\n   \n     shell:\n       \"\"\"\n       minimap2 -t ${task.cpus} -K 25M -ax ${params.lr_type} -L ${params.lr_tax_fna} ${fastq} | samtools view -h -F0xe00 | samtools sort -o ${sample}.bam -O bam - &> lr_minimap2.log 2>&1\n       touch lr_mapping.ok\n       samtools index ${sample}.bam &> lr_samtools-sort.log 2>&1\n       touch lr_samtools-sort.ok\n       minimap2 --version > v_minimap2.txt\n       \"\"\"\n   }",
        "nb_lignes_process": 23,
        "string_script": "       \"\"\"\n       minimap2 -t ${task.cpus} -K 25M -ax ${params.lr_type} -L ${params.lr_tax_fna} ${fastq} | samtools view -h -F0xe00 | samtools sort -o ${sample}.bam -O bam - &> lr_minimap2.log 2>&1\n       touch lr_mapping.ok\n       samtools index ${sample}.bam &> lr_samtools-sort.log 2>&1\n       touch lr_samtools-sort.ok\n       minimap2 --version > v_minimap2.txt\n       \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "longreadsmanifest",
            "ready_lr"
        ],
        "nb_inputs": 2,
        "outputs": [
            "lr_mapped",
            "process_lr_mapping_report",
            "process_lr_sort_report",
            "v_minimap2_version"
        ],
        "nb_outputs": 4,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'lr_mapping_env'",
            "publishDir \"${params.outdir}/${params.lr_mapping_dirname}\", mode: 'copy', pattern: '*.bam'",
            "publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern: 'v_*.txt'"
        ],
        "when": "",
        "stub": ""
    },
    "lr_getfasta": {
        "name_process": "lr_getfasta",
        "string_process": " process lr_getfasta {\n      label 'seqtk_env'\n      input : \n         file(fastq) from longreadstofasta\n\n      output :\n         file 'lr_sequences.fasta' into lr_sequences\n\n      shell :\n      \"\"\"\n         seqtk seq -a ${fastq} > 'lr_sequences.fasta'\n      \"\"\"\n   }",
        "nb_lignes_process": 11,
        "string_script": "      \"\"\"\n         seqtk seq -a ${fastq} > 'lr_sequences.fasta'\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "longreadstofasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "lr_sequences"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'seqtk_env'"
        ],
        "when": "",
        "stub": ""
    },
    "lr_get_taxonomy": {
        "name_process": "lr_get_taxonomy",
        "string_process": " process lr_get_taxonomy {\n     label 'biopython_env'\n \n     publishDir \"${params.outdir}/${params.lr_taxonomy_dirname}\", mode: 'copy', pattern: '*.tsv'\n   \n     input:\n       file '*' from lr_mapped.collect()\n   \n     output:\n       file 'samples.tsv' into lr_biom_tsv\n       file 'lr_count_table.ok' into process_lr_taxonomy_report\n   \n     shell:\n       \"\"\"\n       lr_count_table_minimap2.py -p \".\" -t \"${params.lr_taxo_flat}\" -r ${params.lr_rank} -o samples.tsv &> lr_count_table.log 2>&1\n       touch lr_count_table.ok\n       \"\"\"\n   }",
        "nb_lignes_process": 16,
        "string_script": "       \"\"\"\n       lr_count_table_minimap2.py -p \".\" -t \"${params.lr_taxo_flat}\" -r ${params.lr_rank} -o samples.tsv &> lr_count_table.log 2>&1\n       touch lr_count_table.ok\n       \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lr_mapped"
        ],
        "nb_inputs": 1,
        "outputs": [
            "lr_biom_tsv",
            "process_lr_taxonomy_report"
        ],
        "nb_outputs": 2,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'biopython_env'",
            "publishDir \"${params.outdir}/${params.lr_taxonomy_dirname}\", mode: 'copy', pattern: '*.tsv'"
        ],
        "when": "",
        "stub": ""
    },
    "q2_phylogeny": {
        "name_process": "q2_phylogeny",
        "string_process": " process q2_phylogeny {\n    \n    \tlabel 'qiime2_env'\n    \n    \tpublishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: '*.qza'\n    \tpublishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: '*.txt'\n    \tpublishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: 'tree_export_dir'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'tree_export_dir'\n    \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_phylo -> \"cmd/${task.process}_complete.sh\" }\n    \n    \tinput :\n    \t\tfile repseqs_phylo from seqs_phylo\n    \n    \toutput :\n    \t\tfile 'aligned_repseq.qza' into aligned_repseq\n    \t\tfile 'masked-aligned_repseq.qza' into masked_aligned\n    \t\tfile 'tree.qza' into tree\n    \t\tfile 'tree.log' into tree_bestmodel_log\n    \t\tfile 'rooted_tree.qza' into rooted_tree\n    \t\tfile 'tree_export_dir' into tree_export_dir\n    \t\tfile 'tree_export.log' into tree_export_log\n    \t\tfile 'tree.nwk' into newick_phylo\n    \t\tfile 'completecmd' into complete_cmd_phylogeny\n    \n    \twhen :\n    \t    !params.stats_only\n    \n    \tscript :\n    \t\"\"\"\n    \tq2_phylogeny.sh ${repseqs_phylo} aligned_repseq.qza masked-aligned_repseq.qza tree.qza tree.log rooted_tree.qza tree_export_dir tree_export.log completecmd ${task.cpus} &>> q2_phylogeny.log 2>&1\n    \tcp tree_export_dir/tree.nwk tree.nwk &>> q2_phylogeny.log 2>&1\n    \t\"\"\"\n    }",
        "nb_lignes_process": 31,
        "string_script": "    \t\"\"\"\n    \tq2_phylogeny.sh ${repseqs_phylo} aligned_repseq.qza masked-aligned_repseq.qza tree.qza tree.log rooted_tree.qza tree_export_dir tree_export.log completecmd ${task.cpus} &>> q2_phylogeny.log 2>&1\n    \tcp tree_export_dir/tree.nwk tree.nwk &>> q2_phylogeny.log 2>&1\n    \t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seqs_phylo"
        ],
        "nb_inputs": 1,
        "outputs": [
            "aligned_repseq",
            "masked_aligned",
            "tree",
            "tree_bestmodel_log",
            "rooted_tree",
            "tree_export_dir",
            "tree_export_log",
            "newick_phylo",
            "complete_cmd_phylogeny"
        ],
        "nb_outputs": 9,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: '*.qza'",
            "publishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: '*.txt'",
            "publishDir \"${params.outdir}/${params.phylogeny_dirname}\", mode: 'copy', pattern: 'tree_export_dir'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'tree_export_dir'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd', saveAs : { complete_cmd_phylo -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only",
        "stub": ""
    },
    "q2_picrust2_analysis": {
        "name_process": "q2_picrust2_analysis",
        "string_process": " process q2_picrust2_analysis {\n   \n       \tlabel 'qiime2_env'\n   \n       \tpublishDir \"${params.outdir}/${params.picrust2_dirname}\", mode: 'copy', pattern: 'q2-picrust2_output/*'\n       \tpublishDir \"${params.outdir}/${params.picrust2_dirname}\", mode: 'copy', pattern: 'q2-picrust2_output/*_exported/*.tsv'\n       \tpublishDir \"${params.outdir}/${params.report_dirname}/picrust2_output\", mode: 'copy', pattern: 'q2-picrust2_output/*'\n       \tpublishDir \"${params.outdir}/${params.report_dirname}/picrust2_output\", mode: 'copy', pattern: 'q2-picrust2_output/*_exported/*.tsv'\n       \tpublishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'complete_picrust2_cmd', saveAs : { complete_picrust2_cmd -> \"cmd/${task.process}_complete.sh\" }\n   \n       \tinput :\n       \t\tfile seqs_picrust2 from seqs_picrust2\n       \t\tfile table_picrust2 from table_picrust2\n   \n       \toutput :\n       \t\tfile 'q2-picrust2_output/ec_metagenome.qza' into EC_predictions\n       \t\tfile 'q2-picrust2_output/ec_metagenome.qzv' into EC_predictions_visu\n       \t\tfile 'q2-picrust2_output/ec_metagenome_exported/ec_metagenome_predictions*.tsv' into EC_predictions_tsv\n       \t\tfile 'q2-picrust2_output/ko_metagenome.qza' into KO_predictions\n       \t\tfile 'q2-picrust2_output/ko_metagenome.qzv' into KO_predictions_visu\n       \t\tfile 'q2-picrust2_output/ko_metagenome_exported/ko_metagenome_predictions*.tsv' into KO_predictions_tsv\n       \t\tfile 'q2-picrust2_output/pathway_abundance.qza' into pathway_predictions\n       \t\tfile 'q2-picrust2_output/pathway_abundance_visu' into pathway_predictions_visu\n       \t\tfile 'q2-picrust2_output/pathway_abundance_exported/pathway_abundance_predictions*.tsv' into pathway_predictions_tsv\n       \t\tfile 'complete_picrust2_cmd' into complete_picrust2_cmd\n   \n       \twhen :\n       \t\t!params.stats_only\n   \n       \tscript :\n       \t\"\"\"\n       \tq2_picrust2.sh ${table_picrust2} ${seqs_picrust2} q2-picrust2_output ${task.cpus} ${params.method} ${params.nsti} complete_picrust2_cmd &> q2_picrust2.log 2>&1\n       \t\"\"\"\n       }",
        "nb_lignes_process": 32,
        "string_script": "       \t\"\"\"\n       \tq2_picrust2.sh ${table_picrust2} ${seqs_picrust2} q2-picrust2_output ${task.cpus} ${params.method} ${params.nsti} complete_picrust2_cmd &> q2_picrust2.log 2>&1\n       \t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seqs_picrust2",
            "table_picrust2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "EC_predictions",
            "EC_predictions_visu",
            "EC_predictions_tsv",
            "KO_predictions",
            "KO_predictions_visu",
            "KO_predictions_tsv",
            "pathway_predictions",
            "pathway_predictions_visu",
            "pathway_predictions_tsv",
            "complete_picrust2_cmd"
        ],
        "nb_outputs": 10,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.picrust2_dirname}\", mode: 'copy', pattern: 'q2-picrust2_output/*'",
            "publishDir \"${params.outdir}/${params.picrust2_dirname}\", mode: 'copy', pattern: 'q2-picrust2_output/*_exported/*.tsv'",
            "publishDir \"${params.outdir}/${params.report_dirname}/picrust2_output\", mode: 'copy', pattern: 'q2-picrust2_output/*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/picrust2_output\", mode: 'copy', pattern: 'q2-picrust2_output/*_exported/*.tsv'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'complete_picrust2_cmd', saveAs : { complete_picrust2_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only",
        "stub": ""
    },
    "q2_picrust2_stats": {
        "name_process": "q2_picrust2_stats",
        "string_process": " process q2_picrust2_stats {\n   \n           tag \"$picrust_vars\"\n           label 'r_stats_env'\n           label 'internet_access'\n   \n           publishDir \"${params.outdir}/${params.report_dirname}/picrust2_output\", mode: 'copy', pattern: '*functional_predictions_NMDS*'\n           publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'complete_picrust2_stats_cmd', saveAs : { complete_picrust2_stats_cmd -> \"cmd/${task.process}_complete.sh\" }\n   \n           input :\n               file ec_metagenome from EC_predictions_tsv\n               file ko_metagenome from KO_predictions_tsv\n               file metacyc_predictions_ from pathway_predictions_tsv\n               file metadata from metadata4picrust2\n               each picrust_vars from var_picrust2\n   \n           output :\n               file '*functional_predictions_NMDS*' into functional_pred_NMDS\n               file 'complete_picrust2_stats_cmd' into complete_picrust2_stats_cmd\n   \n           when :\n               !params.stats_only\n   \n           script :\n           \"\"\"\n           functional_predictions.R ec_metagenome_predictions_with-descriptions.tsv ko_metagenome_predictions_with-descriptions.tsv pathway_abundance_predictions_with-descriptions.tsv ${metadata} ${picrust_vars} functional_predictions_NMDS_${picrust_vars} ${params.microDecon_enable} ${params.control_list} &> picrust2_stats.log 2>&1\n           cp ${baseDir}/bin/functional_predictions.R complete_picrust2_stats_cmd &>> picrust2_stats.log 2>&1\n           \"\"\"\n       }",
        "nb_lignes_process": 27,
        "string_script": "           \"\"\"\n           functional_predictions.R ec_metagenome_predictions_with-descriptions.tsv ko_metagenome_predictions_with-descriptions.tsv pathway_abundance_predictions_with-descriptions.tsv ${metadata} ${picrust_vars} functional_predictions_NMDS_${picrust_vars} ${params.microDecon_enable} ${params.control_list} &> picrust2_stats.log 2>&1\n           cp ${baseDir}/bin/functional_predictions.R complete_picrust2_stats_cmd &>> picrust2_stats.log 2>&1\n           \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "EC_predictions_tsv",
            "KO_predictions_tsv",
            "pathway_predictions_tsv",
            "metadata4picrust2",
            "var_picrust2"
        ],
        "nb_inputs": 5,
        "outputs": [
            "functional_pred_NMDS",
            "complete_picrust2_stats_cmd"
        ],
        "nb_outputs": 2,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$picrust_vars\"",
            "label 'r_stats_env'",
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}/picrust2_output\", mode: 'copy', pattern: '*functional_predictions_NMDS*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'complete_picrust2_stats_cmd', saveAs : { complete_picrust2_stats_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only",
        "stub": ""
    },
    "q2_ancom": {
        "name_process": "q2_ancom",
        "string_process": " process q2_ancom {\n   \n       tag \"$ancom_var\"\n       label 'qiime2_env'\n   \n       publishDir \"${params.outdir}/${params.ancom_dirname}\", mode: 'copy', pattern: '*.qz*'\n       publishDir \"${params.outdir}/${params.report_dirname}/ancom_output\", mode: 'copy', pattern: 'export_ancom_*'\n       publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd_ancom', saveAs : { completecmd_ancom -> \"cmd/${task.process}_complete.sh\" }\n   \n       input :\n           file table4ancom from table_ancom\n           file metadata from metadata4ancom\n           file taxonomy4ancom from data_taxonomy_ancom\n           each ancom_var from ancom_var_list\n   \n       output :\n           file 'compo_table*.qza' into compo_table\n           file 'ancom_*.qzv' into ancom_table\n           file 'export_ancom_*' into export_ancom\n           file 'collapsed_table_*.qza' into collapsed_taxolevel_table\n           file 'completecmd_ancom' into completecmd_ancom, completcmd_ancom4compress\n   \n       when :\n           !params.stats_only && params.ancom_enable\n   \n       script :\n       \"\"\"\n       q2_ANCOM.sh ${table4ancom} compo_table.qza ${metadata} ${ancom_var} ancom_${ancom_var}.qzv export_ancom_${ancom_var} ${taxonomy4ancom} collapsed_table_family.qza compo_table_family.qza ancom_${ancom_var}_family.qzv export_ancom_${ancom_var}_family collapsed_table_genus.qza compo_table_genus.qza ancom_${ancom_var}_genus.qzv export_ancom_${ancom_var}_genus completecmd_ancom &> q2_ancom.log 2>&1\n       \"\"\"\n   }",
        "nb_lignes_process": 28,
        "string_script": "       \"\"\"\n       q2_ANCOM.sh ${table4ancom} compo_table.qza ${metadata} ${ancom_var} ancom_${ancom_var}.qzv export_ancom_${ancom_var} ${taxonomy4ancom} collapsed_table_family.qza compo_table_family.qza ancom_${ancom_var}_family.qzv export_ancom_${ancom_var}_family collapsed_table_genus.qza compo_table_genus.qza ancom_${ancom_var}_genus.qzv export_ancom_${ancom_var}_genus completecmd_ancom &> q2_ancom.log 2>&1\n       \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "table_ancom",
            "metadata4ancom",
            "data_taxonomy_ancom",
            "ancom_var_list"
        ],
        "nb_inputs": 4,
        "outputs": [
            "compo_table",
            "ancom_table",
            "export_ancom",
            "collapsed_taxolevel_table",
            "completecmd_ancom",
            "completcmd_ancom4compress"
        ],
        "nb_outputs": 6,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$ancom_var\"",
            "label 'qiime2_env'",
            "publishDir \"${params.outdir}/${params.ancom_dirname}\", mode: 'copy', pattern: '*.qz*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/ancom_output\", mode: 'copy', pattern: 'export_ancom_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'completecmd_ancom', saveAs : { completecmd_ancom -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "!params.stats_only && params.ancom_enable",
        "stub": ""
    },
    "prepare_data_for_stats": {
        "name_process": "prepare_data_for_stats",
        "string_process": "\nprocess prepare_data_for_stats {\n\n    label 'r_stats_env'\n\n    publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'\n    publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.rds'\n    publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern : 'v_*.txt'\n\n    input :\n        file metadata from metadata4stats\n        file biom_tsv from tsv\n        file newick_tree from newick\n\n    output :\n        file 'table_with_taxo_for_stats.tsv' into biom_tsv_stats\n        file 'metadata_stats.tsv' into metadata_stats, metadata_beta, metadata_beta_rarefied, metadata_beta_deseq2, metadata_beta_css\n        file 'phyloseq.rds' into phyloseq_rds, phyloseq_rds_alpha, phyloseq_rds_beta, phyloseq_rds_beta_rarefied, phyloseq_rds_beta_deseq2, phyloseq_rds_beta_css,phyloseq_rds_set\n        file 'version_ok' into version_collected\n        file 'v_*.txt' into r_lib_version\n \n    script :\n    \"\"\"\n    if [ ${params.longreads} = \"true\" ];\n    then\n        Rscript --vanilla ${baseDir}/bin/create_phyloseq_obj_longreads.R phyloseq.rds ${biom_tsv} ${metadata} ${params.lr_rank} ${params.kingdom} table_with_taxo_for_stats.tsv &>> stats_prepare_data_lr.log 2&>1\n    else\n        prepare_data_for_stats.sh ${metadata} ${biom_tsv} table_with_taxo_for_stats.tsv metadata_stats.tsv ${params.microDecon_enable} ${params.stats_only} &> stats_prepare_data.log 2&>1\n        Rscript --vanilla ${baseDir}/bin/create_phyloseq_obj.R phyloseq.rds table_with_taxo_for_stats.tsv metadata_stats.tsv ${params.microDecon_enable} ${params.control_list} ${newick_tree} ${params.remove_sample} ${params.sample_to_remove} &>> stats_prepare_data.log 2&>1\n    fi\n    ## get statistics libraries version for report\n    Rscript -e \"write(x=as.character(paste0(R.Version()[c('major','minor')], collapse = '.')), file='v_R.txt')\"\n    Rscript -e \"library(dplyr); write(x=as.character(packageVersion('dplyr')), file='v_dplyr.txt')\"\n    Rscript -e \"library(stringr); write(x=as.character(packageVersion('stringr')), file='v_stringr.txt')\"\n    Rscript -e \"library(phyloseq); x=as.character(packageVersion('phyloseq')); write(x, file='v_phyloseq.txt')\"\n    Rscript -e \"library(phangorn); write(x=as.character(packageVersion('phangorn')), file='v_phangorn.txt')\"\n    Rscript -e \"library(ggplot2); write(x=as.character(packageVersion('ggplot2')), file='v_ggplot2.txt')\"\n    Rscript -e \"library(svglite); write(x=as.character(packageVersion('svglite')), file='v_svglite.txt')\"\n    Rscript -e \"library(vegan); write(x=as.character(packageVersion('vegan')), file='v_vegan.txt')\"\n    Rscript -e \"library(RColorBrewer); write(x=as.character(packageVersion('RColorBrewer')), file='v_RColorBrewer.txt')\"\n    Rscript -e \"library(tidyr); write(x=as.character(packageVersion('tidyr')), file='v_tidyr.txt')\"\n    Rscript -e \"library(gridExtra); write(x=as.character(packageVersion('gridExtra')), file='v_gridExtra.txt')\"\n    Rscript -e \"library(egg); write(x=as.character(packageVersion('egg')), file='v_egg.txt')\"\n    Rscript -e \"library(reshape2); write(x=as.character(packageVersion('reshape2')), file='v_reshape2.txt')\"\n    Rscript -e \"library(BiocManager); write(x=as.character(packageVersion('BiocManager')), file='v_BiocManager.txt')\"\n    Rscript -e \"library(microbiome); write(x=as.character(packageVersion('microbiome')), file='v_microbiome.txt')\"\n    Rscript -e \"library(dendextend); write(x=as.character(packageVersion('dendextend')), file='v_dendextend.txt')\"\n    Rscript -e \"library(metagenomeSeq); write(x=as.character(packageVersion('metagenomeSeq')), file='v_metagenomeSeq.txt')\"\n    Rscript -e \"library(DESeq2); write(x=as.character(packageVersion('DESeq2')), file='v_DESeq2.txt')\"\n    Rscript -e \"library(UpSetR); write(x=as.character(packageVersion('UpSetR')), file='v_UpSetR.txt')\"\n    touch 'version_ok'\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    \"\"\"\n    if [ ${params.longreads} = \"true\" ];\n    then\n        Rscript --vanilla ${baseDir}/bin/create_phyloseq_obj_longreads.R phyloseq.rds ${biom_tsv} ${metadata} ${params.lr_rank} ${params.kingdom} table_with_taxo_for_stats.tsv &>> stats_prepare_data_lr.log 2&>1\n    else\n        prepare_data_for_stats.sh ${metadata} ${biom_tsv} table_with_taxo_for_stats.tsv metadata_stats.tsv ${params.microDecon_enable} ${params.stats_only} &> stats_prepare_data.log 2&>1\n        Rscript --vanilla ${baseDir}/bin/create_phyloseq_obj.R phyloseq.rds table_with_taxo_for_stats.tsv metadata_stats.tsv ${params.microDecon_enable} ${params.control_list} ${newick_tree} ${params.remove_sample} ${params.sample_to_remove} &>> stats_prepare_data.log 2&>1\n    fi\n    ## get statistics libraries version for report\n    Rscript -e \"write(x=as.character(paste0(R.Version()[c('major','minor')], collapse = '.')), file='v_R.txt')\"\n    Rscript -e \"library(dplyr); write(x=as.character(packageVersion('dplyr')), file='v_dplyr.txt')\"\n    Rscript -e \"library(stringr); write(x=as.character(packageVersion('stringr')), file='v_stringr.txt')\"\n    Rscript -e \"library(phyloseq); x=as.character(packageVersion('phyloseq')); write(x, file='v_phyloseq.txt')\"\n    Rscript -e \"library(phangorn); write(x=as.character(packageVersion('phangorn')), file='v_phangorn.txt')\"\n    Rscript -e \"library(ggplot2); write(x=as.character(packageVersion('ggplot2')), file='v_ggplot2.txt')\"\n    Rscript -e \"library(svglite); write(x=as.character(packageVersion('svglite')), file='v_svglite.txt')\"\n    Rscript -e \"library(vegan); write(x=as.character(packageVersion('vegan')), file='v_vegan.txt')\"\n    Rscript -e \"library(RColorBrewer); write(x=as.character(packageVersion('RColorBrewer')), file='v_RColorBrewer.txt')\"\n    Rscript -e \"library(tidyr); write(x=as.character(packageVersion('tidyr')), file='v_tidyr.txt')\"\n    Rscript -e \"library(gridExtra); write(x=as.character(packageVersion('gridExtra')), file='v_gridExtra.txt')\"\n    Rscript -e \"library(egg); write(x=as.character(packageVersion('egg')), file='v_egg.txt')\"\n    Rscript -e \"library(reshape2); write(x=as.character(packageVersion('reshape2')), file='v_reshape2.txt')\"\n    Rscript -e \"library(BiocManager); write(x=as.character(packageVersion('BiocManager')), file='v_BiocManager.txt')\"\n    Rscript -e \"library(microbiome); write(x=as.character(packageVersion('microbiome')), file='v_microbiome.txt')\"\n    Rscript -e \"library(dendextend); write(x=as.character(packageVersion('dendextend')), file='v_dendextend.txt')\"\n    Rscript -e \"library(metagenomeSeq); write(x=as.character(packageVersion('metagenomeSeq')), file='v_metagenomeSeq.txt')\"\n    Rscript -e \"library(DESeq2); write(x=as.character(packageVersion('DESeq2')), file='v_DESeq2.txt')\"\n    Rscript -e \"library(UpSetR); write(x=as.character(packageVersion('UpSetR')), file='v_UpSetR.txt')\"\n    touch 'version_ok'\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metadata4stats",
            "tsv",
            "newick"
        ],
        "nb_inputs": 3,
        "outputs": [
            "biom_tsv_stats",
            "metadata_stats",
            "metadata_beta",
            "metadata_beta_rarefied",
            "metadata_beta_deseq2",
            "metadata_beta_css",
            "phyloseq_rds",
            "phyloseq_rds_alpha",
            "phyloseq_rds_beta",
            "phyloseq_rds_beta_rarefied",
            "phyloseq_rds_beta_deseq2",
            "phyloseq_rds_beta_css",
            "phyloseq_rds_set",
            "version_collected",
            "r_lib_version"
        ],
        "nb_outputs": 15,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'r_stats_env'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.rds'",
            "publishDir \"${params.outdir}/${params.report_dirname}/version\", mode: 'copy', pattern : 'v_*.txt'"
        ],
        "when": "",
        "stub": ""
    },
    "stats_alpha": {
        "name_process": "stats_alpha",
        "string_process": " process stats_alpha {\n    \n        tag \"$alpha_var\"\n        label 'r_stats_env'\n        label 'internet_access'\n    \n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity\", mode: 'copy', pattern : 'alpha_div_values.txt'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity\", mode: 'copy', pattern : 'index_significance_tests.txt'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity/diversity_index\", mode: 'copy', pattern : 'alpha_div_plots*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity/diversity_barplots/${alpha_var}\", mode: 'copy', pattern : 'barplot_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity\", mode: 'copy', pattern : 'rarefaction_curve*'\n    \n        input :\n           file phyloseq_rds from phyloseq_rds_alpha\n           each alpha_var from alpha_list_var\n    \n        output :\n            file 'alpha_div_values.txt' into alpha_div_values\n            file \"alpha_div_plots_${alpha_var}*\" into alpha_div_plots\n            file 'index_significance_tests.txt' into index_significance_tests\n            file \"barplot_*_${alpha_var}*\" into barplots\n            file 'rarefaction_curve*' into rarefaction_curve\n            file 'process_alpha_report.ok' into process_alpha_report\n    \n        when :\n            params.stats_alpha_enable\n    \n        shell :\n        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/alpha_diversity.R ${phyloseq_rds} alpha_div_values.txt alpha_div_plots_${alpha_var} ${params.kingdom} ${params.taxa_nb} barplot_phylum_${alpha_var} barplot_class_${alpha_var} barplot_order_${alpha_var} barplot_family_${alpha_var} barplot_genus_${alpha_var} ${alpha_var} index_significance_tests.txt $workflow.projectDir rarefaction_curve ${params.longreads} ${params.lr_rank} &> stats_alpha_diversity.log 2>&1\n        touch process_alpha_report.ok\n        \"\"\"\n    }",
        "nb_lignes_process": 31,
        "string_script": "        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/alpha_diversity.R ${phyloseq_rds} alpha_div_values.txt alpha_div_plots_${alpha_var} ${params.kingdom} ${params.taxa_nb} barplot_phylum_${alpha_var} barplot_class_${alpha_var} barplot_order_${alpha_var} barplot_family_${alpha_var} barplot_genus_${alpha_var} ${alpha_var} index_significance_tests.txt $workflow.projectDir rarefaction_curve ${params.longreads} ${params.lr_rank} &> stats_alpha_diversity.log 2>&1\n        touch process_alpha_report.ok\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phyloseq_rds_alpha",
            "alpha_list_var"
        ],
        "nb_inputs": 2,
        "outputs": [
            "alpha_div_values",
            "alpha_div_plots",
            "index_significance_tests",
            "barplots",
            "rarefaction_curve",
            "process_alpha_report"
        ],
        "nb_outputs": 6,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$alpha_var\"",
            "label 'r_stats_env'",
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity\", mode: 'copy', pattern : 'alpha_div_values.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity\", mode: 'copy', pattern : 'index_significance_tests.txt'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity/diversity_index\", mode: 'copy', pattern : 'alpha_div_plots*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity/diversity_barplots/${alpha_var}\", mode: 'copy', pattern : 'barplot_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/alpha_diversity\", mode: 'copy', pattern : 'rarefaction_curve*'"
        ],
        "when": "params.stats_alpha_enable",
        "stub": ""
    },
    "stats_beta": {
        "name_process": "stats_beta",
        "string_process": " process stats_beta {\n    \n        tag \"$beta_var\"\n        label 'r_stats_env'\n        label 'internet_access'\n    \n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/NMDS\", mode: 'copy', pattern : 'NMDS*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/PCoA\", mode: 'copy', pattern : 'PCoA*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/hclustering\", mode: 'copy', pattern : 'hclustering*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized\", mode:'copy', pattern : 'variance_significance_tests_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/ExpVar\", mode:'copy', pattern : 'pie_ExpVar_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'\n    \n        input :\n            file phyloseq_rds from phyloseq_rds_beta\n            file metadata from metadata_beta\n            each beta_var from beta_var_nn\n    \n        output :\n            file \"NMDS_${beta_var}*\" into NMDS\n            file \"PCoA_${beta_var}*\" into PCoA\n            file \"hclustering_${beta_var}*\" into hclustering\n            file 'variance_significance_tests_*' into variance_significance_tests\n            file 'pie_ExpVar_*' into pie_ExpVar\n            file 'process_beta_report.ok' into process_beta_report\n    \n        when :\n            params.stats_beta_enable\n    \n        shell :\n        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity.R ${phyloseq_rds} ${beta_var} ${metadata} $workflow.projectDir NMDS_${beta_var}_ PCoA_${beta_var}_ ${params.hc_method} hclustering_${beta_var}_ variance_significance_tests_ pie_ExpVar_ ${params.longreads} &> stats_beta_diversity.log 2>&1\n        touch process_beta_report.ok\n        \"\"\"\n    }",
        "nb_lignes_process": 33,
        "string_script": "        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity.R ${phyloseq_rds} ${beta_var} ${metadata} $workflow.projectDir NMDS_${beta_var}_ PCoA_${beta_var}_ ${params.hc_method} hclustering_${beta_var}_ variance_significance_tests_ pie_ExpVar_ ${params.longreads} &> stats_beta_diversity.log 2>&1\n        touch process_beta_report.ok\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phyloseq_rds_beta",
            "metadata_beta",
            "beta_var_nn"
        ],
        "nb_inputs": 3,
        "outputs": [
            "NMDS",
            "PCoA",
            "hclustering",
            "variance_significance_tests",
            "pie_ExpVar",
            "process_beta_report"
        ],
        "nb_outputs": 6,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$beta_var\"",
            "label 'r_stats_env'",
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/NMDS\", mode: 'copy', pattern : 'NMDS*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/PCoA\", mode: 'copy', pattern : 'PCoA*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/hclustering\", mode: 'copy', pattern : 'hclustering*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized\", mode:'copy', pattern : 'variance_significance_tests_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_non_normalized/ExpVar\", mode:'copy', pattern : 'pie_ExpVar_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'"
        ],
        "when": "params.stats_beta_enable",
        "stub": ""
    },
    "stats_beta_rarefied": {
        "name_process": "stats_beta_rarefied",
        "string_process": " process stats_beta_rarefied {\n    \n        tag \"$beta_var\"\n        label 'r_stats_env'\n        label 'internet_access'\n    \n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/NMDS\", mode: 'copy', pattern : 'NMDS*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/PCoA\", mode: 'copy', pattern : 'PCoA*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/hclustering\", mode: 'copy', pattern : 'hclustering*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied\", mode: 'copy', pattern : 'variance_significance_tests_rarefied_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/ExpVar\", mode:'copy', pattern : 'pie_ExpVar_rarefied_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'\n    \n        input :\n            file phyloseq_rds from phyloseq_rds_beta_rarefied\n            file metadata from metadata_beta_rarefied\n            each beta_var from beta_var_rare\n    \n        output :\n            file 'Final_rarefied_ASV_table_with_taxonomy.tsv' into final_rarefied_ASV_table_with_taxonomy\n            file \"NMDS_rarefied_${beta_var}*\" into NMDS_rarefied\n            file \"PCoA_rarefied_${beta_var}*\" into PCoA_rarefied\n            file \"hclustering_rarefied_${beta_var}*\" into hclustering_rarefied\n            file 'variance_significance_tests_rarefied_*' into variance_significance_tests_rarefied\n            file 'pie_ExpVar_rarefied_*' into pie_ExpVar_rarefied\n            file 'process_beta_report_rarefied.ok' into process_beta_report_rarefied\n    \n        when :\n            params.stats_beta_enable\n    \n        shell :\n        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity_rarefied.R ${phyloseq_rds} Final_rarefied_ASV_table_with_taxonomy.tsv ${beta_var} ${metadata} $workflow.projectDir NMDS_rarefied_${beta_var}_ PCoA_rarefied_${beta_var}_ ${params.hc_method} hclustering_rarefied_${beta_var}_ variance_significance_tests_rarefied_ pie_ExpVar_rarefied_ ${params.longreads} &> stats_beta_diversity_rarefied.log 2>&1\n        touch process_beta_report_rarefied.ok\n        \"\"\"\n    }",
        "nb_lignes_process": 34,
        "string_script": "        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity_rarefied.R ${phyloseq_rds} Final_rarefied_ASV_table_with_taxonomy.tsv ${beta_var} ${metadata} $workflow.projectDir NMDS_rarefied_${beta_var}_ PCoA_rarefied_${beta_var}_ ${params.hc_method} hclustering_rarefied_${beta_var}_ variance_significance_tests_rarefied_ pie_ExpVar_rarefied_ ${params.longreads} &> stats_beta_diversity_rarefied.log 2>&1\n        touch process_beta_report_rarefied.ok\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phyloseq_rds_beta_rarefied",
            "metadata_beta_rarefied",
            "beta_var_rare"
        ],
        "nb_inputs": 3,
        "outputs": [
            "final_rarefied_ASV_table_with_taxonomy",
            "NMDS_rarefied",
            "PCoA_rarefied",
            "hclustering_rarefied",
            "variance_significance_tests_rarefied",
            "pie_ExpVar_rarefied",
            "process_beta_report_rarefied"
        ],
        "nb_outputs": 7,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$beta_var\"",
            "label 'r_stats_env'",
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/NMDS\", mode: 'copy', pattern : 'NMDS*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/PCoA\", mode: 'copy', pattern : 'PCoA*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/hclustering\", mode: 'copy', pattern : 'hclustering*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied\", mode: 'copy', pattern : 'variance_significance_tests_rarefied_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_rarefied/ExpVar\", mode:'copy', pattern : 'pie_ExpVar_rarefied_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'"
        ],
        "when": "params.stats_beta_enable",
        "stub": ""
    },
    "stats_beta_deseq2": {
        "name_process": "stats_beta_deseq2",
        "string_process": " process stats_beta_deseq2 {\n    \n        tag \"$beta_var\"\n        label 'r_stats_env'\n        label 'internet_access'\n    \n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/NMDS\", mode: 'copy', pattern : 'NMDS*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/PCoA\", mode: 'copy', pattern : 'PCoA*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/hclustering\", mode: 'copy', pattern : 'hclustering*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2\", mode: 'copy',pattern : 'variance_significance_tests_DESeq2_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/ExpVar\", mode: 'copy',pattern : 'pie_ExpVar_DESeq2_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'\n    \n        input :\n            file phyloseq_rds from phyloseq_rds_beta_deseq2\n            file metadata from metadata_beta_deseq2\n            each beta_var from beta_var_deseq\n    \n        output :\n            file 'Final_DESeq2_ASV_table_with_taxonomy.tsv' into final_deseq2_ASV_table_with_taxonomy\n            file \"NMDS_DESeq2_${beta_var}*\" into NMDS_deseq2\n            file \"PCoA_DESeq2_${beta_var}*\" into PCoA_deseq2\n            file \"hclustering_DESeq2_${beta_var}*\" into hclustering_deseq2\n            file 'variance_significance_tests_DESeq2_*' into variance_significance_tests_DESeq2\n            file 'pie_ExpVar_DESeq2_*' into pie_ExpVar_DESeq2\n            file 'process_beta_report_DESeq2.ok' into process_beta_report_DESeq2\n    \n        when :\n            params.stats_beta_enable\n    \n        shell :\n        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity_deseq2.R ${phyloseq_rds} Final_DESeq2_ASV_table_with_taxonomy.tsv ${beta_var} ${metadata} $workflow.projectDir NMDS_DESeq2_${beta_var}_ PCoA_DESeq2_${beta_var}_ ${params.hc_method} hclustering_DESeq2_${beta_var}_ variance_significance_tests_DESeq2_ pie_ExpVar_DESeq2_ ${params.longreads} &> stats_beta_diversity_deseq2.log 2>&1\n        touch process_beta_report_DESeq2.ok\n        \"\"\"\n    }",
        "nb_lignes_process": 34,
        "string_script": "        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity_deseq2.R ${phyloseq_rds} Final_DESeq2_ASV_table_with_taxonomy.tsv ${beta_var} ${metadata} $workflow.projectDir NMDS_DESeq2_${beta_var}_ PCoA_DESeq2_${beta_var}_ ${params.hc_method} hclustering_DESeq2_${beta_var}_ variance_significance_tests_DESeq2_ pie_ExpVar_DESeq2_ ${params.longreads} &> stats_beta_diversity_deseq2.log 2>&1\n        touch process_beta_report_DESeq2.ok\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phyloseq_rds_beta_deseq2",
            "metadata_beta_deseq2",
            "beta_var_deseq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "final_deseq2_ASV_table_with_taxonomy",
            "NMDS_deseq2",
            "PCoA_deseq2",
            "hclustering_deseq2",
            "variance_significance_tests_DESeq2",
            "pie_ExpVar_DESeq2",
            "process_beta_report_DESeq2"
        ],
        "nb_outputs": 7,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$beta_var\"",
            "label 'r_stats_env'",
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/NMDS\", mode: 'copy', pattern : 'NMDS*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/PCoA\", mode: 'copy', pattern : 'PCoA*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/hclustering\", mode: 'copy', pattern : 'hclustering*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2\", mode: 'copy',pattern : 'variance_significance_tests_DESeq2_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_DESeq2/ExpVar\", mode: 'copy',pattern : 'pie_ExpVar_DESeq2_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'"
        ],
        "when": "params.stats_beta_enable",
        "stub": ""
    },
    "stats_beta_css": {
        "name_process": "stats_beta_css",
        "string_process": " process stats_beta_css {\n    \n        tag \"$beta_var\"\n        label 'r_stats_env'\n        label 'internet_access'\n    \n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/NMDS\", mode: 'copy', pattern : 'NMDS*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/PCoA\", mode: 'copy', pattern : 'PCoA*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/hclustering\", mode: 'copy', pattern : 'hclustering*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS\", mode: 'copy', pattern : 'variance_significance_tests_CSS_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/ExpVar\", mode: 'copy', pattern : 'pie_ExpVar_CSS_*'\n        publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'\n    \n        input :\n            file phyloseq_rds from phyloseq_rds_beta_css\n            file metadata from metadata_beta_css\n            each beta_var from beta_var_css\n    \n        output :\n            file 'Final_CSS_ASV_table_with_taxonomy.tsv' into final_css_ASV_table_with_taxonomy\n            file \"NMDS_CSS_${beta_var}*\" into NMDS_css\n            file \"PCoA_CSS_${beta_var}*\" into PCoA_css\n            file \"hclustering_CSS_${beta_var}*\" into hclustering_css\n            file 'variance_significance_tests_CSS_*' into variance_significance_tests_CSS\n            file 'pie_ExpVar_CSS_*' into pie_ExpVar_CSS\n            file 'process_beta_report_CSS.ok' into process_beta_report_CSS\n    \n        when :\n            params.stats_beta_enable\n    \n        shell :\n        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity_css.R ${phyloseq_rds} Final_CSS_ASV_table_with_taxonomy.tsv ${beta_var} ${metadata} $workflow.projectDir NMDS_CSS_${beta_var}_ PCoA_CSS_${beta_var}_ ${params.hc_method} hclustering_CSS_${beta_var}_ variance_significance_tests_CSS_ pie_ExpVar_CSS_ ${params.longreads} &> stats_beta_diversity_css.log 2>&1\n        touch process_beta_report_CSS.ok\n        \"\"\"\n    }",
        "nb_lignes_process": 34,
        "string_script": "        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/beta_diversity_css.R ${phyloseq_rds} Final_CSS_ASV_table_with_taxonomy.tsv ${beta_var} ${metadata} $workflow.projectDir NMDS_CSS_${beta_var}_ PCoA_CSS_${beta_var}_ ${params.hc_method} hclustering_CSS_${beta_var}_ variance_significance_tests_CSS_ pie_ExpVar_CSS_ ${params.longreads} &> stats_beta_diversity_css.log 2>&1\n        touch process_beta_report_CSS.ok\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phyloseq_rds_beta_css",
            "metadata_beta_css",
            "beta_var_css"
        ],
        "nb_inputs": 3,
        "outputs": [
            "final_css_ASV_table_with_taxonomy",
            "NMDS_css",
            "PCoA_css",
            "hclustering_css",
            "variance_significance_tests_CSS",
            "pie_ExpVar_CSS",
            "process_beta_report_CSS"
        ],
        "nb_outputs": 7,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$beta_var\"",
            "label 'r_stats_env'",
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/NMDS\", mode: 'copy', pattern : 'NMDS*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/PCoA\", mode: 'copy', pattern : 'PCoA*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/hclustering\", mode: 'copy', pattern : 'hclustering*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS\", mode: 'copy', pattern : 'variance_significance_tests_CSS_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/beta_diversity_CSS/ExpVar\", mode: 'copy', pattern : 'pie_ExpVar_CSS_*'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/DATA\", mode: 'copy', pattern : '*.tsv'"
        ],
        "when": "params.stats_beta_enable",
        "stub": ""
    },
    "stats_desc_comp": {
        "name_process": "stats_desc_comp",
        "string_process": " process stats_desc_comp {\n    \n        tag \"$desc_comp_var\"\n        label 'r_stats_env'\n    \n        publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/descriptive_comparison\", mode: 'copy', pattern : 'upset_plot*'\n    \n        input :\n            file phyloseq_rds from phyloseq_rds_set\n            each desc_comp_var from desc_comp_list\n    \n        output :\n            file \"upset_plot_${desc_comp_var}*\" into upset_plot\n            file 'process_desc_comp_report.ok' into process_desc_comp_report\n    \n        when :\n            params.stats_desc_comp_enable\n    \n        shell :\n        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/desc_comp.R ${phyloseq_rds} ${desc_comp_var} upset_plot_${desc_comp_var} ${params.desc_comp_tax_level} &> stats_desc_comp.log 2>&1\n        touch process_desc_comp_report.ok\n        \"\"\"\n    }",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        Rscript --vanilla ${baseDir}/bin/desc_comp.R ${phyloseq_rds} ${desc_comp_var} upset_plot_${desc_comp_var} ${params.desc_comp_tax_level} &> stats_desc_comp.log 2>&1\n        touch process_desc_comp_report.ok\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phyloseq_rds_set",
            "desc_comp_list"
        ],
        "nb_inputs": 2,
        "outputs": [
            "upset_plot",
            "process_desc_comp_report"
        ],
        "nb_outputs": 2,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "tag \"$desc_comp_var\"",
            "label 'r_stats_env'",
            "publishDir \"${params.outdir}/${params.report_dirname}/R/FIGURES/descriptive_comparison\", mode: 'copy', pattern : 'upset_plot*'"
        ],
        "when": "params.stats_desc_comp_enable",
        "stub": ""
    },
    "report": {
        "name_process": "report",
        "string_process": " process report {\n\n        label 'jinja2_env'\n\n        publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'SAMBA_report.html'\n        publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'style.css'\n        publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'samba_wf.png'\n        publishDir \"${params.outdir}/conf\", mode: 'copy', pattern : 'data.json'\n\n        input :\n            file SAMBAtemplate from SAMBAtemplate_ch\n            file SAMBAcss from SAMBAcss_ch\n            file SAMBAreport_okstats_alpha from SAMBAreport_okstats_alpha\n            file SAMBAreport_okstats_beta from SAMBAreport_okstats_beta\n            file SAMBAreport_okdesc_comp from SAMBAreport_okdesc_comp\n            file SAMBAreport_okpicrust2 from SAMBAreport_okpicrust2\n            file SAMBAreport_okancom from SAMBAreport_okancom\n            file wf_image from SAMBAwf_ch\n            file 'version_ok' from version_collected\n\n       output :\n            file 'style.css' into SAMBA_css_output\n            file 'SAMBA_report.html' into Report\n            file 'samba_wf.png' into wf_image_output\n            file 'data.json' into data_json\n\n        when :\n           params.report_enable\n\n        script :\n        \"\"\"\n        #!/usr/bin/env python\n        import os, json\n        from shutil import copyfile\n\n        data = {}\n        data[\"projectName\"] = '$params.projectName'\n        data[\"run_date\"] = '$date'\n        data[\"singleEnd\"] = '$params.singleEnd'\n        data[\"manifest\"] = '$params.input_manifest'\n        data[\"metadata\"] = '$params.input_metadata'\n        data[\"outdir\"] = '$params.outdir'\n        data[\"steps\"] = {}\n        data[\"steps\"][\"data_integrity_enable\"] = '$params.data_integrity_enable'\n        data[\"steps\"][\"cutadapt_enable\"] = '$params.cutadapt_enable'\n        data[\"steps\"][\"dbotu3_enable\"] = '$params.dbotu3_enable'\n        data[\"steps\"][\"filtering_tax_enable\"] = '$params.filtering_tax_enable'\n        data[\"steps\"][\"microDecon_enable\"] = '$params.microDecon_enable'\n        data[\"steps\"][\"ancom_enable\"] = '$params.ancom_enable'\n        data[\"steps\"][\"picrust2_enable\"] = '$params.picrust2_enable'\n        data[\"steps\"][\"stats_alpha_enable\"] = '$params.stats_alpha_enable'\n        data[\"steps\"][\"stats_beta_enable\"] = '$params.stats_beta_enable'\n        data[\"steps\"][\"stats_desc_comp_enable\"] = '$params.stats_desc_comp_enable'\n        data[\"steps\"][\"report_enable\"] = '$params.report_enable'\n        data[\"steps\"][\"stats_only\"] = '$params.stats_only'\n        data[\"steps\"][\"dada2merge\"] = '$params.dada2merge'\n        data[\"steps\"][\"longreads\"] = '$params.longreads'\n\n        data[\"integrity\"] = {}\n        data[\"integrity\"][\"primer_filter\"] = '$params.primer_filter' or None\n\n        data[\"cutadapt\"] = {}\n        data[\"cutadapt\"][\"primerF\"] = '$params.primerF' or None\n        data[\"cutadapt\"][\"primerR\"] = '$params.primerR' or None\n        data[\"cutadapt\"][\"errorRate\"] = '$params.errorRate' or None\n        data[\"cutadapt\"][\"overlap\"] = '$params.overlap' or None\n\n        data[\"dada2\"] = {}\n        data[\"dada2\"][\"FtrimLeft\"] = '$params.FtrimLeft' or None\n        data[\"dada2\"][\"RtrimLeft\"] = '$params.RtrimLeft' or None\n        data[\"dada2\"][\"FtruncLen\"] = '$params.FtruncLen' or None\n        data[\"dada2\"][\"RtruncLen\"] = '$params.RtruncLen' or None\n        data[\"dada2\"][\"FmaxEE\"] = '$params.FmaxEE' or None\n        data[\"dada2\"][\"RmaxEE\"] = '$params.RmaxEE' or None\n        data[\"dada2\"][\"minQ\"] = '$params.minQ' or None\n        data[\"dada2\"][\"chimeras\"] = '$params.chimeras' or None\n\n        data[\"dada2merge\"] = {}\n        data[\"dada2merge\"][\"merge_tabledir\"] = '$params.merge_tabledir' or None\n        data[\"dada2merge\"][\"merge_repseqsdir\"] = '$params.merge_repseqsdir' or None\n\n        data[\"dbotu3\"] = {}\n        data[\"dbotu3\"][\"gen_crit\"] = '$params.gen_crit' or None\n        data[\"dbotu3\"][\"abund_crit\"] = '$params.abund_crit' or None\n        data[\"dbotu3\"][\"pval_crit\"] = '$params.pval_crit' or None\n\n        data[\"taxonomy\"] = {}\n        data[\"taxonomy\"][\"database\"] = '$params.database' or None\n        data[\"taxonomy\"][\"seqs_db\"] = '$params.seqs_db' or None\n        data[\"taxonomy\"][\"taxo_db\"] = '$params.taxo_db' or None\n        data[\"taxonomy\"][\"extract_db\"] = '$params.extract_db'\n        data[\"taxonomy\"][\"confidence\"] = '$params.confidence' or None\n\n        data[\"picrust2\"] = {}\n        data[\"picrust2\"][\"method\"] = '$params.method' or None\n        data[\"picrust2\"][\"nsti\"] = '$params.nsti' or None\n\n        data[\"tax_filtering\"] = {}\n        data[\"tax_filtering\"][\"tax_to_exclude\"] = '$params.tax_to_exclude' or None\n\n        data[\"microdecon\"] = {}\n        data[\"microdecon\"][\"control_list\"] = '$params.control_list' or None\n        data[\"microdecon\"][\"nb_controls\"] = '$params.nb_controls' or None\n        data[\"microdecon\"][\"nb_samples\"] = '$params.nb_samples' or None\n\n        data[\"lr\"] = {}\n        data[\"lr\"][\"lr_type\"] = '$params.lr_type' or None\n        data[\"lr\"][\"lr_rank\"] = '$params.lr_rank' or None\n        data[\"lr\"][\"lr_tax_fna\"] = '$params.lr_tax_fna' or None\n        data[\"lr\"][\"lr_tax_flat\"] = '$params.lr_taxo_flat' or None\n\n        data[\"stats\"] = {}\n        data[\"stats\"][\"ancom_var\"] = '$params.ancom_var' or None\n        data[\"stats\"][\"kingdom\"] = '$params.kingdom' or None\n        data[\"stats\"][\"taxa_nb\"] = '$params.taxa_nb' or None\n        data[\"stats\"][\"hc_method\"] = '$params.hc_method' or None\n        data[\"stats\"][\"alpha_div_group\"] = '$params.alpha_div_group' or None\n        data[\"stats\"][\"beta_div_var\"] = '$params.beta_div_var' or None\n        data[\"stats\"][\"desc_comp_crit\"] = '$params.desc_comp_crit' or None\n        data[\"stats\"][\"inasv_table\"] = '$params.inasv_table' or None\n        data[\"stats\"][\"innewick\"] = '$params.innewick' or None\n\n        #software versions\n        data[\"soft\"] = {}\n        data[\"soft\"][\"samba\"] = '$workflow.manifest.version'\n        data[\"soft\"][\"nextflow\"] = '$workflow.nextflow.version'\n        for elt in os.listdir(\"${params.outdir}/${params.report_dirname}/version\"):\n            if elt.endswith(\".txt\"):\n                f=open(os.path.join(\"${params.outdir}/${params.report_dirname}/version\",elt),\"r\")\n                tool_name=elt.replace(\"v_\",\"\").replace(\".txt\",\"\")\n                version=f.readline().rstrip()\n                data[\"soft\"][tool_name] = version\n\n        with open('data.json', 'w') as outfile:\n           json.dump(data, outfile, sort_keys=True, indent=4)\n\n        os.system(\"${baseDir}/bin/SAMBAreport.py -t ${SAMBAtemplate} -p ${params.outdir}/${params.report_dirname} -c 'data.json'\")\n        os.system(\"cp ${wf_image} samba_wf.png\")\n\n        \"\"\"\n    }",
        "nb_lignes_process": 139,
        "string_script": "        \"\"\"\n        #!/usr/bin/env python\n        import os, json\n        from shutil import copyfile\n\n        data = {}\n        data[\"projectName\"] = '$params.projectName'\n        data[\"run_date\"] = '$date'\n        data[\"singleEnd\"] = '$params.singleEnd'\n        data[\"manifest\"] = '$params.input_manifest'\n        data[\"metadata\"] = '$params.input_metadata'\n        data[\"outdir\"] = '$params.outdir'\n        data[\"steps\"] = {}\n        data[\"steps\"][\"data_integrity_enable\"] = '$params.data_integrity_enable'\n        data[\"steps\"][\"cutadapt_enable\"] = '$params.cutadapt_enable'\n        data[\"steps\"][\"dbotu3_enable\"] = '$params.dbotu3_enable'\n        data[\"steps\"][\"filtering_tax_enable\"] = '$params.filtering_tax_enable'\n        data[\"steps\"][\"microDecon_enable\"] = '$params.microDecon_enable'\n        data[\"steps\"][\"ancom_enable\"] = '$params.ancom_enable'\n        data[\"steps\"][\"picrust2_enable\"] = '$params.picrust2_enable'\n        data[\"steps\"][\"stats_alpha_enable\"] = '$params.stats_alpha_enable'\n        data[\"steps\"][\"stats_beta_enable\"] = '$params.stats_beta_enable'\n        data[\"steps\"][\"stats_desc_comp_enable\"] = '$params.stats_desc_comp_enable'\n        data[\"steps\"][\"report_enable\"] = '$params.report_enable'\n        data[\"steps\"][\"stats_only\"] = '$params.stats_only'\n        data[\"steps\"][\"dada2merge\"] = '$params.dada2merge'\n        data[\"steps\"][\"longreads\"] = '$params.longreads'\n\n        data[\"integrity\"] = {}\n        data[\"integrity\"][\"primer_filter\"] = '$params.primer_filter' or None\n\n        data[\"cutadapt\"] = {}\n        data[\"cutadapt\"][\"primerF\"] = '$params.primerF' or None\n        data[\"cutadapt\"][\"primerR\"] = '$params.primerR' or None\n        data[\"cutadapt\"][\"errorRate\"] = '$params.errorRate' or None\n        data[\"cutadapt\"][\"overlap\"] = '$params.overlap' or None\n\n        data[\"dada2\"] = {}\n        data[\"dada2\"][\"FtrimLeft\"] = '$params.FtrimLeft' or None\n        data[\"dada2\"][\"RtrimLeft\"] = '$params.RtrimLeft' or None\n        data[\"dada2\"][\"FtruncLen\"] = '$params.FtruncLen' or None\n        data[\"dada2\"][\"RtruncLen\"] = '$params.RtruncLen' or None\n        data[\"dada2\"][\"FmaxEE\"] = '$params.FmaxEE' or None\n        data[\"dada2\"][\"RmaxEE\"] = '$params.RmaxEE' or None\n        data[\"dada2\"][\"minQ\"] = '$params.minQ' or None\n        data[\"dada2\"][\"chimeras\"] = '$params.chimeras' or None\n\n        data[\"dada2merge\"] = {}\n        data[\"dada2merge\"][\"merge_tabledir\"] = '$params.merge_tabledir' or None\n        data[\"dada2merge\"][\"merge_repseqsdir\"] = '$params.merge_repseqsdir' or None\n\n        data[\"dbotu3\"] = {}\n        data[\"dbotu3\"][\"gen_crit\"] = '$params.gen_crit' or None\n        data[\"dbotu3\"][\"abund_crit\"] = '$params.abund_crit' or None\n        data[\"dbotu3\"][\"pval_crit\"] = '$params.pval_crit' or None\n\n        data[\"taxonomy\"] = {}\n        data[\"taxonomy\"][\"database\"] = '$params.database' or None\n        data[\"taxonomy\"][\"seqs_db\"] = '$params.seqs_db' or None\n        data[\"taxonomy\"][\"taxo_db\"] = '$params.taxo_db' or None\n        data[\"taxonomy\"][\"extract_db\"] = '$params.extract_db'\n        data[\"taxonomy\"][\"confidence\"] = '$params.confidence' or None\n\n        data[\"picrust2\"] = {}\n        data[\"picrust2\"][\"method\"] = '$params.method' or None\n        data[\"picrust2\"][\"nsti\"] = '$params.nsti' or None\n\n        data[\"tax_filtering\"] = {}\n        data[\"tax_filtering\"][\"tax_to_exclude\"] = '$params.tax_to_exclude' or None\n\n        data[\"microdecon\"] = {}\n        data[\"microdecon\"][\"control_list\"] = '$params.control_list' or None\n        data[\"microdecon\"][\"nb_controls\"] = '$params.nb_controls' or None\n        data[\"microdecon\"][\"nb_samples\"] = '$params.nb_samples' or None\n\n        data[\"lr\"] = {}\n        data[\"lr\"][\"lr_type\"] = '$params.lr_type' or None\n        data[\"lr\"][\"lr_rank\"] = '$params.lr_rank' or None\n        data[\"lr\"][\"lr_tax_fna\"] = '$params.lr_tax_fna' or None\n        data[\"lr\"][\"lr_tax_flat\"] = '$params.lr_taxo_flat' or None\n\n        data[\"stats\"] = {}\n        data[\"stats\"][\"ancom_var\"] = '$params.ancom_var' or None\n        data[\"stats\"][\"kingdom\"] = '$params.kingdom' or None\n        data[\"stats\"][\"taxa_nb\"] = '$params.taxa_nb' or None\n        data[\"stats\"][\"hc_method\"] = '$params.hc_method' or None\n        data[\"stats\"][\"alpha_div_group\"] = '$params.alpha_div_group' or None\n        data[\"stats\"][\"beta_div_var\"] = '$params.beta_div_var' or None\n        data[\"stats\"][\"desc_comp_crit\"] = '$params.desc_comp_crit' or None\n        data[\"stats\"][\"inasv_table\"] = '$params.inasv_table' or None\n        data[\"stats\"][\"innewick\"] = '$params.innewick' or None\n\n        #software versions\n        data[\"soft\"] = {}\n        data[\"soft\"][\"samba\"] = '$workflow.manifest.version'\n        data[\"soft\"][\"nextflow\"] = '$workflow.nextflow.version'\n        for elt in os.listdir(\"${params.outdir}/${params.report_dirname}/version\"):\n            if elt.endswith(\".txt\"):\n                f=open(os.path.join(\"${params.outdir}/${params.report_dirname}/version\",elt),\"r\")\n                tool_name=elt.replace(\"v_\",\"\").replace(\".txt\",\"\")\n                version=f.readline().rstrip()\n                data[\"soft\"][tool_name] = version\n\n        with open('data.json', 'w') as outfile:\n           json.dump(data, outfile, sort_keys=True, indent=4)\n\n        os.system(\"${baseDir}/bin/SAMBAreport.py -t ${SAMBAtemplate} -p ${params.outdir}/${params.report_dirname} -c 'data.json'\")\n        os.system(\"cp ${wf_image} samba_wf.png\")\n\n        \"\"\"",
        "nb_lignes_script": 109,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SAMBAtemplate_ch",
            "SAMBAcss_ch",
            "SAMBAreport_okstats_alpha",
            "SAMBAreport_okstats_beta",
            "SAMBAreport_okdesc_comp",
            "SAMBAreport_okpicrust2",
            "SAMBAreport_okancom",
            "SAMBAwf_ch",
            "version_collected"
        ],
        "nb_inputs": 9,
        "outputs": [
            "SAMBA_css_output",
            "Report",
            "wf_image_output",
            "data_json"
        ],
        "nb_outputs": 4,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [
            "label 'jinja2_env'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'SAMBA_report.html'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'style.css'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'samba_wf.png'",
            "publishDir \"${params.outdir}/conf\", mode: 'copy', pattern : 'data.json'"
        ],
        "when": "params.report_enable",
        "stub": ""
    },
    "compress_result": {
        "name_process": "compress_result",
        "string_process": " process compress_result {\n        \n        input :\n            file compress_ok from Report\n\n        output :\n            file \"SAMBA_report.zip\" into report_zip\n\n        when :\n           params.compress_result\n \n        script :\n        \"\"\"\n        cd ${params.outdir}/${params.report_dirname} && zip -r SAMBA_report.zip * \n        cd -\n        ln -s ${params.outdir}/${params.report_dirname}/SAMBA_report.zip\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        cd ${params.outdir}/${params.report_dirname} && zip -r SAMBA_report.zip * \n        cd -\n        ln -s ${params.outdir}/${params.report_dirname}/SAMBA_report.zip\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Report"
        ],
        "nb_inputs": 1,
        "outputs": [
            "report_zip"
        ],
        "nb_outputs": 1,
        "name_workflow": "ifremer-bioinformatics__samba",
        "directive": [],
        "when": "params.compress_result",
        "stub": ""
    }
}
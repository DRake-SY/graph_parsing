{
    "subsample": {
        "name_process": "subsample",
        "string_process": " process subsample{\n        tag \"${pair_id}\"\n        container 'biocontainers/seqtk:v1.3-1-deb_cv1'\n        containerOptions '-u $(id -u):$(id -g)'\n        publishDir \"${params.output_dir}/${params.subsample_depth}_subsampled_reads\", mode: 'copy', overwrite: true\n        \n        input:\n        tuple val(pair_id), file(reads) from ch_subsample\n\n        output:\n        tuple val(\"${pair_id}_sub_${params.subsample_depth}\"), file(\"${pair_id}_sub_${params.subsample_depth}*.fastq.gz\") into ch_fastqc_pre_trim,ch_trimmomatic_input\n\n        script:\n        read_out_one = reads[0].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_${params.subsample_depth}\")\n        read_out_two = reads[1].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_${params.subsample_depth}\")\n        \n        \"\"\"\n        seqtk sample -s100 ${reads[0]} ${params.subsample_depth} | gzip > ${read_out_one}\n        seqtk sample -s100 ${reads[1]} ${params.subsample_depth} | gzip > ${read_out_two}\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "        read_out_one = reads[0].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_${params.subsample_depth}\")\n        read_out_two = reads[1].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_${params.subsample_depth}\")\n        \n        \"\"\"\n        seqtk sample -s100 ${reads[0]} ${params.subsample_depth} | gzip > ${read_out_one}\n        seqtk sample -s100 ${reads[1]} ${params.subsample_depth} | gzip > ${read_out_two}\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "ch_subsample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_pre_trim",
            "ch_trimmomatic_input"
        ],
        "nb_outputs": 2,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "tag \"${pair_id}\"",
            "container 'biocontainers/seqtk:v1.3-1-deb_cv1'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir \"${params.output_dir}/${params.subsample_depth}_subsampled_reads\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_pre_trim": {
        "name_process": "fastqc_pre_trim",
        "string_process": "\nprocess fastqc_pre_trim{\n    tag \"${fastq_file}\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir fastqc_pre_trim_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_id), file(fastq_file) from ch_fastqc_pre_trim.flatMap{[[\"${it[0]}_1\", it[1][0]], [\"${it[0]}_2\", it[1][1]]]}\n\n    output:\n    file \"${pair_id}.pre_trim.fastqc.html\" into ch_fastqc_pre_trim_output\n\n    script:\n    \"\"\"\n    fastqc -o . $fastq_file\n    mv *.html ${pair_id}.pre_trim.fastqc.html\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    fastqc -o . $fastq_file\n    mv *.html ${pair_id}.pre_trim.fastqc.html\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc_pre_trim"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_pre_trim_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "tag \"${fastq_file}\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir fastqc_pre_trim_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "trimmomatic": {
        "name_process": "trimmomatic",
        "string_process": "\nprocess trimmomatic{\n    cache 'lenient'\n\ttag \"${pair_id}\"\n    container 'davelabhub/trimmomatic:0.39--1'\n    containerOptions '-u $(id -u):$(id -g)'\n\t\n\tinput:\n\ttuple val(pair_id), file(fastqs) from ch_trimmomatic_input\n\t\n\toutput:\n\t                                                    \n\t                                                                    \n\ttuple val(pair_id), file(\"${pair_id}*{1,2}P.fq.gz\") into ch_rcorrect,ch_fastqc_post_trim\n\n\tscript:\n\toutbase = fastqs[0].getName().replaceAll('_1.fastq.gz', '.trimmed.fq.gz')\n\t\"\"\"\n\ttrimmomatic PE -threads ${params.trimmomatic_threads} -basein ${fastqs[0]} \\\\\n\t\t-baseout $outbase \\\\\n\t\tILLUMINACLIP:${tru_seq_pe_fasta_path}:2:30:10:2:keepBothReads \\\\\n\t\tLEADING:3 TRAILING:3 MINLEN:36 HEADCROP:11\n\t\"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\toutbase = fastqs[0].getName().replaceAll('_1.fastq.gz', '.trimmed.fq.gz')\n\t\"\"\"\n\ttrimmomatic PE -threads ${params.trimmomatic_threads} -basein ${fastqs[0]} \\\\\n\t\t-baseout $outbase \\\\\n\t\tILLUMINACLIP:${tru_seq_pe_fasta_path}:2:30:10:2:keepBothReads \\\\\n\t\tLEADING:3 TRAILING:3 MINLEN:36 HEADCROP:11\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "ch_trimmomatic_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_rcorrect",
            "ch_fastqc_post_trim"
        ],
        "nb_outputs": 2,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"${pair_id}\"",
            "container 'davelabhub/trimmomatic:0.39--1'",
            "containerOptions '-u $(id -u):$(id -g)'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_post_trim": {
        "name_process": "fastqc_post_trim",
        "string_process": "\nprocess fastqc_post_trim{\n    tag \"${fastq_file}\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir fastqc_post_trim_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_id), file(fastq_file) from ch_fastqc_post_trim.flatMap{[[\"${it[0]}_1\", it[1][0]], [\"${it[0]}_2\", it[1][1]]]}\n\n    output:\n    file \"${pair_id}.post_trim.fastqc.html\" into ch_fastqc_post_trim_output\n\n    script:\n    \"\"\"\n    fastqc -o . $fastq_file\n    mv *.html ${pair_id}.post_trim.fastqc.html\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    fastqc -o . $fastq_file\n    mv *.html ${pair_id}.post_trim.fastqc.html\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc_post_trim"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_post_trim_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "tag \"${fastq_file}\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir fastqc_post_trim_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "rcorrector": {
        "name_process": "rcorrector",
        "string_process": "\nprocess rcorrector{\n    cache 'lenient'\n    tag \"${trimmed_read_one}\"\n    container 'tabotaab/rcorrector:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    cpus params.rcorrector_threads\n    \n    input:\n    tuple val(pair_id), file(fastqs) from ch_rcorrect\n\n    output:\n    tuple val(pair_id), file(\"${pair_id}*{1,2}P.cor.fq.gz\") into ch_bowtie2_silva_mapping\n\n    script:\n    \"\"\"\n    run_rcorrector.pl -1 ${fastqs[0]} -2 ${fastqs[1]} -od . -t ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    run_rcorrector.pl -1 ${fastqs[0]} -2 ${fastqs[1]} -od . -t ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_rcorrect"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bowtie2_silva_mapping"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"${trimmed_read_one}\"",
            "container 'tabotaab/rcorrector:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "cpus params.rcorrector_threads"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie2_silva_mapping": {
        "name_process": "bowtie2_silva_mapping",
        "string_process": "\nprocess bowtie2_silva_mapping{\n    tag \"${pair_id}\"\n    container 'biocontainers/bowtie2:v2.4.1_cv1'\n    containerOptions \"-u \\$(id -u):\\$(id -g) -v ${bowtie2_silva_db_dir}:${bowtie2_silva_db_dir}\"\n    cpus params.bowtie2_threads\n    publishDir cleaned_reads_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_id), file(fastqs) from ch_bowtie2_silva_mapping\n\n    output:\n    tuple val(pair_id), file(\"${pair_id}_paired_unaligned_{R1,R2}.fq.gz\") into ch_trinity,ch_fastqc_post_correct,ch_sub_for_tax,ch_bowtie2_mapping_stats_reads,ch_rsem_reads\n\n    script:\n    metric_file = \"${pair_id}.bowtie_metrics\"\n    \"\"\"\n    bowtie2 --quiet --very-sensitive-local --phred33  -x ${params.path_to_bowtie2_silva_db} -1 ${fastqs[0]} -2 ${fastqs[1]} --threads ${task.cpus} \\\\\n    --al-conc-gz ${pair_id}_paired_aligned.fq.gz \\\\\n    --un-conc-gz ${pair_id}_paired_unaligned.fq.gz  --al-gz ${pair_id}_unpaired_aligned.fq.gz \\\\\n    --un-gz ${pair_id}_unpaired_unaligned.fq.gz\n    mv ${pair_id}_paired_unaligned.fq.1.gz ${pair_id}_paired_unaligned_R1.fq.gz\n    mv ${pair_id}_paired_unaligned.fq.2.gz ${pair_id}_paired_unaligned_R2.fq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    metric_file = \"${pair_id}.bowtie_metrics\"\n    \"\"\"\n    bowtie2 --quiet --very-sensitive-local --phred33  -x ${params.path_to_bowtie2_silva_db} -1 ${fastqs[0]} -2 ${fastqs[1]} --threads ${task.cpus} \\\\\n    --al-conc-gz ${pair_id}_paired_aligned.fq.gz \\\\\n    --un-conc-gz ${pair_id}_paired_unaligned.fq.gz  --al-gz ${pair_id}_unpaired_aligned.fq.gz \\\\\n    --un-gz ${pair_id}_unpaired_unaligned.fq.gz\n    mv ${pair_id}_paired_unaligned.fq.1.gz ${pair_id}_paired_unaligned_R1.fq.gz\n    mv ${pair_id}_paired_unaligned.fq.2.gz ${pair_id}_paired_unaligned_R2.fq.gz\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "ch_bowtie2_silva_mapping"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_trinity",
            "ch_fastqc_post_correct",
            "ch_sub_for_tax",
            "ch_bowtie2_mapping_stats_reads",
            "ch_rsem_reads"
        ],
        "nb_outputs": 5,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "tag \"${pair_id}\"",
            "container 'biocontainers/bowtie2:v2.4.1_cv1'",
            "containerOptions \"-u $(id -u): $(id -g) -v ${bowtie2_silva_db_dir}:${bowtie2_silva_db_dir}\"",
            "cpus params.bowtie2_threads",
            "publishDir cleaned_reads_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_post_correct": {
        "name_process": "fastqc_post_correct",
        "string_process": "\nprocess fastqc_post_correct{\n    tag \"${fastq_file}\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir fastqc_post_correct_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_id), file(fastq_file) from ch_fastqc_post_correct.flatMap{[[\"${it[0]}_1\", it[1][0]], [\"${it[0]}_2\", it[1][1]]]}\n\n    output:\n    file \"${pair_id}.post_correct.fastqc.html\" into ch_fastqc_post_correct_output\n\n    script:\n    \"\"\"\n    fastqc -o . $fastq_file\n    mv *.html ${pair_id}.post_correct.fastqc.html\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    fastqc -o . $fastq_file\n    mv *.html ${pair_id}.post_correct.fastqc.html\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_fastqc_post_correct"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_post_correct_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "tag \"${fastq_file}\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir fastqc_post_correct_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "sub_for_tax": {
        "name_process": "sub_for_tax",
        "string_process": " process sub_for_tax{\n        tag \"${pair_id}\"\n        container 'biocontainers/seqtk:v1.3-1-deb_cv1'\n        containerOptions '-u $(id -u):$(id -g)'\n        \n        input:\n        tuple val(pair_id), file(reads) from ch_sub_for_tax\n\n        output:\n        tuple val(\"${pair_id}\"), file(\"${pair_id}_sub_10000*.fq.gz\") into ch_mmseq_create_query_dbs\n\n        script:\n        read_out_one = reads[0].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_10000\")\n        read_out_two = reads[1].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_10000\")\n        \n        \"\"\"\n        seqtk sample -s100 ${reads[0]} 10000 | gzip > ${read_out_one}\n        seqtk sample -s100 ${reads[1]} 10000 | gzip > ${read_out_two}\n        \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "        read_out_one = reads[0].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_10000\")\n        read_out_two = reads[1].getName().replaceAll(\"${pair_id}\", \"${pair_id}_sub_10000\")\n        \n        \"\"\"\n        seqtk sample -s100 ${reads[0]} 10000 | gzip > ${read_out_one}\n        seqtk sample -s100 ${reads[1]} 10000 | gzip > ${read_out_two}\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "ch_sub_for_tax"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_mmseq_create_query_dbs"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "tag \"${pair_id}\"",
            "container 'biocontainers/seqtk:v1.3-1-deb_cv1'",
            "containerOptions '-u $(id -u):$(id -g)'"
        ],
        "when": "",
        "stub": ""
    },
    "no_sub_for_tax": {
        "name_process": "no_sub_for_tax",
        "string_process": " process no_sub_for_tax{\n        cache 'lenient'\n        tag \"$fastq_file\"\n\n        input:\n        tuple val(pair_id), file(fastq_file) from ch_sub_for_tax\n\n        output:\n        tuple val(pair_id), file(fastq_file) into ch_mmseq_create_query_dbs\n\n        script:\n        \"\"\"\n        echo redirecting\n        \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        echo redirecting\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_sub_for_tax"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_mmseq_create_query_dbs"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$fastq_file\""
        ],
        "when": "",
        "stub": ""
    },
    "mmseq_create_query_dbs": {
        "name_process": "mmseq_create_query_dbs",
        "string_process": "\nprocess mmseq_create_query_dbs{\n    cache 'lenient'\n    tag \"$fastq_file\"\n    container 'soedinglab/mmseqs2:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n\n    input:\n    tuple val(pair_id), file(fastq_file) from ch_mmseq_create_query_dbs.flatMap{[[\"${it[0]}_1\", it[1][0]], [\"${it[0]}_2\", it[1][1]]]}\n\n    output:\n    tuple val(pair_id), file(\"${pair_id}.queryDB{,.dbtype,_h,_h.dbtype,_h.index,.index,.lookup,.source}\") into ch_mmseq_taxonomy\n\n    script:\n    out_name = \"${pair_id}.queryDB\"\n    \"\"\"\n    mmseqs createdb $fastq_file $out_name --dbtype 2\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    out_name = \"${pair_id}.queryDB\"\n    \"\"\"\n    mmseqs createdb $fastq_file $out_name --dbtype 2\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "ch_mmseq_create_query_dbs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_mmseq_taxonomy"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$fastq_file\"",
            "container 'soedinglab/mmseqs2:latest'",
            "containerOptions '-u $(id -u):$(id -g)'"
        ],
        "when": "",
        "stub": ""
    },
    "mmseq_taxonomy": {
        "name_process": "mmseq_taxonomy",
        "string_process": "\nprocess mmseq_taxonomy{\n    cache 'lenient'\n    tag \"${db_files[0]}\"\n    container 'soedinglab/mmseqs2:latest'\n    containerOptions \"-u \\$(id -u):\\$(id -g) -v ${nt_db_dir}:${nt_db_dir}\"\n    cpus params.mmseqs_threads\n    publishDir mmseqs_taxonomy_publish_dir, mode: 'copy', overwrite: true\n    maxForks 1\n\n    input:\n    tuple val(pair_id), file(db_files) from ch_mmseq_taxonomy\n\n    output:\n    tuple file(\"${pair_id}.taxonomyResult.tsv\"),\\\n    file(\"${pair_id}.taxonomyResult_report\"),\\\n    file(\"${pair_id}.report.html\") into ch_mmseq_taxonomy_out\n\n    script:\n    output_tsv = \"${pair_id}.taxonomyResult.tsv\"\n    output_report = \"${pair_id}.taxonomyResult_report\"\n    output_html = \"${pair_id}.report.html\"\n    \"\"\"\n    mmseqs taxonomy  ${pair_id}.queryDB ${params.mmseqs_nt_path} taxonomyResult tmp --threads ${task.cpus} -e ${params.tax_evalue} -s 7.0\n    mmseqs createtsv ${pair_id}.queryDB taxonomyResult $output_tsv\n    mmseqs taxonomyreport ${params.mmseqs_nt_path} taxonomyResult $output_report\n    mmseqs taxonomyreport ${params.mmseqs_nt_path} taxonomyResult $output_html --report-mode 1\n    rm -r tmp\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    output_tsv = \"${pair_id}.taxonomyResult.tsv\"\n    output_report = \"${pair_id}.taxonomyResult_report\"\n    output_html = \"${pair_id}.report.html\"\n    \"\"\"\n    mmseqs taxonomy  ${pair_id}.queryDB ${params.mmseqs_nt_path} taxonomyResult tmp --threads ${task.cpus} -e ${params.tax_evalue} -s 7.0\n    mmseqs createtsv ${pair_id}.queryDB taxonomyResult $output_tsv\n    mmseqs taxonomyreport ${params.mmseqs_nt_path} taxonomyResult $output_report\n    mmseqs taxonomyreport ${params.mmseqs_nt_path} taxonomyResult $output_html --report-mode 1\n    rm -r tmp\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "ch_mmseq_taxonomy"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_mmseq_taxonomy_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"${db_files[0]}\"",
            "container 'soedinglab/mmseqs2:latest'",
            "containerOptions \"-u $(id -u): $(id -g) -v ${nt_db_dir}:${nt_db_dir}\"",
            "cpus params.mmseqs_threads",
            "publishDir mmseqs_taxonomy_publish_dir, mode: 'copy', overwrite: true",
            "maxForks 1"
        ],
        "when": "",
        "stub": ""
    },
    "trinity": {
        "name_process": "trinity",
        "string_process": "\nprocess trinity{\n    cache 'lenient'\n    tag \"$pair_id\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    cpus params.trinity_threads\n    publishDir trinity_assembly_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_id), file(fastqs) from ch_trinity.map{ key, files -> tuple( key[0..10], files ) }.groupTuple().map{key, files -> tuple(key, files[0] + files[1])}\n\n    output:\n    tuple val(pair_id), file(\"${pair_id}.Trinity.fasta\") into ch_trinity_stats,ch_busco,ch_assembly_bowtie_db,ch_rsem_assemblies,ch_ExN50_assembly\n    tuple val(pair_id), file(\"${pair_id}.gene_trans_map\") into ch_abund_to_matrix_gene_map\n\n    script:\n                                                                                        \n    \"\"\"\n    Trinity --left ${fastqs[0]},${fastqs[2]} --right ${fastqs[1]},${fastqs[3]} --seqType fq --max_memory 150G --CPU ${task.cpus} \\\\\n    --min_contig_length 250 --output trinity --full_cleanup  --SS_lib_type RF\n    mv trinity.Trinity.fasta ${pair_id}.Trinity.fasta\n    mv trinity.Trinity.fasta.gene_trans_map ${pair_id}.gene_trans_map\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    Trinity --left ${fastqs[0]},${fastqs[2]} --right ${fastqs[1]},${fastqs[3]} --seqType fq --max_memory 150G --CPU ${task.cpus} \\\\\n    --min_contig_length 250 --output trinity --full_cleanup  --SS_lib_type RF\n    mv trinity.Trinity.fasta ${pair_id}.Trinity.fasta\n    mv trinity.Trinity.fasta.gene_trans_map ${pair_id}.gene_trans_map\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Trinity"
        ],
        "tools_url": [
            "https://bio.tools/trinity"
        ],
        "tools_dico": [
            {
                "name": "Trinity",
                "uri": "https://bio.tools/trinity",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Trinity is a transcriptome assembler which relies on three different tools, inchworm an assembler, chrysalis which pools contigs and butterfly which amongst others compacts a graph resulting from butterfly with reads.",
                "homepage": "https://github.com/trinityrnaseq/trinityrnaseq/wiki"
            }
        ],
        "inputs": [
            "ch_trinity"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_trinity_stats",
            "ch_busco",
            "ch_assembly_bowtie_db",
            "ch_rsem_assemblies",
            "ch_ExN50_assembly",
            "ch_abund_to_matrix_gene_map"
        ],
        "nb_outputs": 6,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$pair_id\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "cpus params.trinity_threads",
            "publishDir trinity_assembly_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "trinity_stats": {
        "name_process": "trinity_stats",
        "string_process": "\nprocess trinity_stats{\n    cache 'lenient'\n    tag \"$pair_id\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir trinity_stats_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_id), file(trin_assembly_fasta) from ch_busco\n\n    output:\n    file(\"${pair_id}_trinity_assembly_stats.txt\") into ch_trinity_stats_out\n\n    script:\n    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/TrinityStats.pl $trin_assembly_fasta >& ${pair_id}_trinity_assembly_stats.txt\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/TrinityStats.pl $trin_assembly_fasta >& ${pair_id}_trinity_assembly_stats.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_busco"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_trinity_stats_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$pair_id\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir trinity_stats_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco{\n    cache 'lenient'\n    tag \"$pair_id\"\n    container 'ezlabgva/busco:v5.0.0_cv1'\n    containerOptions '-u $(id -u):$(id -g) -v $(pwd):/busco_wd'\n    publishDir busco_stats_publish_dir, mode: 'copy', saveAs: {filename -> filename.replaceAll('.txt', \"_${pair_id}_.txt\")}, overwrite: true\n    errorStrategy 'ignore'\n    cpus params.busco_threads\n\n    input:\n    tuple val(pair_id), file(trin_assembly_fasta) from ch_trinity_stats\n\n    output:\n    tuple file(\"*eukaryota_odb10*.txt\"), file(\"*alveolata_odb10*.txt\"), file(\"*stramenopiles_odb10*.txt\") into ch_busco_out\n\n    script:\n    \"\"\"\n    busco -i $trin_assembly_fasta -o busco_results -m transcriptome -l eukaryota_odb10 -c ${task.cpus} -f\n    mv busco_results/*eukaryota_odb10*.txt .\n    busco -i $trin_assembly_fasta -o busco_results -m transcriptome -l alveolata_odb10 -c ${task.cpus} -f\n    mv busco_results/*alveolata_odb10*.txt .\n    busco -i $trin_assembly_fasta -o busco_results -m transcriptome -l stramenopiles_odb10 -c ${task.cpus} -f\n    mv busco_results/*stramenopiles_odb10*.txt .\n    rm -r busco_downloads\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    busco -i $trin_assembly_fasta -o busco_results -m transcriptome -l eukaryota_odb10 -c ${task.cpus} -f\n    mv busco_results/*eukaryota_odb10*.txt .\n    busco -i $trin_assembly_fasta -o busco_results -m transcriptome -l alveolata_odb10 -c ${task.cpus} -f\n    mv busco_results/*alveolata_odb10*.txt .\n    busco -i $trin_assembly_fasta -o busco_results -m transcriptome -l stramenopiles_odb10 -c ${task.cpus} -f\n    mv busco_results/*stramenopiles_odb10*.txt .\n    rm -r busco_downloads\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "ch_trinity_stats"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_busco_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$pair_id\"",
            "container 'ezlabgva/busco:v5.0.0_cv1'",
            "containerOptions '-u $(id -u):$(id -g) -v $(pwd):/busco_wd'",
            "publishDir busco_stats_publish_dir, mode: 'copy', saveAs: {filename -> filename.replaceAll('.txt', \"_${pair_id}_.txt\")}, overwrite: true",
            "errorStrategy 'ignore'",
            "cpus params.busco_threads"
        ],
        "when": "",
        "stub": ""
    },
    "assembly_bowtie_db": {
        "name_process": "assembly_bowtie_db",
        "string_process": "\nprocess assembly_bowtie_db{\n    cache 'lenient'\n    tag \"$pair_id\"\n    cpus params.bowtie2_threads\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n\n    input:\n    tuple val(pair_id), file(trin_assembly_fasta) from ch_assembly_bowtie_db\n\n    output:\n    tuple val(pair_id), file(\"${pair_id}_bt_db*\") into ch_bowtie2_mapping_stats_indexed_assembly\n\n    script:\n    \"\"\"\n    bowtie2-build $trin_assembly_fasta ${pair_id}_bt_db --threads ${task.cpus}\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bowtie2-build $trin_assembly_fasta ${pair_id}_bt_db --threads ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_assembly_bowtie_db"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bowtie2_mapping_stats_indexed_assembly"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$pair_id\"",
            "cpus params.bowtie2_threads",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie2_mapping_stats_reads": {
        "name_process": "bowtie2_mapping_stats_reads",
        "string_process": "\nprocess bowtie2_mapping_stats_reads{\n    cache 'lenient'\n    tag \"${pair_ids[0]}\"\n    publishDir read_mapping_stats_publish_dir, mode: 'copy', overwrite: true\n    cpus params.bowtie2_threads\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n\n    input:\n    tuple val(pair_ids), file(reads), file(assembly_db) from ch_bowtie2_mapping_stats_indexed_assembly.mix(ch_bowtie2_mapping_stats_reads).collect().flatMap{ items_list -> println \"THIS is starting the pair_read_to_assembly\"\n        println \"THIS is the items_list ${items_list}\"\n        def return_list = []\n                                                                                 \n        def assembly_val_to_file_val_map = [:]\n        for (i = 0; i <items_list.size(); i+=2) {\n            println \"items_list[i] is ${items_list[i]}\"\n            for (j = 0; j <items_list.size(); j+=2) {\n                println \"items_list[j] is ${items_list[j]}\"\n                try{\n                    items_list[j].startsWith(items_list[i])\n                }catch(Exception ex){\n                    println \"ERRORHERE i: ${i}, j: ${j}, items_list[i]:${items_list[i]}, items_list[j]:${items_list[j]}\"\n                }\n                if(items_list[j].startsWith(items_list[i]) && items_list[i] != items_list[j]){\n                                                                       \n                                                                                    \n                    if(assembly_val_to_file_val_map.containsKey(items_list[i])){\n                                                                                        \n                                                             \n                        current_read_val_list = assembly_val_to_file_val_map.get(items_list[i])\n                        new_read_val_list = current_read_val_list + items_list[j]\n                        assembly_val_to_file_val_map[items_list[i]] = new_read_val_list\n                    }else{\n                                                                                                \n                        assembly_val_to_file_val_map[items_list[i]] = [items_list[j]]\n                    }\n                }\n            }\n        }\n        \n                                                   \n        def val_to_files_list_map = [:]\n        for (i = 0; i <items_list.size(); i+=2) {\n            \n            val_to_files_list_map.put(items_list[i], items_list[i+1])\n        }\n\n                                                                                  \n                                                                                        \n                                                \n                                                                                                \n        assembly_val_to_file_val_map.each { assembly_key, read_val_list ->\n            read_val_list.each{read_name ->\n                def tup = tuple(read_name, val_to_files_list_map[read_name] + val_to_files_list_map[assembly_key])\n                return_list << tuple([read_name, assembly_key], val_to_files_list_map[read_name], val_to_files_list_map[assembly_key])\n            }\n        }\n        return return_list\n        }\n\n    output:\n    file(\"${pair_ids[0]}_align_stats.txt\")\n\n    script:\n    \"\"\"\n    bowtie2 -p ${task.cpus} -q --no-unal -k 20 -x ${pair_ids[1]}_bt_db -1 ${reads[0]} \\\\\n    -2 ${reads[1]} 2>${pair_ids[0]}_align_stats.txt\n    \"\"\"\n}",
        "nb_lignes_process": 68,
        "string_script": "    \"\"\"\n    bowtie2 -p ${task.cpus} -q --no-unal -k 20 -x ${pair_ids[1]}_bt_db -1 ${reads[0]} \\\\\n    -2 ${reads[1]} 2>${pair_ids[0]}_align_stats.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "ch_bowtie2_mapping_stats_indexed_assembly",
            "ch_bowtie2_mapping_stats_reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"${pair_ids[0]}\"",
            "publishDir read_mapping_stats_publish_dir, mode: 'copy', overwrite: true",
            "cpus params.bowtie2_threads",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'"
        ],
        "when": "",
        "stub": ""
    },
    "rsem": {
        "name_process": "rsem",
        "string_process": "\nprocess rsem{\n    cache 'lenient'\n    tag \"$pair_id\"\n    cpus params.rsem_threads\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir expression_quantification_rsem_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(pair_ids), file(reads), file(assembly) from ch_rsem_assemblies.mix(ch_rsem_reads).collect().flatMap{ items_list -> println \"THIS is starting the pair_read_to_assembly\"\n        println \"THIS is the items_list ${items_list}\"\n        def return_list = []\n                                                                                 \n        def assembly_val_to_file_val_map = [:]\n        for (i = 0; i <items_list.size(); i+=2) {\n            println \"items_list[i] is ${items_list[i]}\"\n            for (j = 0; j <items_list.size(); j+=2) {\n                println \"items_list[j] is ${items_list[j]}\"\n                try{\n                    items_list[j].startsWith(items_list[i])\n                }catch(Exception ex){\n                    println \"ERRORHERE i: ${i}, j: ${j}, items_list[i]:${items_list[i]}, items_list[j]:${items_list[j]}\"\n                }\n                if(items_list[j].startsWith(items_list[i]) && items_list[i] != items_list[j]){\n                                                                       \n                                                                                    \n                    if(assembly_val_to_file_val_map.containsKey(items_list[i])){\n                                                                                        \n                                                             \n                        current_read_val_list = assembly_val_to_file_val_map.get(items_list[i])\n                        new_read_val_list = current_read_val_list + items_list[j]\n                        assembly_val_to_file_val_map[items_list[i]] = new_read_val_list\n                    }else{\n                                                                                                \n                        assembly_val_to_file_val_map[items_list[i]] = [items_list[j]]\n                    }\n                }\n            }\n        }\n        \n                                                   \n        def val_to_files_list_map = [:]\n        for (i = 0; i <items_list.size(); i+=2) {\n            \n            val_to_files_list_map.put(items_list[i], items_list[i+1])\n        }\n\n                                                                                  \n                                                                                        \n                                                \n                                                                                                \n        assembly_val_to_file_val_map.each { assembly_key, read_val_list ->\n            read_val_list.each{read_name ->\n                def tup = tuple(read_name, val_to_files_list_map[read_name] + val_to_files_list_map[assembly_key])\n                return_list << tuple([read_name, assembly_key], val_to_files_list_map[read_name], val_to_files_list_map[assembly_key])\n            }\n        }\n        return return_list}\n\n    output:\n    tuple val(\"${pair_ids[1]}\"), file(\"${pair_ids[0]}.RSEM.isoforms.results\") into ch_abund_to_matrix_results\n    tuple val(\"${pair_ids[1]}\"), file(\"${pair_ids[0]}.RSEM.genes.results\") into ch_abund_to_matrix_gen_results_out\n\n    script:\n    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/align_and_estimate_abundance.pl --transcripts ${assembly} \\\\\n    --left ${reads[0]} --right ${reads[1]} \\\\\n    --seqType fq --est_method RSEM --output_dir out_dir --aln_method bowtie2 --SS_lib_type RF \\\\\n    --thread_count ${task.cpus} --trinity_mode --prep_reference\n    mv out_dir/RSEM.isoforms.results ${pair_ids[0]}.RSEM.isoforms.results\n    mv out_dir/RSEM.genes.results ${pair_ids[0]}.RSEM.genes.results\n    \"\"\"\n}",
        "nb_lignes_process": 72,
        "string_script": "    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/align_and_estimate_abundance.pl --transcripts ${assembly} \\\\\n    --left ${reads[0]} --right ${reads[1]} \\\\\n    --seqType fq --est_method RSEM --output_dir out_dir --aln_method bowtie2 --SS_lib_type RF \\\\\n    --thread_count ${task.cpus} --trinity_mode --prep_reference\n    mv out_dir/RSEM.isoforms.results ${pair_ids[0]}.RSEM.isoforms.results\n    mv out_dir/RSEM.genes.results ${pair_ids[0]}.RSEM.genes.results\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_rsem_assemblies",
            "ch_rsem_reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_abund_to_matrix_results",
            "ch_abund_to_matrix_gen_results_out"
        ],
        "nb_outputs": 2,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$pair_id\"",
            "cpus params.rsem_threads",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir expression_quantification_rsem_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "abund_to_matrix": {
        "name_process": "abund_to_matrix",
        "string_process": "\nprocess abund_to_matrix{\n    cache 'lenient'\n    tag \"$assembly_id\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir expression_quantification_rsem_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(assembly_id), file(abund_results), file(gene_map) from ch_abund_to_matrix_results.groupTuple().join(ch_abund_to_matrix_gene_map)\n\n    output:\n    tuple val(assembly_id), file(\"${assembly_id}.RSEM.isoform.counts.matrix\"), file(\"${assembly_id}.RSEM.isoform.TPM.not_cross_norm\"), file(\"${assembly_id}.RSEM.isoform.TMM.EXPR.matrix\") into ch_abund_to_matrix_out_out\n    tuple val(assembly_id), file(\"${assembly_id}.RSEM.isoform.TMM.EXPR.matrix\") into ch_ExN50_matrix\n\n    script:\n    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/abundance_estimates_to_matrix.pl --est_method RSEM --gene_trans_map ${gene_map} --out_prefix RSEM ${abund_results[0]} ${abund_results[1]}\n    mv RSEM.isoform.counts.matrix ${assembly_id}.RSEM.isoform.counts.matrix\n    mv RSEM.isoform.TPM.not_cross_norm ${assembly_id}.RSEM.isoform.TPM.not_cross_norm\n    mv RSEM.isoform.TMM.EXPR.matrix ${assembly_id}.RSEM.isoform.TMM.EXPR.matrix\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/abundance_estimates_to_matrix.pl --est_method RSEM --gene_trans_map ${gene_map} --out_prefix RSEM ${abund_results[0]} ${abund_results[1]}\n    mv RSEM.isoform.counts.matrix ${assembly_id}.RSEM.isoform.counts.matrix\n    mv RSEM.isoform.TPM.not_cross_norm ${assembly_id}.RSEM.isoform.TPM.not_cross_norm\n    mv RSEM.isoform.TMM.EXPR.matrix ${assembly_id}.RSEM.isoform.TMM.EXPR.matrix\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_abund_to_matrix_results",
            "ch_abund_to_matrix_gene_map"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_abund_to_matrix_out_out",
            "ch_ExN50_matrix"
        ],
        "nb_outputs": 2,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$assembly_id\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir expression_quantification_rsem_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "ExN50": {
        "name_process": "ExN50",
        "string_process": "\nprocess ExN50{\n    cache 'lenient'\n    tag \"$assembly_id\"\n    container 'trinityrnaseq/trinityrnaseq:latest'\n    containerOptions '-u $(id -u):$(id -g)'\n    publishDir expression_quantification_rsem_publish_dir, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(assembly_id), file(abund_matrix), file(assembly_fasta) from ch_ExN50_matrix.join(ch_ExN50_assembly)\n\n    output:\n    tuple file(\"${assembly_id}.RSEM.isoform.TMM.EXPR.matrix.E-inputs\"), file(\"${assembly_id}.ExN50_plot.pdf\"), file(\"${assembly_id}.ExN50.stats\"), file(\"${assembly_id}.Ex90N50.txt\") into ch_ExN50_out\n    \n    script:\n    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/misc/contig_ExN50_statistic.pl $abund_matrix $assembly_fasta | tee ExN50.stats\n    /usr/local/bin/trinityrnaseq/util/misc/plot_ExN50_statistic.Rscript  ExN50.stats\n    cat ${assembly_id}.RSEM.isoform.TMM.EXPR.matrix.E-inputs |  egrep -v ^\\\\# | awk '\\$1 <= 90' | wc -l > Ex90N50.txt\n    mv ExN50_plot.pdf ${assembly_id}.ExN50_plot.pdf\n    mv ExN50.stats ${assembly_id}.ExN50.stats\n    mv Ex90N50.txt ${assembly_id}.Ex90N50.txt\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    /usr/local/bin/trinityrnaseq/util/misc/contig_ExN50_statistic.pl $abund_matrix $assembly_fasta | tee ExN50.stats\n    /usr/local/bin/trinityrnaseq/util/misc/plot_ExN50_statistic.Rscript  ExN50.stats\n    cat ${assembly_id}.RSEM.isoform.TMM.EXPR.matrix.E-inputs |  egrep -v ^\\\\# | awk '\\$1 <= 90' | wc -l > Ex90N50.txt\n    mv ExN50_plot.pdf ${assembly_id}.ExN50_plot.pdf\n    mv ExN50.stats ${assembly_id}.ExN50.stats\n    mv Ex90N50.txt ${assembly_id}.Ex90N50.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_ExN50_matrix",
            "ch_ExN50_assembly"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_ExN50_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "didillysquat__yamada",
        "directive": [
            "cache 'lenient'",
            "tag \"$assembly_id\"",
            "container 'trinityrnaseq/trinityrnaseq:latest'",
            "containerOptions '-u $(id -u):$(id -g)'",
            "publishDir expression_quantification_rsem_publish_dir, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
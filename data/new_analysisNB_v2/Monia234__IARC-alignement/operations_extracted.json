{
    "OPERATION_1": {
        "string": "Channel.fromPath(\"${params.input_file}\")\n\t\t\t.splitCsv(header: true, sep: '\\t', strip: true)\n\t\t\t.map { row -> [row.SM , \"_\"+row.RG , file(row.pair1), file(row.pair2) ] }\n      .into{readPairs0;readPairs4group}",
        "origin": [
            [
                "\"${params.input_file}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "readPairs0",
                "P"
            ],
            [
                "readPairs4group",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "readPairs = Channel.fromFilePairs(params.input_folder +\"/*{${params.suffix1},${params.suffix2}}\" +'.'+ params.fastq_ext)\n\t\t\t   .map { row -> [ row[0] , 1 , \"\" , row[1][0], row[1][1] ] }",
        "origin": [
            [
                "params.input_folder +\"/*{${params.suffix1},${params.suffix2}}\" +'.'+ params.fastq_ext",
                "A"
            ]
        ],
        "gives": [
            [
                "readPairs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "files = Channel.fromPath( params.input_folder+'/*.bam' )",
        "origin": [
            [
                "params.input_folder+'/*.bam'",
                "A"
            ]
        ],
        "gives": [
            [
                "files",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "recal_table_files = Channel.from ( 'NOFILE1', 'NOFILE2' )",
        "origin": [
            [
                "'NOFILE1', 'NOFILE2'",
                "V"
            ]
        ],
        "gives": [
            [
                "recal_table_files",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "readPairsgrouped = readPairs4group.groupTuple(by: 0)\n\t                                 .map{ a -> [a[0],a[1].size(),a[1],a[2],a[3]] }",
        "origin": [
            [
                "readPairs4group",
                "P"
            ]
        ],
        "gives": [
            [
                "readPairsgrouped",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "readPairs = readPairsgrouped.map{ a -> [a[0],a[1]] }\n                            .cross( readPairs0 )\n                            .map{a -> [a[1][0],a[0][1],a[1][1],a[1][2],a[1][3] ] }",
        "origin": [
            [
                "readPairsgrouped",
                "P"
            ],
            [
                "readPairs0",
                "P"
            ]
        ],
        "gives": [
            [
                "readPairs",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "bam_bai_files0.into{bam_bai_2group;bam_bai_files2filter}",
        "origin": [
            [
                "bam_bai_files0",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_bai_2group",
                "P"
            ],
            [
                "bam_bai_files2filter",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "bam_bai_grouped4merge = bam_bai_2group.groupTuple(by: 0)\n\t                                      .map{ a -> [a[0],a[2].size(),a[2],a[3],a[4]] }",
        "origin": [
            [
                "bam_bai_2group",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_bai_grouped4merge",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "bam_bai_files2filter.filter { a -> a[1] > 1  }\n                      .set{mult2QC}",
        "origin": [
            [
                "bam_bai_files2filter",
                "P"
            ]
        ],
        "gives": [
            [
                "mult2QC",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "final_bam_bai_files = bam_bai_files",
        "origin": [
            [
                "bam_bai_files",
                "P"
            ]
        ],
        "gives": [
            [
                "final_bam_bai_files",
                "P"
            ]
        ]
    }
}
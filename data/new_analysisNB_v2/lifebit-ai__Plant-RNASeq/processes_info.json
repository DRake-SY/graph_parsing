{
    "real": {
        "name_process": "real",
        "string_process": "\nprocess real {\n    cpus threads\n    tag \"$reads\"\n    publishDir \"${params.outdir}/real\", mode: 'copy'\n\n    input:\n    set val(name), file(reads), file(fasta) from read_files_real\n\n    output:\n    set val(name), file(\"*.aln\") into real_output\n\n    script:\n    \"\"\"\n    real -T ${task.cpus} -p $reads -t $fasta -o ${name}.out\n    awk '{ print >> \\$9\".aln\" }' ${name}.out\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    real -T ${task.cpus} -p $reads -t $fasta -o ${name}.out\n    awk '{ print >> \\$9\".aln\" }' ${name}.out\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "REAL"
        ],
        "tools_url": [
            "https://bio.tools/real"
        ],
        "tools_dico": [
            {
                "name": "REAL",
                "uri": "https://bio.tools/real",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "REad ALigner for Next-Generation sequencing reads.",
                "homepage": "https://nms.kcl.ac.uk/informatics/projects/real/?id=man"
            }
        ],
        "inputs": [
            "read_files_real"
        ],
        "nb_inputs": 1,
        "outputs": [
            "real_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__Plant-RNASeq",
        "directive": [
            "cpus threads",
            "tag \"$reads\"",
            "publishDir \"${params.outdir}/real\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "split_chr": {
        "name_process": "split_chr",
        "string_process": "\nprocess split_chr {\n   tag \"$fasta\"\n   publishDir \"${params.outdir}/split_chr\", mode: 'copy'\n\n   input:\n   file fasta from fasta_split_chr\n\n   output:\n   file \"*.fa\" into chrs\n\n   script:\n   \"\"\"\n   faidx -x $fasta\n   \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "   \"\"\"\n   faidx -x $fasta\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "pyfaidx"
        ],
        "tools_url": [
            "https://bio.tools/pyfaidx"
        ],
        "tools_dico": [
            {
                "name": "pyfaidx",
                "uri": "https://bio.tools/pyfaidx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This python module implements pure Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index.",
                "homepage": "https://pythonhosted.org/pyfaidx/"
            }
        ],
        "inputs": [
            "fasta_split_chr"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chrs"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__Plant-RNASeq",
        "directive": [
            "tag \"$fasta\"",
            "publishDir \"${params.outdir}/split_chr\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "isosegmenter": {
        "name_process": "isosegmenter",
        "string_process": " process isosegmenter {\n\n     tag \"$chr\"\n\n     publishDir \"${params.outdir}/isosegmenter\", mode: 'copy'\n\n     container 'bunop/isosegmenter:latest'\n\n     input:\n     set val(name), file(chr) from chr\n\n     output:\n     file \"${name}.csv\" into iso, iso_mk_gene_exp_input\n\n     script:\n     \"\"\"\n     isoSegmenter.py --infile $chr --window_size 100000 --outfile ${name}_wgap.csv\n     awk 'BEGIN{FS=\",\"}\\$4!=\"gap\"{print \\$0}' ${name}_wgap.csv > ${name}.csv\n     \"\"\"\n }",
        "nb_lignes_process": 18,
        "string_script": "     \"\"\"\n     isoSegmenter.py --infile $chr --window_size 100000 --outfile ${name}_wgap.csv\n     awk 'BEGIN{FS=\",\"}\\$4!=\"gap\"{print \\$0}' ${name}_wgap.csv > ${name}.csv\n     \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chr"
        ],
        "nb_inputs": 1,
        "outputs": [
            "iso",
            "iso_mk_gene_exp_input"
        ],
        "nb_outputs": 2,
        "name_workflow": "lifebit-ai__Plant-RNASeq",
        "directive": [
            "tag \"$chr\"",
            "publishDir \"${params.outdir}/isosegmenter\", mode: 'copy'",
            "container 'bunop/isosegmenter:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "no_reads": {
        "name_process": "no_reads",
        "string_process": "\nprocess no_reads {\n\n    publishDir \"${params.outdir}/no_reads\", mode: 'copy'\n\n    input:\n    set val(isochore_name), val(sample_name), file(aligned_read), file(isochore) from iso_no_reads\n\n    output:\n    file \"*.csv\" into csv\n\n    script:\n    \"\"\"\n    sort -k 10,10n $aligned_read > ${aligned_read}.s\n    noReads.py $isochore ${aligned_read}.s > ${isochore_name}_${sample_name}.csv\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    sort -k 10,10n $aligned_read > ${aligned_read}.s\n    noReads.py $isochore ${aligned_read}.s > ${isochore_name}_${sample_name}.csv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "iso_no_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__Plant-RNASeq",
        "directive": [
            "publishDir \"${params.outdir}/no_reads\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mk_gene_exp_input": {
        "name_process": "mk_gene_exp_input",
        "string_process": "\nprocess mk_gene_exp_input {\n\n    publishDir \"${params.outdir}/mk_gene_exp_input\", mode: 'copy'\n\n    input:\n    file iso from iso_mk_gene_exp_input.collect()\n    file csv from csv.collect()\n\n    output:\n    file \"gene_exp_input.csv\" into gene_exp\n\n    script:\n    \"\"\"\n    mk_gene_exp_input.py\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mk_gene_exp_input.py\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "iso_mk_gene_exp_input",
            "csv"
        ],
        "nb_inputs": 2,
        "outputs": [
            "gene_exp"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__Plant-RNASeq",
        "directive": [
            "publishDir \"${params.outdir}/mk_gene_exp_input\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gene_exp": {
        "name_process": "gene_exp",
        "string_process": "\nprocess gene_exp {\n    tag \"output_gene_expression.csv\"\n\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    file isochore_reads from gene_exp\n\n    output:\n    file \"output_gene_expression.csv\" into results\n\n    script:\n    \"\"\"\n    geneExp.py $isochore_reads $params.conditions >> output_gene_expression.csv\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    geneExp.py $isochore_reads $params.conditions >> output_gene_expression.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gene_exp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "results"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__Plant-RNASeq",
        "directive": [
            "tag \"output_gene_expression.csv\"",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
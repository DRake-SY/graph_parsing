{
    "OPERATION_1": {
        "string": "fasta = Channel\n      .fromPath(params.fasta)\n      .ifEmpty { exit 1, \"${params.fasta} not found\"}\n                                                   \n      .into { fasta_real; fasta_split_chr }",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta",
                "P"
            ],
            [
                "fasta_real",
                "P"
            ],
            [
                "fasta_split_chr",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n            .fromPath(reads)\n            .map { file -> tuple(file.baseName, file) }\n            .ifEmpty { exit 1, \"${reads} was empty - no input files supplied\" }\n            .combine(fasta_real)\n            .into { read_files_fastqc; read_files_real }",
        "origin": [
            [
                "fasta_real",
                "P"
            ],
            [
                "reads",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_real",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "read_files_fastqc.subscribe{println \"value: $it\"}",
        "origin": [
            [
                "read_files_fastqc",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_4": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "real_output\n   .flatMap { aln ->\n        list_chrs = []\n        aln[1].each { chrFile ->\n                list_chrs << tuple(chrFile.baseName, aln[0], chrFile)\n        }\n        list_chrs\n    }\n    .set{aligned_reads_no_reads}",
        "origin": [
            [
                "real_output",
                "P"
            ],
            [
                "tuple(chrFile.baseName, aln[0], chrFile)",
                "V"
            ]
        ],
        "gives": [
            [
                "aligned_reads_no_reads",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "chrs.flatten()\n    .map{ file -> tuple(file.baseName, file) }\n    .set{chr}",
        "origin": [
            [
                "chrs",
                "P"
            ]
        ],
        "gives": [
            [
                "chr",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "iso.flatten()\n    .map{ file -> tuple(file.baseName, file) }\n    .cross(aligned_reads_no_reads)\n    .map { it ->\n       [it[1][0], it[1][1], it[1][2], it[0][1]]\n     }\n    .set{ iso_no_reads }",
        "origin": [
            [
                "iso",
                "P"
            ],
            [
                "aligned_reads_no_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "iso_no_reads",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "bam_ch = Channel.fromFilePairs(\"${params.input_folder}/*{$params.ext,$params.index_ext}\")\n                         .map { row -> tuple(row[0],\"\",row[1][0], row[1][1]) }",
        "origin": [
            [
                "\"${params.input_folder}/*{$params.ext,$params.index_ext}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "bam_ch = Channel.fromPath(\"${params.input_file}\")\n\t\t\t            .splitCsv(header: true, sep: '\\t', strip: true)\n\t\t\t            .map { row -> [row.ID , row.suffix , file(row.bam), file(row.bam+params.index_ext) ] }",
        "origin": [
            [
                "\"${params.input_file}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "bam_ch = Channel.fromPath(params.input)\n\t\t\t                .map { input -> tuple(input.baseName, \"\", input, input.parent / input.baseName + params.index_ext) }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ncm_graphfiles = Channel.fromPath(\"$baseDir/bin/graph/*\")",
        "origin": [
            [
                "\"$baseDir/bin/graph/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ncm_graphfiles",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "vcf_ch4print = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "vcf_ch4print",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "vcf_ch2 = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "vcf_ch2",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "vcf_ch.into{ vcf_ch2; vcf_ch4print}",
        "origin": [
            [
                "vcf_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_ch2",
                "P"
            ],
            [
                "vcf_ch4print",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "vcf_ch4print.collect()\n            .subscribe{ row -> println \"${row}\" }",
        "origin": [
            [
                "vcf_ch4print",
                "P"
            ]
        ],
        "gives": []
    }
}
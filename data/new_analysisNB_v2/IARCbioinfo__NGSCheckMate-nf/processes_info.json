{
    "BCFTOOLS_calling": {
        "name_process": "BCFTOOLS_calling",
        "string_process": "\nprocess BCFTOOLS_calling{\n    tag \"$file_tag\"\n\n    cpus params.cpu\n    memory params.mem+'G'\n\n    input:\n    file genome from ref\n    file genome_fai from ref_fai\n \t\n    set ID, suffix, file(bam), file(bai) from bam_ch\n    file bed\n\n    output:\n    file(\"*.vcf\") into vcf_ch\n    file(\"*.vcf.gz*\") into vcfgz_ch\n    file(\"input_plots*.tsv\") into plot_inputs\n\n    publishDir params.output_folder+\"/vcfs/\", mode: 'copy'\n\n    shell:\n    cpus_mpileup = params.cpu.intdiv(2)\n    cpus_call = params.cpu.intdiv(2)\n    file_tag = bam.name.replace(params.ext,\"\")\n\t'''\n    #samtools faidx !{genome}\n    bcftools mpileup --threads !{cpus_mpileup} --max-depth 5000 -Ou -I -R !{bed} -f !{genome} !{bam} | bcftools call --threads !{cpus_call} -c -o !{file_tag}_allSM.vcf\n    for sample in `bcftools query -l !{file_tag}_allSM.vcf`; do\n        bcftools view -Ou -s ${sample} !{file_tag}_allSM.vcf | bcftools sort -Ou | bcftools norm -d none -O v -o ${sample}!{suffix}.vcf\n        bcftools view -Oz -o ${sample}!{suffix}.vcf.gz ${sample}!{suffix}.vcf\n        tabix -p vcf ${sample}!{suffix}.vcf.gz\n        echo \"${sample}!{suffix}.vcf\\t!{ID}\\t${sample}!{suffix}\" >> input_plots_${sample}!{suffix}.tsv\n    done\n    rm !{file_tag}_allSM.vcf\n    '''\n}",
        "nb_lignes_process": 35,
        "string_script": "    cpus_mpileup = params.cpu.intdiv(2)\n    cpus_call = params.cpu.intdiv(2)\n    file_tag = bam.name.replace(params.ext,\"\")\n\t'''\n    #samtools faidx !{genome}\n    bcftools mpileup --threads !{cpus_mpileup} --max-depth 5000 -Ou -I -R !{bed} -f !{genome} !{bam} | bcftools call --threads !{cpus_call} -c -o !{file_tag}_allSM.vcf\n    for sample in `bcftools query -l !{file_tag}_allSM.vcf`; do\n        bcftools view -Ou -s ${sample} !{file_tag}_allSM.vcf | bcftools sort -Ou | bcftools norm -d none -O v -o ${sample}!{suffix}.vcf\n        bcftools view -Oz -o ${sample}!{suffix}.vcf.gz ${sample}!{suffix}.vcf\n        tabix -p vcf ${sample}!{suffix}.vcf.gz\n        echo \"${sample}!{suffix}.vcf\\t!{ID}\\t${sample}!{suffix}\" >> input_plots_${sample}!{suffix}.tsv\n    done\n    rm !{file_tag}_allSM.vcf\n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ref",
            "ref_fai",
            "bam_ch",
            "bed"
        ],
        "nb_inputs": 4,
        "outputs": [
            "vcf_ch",
            "vcfgz_ch",
            "plot_inputs"
        ],
        "nb_outputs": 3,
        "name_workflow": "IARCbioinfo__NGSCheckMate-nf",
        "directive": [
            "tag \"$file_tag\"",
            "cpus params.cpu",
            "memory params.mem+'G'"
        ],
        "when": "",
        "stub": ""
    },
    "NCM_run": {
        "name_process": "NCM_run",
        "string_process": "\nprocess NCM_run {\n    cpus 1\n    memory params.mem+'G'\n\n    publishDir params.output_folder, mode: 'copy'\n    \n    input:\n    file (vcf) from vcf_ch2.collect()\n    file genome from ref \n\n\toutput:\n    file (\"NCM_output\") into ncm_ch\n    file (\"listVCF\") into vcflist\n\t\n    script:\n\t\"\"\"\n    cp -r \\$NCM_HOME .\n    export NCM_HOME=\"\\$PWD/NGSCheckMate\"\n    echo \"REF=${params.ref}\" > \\$NCM_HOME/ncm.conf\n    echo \"SAMTOOLS=samtools\" >> \\$NCM_HOME/ncm.conf\n    echo \"BCFTOOLS=bcftools\" >> \\$NCM_HOME/ncm.conf\n\tls \\$PWD/*.vcf > listVCF\n\n\tmkdir NCM_output\n\n\tpython \\$NCM_HOME/ncm.py -V -l listVCF -bed ${bed} -O ./NCM_output\n\t\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\t\"\"\"\n    cp -r \\$NCM_HOME .\n    export NCM_HOME=\"\\$PWD/NGSCheckMate\"\n    echo \"REF=${params.ref}\" > \\$NCM_HOME/ncm.conf\n    echo \"SAMTOOLS=samtools\" >> \\$NCM_HOME/ncm.conf\n    echo \"BCFTOOLS=bcftools\" >> \\$NCM_HOME/ncm.conf\n\tls \\$PWD/*.vcf > listVCF\n\n\tmkdir NCM_output\n\n\tpython \\$NCM_HOME/ncm.py -V -l listVCF -bed ${bed} -O ./NCM_output\n\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_ch2",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ncm_ch",
            "vcflist"
        ],
        "nb_outputs": 2,
        "name_workflow": "IARCbioinfo__NGSCheckMate-nf",
        "directive": [
            "cpus 1",
            "memory params.mem+'G'",
            "publishDir params.output_folder, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "NCM_graphs": {
        "name_process": "NCM_graphs",
        "string_process": "\nprocess NCM_graphs {\n    cpus 1\n    memory '2 GB'\n\n    publishDir \"${params.output_folder}/NCM_output\", mode: 'copy'\n    \n    input:\n    file (\"NCM_output\") from ncm_ch\n    file infile from plot_inputs.collect()\n    file graphfiles from ncm_graphfiles.collect()\n\n\toutput:\n    file (\"*.xgmml\") into graphs\n\n    shell:\n\t'''\n    cat !{infile} > input_plots.tsv\n    Rscript !{baseDir}/bin/plots.R input_plots.tsv\n\t'''\n}",
        "nb_lignes_process": 19,
        "string_script": "\t'''\n    cat !{infile} > input_plots.tsv\n    Rscript !{baseDir}/bin/plots.R input_plots.tsv\n\t'''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ncm_ch",
            "plot_inputs",
            "ncm_graphfiles"
        ],
        "nb_inputs": 3,
        "outputs": [
            "graphs"
        ],
        "nb_outputs": 1,
        "name_workflow": "IARCbioinfo__NGSCheckMate-nf",
        "directive": [
            "cpus 1",
            "memory '2 GB'",
            "publishDir \"${params.output_folder}/NCM_output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
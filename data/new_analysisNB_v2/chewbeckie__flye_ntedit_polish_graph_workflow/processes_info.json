{
    "fastp": {
        "name_process": "fastp",
        "string_process": " process fastp {\n    queue 'smallq'\n    memory '5 GB'\n    cpus  4\n    executor 'pbspro'\n\n        conda 'bioconda::fastp'\n        tag \"$sampleId\"\n        publishDir \"${params.outdir}/trimmed\", mode: 'copy'\n\n        input:\n          set sampleId, file(read1), file(read2) from trim_ch\n\n        output:\n          set val(sampleId), file(\"trimmed_${sampleId}_R1.fastq.gz\") into tread1_ch\n          set val(sampleId), file(\"trimmed_${sampleId}_R2.fastq.gz\") into tread2_ch\n          file(\"fastp.*\") into fastpresult\n\n        script:\n          \"\"\"\n          fastp -i \"${read1}\" -I \"${read2}\"\\\n          -o \"trimmed_${sampleId}_R1.fastq.gz\"\\\n          -O \"trimmed_${sampleId}_R2.fastq.gz\"\n          \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "          \"\"\"\n          fastp -i \"${read1}\" -I \"${read2}\"\\\n          -o \"trimmed_${sampleId}_R1.fastq.gz\"\\\n          -O \"trimmed_${sampleId}_R2.fastq.gz\"\n          \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "trim_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tread1_ch",
            "tread2_ch",
            "fastpresult"
        ],
        "nb_outputs": 3,
        "name_workflow": "chewbeckie__flye_ntedit_polish_graph_workflow",
        "directive": [
            "queue 'smallq'",
            "memory '5 GB'",
            "cpus 4",
            "executor 'pbspro'",
            "conda 'bioconda::fastp'",
            "tag \"$sampleId\"",
            "publishDir \"${params.outdir}/trimmed\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "metaflye_assembly": {
        "name_process": "metaflye_assembly",
        "string_process": "\nprocess metaflye_assembly{\n  queue 'workq'\n  memory '100 GB'\n  cpus  20\n  executor 'pbspro'\n\n        tag \"$sampleId\"\n        conda 'bioconda::flye'\n        publishDir \"${params.outdir}/assembly\", mode: 'copy'\n\n    input:\n        set val(sampleId), file(longread) from longread_ch\n\n    output:\n        set val(sampleId), file(\"flye_${sampleId}/*\") into assembly_result\n        set val(sampleId), file(\"${sampleId}_assembly.gfa\") into graph_ch\n    \n    script:\n        \"\"\"\n        flye --nano-raw $longread \\\n        --meta --genome-size $params.gs \\\n        -t 16 -o flye_$sampleId\n        cp flye_${sampleId}/assembly_graph.gfa ${sampleId}_assembly.gfa\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        flye --nano-raw $longread \\\n        --meta --genome-size $params.gs \\\n        -t 16 -o flye_$sampleId\n        cp flye_${sampleId}/assembly_graph.gfa ${sampleId}_assembly.gfa\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "longread_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_result",
            "graph_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "chewbeckie__flye_ntedit_polish_graph_workflow",
        "directive": [
            "queue 'workq'",
            "memory '100 GB'",
            "cpus 20",
            "executor 'pbspro'",
            "tag \"$sampleId\"",
            "conda 'bioconda::flye'",
            "publishDir \"${params.outdir}/assembly\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ntedit_polish": {
        "name_process": "ntedit_polish",
        "string_process": "\nprocess ntedit_polish{  \n  queue 'workq'\n  memory '40 GB'\n  cpus  16\n  executor 'pbspro'\n\n        tag \"$sampleId\"\n        conda 'bioconda::ntedit'\n        publishDir \"${params.outdir}/ntedit_polish\", mode: 'copy'\n\n    input:\n        set val(sampleId), file(tread1) from tread1_ch\n        set val(sampleId), file(tread2) from tread2_ch\n        set val(sampleId), file(graph) from graph_ch\n\n    output:\n        file(\"*.fa\")\n        file(\"*.tsv\")\n        file(\"*.vcf\")\n        file(\"*.bf\")\n        file(\"*.gfa\")\n\n            \n        '''\n        awk '/^S/{print \">\"$2 \"\\\\n\"$3}' !{graph} | fold > !{sampleId}_assembly.fa\n        nthits -c 1 --outbloom -p solidBF_!{sampleId} -b 36 -k 40 -t 16 !{tread1} !{tread2}\n        ntedit -m 1 -f !{sampleId}_assembly.fa -r solidBF_!{sampleId}_k40.bf -b !{sampleId}\n        '' \n  \n    script:\n      \"\"\"\n      flye_gfa_to_fasta_for_polishing.py $graph ${sampleId}_assembly.fa\n      nthits -c 1 --outbloom -p solidBF_${sampleId} -b 36 -k 40 -t 16 $tread1 $tread2\n      ntedit -m 1 -f ${sampleId}_assembly.fa -r solidBF_${sampleId}_k40.bf -b ${sampleId}_assembly\n      flye_polished_fa_to_gfa.py $graph ${sampleId}_assembly_edited.fa polished_${sampleId}.gfa\n      \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "'''\n        awk '/^S/{print \">\"$2 \"\\\\n\"$3}' !{graph} | fold > !{sampleId}_assembly.fa\n        nthits -c 1 --outbloom -p solidBF_!{sampleId} -b 36 -k 40 -t 16 !{tread1} !{tread2}\n        ntedit -m 1 -f !{sampleId}_assembly.fa -r solidBF_!{sampleId}_k40.bf -b !{sampleId}\n        '' \n  \n    script:\n      \"\"\"\n      flye_gfa_to_fasta_for_polishing.py $graph ${sampleId}_assembly.fa\n      nthits -c 1 --outbloom -p solidBF_${sampleId} -b 36 -k 40 -t 16 $tread1 $tread2\n      ntedit -m 1 -f ${sampleId}_assembly.fa -r solidBF_${sampleId}_k40.bf -b ${sampleId}_assembly\n      flye_polished_fa_to_gfa.py $graph ${sampleId}_assembly_edited.fa polished_${sampleId}.gfa\n      \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "TFold",
            "ntEdit"
        ],
        "tools_url": [
            "https://bio.tools/tfold",
            "https://bio.tools/ntEdit"
        ],
        "tools_dico": [
            {
                "name": "TFold",
                "uri": "https://bio.tools/tfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An algorithm for predicting non-coding RNA secondary structures.",
                "homepage": "https://evryrna.ibisc.univ-evry.fr/evryrna/tfold"
            },
            {
                "name": "ntEdit",
                "uri": "https://bio.tools/ntEdit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Scalable genomics application for polishing genome assembly drafts. It simplifies polishing and \"haploidization\" of gene and genome sequences with its re-usable Bloom filter design.",
                "homepage": "https://github.com/bcgsc/ntedit"
            }
        ],
        "inputs": [
            "tread1_ch",
            "tread2_ch",
            "graph_ch"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chewbeckie__flye_ntedit_polish_graph_workflow",
        "directive": [
            "queue 'workq'",
            "memory '40 GB'",
            "cpus 16",
            "executor 'pbspro'",
            "tag \"$sampleId\"",
            "conda 'bioconda::ntedit'",
            "publishDir \"${params.outdir}/ntedit_polish\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
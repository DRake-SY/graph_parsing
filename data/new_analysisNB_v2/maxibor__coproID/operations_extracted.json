{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(bt1_dir+\"/*.bt2\")\n        .ifEmpty {exit 1, \"Cannot find any index matching : ${bt1}\\n\"}\n        .collect()\n        .set {bt1_ch}",
        "origin": [
            [
                "bt1_dir+\"/*.bt2\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bt1_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(bt2_dir+\"/*.bt2\")\n        .ifEmpty {exit 1, \"Cannot find any index matching : ${params.bt2}\\n\"}\n        .collect()\n        .set {bt2_ch}",
        "origin": [
            [
                "bt2_dir+\"/*.bt2\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bt2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n            .fromPath(bt3_dir+\"/*.bt2\")\n            .ifEmpty {exit 1, \"Cannot find any index matching : ${params.bt3}\\n\"}\n            .collect()\n            .set {bt3_ch}",
        "origin": [
            [
                "bt3_dir+\"/*.bt2\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bt3_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n        .fromFilePairs(params.reads, size: params.single_end ? 1 : 2)\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.reads, size: params.single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "summary.collect { k,v -> \"${k.padRight(25)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
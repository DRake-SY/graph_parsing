{
    "OPERATION_1": {
        "string": "Channel.fromPath( file(params.ref_fa) )\n.into{ ref_fa;\n    ref_fa2\n}",
        "origin": [
            [
                "file(params.ref_fa",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_fa",
                "P"
            ],
            [
                "ref_fa2",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath( file(params.ref_fai) )\n.into{ ref_fai;\nref_fai2\n}",
        "origin": [
            [
                "file(params.ref_fai",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_fai",
                "P"
            ],
            [
                "ref_fai2",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath( file(params.ref_dict) )\n.into{ ref_dict;\n    ref_dict2\n}",
        "origin": [
            [
                "file(params.ref_dict",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_dict",
                "P"
            ],
            [
                "ref_dict2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(\"variants/**.vcf\").map { item ->\n    def sampleID = \"${item.getName()}\".replaceFirst(/.vcf$/, \"\")\n    return([sampleID, item])\n}.set { input_vcfs }",
        "origin": [
            [
                "\"variants/**.vcf\"",
                "A"
            ]
        ],
        "gives": [
            [
                "input_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "vep_ref_dir.map{ item ->\n    def assembly = \"GRCh37\"\n    return([item, assembly])\n}.set{ vep_ref_dir_assembly }",
        "origin": [
            [
                "vep_ref_dir",
                "P"
            ]
        ],
        "gives": [
            [
                "vep_ref_dir_assembly",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "vep_tsvs.collectFile(name: \"annotations.tsv\", keepHeader: true, storeDir: \"${params.outputDir}\")",
        "origin": [
            [
                "vep_tsvs",
                "P"
            ]
        ],
        "gives": []
    }
}
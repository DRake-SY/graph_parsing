{
    "filter_reads": {
        "name_process": "filter_reads",
        "string_process": "\nprocess filter_reads {\n                                                    \n                                                                            \n    tag{id}\n\n    input:\n    set id, assembly, lr from samples \n\n    output:\n    set id,  assembly, file('reads_filtered.fastq') into samples_filtered\n\n    script:\n    if (params.noSubsampling)\n        \"\"\"\n        zcat -f ${lr} > reads_filtered.fastq\n        \"\"\"\n    else\n        \"\"\"\n        ${env}\n        len=\\$(grep -v '>' ${assembly} | wc -c)\n        nbases=\\$(expr \\$len * ${params.mappingCov})\n        filtlong -t \\$nbases --length_weight 0 ${lr} > reads_filtered.fastq\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    if (params.noSubsampling)\n        \"\"\"\n        zcat -f ${lr} > reads_filtered.fastq\n        \"\"\"\n    else\n        \"\"\"\n        ${env}\n        len=\\$(grep -v '>' ${assembly} | wc -c)\n        nbases=\\$(expr \\$len * ${params.mappingCov})\n        filtlong -t \\$nbases --length_weight 0 ${lr} > reads_filtered.fastq\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "samples"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samples_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "save_plasmids": {
        "name_process": "save_plasmids",
        "string_process": "\nprocess save_plasmids {\n                                         \n    tag{id + \":\" + contigName} \n    publishDir \"${params.outDir}/${id}/plasmids/\", mode: 'copy'\n\n    input:\n    set id, lr, contigName, length, sequence from contigs_3\n   \n    output:\n    file(\"${contigName}.fasta\")\n\n    script:\n    \"\"\"\n    echo \">${contigName} len=${length}\" > ${contigName}.fasta\n    echo ${sequence} >> ${contigName}.fasta\n\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    echo \">${contigName} len=${length}\" > ${contigName}.fasta\n    echo ${sequence} >> ${contigName}.fasta\n\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs_3"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id + \":\" + contigName}",
            "publishDir \"${params.outDir}/${id}/plasmids/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pad_plasmids": {
        "name_process": "pad_plasmids",
        "string_process": "\nprocess pad_plasmids {\n                                                                      \n    tag{id + \":\" + contigName}\n\n    input: \n    set id, lr, contigName, length, sequence from contigs_2\n\n    output: \n    set id, file(\"${id}_${contigName}_padded.fasta\"), lr, contigName into contigs_padded\n    \n    shell:\n    '''\n    echo '>!{contigName}' >  !{id}_!{contigName}_padded.fasta\n\n    echo !{sequence} | awk '{print \\\n        substr($1, length($1)-(!{params.seqPadding} - 1), length($1))\\\n        $1 \\\n        substr($1, 1, !{params.seqPadding})\\\n        }' >> !{id}_!{contigName}_padded.fasta\n\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    echo '>!{contigName}' >  !{id}_!{contigName}_padded.fasta\n\n    echo !{sequence} | awk '{print \\\n        substr($1, length($1)-(!{params.seqPadding} - 1), length($1))\\\n        $1 \\\n        substr($1, 1, !{params.seqPadding})\\\n        }' >> !{id}_!{contigName}_padded.fasta\n\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "contigs_padded"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id + \":\" + contigName}"
        ],
        "when": "",
        "stub": ""
    },
    "combine_padded_contigs": {
        "name_process": "combine_padded_contigs",
        "string_process": "\nprocess combine_padded_contigs {\n                                                \n    tag{id + \":\" + contigName}\n    publishDir \"${params.outDir}/${id}/alignment/\", mode: 'copy'\n\n    input:\n    set id, assembly, lr, contigName from contigs_padded.groupTuple()\n\n    output:\n    set id, file(\"${id}_padded.fasta\"), lr, val(\"padded\") into assembly_padded\n\n    script:\n    \"\"\"\n    cat \\$(echo ${assembly} | tr -d '[],') > ${id}_padded.fasta \n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    cat \\$(echo ${assembly} | tr -d '[],') > ${id}_padded.fasta \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs_padded"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_padded"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id + \":\" + contigName}",
            "publishDir \"${params.outDir}/${id}/alignment/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "map_longreads": {
        "name_process": "map_longreads",
        "string_process": "\nprocess map_longreads {\n                                                    \n    publishDir \"${params.outDir}/${id}/alignment/\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, assembly, lr, type from to_mapping\n\n    output:\n    set id, assembly, type, file(\"${id}_${type}_lr.bam\"), file(\"${id}_${type}_lr.bam.bai\") into bam_lr\n\n    script:\n    \"\"\"\n    ${env}\n    minimap2 -Y -P -ax map-ont -t ${task.cpus} ${assembly} ${lr} \\\n    | samtools sort | samtools view -b -F 4 -o  ${id}_${type}_lr.bam \n    samtools index ${id}_${type}_lr.bam ${id}_${type}_lr.bam.bai\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    ${env}\n    minimap2 -Y -P -ax map-ont -t ${task.cpus} ${assembly} ${lr} \\\n    | samtools sort | samtools view -b -F 4 -o  ${id}_${type}_lr.bam \n    samtools index ${id}_${type}_lr.bam ${id}_${type}_lr.bam.bai\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "to_mapping"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_lr"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/alignment/\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "find_ovlp_reads": {
        "name_process": "find_ovlp_reads",
        "string_process": "\nprocess find_ovlp_reads {\n                                                                        \n    tag{id + \":\" + contig_name}\n\n    input:\n    set id, lr, contig_name, length, seq, file(assembly), type, bam, bai from contigs.combine(bam_ovlp.filter{it[2] == 'padded'}, by : 0)\n\n    output:\n    set id, contig_name, length, file(\"reads.txt\"), file(\"ovlp.txt\"), file(\"cov_ovlp.txt\") optional true into circos_reads \n\n    script:\n    \"\"\"\n    ${env}\n    bedtools bamtobed -i ${bam} > reads.bed\n    echo -e ${contig_name}'\\\\t'\\$(expr ${params.seqPadding} - 10)'\\\\t'\\$(expr ${params.seqPadding} + 10) > breaks.bed\n    echo -e ${contig_name}'\\\\t'\\$(expr ${length} + ${params.seqPadding} - 10 )'\\\\t'\\$(expr ${length} + ${params.seqPadding} + 10) >> breaks.bed\n    samtools view -L breaks.bed -b ${bam} > region.bam\n    intersectBed -wa -a reads.bed -b breaks.bed > ovlp.bed\n    awk '{print \\$4}' ovlp.bed | sort | uniq -D | uniq > readID.txt\n    samtools view -H region.bam > ovlp.sam \n    samtools view region.bam | grep -f readID.txt >> ovlp.sam || true\n    samtools view -b ovlp.sam > ovlp.bam\n    samtools index ovlp.bam\n    \n    bedtools bamtobed -i ovlp.bam > ovlp_extracted.bed\n     \n    mosdepth -t ${task.cpus} -F 4 -n -b ${params.covWindow} ${contig_name} ovlp.bam\n    gunzip -c ${contig_name}.regions.bed.gz > cov_ovlp.bed\n    \n    03_prepare_bed.R ovlp_extracted.bed ${params.seqPadding} ovlp.txt FALSE ${contig_name} ${length}\n    03_prepare_bed.R cov_ovlp.bed ${params.seqPadding} cov_ovlp.txt TRUE\n    03_prepare_bed.R reads.bed ${params.seqPadding} reads.txt FALSE ${contig_name} ${length}\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    ${env}\n    bedtools bamtobed -i ${bam} > reads.bed\n    echo -e ${contig_name}'\\\\t'\\$(expr ${params.seqPadding} - 10)'\\\\t'\\$(expr ${params.seqPadding} + 10) > breaks.bed\n    echo -e ${contig_name}'\\\\t'\\$(expr ${length} + ${params.seqPadding} - 10 )'\\\\t'\\$(expr ${length} + ${params.seqPadding} + 10) >> breaks.bed\n    samtools view -L breaks.bed -b ${bam} > region.bam\n    intersectBed -wa -a reads.bed -b breaks.bed > ovlp.bed\n    awk '{print \\$4}' ovlp.bed | sort | uniq -D | uniq > readID.txt\n    samtools view -H region.bam > ovlp.sam \n    samtools view region.bam | grep -f readID.txt >> ovlp.sam || true\n    samtools view -b ovlp.sam > ovlp.bam\n    samtools index ovlp.bam\n    \n    bedtools bamtobed -i ovlp.bam > ovlp_extracted.bed\n     \n    mosdepth -t ${task.cpus} -F 4 -n -b ${params.covWindow} ${contig_name} ovlp.bam\n    gunzip -c ${contig_name}.regions.bed.gz > cov_ovlp.bed\n    \n    03_prepare_bed.R ovlp_extracted.bed ${params.seqPadding} ovlp.txt FALSE ${contig_name} ${length}\n    03_prepare_bed.R cov_ovlp.bed ${params.seqPadding} cov_ovlp.txt TRUE\n    03_prepare_bed.R reads.bed ${params.seqPadding} reads.txt FALSE ${contig_name} ${length}\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "SAMtools",
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/samtools",
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "circos_reads"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id + \":\" + contig_name}"
        ],
        "when": "",
        "stub": ""
    },
    "identify_resistance_genes": {
        "name_process": "identify_resistance_genes",
        "string_process": "\nprocess identify_resistance_genes {\n                                                        \n    publishDir \"${params.outDir}/${id}/resistances\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, assembly, lr from samples_rgi\n    \n    output:\n    set id, file(\"${id}_rgi.txt\") into from_rgi\n\n    script:\n    \"\"\"\n    ${env}\n    rgi main -i ${assembly} -n ${task.cpus} -o ${id}_rgi\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    ${env}\n    rgi main -i ${assembly} -n ${task.cpus} -o ${id}_rgi\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Rgin"
        ],
        "tools_url": [
            "https://bio.tools/rgin"
        ],
        "tools_dico": [
            {
                "name": "Rgin",
                "uri": "https://bio.tools/rgin",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ implementation of SConES.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rgin.html"
            }
        ],
        "inputs": [
            "samples_rgi"
        ],
        "nb_inputs": 1,
        "outputs": [
            "from_rgi"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/resistances\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "format_data_rgi": {
        "name_process": "format_data_rgi",
        "string_process": "\nprocess format_data_rgi {\n                                                  \n    tag{id}\n\n    input:\n    set id, rgi from rgi_txt\n\n    output:\n    set id, file(\"rgi.txt\"), file(\"rgi_span.txt\") into circos_data_rgi\n\n    script:\n    \"\"\"\n    ${env}\n    02_create_rgi_circos.R ${rgi}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    ${env}\n    02_create_rgi_circos.R ${rgi}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rgi_txt"
        ],
        "nb_inputs": 1,
        "outputs": [
            "circos_data_rgi"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "mos_depth": {
        "name_process": "mos_depth",
        "string_process": "\nprocess mos_depth {\n                           \n    publishDir \"${params.outDir}/${id}/coverage\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, assembly, type, file(aln_lr), file(aln_lr_idx) from bam_cov\n\n    output:\n    file(\"${id}_cov_${type}.bed.gz\")\n    set id, file(\"${id}_cov_${type}.bed.gz\"), type into cov_bed\n\n    script:\n    \"\"\"\n    ${env}\n    mosdepth -t ${task.cpus} -F 4  -n -b ${params.covWindow} ${id} ${aln_lr} \n    mv ${id}.regions.bed.gz ${id}_cov_${type}.bed.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    ${env}\n    mosdepth -t ${task.cpus} -F 4  -n -b ${params.covWindow} ${id} ${aln_lr} \n    mv ${id}.regions.bed.gz ${id}_cov_${type}.bed.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "bam_cov"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cov_bed"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/coverage\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "format_data_cov": {
        "name_process": "format_data_cov",
        "string_process": "\nprocess format_data_cov {\n                                          \n    tag{id}\n    \n    input:\n    set id, bed, type from cov_bed\n\n    output:\n    set id, file(\"cov.txt\"), type into cov_formated\n\n    script:\n    if (type == \"padded\")\n        \"\"\"\n        ${env}\n        gunzip -c ${bed} > cov.bed\n        03_prepare_bed.R cov.bed ${params.seqPadding} cov.txt TRUE\n        \"\"\"\n    else\n        \"\"\"\n        ${env}\n        gunzip -c ${bed} > cov.bed\n        03_prepare_bed.R cov.bed 0 cov.txt FALSE \n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    if (type == \"padded\")\n        \"\"\"\n        ${env}\n        gunzip -c ${bed} > cov.bed\n        03_prepare_bed.R cov.bed ${params.seqPadding} cov.txt TRUE\n        \"\"\"\n    else\n        \"\"\"\n        ${env}\n        gunzip -c ${bed} > cov.bed\n        03_prepare_bed.R cov.bed 0 cov.txt FALSE \n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cov_bed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cov_formated"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "calcGC": {
        "name_process": "calcGC",
        "string_process": "\nprocess calcGC {\n                      \n    publishDir \"${params.outDir}/${id}/gc\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, assembly, lr, type from gc_padded\n    \n    output:\n    set id, file('gc1000.txt'), assembly into table_data_gc\n    set id, file('gc50.txt'), file('gc1000.txt'), file('gcskew50.txt'), file('gcskew1000.txt'), file('gcskewsum50.txt'), file('gcskewsum1000.txt') into circos_data_gc\n\n    script:\n    \"\"\"\n    ${env}\n    01_calculate_GC.R ${assembly} ${params.seqPadding}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    ${env}\n    01_calculate_GC.R ${assembly} ${params.seqPadding}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gc_padded"
        ],
        "nb_inputs": 1,
        "outputs": [
            "table_data_gc",
            "circos_data_gc"
        ],
        "nb_outputs": 2,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/gc\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "glimmer": {
        "name_process": "glimmer",
        "string_process": "\nprocess glimmer {\n                                       \n    publishDir \"${params.outDir}/${id}/genes\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, assembly, lr from samples_glimmer\n\n    output:\n    set id, file(\"${id}.predict\") into genes_glimmer\n    file(\"${id}.detail\")\n\n    script:\n    \"\"\"\n    ${env}\n    long-orfs -n -t 1.15 ${assembly} ${id}.longorfs\n    extract -t ${assembly} ${id}.longorfs > ${id}.train\n    build-icm -r ${id}.icm < ${id}.train\n    glimmer3 -o50 -g110 -t30 ${assembly} ${id}.icm ${id}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    ${env}\n    long-orfs -n -t 1.15 ${assembly} ${id}.longorfs\n    extract -t ${assembly} ${id}.longorfs > ${id}.train\n    build-icm -r ${id}.icm < ${id}.train\n    glimmer3 -o50 -g110 -t30 ${assembly} ${id}.icm ${id}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "EXTRACT"
        ],
        "tools_url": [
            "https://bio.tools/extract"
        ],
        "tools_dico": [
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            }
        ],
        "inputs": [
            "samples_glimmer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genes_glimmer"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/genes\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "format_glimmer": {
        "name_process": "format_glimmer",
        "string_process": "\nprocess format_glimmer {\n                                            \n    tag{id}\n\n    input:\n    set id, genes from genes_glimmer\n\n    output: \n    set id, file(\"genes.txt\") into circos_data_genes\n\n    script:\n    \"\"\"\n    ${env}\n    05_convert_glimmer.R ${genes}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    ${env}\n    05_convert_glimmer.R ${genes}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genes_glimmer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "circos_data_genes"
        ],
        "nb_outputs": 1,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    },
    "circos": {
        "name_process": "circos",
        "string_process": "\nprocess circos{\n                                                 \n    publishDir \"${params.outDir}/${id}/plots\", mode: 'copy'\n    tag{id + \":\" + contigID}\n\n    input:\n    set id, contigID, length, file(reads), file(ovlp), file(cov_ovlp), file(gc50), file(gc1000), file(gcskew50), file(gcskew1000), file(gcskewsum50), file(gcskewsum1000), file(cov), type, file(rgi), file(rgi_span), file(genes) from combined_data\n\n    output:\n    file(\"${id}_${contigID}_plasmid.*\")\n\n    script:\n    \"\"\"\n    ${env}\n    echo \"chr\t-\t${contigID}\t1\t0\t${length}\tchr1\tcolor=lblue\" > contig.txt\n    ln -s ${workflow.projectDir}/conf/circos//* .\n    circos\n    mv circos.png ${id}_${contigID}_plasmid.png\n    mv circos.svg ${id}_${contigID}_plasmid.svg\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    ${env}\n    echo \"chr\t-\t${contigID}\t1\t0\t${length}\tchr1\tcolor=lblue\" > contig.txt\n    ln -s ${workflow.projectDir}/conf/circos//* .\n    circos\n    mv circos.png ${id}_${contigID}_plasmid.png\n    mv circos.svg ${id}_${contigID}_plasmid.svg\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Circos"
        ],
        "tools_url": [
            "https://bio.tools/circos"
        ],
        "tools_dico": [
            {
                "name": "Circos",
                "uri": "https://bio.tools/circos",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0797",
                            "term": "Comparative genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2968",
                                "term": "Image"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Circos is tool for visualizing data in a circular format. It was developed for genomic data but can work for many other kinds of data as well.",
                "homepage": "http://circos.ca/"
            }
        ],
        "inputs": [
            "combined_data"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/plots\", mode: 'copy'",
            "tag{id + \":\" + contigID}"
        ],
        "when": "",
        "stub": ""
    },
    "table": {
        "name_process": "table",
        "string_process": "\nprocess table{\n                                        \n    publishDir \"${params.outDir}/${id}/\", mode: 'copy'\n    tag{id}\n\n    input:\n    set id, gc, assembly, cov, type, rgi from table_data\n\n    output:\n    file(\"${id}_summary.csv\")\n\n    script:\n    \"\"\"\n    ${env}\n    04_summary_table.R ${assembly} ${rgi} ${cov} ${gc} ${params.seqPadding}\n    mv contig_summary.txt ${id}_summary.csv\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    ${env}\n    04_summary_table.R ${assembly} ${rgi} ${cov} ${gc} ${params.seqPadding}\n    mv contig_summary.txt ${id}_summary.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "table_data"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "caspargross__plasmIDent",
        "directive": [
            "publishDir \"${params.outDir}/${id}/\", mode: 'copy'",
            "tag{id}"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "construct": {
        "name_process": "construct",
        "string_process": " process construct {\n\n        publishDir \"results/graph\", pattern: \"*.vg\" \n\n        input:\n        file(reference) from IN_referece_raw.collect()\n        file(vcf) from IN_vcf_raw.collect()\n        file(vcf_index) from IN_vcf_index_raw.collect()\n        val max_nodes from IN_max_nodes\n\n        output:\n        file(\"*.vg\") into OUT_CONSTRUCT\n\n        script:\n        template \"construct.py\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        template \"construct.py\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "IN_referece_raw",
            "IN_vcf_raw",
            "IN_vcf_index_raw",
            "IN_max_nodes"
        ],
        "nb_inputs": 4,
        "outputs": [
            "OUT_CONSTRUCT"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/graph\", pattern: \"*.vg\""
        ],
        "when": "",
        "stub": ""
    },
    "view_construct": {
        "name_process": "view_construct",
        "string_process": " process view_construct {\n        \n        publishDir \"results/plots\", pattern: \"*.dot\"\n        \n        input:\n        file(graph) from IN_GRAPH_VIEW\n\n        output:\n        file(\"*.dot\") into GRAPH_DOTFILE optional true\n\n        script:\n        template \"view_graph.py\"\n\n    }",
        "nb_lignes_process": 12,
        "string_script": "        template \"view_graph.py\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "IN_GRAPH_VIEW"
        ],
        "nb_inputs": 1,
        "outputs": [
            "GRAPH_DOTFILE"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/plots\", pattern: \"*.dot\""
        ],
        "when": "",
        "stub": ""
    },
    "graphviz": {
        "name_process": "graphviz",
        "string_process": " process graphviz {\n        \n        publishDir \"results/plots\", pattern: \"*.pdf\"\n\n                                                    \n                                                                       \n\n        input:\n        file(dotfile) from GRAPH_DOTFILE\n        file warning from Channel.fromPath(\"${workflow.projectDir}/resources/warning.png\")\n        val mode from IN_graphviz_mode\n\n        output:\n        file(\"graph.png\") into OUT_GRAPH_GRAPHVIZ\n\n        script:\n        \"\"\"\n        {\n            ${mode} -Tpng -o graph.png ${dotfile}\n        } || {\n            cp ${warning} graph.png\n        }\n        \"\"\"\n\n    }",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        {\n            ${mode} -Tpng -o graph.png ${dotfile}\n        } || {\n            cp ${warning} graph.png\n        }\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "GRAPH_DOTFILE",
            "IN_graphviz_mode"
        ],
        "nb_inputs": 2,
        "outputs": [
            "OUT_GRAPH_GRAPHVIZ"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/plots\", pattern: \"*.pdf\""
        ],
        "when": "",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n\n    publishDir \"results/graph\"\n\n    input:\n    file(graph) from IN_INDEX_1\n    val kmer from IN_KMER\n\n    output:\n    file(\"*.xg\") into XG_FILE\n    file(\"*.gcsa\") into GCSA_FILE\n\n    script:\n    \"\"\"\n    vg index -x graph.xg ${graph}\n    vg index -g graph.gcsa -k ${kmer} ${graph}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    vg index -x graph.xg ${graph}\n    vg index -g graph.gcsa -k ${kmer} ${graph}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "IN_INDEX_1",
            "IN_KMER"
        ],
        "nb_inputs": 2,
        "outputs": [
            "XG_FILE",
            "GCSA_FILE"
        ],
        "nb_outputs": 2,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/graph\""
        ],
        "when": "",
        "stub": ""
    },
    "map": {
        "name_process": "map",
        "string_process": "\nprocess map {\n\n    publishDir \"results/mapping\"\n\n    input:\n    file xg from XG_FILE_1\n    file gcsa from GCSA_FILE\n    val mapper from mapper_mode\n\n    output:\n    file(\"*.gam\") into OUT_MAP\n\n    script:\n    template \"map.py\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    template \"map.py\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "XG_FILE_1",
            "GCSA_FILE",
            "mapper_mode"
        ],
        "nb_inputs": 3,
        "outputs": [
            "OUT_MAP"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/mapping\""
        ],
        "when": "",
        "stub": ""
    },
    "view_map": {
        "name_process": "view_map",
        "string_process": "\nprocess view_map {\n\n    publishDir \"results/mapping\"\n\n    input: \n    file vg_graph from IN_INDEX_2\n    file gam from OUT_MAP_VIEW\n\n    output:\n    file(\"map.dot\") into MAP_VIEW\n\n    script:\n    \"\"\"\n    vg view -d ${vg_graph} -A ${gam} > map.dot\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    vg view -d ${vg_graph} -A ${gam} > map.dot\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "IN_INDEX_2",
            "OUT_MAP_VIEW"
        ],
        "nb_inputs": 2,
        "outputs": [
            "MAP_VIEW"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/mapping\""
        ],
        "when": "",
        "stub": ""
    },
    "graphviz_map": {
        "name_process": "graphviz_map",
        "string_process": "\nprocess graphviz_map {\n    \n    publishDir \"results/plots\", pattern: \"*.png\"\n\n                                                \n    errorStrategy { task.exitStatus == 139 ? 'ignore' : 'retry' }\n\n    input:\n    file(dotfile) from MAP_VIEW\n    val mode from IN_graphviz_map_mode\n    file warning from Channel.fromPath(\"${workflow.projectDir}/resources/warning.png\")\n\n\n    output:\n    file(\"map_graph.png\") into OUT_MAP_GRAPHVIZ\n\n    script:\n    \"\"\"\n        {\n            ${mode} -Tpng -o map_graph.png ${dotfile}\n        } || {\n            cp ${warning} map_graph.png\n        }\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n        {\n            ${mode} -Tpng -o map_graph.png ${dotfile}\n        } || {\n            cp ${warning} map_graph.png\n        }\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MAP_VIEW",
            "IN_graphviz_map_mode"
        ],
        "nb_inputs": 2,
        "outputs": [
            "OUT_MAP_GRAPHVIZ"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/plots\", pattern: \"*.png\"",
            "errorStrategy { task.exitStatus == 139 ? 'ignore' : 'retry' }"
        ],
        "when": "",
        "stub": ""
    },
    "pgconvert": {
        "name_process": "pgconvert",
        "string_process": " process pgconvert {\n\n        input:\n        file graph from XG_FILE_2\n\n        output:\n        file(\"graph.pg\") into GRAPH_PG\n\n        script:\n        \"vg convert ${graph} -p > graph.pg\"\n\n    }",
        "nb_lignes_process": 10,
        "string_script": "        \"vg convert ${graph} -p > graph.pg\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "XG_FILE_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "GRAPH_PG"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "augment": {
        "name_process": "augment",
        "string_process": " process augment {\n\n        input:\n        file graph from GRAPH_PG\n        file gam from OUT_MAP_1\n\n        output:\n        file(\"aug.pg\") into GRAPH_AUG\n\n        script:\n        \"vg augment ${graph} ${gam} > aug.pg\"\n    }",
        "nb_lignes_process": 10,
        "string_script": "        \"vg augment ${graph} ${gam} > aug.pg\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "GRAPH_PG",
            "OUT_MAP_1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "GRAPH_AUG"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "pack_aug": {
        "name_process": "pack_aug",
        "string_process": " process pack_aug {\n\n        publishDir \"results/mapping\"\n\n        input:\n        file pg from GRAPH_AUG_1\n        file gam from OUT_MAP_2\n\n        output:\n        file(\"*.pack\") into OUT_PACK\n\n        script:\n        \"vg pack -x ${pg} -g ${gam} -o align.pack\"\n    }",
        "nb_lignes_process": 12,
        "string_script": "        \"vg pack -x ${pg} -g ${gam} -o align.pack\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "GRAPH_AUG_1",
            "OUT_MAP_2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "OUT_PACK"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/mapping\""
        ],
        "when": "",
        "stub": ""
    },
    "call_aug": {
        "name_process": "call_aug",
        "string_process": " process call_aug {\n\n        publishDir \"results/mapping\"\n\n        input:\n        file pack from OUT_PACK\n        file pg from GRAPH_AUG_2\n\n        output:\n        file(\"*.vcf\") into IN_VCF_PROCESS\n\n        script:\n        \"vg call -k ${pack} ${pg} > output.vcf\"\n\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"vg call -k ${pack} ${pg} > output.vcf\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "OUT_PACK",
            "GRAPH_AUG_2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "IN_VCF_PROCESS"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/mapping\""
        ],
        "when": "",
        "stub": ""
    },
    "pack": {
        "name_process": "pack",
        "string_process": " process pack {\n\n        publishDir \"results/mapping\"\n\n        input:\n        file xg from XG_FILE_2\n        file gam from OUT_MAP\n\n        output:\n        file(\"*.pack\") into OUT_PACK\n\n        script:\n        \"vg pack -x ${xg} -g ${gam} -o align.pack\"\n    }",
        "nb_lignes_process": 12,
        "string_script": "        \"vg pack -x ${xg} -g ${gam} -o align.pack\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "XG_FILE_2",
            "OUT_MAP"
        ],
        "nb_inputs": 2,
        "outputs": [
            "OUT_PACK"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/mapping\""
        ],
        "when": "",
        "stub": ""
    },
    "call": {
        "name_process": "call",
        "string_process": " process call {\n\n        publishDir \"results/vcf\"\n\n        input:\n        file pack from OUT_PACK\n        file graph from XG_FILE_3\n\n        output:\n        file(\"*.vcf\") into IN_VCF_PROCESS\n\n        script:\n        \"vg call -k ${pack} ${graph} > output.vcf\"\n\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"vg call -k ${pack} ${graph} > output.vcf\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "VGE"
        ],
        "tools_url": [
            "https://bio.tools/VGE"
        ],
        "tools_dico": [
            {
                "name": "VGE",
                "uri": "https://bio.tools/VGE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Virtual Grid Engine (VGE) is a kind of middleware for running bioinformatics software pipelines on large-scale supercomputers which do not support any grid engine survices. VGE employs master-worker model. It first reserves processors and/or cores by running the job which is parallelized by MPI, then asign divided small tasks onto its worker processes. VGE is written in python.",
                "homepage": "https://github.com/SatoshiITO/VGE"
            }
        ],
        "inputs": [
            "OUT_PACK",
            "XG_FILE_3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "IN_VCF_PROCESS"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/vcf\""
        ],
        "when": "",
        "stub": ""
    },
    "bcftools": {
        "name_process": "bcftools",
        "string_process": "\nprocess bcftools {\n\n    publishDir \"results/vcf\"\n\n    input:\n    file vcf from IN_VCF_PROCESS_1\n\n    output:\n    file(\"stats*\") into OUT_BCF\n\n    script:\n    \"\"\"\n    bcftools stats ${vcf} > stats.vchk\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    bcftools stats ${vcf} > stats.vchk\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "IN_VCF_PROCESS_1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "OUT_BCF"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/vcf\""
        ],
        "when": "",
        "stub": ""
    },
    "process_bcf_stats": {
        "name_process": "process_bcf_stats",
        "string_process": "\nprocess process_bcf_stats {\n\n    input:\n    file vcf_stats from OUT_BCF\n\n    output:\n    file(\"substitutions.csv\") into SUBS_BCF\n    file(\"summary.txt\") into SUM_BCF\n\n    script:\n    template \"process_bcf.py\"\n\n}",
        "nb_lignes_process": 12,
        "string_script": "    template \"process_bcf.py\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "OUT_BCF"
        ],
        "nb_inputs": 1,
        "outputs": [
            "SUBS_BCF",
            "SUM_BCF"
        ],
        "nb_outputs": 2,
        "name_workflow": "imendes93__sv-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "vcfR": {
        "name_process": "vcfR",
        "string_process": "\nprocess vcfR {\n\n    input:\n    file vcf from IN_VCF_PROCESS_2\n\n    output:\n    file(\"vcf_base_stats.png\") into OUT_VCRF_PLOT1\n\n    script:\n    \"\"\"\n    cp ${workflow.projectDir}/bin/* .\n\n    process_vcf.R ${vcf}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    cp ${workflow.projectDir}/bin/* .\n\n    process_vcf.R ${vcf}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "IN_VCF_PROCESS_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "OUT_VCRF_PLOT1"
        ],
        "nb_outputs": 1,
        "name_workflow": "imendes93__sv-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "report": {
        "name_process": "report",
        "string_process": "\nprocess report {\n\n    publishDir \"results/MultiQC\"\n\n    input:\n    file graph_dot_plot from OUT_GRAPH_GRAPHVIZ\n    file vcf_graph_1 from OUT_VCRF_PLOT1\n    file graph_map_plot from OUT_MAP_GRAPHVIZ\n    file substitutions from SUBS_BCF\n    file summary from SUM_BCF\n\n    output:\n    file (\"multiqc_report.html\")\n\n    script:\n    \"\"\"\n    cp ${workflow.projectDir}/bin/* .\n\n    R -e \"rmarkdown::render('report.Rmd', params = list(graph_dot_plot='${graph_dot_plot}', vcf_graph_1='${vcf_graph_1}', substitutions_sum='${substitutions}', bcf_summary='${summary}', graph_map='${graph_map_plot}'))\"\n    mkdir MultiQC && mv report.html multiqc_report.html\n\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    cp ${workflow.projectDir}/bin/* .\n\n    R -e \"rmarkdown::render('report.Rmd', params = list(graph_dot_plot='${graph_dot_plot}', vcf_graph_1='${vcf_graph_1}', substitutions_sum='${substitutions}', bcf_summary='${summary}', graph_map='${graph_map_plot}'))\"\n    mkdir MultiQC && mv report.html multiqc_report.html\n\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "OUT_GRAPH_GRAPHVIZ",
            "OUT_VCRF_PLOT1",
            "OUT_MAP_GRAPHVIZ",
            "SUBS_BCF",
            "SUM_BCF"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "imendes93__sv-nf",
        "directive": [
            "publishDir \"results/MultiQC\""
        ],
        "when": "",
        "stub": ""
    }
}
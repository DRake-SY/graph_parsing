{
    "AdapterRemoval": {
        "name_process": "AdapterRemoval",
        "string_process": " process AdapterRemoval {\n    tag \"$name\"\n\n    label 'process_short'\n\n    input:\n        set val(name), file(reads) from read_files_trimming\n\n    publishDir \"${params.outdir}/trimmed_reads\", mode: \"copy\"\n\n    output:\n        file('*.trimmed.fastq.gz') into fq_to_md5\n        file(\"*.settings\") into adapter_removal_results\n\n    script:\n        settings = name+\".settings\"\n        if (! params.singleEnd){\n            out1 = name+\".R1.trimmed.fastq.gz\"\n            out2 = name+\".R2.trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval --gzip --basename $name --file1 ${reads[0]} --file2 ${reads[1]} --output1 $out1 --output2 $out2 --threads ${task.cpus} --qualitybase ${params.phred} --settings $settings\n            \"\"\"\n        } else {\n            se_out = name+\".trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval --gzip --basename $name --file1 ${reads[0]} --output1 $se_out --threads ${task.cpus} --qualitybase ${params.phred} --settings $settings\n            \"\"\"\n        }      \n}",
        "nb_lignes_process": 27,
        "string_script": "        settings = name+\".settings\"\n        if (! params.singleEnd){\n            out1 = name+\".R1.trimmed.fastq.gz\"\n            out2 = name+\".R2.trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval --gzip --basename $name --file1 ${reads[0]} --file2 ${reads[1]} --output1 $out1 --output2 $out2 --threads ${task.cpus} --qualitybase ${params.phred} --settings $settings\n            \"\"\"\n        } else {\n            se_out = name+\".trimmed.fastq.gz\"\n            \"\"\"\n            AdapterRemoval --gzip --basename $name --file1 ${reads[0]} --output1 $se_out --threads ${task.cpus} --qualitybase ${params.phred} --settings $settings\n            \"\"\"\n        }",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_files_trimming"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fq_to_md5",
            "adapter_removal_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "maxibor__enaprep",
        "directive": [
            "tag \"$name\"",
            "label 'process_short'"
        ],
        "when": "",
        "stub": ""
    },
    "comp_md5": {
        "name_process": "comp_md5",
        "string_process": "\nprocess comp_md5 {\n\n    publishDir \"${params.outdir}/ena_registration\", mode: \"copy\"\n\n    input:\n        file(fq) from fq_to_md5.collect()\n    output:\n        file(\"*.txt\") into registration\n    script:\n        outfile = \"ena_library_registration.txt\"\n        \"\"\"\n        md5_and_lib -l $layout -i $lib_temp -o $outfile\n        cat ${params.sample_reg} > \"ena_sample_registration.txt\"\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        outfile = \"ena_library_registration.txt\"\n        \"\"\"\n        md5_and_lib -l $layout -i $lib_temp -o $outfile\n        cat ${params.sample_reg} > \"ena_sample_registration.txt\"\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fq_to_md5"
        ],
        "nb_inputs": 1,
        "outputs": [
            "registration"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__enaprep",
        "directive": [
            "publishDir \"${params.outdir}/ena_registration\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n\n    input:\n    file multiqc_config from ch_multiqc_config\n                                                                                  \n    file ('AdapterRemoval/*') from adapter_removal_results.collect().ifEmpty([])\n    file workflow_summary from create_workflow_summary(summary)\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\"\n    file \"multiqc_plots\"\n\n    script:\n    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config .\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config .\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "adapter_removal_results",
            "summary"
        ],
        "nb_inputs": 3,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "maxibor__enaprep",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
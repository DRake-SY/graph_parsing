{
    "stats_rawreads": {
        "name_process": "stats_rawreads",
        "string_process": "\nprocess stats_rawreads {\n  \n  publishDir \"${params.outdir}/raw\", mode: \"copy\" \n\n  input:\n  file fastqFile from fastq_input_to_rawstats.collect()\n  file dir from rawreads_ch\n\n  output:\n  file \"raw_stats.txt\" into stats_rawreads_results\n \n\n  script:\n  \"\"\"\n  readstats.pl $dir > raw_stats.txt\n  \"\"\"\n  \n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  readstats.pl $dir > raw_stats.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_input_to_rawstats",
            "rawreads_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "stats_rawreads_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "publishDir \"${params.outdir}/raw\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_rawreads": {
        "name_process": "fastqc_rawreads",
        "string_process": "\nprocess fastqc_rawreads {\n  \n  tag \"$name\"\n\n  publishDir \"${params.outdir}/raw/fastqc\", mode: 'copy',\n    saveAs: {filename ->\n          if (filename.indexOf(\"zip\") > 0)     \"zips/$filename\"\n          else if (filename.indexOf(\"html\") > 0)    \"fastqc/$filename\"\n          else if (filename.indexOf(\"txt\") > 0)     \"fastqc_stats/$filename\"\n          else null            \n      }\n  input:\n  set val(name), file(fastqFile) from fastq_input_to_fastqc\n\n  output:\n  file (\"*fastqc.{zip,html}\") into raw_fastqc_results\n\n  script:\n  \n  \"\"\"\n  fastqc -o . $fastqFile\n  \"\"\"\n  \n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  fastqc -o . $fastqFile\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq_input_to_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "raw_fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}/raw/fastqc\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"zip\") > 0) \"zips/$filename\" else if (filename.indexOf(\"html\") > 0) \"fastqc/$filename\" else if (filename.indexOf(\"txt\") > 0) \"fastqc_stats/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "bbduk": {
        "name_process": "bbduk",
        "string_process": "\nprocess bbduk {\n  tag \"$name\"\n  label \"small_mem\"\n  \n  publishDir \"${params.outdir}/qc/seqs\", mode: 'copy' , pattern: \"*.qc.fastq.gz\"\n  publishDir \"${params.outdir}/qc/bbduk_stats\", mode: 'copy' , pattern: \"*stats.txt\"\n\n  input:\n  set val(name), file(reads) from fastq_input_to_qc\n  path adapter from params.adapter\n  path arti from params.arti\n                              \n\n  output:\n  set val(name), file(\"*qc.fastq.gz\") into qcreads_to_fastqc\n  set val(name), file(\"*qc.fastq.gz\") into qcreads_to_kraken2\n  set val(name), file(\"*qc.fastq.gz\") into qcreads_to_stats\n  file \"*stats.txt\" into qc_stats\n                        \n  script:\n  \n  prefix_pe = name\n  prefix_se = name\n                                         \n\n  ram = \"-Xmx${task.memory.toGiga()}g\"\n  println \"********************ram=$ram\"\n  \n  if (params.type == 'single-end') {\n    \"\"\"\n      echo ${prefix_se}\n      \n      bbduk.sh $ram \\\n        in=${reads} \\\n        ref=${adapter} \\\n        out=${prefix_se}_trim.fastq.gz \\\n        stats=${prefix_se}.adapter_trimstats.txt \\\n        refstats=${prefix_se}.adapter_refstats.txt \\\n        threads=${task.cpus} \\\n        ktrim=r k=23 qtrim=rl trimq=10  mink=11 hdist=1 maxns=0 \\\n        ftm=5 minlen=${params.minlen} tbo tpe ow=t rcomp=f hdist2=1 ftm=5 zl=4 \n\n    # quality trimming\n    bbduk.sh $ram \\\n        in=${prefix_se}_trim.fastq.gz \\\n        ref=${arti} \\\n        out=${prefix_se}_qFiltered.fastq.gz \\\n        stats=${prefix_se}.qtrimstats.txt \\\n        maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 \\\n        minlen=${params.minlen} k=25 hdist=1 zl=6 \\\n        threads=${task.cpus}\n\n    #artifact filtering\n    bbduk.sh $ram \\\n        in=${prefix_se}_trim.fastq.gz \\\n        ref=${arti} \\\n        out=${prefix_se}_artiFiltered.fastq.gz \\\n        outm=${prefix_se}_arctiMatch.fastq.gz \\\n        stats=${prefix_se}.arti_trimstats.txt \\\n        refstats=${prefix_se}.arti_refstats.txt \\\n        ordered ow=t k=20 hdist=1 zl=6 \\\n        minlen=${params.minlen} \\\n        threads=${task.cpus}\n\n    ln -s ${prefix_se}_artiFiltered.fastq.gz ${prefix_se}.qc.fastq.gz\n    \"\"\"\n  } \n  \n  else {\n    \"\"\"\n    echo ${prefix_pe}\n    \n    bbduk.sh $ram \\\n      in1=${reads[0]} \\\n      in2=${reads[1]} \\\n      ref=${adapter} \\\n      out=${prefix_pe}_trim_R1.fastq.gz \\\n      out2=${prefix_pe}_trim_R2.fastq.gz \\\n      stats=${prefix_pe}.adapter_trimstats.txt \\\n      refstats=${prefix_pe}.adapter_refstats.txt \\\n      threads=${task.cpus} \\\n      ktrim=r k=23 qtrim=rl trimq=10  mink=11 hdist=1 maxns=0 \\\n      ftm=5 minlen=${params.minlen} tbo tpe ow=t rcomp=f hdist2=1 ftm=5 zl=4 \n\n  # quality trimming\n  bbduk.sh $ram \\\n      in=${prefix_pe}_trim_R1.fastq.gz \\\n      in2=${prefix_pe}_trim_R2.fastq.gz \\\n      ref=${arti} \\\n      out=${prefix_pe}_qFiltered_R1.fastq.gz \\\n      out2=${prefix_pe}_qFiltered_R2.fastq.gz \\\n      stats=${prefix_pe}.qtrimstats.txt \\\n      maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 \\\n      minlen=${params.minlen} k=25 hdist=1 zl=6 \\\n      threads=${task.cpus}\n\n  #artifact filtering\n  bbduk.sh $ram \\\n      in=${prefix_pe}_trim_R1.fastq.gz \\\n      in2=${prefix_pe}_trim_R2.fastq.gz \\\n      ref=${arti} \\\n      out=${prefix_pe}_artiFiltered_R1.fastq.gz \\\n      out2=${prefix_pe}_artiFiltered_R2.fastq.gz \\\n      outm=${prefix_pe}_arctiMatch.fastq.gz \\\n      stats=${prefix_pe}.arti_trimstats.txt \\\n      refstats=${prefix_pe}.arti_refstats.txt \\\n      ordered ow=t k=20 hdist=1 zl=6 \\\n      minlen=${params.minlen} \\\n      threads=${task.cpus}\n\n  ln -s ${prefix_pe}_artiFiltered_R1.fastq.gz  ${prefix_pe}_R1.qc.fastq.gz\n  ln -s ${prefix_pe}_artiFiltered_R2.fastq.gz  ${prefix_pe}_R2.qc.fastq.gz\n  \"\"\"\n\n}\n}",
        "nb_lignes_process": 115,
        "string_script": "  prefix_pe = name\n  prefix_se = name\n                                         \n\n  ram = \"-Xmx${task.memory.toGiga()}g\"\n  println \"********************ram=$ram\"\n  \n  if (params.type == 'single-end') {\n    \"\"\"\n      echo ${prefix_se}\n      \n      bbduk.sh $ram \\\n        in=${reads} \\\n        ref=${adapter} \\\n        out=${prefix_se}_trim.fastq.gz \\\n        stats=${prefix_se}.adapter_trimstats.txt \\\n        refstats=${prefix_se}.adapter_refstats.txt \\\n        threads=${task.cpus} \\\n        ktrim=r k=23 qtrim=rl trimq=10  mink=11 hdist=1 maxns=0 \\\n        ftm=5 minlen=${params.minlen} tbo tpe ow=t rcomp=f hdist2=1 ftm=5 zl=4 \n\n    # quality trimming\n    bbduk.sh $ram \\\n        in=${prefix_se}_trim.fastq.gz \\\n        ref=${arti} \\\n        out=${prefix_se}_qFiltered.fastq.gz \\\n        stats=${prefix_se}.qtrimstats.txt \\\n        maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 \\\n        minlen=${params.minlen} k=25 hdist=1 zl=6 \\\n        threads=${task.cpus}\n\n    #artifact filtering\n    bbduk.sh $ram \\\n        in=${prefix_se}_trim.fastq.gz \\\n        ref=${arti} \\\n        out=${prefix_se}_artiFiltered.fastq.gz \\\n        outm=${prefix_se}_arctiMatch.fastq.gz \\\n        stats=${prefix_se}.arti_trimstats.txt \\\n        refstats=${prefix_se}.arti_refstats.txt \\\n        ordered ow=t k=20 hdist=1 zl=6 \\\n        minlen=${params.minlen} \\\n        threads=${task.cpus}\n\n    ln -s ${prefix_se}_artiFiltered.fastq.gz ${prefix_se}.qc.fastq.gz\n    \"\"\"\n  } \n  \n  else {\n    \"\"\"\n    echo ${prefix_pe}\n    \n    bbduk.sh $ram \\\n      in1=${reads[0]} \\\n      in2=${reads[1]} \\\n      ref=${adapter} \\\n      out=${prefix_pe}_trim_R1.fastq.gz \\\n      out2=${prefix_pe}_trim_R2.fastq.gz \\\n      stats=${prefix_pe}.adapter_trimstats.txt \\\n      refstats=${prefix_pe}.adapter_refstats.txt \\\n      threads=${task.cpus} \\\n      ktrim=r k=23 qtrim=rl trimq=10  mink=11 hdist=1 maxns=0 \\\n      ftm=5 minlen=${params.minlen} tbo tpe ow=t rcomp=f hdist2=1 ftm=5 zl=4 \n\n  # quality trimming\n  bbduk.sh $ram \\\n      in=${prefix_pe}_trim_R1.fastq.gz \\\n      in2=${prefix_pe}_trim_R2.fastq.gz \\\n      ref=${arti} \\\n      out=${prefix_pe}_qFiltered_R1.fastq.gz \\\n      out2=${prefix_pe}_qFiltered_R2.fastq.gz \\\n      stats=${prefix_pe}.qtrimstats.txt \\\n      maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 \\\n      minlen=${params.minlen} k=25 hdist=1 zl=6 \\\n      threads=${task.cpus}\n\n  #artifact filtering\n  bbduk.sh $ram \\\n      in=${prefix_pe}_trim_R1.fastq.gz \\\n      in2=${prefix_pe}_trim_R2.fastq.gz \\\n      ref=${arti} \\\n      out=${prefix_pe}_artiFiltered_R1.fastq.gz \\\n      out2=${prefix_pe}_artiFiltered_R2.fastq.gz \\\n      outm=${prefix_pe}_arctiMatch.fastq.gz \\\n      stats=${prefix_pe}.arti_trimstats.txt \\\n      refstats=${prefix_pe}.arti_refstats.txt \\\n      ordered ow=t k=20 hdist=1 zl=6 \\\n      minlen=${params.minlen} \\\n      threads=${task.cpus}\n\n  ln -s ${prefix_pe}_artiFiltered_R1.fastq.gz  ${prefix_pe}_R1.qc.fastq.gz\n  ln -s ${prefix_pe}_artiFiltered_R2.fastq.gz  ${prefix_pe}_R2.qc.fastq.gz\n  \"\"\"\n\n}",
        "nb_lignes_script": 93,
        "language_script": "bash",
        "tools": [
            "GRAM",
            "OrderedList"
        ],
        "tools_url": [
            "https://bio.tools/GRAM",
            "https://bio.tools/orderedlist"
        ],
        "tools_dico": [
            {
                "name": "GRAM",
                "uri": "https://bio.tools/GRAM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0441",
                                    "term": "cis-regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0331",
                                    "term": "Variant effect prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "eQTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression quantitative trait loci profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0331",
                                    "term": "Variant functional prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A GeneRAlized Model to predict the molecular effect of a non-coding variant in a cell-type specific manner | GRAM: A GeneRAlized Model to predict the molecular effect of a non-coding variant in a cell type-specific manner",
                "homepage": "https://github.com/gersteinlab/GRAM"
            },
            {
                "name": "OrderedList",
                "uri": "https://bio.tools/orderedlist",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Detection of similarities between ordered lists of genes. Thereby, either simple lists can be compared or gene expression data can be used to deduce the lists. Significance of similarities is evaluated by shuffling lists or by resampling in microarray data, respectively.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/OrderedList.html"
            }
        ],
        "inputs": [
            "fastq_input_to_qc",
            "params",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "qcreads_to_fastqc",
            "qcreads_to_kraken2",
            "qcreads_to_stats",
            "qc_stats"
        ],
        "nb_outputs": 4,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "tag \"$name\"",
            "label \"small_mem\"",
            "publishDir \"${params.outdir}/qc/seqs\", mode: 'copy' , pattern: \"*.qc.fastq.gz\"",
            "publishDir \"${params.outdir}/qc/bbduk_stats\", mode: 'copy' , pattern: \"*stats.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "stats_qcreads": {
        "name_process": "stats_qcreads",
        "string_process": "\nprocess stats_qcreads {\n  \n  publishDir \"${params.outdir}/qc\", mode: \"copy\" \n\n  \n  input:\n  file qc_stats from qcreads_to_stats.collect()\n  file dir from qcreads_ch\n  \n  output:\n  file \"qc_stats.txt\" into stats_qcreads_results\n\n  script:\n  \n  \"\"\"\n  readstats.pl $dir/qc/seqs > qc_stats.txt\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  readstats.pl $dir/qc/seqs > qc_stats.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qcreads_to_stats",
            "qcreads_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "stats_qcreads_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "publishDir \"${params.outdir}/qc\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "kraken2": {
        "name_process": "kraken2",
        "string_process": "\nprocess kraken2 {\n  \n  label \"small_mem\"\n  tag \"$name\"\n\n  publishDir \"${params.outdir}/classifier\", mode: 'copy' , pattern: \"*.kraken2*\"\n  publishDir \"${params.outdir}/classifier\", mode: 'copy' , pattern: \"*.bracken*\"\n\n  input:\n  set val(name), file(fastqFile) from qcreads_to_kraken2\n\n  output:\n  file \"*kraken2*\" into kraken2_results\n  file \"*bracken*\" into bracken_results\n\n  script:\n  sname = name\n  if (params.type == 'single-end') {\n\n    \"\"\"\n    kraken2 --db ${params.kraken2_db} --threads ${task.cpus} --use-names --report ${sname}.kraken2.report.txt --output ${sname}.kraken2.output.txt --gzip-compressed ${sname}.qc.fastq.gz\n    bracken -d ${params.kraken2_db} -i ${sname}.kraken2.report.txt -o ${sname}.bracken.output.txt -w ${sname}.braken.outreport.txt \n    \"\"\"\n  }\n  else{\n    \"\"\"\n    kraken2 --db ${params.kraken2_db} --threads ${task.cpus} --use-names --report ${sname}.kraken2.report.txt --output ${sname}.kraken2.output.txt --paired --gzip-compressed ${sname}_R1.qc.fastq.gz ${sname}_R2.qc.fastq.gz\n    bracken -d ${params.kraken2_db} -i ${sname}.kraken2.report.txt -o ${sname}.bracken.output.txt -w ${sname}.braken.outreport.txt \n    \"\"\"\n  }\n\n}",
        "nb_lignes_process": 31,
        "string_script": "  sname = name\n  if (params.type == 'single-end') {\n\n    \"\"\"\n    kraken2 --db ${params.kraken2_db} --threads ${task.cpus} --use-names --report ${sname}.kraken2.report.txt --output ${sname}.kraken2.output.txt --gzip-compressed ${sname}.qc.fastq.gz\n    bracken -d ${params.kraken2_db} -i ${sname}.kraken2.report.txt -o ${sname}.bracken.output.txt -w ${sname}.braken.outreport.txt \n    \"\"\"\n  }\n  else{\n    \"\"\"\n    kraken2 --db ${params.kraken2_db} --threads ${task.cpus} --use-names --report ${sname}.kraken2.report.txt --output ${sname}.kraken2.output.txt --paired --gzip-compressed ${sname}_R1.qc.fastq.gz ${sname}_R2.qc.fastq.gz\n    bracken -d ${params.kraken2_db} -i ${sname}.kraken2.report.txt -o ${sname}.bracken.output.txt -w ${sname}.braken.outreport.txt \n    \"\"\"\n  }",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "wossname",
            "kraken2",
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/wossname",
            "https://bio.tools/kraken2",
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "wossname",
                "uri": "https://bio.tools/wossname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by keywords in their short description.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossname.html"
            },
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "qcreads_to_kraken2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kraken2_results",
            "bracken_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "label \"small_mem\"",
            "tag \"$name\"",
            "publishDir \"${params.outdir}/classifier\", mode: 'copy' , pattern: \"*.kraken2*\"",
            "publishDir \"${params.outdir}/classifier\", mode: 'copy' , pattern: \"*.bracken*\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_qcreads": {
        "name_process": "fastqc_qcreads",
        "string_process": "\nprocess fastqc_qcreads {\n  tag \"$name\"\n\n  publishDir \"${params.outdir}/qc/fastqc\", mode: 'copy',\n    saveAs: {filename ->\n          if (filename.indexOf(\"zip\") > 0)     \"zips/$filename\"\n          else if (filename.indexOf(\"html\") > 0)    \"fastqc/$filename\"\n          else if (filename.indexOf(\"txt\") > 0)     \"fastqc_stats/$filename\"\n          else null            \n      }\n  input:\n   set val(name), file(qc_fastqFile) from qcreads_to_fastqc\n\n  output:\n  file (\"*fastqc.{zip,html}\") into qc_fastqc_results\n\n  script:\n  \n  \"\"\"\n  fastqc -o . $qc_fastqFile\n  \"\"\"\n  \n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  fastqc -o . $qc_fastqFile\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "qcreads_to_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "qc_fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}/qc/fastqc\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"zip\") > 0) \"zips/$filename\" else if (filename.indexOf(\"html\") > 0) \"fastqc/$filename\" else if (filename.indexOf(\"txt\") > 0) \"fastqc_stats/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n    publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"multiqc_report.html\"\n    publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"*_data\"\n\n    input:\n    file raw_fastqc from raw_fastqc_results.collect()\n    file qc_fastqc from qc_fastqc_results.collect()\n    file qc_stat from qc_stats.collect()\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\" into multiqc_report_files\n\n  script:\n  \"\"\"\n  multiqc .\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  multiqc .\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "raw_fastqc_results",
            "qc_fastqc_results",
            "qc_stats"
        ],
        "nb_inputs": 3,
        "outputs": [
            "multiqc_report",
            "multiqc_report_files"
        ],
        "nb_outputs": 2,
        "name_workflow": "ABMicroBioinf__nf-qc",
        "directive": [
            "publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"multiqc_report.html\"",
            "publishDir \"${params.outdir}/multiqc/\", mode: 'copy', pattern: \"*_data\""
        ],
        "when": "",
        "stub": ""
    }
}
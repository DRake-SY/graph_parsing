{
    "OPERATION_1": {
        "string": "Channel\n      .from(sample_keys)\n      .map { sk -> tuple(sk, GetReadUnitKeys(sk).collect{GetSingleRead(sk, it)}.flatten()) }\n      .set { raw_fastq_ch }",
        "origin": [
            [
                "sample_keys",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n      .from(sample_keys)\n      .map { sk -> tuple(sk, GetReadUnitKeys(sk).collect{GetReadPair(sk, it)}.flatten()) }\n      .set { raw_fastq_ch }",
        "origin": [
            [
                "sample_keys",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_fastq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "trim_fastq\n    .filter { sample_id, count, reads -> check_reads(count) }\n    .set { fastq_input_ch }",
        "origin": [
            [
                "trim_fastq",
                "P"
            ]
        ],
        "gives": [
            [
                "fastq_input_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "fastqc_out_ch\n    .filter { sample_id, count, reads -> check_reads(count) }\n    .set { fastq_input_ch }",
        "origin": [
            [
                "fastqc_out_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "fastq_input_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "star_aligned\n  .filter { sample_id, logs, sorted_bam, transcriptome_bam -> check_log(logs) }\n  .into { collectRnaSeqMetrics; bam_rseqc; bam_rsem; bam_createBigWig}",
        "origin": [
            [
                "star_aligned",
                "P"
            ]
        ],
        "gives": [
            [
                "collectRnaSeqMetrics",
                "P"
            ],
            [
                "bam_rseqc",
                "P"
            ],
            [
                "bam_rsem",
                "P"
            ],
            [
                "bam_createBigWig",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "fastqc_ch_test = trim_fastqc_results.concat(fastqc_results)\n       .flatten()\n       .filter{ it.toString().endsWith(\"fastqc.zip\") || it.toString().endsWith(\"fastqc.html\") || it.toString().endsWith(\"report.txt\")}",
        "origin": [
            [
                "trim_fastqc_results",
                "P"
            ],
            [
                "fastqc_results",
                "P"
            ]
        ],
        "gives": [
            [
                "fastqc_ch_test",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "fastqc_ch_test = fastqc_results\n       .flatten()\n       .filter{ it.toString().endsWith(\"fastqc.zip\") || it.toString().endsWith(\"fastqc.html\") }  ",
        "origin": [
            [
                "fastqc_results",
                "P"
            ]
        ],
        "gives": [
            [
                "fastqc_ch_test",
                "P"
            ]
        ]
    }
}
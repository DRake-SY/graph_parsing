{
    "calculateAndPrintJPlogP": {
        "name_process": "calculateAndPrintJPlogP",
        "string_process": "\nprocess calculateAndPrintJPlogP {\n\n                                                                            \n    input:\n    set molecule_ids, smiles, isoSmiles from molecules_ch\n\n    exec:\n\n\ttry {\n\t\n\t\t                                                                                               \n\t\t                                                                   \n\n\t\tfor(int i = 0; i < isoSmiles.size(); i++){\n\n\t\t\t                                                                        \n\t\t\tmolecule_id = molecule_ids[i].substring(molecule_ids[i].lastIndexOf(\"/\")+1)\n\n\t\t\t                                                                                        \n\t\t\tif(!isoSmiles[i].trim().equals(\"\")){\n\n\t\t\t\t                                         \n\t\t\t\tmoleculeAtomContainer = smileParser.parseSmiles(isoSmiles[i])\t\t\t\t\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t                                                                                \n\t\t\t\tprintln \"Isomeric SMILE for $molecule_id not found, Trying canonical SMILE..\"\n\n\t\t\t\t                                            \n\t\t\t\tif(!smiles[i].trim().equals(\"\")){\n\t\t\t\t\t\n\t\t\t\t\t                                     \n\t\t\t\t\tmoleculeAtomContainer = smileParser.parseSmiles(smiles[i])\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tprintln \"Canonical SMILE not found, NAN value will be reported\"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t                                                                 \n\t\t\tjplogp = jplogpDescriptor.calculate(moleculeAtomContainer).getValue()\n\n\t\t\t                         \n\t\t\tprintln \"JPLogP of $molecule_id : \" + jplogp\n\t\t}\t\t\n\t\n\t} catch (Exception exc) {\n\t\t                                                     \n\t\tprintln \"Error : \" + exc.message\n\t} \n}",
        "nb_lignes_process": 49,
        "string_script": "\ttry {\n\t\n\t\t                                                                                               \n\t\t                                                                   \n\n\t\tfor(int i = 0; i < isoSmiles.size(); i++){\n\n\t\t\t                                                                        \n\t\t\tmolecule_id = molecule_ids[i].substring(molecule_ids[i].lastIndexOf(\"/\")+1)\n\n\t\t\t                                                                                        \n\t\t\tif(!isoSmiles[i].trim().equals(\"\")){\n\n\t\t\t\t                                         \n\t\t\t\tmoleculeAtomContainer = smileParser.parseSmiles(isoSmiles[i])\t\t\t\t\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t                                                                                \n\t\t\t\tprintln \"Isomeric SMILE for $molecule_id not found, Trying canonical SMILE..\"\n\n\t\t\t\t                                            \n\t\t\t\tif(!smiles[i].trim().equals(\"\")){\n\t\t\t\t\t\n\t\t\t\t\t                                     \n\t\t\t\t\tmoleculeAtomContainer = smileParser.parseSmiles(smiles[i])\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tprintln \"Canonical SMILE not found, NAN value will be reported\"\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t                                                                 \n\t\t\tjplogp = jplogpDescriptor.calculate(moleculeAtomContainer).getValue()\n\n\t\t\t                         \n\t\t\tprintln \"JPLogP of $molecule_id : \" + jplogp\n\t\t}\t\t\n\t\n\t} catch (Exception exc) {\n\t\t                                                     \n\t\tprintln \"Error : \" + exc.message\n\t}",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [
            "PhosTryp"
        ],
        "tools_url": [
            "https://bio.tools/phostryp"
        ],
        "tools_dico": [
            {
                "name": "PhosTryp",
                "uri": "https://bio.tools/phostryp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature recognition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A phosphorylation site predictor specific for parasitic protozoa of the family trypanosomatidae.",
                "homepage": "http://phostryp.bio.uniroma2.it"
            }
        ],
        "inputs": [
            "molecules_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "a-ammar__MSB1015-Assignment3",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
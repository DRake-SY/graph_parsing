{
    "OPERATION_1": {
        "string": "rRNA_fasta = Channel.from(\"\")",
        "origin": [
            [
                "\"\"",
                "V"
            ]
        ],
        "gives": [
            [
                "rRNA_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "compareLines = Channel.from(\"two_group\")",
        "origin": [
            [
                "\"two_group\"",
                "V"
            ]
        ],
        "gives": [
            [
                "compareLines",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "compareLines = Channel.from(comparefile.readLines())",
        "origin": [],
        "gives": [
            [
                "compareLines",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "compareLines = Channel.from(\"\")",
        "origin": [
            [
                "\"\"",
                "V"
            ]
        ],
        "gives": [
            [
                "compareLines",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n            .fromPath( params.readPaths )\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into{ raw_data; raw_bam }",
        "origin": [
            [
                "params.readPaths",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_data",
                "P"
            ],
            [
                "raw_bam",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n            .from( params.readPaths )\n            .map{ row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into{ raw_data; raw_bam }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_data",
                "P"
            ],
            [
                "raw_bam",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n            .from( params.readPaths )\n            .map{ row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into{ raw_data; raw_bam }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_data",
                "P"
            ],
            [
                "raw_bam",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n        .fromPath( 'SRP012098/SRR*/*fastq' )\n        .ifEmpty { exit 1, LikeletUtils.print_red(\"248 reads was empty - no fastq files supplied: ${params.single_end} ${params.reads}. You may check whether it is quoted\")}\n        .into{ raw_data; raw_bam }",
        "origin": [
            [
                "'SRP012098/SRR*/*fastq'",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_data",
                "P"
            ],
            [
                "raw_bam",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n        .fromPath( params.reads ) \n        .ifEmpty { exit 1, LikeletUtils.print_red(\"253 reads was empty - no bam files supplied: ${params.reads}\")}\n        .into{ raw_data; raw_bam }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_data",
                "P"
            ],
            [
                "raw_bam",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "tophat2_index = Channel\n        .fromPath( params.tophat2_index )\n        .ifEmpty { exit 1, \"Tophat2 index not found: ${params.tophat2_index}\" }",
        "origin": [
            [
                "params.tophat2_index",
                "A"
            ]
        ],
        "gives": [
            [
                "tophat2_index",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "hisat2_index = Channel\n        .fromPath(params.hisat2_index)\n        .ifEmpty { exit 1, \"hisat2 index not found: ${params.hisat2_index}\" }",
        "origin": [
            [
                "params.hisat2_index",
                "A"
            ]
        ],
        "gives": [
            [
                "hisat2_index",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "bwa_index = Channel\n        .fromPath( params.bwa_index )\n        .ifEmpty { exit 1, \"bwa index not found: ${params.bwa_index}\" }",
        "origin": [
            [
                "params.bwa_index",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "star_index = Channel\n        .fromPath(params.star_index)\n        .ifEmpty { exit 1, \"STAR index not found: ${params.star_index}\" }",
        "origin": [
            [
                "params.star_index",
                "A"
            ]
        ],
        "gives": [
            [
                "star_index",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel\n        .from()\n        .concat(tophat2_bam, hisat2_bam, bwa_bam, star_bam)\n        .set{ merge_bam_file }",
        "origin": [
            [
                "tophat2_bam",
                "P"
            ],
            [
                "hisat2_bam",
                "P"
            ],
            [
                "bwa_bam",
                "P"
            ],
            [
                "star_bam",
                "P"
            ],
            [
                "",
                "V"
            ]
        ],
        "gives": [
            [
                "merge_bam_file",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel\n        .from()\n        .concat( raw_bam )\n        .set{ merge_bam_file }",
        "origin": [
            [
                "raw_bam",
                "P"
            ],
            [
                "",
                "V"
            ]
        ],
        "gives": [
            [
                "merge_bam_file",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel\n    .from()\n    .concat( tophat2_log, hisat2_log, star_log, fastp_results, fastqc_results, rseqc_results)\n    .into{ arranged_qc; qc_results_for_report }",
        "origin": [
            [
                "tophat2_log",
                "P"
            ],
            [
                "hisat2_log",
                "P"
            ],
            [
                "star_log",
                "P"
            ],
            [
                "fastp_results",
                "P"
            ],
            [
                "fastqc_results",
                "P"
            ],
            [
                "rseqc_results",
                "P"
            ],
            [
                "",
                "V"
            ]
        ],
        "gives": [
            [
                "arranged_qc",
                "P"
            ],
            [
                "qc_results_for_report",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel\n    .from()\n    .concat(metpeak_nomarlized_bed, macs2_nomarlized_bed, matk_nomarlized_bed, meyer_nomarlized_bed)\n    .into {merged_bed ; bed_for_annotation}",
        "origin": [
            [
                "metpeak_nomarlized_bed",
                "P"
            ],
            [
                "macs2_nomarlized_bed",
                "P"
            ],
            [
                "matk_nomarlized_bed",
                "P"
            ],
            [
                "meyer_nomarlized_bed",
                "P"
            ],
            [
                "",
                "V"
            ]
        ],
        "gives": [
            [
                "merged_bed",
                "P"
            ],
            [
                "bed_for_annotation",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel\n    .from()\n    .concat( group_merged_bed, all_merged_bed )\n    .into { annotate_collection; motif_collection; bed_collect_for_arrange_results}",
        "origin": [
            [
                "group_merged_bed",
                "P"
            ],
            [
                "all_merged_bed",
                "P"
            ],
            [
                "",
                "V"
            ]
        ],
        "gives": [
            [
                "annotate_collection",
                "P"
            ],
            [
                "motif_collection",
                "P"
            ],
            [
                "bed_collect_for_arrange_results",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel\n    .from()\n    .concat( quantification_results, motif_results_2, diffm6A_results, \n        htseq_count_input_to_arrange, \n        annotation_results_2, prediction_results, bed_collect_for_arrange_results,\n        multiqc_results, deseq2_results, edgeR_results, cufflinks_results\n    )\n    .set{ results_arrange }",
        "origin": [
            [
                "quantification_results",
                "P"
            ],
            [
                "motif_results_2",
                "P"
            ],
            [
                "diffm6A_results",
                "P"
            ],
            [
                "htseq_count_input_to_arrange",
                "P"
            ],
            [
                "annotation_results_2",
                "P"
            ],
            [
                "prediction_results",
                "P"
            ],
            [
                "bed_collect_for_arrange_results",
                "P"
            ],
            [
                "multiqc_results",
                "P"
            ],
            [
                "deseq2_results",
                "P"
            ],
            [
                "edgeR_results",
                "P"
            ],
            [
                "cufflinks_results",
                "P"
            ],
            [
                "",
                "V"
            ]
        ],
        "gives": [
            [
                "results_arrange",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "compareLines.into{\n    compareLines_for_DESeq2; compareLines_for_edgeR; compareLines_for_plot;\n    compareLines_for_diffm6A; compareLines_for_arranged_result\n}",
        "origin": [
            [
                "compareLines",
                "P"
            ]
        ],
        "gives": [
            [
                "compareLines_for_DESeq2",
                "P"
            ],
            [
                "compareLines_for_edgeR",
                "P"
            ],
            [
                "compareLines_for_plot",
                "P"
            ],
            [
                "compareLines_for_diffm6A",
                "P"
            ],
            [
                "compareLines_for_arranged_result",
                "P"
            ]
        ]
    }
}
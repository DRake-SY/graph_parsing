{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$name\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/fastqc\", mode: 'copy',\n        saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" }\n\n    input:\n    set val(name), file(reads) from read_files_fastqc\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_results\n\n    script:\n    \"\"\"\n    fastqc --quiet --threads $task.cpus $reads\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    fastqc --quiet --threads $task.cpus $reads\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "read_files_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "alemenze__magicuniqueamplicons",
        "directive": [
            "tag \"$name\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/fastqc\", mode: 'copy' , saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "trimming": {
        "name_process": "trimming",
        "string_process": " process trimming{\n     tag \"$name\"\n     publishDir \"${params.outdir}/trimmed\", mode:'copy'\n\n     input:\n     set val(name), file(reads) from read_files_trimming\n\n     output:\n     set val(name), file(\"trimmed/*.*\") into ch_fastq_trimmed\n\n     script:\n     \"\"\"\n     mkdir -p trimmed\n     cutadapt --pair-filter=any --discard-untrimmed \\\n     -g ${params.FW_primer} -G ${params.RV_primer} \\\n     -o trimmed/${reads[0]} -p trimmed/${reads[1]} \\\n     ${reads[0]} ${reads[1]} > cutadapt_log_${name}.txt\n     \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "     \"\"\"\n     mkdir -p trimmed\n     cutadapt --pair-filter=any --discard-untrimmed \\\n     -g ${params.FW_primer} -G ${params.RV_primer} \\\n     -o trimmed/${reads[0]} -p trimmed/${reads[1]} \\\n     ${reads[0]} ${reads[1]} > cutadapt_log_${name}.txt\n     \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "read_files_trimming"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastq_trimmed"
        ],
        "nb_outputs": 1,
        "name_workflow": "alemenze__magicuniqueamplicons",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}/trimmed\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "panda_pair_trimmed": {
        "name_process": "panda_pair_trimmed",
        "string_process": " process panda_pair_trimmed {\n    publishDir \"${params.outdir}/pairs\", mode: 'copy'\n    tag \"$name\"\n    input:\n    set val(name), file(reads) from ch_fastq_trimmed\n    \n    output:\n    set val(name),file(\"*_paired.fastq\") into panda_results\n    \n    script:\n    \"\"\"\n    pandaseq -f ${reads[0]} -r ${reads[1]} -w ${name}_paired.fastq\n    \"\"\"\n    }",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    pandaseq -f ${reads[0]} -r ${reads[1]} -w ${name}_paired.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fastq_trimmed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "panda_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "alemenze__magicuniqueamplicons",
        "directive": [
            "publishDir \"${params.outdir}/pairs\", mode: 'copy'",
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "panda_pair_untrimmed": {
        "name_process": "panda_pair_untrimmed",
        "string_process": " process panda_pair_untrimmed {\n    publishDir \"${params.outdir}/pairs\", mode: 'copy'\n    tag \"$name\"\n    input:\n    set val(name), file(reads) from read_files_trimming\n    \n    output:\n    set val(name),file(\"*_paired.fastq\") into panda_results\n    \n    script:\n    \"\"\"\n    pandaseq -f ${reads[0]} -r ${reads[1]} -w ${name}_paired.fastq\n    \"\"\"\n    }",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    pandaseq -f ${reads[0]} -r ${reads[1]} -w ${name}_paired.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_files_trimming"
        ],
        "nb_inputs": 1,
        "outputs": [
            "panda_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "alemenze__magicuniqueamplicons",
        "directive": [
            "publishDir \"${params.outdir}/pairs\", mode: 'copy'",
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "unique_count": {
        "name_process": "unique_count",
        "string_process": " process unique_count {\n     publishDir \"${params.outdir}/txts\", mode: 'copy'\n    tag \"$name\"\n    input:\n    set val(name), file(reads) from panda_results\n\n    output:\n    set val(name), file(\"*.txt\") into count_results\n\n    script:\n    \"\"\"\n    zgrep -A1 \">\" ${reads} | grep -v \"&--\\$\" | grep -v \">\" | sort | uniq -c | sort -k1,1rn | tee > ${name}.txt\n    \"\"\"\n }",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    zgrep -A1 \">\" ${reads} | grep -v \"&--\\$\" | grep -v \">\" | sort | uniq -c | sort -k1,1rn | tee > ${name}.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "panda_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "count_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "alemenze__magicuniqueamplicons",
        "directive": [
            "publishDir \"${params.outdir}/txts\", mode: 'copy'",
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    },
    "csv_convert": {
        "name_process": "csv_convert",
        "string_process": " process csv_convert {\n     publishDir \"${params.outdir}/output\", mode: 'copy'\ntag \"$name\"\n    input:\n    set val(name), file(counts) from count_results\n\n    output:\n    set val(name), file(\"*.csv\") into csv_results\n\n    script:\n    \"\"\"\n    cat ${counts} | tr -s '[:blank:]' ',' > ${name}.csv\n    \"\"\"\n }",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    cat ${counts} | tr -s '[:blank:]' ',' > ${name}.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "count_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csv_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "alemenze__magicuniqueamplicons",
        "directive": [
            "publishDir \"${params.outdir}/output\", mode: 'copy'",
            "tag \"$name\""
        ],
        "when": "",
        "stub": ""
    }
}
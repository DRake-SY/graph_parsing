{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .set { gtf_matching }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtf_matching",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "gtf_alevin = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "gtf_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .set { gtf_alevin }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtf_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "gtf_alevin_trimmed = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "gtf_alevin_trimmed",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.empty().into{ gtf_matching; gtf_alevin }",
        "origin": [],
        "gives": [
            [
                "gtf_matching",
                "P"
            ],
            [
                "gtf_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n        .fromPath(params.genome_fasta)\n        .ifEmpty { exit 1, \"Genome Reference FASTA file not found: ${params.genome_fasta}\" }\n        .into { genome_fasta_matching; genome_fasta_extract_transcriptome }",
        "origin": [
            [
                "params.genome_fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_fasta_matching",
                "P"
            ],
            [
                "genome_fasta_extract_transcriptome",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "genome_fasta_extract_transcriptome = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "genome_fasta_extract_transcriptome",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n        .fromPath(params.transcriptome_fasta)\n        .ifEmpty { exit 1, \"Transcriptome FASTA file not found: ${params.transcriptome_fasta}\" }\n        .set { transcriptome_fasta_alevin }",
        "origin": [
            [
                "params.transcriptome_fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "transcriptome_fasta_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "transcriptome_fasta_alevin = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "transcriptome_fasta_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n        .fromPath(params.salmon_index)\n        .ifEmpty { exit 1, \"Salmon index not found: ${params.salmon_index}\" }\n        .set { salmon_index_alevin }",
        "origin": [
            [
                "params.salmon_index",
                "A"
            ]
        ],
        "gives": [
            [
                "salmon_index_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromFilePairs( params.rna_reads )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.rna_reads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\n\" }\n            .set { read_files_alevin }",
        "origin": [
            [
                "params.rna_reads",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "read_files_alevin = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "read_files_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.fromFilePairs( params.adt_reads )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.adt_reads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\n\" }\n            .set { read_files_csc }",
        "origin": [
            [
                "params.adt_reads",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_csc",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "read_files_csc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "read_files_csc",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel.fromPath(barcode_filename)\n         .ifEmpty{ exit 1, \"Cannot find ${params.type} barcode whitelist: $barcode_filename\" }\n         .set{ barcode_whitelist_gzipped }",
        "origin": [
            [
                "barcode_filename",
                "A"
            ]
        ],
        "gives": [
            [
                "barcode_whitelist_gzipped",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel.empty().set{ barcode_whitelist_csc }",
        "origin": [],
        "gives": [
            [
                "barcode_whitelist_csc",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel.fromPath(params.barcode_whitelist)\n         .ifEmpty{ exit 1, \"Cannot find barcode whitelist: $barcode_filename\" }\n         .set{ barcode_whitelist_csc }",
        "origin": [
            [
                "params.barcode_whitelist",
                "A"
            ]
        ],
        "gives": [
            [
                "barcode_whitelist_csc",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "barcode_whitelist_gzipped = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "barcode_whitelist_gzipped",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel\n        .fromPath(params.antibody_tags)\n        .ifEmpty { exit 1, \"ADT Sequences file not found: ${params.antibody_tags}\" }\n        .set { adt_tags }",
        "origin": [
            [
                "params.antibody_tags",
                "A"
            ]
        ],
        "gives": [
            [
                "adt_tags",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "adt_tags = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "adt_tags",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n    .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n    .into { raw_reads_fastqc; raw_reads_trimming }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(params.host_index)\n        .ifEmpty { exit 1, \"Host fasta index not found: ${params.host_index}\" }\n        .into { host_index_files }",
        "origin": [
            [
                "params.host_index",
                "A"
            ]
        ],
        "gives": [
            [
                "host_index_files",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromPath(params.viral_index)\n        .ifEmpty { exit 1, \"Viral fasta index not found: ${params.viral_index}\" }\n        .into { viral_index_files; viral_index_files_ivar; viral_index_files_variant_calling }",
        "origin": [
            [
                "params.viral_index",
                "A"
            ]
        ],
        "gives": [
            [
                "viral_index_files",
                "P"
            ],
            [
                "viral_index_files_ivar",
                "P"
            ],
            [
                "viral_index_files_variant_calling",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "summary.collect { k,v -> \"${k.padRight(21)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_6": {
        "string": "mapping_virus_sorted_bam_variant_calling\n      .set {sorted_bam_variant_calling}",
        "origin": [
            [
                "mapping_virus_sorted_bam_variant_calling",
                "P"
            ]
        ],
        "gives": [
            [
                "sorted_bam_variant_calling",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "mapping_virus_bai_variant_calling\n      .set {bam_bai_variant_calling}",
        "origin": [
            [
                "mapping_virus_bai_variant_calling",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_bai_variant_calling",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "mapping_virus_sorted_bam_consensus\n      .set {sorted_bam_consensus}",
        "origin": [
            [
                "mapping_virus_sorted_bam_consensus",
                "P"
            ]
        ],
        "gives": [
            [
                "sorted_bam_consensus",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "mapping_virus_bai_consensus\n      .set {bai_consensus}",
        "origin": [
            [
                "mapping_virus_bai_consensus",
                "P"
            ]
        ],
        "gives": [
            [
                "bai_consensus",
                "P"
            ]
        ]
    }
}
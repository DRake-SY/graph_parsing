{
    "modify_samplesheet": {
        "name_process": "modify_samplesheet",
        "string_process": " process modify_samplesheet {\n   publishDir \"${cluster_path}/05_QC/${project}/samplesheet/\", mode: params.publish_dir_mode\n\n   input:\n   path samplesheet from ch_input\n\n   output:\n   path \"samplesheet_validated.csv\" into ch_samplesheet\n\n   script:\n   out = \"samplesheet_validated.csv\"\n\n   \"\"\"\n   modify_samplesheet.py $samplesheet $out\n   \"\"\"\n }",
        "nb_lignes_process": 14,
        "string_script": "   out = \"samplesheet_validated.csv\"\n\n   \"\"\"\n   modify_samplesheet.py $samplesheet $out\n   \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "ch_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_samplesheet"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__cell_ranger",
        "directive": [
            "publishDir \"${cluster_path}/05_QC/${project}/samplesheet/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_files": {
        "name_process": "prepare_files",
        "string_process": "\nprocess prepare_files {\n  tag \"$sample\"\n  label 'process_medium'\n  publishDir \"${cluster_path}/04_pfastq/${platform}/${run_id}/${lane}/${user}/cell_ranger/\", mode: 'copy',\n  saveAs: { filename ->\n    filename.endsWith(\".fq.gz\") ? \"fastq/$filename\" : filename\n  }\n\n  input:\n  set val(sample), file(reads), val(index), val(run_id), val(lane), val(platform), val(user) from ch_prepare_file\n\n  output:\n  file(\"*001.fq.gz\") into ch_cell_ranger\n\n  script:\n  fqheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq\"\n  fqheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq\"\n  gzheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq.gz\"\n  gzheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq.gz\"\n\n                                                                           \n                                                                                                        \n\n  \"\"\"\n  zcat ${reads[0]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader1 &\n  zcat ${reads[1]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader2\n  pigz -p $task.cpus $fqheader1\n  pigz -p $task.cpus $fqheader2\n  File_ID_new=\\$(echo \"${sample}\" | rev | cut -c 3- | rev)\n  File_ID_number=\\$(echo \"${sample}\" | rev | cut -c 1 | rev)\n  Lane_ID_number=\\$(echo \"${lane}\" | rev | cut -c 1 | rev)\n  convertHeaders.py -i $gzheader1 -o \\${File_ID_new}_S\\${File_ID_number}_L00\\${Lane_ID_number}_R1_001.fq.gz &\n  convertHeaders.py -i $gzheader2 -o \\${File_ID_new}_S\\${File_ID_number}_L00\\${Lane_ID_number}_R2_001.fq.gz\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  fqheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq\"\n  fqheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq\"\n  gzheader1 = \"${sample}_${run_id}_${lane}_R1_BC.fq.gz\"\n  gzheader2 = \"${sample}_${run_id}_${lane}_R2_BC.fq.gz\"\n\n                                                                           \n                                                                                                        \n\n  \"\"\"\n  zcat ${reads[0]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader1 &\n  zcat ${reads[1]} | awk -v var=\"$index\" '{if (NR%4 == 1){print \\$1\"_\"var} else{print \\$1}}' > $fqheader2\n  pigz -p $task.cpus $fqheader1\n  pigz -p $task.cpus $fqheader2\n  File_ID_new=\\$(echo \"${sample}\" | rev | cut -c 3- | rev)\n  File_ID_number=\\$(echo \"${sample}\" | rev | cut -c 1 | rev)\n  Lane_ID_number=\\$(echo \"${lane}\" | rev | cut -c 1 | rev)\n  convertHeaders.py -i $gzheader1 -o \\${File_ID_new}_S\\${File_ID_number}_L00\\${Lane_ID_number}_R1_001.fq.gz &\n  convertHeaders.py -i $gzheader2 -o \\${File_ID_new}_S\\${File_ID_number}_L00\\${Lane_ID_number}_R2_001.fq.gz\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_prepare_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_cell_ranger"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__cell_ranger",
        "directive": [
            "tag \"$sample\"",
            "label 'process_medium'",
            "publishDir \"${cluster_path}/04_pfastq/${platform}/${run_id}/${lane}/${user}/cell_ranger/\", mode: 'copy' , saveAs: { filename -> filename.endsWith(\".fq.gz\") ? \"fastq/$filename\" : filename }"
        ],
        "when": "",
        "stub": ""
    }
}
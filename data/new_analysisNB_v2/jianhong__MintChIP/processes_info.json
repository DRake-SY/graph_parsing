{
    "runFastQCOriginal": {
        "name_process": "runFastQCOriginal",
        "string_process": "\nprocess runFastQCOriginal {\ncpus params.fastqc.cpus\n\ninput:\nset runID, file(reads) from readPairsFastQCOriginal\n\nstoreDir \"${params.outdir}/reports/fastqc-original/${runID}\"\n\noutput:\nset file('*.zip'), file('*.html') into fastqcOutputOriginal\n\nscript:\n\"\"\"\n${params.fastqc.path} -t ${params.fastqc.cpus} -o . ${reads}\n\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n${params.fastqc.path} -t ${params.fastqc.cpus} -o . ${reads}\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readPairsFastQCOriginal"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqcOutputOriginal"
        ],
        "nb_outputs": 1,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.fastqc.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runDemultiplex": {
        "name_process": "runDemultiplex",
        "string_process": "\nprocess runDemultiplex {\ncpus params.je.cpus\n\ninput:\nset runID, file(reads) from readPairsDemultiplex\nfile barcode\n\nstoreDir \"${params.outdir}/demultiplexed\"\n\noutput:\nfile(\"${runID}/${runID}%jemultiplexer_out_stats.txt\") into jemultiplexerStats\nfile(\"${runID}/*_1.txt.gz\") into readPairsDemultiedTrimmingL\nfile(\"${runID}/*_2.txt.gz\") into readPairsDemultiedTrimmingR\n\nscript:\n\"\"\"\n# call je\n${params.je.path} demultiplex \\\\\nF1=${reads[0]} \\\\\nF2=${reads[1]} \\\\\nBF=$barcode \\\\\nO=${runID} \\\\\nBPOS=READ_2 \\\\\nADD=true \\\\\nQ=$params.je.MIN_BASE_QUALITY\nfor i in ${runID}/* \ndo\ni=`basename \\$i`\nmv ${runID}/\\$i ${runID}/${runID}%\\$i\ndone\n\"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n# call je\n${params.je.path} demultiplex \\\\\nF1=${reads[0]} \\\\\nF2=${reads[1]} \\\\\nBF=$barcode \\\\\nO=${runID} \\\\\nBPOS=READ_2 \\\\\nADD=true \\\\\nQ=$params.je.MIN_BASE_QUALITY\nfor i in ${runID}/* \ndo\ni=`basename \\$i`\nmv ${runID}/\\$i ${runID}/${runID}%\\$i\ndone\n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readPairsDemultiplex",
            "barcode"
        ],
        "nb_inputs": 2,
        "outputs": [
            "jemultiplexerStats",
            "readPairsDemultiedTrimmingL",
            "readPairsDemultiedTrimmingR"
        ],
        "nb_outputs": 3,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.je.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runFastQCdemultiplex": {
        "name_process": "runFastQCdemultiplex",
        "string_process": "\nprocess runFastQCdemultiplex {\ncpus params.fastqc.cpus\n\ninput:\nset file(readL), file(readR) from readPairsDemultiedTrimPF\n\nstoreDir \"${params.outdir}/reports/fastqc-demulti/${GROUP}\"\n\noutput:\nset GROUP, file('*.zip'), file('*.html') into fastqcOutputDemultiplex\n\nscript:\nGROUP = readL.simpleName\nGROUP = GROUP.tokenize('%')[0]\n\"\"\"\n${params.fastqc.path} -t ${params.fastqc.cpus} -o . ${readL} ${readR}\n\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "GROUP = readL.simpleName\nGROUP = GROUP.tokenize('%')[0]\n\"\"\"\n${params.fastqc.path} -t ${params.fastqc.cpus} -o . ${readL} ${readR}\n\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "group18"
        ],
        "tools_url": [
            "https://bio.tools/group18"
        ],
        "tools_dico": [
            {
                "name": "group18",
                "uri": "https://bio.tools/group18",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0202",
                            "term": "Pharmacology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "Nuclear magnetic resonance spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR spectroscopy"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Protein-ligand docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3899",
                                    "term": "Protein-protein docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Binding site prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Ligand-binding simulation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3899",
                                    "term": "Protein docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site detection"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Massive in Silico Study of Noble Gas Binding to the Structural Proteome.\n\nNoble gases are chemically inert, and it was therefore thought they would have little effect on biology. Paradoxically, it was found that they do exhibit a wide range of biological effects, many of which are target-specific and potentially useful and some of which have been demonstrated in vivo. The underlying mechanisms by which useful pharmacology, such as tissue and neuroprotection, anti-addiction effects, and analgesia, is elicited are relatively unexplored. Experiments to probe the interactions of noble gases with specific proteins are more difficult with gases than those with other chemicals.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/harman (CSIRO.AU), bio.tools/tilehmm (CSIRO.AU), bio.tools/k-link (CSIRO.AU), bio.tools/blue (CSIRO.AU).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'noble gases', 'gases', 'noble', 'gas-protein'",
                "homepage": "http://group18.csiro.au"
            }
        ],
        "inputs": [
            "readPairsDemultiedTrimPF"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqcOutputDemultiplex"
        ],
        "nb_outputs": 1,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.fastqc.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runTrimming": {
        "name_process": "runTrimming",
        "string_process": "\nprocess runTrimming {\ncpus params.trimmomatic.cpus\n\ninput:\nset file(readL), file(readR) from readPairsDemultiedTrimFlat\n\nstoreDir \"${params.outdir}/trimmed/${GROUP}\"\n\noutput:\nset GROUP, read0, file(\"${read0}.R1.paired.fq.gz\"), file(\"${read0}.R2.paired.fq.gz\") into readPairsTrimmed\nset GROUP, read0, file(\"${read0}.R1.unpaired.fq.gz\"), file(\"${read0}.R2.unpaired.fq.gz\") into readUnpairesTrimmed\n\nscript:\nGROUP = readL.simpleName\nGROUP = GROUP.tokenize('%')[0]\nread0 = readL.simpleName\nread0 = read0.replace(\"${GROUP}%\", \"\")\nread0 = read0.replaceAll(\"_[ACGTN]+_1\\$\", \"\")\nadditional = trimmomatic.get(read0)\nif(!additional){\n  additional = \"\"\n}else{\nprintln \"${read0} additional parameter for trimmomatic: ${additional}\"\n}\n\"\"\"\n# call Trimmomatic\necho \"PE: ${readL} ${readR}\"\n${params.trimmomatic.path} PE -threads ${params.trimmomatic.cpus} \\\\\n${readL} ${readR} \\\\\n${read0}.R1.paired.fq.gz ${read0}.R1.unpaired.fq.gz ${read0}.R2.paired.fq.gz ${read0}.R2.unpaired.fq.gz \\\\\n${params.trimmomatic.options} \\\\\n${additional}\n\"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "GROUP = readL.simpleName\nGROUP = GROUP.tokenize('%')[0]\nread0 = readL.simpleName\nread0 = read0.replace(\"${GROUP}%\", \"\")\nread0 = read0.replaceAll(\"_[ACGTN]+_1\\$\", \"\")\nadditional = trimmomatic.get(read0)\nif(!additional){\n  additional = \"\"\n}else{\nprintln \"${read0} additional parameter for trimmomatic: ${additional}\"\n}\n\"\"\"\n# call Trimmomatic\necho \"PE: ${readL} ${readR}\"\n${params.trimmomatic.path} PE -threads ${params.trimmomatic.cpus} \\\\\n${readL} ${readR} \\\\\n${read0}.R1.paired.fq.gz ${read0}.R1.unpaired.fq.gz ${read0}.R2.paired.fq.gz ${read0}.R2.unpaired.fq.gz \\\\\n${params.trimmomatic.options} \\\\\n${additional}\n\"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "group18"
        ],
        "tools_url": [
            "https://bio.tools/group18"
        ],
        "tools_dico": [
            {
                "name": "group18",
                "uri": "https://bio.tools/group18",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0202",
                            "term": "Pharmacology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "Nuclear magnetic resonance spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR spectroscopy"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Protein-ligand docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3899",
                                    "term": "Protein-protein docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Binding site prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Ligand-binding simulation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3899",
                                    "term": "Protein docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site detection"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Massive in Silico Study of Noble Gas Binding to the Structural Proteome.\n\nNoble gases are chemically inert, and it was therefore thought they would have little effect on biology. Paradoxically, it was found that they do exhibit a wide range of biological effects, many of which are target-specific and potentially useful and some of which have been demonstrated in vivo. The underlying mechanisms by which useful pharmacology, such as tissue and neuroprotection, anti-addiction effects, and analgesia, is elicited are relatively unexplored. Experiments to probe the interactions of noble gases with specific proteins are more difficult with gases than those with other chemicals.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/harman (CSIRO.AU), bio.tools/tilehmm (CSIRO.AU), bio.tools/k-link (CSIRO.AU), bio.tools/blue (CSIRO.AU).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'noble gases', 'gases', 'noble', 'gas-protein'",
                "homepage": "http://group18.csiro.au"
            }
        ],
        "inputs": [
            "readPairsDemultiedTrimFlat"
        ],
        "nb_inputs": 1,
        "outputs": [
            "readPairsTrimmed",
            "readUnpairesTrimmed"
        ],
        "nb_outputs": 2,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.trimmomatic.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runFastQCTrimmed": {
        "name_process": "runFastQCTrimmed",
        "string_process": "\nprocess runFastQCTrimmed {\ncpus params.fastqc.cpus\n\ninput:\nset runID, sampleName, file(readL), file(readR) from readPairsFastQCTrimmed\n\nstoreDir \"${params.outdir}/reports/fastqc-trimmed/${runID}\"\n\noutput:\nset runID, sampleName, file('*.zip'), file('*.html') into fastqcOutputTrimmed\n\nscript:\n\"\"\"\n${params.fastqc.path} -t ${params.fastqc.cpus} -o . ${readL} ${readR}\n\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n${params.fastqc.path} -t ${params.fastqc.cpus} -o . ${readL} ${readR}\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readPairsFastQCTrimmed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqcOutputTrimmed"
        ],
        "nb_outputs": 1,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.fastqc.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runBWA": {
        "name_process": "runBWA",
        "string_process": "\nprocess runBWA {\n  cpus params.bwa.cpus\n  \n  input:\n    set runID, sampleName, file(readL), file(readR) from readPairsRunMapping\n  \n  storeDir \"${params.outdir}/bwa/${runID}\"\n  \n  output:\n    set sampleName, runID, file(\"${runID}%${readL.simpleName}.bam\"), file(\"${runID}%${readL.simpleName}.bam.bai\") into mappedFiles\n  \n  script:\n    \"\"\"\n    ${params.bwa.path} mem -M -t ${params.bwa.cpus} ${params.bwa.index} ${readL} ${readR} > ${readL.simpleName}.sam\n    ${params.samtools.path} sort -@ ${params.bwa.cpus} -n ${readL.simpleName}.sam -o ${readL.simpleName}.bam\n    ${params.samtools.path} fixmate -@ ${params.bwa.cpus} -m ${readL.simpleName}.bam ${readL.simpleName}.fixout.bam\n    ${params.samtools.path} sort ${readL.simpleName}.fixout.bam -@ ${params.bwa.cpus} -o ${readL.simpleName}.sort.bam\n    ${params.samtools.path} markdup ${readL.simpleName}.sort.bam ${readL.simpleName}.rem.bam -@ ${params.bwa.cpus} -r\n    mv ${readL.simpleName}.rem.bam ${runID}%${readL.simpleName}.bam\n    ${params.samtools.path} index ${runID}%${readL.simpleName}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    ${params.bwa.path} mem -M -t ${params.bwa.cpus} ${params.bwa.index} ${readL} ${readR} > ${readL.simpleName}.sam\n    ${params.samtools.path} sort -@ ${params.bwa.cpus} -n ${readL.simpleName}.sam -o ${readL.simpleName}.bam\n    ${params.samtools.path} fixmate -@ ${params.bwa.cpus} -m ${readL.simpleName}.bam ${readL.simpleName}.fixout.bam\n    ${params.samtools.path} sort ${readL.simpleName}.fixout.bam -@ ${params.bwa.cpus} -o ${readL.simpleName}.sort.bam\n    ${params.samtools.path} markdup ${readL.simpleName}.sort.bam ${readL.simpleName}.rem.bam -@ ${params.bwa.cpus} -r\n    mv ${readL.simpleName}.rem.bam ${runID}%${readL.simpleName}.bam\n    ${params.samtools.path} index ${runID}%${readL.simpleName}.bam\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readPairsRunMapping"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mappedFiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.bwa.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runHOMERwithoutInput": {
        "name_process": "runHOMERwithoutInput",
        "string_process": "\nprocess runHOMERwithoutInput {\n  cpus params.homer.cpus\n  \n  input:\n    set expSampleName, expGroup, file(expbam), file(expbamIndex) from forHomerWithoutInput\n  \n  storeDir \"${params.outdir}/homer/${expGroup}/${expSampleName}\"\n  \n  output:\n    file(\"${expSampleName}*\") into homerFiles0\n    set expSampleName, expGroup, file(expbam), file(expbamIndex), file(\"${expSampleName}.bed\") into ChIPQCwithoutInput\n  \n  script:\n    additional = findPeaks.get(expSampleName)\n    if(!additional){\n      additional = \"\"\n    }else{\n      println \"${expSampleName} additional parameter for findPeaks: ${additional}\"\n    }\n    \n    \"\"\"\n    ${params.homer.makeTagDirectory} ${expSampleName}_Tagdir ${expbam} -sspe\n    ${params.homer.makeUCSCfile} ${expSampleName}_Tagdir -name ${expSampleName}_Chr1-10 \\\\\n    -skipChr ${params.homer.chrOtherThanChr1To10} \\\\\n    -o ${expSampleName}_Chr1-10.bedgraph -color 0,0,204 ${params.homer.makeUCSCfileOptions}\n    ${params.homer.makeUCSCfile} ${expSampleName}_Tagdir -name ${expSampleName}_Chr11 \\\\\n    -skipChr ${params.homer.chr1To10} \\\\\n    -o ${expSampleName}_Chr11-.bedgraph ${params.homer.makeUCSCfileOptions}\n    \n    ${params.homer.findPeaks} ${expSampleName}_Tagdir ${params.homer.findPeaksOptions} \\\\\n    -o ${expSampleName}_Calledpeaks.txt \\\\\n    ${additional}\n\n    ${params.homer.annotatePeaks} ${expSampleName}_Calledpeaks.txt ${params.species} \\\\\n    > ${expSampleName}_Annotatedlist.txt\n    ${params.homer.pos2bed} ${expSampleName}_Calledpeaks.txt -o ${expSampleName}.bed -track ${expSampleName}\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    additional = findPeaks.get(expSampleName)\n    if(!additional){\n      additional = \"\"\n    }else{\n      println \"${expSampleName} additional parameter for findPeaks: ${additional}\"\n    }\n    \n    \"\"\"\n    ${params.homer.makeTagDirectory} ${expSampleName}_Tagdir ${expbam} -sspe\n    ${params.homer.makeUCSCfile} ${expSampleName}_Tagdir -name ${expSampleName}_Chr1-10 \\\\\n    -skipChr ${params.homer.chrOtherThanChr1To10} \\\\\n    -o ${expSampleName}_Chr1-10.bedgraph -color 0,0,204 ${params.homer.makeUCSCfileOptions}\n    ${params.homer.makeUCSCfile} ${expSampleName}_Tagdir -name ${expSampleName}_Chr11 \\\\\n    -skipChr ${params.homer.chr1To10} \\\\\n    -o ${expSampleName}_Chr11-.bedgraph ${params.homer.makeUCSCfileOptions}\n    \n    ${params.homer.findPeaks} ${expSampleName}_Tagdir ${params.homer.findPeaksOptions} \\\\\n    -o ${expSampleName}_Calledpeaks.txt \\\\\n    ${additional}\n\n    ${params.homer.annotatePeaks} ${expSampleName}_Calledpeaks.txt ${params.species} \\\\\n    > ${expSampleName}_Annotatedlist.txt\n    ${params.homer.pos2bed} ${expSampleName}_Calledpeaks.txt -o ${expSampleName}.bed -track ${expSampleName}\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "forHomerWithoutInput"
        ],
        "nb_inputs": 1,
        "outputs": [
            "homerFiles0",
            "ChIPQCwithoutInput"
        ],
        "nb_outputs": 2,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.homer.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runHOMERwithInput": {
        "name_process": "runHOMERwithInput",
        "string_process": "\nprocess runHOMERwithInput {\n  cpus params.homer.cpus\n  \n  input:\n    set inputSampleName, inputGroup, file(inputbam), file(inputbamIndex), expSampleName, expGroup, file(expbam), file(expbamIndex) from forHomerWithInput\n  \n  storeDir \"${params.outdir}/homer/${expGroup}/${expSampleName}\"\n  \n  output:\n    file(\"${expSampleName}*\") into homerFiles1\n    file(\"${inputSampleName}*\") into homerFiles2\n    file(\"${inputGroup}%${inputSampleName}_*\") into homerFiles3\n    file(\"${expGroup}%${expSampleName}_*\") into homerFiles4\n    set expSampleName, expGroup, file(expbam), file(expbamIndex), inputSampleName, file(inputbam), file(inputbamIndex), file(\"${expSampleName}.bed\") into ChIPQCwithInput\n  \n  script:\n    additional = findPeaks.get(expSampleName)\n    if(!additional){\n      additional = \"\"\n    }else{\n      println \"${expSampleName} additional parameter for findPeaks: ${additional}\"\n    }\n    \"\"\"\n    ${params.homer.makeTagDirectory} ${inputGroup}%${inputSampleName}_Tagdir ${inputbam} -sspe\n    ${params.homer.makeUCSCfile} ${inputGroup}%${inputSampleName}_Tagdir -name ${inputSampleName}_Chr1-10 \\\\\n    -skipChr ${params.homer.chrOtherThanChr1To10} \\\\\n    -o ${inputSampleName}_Chr1-10.bedgraph -color 0,0,204 ${params.homer.makeUCSCfileOptions}\n    ${params.homer.makeUCSCfile} ${inputGroup}%${inputSampleName}_Tagdir -name ${inputSampleName}_Chr11 \\\\\n    -skipChr ${params.homer.chr1To10} \\\\\n    -o ${inputSampleName}_Chr11-.bedgraph ${params.homer.makeUCSCfileOptions}\n    \n    ${params.homer.makeTagDirectory} ${expGroup}%${expSampleName}_Tagdir ${expbam} -sspe\n    ${params.homer.makeUCSCfile} ${expGroup}%${expSampleName}_Tagdir -name ${expSampleName}_Chr1-10 \\\\\n    -skipChr ${params.homer.chrOtherThanChr1To10} \\\\\n    -o ${expSampleName}_Chr1-10.bedgraph -color 0,0,204 ${params.homer.makeUCSCfileOptions}\n    ${params.homer.makeUCSCfile} ${expGroup}%${expSampleName}_Tagdir -name ${expSampleName}_Chr11 \\\\\n    -skipChr ${params.homer.chr1To10} \\\\\n    -o ${expSampleName}_Chr11-.bedgraph ${params.homer.makeUCSCfileOptions}\n    \n    ${params.homer.findPeaks} ${expGroup}%${expSampleName}_Tagdir ${params.homer.findPeaksOptions} \\\\\n    -i ${inputGroup}%${inputSampleName}_Tagdir \\\\\n    -o ${expSampleName}_Calledpeaks.txt \\\\\n    ${additional}\n\n    ${params.homer.annotatePeaks} ${expSampleName}_Calledpeaks.txt ${params.species} \\\\\n    > ${expSampleName}_Annotatedlist.txt\n    ${params.homer.pos2bed} ${expSampleName}_Calledpeaks.txt -o ${expSampleName}.bed -track ${expSampleName}\n    \"\"\"\n\n}",
        "nb_lignes_process": 49,
        "string_script": "    additional = findPeaks.get(expSampleName)\n    if(!additional){\n      additional = \"\"\n    }else{\n      println \"${expSampleName} additional parameter for findPeaks: ${additional}\"\n    }\n    \"\"\"\n    ${params.homer.makeTagDirectory} ${inputGroup}%${inputSampleName}_Tagdir ${inputbam} -sspe\n    ${params.homer.makeUCSCfile} ${inputGroup}%${inputSampleName}_Tagdir -name ${inputSampleName}_Chr1-10 \\\\\n    -skipChr ${params.homer.chrOtherThanChr1To10} \\\\\n    -o ${inputSampleName}_Chr1-10.bedgraph -color 0,0,204 ${params.homer.makeUCSCfileOptions}\n    ${params.homer.makeUCSCfile} ${inputGroup}%${inputSampleName}_Tagdir -name ${inputSampleName}_Chr11 \\\\\n    -skipChr ${params.homer.chr1To10} \\\\\n    -o ${inputSampleName}_Chr11-.bedgraph ${params.homer.makeUCSCfileOptions}\n    \n    ${params.homer.makeTagDirectory} ${expGroup}%${expSampleName}_Tagdir ${expbam} -sspe\n    ${params.homer.makeUCSCfile} ${expGroup}%${expSampleName}_Tagdir -name ${expSampleName}_Chr1-10 \\\\\n    -skipChr ${params.homer.chrOtherThanChr1To10} \\\\\n    -o ${expSampleName}_Chr1-10.bedgraph -color 0,0,204 ${params.homer.makeUCSCfileOptions}\n    ${params.homer.makeUCSCfile} ${expGroup}%${expSampleName}_Tagdir -name ${expSampleName}_Chr11 \\\\\n    -skipChr ${params.homer.chr1To10} \\\\\n    -o ${expSampleName}_Chr11-.bedgraph ${params.homer.makeUCSCfileOptions}\n    \n    ${params.homer.findPeaks} ${expGroup}%${expSampleName}_Tagdir ${params.homer.findPeaksOptions} \\\\\n    -i ${inputGroup}%${inputSampleName}_Tagdir \\\\\n    -o ${expSampleName}_Calledpeaks.txt \\\\\n    ${additional}\n\n    ${params.homer.annotatePeaks} ${expSampleName}_Calledpeaks.txt ${params.species} \\\\\n    > ${expSampleName}_Annotatedlist.txt\n    ${params.homer.pos2bed} ${expSampleName}_Calledpeaks.txt -o ${expSampleName}.bed -track ${expSampleName}\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "forHomerWithInput"
        ],
        "nb_inputs": 1,
        "outputs": [
            "homerFiles1",
            "homerFiles2",
            "homerFiles3",
            "homerFiles4",
            "ChIPQCwithInput"
        ],
        "nb_outputs": 5,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.homer.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runChIPQC1sampleWithoutInput": {
        "name_process": "runChIPQC1sampleWithoutInput",
        "string_process": "\nprocess runChIPQC1sampleWithoutInput {\n  cpus params.chipqc.cpus\n  \n  input:\n    set expSampleName, expGroup, file(expbam), file(expbamIndex), file(bedFile) from ChIPQCwithoutInput\n  \n  storeDir \"${params.outdir}/${params.chipqc.reportFolder}/${expGroup}/${expSampleName}\"\n  \n  output:\n    file(\"${expSampleName}*\") into chipqcFiles1\n  \n  script:\n    \"\"\"\n    ${params.Rscript.path} \"$baseDir/bin/chipqc1.R\" ${expbam} ${bedFile} ${expSampleName}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    ${params.Rscript.path} \"$baseDir/bin/chipqc1.R\" ${expbam} ${bedFile} ${expSampleName}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ChIPQCwithoutInput"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chipqcFiles1"
        ],
        "nb_outputs": 1,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.chipqc.cpus"
        ],
        "when": "",
        "stub": ""
    },
    "runChIPQC1sampleWithInput": {
        "name_process": "runChIPQC1sampleWithInput",
        "string_process": "\nprocess runChIPQC1sampleWithInput {\n  cpus params.chipqc.cpus\n  \n  input:\n    set expSampleName, expGroup, file(expbam), file(expbamIndex), inputSampleName, file(inputbam), file(inputbamIndex), file(bedFile) from ChIPQCwithInput\n  \n  storeDir \"${params.outdir}/${params.chipqc.reportFolder}/${expGroup}\"\n  \n  output:\n    file(\"${expSampleName}*\") into chipqcFiles2\n  \n  script:\n    \"\"\"\n    ${params.Rscript.path} \"$baseDir/bin/chipqc1.R\" ${expbam} ${bedFile} ${expSampleName}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    ${params.Rscript.path} \"$baseDir/bin/chipqc1.R\" ${expbam} ${bedFile} ${expSampleName}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ChIPQCwithInput"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chipqcFiles2"
        ],
        "nb_outputs": 1,
        "name_workflow": "jianhong__MintChIP",
        "directive": [
            "cpus params.chipqc.cpus"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "preprocess_genome": {
        "name_process": "preprocess_genome",
        "string_process": "\nprocess preprocess_genome{\n\n  container 'lifebitai/samtools'\n\n\n  input:\n  file fasta from fasta\n  file fai from fai\n  file fastagz from fastagz\n  file gzfai from gzfai\n  file gzi from gzi\n  output:\n  set file(fasta),file(\"${fasta}.fai\"),file(\"${fasta}.gz\"),file(\"${fasta}.gz.fai\"), file(\"${fasta}.gz.gzi\"),file(\"${fasta.baseName}.dict\") into fastaChannel\n  script:\n  \"\"\"\n  [[ $fai == \"nofai\" ]] &&  samtools faidx $fasta || echo \" fai file of user is used, not created\"\n  [[ $fastagz == \"nofastagz\" ]]  && bgzip -c ${fasta} > ${fasta}.gz || echo \"fasta.gz file of user is used, not created \"\n  [[ $gzfai == \"nogzi\" ]] && bgzip -c -i ${fasta} > ${fasta}.gz || echo \"gzi file of user is used, not created\"\n  [[ $gzi == \"nogzfai\" ]] && samtools faidx \"${fasta}.gz\" || echo \"gz.fai file of user is used, not created\"\n  PICARD=`which picard.jar`\n  java -jar \\$PICARD CreateSequenceDictionary R= $fasta O= ${fasta.baseName}.dict\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  [[ $fai == \"nofai\" ]] &&  samtools faidx $fasta || echo \" fai file of user is used, not created\"\n  [[ $fastagz == \"nofastagz\" ]]  && bgzip -c ${fasta} > ${fasta}.gz || echo \"fasta.gz file of user is used, not created \"\n  [[ $gzfai == \"nogzi\" ]] && bgzip -c -i ${fasta} > ${fasta}.gz || echo \"gzi file of user is used, not created\"\n  [[ $gzi == \"nogzfai\" ]] && samtools faidx \"${fasta}.gz\" || echo \"gz.fai file of user is used, not created\"\n  PICARD=`which picard.jar`\n  java -jar \\$PICARD CreateSequenceDictionary R= $fasta O= ${fasta.baseName}.dict\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "fai",
            "fastagz",
            "gzfai",
            "gzi"
        ],
        "nb_inputs": 5,
        "outputs": [
            "fastaChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__strelka2",
        "directive": [
            "container 'lifebitai/samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "preprocess_bam": {
        "name_process": "preprocess_bam",
        "string_process": "\nprocess preprocess_bam{\n\n  tag \"${bam[0]}\"\n  container 'lifebitai/samtools'\n\n\n  input:\n  set val(prefix), file(bam) from bamChannel\n  set file(genome),file(genomefai),file(genomegz),file(genomegzfai),file(genomegzgzi),file(genomedict) from fastaChannel\n\n  output:\n  set file(\"ready/ordered/${bam[0]}\"), file(\"ready/ordered/${bam[0]}.bai\") into completeChannel\n\n  script:\n  \"\"\"\n  PICARD=`which picard.jar`\n  ## Add RG line in case it is missing\n    mkdir ready\n    [[ `samtools view -H ${bam[0]} | grep '@RG' | wc -l`   > 0 ]] && { mv $bam ready; }|| { java -jar  \\$PICARD  AddOrReplaceReadGroups \\\n    I=${bam[0]} O=ready/${bam[0]} RGID=${params.rgid} RGLB=${params.rglb} RGPL=${params.rgpl} RGPU=${params.rgpu} RGSM=${params.rgsm}; }\n  ## Reorder Bam file\n    cd ready; mkdir ordered;  java -jar \\$PICARD  ReorderSam I=${bam[0]} O=ordered/${bam[0]} ALLOW_INCOMPLETE_DICT_CONCORDANCE=true R=../$genome ;\n  ## Index Bam file\n    cd ordered ; samtools index ${bam[0]};\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  PICARD=`which picard.jar`\n  ## Add RG line in case it is missing\n    mkdir ready\n    [[ `samtools view -H ${bam[0]} | grep '@RG' | wc -l`   > 0 ]] && { mv $bam ready; }|| { java -jar  \\$PICARD  AddOrReplaceReadGroups \\\n    I=${bam[0]} O=ready/${bam[0]} RGID=${params.rgid} RGLB=${params.rglb} RGPL=${params.rgpl} RGPU=${params.rgpu} RGSM=${params.rgsm}; }\n  ## Reorder Bam file\n    cd ready; mkdir ordered;  java -jar \\$PICARD  ReorderSam I=${bam[0]} O=ordered/${bam[0]} ALLOW_INCOMPLETE_DICT_CONCORDANCE=true R=../$genome ;\n  ## Index Bam file\n    cd ordered ; samtools index ${bam[0]};\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamChannel",
            "fastaChannel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "completeChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__strelka2",
        "directive": [
            "tag \"${bam[0]}\"",
            "container 'lifebitai/samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "run_variant_caller": {
        "name_process": "run_variant_caller",
        "string_process": "\nprocess run_variant_caller {\n\n    tag \"${bam[1]}\"\n    container \"lifebitai/strelka2\"\n    publishDir \"$baseDir/${params.resultdir}\"\n    cpus params.j\n\n    input:\n    set file(fasta), file(bam) from all_fa_bam\n\n    output:\n    file('calling_output.vcf') into methods_result\n\n    script:\n    \"\"\"\n    \tpwd=\\$PWD\n\n\t/strelka-2.9.4.centos6_x86_64/bin/configureStrelkaGermlineWorkflow.py \\\n\t --bam NA12878_S1.chr20.10_10p1mb.bam \\\n\t --ref ucsc.hg19.chr20.unittest.fasta  \\\n\t --runDir ~/demo_germline\n\n\tcd ~/demo_germline\n\n\t./runWorkflow.py -j ${params.j} -m local \n\n\tcd ./results/variants/\n\n\tgunzip ./variants.vcf.gz\n\n\tmv variants.vcf \\$pwd/calling_output.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    \tpwd=\\$PWD\n\n\t/strelka-2.9.4.centos6_x86_64/bin/configureStrelkaGermlineWorkflow.py \\\n\t --bam NA12878_S1.chr20.10_10p1mb.bam \\\n\t --ref ucsc.hg19.chr20.unittest.fasta  \\\n\t --runDir ~/demo_germline\n\n\tcd ~/demo_germline\n\n\t./runWorkflow.py -j ${params.j} -m local \n\n\tcd ./results/variants/\n\n\tgunzip ./variants.vcf.gz\n\n\tmv variants.vcf \\$pwd/calling_output.vcf\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_fa_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "methods_result"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__strelka2",
        "directive": [
            "tag \"${bam[1]}\"",
            "container \"lifebitai/strelka2\"",
            "publishDir \"$baseDir/${params.resultdir}\"",
            "cpus params.j"
        ],
        "when": "",
        "stub": ""
    }
}
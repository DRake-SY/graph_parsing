{
    "fastp_single": {
        "name_process": "fastp_single",
        "string_process": " process fastp_single {\n        publishDir \"${params.outdir}/fastp\", mode: 'copy'\n\n        input:\n        file reads from read_files\n\n        output:\n        file \"*.{fastq,html,json}\"\n                                                       \n        file \"*.fasta\" into for_mothur0\n        file \"*.qual\" into for_mothur1\n        file \"*.fasta\" into for_group\n        \n                                                                                                           \n                                                                 \n        \"\"\"\n        fastp -i ${reads} -o ${reads.baseName} -h ${reads.simpleName}.html -j ${reads.simpleName}.json       \n        mothur \"#fastq.info(fastq=${reads.baseName})\"\n        \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n        fastp -i ${reads} -o ${reads.baseName} -h ${reads.simpleName}.html -j ${reads.simpleName}.json       \n        mothur \"#fastq.info(fastq=${reads.baseName})\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "fastPHASE",
            "Mothur"
        ],
        "tools_url": [
            "https://bio.tools/fastphase",
            "https://bio.tools/Mothur"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            },
            {
                "name": "Mothur",
                "uri": "https://bio.tools/Mothur",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> LOW CONFIDENCE! | > COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/indices_diversity (MOTHUR.ORG/wiki) | Using Mothur to Determine Bacterial Community Composition and Structure in 16S Ribosomal RNA Datasets | Welcome to the website for the mothur project, initiated by Dr | We will be offering an R workshop December 18-20, 2019 | Welcome to the website for the mothur project, initiated by Dr",
                "homepage": "https://www.mothur.org"
            }
        ],
        "inputs": [
            "read_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "for_mothur0",
            "for_mothur1",
            "for_group"
        ],
        "nb_outputs": 3,
        "name_workflow": "bioinformatist__nf-core-metaamplicon",
        "directive": [
            "publishDir \"${params.outdir}/fastp\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastp_paired": {
        "name_process": "fastp_paired",
        "string_process": " process fastp_paired {\n        publishDir \"${params.outdir}/fastp\", mode: 'copy'\n\n        input:\n        set name, file(reads) from read_files\n\n        output:\n        file \"*.{fastq,html,json}\"\n                                                       \n        file \"*.fastq\" into for_mothur0\n                                                                  \n        file '*.html' into done  \n        \n        \"\"\"\n        fastp -i ${reads[0]} -I ${reads[1]} -o ${reads[0].baseName} -O ${reads[1].baseName} -h ${name}.html -j ${name}.json\n        # vsearch of current version (called by mothur's chimera.vsearch() function) cut too long seq names,\n        # which will cause \"XXX is not in your count table. Please correct.\" error.\n        # So it is needed for pre-cut seq names here, I choose remove first 11 characters now.\n        # Update: This strategy will import new problems in down-stream analysis. Change vsearch to v2.8.0 temperarily.\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n        fastp -i ${reads[0]} -I ${reads[1]} -o ${reads[0].baseName} -O ${reads[1].baseName} -h ${name}.html -j ${name}.json\n        # vsearch of current version (called by mothur's chimera.vsearch() function) cut too long seq names,\n        # which will cause \"XXX is not in your count table. Please correct.\" error.\n        # So it is needed for pre-cut seq names here, I choose remove first 11 characters now.\n        # Update: This strategy will import new problems in down-stream analysis. Change vsearch to v2.8.0 temperarily.\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "read_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "for_mothur0",
            "done"
        ],
        "nb_outputs": 2,
        "name_workflow": "bioinformatist__nf-core-metaamplicon",
        "directive": [
            "publishDir \"${params.outdir}/fastp\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mothur_in_box_single": {
        "name_process": "mothur_in_box_single",
        "string_process": " process mothur_in_box_single {\n        input:\n        file fasta from for_group.collect()\n        file reference\n        file taxonomy\n\n                  \n                                                            \n\n        script:\n        \"\"\"\n        #!/usr/bin/env mothur\n        # To make group file for single-end data\n        make.group(fasta=${fasta.join('-')}, groups=${fasta.collect { it.simpleName }.join('-')})\n        system(cp groups $workflow.launchDir/${params.outdir}/mothur_temp/merge.groups)\n        system(cat *.fasta > stability.trim.contigs.fasta)\n        system(cp stability.trim.contigs.fasta $workflow.launchDir/${params.outdir}/mothur_temp)\n        set.dir(input=$workflow.launchDir/${params.outdir}/mothur_temp, output=$workflow.launchDir/${params.outdir}/mothur_temp)\n        summary.seqs(fasta=stability.trim.contigs.fasta)\n        screen.seqs(fasta=stability.trim.contigs.fasta, group=merge.groups, summary=stability.trim.contigs.summary, optimize=maxlength, maxambig=0, criteria=97.5)\n        summary.seqs()\n        unique.seqs(fasta=stability.trim.contigs.good.fasta)\n        count.seqs(name=stability.trim.contigs.good.names, group=merge.good.groups)\n        summary.seqs(count=stability.trim.contigs.good.count_table)\n        align.seqs(fasta=stability.trim.contigs.good.unique.fasta, reference=$workflow.launchDir/${reference})\n        summary.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table)\n        screen.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table, summary=stability.trim.contigs.good.unique.summary, optimize=start-end, criteria=97.5, maxhomop=8)\n        summary.seqs(fasta=current, count=current)\n        filter.seqs(fasta=stability.trim.contigs.good.unique.good.align, vertical=T, trump=.)\n        unique.seqs(fasta=stability.trim.contigs.good.unique.good.filter.fasta, count=stability.trim.contigs.good.good.count_table)\n        pre.cluster(fasta=stability.trim.contigs.good.unique.good.filter.unique.fasta, count=stability.trim.contigs.good.unique.good.filter.count_table, diffs=3)\n        chimera.vsearch(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)\n        remove.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)\n        summary.seqs(fasta=current, count=current)\n        classify.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=$workflow.launchDir/${reference}, taxonomy=$workflow.launchDir/${taxonomy}, cutoff=80, iters=1000)\n        remove.lineage(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)\n        summary.tax(taxonomy=current, count=current)\n        cluster.split(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)\n        make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, label=0.03)\n        classify.otu(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, label=0.03)\n        get.oturep(column=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.dist, name=stability.trim.contigs.good.names, list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, fasta=stability.trim.contigs.good.unique.fasta)\n        rename.file(taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.0.03.cons.taxonomy, shared=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.shared, prefix=final)\n        make.biom(shared=final.opti_mcc.shared, constaxonomy=final.taxonomy)\n        \"\"\"\n    }",
        "nb_lignes_process": 43,
        "string_script": "        \"\"\"\n        #!/usr/bin/env mothur\n        # To make group file for single-end data\n        make.group(fasta=${fasta.join('-')}, groups=${fasta.collect { it.simpleName }.join('-')})\n        system(cp groups $workflow.launchDir/${params.outdir}/mothur_temp/merge.groups)\n        system(cat *.fasta > stability.trim.contigs.fasta)\n        system(cp stability.trim.contigs.fasta $workflow.launchDir/${params.outdir}/mothur_temp)\n        set.dir(input=$workflow.launchDir/${params.outdir}/mothur_temp, output=$workflow.launchDir/${params.outdir}/mothur_temp)\n        summary.seqs(fasta=stability.trim.contigs.fasta)\n        screen.seqs(fasta=stability.trim.contigs.fasta, group=merge.groups, summary=stability.trim.contigs.summary, optimize=maxlength, maxambig=0, criteria=97.5)\n        summary.seqs()\n        unique.seqs(fasta=stability.trim.contigs.good.fasta)\n        count.seqs(name=stability.trim.contigs.good.names, group=merge.good.groups)\n        summary.seqs(count=stability.trim.contigs.good.count_table)\n        align.seqs(fasta=stability.trim.contigs.good.unique.fasta, reference=$workflow.launchDir/${reference})\n        summary.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table)\n        screen.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table, summary=stability.trim.contigs.good.unique.summary, optimize=start-end, criteria=97.5, maxhomop=8)\n        summary.seqs(fasta=current, count=current)\n        filter.seqs(fasta=stability.trim.contigs.good.unique.good.align, vertical=T, trump=.)\n        unique.seqs(fasta=stability.trim.contigs.good.unique.good.filter.fasta, count=stability.trim.contigs.good.good.count_table)\n        pre.cluster(fasta=stability.trim.contigs.good.unique.good.filter.unique.fasta, count=stability.trim.contigs.good.unique.good.filter.count_table, diffs=3)\n        chimera.vsearch(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)\n        remove.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)\n        summary.seqs(fasta=current, count=current)\n        classify.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=$workflow.launchDir/${reference}, taxonomy=$workflow.launchDir/${taxonomy}, cutoff=80, iters=1000)\n        remove.lineage(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)\n        summary.tax(taxonomy=current, count=current)\n        cluster.split(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)\n        make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, label=0.03)\n        classify.otu(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, label=0.03)\n        get.oturep(column=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.dist, name=stability.trim.contigs.good.names, list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, fasta=stability.trim.contigs.good.unique.fasta)\n        rename.file(taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.0.03.cons.taxonomy, shared=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.shared, prefix=final)\n        make.biom(shared=final.opti_mcc.shared, constaxonomy=final.taxonomy)\n        \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "mothur",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "for_group",
            "reference",
            "taxonomy"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bioinformatist__nf-core-metaamplicon",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mothur_in_box_paired": {
        "name_process": "mothur_in_box_paired",
        "string_process": " process mothur_in_box_paired {     \n        input:\n                                                                                                       \n        file done from done.collect()\n        file reference\n        file taxonomy\n\n        \"\"\"\n        #!/usr/bin/env mothur\n        make.file(inputdir=$workflow.launchDir/${params.outdir}/mothur_temp)\n        make.contigs(file=stability.files, checkorient=t, processors=96)\n        summary.seqs(fasta=stability.trim.contigs.fasta)\n        screen.seqs(fasta=stability.trim.contigs.fasta, group=stability.contigs.groups, summary=stability.trim.contigs.summary, optimize=maxlength, maxambig=0, criteria=97.5)\n        summary.seqs()\n        unique.seqs(fasta=stability.trim.contigs.good.fasta)\n        count.seqs(name=stability.trim.contigs.good.names, group=stability.contigs.good.groups)\n        summary.seqs(count=stability.trim.contigs.good.count_table)\n        align.seqs(fasta=stability.trim.contigs.good.unique.fasta, reference=$workflow.launchDir/${reference})\n        summary.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table)\n        screen.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table, summary=stability.trim.contigs.good.unique.summary, optimize=start-end, criteria=97.5, maxhomop=8)\n        summary.seqs(fasta=current, count=current)\n        filter.seqs(fasta=stability.trim.contigs.good.unique.good.align, vertical=T, trump=.)\n        unique.seqs(fasta=stability.trim.contigs.good.unique.good.filter.fasta, count=stability.trim.contigs.good.good.count_table)\n        pre.cluster(fasta=stability.trim.contigs.good.unique.good.filter.unique.fasta, count=stability.trim.contigs.good.unique.good.filter.count_table, diffs=3)\n        chimera.vsearch(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)\n        remove.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)\n        summary.seqs(fasta=current, count=current)\n        classify.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=$workflow.launchDir/${reference}, taxonomy=$workflow.launchDir/${taxonomy}, cutoff=80, iters=1000)\n        remove.lineage(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)\n        summary.tax(taxonomy=current, count=current)\n        cluster.split(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)\n        make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, label=0.03)\n        classify.otu(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, label=0.03)\n        get.oturep(column=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.dist, name=stability.trim.contigs.good.names, list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, fasta=stability.trim.contigs.good.unique.fasta)\n        rename.file(taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.0.03.cons.taxonomy, shared=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.shared, prefix=final)\n        make.biom(shared=final.opti_mcc.shared, constaxonomy=final.taxonomy)\n        \"\"\"\n    }",
        "nb_lignes_process": 36,
        "string_script": "\"\"\"\n        #!/usr/bin/env mothur\n        make.file(inputdir=$workflow.launchDir/${params.outdir}/mothur_temp)\n        make.contigs(file=stability.files, checkorient=t, processors=96)\n        summary.seqs(fasta=stability.trim.contigs.fasta)\n        screen.seqs(fasta=stability.trim.contigs.fasta, group=stability.contigs.groups, summary=stability.trim.contigs.summary, optimize=maxlength, maxambig=0, criteria=97.5)\n        summary.seqs()\n        unique.seqs(fasta=stability.trim.contigs.good.fasta)\n        count.seqs(name=stability.trim.contigs.good.names, group=stability.contigs.good.groups)\n        summary.seqs(count=stability.trim.contigs.good.count_table)\n        align.seqs(fasta=stability.trim.contigs.good.unique.fasta, reference=$workflow.launchDir/${reference})\n        summary.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table)\n        screen.seqs(fasta=stability.trim.contigs.good.unique.align, count=stability.trim.contigs.good.count_table, summary=stability.trim.contigs.good.unique.summary, optimize=start-end, criteria=97.5, maxhomop=8)\n        summary.seqs(fasta=current, count=current)\n        filter.seqs(fasta=stability.trim.contigs.good.unique.good.align, vertical=T, trump=.)\n        unique.seqs(fasta=stability.trim.contigs.good.unique.good.filter.fasta, count=stability.trim.contigs.good.good.count_table)\n        pre.cluster(fasta=stability.trim.contigs.good.unique.good.filter.unique.fasta, count=stability.trim.contigs.good.unique.good.filter.count_table, diffs=3)\n        chimera.vsearch(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)\n        remove.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)\n        summary.seqs(fasta=current, count=current)\n        classify.seqs(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=$workflow.launchDir/${reference}, taxonomy=$workflow.launchDir/${taxonomy}, cutoff=80, iters=1000)\n        remove.lineage(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)\n        summary.tax(taxonomy=current, count=current)\n        cluster.split(fasta=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)\n        make.shared(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, label=0.03)\n        classify.otu(list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=stability.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.gg.wang.pick.taxonomy, label=0.03)\n        get.oturep(column=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.dist, name=stability.trim.contigs.good.names, list=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, fasta=stability.trim.contigs.good.unique.fasta)\n        rename.file(taxonomy=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.0.03.cons.taxonomy, shared=stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.shared, prefix=final)\n        make.biom(shared=final.opti_mcc.shared, constaxonomy=final.taxonomy)\n        \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "mothur",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "done",
            "reference",
            "taxonomy"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bioinformatist__nf-core-metaamplicon",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
{
    "generate_star_index": {
        "name_process": "generate_star_index",
        "string_process": "\nprocess generate_star_index{\n    label 'process_high'\n    publishDir \"${params.out_dir}/\", mode: params.publish_dir_mode\n\n    input:\n    file(fasta) from ch_fasta\n    file(gtf) from ch_gtf            \n    \n    output:\n    file(\"star_index\") into generated_star_index\n                      \n    when: (params.STAR_index == null)\n\n    script:\n    \"\"\"\n    echo \"star index is running\"\n    mkdir star_index\n      \n    STAR \\\\\n    --runMode genomeGenerate \\\\\n    --runThreadN 8 \\\\\n    --sjdbGTFfile $gtf \\\\\n    --genomeDir star_index/ \\\\\n    --genomeFastaFiles $fasta \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    echo \"star index is running\"\n    mkdir star_index\n      \n    STAR \\\\\n    --runMode genomeGenerate \\\\\n    --runThreadN 8 \\\\\n    --sjdbGTFfile $gtf \\\\\n    --genomeDir star_index/ \\\\\n    --genomeFastaFiles $fasta \n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "ch_fasta",
            "ch_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "generated_star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.out_dir}/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "STAR": {
        "name_process": "STAR",
        "string_process": "\nprocess STAR {\n    label 'process_high'\n    publishDir \"${params.out_dir}/samples/${sampleID}/circRNA_detection/\", mode: params.publish_dir_mode\n    \n    input:\n    set val(sampleID), file(reads) from ch_totalRNA_reads\n    file star_index from ch_star_index\n\n    output:\n    tuple val(sampleID), file(\"Chimeric.out.junction\") into chimeric_junction_files\n\n    script:\n    \"\"\"\n    STAR --chimSegmentMin 10 --runThreadN 10 --genomeDir $star_index --readFilesCommand zcat --readFilesIn $reads\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    STAR --chimSegmentMin 10 --runThreadN 10 --genomeDir $star_index --readFilesCommand zcat --readFilesIn $reads\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "ch_totalRNA_reads",
            "ch_star_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chimeric_junction_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.out_dir}/samples/${sampleID}/circRNA_detection/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "circExplorer2_Parse": {
        "name_process": "circExplorer2_Parse",
        "string_process": "\nprocess circExplorer2_Parse {\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/samples/${sampleID}/circRNA_detection/circExplorer2\", mode: params.publish_dir_mode\n    \n    input:\n    tuple val(sampleID), file(chimeric_junction) from chimeric_junction_files\n\n    output:\n    tuple val(sampleID), file(\"back_spliced_junction.bed\") into backspliced_junction_bed_files\n\n    script:\n    \"\"\"\n    CIRCexplorer2 parse -b \"back_spliced_junction.bed\" -t STAR $chimeric_junction        \n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    CIRCexplorer2 parse -b \"back_spliced_junction.bed\" -t STAR $chimeric_junction        \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CIRCexplorer2"
        ],
        "tools_url": [
            "https://bio.tools/CIRCexplorer2"
        ],
        "tools_dico": [
            {
                "name": "CIRCexplorer2",
                "uri": "https://bio.tools/CIRCexplorer2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Genome-wide annotation of circRNAs and their alternative back-splicing/splicing.",
                "homepage": "https://circexplorer2.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "chimeric_junction_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "backspliced_junction_bed_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/samples/${sampleID}/circRNA_detection/circExplorer2\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "circExplorer2_Annotate": {
        "name_process": "circExplorer2_Annotate",
        "string_process": "\nprocess circExplorer2_Annotate {\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/samples/${sampleID}/circRNA_detection/circExplorer2\", mode: params.publish_dir_mode\n    \n    input:\n    tuple val(sampleID), file(backspliced_junction_bed) from backspliced_junction_bed_files\n    file(fasta) from ch_fasta\n\n    output:\n    file(\"${sampleID}_circularRNA_known.txt\") into ch_circRNA_known_files\n\n    script:\n    \"\"\"\n    CIRCexplorer2 annotate -r $params.gene_pred -g $fasta -b $backspliced_junction_bed -o \"${sampleID}_circularRNA_known.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    CIRCexplorer2 annotate -r $params.gene_pred -g $fasta -b $backspliced_junction_bed -o \"${sampleID}_circularRNA_known.txt\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CIRCexplorer2"
        ],
        "tools_url": [
            "https://bio.tools/CIRCexplorer2"
        ],
        "tools_dico": [
            {
                "name": "CIRCexplorer2",
                "uri": "https://bio.tools/CIRCexplorer2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Genome-wide annotation of circRNAs and their alternative back-splicing/splicing.",
                "homepage": "https://circexplorer2.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "backspliced_junction_bed_files",
            "ch_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_circRNA_known_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/samples/${sampleID}/circRNA_detection/circExplorer2\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_detected_circRNAs": {
        "name_process": "summarize_detected_circRNAs",
        "string_process": "\nprocess summarize_detected_circRNAs{\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/results/circRNA/\", mode: params.publish_dir_mode\n    \n    input:\n    file(circRNA_file) from ch_circRNA_known_files.collect()\n\n    output:\n    file(\"circRNA_counts_raw.tsv\") into ch_circRNA_counts_raw\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/circRNA_summarize_results.R $params.samplesheet $params.out_dir\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/circRNA_summarize_results.R $params.samplesheet $params.out_dir\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_circRNA_known_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_circRNA_counts_raw"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/circRNA/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "normalize_circRNAs": {
        "name_process": "normalize_circRNAs",
        "string_process": "\nprocess normalize_circRNAs{\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/results/circRNA/\", mode: params.publish_dir_mode\n    \n    input:\n    file(circRNA_counts_raw) from ch_circRNA_counts_raw\n\n    output:\n    file(\"circRNA_counts_normalized.tsv\") into (ch_circRNA_counts_norm1, ch_circRNA_counts_norm2)\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/circRNA_results_LibrarySizeEstimation.R $circRNA_counts_raw $params.out_dir\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/circRNA_results_LibrarySizeEstimation.R $circRNA_counts_raw $params.out_dir\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_circRNA_counts_raw"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/circRNA/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "filter_circRNAs": {
        "name_process": "filter_circRNAs",
        "string_process": "\nprocess filter_circRNAs{\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/results/circRNA/\", mode: params.publish_dir_mode\n    \n    input:\n    file(circRNA_counts_norm) from ch_circRNA_counts_norm1\n\n    output:\n    file(\"circRNA_counts_filtered.tsv\") into (ch_circRNA_counts_filtered1, ch_circRNA_counts_filtered2, ch_circRNA_counts_filtered3)\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/circRNA_filtering.R $circRNA_counts_norm $params.out_dir $params.sample_percentage $params.read_threshold\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/circRNA_filtering.R $circRNA_counts_norm $params.out_dir $params.sample_percentage $params.read_threshold\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_circRNA_counts_norm1"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/circRNA/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "extract_circRNA_sequences": {
        "name_process": "extract_circRNA_sequences",
        "string_process": "\nprocess extract_circRNA_sequences {\n    label 'process_medium'\n    publishDir \"${params.out_dir}/results/binding_sites/input/\", mode: params.publish_dir_mode\n    \n    input:\n    file(circRNAs_filtered) from ch_circRNA_counts_filtered1\n    file(fasta) from ch_fasta\n\n    output:\n    file(\"circRNAs.fa\") into circRNAs_fasta\n\n    script:\n    \"\"\"\n\tbash \"${projectDir}\"/bin/get_circRNA_sequences.sh $fasta $circRNAs_filtered \"circRNAs.fa\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n\tbash \"${projectDir}\"/bin/get_circRNA_sequences.sh $fasta $circRNAs_filtered \"circRNAs.fa\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_circRNA_counts_filtered1",
            "ch_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "circRNAs_fasta"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/binding_sites/input/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "miranda": {
        "name_process": "miranda",
        "string_process": "\nprocess miranda {\n    label 'process_long'\n    publishDir \"${params.out_dir}/results/binding_sites/output/\", mode: params.publish_dir_mode\n    \n    input:\n    file(circRNA_fasta) from circRNAs_fasta\n\n    output:\n    file(\"bind_sites_raw.out\") into bind_sites_out\n\n    script:\n    \"\"\"\n        miranda $params.mature_fasta $circRNA_fasta -out \"bind_sites_raw.out\" -quiet\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n        miranda $params.mature_fasta $circRNA_fasta -out \"bind_sites_raw.out\" -quiet\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "circRNAs_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bind_sites_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_long'",
            "publishDir \"${params.out_dir}/results/binding_sites/output/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "binding_sites_processing": {
        "name_process": "binding_sites_processing",
        "string_process": "\nprocess binding_sites_processing {\n    label 'process_medium'\n    publishDir \"${params.out_dir}/results/binding_sites/output/\", mode: params.publish_dir_mode\n    \n    input:\n    file(bind_sites_raw) from bind_sites_out\n\n    output:\n    file(\"bind_sites_processed.txt\") into bind_sites_processed\n\n    script:\n    \"\"\"\n        echo -e \"miRNA\\tTarget\\tScore\\tEnergy-Kcal/Mol\\tQuery-Al(Start-End)\\tSubject-Al(Start-End)\\tAl-Len\\tSubject-Identity\\tQuery-Identity\" > \"bind_sites_processed.txt\"\n        grep -A 1 \"Scores for this hit:\" $bind_sites_raw | sort | grep \">\" | cut -c 2- >> \"bind_sites_processed.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n        echo -e \"miRNA\\tTarget\\tScore\\tEnergy-Kcal/Mol\\tQuery-Al(Start-End)\\tSubject-Al(Start-End)\\tAl-Len\\tSubject-Identity\\tQuery-Identity\" > \"bind_sites_processed.txt\"\n        grep -A 1 \"Scores for this hit:\" $bind_sites_raw | sort | grep \">\" | cut -c 2- >> \"bind_sites_processed.txt\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bind_sites_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bind_sites_processed"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/binding_sites/output/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "binding_sites_filtering": {
        "name_process": "binding_sites_filtering",
        "string_process": "\nprocess binding_sites_filtering {\n    label 'process_medium'\n    publishDir \"${params.out_dir}/results/binding_sites/output/\", mode: params.publish_dir_mode\n    \n    input:\n    file(bind_sites_proc) from bind_sites_processed\n    \n    output:\n    file(\"bindsites_25%_filtered.tsv\") into ch_bindsites_filtered\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/binding_sites_analysis.R ${bind_sites_proc}\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/binding_sites_analysis.R ${bind_sites_proc}\n\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bind_sites_processed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bindsites_filtered"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/binding_sites/output/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "generate_bowtie_index": {
        "name_process": "generate_bowtie_index",
        "string_process": "\nprocess generate_bowtie_index{\n    label 'process_high'\n    publishDir \"${params.out_dir}/bowtie_index/\", mode: params.publish_dir_mode\n\n    input:\n    file(fasta) from ch_fasta\n    \n    output:\n    file(\"${fasta.baseName}*\") into ch_generated_bowtie_index\n                      \n    when: (params.bowtie_index == null)\n\n    script:\n    \"\"\"\n    echo \"bowtie index is in ${fasta.baseName}\"\n    bowtie-build $fasta ${fasta.baseName}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    echo \"bowtie index is in ${fasta.baseName}\"\n    bowtie-build $fasta ${fasta.baseName}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Bowtie"
        ],
        "tools_url": [
            "https://bio.tools/bowtie"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            }
        ],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_generated_bowtie_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.out_dir}/bowtie_index/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "miRDeep2_mapping": {
        "name_process": "miRDeep2_mapping",
        "string_process": " process miRDeep2_mapping {\n        label 'process_high'\n        publishDir \"${params.out_dir}/samples/${sampleID}/miRNA_detection/\", mode: params.publish_dir_mode\n\n        input:\n        tuple val(sampleID), file(read_file) from ch_smallRNA_reads\n        file(index) from ch_bowtie_index.collect()\n        file(fasta) from ch_fasta\n\n        output: \n        tuple val(sampleID), file(\"reads_collapsed.fa\"), file(\"reads_vs_ref.arf\") into ch_miRNA_mapping_output\n\n        script:\n        \"\"\"\n\tgunzip < $read_file > \"${sampleID}.fastq\"\n        mapper.pl \"${sampleID}.fastq\" -e -h -i -j -k $params.miRNA_adapter -l 18 -m -p ${fasta.baseName} -s \"reads_collapsed.fa\" -t \"reads_vs_ref.arf\" -v\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n\tgunzip < $read_file > \"${sampleID}.fastq\"\n        mapper.pl \"${sampleID}.fastq\" -e -h -i -j -k $params.miRNA_adapter -l 18 -m -p ${fasta.baseName} -s \"reads_collapsed.fa\" -t \"reads_vs_ref.arf\" -v\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_smallRNA_reads",
            "ch_bowtie_index",
            "ch_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_miRNA_mapping_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.out_dir}/samples/${sampleID}/miRNA_detection/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "miRDeep2_quantification": {
        "name_process": "miRDeep2_quantification",
        "string_process": " process miRDeep2_quantification {\n        label 'process_high'\n        publishDir \"${params.out_dir}/samples/${sampleID}/miRNA_detection/\", mode: params.publish_dir_mode\n \n        input:\n        tuple val(sampleID), file(reads_collapsed_fa), file(reads_vs_ref_arf) from ch_miRNA_mapping_output\n    \tfile(fasta) from ch_fasta\n\n        output:\n        file(\"miRNAs_expressed*\") into ch_miRNA_expression_files\n\n        script:\n        \"\"\"\n        miRDeep2.pl $reads_collapsed_fa $fasta $reads_vs_ref_arf $params.mature_fasta $params.mature_other_fasta $params.hairpin_fasta -t $params.species -d -v \n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        miRDeep2.pl $reads_collapsed_fa $fasta $reads_vs_ref_arf $params.mature_fasta $params.mature_other_fasta $params.hairpin_fasta -t $params.species -d -v \n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_miRNA_mapping_output",
            "ch_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_miRNA_expression_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.out_dir}/samples/${sampleID}/miRNA_detection/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_detected_miRNAs": {
        "name_process": "summarize_detected_miRNAs",
        "string_process": " process summarize_detected_miRNAs{\n        label 'process_medium'\n\n        publishDir \"${params.out_dir}/results/miRNA/\", mode: params.publish_dir_mode\n    \n        input:\n        file(miRNAs_expressed) from ch_miRNA_expression_files.collect()\n\n        output:\n        file(\"miRNA_counts_raw.tsv\") into ch_miRNA_counts_raw\n\n        script:\n        \"\"\"\n        Rscript \"${projectDir}\"/bin/miRNA_summarize_results.R $params.samplesheet $params.out_dir\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        Rscript \"${projectDir}\"/bin/miRNA_summarize_results.R $params.samplesheet $params.out_dir\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_miRNA_expression_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_miRNA_counts_raw"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/miRNA/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "normalize_miRNAs": {
        "name_process": "normalize_miRNAs",
        "string_process": "\nprocess normalize_miRNAs{\n    label 'process_low'\n\n    publishDir \"${params.out_dir}/results/miRNA/\", mode: params.publish_dir_mode\n    \n    input:\n    file(miRNA_counts_raw) from ch_miRNA_counts_raw\n\n    output:\n    file(\"miRNA_counts_normalized.tsv\") into (ch_miRNA_counts_norm1, ch_miRNA_counts_norm2)\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/miRNA_results_LibrarySizeEstimation.R $miRNA_counts_raw $params.out_dir\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/miRNA_results_LibrarySizeEstimation.R $miRNA_counts_raw $params.out_dir\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_miRNA_counts_raw"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.out_dir}/results/miRNA/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "filter_miRNAs": {
        "name_process": "filter_miRNAs",
        "string_process": "\nprocess filter_miRNAs{\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/results/miRNA/\", mode: params.publish_dir_mode\n    \n    input:\n    file(miRNA_counts_norm) from ch_miRNA_counts_norm1\n\n    output:\n    file(\"miRNA_counts_filtered.tsv\") into (ch_miRNA_counts_filtered1, ch_miRNA_counts_filtered2)\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/miRNA_filtering.R $miRNA_counts_norm $params.out_dir $params.sample_percentage $params.read_threshold\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/miRNA_filtering.R $miRNA_counts_norm $params.out_dir $params.sample_percentage $params.read_threshold\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_miRNA_counts_norm1"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/miRNA/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "compute_correlations": {
        "name_process": "compute_correlations",
        "string_process": "\nprocess compute_correlations{\n    label 'process_medium'\n\n    publishDir \"${params.out_dir}/results/sponging/\", mode: params.publish_dir_mode\n    \n    input:\n    file(miRNA_counts_filtered) from ch_miRNA_counts_filtered1\n    file(circRNA_counts_filtered) from ch_circRNA_counts_filtered2\n    file(filtered_bindsites) from ch_bindsites_filtered\n\n    output:\n    file(\"filtered_circRNA_miRNA_correlation.tsv\") into ch_correlations\n\n    script:\n    \"\"\"\n    Rscript \"${projectDir}\"/bin/compute_correlations.R $params.samplesheet $miRNA_counts_filtered $circRNA_counts_filtered $filtered_bindsites\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    Rscript \"${projectDir}\"/bin/compute_correlations.R $params.samplesheet $miRNA_counts_filtered $circRNA_counts_filtered $filtered_bindsites\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_miRNA_counts_filtered1",
            "ch_circRNA_counts_filtered2",
            "ch_bindsites_filtered"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_correlations"
        ],
        "nb_outputs": 1,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.out_dir}/results/sponging/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "correlation_analysis": {
        "name_process": "correlation_analysis",
        "string_process": "\nprocess correlation_analysis{\n    label 'process_high'\n\n    publishDir \"${params.out_dir}/results/sponging/\", mode: params.publish_dir_mode\n    \n    input:\n    file(correlations) from ch_correlations\n    file(miRNA_counts_filtered) from ch_miRNA_counts_filtered2\n    file(circRNA_counts_filtered) from ch_circRNA_counts_filtered3\n    file(miRNA_counts_norm) from ch_miRNA_counts_norm2\n    file(circRNA_counts_norm) from ch_circRNA_counts_norm2\n\n\n    output:\n    file(\"sponging_statistics.txt\") into ch_sponging_statistics\n    file(\"plots/*.png\") into ch_plots\n\n    script:\n    \"\"\"\n    mkdir -p \"${params.out_dir}/results/sponging/plots/\"\n    Rscript \"${projectDir}\"/bin/correlation_analysis.R $params.samplesheet $miRNA_counts_filtered $circRNA_counts_filtered $correlations $params.out_dir $params.sample_group $miRNA_counts_norm $circRNA_counts_norm\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    mkdir -p \"${params.out_dir}/results/sponging/plots/\"\n    Rscript \"${projectDir}\"/bin/correlation_analysis.R $params.samplesheet $miRNA_counts_filtered $circRNA_counts_filtered $correlations $params.out_dir $params.sample_group $miRNA_counts_norm $circRNA_counts_norm\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_correlations",
            "ch_miRNA_counts_filtered2",
            "ch_circRNA_counts_filtered3",
            "ch_miRNA_counts_norm2",
            "ch_circRNA_counts_norm2"
        ],
        "nb_inputs": 5,
        "outputs": [
            "ch_sponging_statistics",
            "ch_plots"
        ],
        "nb_outputs": 2,
        "name_workflow": "biomedbigdata__nf-core-circRNA-sponging",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.out_dir}/results/sponging/\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    }
}
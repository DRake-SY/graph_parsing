{
    "OPERATION_1": {
        "string": "config_ch = Channel.value(file(params.config))",
        "origin": [],
        "gives": [
            [
                "config_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "reference_ch = Channel.value(file(params.reference))",
        "origin": [],
        "gives": [
            [
                "reference_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "frequency_ch = Channel.value(file(params.frequency))",
        "origin": [],
        "gives": [
            [
                "frequency_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "indelible_ch = Channel.value(file(params.indelible))",
        "origin": [],
        "gives": [
            [
                "indelible_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ped_ch = Channel.value(file(params.ped))",
        "origin": [],
        "gives": [
            [
                "ped_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "parents_ch = Channel.value(file(params.parents))",
        "origin": [],
        "gives": [
            [
                "parents_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n  .fromFilePairs( params.input, size: 2 ) { file->file.name.replaceAll(/.bam|.bai$/,'') }\n  .ifEmpty { exit 1, \"Cannot find any files matching ${params.input}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\" }\n  .set { probands_ch }",
        "origin": [
            [
                "params.input, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "probands_ch",
                "P"
            ]
        ]
    }
}
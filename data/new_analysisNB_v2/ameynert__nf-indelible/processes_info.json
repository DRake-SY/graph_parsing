{
    "fetch": {
        "name_process": "fetch",
        "string_process": "\nprocess fetch {\n\n  input:\n  set val(name), file(alignment) from probands_ch\n  file indelible from indelible_ch\n  file config from config_ch\n\n  output:\n  set val(name), file('*.reads'), file(alignment) into reads_ch\n\n  script:\n  name = name.replaceAll(/${params.suffix}/, '')\n  \"\"\"\n  ${indelible}/indelible.py fetch \\\n    --i ${name}${params.suffix}.bam \\\n    --o ${name}.reads \\\n    --config ${config}\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  name = name.replaceAll(/${params.suffix}/, '')\n  \"\"\"\n  ${indelible}/indelible.py fetch \\\n    --i ${name}${params.suffix}.bam \\\n    --o ${name}.reads \\\n    --config ${config}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "goname"
        ],
        "tools_url": [
            "https://bio.tools/goname"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            }
        ],
        "inputs": [
            "probands_ch",
            "indelible_ch",
            "config_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "reads_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "aggregate": {
        "name_process": "aggregate",
        "string_process": "\nprocess aggregate {\n\n  input:\n  set val(name), file(reads), file(alignment) from reads_ch\n  file indelible from indelible_ch\n  file config from config_ch\n  file reference from reference_ch\n\n  output:\n  set val(name), file('*.counts') into counts_ch\n\n  script:\n  \"\"\"\n  ${indelible}/indelible.py aggregate \\\n    --i ${reads} \\\n    --b ${name}${params.suffix}.bam \\\n    --o ${name}.counts \\\n    --r ${reference} \\\n    --config ${config}\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  ${indelible}/indelible.py aggregate \\\n    --i ${reads} \\\n    --b ${name}${params.suffix}.bam \\\n    --o ${name}.counts \\\n    --r ${reference} \\\n    --config ${config}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_ch",
            "indelible_ch",
            "config_ch",
            "reference_ch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "counts_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "score": {
        "name_process": "score",
        "string_process": "\nprocess score {\n\n  input:\n  set val(name), file(counts) from counts_ch\n  file indelible from indelible_ch\n  file config from config_ch\n\n  output:\n  set val(name), file('*.scored') into score_ch\n\n  script:\n  \"\"\"\n  ${indelible}/indelible.py score \\\n    --i ${counts} \\\n    --o ${name}.scored \\\n    --config ${config}\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  ${indelible}/indelible.py score \\\n    --i ${counts} \\\n    --o ${name}.scored \\\n    --config ${config}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts_ch",
            "indelible_ch",
            "config_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "score_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "blast": {
        "name_process": "blast",
        "string_process": "\nprocess blast {\n\n  input:\n  set val(name), file(scored) from score_ch\n  file indelible from indelible_ch\n  file config from config_ch\n\n  output:\n  set val(name), file(scored), file('*.fasta*') into blast_ch\n\n  script:\n  \"\"\"\n  ${indelible}/indelible.py blast \\\n    --i ${scored} \\\n    --config ${config}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  ${indelible}/indelible.py blast \\\n    --i ${scored} \\\n    --config ${config}\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "score_ch",
            "indelible_ch",
            "config_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "blast_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "annotate": {
        "name_process": "annotate",
        "string_process": "\nprocess annotate {\n\n  publishDir params.outdir, mode: 'copy',\n    saveAs: { filename -> filename - ~/params.suffix/ }\n\n  input:\n  set val(name), file(scored), file(blast) from blast_ch\n  file indelible from indelible_ch\n  file config from config_ch\n  file frequency from frequency_ch\n\n  output:\n  set val(name), file('*.annotated') into annotated_ch,annotated_ch2\n\n  script:\n  \"\"\"\n  ${indelible}/indelible.py annotate \\\n    --i ${scored} \\\n    --o ${name}.annotated \\\n    --d ${frequency} \\\n    --config ${config}\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  ${indelible}/indelible.py annotate \\\n    --i ${scored} \\\n    --o ${name}.annotated \\\n    --d ${frequency} \\\n    --config ${config}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blast_ch",
            "indelible_ch",
            "config_ch",
            "frequency_ch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "annotated_ch",
            "annotated_ch2"
        ],
        "nb_outputs": 2,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [
            "publishDir params.outdir, mode: 'copy' , saveAs: { filename -> filename - ~/params.suffix/ }"
        ],
        "when": "",
        "stub": ""
    },
    "annotated_filter": {
        "name_process": "annotated_filter",
        "string_process": "\nprocess\tannotated_filter {\n \n  publishDir  params.outdir, mode: 'copy'\n\n  input:\n  set val(name), file(annotated) from annotated_ch2\n\n  output:\n  set val(name), file('*.filtered') into annotated_filtered_ch  \n\n  script:\n  \"\"\" \n  filter_annotated.R ${annotated} ${name}.annotated.filtered\n  \"\"\" \n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\" \n  filter_annotated.R ${annotated} ${name}.annotated.filtered\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotated_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "annotated_filtered_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "denovo": {
        "name_process": "denovo",
        "string_process": "\nprocess denovo {\n\n  publishDir  params.outdir, mode: 'copy'\n\n  input:\n  set val(name), file(annotated) from annotated_ch\n  file indelible from indelible_ch\n  file config from config_ch\n  file ped from ped_ch\n  file parents from parents_ch\n \n  output:\n  set val(name), file('*.denovo') into denovo_ch\n\n  script:\n  \"\"\"\n  paternal_id=`grep ${name} ${ped} | cut -f 3`\n  maternal_id=`grep ${name} ${ped} | cut -f 4`\n\n  ${indelible}/indelible.py denovo \\\n    --c ${annotated} \\\n    --m ${parents}/\\${maternal_id}${params.suffix}.bam \\\n    --p ${parents}/\\${paternal_id}${params.suffix}.bam \\\n    --o ${name}.denovo \\\n    --config ${config}\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  paternal_id=`grep ${name} ${ped} | cut -f 3`\n  maternal_id=`grep ${name} ${ped} | cut -f 4`\n\n  ${indelible}/indelible.py denovo \\\n    --c ${annotated} \\\n    --m ${parents}/\\${maternal_id}${params.suffix}.bam \\\n    --p ${parents}/\\${paternal_id}${params.suffix}.bam \\\n    --o ${name}.denovo \\\n    --config ${config}\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotated_ch",
            "indelible_ch",
            "config_ch",
            "ped_ch",
            "parents_ch"
        ],
        "nb_inputs": 5,
        "outputs": [
            "denovo_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "denovo_filter": {
        "name_process": "denovo_filter",
        "string_process": "\nprocess denovo_filter {\n\n  publishDir  params.outdir, mode: 'copy'\n\n  input:\n  set val(name), file(denovo) from denovo_ch\n\n  output:\n  set val(name), file('*.filtered') into denovo_filtered_ch\n\n  script:\n  \"\"\"\n  filter_denovo.R ${denovo} ${name}.denovo.filtered\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  filter_denovo.R ${denovo} ${name}.denovo.filtered\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "denovo_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "denovo_filtered_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__nf-indelible",
        "directive": [
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
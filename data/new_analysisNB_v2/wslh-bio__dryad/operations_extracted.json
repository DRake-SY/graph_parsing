{
    "OPERATION_1": {
        "string": "Channel\n      .fromSRA(testIDS)\n      .into { raw_reads; raw_reads_count }",
        "origin": [
            [
                "testIDS",
                "S"
            ]
        ],
        "gives": [
            [
                "raw_reads",
                "P"
            ],
            [
                "raw_reads_count",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n      .fromPath(\"$baseDir/assets/ASM211692v1.fasta\")\n      .into { snp_reference;mapping_reference }",
        "origin": [
            [
                "\"$baseDir/assets/ASM211692v1.fasta\"",
                "A"
            ]
        ],
        "gives": [
            [
                "snp_reference",
                "P"
            ],
            [
                "mapping_reference",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n      .fromPath(\"$baseDir/snppipeline.conf\")\n      .set { snp_config }",
        "origin": [
            [
                "\"$baseDir/snppipeline.conf\"",
                "A"
            ]
        ],
        "gives": [
            [
                "snp_config",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n      .fromFilePairs( \"${params.reads}/*{R1,R2,_1,_2}*.{fastq,fq}.gz\", size: 2 )\n      .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads} Path must not end with /\" }\n      .into { raw_reads; raw_reads_count }",
        "origin": [
            [
                "\"${params.reads}/*{R1,R2,_1,_2}*.{fastq,fq}.gz\", size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads",
                "P"
            ],
            [
                "raw_reads_count",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n      .from(raw_reads_count)\n      .collect()\n      .subscribe {\n        int size = it.queue[0].size()\n        if(size < 3){\n          println \"Dryad requires 3 or more samples.\"\n          System.exit(1)\n        }\n      }",
        "origin": [
            [
                "raw_reads_count",
                "V"
            ]
        ],
        "gives": []
    },
    "OPERATION_6": {
        "string": "Channel\n          .fromPath(params.snp_reference)\n          .into { snp_reference;mapping_reference }",
        "origin": [
            [
                "params.snp_reference",
                "A"
            ]
        ],
        "gives": [
            [
                "snp_reference",
                "P"
            ],
            [
                "mapping_reference",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n          .fromPath(\"$baseDir/snppipeline.conf\")\n          .set { snp_config }",
        "origin": [
            [
                "\"$baseDir/snppipeline.conf\"",
                "A"
            ]
        ],
        "gives": [
            [
                "snp_config",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "reference_mapping_tsv = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "reference_mapping_tsv",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n  .fromPath(\"$baseDir/multiqc_config.yaml\")\n  .set { multiqc_config }",
        "origin": [
            [
                "\"$baseDir/multiqc_config.yaml\"",
                "A"
            ]
        ],
        "gives": [
            [
                "multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n  .fromPath(\"$baseDir/assets/dryad_logo_250.png\")\n  .set { logo }",
        "origin": [
            [
                "\"$baseDir/assets/dryad_logo_250.png\"",
                "A"
            ]
        ],
        "gives": [
            [
                "logo",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "combined_reads = read_files_fastqc.concat(cleaned_reads_fastqc)",
        "origin": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "cleaned_reads_fastqc",
                "P"
            ]
        ],
        "gives": [
            [
                "combined_reads",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "sam_files = assembly_sams.concat(reference_sams)",
        "origin": [
            [
                "assembly_sams",
                "P"
            ],
            [
                "reference_sams",
                "P"
            ]
        ],
        "gives": [
            [
                "sam_files",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "sam_files = assembly_sams",
        "origin": [
            [
                "assembly_sams",
                "P"
            ]
        ],
        "gives": [
            [
                "sam_files",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "fastaForGenomeSizes = Channel.fromPath( params.fasta , checkIfExists: true)\n      .ifEmpty { exit 1, \"Genome fasta file not found: ${params.fasta}\" }",
        "origin": [
            [
                "params.fasta , checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "fastaForGenomeSizes",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "bwaIndex = Channel.fromPath( bwa_dir , checkIfExists: true)\n      .ifEmpty { exit 1, \"Genome index: Provided index not found: ${params.bwa}\" }",
        "origin": [
            [
                "bwa_dir , checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "bwaIndex",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fastaForBwa = Channel.fromPath(params.fasta, checkIfExists: true)\n      .ifEmpty { exit 1, \"Genome fasta file not found: ${params.fasta}\" }",
        "origin": [
            [
                "params.fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "fastaForBwa",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "designCheckedChannel\n        .splitCsv(header:true, sep:',')\n        .map { row -> [ row.sample_id, [ file(row.fastq_1, checkIfExists: true) ] ] }\n        .into { rawReadsFastqcChannel;\n                rawReadsTrimgaloreChannel;\n                designMultipleGroups }",
        "origin": [
            [
                "designCheckedChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "rawReadsFastqcChannel",
                "P"
            ],
            [
                "rawReadsTrimgaloreChannel",
                "P"
            ],
            [
                "designMultipleGroups",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "designCheckedChannel\n        .splitCsv(header:true, sep:',')\n        .map { row -> [ row.sample_id, [ file(row.fastq_1, checkIfExists: true), file(row.fastq_2, checkIfExists: true) ] ] }\n        .into { rawReadsFastqcChannel;\n                rawReadsTrimgaloreChannel;\n                designMultipleGroups }",
        "origin": [
            [
                "designCheckedChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "rawReadsFastqcChannel",
                "P"
            ],
            [
                "rawReadsTrimgaloreChannel",
                "P"
            ],
            [
                "designMultipleGroups",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "multipleGroups = designMultipleGroups\n                     .map { it -> it[0].split('_')[0] }\n                     .flatten()\n                     .unique()\n                     .count()\n                     .val > 1",
        "origin": [
            [
                "designMultipleGroups",
                "P"
            ]
        ],
        "gives": [
            [
                "multipleGroups",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "bwaChannel\n    .map { it -> [ it[0].split('_')[0] + \"_\" + it[0].split('_')[1], it[1] ] }\n    .groupTuple(by: [0])\n    .map { it ->  [ it[0], it[1].flatten() ] }\n    .set { mergeChannel }",
        "origin": [
            [
                "bwaChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "mergeChannel",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "bedGraphChannel\n    .map { it ->\n        def condition = it[0].split('_')[0]\n        def phase = it[0].split('_')[1]\n        def dictionary = [ (phase) : it[1].flatten()]\n        return tuple(condition, dictionary)\n     }\n    .groupTuple(by: [0])\n    .map { it ->  [ it[0], it[1].flatten() ] }\n    .set { conditionChannel }",
        "origin": [
            [
                "bedGraphChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "conditionChannel",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "RTNormalizationChannel\n  .flatten()\n  .map { it ->  [ it.baseName, it ] }\n  .set { bigwigInputChannel }",
        "origin": [
            [
                "RTNormalizationChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "bigwigInputChannel",
                "P"
            ]
        ]
    }
}
{
    "combineLanesAcrossSamples": {
        "name_process": "combineLanesAcrossSamples",
        "string_process": " process combineLanesAcrossSamples {\n        errorStrategy 'retry'\n        maxRetries 3\n        tag \"${sample_id}\"\n        input:\n        set sample_id, file(seq) from multi_lane_input_fq\n\n        output:\n        tuple val(sample_id), file(\"${sample_id}_R*.fastq.gz\") into input_fq\n\n        \"\"\"\n        cat ${seq.findAll{it =~/_R1_/}.asType(nextflow.util.BlankSeparatedList)} > ${sample_id + '_R1.fastq.gz'}\n        cat ${seq.findAll{it =~/_R2_/}.asType(nextflow.util.BlankSeparatedList)} > ${sample_id + '_R2.fastq.gz'}\n        \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n        cat ${seq.findAll{it =~/_R1_/}.asType(nextflow.util.BlankSeparatedList)} > ${sample_id + '_R1.fastq.gz'}\n        cat ${seq.findAll{it =~/_R2_/}.asType(nextflow.util.BlankSeparatedList)} > ${sample_id + '_R2.fastq.gz'}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "multi_lane_input_fq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "input_fq"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "runFastQC": {
        "name_process": "runFastQC",
        "string_process": "\nprocess runFastQC{\n    conda 'bioconda::fastqc=0.11.9'\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    publishDir \"${params.output_dir}/FastQC/${sample_id}\", mode: 'copy', overwrite: true\n    input:\n        set sample_id, file(paired_sample_fq) from input_fq_qc\n\n    output:\n        file(\"${sample_id}_fastqc/*.zip\") into fastqc_files\n   \n\n    \"\"\"\n    mkdir ${sample_id}_fastqc\n    fastqc --outdir ${sample_id}_fastqc \\\n    -t ${params.num_processes} \\\n    ${paired_sample_fq}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    mkdir ${sample_id}_fastqc\n    fastqc --outdir ${sample_id}_fastqc \\\n    -t ${params.num_processes} \\\n    ${paired_sample_fq}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "input_fq_qc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "conda 'bioconda::fastqc=0.11.9'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\"",
            "publishDir \"${params.output_dir}/FastQC/${sample_id}\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "removeUMIs": {
        "name_process": "removeUMIs",
        "string_process": " process removeUMIs{\n        errorStrategy 'retry'\n        maxRetries 3\n        tag \"${sample_id}\"\n        input:\n            set sample_id, file(sample_fq) from input_fq_umi\n        output:\n            tuple val(sample_id), file(\"UMI_processed.*.gz\") into input_fq_cut\n        shell:\n            \"\"\"\n            umi_tools extract -I ${sample_fq[0]} --bc-pattern=NNNNNNNN \\\n                --read2-in=${sample_fq[1]} --stdout=UMI_processed.1.fastq.gz \\\n                --read2-out=UMI_processed.2.fastq.gz --log=UMI_processed.log\n            \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "            \"\"\"\n            umi_tools extract -I ${sample_fq[0]} --bc-pattern=NNNNNNNN \\\n                --read2-in=${sample_fq[1]} --stdout=UMI_processed.1.fastq.gz \\\n                --read2-out=UMI_processed.2.fastq.gz --log=UMI_processed.log\n            \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_fq_umi"
        ],
        "nb_inputs": 1,
        "outputs": [
            "input_fq_cut"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "cutAdapters": {
        "name_process": "cutAdapters",
        "string_process": "\nprocess cutAdapters {\n    conda 'bioconda::cutadapt=1.18'\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    input:\n        set sample_id, file(sample_fq) from input_fq_cut\n    output:\n        tuple val(sample_id), file(\"trim_*.fq\") into cut_fq\n    shell:\n    if(params.read_1_forward){\n        \"\"\"\n        cutadapt --trim-n -O 1 -m 20 -A ${params.read_reverse_adapter} -a ${params.read_forward_adapter}\\\n            -A ${params.read_adapters_1} -A ${params.read_adapters_2} -A ${params.read_adapters_3}\\\n            -a ${params.read_adapters_1} -a ${params.read_adapters_2} -a ${params.read_adapters_3}\\\n            -o trim_1.fq -p trim_2.fq -j ${params.num_processes} ${sample_fq[0]} ${sample_fq[1]}\n        \"\"\"\n    }\n    else{\n        \"\"\"\n        cutadapt --trim-n -O 1 -m 20 -a ${params.read_reverse_adapter} -A ${params.read_forward_adapter}\\\n            -A ${params.read_adapters_1} -A ${params.read_adapters_2} -A ${params.read_adapters_3}\\\n            -a ${params.read_adapters_1} -a ${params.read_adapters_2} -a ${params.read_adapters_3}\\\n            -o trim_1.fq -p trim_2.fq -j ${params.num_processes} ${sample_fq[0]} ${sample_fq[1]}\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 26,
        "string_script": "    if(params.read_1_forward){\n        \"\"\"\n        cutadapt --trim-n -O 1 -m 20 -A ${params.read_reverse_adapter} -a ${params.read_forward_adapter}\\\n            -A ${params.read_adapters_1} -A ${params.read_adapters_2} -A ${params.read_adapters_3}\\\n            -a ${params.read_adapters_1} -a ${params.read_adapters_2} -a ${params.read_adapters_3}\\\n            -o trim_1.fq -p trim_2.fq -j ${params.num_processes} ${sample_fq[0]} ${sample_fq[1]}\n        \"\"\"\n    }\n    else{\n        \"\"\"\n        cutadapt --trim-n -O 1 -m 20 -a ${params.read_reverse_adapter} -A ${params.read_forward_adapter}\\\n            -A ${params.read_adapters_1} -A ${params.read_adapters_2} -A ${params.read_adapters_3}\\\n            -a ${params.read_adapters_1} -a ${params.read_adapters_2} -a ${params.read_adapters_3}\\\n            -o trim_1.fq -p trim_2.fq -j ${params.num_processes} ${sample_fq[0]} ${sample_fq[1]}\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "input_fq_cut"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cut_fq"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "conda 'bioconda::cutadapt=1.18'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "alignHisat2": {
        "name_process": "alignHisat2",
        "string_process": "\nprocess alignHisat2 {\n    conda 'bioconda::hisat2=2.1.0'\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    publishDir \"${params.output_dir}/alignment/${sample_id}\", pattern: \"*.hisat2_summary.txt\", mode: 'copy', overwrite: true\n    input:\n        tuple val(sample_id), path(index_ht2_parts), path(sample_fq) from reads_genome_tuple\n    output:\n        file(\"unaligned.fq\") into unaligned_fq\n        file(\"${sample_id}.hisat2_summary.txt\") into alignment_logs\n        tuple val(sample_id), file(\"aligned.sam\") into aligned_sam\n    shell:\n        \"\"\"\n        hisat2 --version\n        hisat2 -p ${params.num_processes} -k 2 \\\n            --no-spliced-alignment \\\n            --no-unal \\\n            --un unaligned.fq -x ${sample_id}${params.index_prefix} \\\n            -S aligned.sam \\\n\t    -1 ${sample_fq[0]} -2 ${sample_fq[1]} \\\n            --summary-file ${sample_id}.hisat2_summary.txt --maxins 1500\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        hisat2 --version\n        hisat2 -p ${params.num_processes} -k 2 \\\n            --no-spliced-alignment \\\n            --no-unal \\\n            --un unaligned.fq -x ${sample_id}${params.index_prefix} \\\n            -S aligned.sam \\\n\t    -1 ${sample_fq[0]} -2 ${sample_fq[1]} \\\n            --summary-file ${sample_id}.hisat2_summary.txt --maxins 1500\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "HISAT2"
        ],
        "tools_url": [
            "https://bio.tools/hisat2"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            }
        ],
        "inputs": [
            "reads_genome_tuple"
        ],
        "nb_inputs": 1,
        "outputs": [
            "unaligned_fq",
            "alignment_logs",
            "aligned_sam"
        ],
        "nb_outputs": 3,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "conda 'bioconda::hisat2=2.1.0'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\"",
            "publishDir \"${params.output_dir}/alignment/${sample_id}\", pattern: \"*.hisat2_summary.txt\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "samViewSort": {
        "name_process": "samViewSort",
        "string_process": "\nprocess samViewSort {\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    input:\n        set val(sample_id), file(sample_sam) from aligned_sam\n    output:\n        tuple val(sample_id), file(\"aligned_sorted.bam\"), \\\n            file(\"aligned_sorted.bam.bai\") into aligned_sorted_bam\n    shell:\n        \"\"\"\n        samtools --version\n        samtools view -b ${sample_sam} | samtools sort \\\n            -@ ${params.num_processes} -O bam -o aligned_sorted.bam -\n        samtools index aligned_sorted.bam\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        samtools --version\n        samtools view -b ${sample_sam} | samtools sort \\\n            -@ ${params.num_processes} -O bam -o aligned_sorted.bam -\n        samtools index aligned_sorted.bam\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "aligned_sam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "aligned_sorted_bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "deduplicateUMI": {
        "name_process": "deduplicateUMI",
        "string_process": " process deduplicateUMI {   \n        errorStrategy 'retry'\n        maxRetries 3\n        tag \"${sample_id}\"\n        input:\n             set val(sample_id), file(sample_bam), file(sample_bam_bai) from aligned_sorted_bam\n        output:\n            tuple val(sample_id), file(\"${sample_id}.deduplicated.bam\"), file(sample_bam_bai) into deduplicated_bam\n        shell:\n            \"\"\"\n            umi_tools dedup -I ${sample_bam} --paired -S ${sample_id}.deduplicated.bam --output-stats=deduplicated\n            \"\"\"\n    }",
        "nb_lignes_process": 11,
        "string_script": "            \"\"\"\n            umi_tools dedup -I ${sample_bam} --paired -S ${sample_id}.deduplicated.bam --output-stats=deduplicated\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aligned_sorted_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "deduplicated_bam"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "makeBedgraphs": {
        "name_process": "makeBedgraphs",
        "string_process": "\nprocess makeBedgraphs {\n    conda 'bioconda::bedtools=2.30.0'\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    publishDir \"${params.output_dir}/bedgraph/${sample_id}\", mode: 'copy', overwrite: true\n    input:\n        tuple val(sample_id), file(sample_bam), file(sample_bam_bai) \\\n            from bedgraph_bam\n    output:\n        tuple file(\"plus.bedgraph.gz\"), \\\n            file(\"minus.bedgraph.gz\") into bedgraph\n    shell:\n        \"\"\"\n        bedtools --version\n        bedtools genomecov -ibam ${sample_bam} -trackline -bga \\\n            -strand + | gzip > plus.bedgraph.gz\n        bedtools genomecov -ibam ${sample_bam} -trackline -bga \\\n            -strand - | gzip > minus.bedgraph.gz\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        bedtools --version\n        bedtools genomecov -ibam ${sample_bam} -trackline -bga \\\n            -strand + | gzip > plus.bedgraph.gz\n        bedtools genomecov -ibam ${sample_bam} -trackline -bga \\\n            -strand - | gzip > minus.bedgraph.gz\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bedgraph_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bedgraph"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "conda 'bioconda::bedtools=2.30.0'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\"",
            "publishDir \"${params.output_dir}/bedgraph/${sample_id}\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "renameBamSample": {
        "name_process": "renameBamSample",
        "string_process": "\nprocess renameBamSample {\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    input:\n        tuple val(sample_id), file(sample_bam), file(sample_bam_bai) \\\n            from htscount_bam\n    output:\n        tuple val(sample_id),  file(\"${sample_id}_aln.bam\") into sampleid_aln_bam\n    shell:\n        \"\"\"\n        ln -s ${sample_bam} ${sample_id}_aln.bam\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        ln -s ${sample_bam} ${sample_id}_aln.bam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "htscount_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sampleid_aln_bam"
        ],
        "nb_outputs": 1,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "countAllmRNA": {
        "name_process": "countAllmRNA",
        "string_process": "\nprocess countAllmRNA {\n    conda 'bioconda::subread=2.0.0'\n    errorStrategy 'retry'\n    maxRetries 3\n    tag \"${sample_id}\"\n    publishDir \"${params.output_dir}/counts/${sample_id}\", pattern:\"*.txt\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/counts/${sample_id}\", pattern:\"*.summary\", mode: 'copy', overwrite: true\n    publishDir \"${params.output_dir}/sorted_bam/${sample_id}\", pattern:\"*.bam\",  mode: 'copy', overwrite: true\n    input:\n        tuple val(sample_id), file(mRNAgff), file(sampleid_bams) from gff_bam_tuple\n    output:\n        file(\"${sample_id}_counts.txt\") into counts\n        file(\"${sample_id}_counts.txt.summary\") into counts_summary\n        file(\"${sample_id}_aln.bam.featureCounts.bam\") into feature_assigned_bam\n    shell:\n        \"\"\"\n        featureCounts -p -T ${params.num_processes} -s 2 -t ${params.featuretype} -g ${params.featurename} -a ${mRNAgff} -o \"${sample_id}_counts.txt\" ${sampleid_bams.join(\" \")} -R BAM\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        featureCounts -p -T ${params.num_processes} -s 2 -t ${params.featuretype} -g ${params.featurename} -a ${mRNAgff} -o \"${sample_id}_counts.txt\" ${sampleid_bams.join(\" \")} -R BAM\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "gff_bam_tuple"
        ],
        "nb_inputs": 1,
        "outputs": [
            "counts",
            "counts_summary",
            "feature_assigned_bam"
        ],
        "nb_outputs": 3,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "conda 'bioconda::subread=2.0.0'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag \"${sample_id}\"",
            "publishDir \"${params.output_dir}/counts/${sample_id}\", pattern:\"*.txt\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/counts/${sample_id}\", pattern:\"*.summary\", mode: 'copy', overwrite: true",
            "publishDir \"${params.output_dir}/sorted_bam/${sample_id}\", pattern:\"*.bam\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "runMultiQC": {
        "name_process": "runMultiQC",
        "string_process": "\nprocess runMultiQC{\n    errorStrategy 'retry'\n    maxRetries 3\n    tag { \"multiQC\" }\n    publishDir \"${params.output_dir}\", mode: 'copy', overwrite: true\n    input:\n        file ('*') from fastqc_files.collect()\n        file ('*') from alignment_logs.collect()\n    output:\n        file('multiqc_report.html')\n\n    \"\"\"\n    multiqc .\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    multiqc .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_files",
            "alignment_logs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "DimmestP__nextflow_paired_reads_pipeline",
        "directive": [
            "errorStrategy 'retry'",
            "maxRetries 3",
            "tag { \"multiQC\" }",
            "publishDir \"${params.output_dir}\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "multi_lane_input_fq = Channel\n        .fromFilePairs(\"${params.input_fq_dir}${params.fastq_file_regex}\", size: 2)\n        .filter {it[0] =~ \"^$params.sample_name_regex\"}\n        .map(extract_sample_code_multi_lane)\n        .groupTuple(size: 4)\n        .map(flattenFileList)",
        "origin": [
            [
                "\"${params.input_fq_dir}${params.fastq_file_regex}\", size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "multi_lane_input_fq",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "input_fq = Channel\n        .fromPath(\"${params.input_fq_dir}${params.fastq_file_regex}\")\n        .map(extract_sample_code_single_lane)\n        .groupTuple(size:2, sort:\"true\")",
        "origin": [
            [
                "\"${params.input_fq_dir}${params.fastq_file_regex}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "input_fq",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "indexed_genomes = Channel.fromPath( \"${params.index_dir}*.ht2\" )\n    .map(extract_sample_name)\n    .groupTuple(size: 8)",
        "origin": [
            [
                "\"${params.index_dir}*.ht2\"",
                "A"
            ]
        ],
        "gives": [
            [
                "indexed_genomes",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "mRNAgff = Channel.fromPath(\"${params.mRNAgff_dir}*.gff\")\n          .map(extract_sample_name)",
        "origin": [
            [
                "\"${params.mRNAgff_dir}*.gff\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mRNAgff",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "flattened_file_list = list_of_paired_files.flatten()",
        "origin": [
            [
                "list_of_paired_files",
                "P"
            ]
        ],
        "gives": [
            [
                "flattened_file_list",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "input_fq\n    .tap{input_fq_qc}\n    .tap{input_fq_umi}",
        "origin": [
            [
                "input_fq",
                "P"
            ]
        ],
        "gives": [
            [
                "input_fq_qc",
                "P"
            ],
            [
                "input_fq_umi",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "input_fq_umi\n        .tap{input_fq_cut}",
        "origin": [
            [
                "input_fq_umi",
                "P"
            ]
        ],
        "gives": [
            [
                "input_fq_cut",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "reads_genome_tuple = indexed_genomes\n    .join(cut_fq)",
        "origin": [
            [
                "indexed_genomes",
                "P"
            ],
            [
                "cut_fq",
                "P"
            ]
        ],
        "gives": [
            [
                "reads_genome_tuple",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "deduplicated_bam.into { bedgraph_bam; htscount_bam }",
        "origin": [
            [
                "deduplicated_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "bedgraph_bam",
                "P"
            ],
            [
                "htscount_bam",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "aligned_sorted_bam.into { bedgraph_bam; htscount_bam }",
        "origin": [
            [
                "aligned_sorted_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "bedgraph_bam",
                "P"
            ],
            [
                "htscount_bam",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "gff_bam_tuple = mRNAgff\n                .join(sampleid_aln_bam)",
        "origin": [
            [
                "mRNAgff",
                "P"
            ],
            [
                "sampleid_aln_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "gff_bam_tuple",
                "P"
            ]
        ]
    }
}
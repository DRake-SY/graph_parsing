{
    "OPERATION_1": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; ch_read_files_trimming;  }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromFilePairs(params.reads, size: params.single_end ? 1 : 2)\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.reads, size: params.single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "bt_indices = Channel\n        .fromPath(\"${params.bt_index}*\", checkIfExists: true)\n        .ifEmpty { exit 1, \"Bowtie2 index directory not found: \" }",
        "origin": [
            [
                "\"${params.bt_index}*\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "bt_indices",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "genomeIndex": {
        "name_process": "genomeIndex",
        "string_process": "\nprocess genomeIndex {\n    input:\n    file genome from genomeFile\n    file annotation from annotationFile\n\n    output:\n    file 'genomeIndex' into genomeIndexChannel\n\n    \"\"\"\n    mkdir -p genomeIndex\n    STAR --runThreadN ${task.cpus} \\\\\n         --runMode genomeGenerate \\\\\n         --genomeDir genomeIndex \\\\\n         --genomeFastaFiles $genome \\\\\n         --sjdbGTFfile $annotation \\\\\n         --genomeSAindexNbases 11\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    mkdir -p genomeIndex\n    STAR --runThreadN ${task.cpus} \\\\\n         --runMode genomeGenerate \\\\\n         --genomeDir genomeIndex \\\\\n         --genomeFastaFiles $genome \\\\\n         --sjdbGTFfile $annotation \\\\\n         --genomeSAindexNbases 11\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "genomeFile",
            "annotationFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "genomeIndexChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "guigolab__rnaseq-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "transcriptomeIndex": {
        "name_process": "transcriptomeIndex",
        "string_process": "\nprocess transcriptomeIndex {\n    input:\n    file genome from genomeFile\n    file annotation from annotationFile\n\n    output:\n    file 'transcriptomeIndex' into transcriptomeIndexChannel\n\n    \"\"\"\n    mkdir -p transcriptomeIndex\n    rsem-prepare-reference --gtf $annotation \\\\\n                           $genome \\\\\n                           transcriptomeIndex/RSEMref\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    mkdir -p transcriptomeIndex\n    rsem-prepare-reference --gtf $annotation \\\\\n                           $genome \\\\\n                           transcriptomeIndex/RSEMref\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeFile",
            "annotationFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "transcriptomeIndexChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "guigolab__rnaseq-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mapping": {
        "name_process": "mapping",
        "string_process": "\nprocess mapping {\n    tag { prefix }\n    publishDir { \"${params.outdir}/${task.process}\" }, mode: 'link'\n\n    input:\n    file index from genomeIndexChannel\n    set prefix, file(reads) from readsChannel\n\n    output:\n    set prefix, file('*.sortedByCoord.out.bam') into genomeAlignmentsChannel\n    set prefix, file('*.toTranscriptome.out.bam') into transcriptomeAlignmentsChannel\n    set prefix, file('*Log.final.out')\n\n    \"\"\"\n    STAR --runThreadN ${task.cpus} \\\\\n         --genomeDir $index \\\\\n         --readFilesIn $reads \\\\\n         --outSAMunmapped Within \\\\\n         --outFilterType BySJout \\\\\n         --outSAMattributes NH HI AS NM MD \\\\\n         --readFilesCommand pigz -p${task.cpus} -dc \\\\\n         --outSAMtype BAM SortedByCoordinate \\\\\n         --quantMode TranscriptomeSAM \\\\\n         --outFileNamePrefix ${prefix}_\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n    STAR --runThreadN ${task.cpus} \\\\\n         --genomeDir $index \\\\\n         --readFilesIn $reads \\\\\n         --outSAMunmapped Within \\\\\n         --outFilterType BySJout \\\\\n         --outSAMattributes NH HI AS NM MD \\\\\n         --readFilesCommand pigz -p${task.cpus} -dc \\\\\n         --outSAMtype BAM SortedByCoordinate \\\\\n         --quantMode TranscriptomeSAM \\\\\n         --outFileNamePrefix ${prefix}_\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "genomeIndexChannel",
            "readsChannel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "genomeAlignmentsChannel",
            "transcriptomeAlignmentsChannel",
            "prefix"
        ],
        "nb_outputs": 3,
        "name_workflow": "guigolab__rnaseq-nf",
        "directive": [
            "tag { prefix }",
            "publishDir { \"${params.outdir}/${task.process}\" }, mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "quantification": {
        "name_process": "quantification",
        "string_process": "\nprocess quantification {\n    tag { prefix }\n    publishDir { \"${params.outdir}/${task.process}\" }, mode: 'link'\n\n    input:\n    file transcriptomeIndex from transcriptomeIndexChannel\n    set prefix, file(transcriptomeAlignments) from transcriptomeAlignmentsChannel\n\n    output:\n    file \"${prefix}.genes.results\" into geneQuantificationChannel\n    file \"${prefix}.isoforms.results\" into isoformQuantificationChannel\n\n    \"\"\"\n    rsem-calculate-expression --num-threads ${task.cpus} \\\\\n                              --bam \\\\\n                              --paired-end \\\\\n                              --estimate-rspd \\\\\n                              --forward-prob 0 \\\\\n                              --no-bam-output \\\\\n                              --seed 12345 \\\\\n                              $transcriptomeAlignments \\\\\n                              $transcriptomeIndex/RSEMref \\\\\n                              $prefix\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    rsem-calculate-expression --num-threads ${task.cpus} \\\\\n                              --bam \\\\\n                              --paired-end \\\\\n                              --estimate-rspd \\\\\n                              --forward-prob 0 \\\\\n                              --no-bam-output \\\\\n                              --seed 12345 \\\\\n                              $transcriptomeAlignments \\\\\n                              $transcriptomeIndex/RSEMref \\\\\n                              $prefix\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "transcriptomeIndexChannel",
            "transcriptomeAlignmentsChannel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "geneQuantificationChannel",
            "isoformQuantificationChannel"
        ],
        "nb_outputs": 2,
        "name_workflow": "guigolab__rnaseq-nf",
        "directive": [
            "tag { prefix }",
            "publishDir { \"${params.outdir}/${task.process}\" }, mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "matrix": {
        "name_process": "matrix",
        "string_process": "\nprocess matrix {\n    tag { unit }\n    publishDir { \"${params.outdir}/${task.process}\" }, mode: 'link'\n\n    input:\n    each unit from units\n    file quantification from geneQuantificationChannel.collect().sort{ it.simpleName }\n\n    output:\n    file outputMatrix\n\n    script:\n    files = quantification.collect { \"'${it.name}'\" }.join(',')\n    prefix = quantification[0].simpleName.split(\"_\")[0..1].join(\"_\")\n    outputMatrix = \"${prefix}.gene.matrix.${unit}.tsv\"\n    \"\"\"\n    #!/usr/bin/env python\n    import csv\n    import os\n\n    d = {}\n    samples = set()\n\n    for f in [ ${files} ]:\n        with open(f) as fd:\n            sample = os.path.basename(f).split('.')[0]\n            samples.add(sample)\n            csvfile = csv.DictReader(fd, delimiter='\\t')\n            for line in csvfile:\n                element_id = line['gene_id']\n                element_value_list = []\n                v = line['${unit}']\n                element_value = float(v) if v != \"NA\" else \"NA\"\n                element_value_list += [str(element_value)]\n                d.setdefault(element_id, {}).setdefault(sample, \",\".join(element_value_list))\n\n    f = open('${outputMatrix}','w')\n\n    f.write('\\\\t'.join(sorted(samples, key=lambda x: x.lower()))+'\\\\n')\n    for element in sorted(d.iterkeys()):\n        values = d[element]\n        f.write(element+'\\\\t')\n        missing_value = 'NA'\n        f.write('\\\\t'.join(str(values.get(s, missing_value)) for s in sorted(samples, key=lambda x: x.lower()))+'\\\\n')\n    f.close()\n    \"\"\"\n\n}",
        "nb_lignes_process": 47,
        "string_script": "    files = quantification.collect { \"'${it.name}'\" }.join(',')\n    prefix = quantification[0].simpleName.split(\"_\")[0..1].join(\"_\")\n    outputMatrix = \"${prefix}.gene.matrix.${unit}.tsv\"\n    \"\"\"\n    #!/usr/bin/env python\n    import csv\n    import os\n\n    d = {}\n    samples = set()\n\n    for f in [ ${files} ]:\n        with open(f) as fd:\n            sample = os.path.basename(f).split('.')[0]\n            samples.add(sample)\n            csvfile = csv.DictReader(fd, delimiter='\\t')\n            for line in csvfile:\n                element_id = line['gene_id']\n                element_value_list = []\n                v = line['${unit}']\n                element_value = float(v) if v != \"NA\" else \"NA\"\n                element_value_list += [str(element_value)]\n                d.setdefault(element_id, {}).setdefault(sample, \",\".join(element_value_list))\n\n    f = open('${outputMatrix}','w')\n\n    f.write('\\\\t'.join(sorted(samples, key=lambda x: x.lower()))+'\\\\n')\n    for element in sorted(d.iterkeys()):\n        values = d[element]\n        f.write(element+'\\\\t')\n        missing_value = 'NA'\n        f.write('\\\\t'.join(str(values.get(s, missing_value)) for s in sorted(samples, key=lambda x: x.lower()))+'\\\\n')\n    f.close()\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "units",
            "geneQuantificationChannel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "outputMatrix"
        ],
        "nb_outputs": 1,
        "name_workflow": "guigolab__rnaseq-nf",
        "directive": [
            "tag { unit }",
            "publishDir { \"${params.outdir}/${task.process}\" }, mode: 'link'"
        ],
        "when": "",
        "stub": ""
    }
}
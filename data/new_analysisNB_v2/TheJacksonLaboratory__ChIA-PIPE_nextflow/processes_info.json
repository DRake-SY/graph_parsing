{
    "detect_linker_pigz": {
        "name_process": "detect_linker_pigz",
        "string_process": "\nprocess detect_linker_pigz {\n    tag \"$sampleID\"\n    label 'cpuprg'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.cpu\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.stat\", mode: 'copy'\n\n    input:\n    tuple sampleID, fqR1, fqR2 from sample_fastqs_ch\n\n    output:\n    tuple sampleID, file(\"${sampleID}.${pairlabel}.fastq*\") \\\n          into ( linker_pe_fq )\n    tuple sampleID, file(\"${sampleID}.${singlabel}.fastq*\") \\\n          into ( linker_se_fq )\n    tuple sampleID, file(\"${sampleID}.none.fastq*\") into none_fq \n   \n    tuple sampleID, file(\"*.stat\") into stat_cpuprg \n    tuple sampleID, file(\"*.1.log\") into log_cpuprg\n\n    script:\n    log.info \"--- ChIA-PIPE start ---\"\n    log.info \"-----Linker Detection & pigz on ${sampleID} -----\"\n    \"\"\"\n    echo \"--- ChIA-PIPE start ---\" >> ${params.run}.1.log\n    echo \"--- linker detection ---\" >> ${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    cpu stag -W -T 18 \\\n        -t $thread \\\n        -O ${params.run} \\\n        ${fqR1} ${fqR2} \\\n        >> ${params.run}.1.log \\\n        2>&1\n     \n    echo \"--- linker detection completed ---\" >>${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    cpu stat -s -p -T 18 \\\n        -t $thread \\\n        ${params.run}.cpu \\\n        2>> ${params.run}.1.log \\\n        1>${params.run}.stat\n     \n    echo echo \"--- statistics done ---\"  >>${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n    echo \"--- pigziiping ---\" >> ${params.run}.1.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.singlelinker.paired.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.singlelinker.single.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.none.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.conflict.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.tied.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    echo echo \"--- pigziiping done ---\"  >>${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    echo \"--- Mapping Start ---\" >> ${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.1.log\n    echo  \"Mapping paired tags ..\" >> ${params.run}.1.log\n\n    \"\"\"\n}",
        "nb_lignes_process": 89,
        "string_script": "    log.info \"--- ChIA-PIPE start ---\"\n    log.info \"-----Linker Detection & pigz on ${sampleID} -----\"\n    \"\"\"\n    echo \"--- ChIA-PIPE start ---\" >> ${params.run}.1.log\n    echo \"--- linker detection ---\" >> ${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    cpu stag -W -T 18 \\\n        -t $thread \\\n        -O ${params.run} \\\n        ${fqR1} ${fqR2} \\\n        >> ${params.run}.1.log \\\n        2>&1\n     \n    echo \"--- linker detection completed ---\" >>${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    cpu stat -s -p -T 18 \\\n        -t $thread \\\n        ${params.run}.cpu \\\n        2>> ${params.run}.1.log \\\n        1>${params.run}.stat\n     \n    echo echo \"--- statistics done ---\"  >>${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n    echo \"--- pigziiping ---\" >> ${params.run}.1.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.singlelinker.paired.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.singlelinker.single.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.none.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.conflict.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.tied.fastq \\\n        >> ${params.run}.1.log \\\n        2>&1\n\n    echo echo \"--- pigziiping done ---\"  >>${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    echo \"--- Mapping Start ---\" >> ${params.run}.1.log\n    echo \"`date`\" >> ${params.run}.1.log\n\n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.1.log\n    echo  \"Mapping paired tags ..\" >> ${params.run}.1.log\n\n    \"\"\"",
        "nb_lignes_script": 66,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_fastqs_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "",
            "none_fq",
            "stat_cpuprg",
            "log_cpuprg"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'cpuprg'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.cpu\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.stat\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "map_pair": {
        "name_process": "map_pair",
        "string_process": "\nprocess map_pair {\n    tag \"$sampleID\"\n    label 'cpuprg'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.span.xls\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.dedup.lc\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.juice.gz\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.stat.xls\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.trans.gz\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.BE*\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(fqpe) from linker_pe_fq\n    tuple sampleID, file(logtxt) from log_cpuprg\n    \n    output:\n    tuple sampleID, file(\"${sampleID}.${pairlabel}.${pair_suffix}.nr.bam\") \\\n          into ( map_pe_bam, map_pe_bam1 )\n    tuple sampleID, file(\"${sampleID}.${pairlabel}.${pair_suffix}.span.xls\") \\\n          into xls_pe_bam\n    tuple sampleID, file(\"${sampleID}.${pairlabel}.${pair_suffix}.nr.span.xls\") \\\n          into xls_nrpe_bam\n    tuple sampleID, file(\"*.clusters.*.gz\") \\\n          into cluster_gz\n    tuple sampleID, file(\"*.log\") into log_map\n    tuple sampleID, file(\"*.dedup.lc\") into log_map_dedup\n    tuple sampleID, file(\"*.gz\") into log_map_gz\n    tuple sampleID, file(\"*.stat.xls\") into log_map_stat\n    tuple sampleID, file(\"*.BE*\") into log_map_BE\n    tuple sampleID, file(\"*.2.log\") into log_map_pe\n\n    script:\n    log.info \"----- Mapping on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.2.log\n    echo \"--- Mapping Starts ---\" >> ${params.run}.2.log\n    echo \"`date`\" >> ${params.run}.2.log\n  \n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.2.log\n    echo  \"Mapping paired tags ..\" >> ${params.run}.2.log\n\n    cpu memaln -T ${pair_map_qual} \\\n        -t $thread \\\n        ${params.bwaIndex}.fa \\\n        ${params.run}.${pairlabel}.fastq.gz 1>${params.run}.${pairlabel}.sam \\\n        2>> ${params.run}.2.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.${pairlabel}.sam \\\n        >> ${params.run}.2.log \\\n        2>&1\n\n    echo \"ENDED pair mapping\" >> ${params.run}.2.log\n\n    echo  \"STARTED ${sampleID} cpu pair .. >> ${params.run}.2.log\"\n    echo  \"Pairing paired tags .. >> ${params.run}.2.log\"\n\n    cpu pair -S -q 30 -s ${selfbp} \\\n        -t $thread \\\n        ${params.run}.${pairlabel}.sam.gz \\\n        1>${params.run}.${pairlabel}.stat.xls \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} cpu pair .. >> ${params.run}.2.log\"\n    \n    echo  \"STARTED ${sampleID} cpu span .. >> ${params.run}.2.log\"\n    echo  \"Computing span of paired tags .. >> ${params.run}.2.log\"\n\n    cpu span -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${pairlabel}.${pair_suffix}.bam \\\n        1>${params.run}.${pairlabel}.${pair_suffix}.span.xls \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} span pair .. >> ${params.run}.2.log\"\n    \n    echo  \"STARTED ${sampleID} cpu dedup .. >> ${params.run}.2.log\"\n    echo  \"De-duplicating paired tags UU .. >> ${params.run}.2.log\"\n\n    cpu dedup -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${pairlabel}.${pair_suffix}.bam \\\n        1>${params.run}.${pairlabel}.${pair_suffix}.dedup.lc \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} cpu dedup .. >> ${params.run}.2.log\"    \n\n    echo  \"STARTED ${sampleID} cpu dedup span.. >> ${params.run}.2.log\"\n    echo  \"Computing span of paired tags UU nr .. >> ${params.run}.2.log\"\n\n    cpu span \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${pairlabel}.${pair_suffix}.nr.bam \\\n        1>${params.run}.${pairlabel}.${pair_suffix}.nr.span.xls \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} cpu dedup span.. >> ${params.run}.2.log\"\n\n    cpu cluster \\\n        -m -s ${selfbp} \\\n        -B 1000 -5 5,0 \\\n        -3 3,$extbp \\\n        -j -x -v 1 -g \\\n        -t $thread \\\n        -O ${params.run}.e$extbp \\\n        ${params.run}.${pairlabel}.${pair_suffix}.nr.bam \\\n        1>${params.run}.2.log \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} $pairlabel cpu clustering.. >> ${params.run}.2.log\"\n\n    mv ${params.run}.e500.clusters.cis.chiasig.gz ${params.run}.e500.clusters.cis.gz\n    mv ${params.run}.e500.clusters.trans.chiasig.gz ${params.run}.e500.clusters.trans.gz\n\n    zcat ${cis_file} | awk '{ if ( \\$7 >= 3 ) print }' > ${be3_file}\n    zcat ${cis_file} | awk '{ if ( \\$7 >= 2 ) print }' > ${be2_file}\n\n    \"\"\"\n}",
        "nb_lignes_process": 120,
        "string_script": "    log.info \"----- Mapping on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.2.log\n    echo \"--- Mapping Starts ---\" >> ${params.run}.2.log\n    echo \"`date`\" >> ${params.run}.2.log\n  \n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.2.log\n    echo  \"Mapping paired tags ..\" >> ${params.run}.2.log\n\n    cpu memaln -T ${pair_map_qual} \\\n        -t $thread \\\n        ${params.bwaIndex}.fa \\\n        ${params.run}.${pairlabel}.fastq.gz 1>${params.run}.${pairlabel}.sam \\\n        2>> ${params.run}.2.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.${pairlabel}.sam \\\n        >> ${params.run}.2.log \\\n        2>&1\n\n    echo \"ENDED pair mapping\" >> ${params.run}.2.log\n\n    echo  \"STARTED ${sampleID} cpu pair .. >> ${params.run}.2.log\"\n    echo  \"Pairing paired tags .. >> ${params.run}.2.log\"\n\n    cpu pair -S -q 30 -s ${selfbp} \\\n        -t $thread \\\n        ${params.run}.${pairlabel}.sam.gz \\\n        1>${params.run}.${pairlabel}.stat.xls \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} cpu pair .. >> ${params.run}.2.log\"\n    \n    echo  \"STARTED ${sampleID} cpu span .. >> ${params.run}.2.log\"\n    echo  \"Computing span of paired tags .. >> ${params.run}.2.log\"\n\n    cpu span -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${pairlabel}.${pair_suffix}.bam \\\n        1>${params.run}.${pairlabel}.${pair_suffix}.span.xls \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} span pair .. >> ${params.run}.2.log\"\n    \n    echo  \"STARTED ${sampleID} cpu dedup .. >> ${params.run}.2.log\"\n    echo  \"De-duplicating paired tags UU .. >> ${params.run}.2.log\"\n\n    cpu dedup -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${pairlabel}.${pair_suffix}.bam \\\n        1>${params.run}.${pairlabel}.${pair_suffix}.dedup.lc \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} cpu dedup .. >> ${params.run}.2.log\"    \n\n    echo  \"STARTED ${sampleID} cpu dedup span.. >> ${params.run}.2.log\"\n    echo  \"Computing span of paired tags UU nr .. >> ${params.run}.2.log\"\n\n    cpu span \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${pairlabel}.${pair_suffix}.nr.bam \\\n        1>${params.run}.${pairlabel}.${pair_suffix}.nr.span.xls \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} cpu dedup span.. >> ${params.run}.2.log\"\n\n    cpu cluster \\\n        -m -s ${selfbp} \\\n        -B 1000 -5 5,0 \\\n        -3 3,$extbp \\\n        -j -x -v 1 -g \\\n        -t $thread \\\n        -O ${params.run}.e$extbp \\\n        ${params.run}.${pairlabel}.${pair_suffix}.nr.bam \\\n        1>${params.run}.2.log \\\n        2>> ${params.run}.2.log\n\n    echo  \"ENDED ${sampleID} $pairlabel cpu clustering.. >> ${params.run}.2.log\"\n\n    mv ${params.run}.e500.clusters.cis.chiasig.gz ${params.run}.e500.clusters.cis.gz\n    mv ${params.run}.e500.clusters.trans.chiasig.gz ${params.run}.e500.clusters.trans.gz\n\n    zcat ${cis_file} | awk '{ if ( \\$7 >= 3 ) print }' > ${be3_file}\n    zcat ${cis_file} | awk '{ if ( \\$7 >= 2 ) print }' > ${be2_file}\n\n    \"\"\"",
        "nb_lignes_script": 86,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "linker_pe_fq",
            "log_cpuprg"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "xls_pe_bam",
            "xls_nrpe_bam",
            "cluster_gz",
            "log_map",
            "log_map_dedup",
            "log_map_gz",
            "log_map_stat",
            "log_map_BE",
            "log_map_pe"
        ],
        "nb_outputs": 10,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'cpuprg'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.span.xls\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.dedup.lc\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.juice.gz\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.stat.xls\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.trans.gz\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.BE*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bam2pairs_juicer": {
        "name_process": "bam2pairs_juicer",
        "string_process": "\nprocess bam2pairs_juicer {\n    tag \"$sampleID\"\n    label 'tools'\n    label \"$resource\"\n    \n    publishDir \"${sample_outdir}\", pattern: \"*qcseq_pairs.hic\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.px2\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.pairs.gz\", mode: 'copy'\n\n    input:\n    tuple sampleID, file(pebam) from map_pe_bam1\n    tuple sampleID, file(logtxt) from log_map_pe\n\n    output:\n    tuple sampleID, file(\"*${sampleID}*qcseq_pairs.hic\") \\\n          into ( juicer_hic )\n\n    tuple sampleID, file(\"*.3.log\") into log_juicer\n    tuple sampleID, file(\"*qcseq_pairs.hic\") into hic_juicer\n    tuple sampleID, file(\"*.pairs.gz\") into log_map_pairgz\n    tuple sampleID, file(\"*.px2\") into log_map_px2\n\n    script:\n    log.info \"----- Running bam2pairs & Juicer  on ${sampleID} -----\"\n    \"\"\"\n    bam2pairs -c ${params.bwaIndex}.chrom.sizes ${pebam} ${params.run}\n    cp ${logtxt} ${params.run}.3.log\n    echo \"--- Juicer Starts ---\" >> ${params.run}.3.log\n    echo \"`date`\" >> ${params.run}.3.log\n\n    java -Xmx16g -jar /usr/local/bin/juicer_tools.jar pre -r \\\n        2500000,1000000,500000,250000,100000,50000,25000,10000,5000,1000 \\\n        ${params.run}.bsorted.pairs.gz ${hic_file} ${params.bwaIndex}.chrom.sizes >> ${params.run}.3.log\n \n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    log.info \"----- Running bam2pairs & Juicer  on ${sampleID} -----\"\n    \"\"\"\n    bam2pairs -c ${params.bwaIndex}.chrom.sizes ${pebam} ${params.run}\n    cp ${logtxt} ${params.run}.3.log\n    echo \"--- Juicer Starts ---\" >> ${params.run}.3.log\n    echo \"`date`\" >> ${params.run}.3.log\n\n    java -Xmx16g -jar /usr/local/bin/juicer_tools.jar pre -r \\\n        2500000,1000000,500000,250000,100000,50000,25000,10000,5000,1000 \\\n        ${params.run}.bsorted.pairs.gz ${hic_file} ${params.bwaIndex}.chrom.sizes >> ${params.run}.3.log\n \n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "map_pe_bam1",
            "log_map_pe"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "log_juicer",
            "hic_juicer",
            "log_map_pairgz",
            "log_map_px2"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'tools'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*qcseq_pairs.hic\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.px2\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.pairs.gz\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "map_single": {
        "name_process": "map_single",
        "string_process": "\nprocess map_single {\n    tag \"$sampleID\"\n    label 'cpuprg'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.span.xls\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.stat.xls\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.dedup.lc\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(fqse) from linker_se_fq\n    tuple sampleID, file(logtxt) from log_juicer\n\n    output:\n    tuple sampleID, file(\"${sampleID}.${singlabel}.sam*\") \\\n          into ( map_se_sam )\n    tuple sampleID, file(\"${sampleID}.${singlabel}.${single_suffix}.nr.bam\") \\\n          into ( map_se_bam )\n\n    tuple sampleID, file(\"*.4.log\") into log_map_se\n    tuple sampleID, file(\"*.xls\") into log_map_se_xls\n    tuple sampleID, file(\"*.dedup.lc\") into log_map_se_dedup\n\n    script:\n    log.info \"-----Mapping Single on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.4.log\n    echo \"--- Mapping Single Starts ---\" >> ${params.run}.4.log\n    echo \"`date`\" >> ${params.run}.4.log\n\n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.4.log\n    echo  \"Mapping single tag ..\" >> ${params.run}.4.log\n\n    cpu memaln -T ${single_map_qual} \\\n        -t $thread \\\n        ${params.bwaIndex}.fa \\\n        ${params.run}.${singlabel}.fastq.gz 1>${params.run}.${singlabel}.sam \\\n        2>> ${params.run}.4.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.${singlabel}.sam \\\n        >> ${params.run}.4.log \\\n        2>&1\n\n    echo \"ENDED single mapping\" >> ${params.run}.4.log\n\n    cpu pair -S -q ${single_map_qual} -s ${selfbp} \\\n        -t $thread \\\n        ${params.run}.${singlabel}.sam.gz \\\n        1>${params.run}.${singlabel}.stat.xls \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} cpu pair .. >> ${params.run}.4.log\"\n\n    echo  \"STARTED ${sampleID} cpu span .. >> ${params.run}.4.log\"\n    echo  \"Computing span of single tag .. >> ${params.run}.4.log\"\n\n    cpu span -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${singlabel}.${single_suffix}.bam \\\n        1>${params.run}.${singlabel}.${single_suffix}.span.xls \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} span single .. >> ${params.run}.4.log\"\n\n    echo  \"STARTED ${sampleID} $singlabel cpu dedup .. >> ${params.run}.4.log\"\n    echo  \"De-duplicating single tag $singlabel .. >> ${params.run}.4.log\"\n\n    cpu dedup -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${singlabel}.${single_suffix}.bam \\\n        1>${params.run}.${singlabel}.${single_suffix}.dedup.lc \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} $singlabel cpu dedup .. >> ${params.run}.4.log\"\n\n    echo  \"STARTED ${sampleID} cpu dedup span.. >> ${params.run}.4.log\"\n    echo  \"Computing span of single tag $singlabel nr .. >> ${params.run}.4.log\"\n\n    cpu span \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${singlabel}.${single_suffix}.nr.bam \\\n        1>${params.run}.${singlabel}.${single_suffix}.nr.span.xls \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} $singlabel cpu dedup span.. >> ${params.run}.4.log\"\n\n    \"\"\"\n}",
        "nb_lignes_process": 89,
        "string_script": "    log.info \"-----Mapping Single on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.4.log\n    echo \"--- Mapping Single Starts ---\" >> ${params.run}.4.log\n    echo \"`date`\" >> ${params.run}.4.log\n\n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.4.log\n    echo  \"Mapping single tag ..\" >> ${params.run}.4.log\n\n    cpu memaln -T ${single_map_qual} \\\n        -t $thread \\\n        ${params.bwaIndex}.fa \\\n        ${params.run}.${singlabel}.fastq.gz 1>${params.run}.${singlabel}.sam \\\n        2>> ${params.run}.4.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.${singlabel}.sam \\\n        >> ${params.run}.4.log \\\n        2>&1\n\n    echo \"ENDED single mapping\" >> ${params.run}.4.log\n\n    cpu pair -S -q ${single_map_qual} -s ${selfbp} \\\n        -t $thread \\\n        ${params.run}.${singlabel}.sam.gz \\\n        1>${params.run}.${singlabel}.stat.xls \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} cpu pair .. >> ${params.run}.4.log\"\n\n    echo  \"STARTED ${sampleID} cpu span .. >> ${params.run}.4.log\"\n    echo  \"Computing span of single tag .. >> ${params.run}.4.log\"\n\n    cpu span -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${singlabel}.${single_suffix}.bam \\\n        1>${params.run}.${singlabel}.${single_suffix}.span.xls \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} span single .. >> ${params.run}.4.log\"\n\n    echo  \"STARTED ${sampleID} $singlabel cpu dedup .. >> ${params.run}.4.log\"\n    echo  \"De-duplicating single tag $singlabel .. >> ${params.run}.4.log\"\n\n    cpu dedup -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${singlabel}.${single_suffix}.bam \\\n        1>${params.run}.${singlabel}.${single_suffix}.dedup.lc \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} $singlabel cpu dedup .. >> ${params.run}.4.log\"\n\n    echo  \"STARTED ${sampleID} cpu dedup span.. >> ${params.run}.4.log\"\n    echo  \"Computing span of single tag $singlabel nr .. >> ${params.run}.4.log\"\n\n    cpu span \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${singlabel}.${single_suffix}.nr.bam \\\n        1>${params.run}.${singlabel}.${single_suffix}.nr.span.xls \\\n        2>> ${params.run}.4.log\n\n    echo  \"ENDED ${sampleID} $singlabel cpu dedup span.. >> ${params.run}.4.log\"\n\n    \"\"\"",
        "nb_lignes_script": 64,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "linker_se_fq",
            "log_juicer"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "",
            "log_map_se",
            "log_map_se_xls",
            "log_map_se_dedup"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'cpuprg'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.span.xls\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.stat.xls\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.dedup.lc\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "map_none": {
        "name_process": "map_none",
        "string_process": "\nprocess map_none {\n    tag \"$sampleID\"\n    label 'cpuprg'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.span.xls\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.stat.xls\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.dedup.lc\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(fqno) from none_fq \n    tuple sampleID, file(logtxt) from log_map_se\n\n    output:\n    tuple sampleID, file(\"${sampleID}.none.sam*\") \\\n          into ( map_no_sam )\n    tuple sampleID, file(\"${sampleID}.${nonelabel}.${none_suffix}.nr.bam\") \\\n          into ( map_no_bam )\n\n    tuple sampleID, file(\"*.5.log\") into log_map_no\n    tuple sampleID, file(\"*.xls\") into log_map_no_xls\n    tuple sampleID, file(\"*.dedup.lc\") into log_map_no_dedup\n\n    script:\n    log.info \"-----Mapping None on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.5.log\n    mv ${logtxt} ${logtxt}.old\n    mv ${logtxt}.old ${params.run}.5.log\n    rm -rf ${logtxt}.old \n    echo \"--- Mapping None Starts ---\" >> ${params.run}.5.log\n    echo \"`date`\" >> ${params.run}.5.log\n\n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.5.log\n    echo  \"Mapping None tag ..\" >> ${params.run}.5.log\n\n    cpu memaln -T ${none_map_qual} \\\n        -t $thread \\\n        ${params.bwaIndex}.fa \\\n        ${params.run}.${nonelabel}.fastq.gz 1>${params.run}.${nonelabel}.sam \\\n        2>> ${params.run}.5.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.${nonelabel}.sam \\\n        >> ${params.run}.5.log \\\n        2>&1\n\n    echo \"ENDED single mapping\" >> ${params.run}.5.log\n    echo  \"STARTED Pairing ${sampleID} $nonelabel tag .. >> ${params.run}.5.log\"\n\n    cpu pair -S -q ${none_map_qual} -s ${selfbp} \\\n        -t $thread \\\n        ${params.run}.${nonelabel}.sam.gz \\\n        1>${params.run}.${nonelabel}.stat.xls \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel cpu pair .. >> ${params.run}.5.log\"\n\n    echo  \"STARTED ${sampleID} $nonelabel cpu span .. >> ${params.run}.5.log\"\n    echo  \"Computing span of None tag .. >> ${params.run}.5.log\"\n\n    cpu span -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${nonelabel}.${none_suffix}.bam \\\n        1>${params.run}.${nonelabel}.${none_suffix}.span.xls \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel span single .. >> ${params.run}.5.log\"\n\n    echo  \"STARTED ${sampleID} $nonelabel cpu dedup .. >> ${params.run}.5.log\"\n    echo  \"De-duplicating None tag $nonelabel .. >> ${params.run}.5.log\"\n\n    cpu dedup -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${nonelabel}.${none_suffix}.bam \\\n        1>${params.run}.${nonelabel}.${none_suffix}.dedup.lc \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel cpu dedup .. >> ${params.run}.5.log\"\n\n    echo  \"STARTED ${sampleID} $nonelabel cpu dedup span.. >> ${params.run}.5.log\"\n    echo  \"Computing span of None tag $nonelabel nr .. >> ${params.run}.5.log\"\n\n    cpu span \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${nonelabel}.${none_suffix}.nr.bam \\\n        1>${params.run}.${nonelabel}.${none_suffix}.nr.span.xls \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel cpu dedup span.. >> ${params.run}.5.log\"\n\n    \"\"\"\n}",
        "nb_lignes_process": 94,
        "string_script": "    log.info \"-----Mapping None on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.5.log\n    mv ${logtxt} ${logtxt}.old\n    mv ${logtxt}.old ${params.run}.5.log\n    rm -rf ${logtxt}.old \n    echo \"--- Mapping None Starts ---\" >> ${params.run}.5.log\n    echo \"`date`\" >> ${params.run}.5.log\n\n    echo \"START  ${sampleID} cpu memaln ..\" >> ${params.run}.5.log\n    echo  \"Mapping None tag ..\" >> ${params.run}.5.log\n\n    cpu memaln -T ${none_map_qual} \\\n        -t $thread \\\n        ${params.bwaIndex}.fa \\\n        ${params.run}.${nonelabel}.fastq.gz 1>${params.run}.${nonelabel}.sam \\\n        2>> ${params.run}.5.log\n\n    pigz -p \\\n        $thread \\\n        ${params.run}.${nonelabel}.sam \\\n        >> ${params.run}.5.log \\\n        2>&1\n\n    echo \"ENDED single mapping\" >> ${params.run}.5.log\n    echo  \"STARTED Pairing ${sampleID} $nonelabel tag .. >> ${params.run}.5.log\"\n\n    cpu pair -S -q ${none_map_qual} -s ${selfbp} \\\n        -t $thread \\\n        ${params.run}.${nonelabel}.sam.gz \\\n        1>${params.run}.${nonelabel}.stat.xls \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel cpu pair .. >> ${params.run}.5.log\"\n\n    echo  \"STARTED ${sampleID} $nonelabel cpu span .. >> ${params.run}.5.log\"\n    echo  \"Computing span of None tag .. >> ${params.run}.5.log\"\n\n    cpu span -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${nonelabel}.${none_suffix}.bam \\\n        1>${params.run}.${nonelabel}.${none_suffix}.span.xls \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel span single .. >> ${params.run}.5.log\"\n\n    echo  \"STARTED ${sampleID} $nonelabel cpu dedup .. >> ${params.run}.5.log\"\n    echo  \"De-duplicating None tag $nonelabel .. >> ${params.run}.5.log\"\n\n    cpu dedup -g \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${nonelabel}.${none_suffix}.bam \\\n        1>${params.run}.${nonelabel}.${none_suffix}.dedup.lc \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel cpu dedup .. >> ${params.run}.5.log\"\n\n    echo  \"STARTED ${sampleID} $nonelabel cpu dedup span.. >> ${params.run}.5.log\"\n    echo  \"Computing span of None tag $nonelabel nr .. >> ${params.run}.5.log\"\n\n    cpu span \\\n        -t $thread -s ${selfbp} \\\n        ${params.run}.${nonelabel}.${none_suffix}.nr.bam \\\n        1>${params.run}.${nonelabel}.${none_suffix}.nr.span.xls \\\n        2>> ${params.run}.5.log\n\n    echo  \"ENDED ${sampleID} $nonelabel cpu dedup span.. >> ${params.run}.5.log\"\n\n    \"\"\"",
        "nb_lignes_script": 68,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "none_fq",
            "log_map_se"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "",
            "log_map_no",
            "log_map_no_xls",
            "log_map_no_dedup"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'cpuprg'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.span.xls\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.stat.xls\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.dedup.lc\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_format": {
        "name_process": "convert_format",
        "string_process": "\nprocess convert_format {\n    tag \"$sampleID\"\n    label 'samtools'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.BROWSER.bam*\", mode: 'copy'\n\n    input:\n    tuple sampleID, file(pebam) from map_pe_bam\n    tuple sampleID, file(sebam) from map_se_bam\n    tuple sampleID, file(nobam) from map_no_bam\n\n    output:\n    tuple sampleID, file(\"${sampleID}.for.BROWSER.bam\") \\\n          into ( cvt_fmt_bam, cvt_fmt_bam1 )\n    tuple sampleID, file(\"${sampleID}.for.BROWSER.bam.bai\") \\\n          into ( cvt_fmt_bai, cvt_fmt_bai1 )\n    file(\"nr.tag.txt\") into cvt_fmt_tag\n    tuple sampleID, file(\"*.BROWSER.bam*\") into log_cvt_fmt_bam\n\n    script:\n    log.info \"-----Converting file formats on ${sampleID} -----\"\n    \"\"\"\n    samtools view \\\n        -F 2048 -h ${pebam} \\\n        | awk 'length(\\$10) > 30 || \\$1 ~ /^@/' \\\n        | samtools sort -@ 16 - -o ${params.run}.${pairlabel}.${pair_suffix}.nr.sorted.bam\n\n    samtools view \\\n        -F 2048 -h ${sebam} \\\n        | awk 'length(\\$10) > 30 || \\$1 ~ /^@/' \\\n        | samtools sort -@ 16 - -o ${params.run}.${singlabel}.${single_suffix}.nr.sorted.bam\n\n    samtools view \\\n        -F 2048 -h ${nobam} \\\n        | awk 'length(\\$10) > 30 || \\$1 ~ /^@/' \\\n        | samtools sort -@ 16 - -o ${params.run}.${nonelabel}.${none_suffix}.nr.sorted.bam\n\n    samtools merge ${sampleID}.for.BROWSER.bam \\\n        ${params.run}.${pairlabel}.${pair_suffix}.nr.sorted.bam \\\n        ${params.run}.${singlabel}.${single_suffix}.nr.sorted.bam \\\n        ${params.run}.${nonelabel}.${none_suffix}.nr.sorted.bam\n\n    samtools index ${sampleID}.for.BROWSER.bam ${sampleID}.for.BROWSER.bam.bai\n\n    samtools view \\\n        -c ${sampleID}.for.BROWSER.bam \\\n        | numfmt --g >nr.tag.txt\n\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    log.info \"-----Converting file formats on ${sampleID} -----\"\n    \"\"\"\n    samtools view \\\n        -F 2048 -h ${pebam} \\\n        | awk 'length(\\$10) > 30 || \\$1 ~ /^@/' \\\n        | samtools sort -@ 16 - -o ${params.run}.${pairlabel}.${pair_suffix}.nr.sorted.bam\n\n    samtools view \\\n        -F 2048 -h ${sebam} \\\n        | awk 'length(\\$10) > 30 || \\$1 ~ /^@/' \\\n        | samtools sort -@ 16 - -o ${params.run}.${singlabel}.${single_suffix}.nr.sorted.bam\n\n    samtools view \\\n        -F 2048 -h ${nobam} \\\n        | awk 'length(\\$10) > 30 || \\$1 ~ /^@/' \\\n        | samtools sort -@ 16 - -o ${params.run}.${nonelabel}.${none_suffix}.nr.sorted.bam\n\n    samtools merge ${sampleID}.for.BROWSER.bam \\\n        ${params.run}.${pairlabel}.${pair_suffix}.nr.sorted.bam \\\n        ${params.run}.${singlabel}.${single_suffix}.nr.sorted.bam \\\n        ${params.run}.${nonelabel}.${none_suffix}.nr.sorted.bam\n\n    samtools index ${sampleID}.for.BROWSER.bam ${sampleID}.for.BROWSER.bam.bai\n\n    samtools view \\\n        -c ${sampleID}.for.BROWSER.bam \\\n        | numfmt --g >nr.tag.txt\n\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "map_pe_bam",
            "map_se_bam",
            "map_no_bam"
        ],
        "nb_inputs": 3,
        "outputs": [
            "",
            "",
            "cvt_fmt_tag",
            "log_cvt_fmt_bam"
        ],
        "nb_outputs": 4,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'samtools'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.BROWSER.bam*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_bedgraph": {
        "name_process": "make_bedgraph",
        "string_process": "\nprocess make_bedgraph {\n    tag \"$sampleID\"\n    label 'cpuprg'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.sorted.bedgraph\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(brbam) from cvt_fmt_bam\n    tuple sampleID, file(brbai) from cvt_fmt_bai \n    tuple sampleID, file(logtxt) from log_map_no\n\n    output:\n    tuple sampleID, file(\"${sampleID}.for.BROWSER.sorted*\") \\\n          into ( mk_bg_bed )\n    tuple sampleID, file(\"*.6.log\") into (log_mk_bg1, log_mk_bg2)\n\n    script:\n    log.info \"-----Making bedgraph on ${sampleID} -----\"\n    if(params.blackList != \"none\")\n      \"\"\"\n      cp ${logtxt} ${params.run}.6.log\n      bedtools genomecov \\\n         -ibam ${brbam} \\\n         -bg > ${params.run}.for.BROWSER.bedgraph\n\n      echo \"--- Removing blacklist ---\" >> ${params.run}.6.log\n      echo \"`date`\" >> ${params.run}.6.log\n      \n      mv ${params.run}.for.BROWSER.bedgraph ${params.run}.for.BROWSER.orig.bedgraph\n\n      bedtools subtract \\\n         -a ${params.run}.for.BROWSER.orig.bedgraph \\\n         -b ${params.blackList} > ${params.run}.for.BROWSER.bedgraph\n\n      bedSort \\\n         ${params.run}.for.BROWSER.bedgraph \\\n         ${params.run}.for.BROWSER.sorted.bedgraph\n      \"\"\"\n     else\n      \"\"\"\n      cp ${logtxt} ${params.run}.6.log\n      bedtools genomecov \\\n         -ibam ${brbam} \\\n         -bg > ${params.run}.for.BROWSER.bedgraph\n\n      bedSort \\\n         ${params.run}.for.BROWSER.bedgraph \\\n         ${params.run}.for.BROWSER.sorted.bedgraph\n      \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    log.info \"-----Making bedgraph on ${sampleID} -----\"\n    if(params.blackList != \"none\")\n      \"\"\"\n      cp ${logtxt} ${params.run}.6.log\n      bedtools genomecov \\\n         -ibam ${brbam} \\\n         -bg > ${params.run}.for.BROWSER.bedgraph\n\n      echo \"--- Removing blacklist ---\" >> ${params.run}.6.log\n      echo \"`date`\" >> ${params.run}.6.log\n      \n      mv ${params.run}.for.BROWSER.bedgraph ${params.run}.for.BROWSER.orig.bedgraph\n\n      bedtools subtract \\\n         -a ${params.run}.for.BROWSER.orig.bedgraph \\\n         -b ${params.blackList} > ${params.run}.for.BROWSER.bedgraph\n\n      bedSort \\\n         ${params.run}.for.BROWSER.bedgraph \\\n         ${params.run}.for.BROWSER.sorted.bedgraph\n      \"\"\"\n     else\n      \"\"\"\n      cp ${logtxt} ${params.run}.6.log\n      bedtools genomecov \\\n         -ibam ${brbam} \\\n         -bg > ${params.run}.for.BROWSER.bedgraph\n\n      bedSort \\\n         ${params.run}.for.BROWSER.bedgraph \\\n         ${params.run}.for.BROWSER.sorted.bedgraph\n      \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "cvt_fmt_bam",
            "cvt_fmt_bai",
            "log_map_no"
        ],
        "nb_inputs": 3,
        "outputs": [
            "",
            ""
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'cpuprg'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.sorted.bedgraph\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_bigwig": {
        "name_process": "make_bigwig",
        "string_process": "\nprocess make_bigwig {\n    tag \"$sampleID\"\n    label 'kentUtils'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.bigwig\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(srbam) from mk_bg_bed\n    tuple sampleID, file(brbai) from cvt_fmt_bai\n\n    output:\n    tuple sampleID, file(\"${sampleID}.for.BROWSER.bigwig*\") \\\n          into ( bg2bw_bw )\n\n    script:\n    log.info \"-----Making bigwig on ${sampleID} -----\"\n    \"\"\"\n    bedGraphToBigWig \\\n       ${srbam} \\\n       ${params.bwaIndex}.chrom.sizes \\\n       ${params.run}.for.BROWSER.bigwig \n    \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    log.info \"-----Making bigwig on ${sampleID} -----\"\n    \"\"\"\n    bedGraphToBigWig \\\n       ${srbam} \\\n       ${params.bwaIndex}.chrom.sizes \\\n       ${params.run}.for.BROWSER.bigwig \n    \n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "mk_bg_bed",
            "cvt_fmt_bai"
        ],
        "nb_inputs": 2,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'kentUtils'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.bigwig\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "call_peak_spp": {
        "name_process": "call_peak_spp",
        "string_process": "\nprocess call_peak_spp {\n    tag \"$sampleID\"\n    label 'spp'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'\n    publishDir \"${sample_outdir}\", pattern: \"*.broadPeak\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(brbam) from cvt_fmt_bam1\n    tuple sampleID, file(brbai) from cvt_fmt_bai1 \n    tuple sampleID, file(logtxt) from log_mk_bg1\n\n    output:\n    tuple sampleID, file(\"${params.run}.log\") into log_spp\n    tuple sampleID, file(\"${sampleID}.for.BROWSER*broadPeak\") \\\n          into ( spp_peak )\n\n    when: 'spp' in params.peakCaller || 'SPP' in params.peakCaller\n\n    script:\n    log.info \"-----Calling peaks on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.log\n    Rscript ${projectDir}/bin/spp_sumner.R \\\n        ${brbam} \\\n        ${params.inputCtrl} \\\n        . 6 >> ${params.run}.log\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    log.info \"-----Calling peaks on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.log\n    Rscript ${projectDir}/bin/spp_sumner.R \\\n        ${brbam} \\\n        ${params.inputCtrl} \\\n        . 6 >> ${params.run}.log\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cvt_fmt_bam1",
            "cvt_fmt_bai1",
            "log_mk_bg1"
        ],
        "nb_inputs": 3,
        "outputs": [
            "log_spp",
            ""
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'spp'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.broadPeak\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "call_peak_macs2": {
        "name_process": "call_peak_macs2",
        "string_process": "\nprocess call_peak_macs2 {\n    tag \"$sampleID\"\n    label 'macs2'\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.narrowPeak\", mode: 'copy' \n\n    input:\n    tuple sampleID, file(brbam) from cvt_fmt_bam1\n    tuple sampleID, file(brbai) from cvt_fmt_bai1 \n    tuple sampleID, file(logtxt) from log_mk_bg2\n\n    output:\n    tuple sampleID, file(\"*.log\") into log_macs2\n    tuple sampleID, file(\"${sampleID}.no_input_all*\") \\\n          into ( macs2_peak )\n\n    when: 'macs2' in params.peakCaller\n\n    script:\n    log.info \"-----Calling peaks on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.log\n    macs2 callpeak \\\n           --keep-dup all \\\n           --nomodel -t \\\n           ${brbam} \\\n           -f BAM -g hs -n \\\n           ${params.run}.no_input_all \\\n           1>> ${params.run}.log \\\n           2>> ${params.run}.log\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    log.info \"-----Calling peaks on ${sampleID} -----\"\n    \"\"\"\n    cp ${logtxt} ${params.run}.log\n    macs2 callpeak \\\n           --keep-dup all \\\n           --nomodel -t \\\n           ${brbam} \\\n           -f BAM -g hs -n \\\n           ${params.run}.no_input_all \\\n           1>> ${params.run}.log \\\n           2>> ${params.run}.log\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cvt_fmt_bam1",
            "cvt_fmt_bai1",
            "log_mk_bg2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "log_macs2",
            ""
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label 'macs2'",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.narrowPeak\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "final_stats": {
        "name_process": "final_stats",
        "string_process": "\nprocess final_stats {\n    tag \"$sampleID\"\n    label \"$resource\"\n\n    publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy' \n    publishDir \"${sample_outdir}\", pattern: \"*.final_stats.tsv\", mode: 'copy'\n\n    input:\n    tuple sampleID, file(stat) from stat_cpuprg\n    tuple sampleID, file(xls) from xls_pe_bam\n    tuple sampleID, file(nrxls) from xls_nrpe_bam\n    file(nrtag) from cvt_fmt_tag\n    tuple sampleID, file(peak) from input_peak\n    tuple sampleID, file(cluster) from cluster_gz\n    file seqList from ch_seq.collect()\n\n    output:\n    tuple sampleID, file(\"${out_file}\") \\\n          into ( final_st )\n\n    script:\n    log.info \"----- Getting final stats on ${sampleID} -----\"\n    n_read_pair=\"\\$(cat ${stat} | grep 'Total pairs' | awk -F'[ \\t]' '{print \\$3}')\"\n    read_pair_link=\"\\$(cat ${stat} | grep 'Linker detected' | awk -F '[ \\t]' '{print \\$3}')\"\n    frac_link=\"\\$(echo -e \\\"${read_pair_link}/${n_read_pair}\\\" | bc -l | xargs printf \\\"%.2f\\n\\\")\"\n    n_read_pair=\"\\$(printf \\\"%'.f\\n\\\" ${n_read_pair})\"\n    read_pair_link=\"\\$(printf \\\"%'.f\\n\\\" ${read_pair_link})\"\n    one_tag=\"\\$(grep 'Single Linker 1 tag (SL/ls)' ${stat} | cut -f2)\"\n    two_tag=\"\\$(grep 'Single Linker 2 tags (SL/ls)' ${stat} | cut -f2)\"\n    one_tag=\"\\$(printf \\\"%'.f\\n\\\" ${one_tag})\"\n    two_tag=\"\\$(printf \\\"%'.f\\n\\\" ${two_tag})\"\n    unique=\"\\$(cat ${xls} | grep 'Total pairs' | awk -F '[\\t]' '{print \\$2}')\"\n    nr=\"\\$(cat ${nrxls} | grep 'Total pairs' | awk -F '[\\t]' '{print \\$2}')\"\n    redun=\"\\$(echo \\\"(${unique} - ${nr})/${unique}\\\" | bc -l)\"\n    unique=\"\\$(printf \\\"%'.f\\\" ${unique})\"\n    nr=\"\\$(printf \\\"%'.f\\\" ${nr})\"\n    redun=\"\\$(printf \\\"%'.2f\\\" ${redun})\"\n    nr_tag=\"\\$(cat ${nrtag})\"\n    nr_tag=\"\\$(printf \\\"%'.f\\\" ${nr_tag})\"\n    n_peak=\"\\$(cat ${peak} | wc -l)\"\n    n_peak=\"\\$(printf \\\"%'.f\\\" ${n_peak})\"\n    self_lig=\"\\$(cat ${nrxls} | grep \\\"second/best<0.95\\\" -A5 | awk -F '[\\t]' '{if(NR==4)print \\$2}')\"\n    self_lig=\"\\$(printf \\\"%'.f\\\" ${self_lig})\"\n    intra_chr_pet=\"\\$(cat ${nrxls} | grep \\\"second/best<0.95\\\" -A5 | awk -F '[\\t]' '{if(NR==5)print \\$2}')\"\n    inter_chr_pet=\"\\$(cat ${nrxls} | grep \\\"second/best<0.95\\\" -A5 | awk -F '[\\t]' '{if(NR==2)print \\$2}')\"\n    pet_ratio=\"\\$(echo \\\"${intra_chr_pet}/${inter_chr_pet}\\\" | bc -l)\"\n    inter_lig_all=\"\\$(echo \\\"${intra_chr_pet} + ${inter_chr_pet}\\\" | bc)\"\n    inter_lig_all=\"\\$(printf \\\"%'.f\\\" ${inter_lig_all})\"\n    intra_chr_pet=\"\\$(printf \\\"%'.f\\\" ${intra_chr_pet})\"\n    inter_chr_pet=\"\\$(printf \\\"%'.f\\\" ${inter_chr_pet})\"\n    pet_ratio=\"\\$(printf \\\"%'.2f\\\" ${pet_ratio})\"\n    singleton=\"\\$(zcat $cluster | awk '\\$7==1{print}' | wc -l)\"\n    singleton=\"\\$(printf \\\"%'.f\\\" ${singleton})\"\n    intra_singleton=\"\\$(zcat *cis.gz | awk '\\$7==1{print}' | wc -l)\"\n    intra_singleton=\"\\$(printf \\\"%'.f\\\" ${intra_singleton})\"\n    inter_singleton=\"\\$(zcat *trans.gz | awk '\\$7==1{print}' | wc -l)\"\n    inter_singleton=\"\\$(printf \\\"%'.f\\\" ${inter_singleton})\"\n    total_cluster_number=\"\\$(zcat $cluster | awk '\\$7 !=1{print}' | wc -l)\"\n    total_cluster_number=\"\\$(printf \\\"%'.f\\\" ${total_cluster_number})\"\n    intra_cluster=\"\\$(zcat *cis.gz | awk '\\$7 >=2 {print}' | wc -l)\"\n    inter_cluster=\"\\$(zcat *trans.gz | awk '\\$7 >=2 {print}'| wc -l)\"\n    cluster_ratio=\"\\$(echo \\\"${intra_cluster}/${inter_cluster}\\\" | bc -l)\"\n    cluster_ratio=\"\\$(printf \\\"%'.2f\\\" ${cluster_ratio})\"\n    intra_cluster=\"\\$(printf \\\"%'.f\\\" ${intra_cluster})\"\n    inter_cluster=\"\\$(printf \\\"%'.f\\\" ${inter_cluster})\"\n    \"\"\"\n    echo -e \"Library_ID\\t\"${params.run} >> ${out_file}\n    echo -e \"Library_type\\t\"${params.runType} >> ${out_file}\n    echo -e \"Reference_genome\\t\"${params.genome} >> ${out_file}\n    echo -e \"Cell_type\\t\"${params.cellType} >> ${out_file}\n    echo -e \"Factor\\t\"${params.ipFactor} >> ${out_file}\n    echo -e \"Contact-map_URL\\t\"${url} >> ${out_file}\n \n    echo -e \"Total_read_pairs\\t\"${n_read_pair} >> ${out_file}\n    echo -e \"Read_pairs_with_linker\\t\"${read_pair_link} >> ${out_file}\n    echo -e \"Fraction_read_pairs_with_linker\\t\"${frac_link} >> ${out_file}\n\n    echo -e \"One_tag\\t\"${one_tag} >> ${out_file}\n    echo -e \"PET\\t\"${two_tag} >> ${out_file}   \n\n    echo -e \"Uniquely_mapped_PET\\t\"${unique} >> ${out_file}\n    echo -e \"Non-redundant_PET\\t\"${nr} >> ${out_file}\n    echo -e \"Redundancy\\t\"${redun} >> ${out_file}\n    echo -e \"Non-redundant_tag\\t\"${nr_tag} >> ${out_file}\n    echo -e \"Peak\\t\"$n_peak >> ${out_file}\n\n    echo -e \"Self-ligation_PET\\t\"${self_lig} >> ${out_file}\n    echo -e \"Inter-ligation_PET\\t\"${inter_lig_all} >> ${out_file}\n    echo -e \"Intra-chr_PET\\t\"${intra_chr_pet} >> ${out_file}\n    echo -e \"Inter-chr_PET\\t\"${inter_chr_pet} >> ${out_file}\n    echo -e \"ratio_of_intra/inter_PET\\t\"${pet_ratio} >> ${out_file}\n\n    echo -e \"Singleton\\t\"$singleton >> ${out_file}\n    echo -e \"Intra-chr_singleton\\t\"$intra_singleton >> ${out_file}\n    echo -e \"Inter-chr_singleton\\t\"$inter_singleton >> ${out_file}\n\n    echo -e \"PET_cluster\\t\"${total_cluster_number} >> ${out_file}\n    echo -e \"ratio_of_intra/inter_cluster\\t\"${cluster_ratio} >> ${out_file}\n    echo -e \"Intra-chr_PET_cluster\\t\"${intra_cluster} >> ${out_file}\n\n    for content in ${seqList}\n    do\n        i=\\$(cat \\${content})\n        intra_pets_number=\\$(zcat *cis.gz | \\\n            awk -v cutoff=\\${i} '\\$7 == cutoff {print}' | wc -l | \\\n            xargs printf \"%'.f\")\n\n        echo -e \"pets_number_\"\\${i}\"\\t\"\\${intra_pets_number} >> ${out_file}\n    done\n\n    echo -e \"pets_number>10\\t\"\\$(zcat *cis.gz | \\\n    awk '\\$7 >10 {print}' | wc -l | xargs printf \"%'.f\") >> ${out_file}\n\n    echo -e \"Inter-chr_PET_cluster\\t\"${inter_cluster} >> ${out_file}\n\n    for content in ${seqList}\n    do\n        i=\\$(cat \\${content})\n        inter_pets_number=\\$(zcat *trans.gz | \\\n            awk -v cutoff=\\${i} '\\$7 == cutoff {print}' | wc -l | \\\n            xargs printf \"%'.f\")\n\n        echo -e \"pets_number_\"\\${i}\"\\t\"\\${inter_pets_number} >> ${out_file}\n    done\n\n    echo -e \"pets_number>10\\t\"\\$(zcat *trans.gz | \\\n    awk '\\$7 >10 {print}' | wc -l | xargs printf \"%'.f\") >> ${out_file}\n    \"\"\"\n}",
        "nb_lignes_process": 128,
        "string_script": "    log.info \"----- Getting final stats on ${sampleID} -----\"\n    n_read_pair=\"\\$(cat ${stat} | grep 'Total pairs' | awk -F'[ \\t]' '{print \\$3}')\"\n    read_pair_link=\"\\$(cat ${stat} | grep 'Linker detected' | awk -F '[ \\t]' '{print \\$3}')\"\n    frac_link=\"\\$(echo -e \\\"${read_pair_link}/${n_read_pair}\\\" | bc -l | xargs printf \\\"%.2f\\n\\\")\"\n    n_read_pair=\"\\$(printf \\\"%'.f\\n\\\" ${n_read_pair})\"\n    read_pair_link=\"\\$(printf \\\"%'.f\\n\\\" ${read_pair_link})\"\n    one_tag=\"\\$(grep 'Single Linker 1 tag (SL/ls)' ${stat} | cut -f2)\"\n    two_tag=\"\\$(grep 'Single Linker 2 tags (SL/ls)' ${stat} | cut -f2)\"\n    one_tag=\"\\$(printf \\\"%'.f\\n\\\" ${one_tag})\"\n    two_tag=\"\\$(printf \\\"%'.f\\n\\\" ${two_tag})\"\n    unique=\"\\$(cat ${xls} | grep 'Total pairs' | awk -F '[\\t]' '{print \\$2}')\"\n    nr=\"\\$(cat ${nrxls} | grep 'Total pairs' | awk -F '[\\t]' '{print \\$2}')\"\n    redun=\"\\$(echo \\\"(${unique} - ${nr})/${unique}\\\" | bc -l)\"\n    unique=\"\\$(printf \\\"%'.f\\\" ${unique})\"\n    nr=\"\\$(printf \\\"%'.f\\\" ${nr})\"\n    redun=\"\\$(printf \\\"%'.2f\\\" ${redun})\"\n    nr_tag=\"\\$(cat ${nrtag})\"\n    nr_tag=\"\\$(printf \\\"%'.f\\\" ${nr_tag})\"\n    n_peak=\"\\$(cat ${peak} | wc -l)\"\n    n_peak=\"\\$(printf \\\"%'.f\\\" ${n_peak})\"\n    self_lig=\"\\$(cat ${nrxls} | grep \\\"second/best<0.95\\\" -A5 | awk -F '[\\t]' '{if(NR==4)print \\$2}')\"\n    self_lig=\"\\$(printf \\\"%'.f\\\" ${self_lig})\"\n    intra_chr_pet=\"\\$(cat ${nrxls} | grep \\\"second/best<0.95\\\" -A5 | awk -F '[\\t]' '{if(NR==5)print \\$2}')\"\n    inter_chr_pet=\"\\$(cat ${nrxls} | grep \\\"second/best<0.95\\\" -A5 | awk -F '[\\t]' '{if(NR==2)print \\$2}')\"\n    pet_ratio=\"\\$(echo \\\"${intra_chr_pet}/${inter_chr_pet}\\\" | bc -l)\"\n    inter_lig_all=\"\\$(echo \\\"${intra_chr_pet} + ${inter_chr_pet}\\\" | bc)\"\n    inter_lig_all=\"\\$(printf \\\"%'.f\\\" ${inter_lig_all})\"\n    intra_chr_pet=\"\\$(printf \\\"%'.f\\\" ${intra_chr_pet})\"\n    inter_chr_pet=\"\\$(printf \\\"%'.f\\\" ${inter_chr_pet})\"\n    pet_ratio=\"\\$(printf \\\"%'.2f\\\" ${pet_ratio})\"\n    singleton=\"\\$(zcat $cluster | awk '\\$7==1{print}' | wc -l)\"\n    singleton=\"\\$(printf \\\"%'.f\\\" ${singleton})\"\n    intra_singleton=\"\\$(zcat *cis.gz | awk '\\$7==1{print}' | wc -l)\"\n    intra_singleton=\"\\$(printf \\\"%'.f\\\" ${intra_singleton})\"\n    inter_singleton=\"\\$(zcat *trans.gz | awk '\\$7==1{print}' | wc -l)\"\n    inter_singleton=\"\\$(printf \\\"%'.f\\\" ${inter_singleton})\"\n    total_cluster_number=\"\\$(zcat $cluster | awk '\\$7 !=1{print}' | wc -l)\"\n    total_cluster_number=\"\\$(printf \\\"%'.f\\\" ${total_cluster_number})\"\n    intra_cluster=\"\\$(zcat *cis.gz | awk '\\$7 >=2 {print}' | wc -l)\"\n    inter_cluster=\"\\$(zcat *trans.gz | awk '\\$7 >=2 {print}'| wc -l)\"\n    cluster_ratio=\"\\$(echo \\\"${intra_cluster}/${inter_cluster}\\\" | bc -l)\"\n    cluster_ratio=\"\\$(printf \\\"%'.2f\\\" ${cluster_ratio})\"\n    intra_cluster=\"\\$(printf \\\"%'.f\\\" ${intra_cluster})\"\n    inter_cluster=\"\\$(printf \\\"%'.f\\\" ${inter_cluster})\"\n    \"\"\"\n    echo -e \"Library_ID\\t\"${params.run} >> ${out_file}\n    echo -e \"Library_type\\t\"${params.runType} >> ${out_file}\n    echo -e \"Reference_genome\\t\"${params.genome} >> ${out_file}\n    echo -e \"Cell_type\\t\"${params.cellType} >> ${out_file}\n    echo -e \"Factor\\t\"${params.ipFactor} >> ${out_file}\n    echo -e \"Contact-map_URL\\t\"${url} >> ${out_file}\n \n    echo -e \"Total_read_pairs\\t\"${n_read_pair} >> ${out_file}\n    echo -e \"Read_pairs_with_linker\\t\"${read_pair_link} >> ${out_file}\n    echo -e \"Fraction_read_pairs_with_linker\\t\"${frac_link} >> ${out_file}\n\n    echo -e \"One_tag\\t\"${one_tag} >> ${out_file}\n    echo -e \"PET\\t\"${two_tag} >> ${out_file}   \n\n    echo -e \"Uniquely_mapped_PET\\t\"${unique} >> ${out_file}\n    echo -e \"Non-redundant_PET\\t\"${nr} >> ${out_file}\n    echo -e \"Redundancy\\t\"${redun} >> ${out_file}\n    echo -e \"Non-redundant_tag\\t\"${nr_tag} >> ${out_file}\n    echo -e \"Peak\\t\"$n_peak >> ${out_file}\n\n    echo -e \"Self-ligation_PET\\t\"${self_lig} >> ${out_file}\n    echo -e \"Inter-ligation_PET\\t\"${inter_lig_all} >> ${out_file}\n    echo -e \"Intra-chr_PET\\t\"${intra_chr_pet} >> ${out_file}\n    echo -e \"Inter-chr_PET\\t\"${inter_chr_pet} >> ${out_file}\n    echo -e \"ratio_of_intra/inter_PET\\t\"${pet_ratio} >> ${out_file}\n\n    echo -e \"Singleton\\t\"$singleton >> ${out_file}\n    echo -e \"Intra-chr_singleton\\t\"$intra_singleton >> ${out_file}\n    echo -e \"Inter-chr_singleton\\t\"$inter_singleton >> ${out_file}\n\n    echo -e \"PET_cluster\\t\"${total_cluster_number} >> ${out_file}\n    echo -e \"ratio_of_intra/inter_cluster\\t\"${cluster_ratio} >> ${out_file}\n    echo -e \"Intra-chr_PET_cluster\\t\"${intra_cluster} >> ${out_file}\n\n    for content in ${seqList}\n    do\n        i=\\$(cat \\${content})\n        intra_pets_number=\\$(zcat *cis.gz | \\\n            awk -v cutoff=\\${i} '\\$7 == cutoff {print}' | wc -l | \\\n            xargs printf \"%'.f\")\n\n        echo -e \"pets_number_\"\\${i}\"\\t\"\\${intra_pets_number} >> ${out_file}\n    done\n\n    echo -e \"pets_number>10\\t\"\\$(zcat *cis.gz | \\\n    awk '\\$7 >10 {print}' | wc -l | xargs printf \"%'.f\") >> ${out_file}\n\n    echo -e \"Inter-chr_PET_cluster\\t\"${inter_cluster} >> ${out_file}\n\n    for content in ${seqList}\n    do\n        i=\\$(cat \\${content})\n        inter_pets_number=\\$(zcat *trans.gz | \\\n            awk -v cutoff=\\${i} '\\$7 == cutoff {print}' | wc -l | \\\n            xargs printf \"%'.f\")\n\n        echo -e \"pets_number_\"\\${i}\"\\t\"\\${inter_pets_number} >> ${out_file}\n    done\n\n    echo -e \"pets_number>10\\t\"\\$(zcat *trans.gz | \\\n    awk '\\$7 >10 {print}' | wc -l | xargs printf \"%'.f\") >> ${out_file}\n    \"\"\"",
        "nb_lignes_script": 106,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "stat_cpuprg",
            "xls_pe_bam",
            "xls_nrpe_bam",
            "cvt_fmt_tag",
            "input_peak",
            "cluster_gz",
            "ch_seq"
        ],
        "nb_inputs": 7,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__ChIA-PIPE_nextflow",
        "directive": [
            "tag \"$sampleID\"",
            "label \"$resource\"",
            "publishDir \"${sample_outdir}\", pattern: \"*.log\", mode: 'copy'",
            "publishDir \"${sample_outdir}\", pattern: \"*.final_stats.tsv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "flye": {
        "name_process": "flye",
        "string_process": "\nprocess flye {\n\n                            \n  container \"${params.container__flye}\"\n  label \"mem_medium\"\n  errorStrategy 'retry'\n  maxRetries 3\n\n                                                                                                                             \n  publishDir \"${params.output_folder}\" \n  \n  input:\n    tuple val(name), file(reads) from input_ch\n\n                                                                                                                                                        \n  output:\n  file \"${name}/*\"\n\n\"\"\"\n#!/bin/bash\n\nset -e\n\ndf -h\necho \"\"\nls -lahtr\necho \"\"\necho \"STARTING FLYE\"\necho \"\"\n\nif [[ \"${params.asm_coverage}\" == \"0\" ]]; then\n\n    flye \\\n        --${params.read_type} ${reads} \\\n        --out-dir ${name} \\\n        --threads ${task.cpus} \\\n        --iterations ${params.iterations}\n\nelse\n\n    flye \\\n        --${params.read_type} ${reads} \\\n        --out-dir ${name} \\\n        --threads ${task.cpus} \\\n        --iterations ${params.iterations} \\\n        --asm-coverage ${params.asm_coverage}\n\nfi\n\n\"\"\"\n\n}",
        "nb_lignes_process": 51,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\ndf -h\necho \"\"\nls -lahtr\necho \"\"\necho \"STARTING FLYE\"\necho \"\"\n\nif [[ \"${params.asm_coverage}\" == \"0\" ]]; then\n\n    flye \\\n        --${params.read_type} ${reads} \\\n        --out-dir ${name} \\\n        --threads ${task.cpus} \\\n        --iterations ${params.iterations}\n\nelse\n\n    flye \\\n        --${params.read_type} ${reads} \\\n        --out-dir ${name} \\\n        --threads ${task.cpus} \\\n        --iterations ${params.iterations} \\\n        --asm-coverage ${params.asm_coverage}\n\nfi\n\n\"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "DFP",
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/dfp",
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "DFP",
                "uri": "https://bio.tools/dfp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides a supervised technique able to identify differentially expressed genes, based on the construction of \\emph{Fuzzy Patterns} (FPs). The Fuzzy Patterns are built by means of applying 3 Membership Functions to discretized gene expression values.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/DFP.html"
            },
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "input_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__flye-nf",
        "directive": [
            "container \"${params.container__flye}\"",
            "label \"mem_medium\"",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "publishDir \"${params.output_folder}\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "modify_samplesheet": {
        "name_process": "modify_samplesheet",
        "string_process": " process modify_samplesheet {\n   label 'process_low'\n\n\n   input:\n   path samplesheet from ch_input\n\n   output:\n   path \"samplesheet_validated.csv\" into ch_samplesheet\n\n   script:\n   out = \"samplesheet_validated.csv\"\n\n   \"\"\"\n   modify_samplesheet.py $samplesheet $out\n   \"\"\"\n }",
        "nb_lignes_process": 15,
        "string_script": "   out = \"samplesheet_validated.csv\"\n\n   \"\"\"\n   modify_samplesheet.py $samplesheet $out\n   \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "ch_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_samplesheet"
        ],
        "nb_outputs": 1,
        "name_workflow": "mpozuelo__index_BC",
        "directive": [
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "extraseq": {
        "name_process": "extraseq",
        "string_process": "\nprocess extraseq {\n  tag \"$lane\"\n  label 'process_low'\n  publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'\n\n  input:\n  set val(run), val(lane), val(platform), path(reads), val(bcsize), val(indexsize), val(index2size), val(libsize) from ch_extra\n\n  output:\n  file(\"*.txt\")\n\n  script:\n\n  seqsize = libsize + 1\n\n  \"\"\"\n  zcat ${reads[1]} | awk 'NR % 4 == 2' - | cut -c $seqsize- | sort | uniq -c | sort -nr | head -1000 > \"${run}_${lane}.read2.index.rank.txt\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "  seqsize = libsize + 1\n\n  \"\"\"\n  zcat ${reads[1]} | awk 'NR % 4 == 2' - | cut -c $seqsize- | sort | uniq -c | sort -nr | head -1000 > \"${run}_${lane}.read2.index.rank.txt\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_extra"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mpozuelo__index_BC",
        "directive": [
            "tag \"$lane\"",
            "label 'process_low'",
            "publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n  tag \"$lane\"\n  label 'process_low'\n  publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'\n\n  input:\n  set val(run), val(lane), val(platform), path(reads), val(bcsize), val(indexsize), val(index2size), val(libsize) from ch_index\n\n  output:\n  file(\"*.rank.txt\")\n\n  script:\n\n  \"\"\"\n  zcat ${reads[1]} | awk 'NR % 4 == 2' - | rev > rev_reads.txt\n  cut -c -$indexsize rev_reads.txt | rev | sort > index_sort.txt\n  uniq -c index_sort.txt | sort -nr > \"${run}_${lane}.read2.index.rank.txt\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  zcat ${reads[1]} | awk 'NR % 4 == 2' - | rev > rev_reads.txt\n  cut -c -$indexsize rev_reads.txt | rev | sort > index_sort.txt\n  uniq -c index_sort.txt | sort -nr > \"${run}_${lane}.read2.index.rank.txt\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_index"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mpozuelo__index_BC",
        "directive": [
            "tag \"$lane\"",
            "label 'process_low'",
            "publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "index2": {
        "name_process": "index2",
        "string_process": "\nprocess index2 {\n  tag \"$lane\"\n  label 'process_low'\n  publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'\n\n  input:\n  set val(run), val(lane), val(platform), path(reads), val(bcsize), val(indexsize), val(index2size), val(libsize) from ch_index2\n\n  output:\n  file(\"*.rank.txt\")\n\n  script:\n  idxsize_mod = indexsize.toInteger() + 1\n\n  \"\"\"\n  zcat ${reads[1]} | awk 'NR % 4 == 2' - | rev > rev_reads.txt\n  cut -c $idxsize_mod- rev_reads.txt > indexes.txt\n  cut -c -$index2size indexes.txt | rev | sort > index2_sorted.txt\n  uniq -c index2_sorted.txt | sort -nr > \"${run}_${lane}.read2.index2.rank.txt\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "  idxsize_mod = indexsize.toInteger() + 1\n\n  \"\"\"\n  zcat ${reads[1]} | awk 'NR % 4 == 2' - | rev > rev_reads.txt\n  cut -c $idxsize_mod- rev_reads.txt > indexes.txt\n  cut -c -$index2size indexes.txt | rev | sort > index2_sorted.txt\n  uniq -c index2_sorted.txt | sort -nr > \"${run}_${lane}.read2.index2.rank.txt\"\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_index2"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mpozuelo__index_BC",
        "directive": [
            "tag \"$lane\"",
            "label 'process_low'",
            "publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bc": {
        "name_process": "bc",
        "string_process": "\nprocess bc {\n  tag \"$lane\"\n  label 'process_low'\n  publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'\n\n  input:\n  set val(run), val(lane), val(platform), path(reads), val(bcsize), val(indexsize), val(index2size), val(libsize) from ch_bc\n\n  output:\n  file(\"*.rank.txt\")\n\n  script:\n\n  \"\"\"\n  zcat ${reads[0]} | awk 'NR % 4 == 2' - > reads.txt\n  cut -c 1-$bcsize reads.txt | sort > bc_sorted.txt\n  uniq -c bc_sorted.txt | sort -nr > \"${run}_${lane}.read1.BC.${bcsize}bp.rank.txt\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  zcat ${reads[0]} | awk 'NR % 4 == 2' - > reads.txt\n  cut -c 1-$bcsize reads.txt | sort > bc_sorted.txt\n  uniq -c bc_sorted.txt | sort -nr > \"${run}_${lane}.read1.BC.${bcsize}bp.rank.txt\"\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_bc"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mpozuelo__index_BC",
        "directive": [
            "tag \"$lane\"",
            "label 'process_low'",
            "publishDir \"${cluster_path}02_rfastq/${platform}/${run}/${lane}/barcodes\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}